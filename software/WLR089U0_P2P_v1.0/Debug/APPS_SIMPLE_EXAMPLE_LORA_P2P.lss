
APPS_SIMPLE_EXAMPLE_LORA_P2P.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000175dc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000175dc  000175dc  000275dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000008c  20000000  000175e4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  0003008c  2**0
                  CONTENTS
  4 .bss          0000322c  20000090  00017678  00030090  2**3
                  ALLOC
  5 .stack        00002004  200032bc  0001a8a4  00030090  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
  7 .comment      0000008c  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY
  8 .debug_info   00094210  00000000  00000000  00030140  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000cbb2  00000000  00000000  000c4350  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001d839  00000000  00000000  000d0f02  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001810  00000000  00000000  000ee73b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002578  00000000  00000000  000eff4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00031981  00000000  00000000  000f24c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00033b1a  00000000  00000000  00123e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b43a4  00000000  00000000  0015795e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000508c  00000000  00000000  0020bd04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c0 52 00 20 6d 70 00 00 69 70 00 00 69 70 00 00     .R. mp..ip..ip..
	...
      2c:	69 70 00 00 00 00 00 00 00 00 00 00 69 70 00 00     ip..........ip..
      3c:	69 70 00 00 69 70 00 00 69 70 00 00 f1 51 00 00     ip..ip..ip...Q..
      4c:	ad 4d 00 00 69 70 00 00 69 70 00 00 69 70 00 00     .M..ip..ip..ip..
      5c:	69 70 00 00 7d 56 00 00 8d 56 00 00 9d 56 00 00     ip..}V...V...V..
      6c:	ad 56 00 00 bd 56 00 00 cd 56 00 00 69 70 00 00     .V...V...V..ip..
      7c:	69 70 00 00 69 70 00 00 3d 6c 00 00 4d 6c 00 00     ip..ip..=l..Ml..
      8c:	69 70 00 00 69 70 00 00 5d 6c 00 00 69 70 00 00     ip..ip..]l..ip..
      9c:	69 70 00 00 69 70 00 00 69 70 00 00 25 4d 00 00     ip..ip..ip..%M..
      ac:	69 70 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ip..............
	...

00000400 <__d_nv_mem_start>:
     400:	ffffffff 	.word	0xffffffff
     404:	ffffffff 	.word	0xffffffff
     408:	ffffffff 	.word	0xffffffff
     40c:	ffffffff 	.word	0xffffffff
     410:	ffffffff 	.word	0xffffffff
     414:	ffffffff 	.word	0xffffffff
     418:	ffffffff 	.word	0xffffffff
     41c:	ffffffff 	.word	0xffffffff
     420:	ffffffff 	.word	0xffffffff
     424:	ffffffff 	.word	0xffffffff
     428:	ffffffff 	.word	0xffffffff
     42c:	ffffffff 	.word	0xffffffff
     430:	ffffffff 	.word	0xffffffff
     434:	ffffffff 	.word	0xffffffff
     438:	ffffffff 	.word	0xffffffff
     43c:	ffffffff 	.word	0xffffffff
     440:	ffffffff 	.word	0xffffffff
     444:	ffffffff 	.word	0xffffffff
     448:	ffffffff 	.word	0xffffffff
     44c:	ffffffff 	.word	0xffffffff
     450:	ffffffff 	.word	0xffffffff
     454:	ffffffff 	.word	0xffffffff
     458:	ffffffff 	.word	0xffffffff
     45c:	ffffffff 	.word	0xffffffff
     460:	ffffffff 	.word	0xffffffff
     464:	ffffffff 	.word	0xffffffff
     468:	ffffffff 	.word	0xffffffff
     46c:	ffffffff 	.word	0xffffffff
     470:	ffffffff 	.word	0xffffffff
     474:	ffffffff 	.word	0xffffffff
     478:	ffffffff 	.word	0xffffffff
     47c:	ffffffff 	.word	0xffffffff
     480:	ffffffff 	.word	0xffffffff
     484:	ffffffff 	.word	0xffffffff
     488:	ffffffff 	.word	0xffffffff
     48c:	ffffffff 	.word	0xffffffff
     490:	ffffffff 	.word	0xffffffff
     494:	ffffffff 	.word	0xffffffff
     498:	ffffffff 	.word	0xffffffff
     49c:	ffffffff 	.word	0xffffffff
     4a0:	ffffffff 	.word	0xffffffff
     4a4:	ffffffff 	.word	0xffffffff
     4a8:	ffffffff 	.word	0xffffffff
     4ac:	ffffffff 	.word	0xffffffff
     4b0:	ffffffff 	.word	0xffffffff
     4b4:	ffffffff 	.word	0xffffffff
     4b8:	ffffffff 	.word	0xffffffff
     4bc:	ffffffff 	.word	0xffffffff
     4c0:	ffffffff 	.word	0xffffffff
     4c4:	ffffffff 	.word	0xffffffff
     4c8:	ffffffff 	.word	0xffffffff
     4cc:	ffffffff 	.word	0xffffffff
     4d0:	ffffffff 	.word	0xffffffff
     4d4:	ffffffff 	.word	0xffffffff
     4d8:	ffffffff 	.word	0xffffffff
     4dc:	ffffffff 	.word	0xffffffff
     4e0:	ffffffff 	.word	0xffffffff
     4e4:	ffffffff 	.word	0xffffffff
     4e8:	ffffffff 	.word	0xffffffff
     4ec:	ffffffff 	.word	0xffffffff
     4f0:	ffffffff 	.word	0xffffffff
     4f4:	ffffffff 	.word	0xffffffff
     4f8:	ffffffff 	.word	0xffffffff
     4fc:	ffffffff 	.word	0xffffffff
     500:	ffffffff 	.word	0xffffffff
     504:	ffffffff 	.word	0xffffffff
     508:	ffffffff 	.word	0xffffffff
     50c:	ffffffff 	.word	0xffffffff
     510:	ffffffff 	.word	0xffffffff
     514:	ffffffff 	.word	0xffffffff
     518:	ffffffff 	.word	0xffffffff
     51c:	ffffffff 	.word	0xffffffff
     520:	ffffffff 	.word	0xffffffff
     524:	ffffffff 	.word	0xffffffff
     528:	ffffffff 	.word	0xffffffff
     52c:	ffffffff 	.word	0xffffffff
     530:	ffffffff 	.word	0xffffffff
     534:	ffffffff 	.word	0xffffffff
     538:	ffffffff 	.word	0xffffffff
     53c:	ffffffff 	.word	0xffffffff
     540:	ffffffff 	.word	0xffffffff
     544:	ffffffff 	.word	0xffffffff
     548:	ffffffff 	.word	0xffffffff
     54c:	ffffffff 	.word	0xffffffff
     550:	ffffffff 	.word	0xffffffff
     554:	ffffffff 	.word	0xffffffff
     558:	ffffffff 	.word	0xffffffff
     55c:	ffffffff 	.word	0xffffffff
     560:	ffffffff 	.word	0xffffffff
     564:	ffffffff 	.word	0xffffffff
     568:	ffffffff 	.word	0xffffffff
     56c:	ffffffff 	.word	0xffffffff
     570:	ffffffff 	.word	0xffffffff
     574:	ffffffff 	.word	0xffffffff
     578:	ffffffff 	.word	0xffffffff
     57c:	ffffffff 	.word	0xffffffff
     580:	ffffffff 	.word	0xffffffff
     584:	ffffffff 	.word	0xffffffff
     588:	ffffffff 	.word	0xffffffff
     58c:	ffffffff 	.word	0xffffffff
     590:	ffffffff 	.word	0xffffffff
     594:	ffffffff 	.word	0xffffffff
     598:	ffffffff 	.word	0xffffffff
     59c:	ffffffff 	.word	0xffffffff
     5a0:	ffffffff 	.word	0xffffffff
     5a4:	ffffffff 	.word	0xffffffff
     5a8:	ffffffff 	.word	0xffffffff
     5ac:	ffffffff 	.word	0xffffffff
     5b0:	ffffffff 	.word	0xffffffff
     5b4:	ffffffff 	.word	0xffffffff
     5b8:	ffffffff 	.word	0xffffffff
     5bc:	ffffffff 	.word	0xffffffff
     5c0:	ffffffff 	.word	0xffffffff
     5c4:	ffffffff 	.word	0xffffffff
     5c8:	ffffffff 	.word	0xffffffff
     5cc:	ffffffff 	.word	0xffffffff
     5d0:	ffffffff 	.word	0xffffffff
     5d4:	ffffffff 	.word	0xffffffff
     5d8:	ffffffff 	.word	0xffffffff
     5dc:	ffffffff 	.word	0xffffffff
     5e0:	ffffffff 	.word	0xffffffff
     5e4:	ffffffff 	.word	0xffffffff
     5e8:	ffffffff 	.word	0xffffffff
     5ec:	ffffffff 	.word	0xffffffff
     5f0:	ffffffff 	.word	0xffffffff
     5f4:	ffffffff 	.word	0xffffffff
     5f8:	ffffffff 	.word	0xffffffff
     5fc:	ffffffff 	.word	0xffffffff
     600:	ffffffff 	.word	0xffffffff
     604:	ffffffff 	.word	0xffffffff
     608:	ffffffff 	.word	0xffffffff
     60c:	ffffffff 	.word	0xffffffff
     610:	ffffffff 	.word	0xffffffff
     614:	ffffffff 	.word	0xffffffff
     618:	ffffffff 	.word	0xffffffff
     61c:	ffffffff 	.word	0xffffffff
     620:	ffffffff 	.word	0xffffffff
     624:	ffffffff 	.word	0xffffffff
     628:	ffffffff 	.word	0xffffffff
     62c:	ffffffff 	.word	0xffffffff
     630:	ffffffff 	.word	0xffffffff
     634:	ffffffff 	.word	0xffffffff
     638:	ffffffff 	.word	0xffffffff
     63c:	ffffffff 	.word	0xffffffff
     640:	ffffffff 	.word	0xffffffff
     644:	ffffffff 	.word	0xffffffff
     648:	ffffffff 	.word	0xffffffff
     64c:	ffffffff 	.word	0xffffffff
     650:	ffffffff 	.word	0xffffffff
     654:	ffffffff 	.word	0xffffffff
     658:	ffffffff 	.word	0xffffffff
     65c:	ffffffff 	.word	0xffffffff
     660:	ffffffff 	.word	0xffffffff
     664:	ffffffff 	.word	0xffffffff
     668:	ffffffff 	.word	0xffffffff
     66c:	ffffffff 	.word	0xffffffff
     670:	ffffffff 	.word	0xffffffff
     674:	ffffffff 	.word	0xffffffff
     678:	ffffffff 	.word	0xffffffff
     67c:	ffffffff 	.word	0xffffffff
     680:	ffffffff 	.word	0xffffffff
     684:	ffffffff 	.word	0xffffffff
     688:	ffffffff 	.word	0xffffffff
     68c:	ffffffff 	.word	0xffffffff
     690:	ffffffff 	.word	0xffffffff
     694:	ffffffff 	.word	0xffffffff
     698:	ffffffff 	.word	0xffffffff
     69c:	ffffffff 	.word	0xffffffff
     6a0:	ffffffff 	.word	0xffffffff
     6a4:	ffffffff 	.word	0xffffffff
     6a8:	ffffffff 	.word	0xffffffff
     6ac:	ffffffff 	.word	0xffffffff
     6b0:	ffffffff 	.word	0xffffffff
     6b4:	ffffffff 	.word	0xffffffff
     6b8:	ffffffff 	.word	0xffffffff
     6bc:	ffffffff 	.word	0xffffffff
     6c0:	ffffffff 	.word	0xffffffff
     6c4:	ffffffff 	.word	0xffffffff
     6c8:	ffffffff 	.word	0xffffffff
     6cc:	ffffffff 	.word	0xffffffff
     6d0:	ffffffff 	.word	0xffffffff
     6d4:	ffffffff 	.word	0xffffffff
     6d8:	ffffffff 	.word	0xffffffff
     6dc:	ffffffff 	.word	0xffffffff
     6e0:	ffffffff 	.word	0xffffffff
     6e4:	ffffffff 	.word	0xffffffff
     6e8:	ffffffff 	.word	0xffffffff
     6ec:	ffffffff 	.word	0xffffffff
     6f0:	ffffffff 	.word	0xffffffff
     6f4:	ffffffff 	.word	0xffffffff
     6f8:	ffffffff 	.word	0xffffffff
     6fc:	ffffffff 	.word	0xffffffff
     700:	ffffffff 	.word	0xffffffff
     704:	ffffffff 	.word	0xffffffff
     708:	ffffffff 	.word	0xffffffff
     70c:	ffffffff 	.word	0xffffffff
     710:	ffffffff 	.word	0xffffffff
     714:	ffffffff 	.word	0xffffffff
     718:	ffffffff 	.word	0xffffffff
     71c:	ffffffff 	.word	0xffffffff
     720:	ffffffff 	.word	0xffffffff
     724:	ffffffff 	.word	0xffffffff
     728:	ffffffff 	.word	0xffffffff
     72c:	ffffffff 	.word	0xffffffff
     730:	ffffffff 	.word	0xffffffff
     734:	ffffffff 	.word	0xffffffff
     738:	ffffffff 	.word	0xffffffff
     73c:	ffffffff 	.word	0xffffffff
     740:	ffffffff 	.word	0xffffffff
     744:	ffffffff 	.word	0xffffffff
     748:	ffffffff 	.word	0xffffffff
     74c:	ffffffff 	.word	0xffffffff
     750:	ffffffff 	.word	0xffffffff
     754:	ffffffff 	.word	0xffffffff
     758:	ffffffff 	.word	0xffffffff
     75c:	ffffffff 	.word	0xffffffff
     760:	ffffffff 	.word	0xffffffff
     764:	ffffffff 	.word	0xffffffff
     768:	ffffffff 	.word	0xffffffff
     76c:	ffffffff 	.word	0xffffffff
     770:	ffffffff 	.word	0xffffffff
     774:	ffffffff 	.word	0xffffffff
     778:	ffffffff 	.word	0xffffffff
     77c:	ffffffff 	.word	0xffffffff
     780:	ffffffff 	.word	0xffffffff
     784:	ffffffff 	.word	0xffffffff
     788:	ffffffff 	.word	0xffffffff
     78c:	ffffffff 	.word	0xffffffff
     790:	ffffffff 	.word	0xffffffff
     794:	ffffffff 	.word	0xffffffff
     798:	ffffffff 	.word	0xffffffff
     79c:	ffffffff 	.word	0xffffffff
     7a0:	ffffffff 	.word	0xffffffff
     7a4:	ffffffff 	.word	0xffffffff
     7a8:	ffffffff 	.word	0xffffffff
     7ac:	ffffffff 	.word	0xffffffff
     7b0:	ffffffff 	.word	0xffffffff
     7b4:	ffffffff 	.word	0xffffffff
     7b8:	ffffffff 	.word	0xffffffff
     7bc:	ffffffff 	.word	0xffffffff
     7c0:	ffffffff 	.word	0xffffffff
     7c4:	ffffffff 	.word	0xffffffff
     7c8:	ffffffff 	.word	0xffffffff
     7cc:	ffffffff 	.word	0xffffffff
     7d0:	ffffffff 	.word	0xffffffff
     7d4:	ffffffff 	.word	0xffffffff
     7d8:	ffffffff 	.word	0xffffffff
     7dc:	ffffffff 	.word	0xffffffff
     7e0:	ffffffff 	.word	0xffffffff
     7e4:	ffffffff 	.word	0xffffffff
     7e8:	ffffffff 	.word	0xffffffff
     7ec:	ffffffff 	.word	0xffffffff
     7f0:	ffffffff 	.word	0xffffffff
     7f4:	ffffffff 	.word	0xffffffff
     7f8:	ffffffff 	.word	0xffffffff
     7fc:	ffffffff 	.word	0xffffffff
     800:	ffffffff 	.word	0xffffffff
     804:	ffffffff 	.word	0xffffffff
     808:	ffffffff 	.word	0xffffffff
     80c:	ffffffff 	.word	0xffffffff
     810:	ffffffff 	.word	0xffffffff
     814:	ffffffff 	.word	0xffffffff
     818:	ffffffff 	.word	0xffffffff
     81c:	ffffffff 	.word	0xffffffff
     820:	ffffffff 	.word	0xffffffff
     824:	ffffffff 	.word	0xffffffff
     828:	ffffffff 	.word	0xffffffff
     82c:	ffffffff 	.word	0xffffffff
     830:	ffffffff 	.word	0xffffffff
     834:	ffffffff 	.word	0xffffffff
     838:	ffffffff 	.word	0xffffffff
     83c:	ffffffff 	.word	0xffffffff
     840:	ffffffff 	.word	0xffffffff
     844:	ffffffff 	.word	0xffffffff
     848:	ffffffff 	.word	0xffffffff
     84c:	ffffffff 	.word	0xffffffff
     850:	ffffffff 	.word	0xffffffff
     854:	ffffffff 	.word	0xffffffff
     858:	ffffffff 	.word	0xffffffff
     85c:	ffffffff 	.word	0xffffffff
     860:	ffffffff 	.word	0xffffffff
     864:	ffffffff 	.word	0xffffffff
     868:	ffffffff 	.word	0xffffffff
     86c:	ffffffff 	.word	0xffffffff
     870:	ffffffff 	.word	0xffffffff
     874:	ffffffff 	.word	0xffffffff
     878:	ffffffff 	.word	0xffffffff
     87c:	ffffffff 	.word	0xffffffff
     880:	ffffffff 	.word	0xffffffff
     884:	ffffffff 	.word	0xffffffff
     888:	ffffffff 	.word	0xffffffff
     88c:	ffffffff 	.word	0xffffffff
     890:	ffffffff 	.word	0xffffffff
     894:	ffffffff 	.word	0xffffffff
     898:	ffffffff 	.word	0xffffffff
     89c:	ffffffff 	.word	0xffffffff
     8a0:	ffffffff 	.word	0xffffffff
     8a4:	ffffffff 	.word	0xffffffff
     8a8:	ffffffff 	.word	0xffffffff
     8ac:	ffffffff 	.word	0xffffffff
     8b0:	ffffffff 	.word	0xffffffff
     8b4:	ffffffff 	.word	0xffffffff
     8b8:	ffffffff 	.word	0xffffffff
     8bc:	ffffffff 	.word	0xffffffff
     8c0:	ffffffff 	.word	0xffffffff
     8c4:	ffffffff 	.word	0xffffffff
     8c8:	ffffffff 	.word	0xffffffff
     8cc:	ffffffff 	.word	0xffffffff
     8d0:	ffffffff 	.word	0xffffffff
     8d4:	ffffffff 	.word	0xffffffff
     8d8:	ffffffff 	.word	0xffffffff
     8dc:	ffffffff 	.word	0xffffffff
     8e0:	ffffffff 	.word	0xffffffff
     8e4:	ffffffff 	.word	0xffffffff
     8e8:	ffffffff 	.word	0xffffffff
     8ec:	ffffffff 	.word	0xffffffff
     8f0:	ffffffff 	.word	0xffffffff
     8f4:	ffffffff 	.word	0xffffffff
     8f8:	ffffffff 	.word	0xffffffff
     8fc:	ffffffff 	.word	0xffffffff
     900:	ffffffff 	.word	0xffffffff
     904:	ffffffff 	.word	0xffffffff
     908:	ffffffff 	.word	0xffffffff
     90c:	ffffffff 	.word	0xffffffff
     910:	ffffffff 	.word	0xffffffff
     914:	ffffffff 	.word	0xffffffff
     918:	ffffffff 	.word	0xffffffff
     91c:	ffffffff 	.word	0xffffffff
     920:	ffffffff 	.word	0xffffffff
     924:	ffffffff 	.word	0xffffffff
     928:	ffffffff 	.word	0xffffffff
     92c:	ffffffff 	.word	0xffffffff
     930:	ffffffff 	.word	0xffffffff
     934:	ffffffff 	.word	0xffffffff
     938:	ffffffff 	.word	0xffffffff
     93c:	ffffffff 	.word	0xffffffff
     940:	ffffffff 	.word	0xffffffff
     944:	ffffffff 	.word	0xffffffff
     948:	ffffffff 	.word	0xffffffff
     94c:	ffffffff 	.word	0xffffffff
     950:	ffffffff 	.word	0xffffffff
     954:	ffffffff 	.word	0xffffffff
     958:	ffffffff 	.word	0xffffffff
     95c:	ffffffff 	.word	0xffffffff
     960:	ffffffff 	.word	0xffffffff
     964:	ffffffff 	.word	0xffffffff
     968:	ffffffff 	.word	0xffffffff
     96c:	ffffffff 	.word	0xffffffff
     970:	ffffffff 	.word	0xffffffff
     974:	ffffffff 	.word	0xffffffff
     978:	ffffffff 	.word	0xffffffff
     97c:	ffffffff 	.word	0xffffffff
     980:	ffffffff 	.word	0xffffffff
     984:	ffffffff 	.word	0xffffffff
     988:	ffffffff 	.word	0xffffffff
     98c:	ffffffff 	.word	0xffffffff
     990:	ffffffff 	.word	0xffffffff
     994:	ffffffff 	.word	0xffffffff
     998:	ffffffff 	.word	0xffffffff
     99c:	ffffffff 	.word	0xffffffff
     9a0:	ffffffff 	.word	0xffffffff
     9a4:	ffffffff 	.word	0xffffffff
     9a8:	ffffffff 	.word	0xffffffff
     9ac:	ffffffff 	.word	0xffffffff
     9b0:	ffffffff 	.word	0xffffffff
     9b4:	ffffffff 	.word	0xffffffff
     9b8:	ffffffff 	.word	0xffffffff
     9bc:	ffffffff 	.word	0xffffffff
     9c0:	ffffffff 	.word	0xffffffff
     9c4:	ffffffff 	.word	0xffffffff
     9c8:	ffffffff 	.word	0xffffffff
     9cc:	ffffffff 	.word	0xffffffff
     9d0:	ffffffff 	.word	0xffffffff
     9d4:	ffffffff 	.word	0xffffffff
     9d8:	ffffffff 	.word	0xffffffff
     9dc:	ffffffff 	.word	0xffffffff
     9e0:	ffffffff 	.word	0xffffffff
     9e4:	ffffffff 	.word	0xffffffff
     9e8:	ffffffff 	.word	0xffffffff
     9ec:	ffffffff 	.word	0xffffffff
     9f0:	ffffffff 	.word	0xffffffff
     9f4:	ffffffff 	.word	0xffffffff
     9f8:	ffffffff 	.word	0xffffffff
     9fc:	ffffffff 	.word	0xffffffff
     a00:	ffffffff 	.word	0xffffffff
     a04:	ffffffff 	.word	0xffffffff
     a08:	ffffffff 	.word	0xffffffff
     a0c:	ffffffff 	.word	0xffffffff
     a10:	ffffffff 	.word	0xffffffff
     a14:	ffffffff 	.word	0xffffffff
     a18:	ffffffff 	.word	0xffffffff
     a1c:	ffffffff 	.word	0xffffffff
     a20:	ffffffff 	.word	0xffffffff
     a24:	ffffffff 	.word	0xffffffff
     a28:	ffffffff 	.word	0xffffffff
     a2c:	ffffffff 	.word	0xffffffff
     a30:	ffffffff 	.word	0xffffffff
     a34:	ffffffff 	.word	0xffffffff
     a38:	ffffffff 	.word	0xffffffff
     a3c:	ffffffff 	.word	0xffffffff
     a40:	ffffffff 	.word	0xffffffff
     a44:	ffffffff 	.word	0xffffffff
     a48:	ffffffff 	.word	0xffffffff
     a4c:	ffffffff 	.word	0xffffffff
     a50:	ffffffff 	.word	0xffffffff
     a54:	ffffffff 	.word	0xffffffff
     a58:	ffffffff 	.word	0xffffffff
     a5c:	ffffffff 	.word	0xffffffff
     a60:	ffffffff 	.word	0xffffffff
     a64:	ffffffff 	.word	0xffffffff
     a68:	ffffffff 	.word	0xffffffff
     a6c:	ffffffff 	.word	0xffffffff
     a70:	ffffffff 	.word	0xffffffff
     a74:	ffffffff 	.word	0xffffffff
     a78:	ffffffff 	.word	0xffffffff
     a7c:	ffffffff 	.word	0xffffffff
     a80:	ffffffff 	.word	0xffffffff
     a84:	ffffffff 	.word	0xffffffff
     a88:	ffffffff 	.word	0xffffffff
     a8c:	ffffffff 	.word	0xffffffff
     a90:	ffffffff 	.word	0xffffffff
     a94:	ffffffff 	.word	0xffffffff
     a98:	ffffffff 	.word	0xffffffff
     a9c:	ffffffff 	.word	0xffffffff
     aa0:	ffffffff 	.word	0xffffffff
     aa4:	ffffffff 	.word	0xffffffff
     aa8:	ffffffff 	.word	0xffffffff
     aac:	ffffffff 	.word	0xffffffff
     ab0:	ffffffff 	.word	0xffffffff
     ab4:	ffffffff 	.word	0xffffffff
     ab8:	ffffffff 	.word	0xffffffff
     abc:	ffffffff 	.word	0xffffffff
     ac0:	ffffffff 	.word	0xffffffff
     ac4:	ffffffff 	.word	0xffffffff
     ac8:	ffffffff 	.word	0xffffffff
     acc:	ffffffff 	.word	0xffffffff
     ad0:	ffffffff 	.word	0xffffffff
     ad4:	ffffffff 	.word	0xffffffff
     ad8:	ffffffff 	.word	0xffffffff
     adc:	ffffffff 	.word	0xffffffff
     ae0:	ffffffff 	.word	0xffffffff
     ae4:	ffffffff 	.word	0xffffffff
     ae8:	ffffffff 	.word	0xffffffff
     aec:	ffffffff 	.word	0xffffffff
     af0:	ffffffff 	.word	0xffffffff
     af4:	ffffffff 	.word	0xffffffff
     af8:	ffffffff 	.word	0xffffffff
     afc:	ffffffff 	.word	0xffffffff
     b00:	ffffffff 	.word	0xffffffff
     b04:	ffffffff 	.word	0xffffffff
     b08:	ffffffff 	.word	0xffffffff
     b0c:	ffffffff 	.word	0xffffffff
     b10:	ffffffff 	.word	0xffffffff
     b14:	ffffffff 	.word	0xffffffff
     b18:	ffffffff 	.word	0xffffffff
     b1c:	ffffffff 	.word	0xffffffff
     b20:	ffffffff 	.word	0xffffffff
     b24:	ffffffff 	.word	0xffffffff
     b28:	ffffffff 	.word	0xffffffff
     b2c:	ffffffff 	.word	0xffffffff
     b30:	ffffffff 	.word	0xffffffff
     b34:	ffffffff 	.word	0xffffffff
     b38:	ffffffff 	.word	0xffffffff
     b3c:	ffffffff 	.word	0xffffffff
     b40:	ffffffff 	.word	0xffffffff
     b44:	ffffffff 	.word	0xffffffff
     b48:	ffffffff 	.word	0xffffffff
     b4c:	ffffffff 	.word	0xffffffff
     b50:	ffffffff 	.word	0xffffffff
     b54:	ffffffff 	.word	0xffffffff
     b58:	ffffffff 	.word	0xffffffff
     b5c:	ffffffff 	.word	0xffffffff
     b60:	ffffffff 	.word	0xffffffff
     b64:	ffffffff 	.word	0xffffffff
     b68:	ffffffff 	.word	0xffffffff
     b6c:	ffffffff 	.word	0xffffffff
     b70:	ffffffff 	.word	0xffffffff
     b74:	ffffffff 	.word	0xffffffff
     b78:	ffffffff 	.word	0xffffffff
     b7c:	ffffffff 	.word	0xffffffff
     b80:	ffffffff 	.word	0xffffffff
     b84:	ffffffff 	.word	0xffffffff
     b88:	ffffffff 	.word	0xffffffff
     b8c:	ffffffff 	.word	0xffffffff
     b90:	ffffffff 	.word	0xffffffff
     b94:	ffffffff 	.word	0xffffffff
     b98:	ffffffff 	.word	0xffffffff
     b9c:	ffffffff 	.word	0xffffffff
     ba0:	ffffffff 	.word	0xffffffff
     ba4:	ffffffff 	.word	0xffffffff
     ba8:	ffffffff 	.word	0xffffffff
     bac:	ffffffff 	.word	0xffffffff
     bb0:	ffffffff 	.word	0xffffffff
     bb4:	ffffffff 	.word	0xffffffff
     bb8:	ffffffff 	.word	0xffffffff
     bbc:	ffffffff 	.word	0xffffffff
     bc0:	ffffffff 	.word	0xffffffff
     bc4:	ffffffff 	.word	0xffffffff
     bc8:	ffffffff 	.word	0xffffffff
     bcc:	ffffffff 	.word	0xffffffff
     bd0:	ffffffff 	.word	0xffffffff
     bd4:	ffffffff 	.word	0xffffffff
     bd8:	ffffffff 	.word	0xffffffff
     bdc:	ffffffff 	.word	0xffffffff
     be0:	ffffffff 	.word	0xffffffff
     be4:	ffffffff 	.word	0xffffffff
     be8:	ffffffff 	.word	0xffffffff
     bec:	ffffffff 	.word	0xffffffff
     bf0:	ffffffff 	.word	0xffffffff
     bf4:	ffffffff 	.word	0xffffffff
     bf8:	ffffffff 	.word	0xffffffff
     bfc:	ffffffff 	.word	0xffffffff
     c00:	ffffffff 	.word	0xffffffff
     c04:	ffffffff 	.word	0xffffffff
     c08:	ffffffff 	.word	0xffffffff
     c0c:	ffffffff 	.word	0xffffffff
     c10:	ffffffff 	.word	0xffffffff
     c14:	ffffffff 	.word	0xffffffff
     c18:	ffffffff 	.word	0xffffffff
     c1c:	ffffffff 	.word	0xffffffff
     c20:	ffffffff 	.word	0xffffffff
     c24:	ffffffff 	.word	0xffffffff
     c28:	ffffffff 	.word	0xffffffff
     c2c:	ffffffff 	.word	0xffffffff
     c30:	ffffffff 	.word	0xffffffff
     c34:	ffffffff 	.word	0xffffffff
     c38:	ffffffff 	.word	0xffffffff
     c3c:	ffffffff 	.word	0xffffffff
     c40:	ffffffff 	.word	0xffffffff
     c44:	ffffffff 	.word	0xffffffff
     c48:	ffffffff 	.word	0xffffffff
     c4c:	ffffffff 	.word	0xffffffff
     c50:	ffffffff 	.word	0xffffffff
     c54:	ffffffff 	.word	0xffffffff
     c58:	ffffffff 	.word	0xffffffff
     c5c:	ffffffff 	.word	0xffffffff
     c60:	ffffffff 	.word	0xffffffff
     c64:	ffffffff 	.word	0xffffffff
     c68:	ffffffff 	.word	0xffffffff
     c6c:	ffffffff 	.word	0xffffffff
     c70:	ffffffff 	.word	0xffffffff
     c74:	ffffffff 	.word	0xffffffff
     c78:	ffffffff 	.word	0xffffffff
     c7c:	ffffffff 	.word	0xffffffff
     c80:	ffffffff 	.word	0xffffffff
     c84:	ffffffff 	.word	0xffffffff
     c88:	ffffffff 	.word	0xffffffff
     c8c:	ffffffff 	.word	0xffffffff
     c90:	ffffffff 	.word	0xffffffff
     c94:	ffffffff 	.word	0xffffffff
     c98:	ffffffff 	.word	0xffffffff
     c9c:	ffffffff 	.word	0xffffffff
     ca0:	ffffffff 	.word	0xffffffff
     ca4:	ffffffff 	.word	0xffffffff
     ca8:	ffffffff 	.word	0xffffffff
     cac:	ffffffff 	.word	0xffffffff
     cb0:	ffffffff 	.word	0xffffffff
     cb4:	ffffffff 	.word	0xffffffff
     cb8:	ffffffff 	.word	0xffffffff
     cbc:	ffffffff 	.word	0xffffffff
     cc0:	ffffffff 	.word	0xffffffff
     cc4:	ffffffff 	.word	0xffffffff
     cc8:	ffffffff 	.word	0xffffffff
     ccc:	ffffffff 	.word	0xffffffff
     cd0:	ffffffff 	.word	0xffffffff
     cd4:	ffffffff 	.word	0xffffffff
     cd8:	ffffffff 	.word	0xffffffff
     cdc:	ffffffff 	.word	0xffffffff
     ce0:	ffffffff 	.word	0xffffffff
     ce4:	ffffffff 	.word	0xffffffff
     ce8:	ffffffff 	.word	0xffffffff
     cec:	ffffffff 	.word	0xffffffff
     cf0:	ffffffff 	.word	0xffffffff
     cf4:	ffffffff 	.word	0xffffffff
     cf8:	ffffffff 	.word	0xffffffff
     cfc:	ffffffff 	.word	0xffffffff
     d00:	ffffffff 	.word	0xffffffff
     d04:	ffffffff 	.word	0xffffffff
     d08:	ffffffff 	.word	0xffffffff
     d0c:	ffffffff 	.word	0xffffffff
     d10:	ffffffff 	.word	0xffffffff
     d14:	ffffffff 	.word	0xffffffff
     d18:	ffffffff 	.word	0xffffffff
     d1c:	ffffffff 	.word	0xffffffff
     d20:	ffffffff 	.word	0xffffffff
     d24:	ffffffff 	.word	0xffffffff
     d28:	ffffffff 	.word	0xffffffff
     d2c:	ffffffff 	.word	0xffffffff
     d30:	ffffffff 	.word	0xffffffff
     d34:	ffffffff 	.word	0xffffffff
     d38:	ffffffff 	.word	0xffffffff
     d3c:	ffffffff 	.word	0xffffffff
     d40:	ffffffff 	.word	0xffffffff
     d44:	ffffffff 	.word	0xffffffff
     d48:	ffffffff 	.word	0xffffffff
     d4c:	ffffffff 	.word	0xffffffff
     d50:	ffffffff 	.word	0xffffffff
     d54:	ffffffff 	.word	0xffffffff
     d58:	ffffffff 	.word	0xffffffff
     d5c:	ffffffff 	.word	0xffffffff
     d60:	ffffffff 	.word	0xffffffff
     d64:	ffffffff 	.word	0xffffffff
     d68:	ffffffff 	.word	0xffffffff
     d6c:	ffffffff 	.word	0xffffffff
     d70:	ffffffff 	.word	0xffffffff
     d74:	ffffffff 	.word	0xffffffff
     d78:	ffffffff 	.word	0xffffffff
     d7c:	ffffffff 	.word	0xffffffff
     d80:	ffffffff 	.word	0xffffffff
     d84:	ffffffff 	.word	0xffffffff
     d88:	ffffffff 	.word	0xffffffff
     d8c:	ffffffff 	.word	0xffffffff
     d90:	ffffffff 	.word	0xffffffff
     d94:	ffffffff 	.word	0xffffffff
     d98:	ffffffff 	.word	0xffffffff
     d9c:	ffffffff 	.word	0xffffffff
     da0:	ffffffff 	.word	0xffffffff
     da4:	ffffffff 	.word	0xffffffff
     da8:	ffffffff 	.word	0xffffffff
     dac:	ffffffff 	.word	0xffffffff
     db0:	ffffffff 	.word	0xffffffff
     db4:	ffffffff 	.word	0xffffffff
     db8:	ffffffff 	.word	0xffffffff
     dbc:	ffffffff 	.word	0xffffffff
     dc0:	ffffffff 	.word	0xffffffff
     dc4:	ffffffff 	.word	0xffffffff
     dc8:	ffffffff 	.word	0xffffffff
     dcc:	ffffffff 	.word	0xffffffff
     dd0:	ffffffff 	.word	0xffffffff
     dd4:	ffffffff 	.word	0xffffffff
     dd8:	ffffffff 	.word	0xffffffff
     ddc:	ffffffff 	.word	0xffffffff
     de0:	ffffffff 	.word	0xffffffff
     de4:	ffffffff 	.word	0xffffffff
     de8:	ffffffff 	.word	0xffffffff
     dec:	ffffffff 	.word	0xffffffff
     df0:	ffffffff 	.word	0xffffffff
     df4:	ffffffff 	.word	0xffffffff
     df8:	ffffffff 	.word	0xffffffff
     dfc:	ffffffff 	.word	0xffffffff
     e00:	ffffffff 	.word	0xffffffff
     e04:	ffffffff 	.word	0xffffffff
     e08:	ffffffff 	.word	0xffffffff
     e0c:	ffffffff 	.word	0xffffffff
     e10:	ffffffff 	.word	0xffffffff
     e14:	ffffffff 	.word	0xffffffff
     e18:	ffffffff 	.word	0xffffffff
     e1c:	ffffffff 	.word	0xffffffff
     e20:	ffffffff 	.word	0xffffffff
     e24:	ffffffff 	.word	0xffffffff
     e28:	ffffffff 	.word	0xffffffff
     e2c:	ffffffff 	.word	0xffffffff
     e30:	ffffffff 	.word	0xffffffff
     e34:	ffffffff 	.word	0xffffffff
     e38:	ffffffff 	.word	0xffffffff
     e3c:	ffffffff 	.word	0xffffffff
     e40:	ffffffff 	.word	0xffffffff
     e44:	ffffffff 	.word	0xffffffff
     e48:	ffffffff 	.word	0xffffffff
     e4c:	ffffffff 	.word	0xffffffff
     e50:	ffffffff 	.word	0xffffffff
     e54:	ffffffff 	.word	0xffffffff
     e58:	ffffffff 	.word	0xffffffff
     e5c:	ffffffff 	.word	0xffffffff
     e60:	ffffffff 	.word	0xffffffff
     e64:	ffffffff 	.word	0xffffffff
     e68:	ffffffff 	.word	0xffffffff
     e6c:	ffffffff 	.word	0xffffffff
     e70:	ffffffff 	.word	0xffffffff
     e74:	ffffffff 	.word	0xffffffff
     e78:	ffffffff 	.word	0xffffffff
     e7c:	ffffffff 	.word	0xffffffff
     e80:	ffffffff 	.word	0xffffffff
     e84:	ffffffff 	.word	0xffffffff
     e88:	ffffffff 	.word	0xffffffff
     e8c:	ffffffff 	.word	0xffffffff
     e90:	ffffffff 	.word	0xffffffff
     e94:	ffffffff 	.word	0xffffffff
     e98:	ffffffff 	.word	0xffffffff
     e9c:	ffffffff 	.word	0xffffffff
     ea0:	ffffffff 	.word	0xffffffff
     ea4:	ffffffff 	.word	0xffffffff
     ea8:	ffffffff 	.word	0xffffffff
     eac:	ffffffff 	.word	0xffffffff
     eb0:	ffffffff 	.word	0xffffffff
     eb4:	ffffffff 	.word	0xffffffff
     eb8:	ffffffff 	.word	0xffffffff
     ebc:	ffffffff 	.word	0xffffffff
     ec0:	ffffffff 	.word	0xffffffff
     ec4:	ffffffff 	.word	0xffffffff
     ec8:	ffffffff 	.word	0xffffffff
     ecc:	ffffffff 	.word	0xffffffff
     ed0:	ffffffff 	.word	0xffffffff
     ed4:	ffffffff 	.word	0xffffffff
     ed8:	ffffffff 	.word	0xffffffff
     edc:	ffffffff 	.word	0xffffffff
     ee0:	ffffffff 	.word	0xffffffff
     ee4:	ffffffff 	.word	0xffffffff
     ee8:	ffffffff 	.word	0xffffffff
     eec:	ffffffff 	.word	0xffffffff
     ef0:	ffffffff 	.word	0xffffffff
     ef4:	ffffffff 	.word	0xffffffff
     ef8:	ffffffff 	.word	0xffffffff
     efc:	ffffffff 	.word	0xffffffff
     f00:	ffffffff 	.word	0xffffffff
     f04:	ffffffff 	.word	0xffffffff
     f08:	ffffffff 	.word	0xffffffff
     f0c:	ffffffff 	.word	0xffffffff
     f10:	ffffffff 	.word	0xffffffff
     f14:	ffffffff 	.word	0xffffffff
     f18:	ffffffff 	.word	0xffffffff
     f1c:	ffffffff 	.word	0xffffffff
     f20:	ffffffff 	.word	0xffffffff
     f24:	ffffffff 	.word	0xffffffff
     f28:	ffffffff 	.word	0xffffffff
     f2c:	ffffffff 	.word	0xffffffff
     f30:	ffffffff 	.word	0xffffffff
     f34:	ffffffff 	.word	0xffffffff
     f38:	ffffffff 	.word	0xffffffff
     f3c:	ffffffff 	.word	0xffffffff
     f40:	ffffffff 	.word	0xffffffff
     f44:	ffffffff 	.word	0xffffffff
     f48:	ffffffff 	.word	0xffffffff
     f4c:	ffffffff 	.word	0xffffffff
     f50:	ffffffff 	.word	0xffffffff
     f54:	ffffffff 	.word	0xffffffff
     f58:	ffffffff 	.word	0xffffffff
     f5c:	ffffffff 	.word	0xffffffff
     f60:	ffffffff 	.word	0xffffffff
     f64:	ffffffff 	.word	0xffffffff
     f68:	ffffffff 	.word	0xffffffff
     f6c:	ffffffff 	.word	0xffffffff
     f70:	ffffffff 	.word	0xffffffff
     f74:	ffffffff 	.word	0xffffffff
     f78:	ffffffff 	.word	0xffffffff
     f7c:	ffffffff 	.word	0xffffffff
     f80:	ffffffff 	.word	0xffffffff
     f84:	ffffffff 	.word	0xffffffff
     f88:	ffffffff 	.word	0xffffffff
     f8c:	ffffffff 	.word	0xffffffff
     f90:	ffffffff 	.word	0xffffffff
     f94:	ffffffff 	.word	0xffffffff
     f98:	ffffffff 	.word	0xffffffff
     f9c:	ffffffff 	.word	0xffffffff
     fa0:	ffffffff 	.word	0xffffffff
     fa4:	ffffffff 	.word	0xffffffff
     fa8:	ffffffff 	.word	0xffffffff
     fac:	ffffffff 	.word	0xffffffff
     fb0:	ffffffff 	.word	0xffffffff
     fb4:	ffffffff 	.word	0xffffffff
     fb8:	ffffffff 	.word	0xffffffff
     fbc:	ffffffff 	.word	0xffffffff
     fc0:	ffffffff 	.word	0xffffffff
     fc4:	ffffffff 	.word	0xffffffff
     fc8:	ffffffff 	.word	0xffffffff
     fcc:	ffffffff 	.word	0xffffffff
     fd0:	ffffffff 	.word	0xffffffff
     fd4:	ffffffff 	.word	0xffffffff
     fd8:	ffffffff 	.word	0xffffffff
     fdc:	ffffffff 	.word	0xffffffff
     fe0:	ffffffff 	.word	0xffffffff
     fe4:	ffffffff 	.word	0xffffffff
     fe8:	ffffffff 	.word	0xffffffff
     fec:	ffffffff 	.word	0xffffffff
     ff0:	ffffffff 	.word	0xffffffff
     ff4:	ffffffff 	.word	0xffffffff
     ff8:	ffffffff 	.word	0xffffffff
     ffc:	ffffffff 	.word	0xffffffff
    1000:	ffffffff 	.word	0xffffffff
    1004:	ffffffff 	.word	0xffffffff
    1008:	ffffffff 	.word	0xffffffff
    100c:	ffffffff 	.word	0xffffffff
    1010:	ffffffff 	.word	0xffffffff
    1014:	ffffffff 	.word	0xffffffff
    1018:	ffffffff 	.word	0xffffffff
    101c:	ffffffff 	.word	0xffffffff
    1020:	ffffffff 	.word	0xffffffff
    1024:	ffffffff 	.word	0xffffffff
    1028:	ffffffff 	.word	0xffffffff
    102c:	ffffffff 	.word	0xffffffff
    1030:	ffffffff 	.word	0xffffffff
    1034:	ffffffff 	.word	0xffffffff
    1038:	ffffffff 	.word	0xffffffff
    103c:	ffffffff 	.word	0xffffffff
    1040:	ffffffff 	.word	0xffffffff
    1044:	ffffffff 	.word	0xffffffff
    1048:	ffffffff 	.word	0xffffffff
    104c:	ffffffff 	.word	0xffffffff
    1050:	ffffffff 	.word	0xffffffff
    1054:	ffffffff 	.word	0xffffffff
    1058:	ffffffff 	.word	0xffffffff
    105c:	ffffffff 	.word	0xffffffff
    1060:	ffffffff 	.word	0xffffffff
    1064:	ffffffff 	.word	0xffffffff
    1068:	ffffffff 	.word	0xffffffff
    106c:	ffffffff 	.word	0xffffffff
    1070:	ffffffff 	.word	0xffffffff
    1074:	ffffffff 	.word	0xffffffff
    1078:	ffffffff 	.word	0xffffffff
    107c:	ffffffff 	.word	0xffffffff
    1080:	ffffffff 	.word	0xffffffff
    1084:	ffffffff 	.word	0xffffffff
    1088:	ffffffff 	.word	0xffffffff
    108c:	ffffffff 	.word	0xffffffff
    1090:	ffffffff 	.word	0xffffffff
    1094:	ffffffff 	.word	0xffffffff
    1098:	ffffffff 	.word	0xffffffff
    109c:	ffffffff 	.word	0xffffffff
    10a0:	ffffffff 	.word	0xffffffff
    10a4:	ffffffff 	.word	0xffffffff
    10a8:	ffffffff 	.word	0xffffffff
    10ac:	ffffffff 	.word	0xffffffff
    10b0:	ffffffff 	.word	0xffffffff
    10b4:	ffffffff 	.word	0xffffffff
    10b8:	ffffffff 	.word	0xffffffff
    10bc:	ffffffff 	.word	0xffffffff
    10c0:	ffffffff 	.word	0xffffffff
    10c4:	ffffffff 	.word	0xffffffff
    10c8:	ffffffff 	.word	0xffffffff
    10cc:	ffffffff 	.word	0xffffffff
    10d0:	ffffffff 	.word	0xffffffff
    10d4:	ffffffff 	.word	0xffffffff
    10d8:	ffffffff 	.word	0xffffffff
    10dc:	ffffffff 	.word	0xffffffff
    10e0:	ffffffff 	.word	0xffffffff
    10e4:	ffffffff 	.word	0xffffffff
    10e8:	ffffffff 	.word	0xffffffff
    10ec:	ffffffff 	.word	0xffffffff
    10f0:	ffffffff 	.word	0xffffffff
    10f4:	ffffffff 	.word	0xffffffff
    10f8:	ffffffff 	.word	0xffffffff
    10fc:	ffffffff 	.word	0xffffffff
    1100:	ffffffff 	.word	0xffffffff
    1104:	ffffffff 	.word	0xffffffff
    1108:	ffffffff 	.word	0xffffffff
    110c:	ffffffff 	.word	0xffffffff
    1110:	ffffffff 	.word	0xffffffff
    1114:	ffffffff 	.word	0xffffffff
    1118:	ffffffff 	.word	0xffffffff
    111c:	ffffffff 	.word	0xffffffff
    1120:	ffffffff 	.word	0xffffffff
    1124:	ffffffff 	.word	0xffffffff
    1128:	ffffffff 	.word	0xffffffff
    112c:	ffffffff 	.word	0xffffffff
    1130:	ffffffff 	.word	0xffffffff
    1134:	ffffffff 	.word	0xffffffff
    1138:	ffffffff 	.word	0xffffffff
    113c:	ffffffff 	.word	0xffffffff
    1140:	ffffffff 	.word	0xffffffff
    1144:	ffffffff 	.word	0xffffffff
    1148:	ffffffff 	.word	0xffffffff
    114c:	ffffffff 	.word	0xffffffff
    1150:	ffffffff 	.word	0xffffffff
    1154:	ffffffff 	.word	0xffffffff
    1158:	ffffffff 	.word	0xffffffff
    115c:	ffffffff 	.word	0xffffffff
    1160:	ffffffff 	.word	0xffffffff
    1164:	ffffffff 	.word	0xffffffff
    1168:	ffffffff 	.word	0xffffffff
    116c:	ffffffff 	.word	0xffffffff
    1170:	ffffffff 	.word	0xffffffff
    1174:	ffffffff 	.word	0xffffffff
    1178:	ffffffff 	.word	0xffffffff
    117c:	ffffffff 	.word	0xffffffff
    1180:	ffffffff 	.word	0xffffffff
    1184:	ffffffff 	.word	0xffffffff
    1188:	ffffffff 	.word	0xffffffff
    118c:	ffffffff 	.word	0xffffffff
    1190:	ffffffff 	.word	0xffffffff
    1194:	ffffffff 	.word	0xffffffff
    1198:	ffffffff 	.word	0xffffffff
    119c:	ffffffff 	.word	0xffffffff
    11a0:	ffffffff 	.word	0xffffffff
    11a4:	ffffffff 	.word	0xffffffff
    11a8:	ffffffff 	.word	0xffffffff
    11ac:	ffffffff 	.word	0xffffffff
    11b0:	ffffffff 	.word	0xffffffff
    11b4:	ffffffff 	.word	0xffffffff
    11b8:	ffffffff 	.word	0xffffffff
    11bc:	ffffffff 	.word	0xffffffff
    11c0:	ffffffff 	.word	0xffffffff
    11c4:	ffffffff 	.word	0xffffffff
    11c8:	ffffffff 	.word	0xffffffff
    11cc:	ffffffff 	.word	0xffffffff
    11d0:	ffffffff 	.word	0xffffffff
    11d4:	ffffffff 	.word	0xffffffff
    11d8:	ffffffff 	.word	0xffffffff
    11dc:	ffffffff 	.word	0xffffffff
    11e0:	ffffffff 	.word	0xffffffff
    11e4:	ffffffff 	.word	0xffffffff
    11e8:	ffffffff 	.word	0xffffffff
    11ec:	ffffffff 	.word	0xffffffff
    11f0:	ffffffff 	.word	0xffffffff
    11f4:	ffffffff 	.word	0xffffffff
    11f8:	ffffffff 	.word	0xffffffff
    11fc:	ffffffff 	.word	0xffffffff
    1200:	ffffffff 	.word	0xffffffff
    1204:	ffffffff 	.word	0xffffffff
    1208:	ffffffff 	.word	0xffffffff
    120c:	ffffffff 	.word	0xffffffff
    1210:	ffffffff 	.word	0xffffffff
    1214:	ffffffff 	.word	0xffffffff
    1218:	ffffffff 	.word	0xffffffff
    121c:	ffffffff 	.word	0xffffffff
    1220:	ffffffff 	.word	0xffffffff
    1224:	ffffffff 	.word	0xffffffff
    1228:	ffffffff 	.word	0xffffffff
    122c:	ffffffff 	.word	0xffffffff
    1230:	ffffffff 	.word	0xffffffff
    1234:	ffffffff 	.word	0xffffffff
    1238:	ffffffff 	.word	0xffffffff
    123c:	ffffffff 	.word	0xffffffff
    1240:	ffffffff 	.word	0xffffffff
    1244:	ffffffff 	.word	0xffffffff
    1248:	ffffffff 	.word	0xffffffff
    124c:	ffffffff 	.word	0xffffffff
    1250:	ffffffff 	.word	0xffffffff
    1254:	ffffffff 	.word	0xffffffff
    1258:	ffffffff 	.word	0xffffffff
    125c:	ffffffff 	.word	0xffffffff
    1260:	ffffffff 	.word	0xffffffff
    1264:	ffffffff 	.word	0xffffffff
    1268:	ffffffff 	.word	0xffffffff
    126c:	ffffffff 	.word	0xffffffff
    1270:	ffffffff 	.word	0xffffffff
    1274:	ffffffff 	.word	0xffffffff
    1278:	ffffffff 	.word	0xffffffff
    127c:	ffffffff 	.word	0xffffffff
    1280:	ffffffff 	.word	0xffffffff
    1284:	ffffffff 	.word	0xffffffff
    1288:	ffffffff 	.word	0xffffffff
    128c:	ffffffff 	.word	0xffffffff
    1290:	ffffffff 	.word	0xffffffff
    1294:	ffffffff 	.word	0xffffffff
    1298:	ffffffff 	.word	0xffffffff
    129c:	ffffffff 	.word	0xffffffff
    12a0:	ffffffff 	.word	0xffffffff
    12a4:	ffffffff 	.word	0xffffffff
    12a8:	ffffffff 	.word	0xffffffff
    12ac:	ffffffff 	.word	0xffffffff
    12b0:	ffffffff 	.word	0xffffffff
    12b4:	ffffffff 	.word	0xffffffff
    12b8:	ffffffff 	.word	0xffffffff
    12bc:	ffffffff 	.word	0xffffffff
    12c0:	ffffffff 	.word	0xffffffff
    12c4:	ffffffff 	.word	0xffffffff
    12c8:	ffffffff 	.word	0xffffffff
    12cc:	ffffffff 	.word	0xffffffff
    12d0:	ffffffff 	.word	0xffffffff
    12d4:	ffffffff 	.word	0xffffffff
    12d8:	ffffffff 	.word	0xffffffff
    12dc:	ffffffff 	.word	0xffffffff
    12e0:	ffffffff 	.word	0xffffffff
    12e4:	ffffffff 	.word	0xffffffff
    12e8:	ffffffff 	.word	0xffffffff
    12ec:	ffffffff 	.word	0xffffffff
    12f0:	ffffffff 	.word	0xffffffff
    12f4:	ffffffff 	.word	0xffffffff
    12f8:	ffffffff 	.word	0xffffffff
    12fc:	ffffffff 	.word	0xffffffff
    1300:	ffffffff 	.word	0xffffffff
    1304:	ffffffff 	.word	0xffffffff
    1308:	ffffffff 	.word	0xffffffff
    130c:	ffffffff 	.word	0xffffffff
    1310:	ffffffff 	.word	0xffffffff
    1314:	ffffffff 	.word	0xffffffff
    1318:	ffffffff 	.word	0xffffffff
    131c:	ffffffff 	.word	0xffffffff
    1320:	ffffffff 	.word	0xffffffff
    1324:	ffffffff 	.word	0xffffffff
    1328:	ffffffff 	.word	0xffffffff
    132c:	ffffffff 	.word	0xffffffff
    1330:	ffffffff 	.word	0xffffffff
    1334:	ffffffff 	.word	0xffffffff
    1338:	ffffffff 	.word	0xffffffff
    133c:	ffffffff 	.word	0xffffffff
    1340:	ffffffff 	.word	0xffffffff
    1344:	ffffffff 	.word	0xffffffff
    1348:	ffffffff 	.word	0xffffffff
    134c:	ffffffff 	.word	0xffffffff
    1350:	ffffffff 	.word	0xffffffff
    1354:	ffffffff 	.word	0xffffffff
    1358:	ffffffff 	.word	0xffffffff
    135c:	ffffffff 	.word	0xffffffff
    1360:	ffffffff 	.word	0xffffffff
    1364:	ffffffff 	.word	0xffffffff
    1368:	ffffffff 	.word	0xffffffff
    136c:	ffffffff 	.word	0xffffffff
    1370:	ffffffff 	.word	0xffffffff
    1374:	ffffffff 	.word	0xffffffff
    1378:	ffffffff 	.word	0xffffffff
    137c:	ffffffff 	.word	0xffffffff
    1380:	ffffffff 	.word	0xffffffff
    1384:	ffffffff 	.word	0xffffffff
    1388:	ffffffff 	.word	0xffffffff
    138c:	ffffffff 	.word	0xffffffff
    1390:	ffffffff 	.word	0xffffffff
    1394:	ffffffff 	.word	0xffffffff
    1398:	ffffffff 	.word	0xffffffff
    139c:	ffffffff 	.word	0xffffffff
    13a0:	ffffffff 	.word	0xffffffff
    13a4:	ffffffff 	.word	0xffffffff
    13a8:	ffffffff 	.word	0xffffffff
    13ac:	ffffffff 	.word	0xffffffff
    13b0:	ffffffff 	.word	0xffffffff
    13b4:	ffffffff 	.word	0xffffffff
    13b8:	ffffffff 	.word	0xffffffff
    13bc:	ffffffff 	.word	0xffffffff
    13c0:	ffffffff 	.word	0xffffffff
    13c4:	ffffffff 	.word	0xffffffff
    13c8:	ffffffff 	.word	0xffffffff
    13cc:	ffffffff 	.word	0xffffffff
    13d0:	ffffffff 	.word	0xffffffff
    13d4:	ffffffff 	.word	0xffffffff
    13d8:	ffffffff 	.word	0xffffffff
    13dc:	ffffffff 	.word	0xffffffff
    13e0:	ffffffff 	.word	0xffffffff
    13e4:	ffffffff 	.word	0xffffffff
    13e8:	ffffffff 	.word	0xffffffff
    13ec:	ffffffff 	.word	0xffffffff
    13f0:	ffffffff 	.word	0xffffffff
    13f4:	ffffffff 	.word	0xffffffff
    13f8:	ffffffff 	.word	0xffffffff
    13fc:	ffffffff 	.word	0xffffffff
    1400:	ffffffff 	.word	0xffffffff
    1404:	ffffffff 	.word	0xffffffff
    1408:	ffffffff 	.word	0xffffffff
    140c:	ffffffff 	.word	0xffffffff
    1410:	ffffffff 	.word	0xffffffff
    1414:	ffffffff 	.word	0xffffffff
    1418:	ffffffff 	.word	0xffffffff
    141c:	ffffffff 	.word	0xffffffff
    1420:	ffffffff 	.word	0xffffffff
    1424:	ffffffff 	.word	0xffffffff
    1428:	ffffffff 	.word	0xffffffff
    142c:	ffffffff 	.word	0xffffffff
    1430:	ffffffff 	.word	0xffffffff
    1434:	ffffffff 	.word	0xffffffff
    1438:	ffffffff 	.word	0xffffffff
    143c:	ffffffff 	.word	0xffffffff
    1440:	ffffffff 	.word	0xffffffff
    1444:	ffffffff 	.word	0xffffffff
    1448:	ffffffff 	.word	0xffffffff
    144c:	ffffffff 	.word	0xffffffff
    1450:	ffffffff 	.word	0xffffffff
    1454:	ffffffff 	.word	0xffffffff
    1458:	ffffffff 	.word	0xffffffff
    145c:	ffffffff 	.word	0xffffffff
    1460:	ffffffff 	.word	0xffffffff
    1464:	ffffffff 	.word	0xffffffff
    1468:	ffffffff 	.word	0xffffffff
    146c:	ffffffff 	.word	0xffffffff
    1470:	ffffffff 	.word	0xffffffff
    1474:	ffffffff 	.word	0xffffffff
    1478:	ffffffff 	.word	0xffffffff
    147c:	ffffffff 	.word	0xffffffff
    1480:	ffffffff 	.word	0xffffffff
    1484:	ffffffff 	.word	0xffffffff
    1488:	ffffffff 	.word	0xffffffff
    148c:	ffffffff 	.word	0xffffffff
    1490:	ffffffff 	.word	0xffffffff
    1494:	ffffffff 	.word	0xffffffff
    1498:	ffffffff 	.word	0xffffffff
    149c:	ffffffff 	.word	0xffffffff
    14a0:	ffffffff 	.word	0xffffffff
    14a4:	ffffffff 	.word	0xffffffff
    14a8:	ffffffff 	.word	0xffffffff
    14ac:	ffffffff 	.word	0xffffffff
    14b0:	ffffffff 	.word	0xffffffff
    14b4:	ffffffff 	.word	0xffffffff
    14b8:	ffffffff 	.word	0xffffffff
    14bc:	ffffffff 	.word	0xffffffff
    14c0:	ffffffff 	.word	0xffffffff
    14c4:	ffffffff 	.word	0xffffffff
    14c8:	ffffffff 	.word	0xffffffff
    14cc:	ffffffff 	.word	0xffffffff
    14d0:	ffffffff 	.word	0xffffffff
    14d4:	ffffffff 	.word	0xffffffff
    14d8:	ffffffff 	.word	0xffffffff
    14dc:	ffffffff 	.word	0xffffffff
    14e0:	ffffffff 	.word	0xffffffff
    14e4:	ffffffff 	.word	0xffffffff
    14e8:	ffffffff 	.word	0xffffffff
    14ec:	ffffffff 	.word	0xffffffff
    14f0:	ffffffff 	.word	0xffffffff
    14f4:	ffffffff 	.word	0xffffffff
    14f8:	ffffffff 	.word	0xffffffff
    14fc:	ffffffff 	.word	0xffffffff
    1500:	ffffffff 	.word	0xffffffff
    1504:	ffffffff 	.word	0xffffffff
    1508:	ffffffff 	.word	0xffffffff
    150c:	ffffffff 	.word	0xffffffff
    1510:	ffffffff 	.word	0xffffffff
    1514:	ffffffff 	.word	0xffffffff
    1518:	ffffffff 	.word	0xffffffff
    151c:	ffffffff 	.word	0xffffffff
    1520:	ffffffff 	.word	0xffffffff
    1524:	ffffffff 	.word	0xffffffff
    1528:	ffffffff 	.word	0xffffffff
    152c:	ffffffff 	.word	0xffffffff
    1530:	ffffffff 	.word	0xffffffff
    1534:	ffffffff 	.word	0xffffffff
    1538:	ffffffff 	.word	0xffffffff
    153c:	ffffffff 	.word	0xffffffff
    1540:	ffffffff 	.word	0xffffffff
    1544:	ffffffff 	.word	0xffffffff
    1548:	ffffffff 	.word	0xffffffff
    154c:	ffffffff 	.word	0xffffffff
    1550:	ffffffff 	.word	0xffffffff
    1554:	ffffffff 	.word	0xffffffff
    1558:	ffffffff 	.word	0xffffffff
    155c:	ffffffff 	.word	0xffffffff
    1560:	ffffffff 	.word	0xffffffff
    1564:	ffffffff 	.word	0xffffffff
    1568:	ffffffff 	.word	0xffffffff
    156c:	ffffffff 	.word	0xffffffff
    1570:	ffffffff 	.word	0xffffffff
    1574:	ffffffff 	.word	0xffffffff
    1578:	ffffffff 	.word	0xffffffff
    157c:	ffffffff 	.word	0xffffffff
    1580:	ffffffff 	.word	0xffffffff
    1584:	ffffffff 	.word	0xffffffff
    1588:	ffffffff 	.word	0xffffffff
    158c:	ffffffff 	.word	0xffffffff
    1590:	ffffffff 	.word	0xffffffff
    1594:	ffffffff 	.word	0xffffffff
    1598:	ffffffff 	.word	0xffffffff
    159c:	ffffffff 	.word	0xffffffff
    15a0:	ffffffff 	.word	0xffffffff
    15a4:	ffffffff 	.word	0xffffffff
    15a8:	ffffffff 	.word	0xffffffff
    15ac:	ffffffff 	.word	0xffffffff
    15b0:	ffffffff 	.word	0xffffffff
    15b4:	ffffffff 	.word	0xffffffff
    15b8:	ffffffff 	.word	0xffffffff
    15bc:	ffffffff 	.word	0xffffffff
    15c0:	ffffffff 	.word	0xffffffff
    15c4:	ffffffff 	.word	0xffffffff
    15c8:	ffffffff 	.word	0xffffffff
    15cc:	ffffffff 	.word	0xffffffff
    15d0:	ffffffff 	.word	0xffffffff
    15d4:	ffffffff 	.word	0xffffffff
    15d8:	ffffffff 	.word	0xffffffff
    15dc:	ffffffff 	.word	0xffffffff
    15e0:	ffffffff 	.word	0xffffffff
    15e4:	ffffffff 	.word	0xffffffff
    15e8:	ffffffff 	.word	0xffffffff
    15ec:	ffffffff 	.word	0xffffffff
    15f0:	ffffffff 	.word	0xffffffff
    15f4:	ffffffff 	.word	0xffffffff
    15f8:	ffffffff 	.word	0xffffffff
    15fc:	ffffffff 	.word	0xffffffff
    1600:	ffffffff 	.word	0xffffffff
    1604:	ffffffff 	.word	0xffffffff
    1608:	ffffffff 	.word	0xffffffff
    160c:	ffffffff 	.word	0xffffffff
    1610:	ffffffff 	.word	0xffffffff
    1614:	ffffffff 	.word	0xffffffff
    1618:	ffffffff 	.word	0xffffffff
    161c:	ffffffff 	.word	0xffffffff
    1620:	ffffffff 	.word	0xffffffff
    1624:	ffffffff 	.word	0xffffffff
    1628:	ffffffff 	.word	0xffffffff
    162c:	ffffffff 	.word	0xffffffff
    1630:	ffffffff 	.word	0xffffffff
    1634:	ffffffff 	.word	0xffffffff
    1638:	ffffffff 	.word	0xffffffff
    163c:	ffffffff 	.word	0xffffffff
    1640:	ffffffff 	.word	0xffffffff
    1644:	ffffffff 	.word	0xffffffff
    1648:	ffffffff 	.word	0xffffffff
    164c:	ffffffff 	.word	0xffffffff
    1650:	ffffffff 	.word	0xffffffff
    1654:	ffffffff 	.word	0xffffffff
    1658:	ffffffff 	.word	0xffffffff
    165c:	ffffffff 	.word	0xffffffff
    1660:	ffffffff 	.word	0xffffffff
    1664:	ffffffff 	.word	0xffffffff
    1668:	ffffffff 	.word	0xffffffff
    166c:	ffffffff 	.word	0xffffffff
    1670:	ffffffff 	.word	0xffffffff
    1674:	ffffffff 	.word	0xffffffff
    1678:	ffffffff 	.word	0xffffffff
    167c:	ffffffff 	.word	0xffffffff
    1680:	ffffffff 	.word	0xffffffff
    1684:	ffffffff 	.word	0xffffffff
    1688:	ffffffff 	.word	0xffffffff
    168c:	ffffffff 	.word	0xffffffff
    1690:	ffffffff 	.word	0xffffffff
    1694:	ffffffff 	.word	0xffffffff
    1698:	ffffffff 	.word	0xffffffff
    169c:	ffffffff 	.word	0xffffffff
    16a0:	ffffffff 	.word	0xffffffff
    16a4:	ffffffff 	.word	0xffffffff
    16a8:	ffffffff 	.word	0xffffffff
    16ac:	ffffffff 	.word	0xffffffff
    16b0:	ffffffff 	.word	0xffffffff
    16b4:	ffffffff 	.word	0xffffffff
    16b8:	ffffffff 	.word	0xffffffff
    16bc:	ffffffff 	.word	0xffffffff
    16c0:	ffffffff 	.word	0xffffffff
    16c4:	ffffffff 	.word	0xffffffff
    16c8:	ffffffff 	.word	0xffffffff
    16cc:	ffffffff 	.word	0xffffffff
    16d0:	ffffffff 	.word	0xffffffff
    16d4:	ffffffff 	.word	0xffffffff
    16d8:	ffffffff 	.word	0xffffffff
    16dc:	ffffffff 	.word	0xffffffff
    16e0:	ffffffff 	.word	0xffffffff
    16e4:	ffffffff 	.word	0xffffffff
    16e8:	ffffffff 	.word	0xffffffff
    16ec:	ffffffff 	.word	0xffffffff
    16f0:	ffffffff 	.word	0xffffffff
    16f4:	ffffffff 	.word	0xffffffff
    16f8:	ffffffff 	.word	0xffffffff
    16fc:	ffffffff 	.word	0xffffffff
    1700:	ffffffff 	.word	0xffffffff
    1704:	ffffffff 	.word	0xffffffff
    1708:	ffffffff 	.word	0xffffffff
    170c:	ffffffff 	.word	0xffffffff
    1710:	ffffffff 	.word	0xffffffff
    1714:	ffffffff 	.word	0xffffffff
    1718:	ffffffff 	.word	0xffffffff
    171c:	ffffffff 	.word	0xffffffff
    1720:	ffffffff 	.word	0xffffffff
    1724:	ffffffff 	.word	0xffffffff
    1728:	ffffffff 	.word	0xffffffff
    172c:	ffffffff 	.word	0xffffffff
    1730:	ffffffff 	.word	0xffffffff
    1734:	ffffffff 	.word	0xffffffff
    1738:	ffffffff 	.word	0xffffffff
    173c:	ffffffff 	.word	0xffffffff
    1740:	ffffffff 	.word	0xffffffff
    1744:	ffffffff 	.word	0xffffffff
    1748:	ffffffff 	.word	0xffffffff
    174c:	ffffffff 	.word	0xffffffff
    1750:	ffffffff 	.word	0xffffffff
    1754:	ffffffff 	.word	0xffffffff
    1758:	ffffffff 	.word	0xffffffff
    175c:	ffffffff 	.word	0xffffffff
    1760:	ffffffff 	.word	0xffffffff
    1764:	ffffffff 	.word	0xffffffff
    1768:	ffffffff 	.word	0xffffffff
    176c:	ffffffff 	.word	0xffffffff
    1770:	ffffffff 	.word	0xffffffff
    1774:	ffffffff 	.word	0xffffffff
    1778:	ffffffff 	.word	0xffffffff
    177c:	ffffffff 	.word	0xffffffff
    1780:	ffffffff 	.word	0xffffffff
    1784:	ffffffff 	.word	0xffffffff
    1788:	ffffffff 	.word	0xffffffff
    178c:	ffffffff 	.word	0xffffffff
    1790:	ffffffff 	.word	0xffffffff
    1794:	ffffffff 	.word	0xffffffff
    1798:	ffffffff 	.word	0xffffffff
    179c:	ffffffff 	.word	0xffffffff
    17a0:	ffffffff 	.word	0xffffffff
    17a4:	ffffffff 	.word	0xffffffff
    17a8:	ffffffff 	.word	0xffffffff
    17ac:	ffffffff 	.word	0xffffffff
    17b0:	ffffffff 	.word	0xffffffff
    17b4:	ffffffff 	.word	0xffffffff
    17b8:	ffffffff 	.word	0xffffffff
    17bc:	ffffffff 	.word	0xffffffff
    17c0:	ffffffff 	.word	0xffffffff
    17c4:	ffffffff 	.word	0xffffffff
    17c8:	ffffffff 	.word	0xffffffff
    17cc:	ffffffff 	.word	0xffffffff
    17d0:	ffffffff 	.word	0xffffffff
    17d4:	ffffffff 	.word	0xffffffff
    17d8:	ffffffff 	.word	0xffffffff
    17dc:	ffffffff 	.word	0xffffffff
    17e0:	ffffffff 	.word	0xffffffff
    17e4:	ffffffff 	.word	0xffffffff
    17e8:	ffffffff 	.word	0xffffffff
    17ec:	ffffffff 	.word	0xffffffff
    17f0:	ffffffff 	.word	0xffffffff
    17f4:	ffffffff 	.word	0xffffffff
    17f8:	ffffffff 	.word	0xffffffff
    17fc:	ffffffff 	.word	0xffffffff
    1800:	ffffffff 	.word	0xffffffff
    1804:	ffffffff 	.word	0xffffffff
    1808:	ffffffff 	.word	0xffffffff
    180c:	ffffffff 	.word	0xffffffff
    1810:	ffffffff 	.word	0xffffffff
    1814:	ffffffff 	.word	0xffffffff
    1818:	ffffffff 	.word	0xffffffff
    181c:	ffffffff 	.word	0xffffffff
    1820:	ffffffff 	.word	0xffffffff
    1824:	ffffffff 	.word	0xffffffff
    1828:	ffffffff 	.word	0xffffffff
    182c:	ffffffff 	.word	0xffffffff
    1830:	ffffffff 	.word	0xffffffff
    1834:	ffffffff 	.word	0xffffffff
    1838:	ffffffff 	.word	0xffffffff
    183c:	ffffffff 	.word	0xffffffff
    1840:	ffffffff 	.word	0xffffffff
    1844:	ffffffff 	.word	0xffffffff
    1848:	ffffffff 	.word	0xffffffff
    184c:	ffffffff 	.word	0xffffffff
    1850:	ffffffff 	.word	0xffffffff
    1854:	ffffffff 	.word	0xffffffff
    1858:	ffffffff 	.word	0xffffffff
    185c:	ffffffff 	.word	0xffffffff
    1860:	ffffffff 	.word	0xffffffff
    1864:	ffffffff 	.word	0xffffffff
    1868:	ffffffff 	.word	0xffffffff
    186c:	ffffffff 	.word	0xffffffff
    1870:	ffffffff 	.word	0xffffffff
    1874:	ffffffff 	.word	0xffffffff
    1878:	ffffffff 	.word	0xffffffff
    187c:	ffffffff 	.word	0xffffffff
    1880:	ffffffff 	.word	0xffffffff
    1884:	ffffffff 	.word	0xffffffff
    1888:	ffffffff 	.word	0xffffffff
    188c:	ffffffff 	.word	0xffffffff
    1890:	ffffffff 	.word	0xffffffff
    1894:	ffffffff 	.word	0xffffffff
    1898:	ffffffff 	.word	0xffffffff
    189c:	ffffffff 	.word	0xffffffff
    18a0:	ffffffff 	.word	0xffffffff
    18a4:	ffffffff 	.word	0xffffffff
    18a8:	ffffffff 	.word	0xffffffff
    18ac:	ffffffff 	.word	0xffffffff
    18b0:	ffffffff 	.word	0xffffffff
    18b4:	ffffffff 	.word	0xffffffff
    18b8:	ffffffff 	.word	0xffffffff
    18bc:	ffffffff 	.word	0xffffffff
    18c0:	ffffffff 	.word	0xffffffff
    18c4:	ffffffff 	.word	0xffffffff
    18c8:	ffffffff 	.word	0xffffffff
    18cc:	ffffffff 	.word	0xffffffff
    18d0:	ffffffff 	.word	0xffffffff
    18d4:	ffffffff 	.word	0xffffffff
    18d8:	ffffffff 	.word	0xffffffff
    18dc:	ffffffff 	.word	0xffffffff
    18e0:	ffffffff 	.word	0xffffffff
    18e4:	ffffffff 	.word	0xffffffff
    18e8:	ffffffff 	.word	0xffffffff
    18ec:	ffffffff 	.word	0xffffffff
    18f0:	ffffffff 	.word	0xffffffff
    18f4:	ffffffff 	.word	0xffffffff
    18f8:	ffffffff 	.word	0xffffffff
    18fc:	ffffffff 	.word	0xffffffff
    1900:	ffffffff 	.word	0xffffffff
    1904:	ffffffff 	.word	0xffffffff
    1908:	ffffffff 	.word	0xffffffff
    190c:	ffffffff 	.word	0xffffffff
    1910:	ffffffff 	.word	0xffffffff
    1914:	ffffffff 	.word	0xffffffff
    1918:	ffffffff 	.word	0xffffffff
    191c:	ffffffff 	.word	0xffffffff
    1920:	ffffffff 	.word	0xffffffff
    1924:	ffffffff 	.word	0xffffffff
    1928:	ffffffff 	.word	0xffffffff
    192c:	ffffffff 	.word	0xffffffff
    1930:	ffffffff 	.word	0xffffffff
    1934:	ffffffff 	.word	0xffffffff
    1938:	ffffffff 	.word	0xffffffff
    193c:	ffffffff 	.word	0xffffffff
    1940:	ffffffff 	.word	0xffffffff
    1944:	ffffffff 	.word	0xffffffff
    1948:	ffffffff 	.word	0xffffffff
    194c:	ffffffff 	.word	0xffffffff
    1950:	ffffffff 	.word	0xffffffff
    1954:	ffffffff 	.word	0xffffffff
    1958:	ffffffff 	.word	0xffffffff
    195c:	ffffffff 	.word	0xffffffff
    1960:	ffffffff 	.word	0xffffffff
    1964:	ffffffff 	.word	0xffffffff
    1968:	ffffffff 	.word	0xffffffff
    196c:	ffffffff 	.word	0xffffffff
    1970:	ffffffff 	.word	0xffffffff
    1974:	ffffffff 	.word	0xffffffff
    1978:	ffffffff 	.word	0xffffffff
    197c:	ffffffff 	.word	0xffffffff
    1980:	ffffffff 	.word	0xffffffff
    1984:	ffffffff 	.word	0xffffffff
    1988:	ffffffff 	.word	0xffffffff
    198c:	ffffffff 	.word	0xffffffff
    1990:	ffffffff 	.word	0xffffffff
    1994:	ffffffff 	.word	0xffffffff
    1998:	ffffffff 	.word	0xffffffff
    199c:	ffffffff 	.word	0xffffffff
    19a0:	ffffffff 	.word	0xffffffff
    19a4:	ffffffff 	.word	0xffffffff
    19a8:	ffffffff 	.word	0xffffffff
    19ac:	ffffffff 	.word	0xffffffff
    19b0:	ffffffff 	.word	0xffffffff
    19b4:	ffffffff 	.word	0xffffffff
    19b8:	ffffffff 	.word	0xffffffff
    19bc:	ffffffff 	.word	0xffffffff
    19c0:	ffffffff 	.word	0xffffffff
    19c4:	ffffffff 	.word	0xffffffff
    19c8:	ffffffff 	.word	0xffffffff
    19cc:	ffffffff 	.word	0xffffffff
    19d0:	ffffffff 	.word	0xffffffff
    19d4:	ffffffff 	.word	0xffffffff
    19d8:	ffffffff 	.word	0xffffffff
    19dc:	ffffffff 	.word	0xffffffff
    19e0:	ffffffff 	.word	0xffffffff
    19e4:	ffffffff 	.word	0xffffffff
    19e8:	ffffffff 	.word	0xffffffff
    19ec:	ffffffff 	.word	0xffffffff
    19f0:	ffffffff 	.word	0xffffffff
    19f4:	ffffffff 	.word	0xffffffff
    19f8:	ffffffff 	.word	0xffffffff
    19fc:	ffffffff 	.word	0xffffffff
    1a00:	ffffffff 	.word	0xffffffff
    1a04:	ffffffff 	.word	0xffffffff
    1a08:	ffffffff 	.word	0xffffffff
    1a0c:	ffffffff 	.word	0xffffffff
    1a10:	ffffffff 	.word	0xffffffff
    1a14:	ffffffff 	.word	0xffffffff
    1a18:	ffffffff 	.word	0xffffffff
    1a1c:	ffffffff 	.word	0xffffffff
    1a20:	ffffffff 	.word	0xffffffff
    1a24:	ffffffff 	.word	0xffffffff
    1a28:	ffffffff 	.word	0xffffffff
    1a2c:	ffffffff 	.word	0xffffffff
    1a30:	ffffffff 	.word	0xffffffff
    1a34:	ffffffff 	.word	0xffffffff
    1a38:	ffffffff 	.word	0xffffffff
    1a3c:	ffffffff 	.word	0xffffffff
    1a40:	ffffffff 	.word	0xffffffff
    1a44:	ffffffff 	.word	0xffffffff
    1a48:	ffffffff 	.word	0xffffffff
    1a4c:	ffffffff 	.word	0xffffffff
    1a50:	ffffffff 	.word	0xffffffff
    1a54:	ffffffff 	.word	0xffffffff
    1a58:	ffffffff 	.word	0xffffffff
    1a5c:	ffffffff 	.word	0xffffffff
    1a60:	ffffffff 	.word	0xffffffff
    1a64:	ffffffff 	.word	0xffffffff
    1a68:	ffffffff 	.word	0xffffffff
    1a6c:	ffffffff 	.word	0xffffffff
    1a70:	ffffffff 	.word	0xffffffff
    1a74:	ffffffff 	.word	0xffffffff
    1a78:	ffffffff 	.word	0xffffffff
    1a7c:	ffffffff 	.word	0xffffffff
    1a80:	ffffffff 	.word	0xffffffff
    1a84:	ffffffff 	.word	0xffffffff
    1a88:	ffffffff 	.word	0xffffffff
    1a8c:	ffffffff 	.word	0xffffffff
    1a90:	ffffffff 	.word	0xffffffff
    1a94:	ffffffff 	.word	0xffffffff
    1a98:	ffffffff 	.word	0xffffffff
    1a9c:	ffffffff 	.word	0xffffffff
    1aa0:	ffffffff 	.word	0xffffffff
    1aa4:	ffffffff 	.word	0xffffffff
    1aa8:	ffffffff 	.word	0xffffffff
    1aac:	ffffffff 	.word	0xffffffff
    1ab0:	ffffffff 	.word	0xffffffff
    1ab4:	ffffffff 	.word	0xffffffff
    1ab8:	ffffffff 	.word	0xffffffff
    1abc:	ffffffff 	.word	0xffffffff
    1ac0:	ffffffff 	.word	0xffffffff
    1ac4:	ffffffff 	.word	0xffffffff
    1ac8:	ffffffff 	.word	0xffffffff
    1acc:	ffffffff 	.word	0xffffffff
    1ad0:	ffffffff 	.word	0xffffffff
    1ad4:	ffffffff 	.word	0xffffffff
    1ad8:	ffffffff 	.word	0xffffffff
    1adc:	ffffffff 	.word	0xffffffff
    1ae0:	ffffffff 	.word	0xffffffff
    1ae4:	ffffffff 	.word	0xffffffff
    1ae8:	ffffffff 	.word	0xffffffff
    1aec:	ffffffff 	.word	0xffffffff
    1af0:	ffffffff 	.word	0xffffffff
    1af4:	ffffffff 	.word	0xffffffff
    1af8:	ffffffff 	.word	0xffffffff
    1afc:	ffffffff 	.word	0xffffffff
    1b00:	ffffffff 	.word	0xffffffff
    1b04:	ffffffff 	.word	0xffffffff
    1b08:	ffffffff 	.word	0xffffffff
    1b0c:	ffffffff 	.word	0xffffffff
    1b10:	ffffffff 	.word	0xffffffff
    1b14:	ffffffff 	.word	0xffffffff
    1b18:	ffffffff 	.word	0xffffffff
    1b1c:	ffffffff 	.word	0xffffffff
    1b20:	ffffffff 	.word	0xffffffff
    1b24:	ffffffff 	.word	0xffffffff
    1b28:	ffffffff 	.word	0xffffffff
    1b2c:	ffffffff 	.word	0xffffffff
    1b30:	ffffffff 	.word	0xffffffff
    1b34:	ffffffff 	.word	0xffffffff
    1b38:	ffffffff 	.word	0xffffffff
    1b3c:	ffffffff 	.word	0xffffffff
    1b40:	ffffffff 	.word	0xffffffff
    1b44:	ffffffff 	.word	0xffffffff
    1b48:	ffffffff 	.word	0xffffffff
    1b4c:	ffffffff 	.word	0xffffffff
    1b50:	ffffffff 	.word	0xffffffff
    1b54:	ffffffff 	.word	0xffffffff
    1b58:	ffffffff 	.word	0xffffffff
    1b5c:	ffffffff 	.word	0xffffffff
    1b60:	ffffffff 	.word	0xffffffff
    1b64:	ffffffff 	.word	0xffffffff
    1b68:	ffffffff 	.word	0xffffffff
    1b6c:	ffffffff 	.word	0xffffffff
    1b70:	ffffffff 	.word	0xffffffff
    1b74:	ffffffff 	.word	0xffffffff
    1b78:	ffffffff 	.word	0xffffffff
    1b7c:	ffffffff 	.word	0xffffffff
    1b80:	ffffffff 	.word	0xffffffff
    1b84:	ffffffff 	.word	0xffffffff
    1b88:	ffffffff 	.word	0xffffffff
    1b8c:	ffffffff 	.word	0xffffffff
    1b90:	ffffffff 	.word	0xffffffff
    1b94:	ffffffff 	.word	0xffffffff
    1b98:	ffffffff 	.word	0xffffffff
    1b9c:	ffffffff 	.word	0xffffffff
    1ba0:	ffffffff 	.word	0xffffffff
    1ba4:	ffffffff 	.word	0xffffffff
    1ba8:	ffffffff 	.word	0xffffffff
    1bac:	ffffffff 	.word	0xffffffff
    1bb0:	ffffffff 	.word	0xffffffff
    1bb4:	ffffffff 	.word	0xffffffff
    1bb8:	ffffffff 	.word	0xffffffff
    1bbc:	ffffffff 	.word	0xffffffff
    1bc0:	ffffffff 	.word	0xffffffff
    1bc4:	ffffffff 	.word	0xffffffff
    1bc8:	ffffffff 	.word	0xffffffff
    1bcc:	ffffffff 	.word	0xffffffff
    1bd0:	ffffffff 	.word	0xffffffff
    1bd4:	ffffffff 	.word	0xffffffff
    1bd8:	ffffffff 	.word	0xffffffff
    1bdc:	ffffffff 	.word	0xffffffff
    1be0:	ffffffff 	.word	0xffffffff
    1be4:	ffffffff 	.word	0xffffffff
    1be8:	ffffffff 	.word	0xffffffff
    1bec:	ffffffff 	.word	0xffffffff
    1bf0:	ffffffff 	.word	0xffffffff
    1bf4:	ffffffff 	.word	0xffffffff
    1bf8:	ffffffff 	.word	0xffffffff
    1bfc:	ffffffff 	.word	0xffffffff
    1c00:	ffffffff 	.word	0xffffffff
    1c04:	ffffffff 	.word	0xffffffff
    1c08:	ffffffff 	.word	0xffffffff
    1c0c:	ffffffff 	.word	0xffffffff
    1c10:	ffffffff 	.word	0xffffffff
    1c14:	ffffffff 	.word	0xffffffff
    1c18:	ffffffff 	.word	0xffffffff
    1c1c:	ffffffff 	.word	0xffffffff
    1c20:	ffffffff 	.word	0xffffffff
    1c24:	ffffffff 	.word	0xffffffff
    1c28:	ffffffff 	.word	0xffffffff
    1c2c:	ffffffff 	.word	0xffffffff
    1c30:	ffffffff 	.word	0xffffffff
    1c34:	ffffffff 	.word	0xffffffff
    1c38:	ffffffff 	.word	0xffffffff
    1c3c:	ffffffff 	.word	0xffffffff
    1c40:	ffffffff 	.word	0xffffffff
    1c44:	ffffffff 	.word	0xffffffff
    1c48:	ffffffff 	.word	0xffffffff
    1c4c:	ffffffff 	.word	0xffffffff
    1c50:	ffffffff 	.word	0xffffffff
    1c54:	ffffffff 	.word	0xffffffff
    1c58:	ffffffff 	.word	0xffffffff
    1c5c:	ffffffff 	.word	0xffffffff
    1c60:	ffffffff 	.word	0xffffffff
    1c64:	ffffffff 	.word	0xffffffff
    1c68:	ffffffff 	.word	0xffffffff
    1c6c:	ffffffff 	.word	0xffffffff
    1c70:	ffffffff 	.word	0xffffffff
    1c74:	ffffffff 	.word	0xffffffff
    1c78:	ffffffff 	.word	0xffffffff
    1c7c:	ffffffff 	.word	0xffffffff
    1c80:	ffffffff 	.word	0xffffffff
    1c84:	ffffffff 	.word	0xffffffff
    1c88:	ffffffff 	.word	0xffffffff
    1c8c:	ffffffff 	.word	0xffffffff
    1c90:	ffffffff 	.word	0xffffffff
    1c94:	ffffffff 	.word	0xffffffff
    1c98:	ffffffff 	.word	0xffffffff
    1c9c:	ffffffff 	.word	0xffffffff
    1ca0:	ffffffff 	.word	0xffffffff
    1ca4:	ffffffff 	.word	0xffffffff
    1ca8:	ffffffff 	.word	0xffffffff
    1cac:	ffffffff 	.word	0xffffffff
    1cb0:	ffffffff 	.word	0xffffffff
    1cb4:	ffffffff 	.word	0xffffffff
    1cb8:	ffffffff 	.word	0xffffffff
    1cbc:	ffffffff 	.word	0xffffffff
    1cc0:	ffffffff 	.word	0xffffffff
    1cc4:	ffffffff 	.word	0xffffffff
    1cc8:	ffffffff 	.word	0xffffffff
    1ccc:	ffffffff 	.word	0xffffffff
    1cd0:	ffffffff 	.word	0xffffffff
    1cd4:	ffffffff 	.word	0xffffffff
    1cd8:	ffffffff 	.word	0xffffffff
    1cdc:	ffffffff 	.word	0xffffffff
    1ce0:	ffffffff 	.word	0xffffffff
    1ce4:	ffffffff 	.word	0xffffffff
    1ce8:	ffffffff 	.word	0xffffffff
    1cec:	ffffffff 	.word	0xffffffff
    1cf0:	ffffffff 	.word	0xffffffff
    1cf4:	ffffffff 	.word	0xffffffff
    1cf8:	ffffffff 	.word	0xffffffff
    1cfc:	ffffffff 	.word	0xffffffff
    1d00:	ffffffff 	.word	0xffffffff
    1d04:	ffffffff 	.word	0xffffffff
    1d08:	ffffffff 	.word	0xffffffff
    1d0c:	ffffffff 	.word	0xffffffff
    1d10:	ffffffff 	.word	0xffffffff
    1d14:	ffffffff 	.word	0xffffffff
    1d18:	ffffffff 	.word	0xffffffff
    1d1c:	ffffffff 	.word	0xffffffff
    1d20:	ffffffff 	.word	0xffffffff
    1d24:	ffffffff 	.word	0xffffffff
    1d28:	ffffffff 	.word	0xffffffff
    1d2c:	ffffffff 	.word	0xffffffff
    1d30:	ffffffff 	.word	0xffffffff
    1d34:	ffffffff 	.word	0xffffffff
    1d38:	ffffffff 	.word	0xffffffff
    1d3c:	ffffffff 	.word	0xffffffff
    1d40:	ffffffff 	.word	0xffffffff
    1d44:	ffffffff 	.word	0xffffffff
    1d48:	ffffffff 	.word	0xffffffff
    1d4c:	ffffffff 	.word	0xffffffff
    1d50:	ffffffff 	.word	0xffffffff
    1d54:	ffffffff 	.word	0xffffffff
    1d58:	ffffffff 	.word	0xffffffff
    1d5c:	ffffffff 	.word	0xffffffff
    1d60:	ffffffff 	.word	0xffffffff
    1d64:	ffffffff 	.word	0xffffffff
    1d68:	ffffffff 	.word	0xffffffff
    1d6c:	ffffffff 	.word	0xffffffff
    1d70:	ffffffff 	.word	0xffffffff
    1d74:	ffffffff 	.word	0xffffffff
    1d78:	ffffffff 	.word	0xffffffff
    1d7c:	ffffffff 	.word	0xffffffff
    1d80:	ffffffff 	.word	0xffffffff
    1d84:	ffffffff 	.word	0xffffffff
    1d88:	ffffffff 	.word	0xffffffff
    1d8c:	ffffffff 	.word	0xffffffff
    1d90:	ffffffff 	.word	0xffffffff
    1d94:	ffffffff 	.word	0xffffffff
    1d98:	ffffffff 	.word	0xffffffff
    1d9c:	ffffffff 	.word	0xffffffff
    1da0:	ffffffff 	.word	0xffffffff
    1da4:	ffffffff 	.word	0xffffffff
    1da8:	ffffffff 	.word	0xffffffff
    1dac:	ffffffff 	.word	0xffffffff
    1db0:	ffffffff 	.word	0xffffffff
    1db4:	ffffffff 	.word	0xffffffff
    1db8:	ffffffff 	.word	0xffffffff
    1dbc:	ffffffff 	.word	0xffffffff
    1dc0:	ffffffff 	.word	0xffffffff
    1dc4:	ffffffff 	.word	0xffffffff
    1dc8:	ffffffff 	.word	0xffffffff
    1dcc:	ffffffff 	.word	0xffffffff
    1dd0:	ffffffff 	.word	0xffffffff
    1dd4:	ffffffff 	.word	0xffffffff
    1dd8:	ffffffff 	.word	0xffffffff
    1ddc:	ffffffff 	.word	0xffffffff
    1de0:	ffffffff 	.word	0xffffffff
    1de4:	ffffffff 	.word	0xffffffff
    1de8:	ffffffff 	.word	0xffffffff
    1dec:	ffffffff 	.word	0xffffffff
    1df0:	ffffffff 	.word	0xffffffff
    1df4:	ffffffff 	.word	0xffffffff
    1df8:	ffffffff 	.word	0xffffffff
    1dfc:	ffffffff 	.word	0xffffffff
    1e00:	ffffffff 	.word	0xffffffff
    1e04:	ffffffff 	.word	0xffffffff
    1e08:	ffffffff 	.word	0xffffffff
    1e0c:	ffffffff 	.word	0xffffffff
    1e10:	ffffffff 	.word	0xffffffff
    1e14:	ffffffff 	.word	0xffffffff
    1e18:	ffffffff 	.word	0xffffffff
    1e1c:	ffffffff 	.word	0xffffffff
    1e20:	ffffffff 	.word	0xffffffff
    1e24:	ffffffff 	.word	0xffffffff
    1e28:	ffffffff 	.word	0xffffffff
    1e2c:	ffffffff 	.word	0xffffffff
    1e30:	ffffffff 	.word	0xffffffff
    1e34:	ffffffff 	.word	0xffffffff
    1e38:	ffffffff 	.word	0xffffffff
    1e3c:	ffffffff 	.word	0xffffffff
    1e40:	ffffffff 	.word	0xffffffff
    1e44:	ffffffff 	.word	0xffffffff
    1e48:	ffffffff 	.word	0xffffffff
    1e4c:	ffffffff 	.word	0xffffffff
    1e50:	ffffffff 	.word	0xffffffff
    1e54:	ffffffff 	.word	0xffffffff
    1e58:	ffffffff 	.word	0xffffffff
    1e5c:	ffffffff 	.word	0xffffffff
    1e60:	ffffffff 	.word	0xffffffff
    1e64:	ffffffff 	.word	0xffffffff
    1e68:	ffffffff 	.word	0xffffffff
    1e6c:	ffffffff 	.word	0xffffffff
    1e70:	ffffffff 	.word	0xffffffff
    1e74:	ffffffff 	.word	0xffffffff
    1e78:	ffffffff 	.word	0xffffffff
    1e7c:	ffffffff 	.word	0xffffffff
    1e80:	ffffffff 	.word	0xffffffff
    1e84:	ffffffff 	.word	0xffffffff
    1e88:	ffffffff 	.word	0xffffffff
    1e8c:	ffffffff 	.word	0xffffffff
    1e90:	ffffffff 	.word	0xffffffff
    1e94:	ffffffff 	.word	0xffffffff
    1e98:	ffffffff 	.word	0xffffffff
    1e9c:	ffffffff 	.word	0xffffffff
    1ea0:	ffffffff 	.word	0xffffffff
    1ea4:	ffffffff 	.word	0xffffffff
    1ea8:	ffffffff 	.word	0xffffffff
    1eac:	ffffffff 	.word	0xffffffff
    1eb0:	ffffffff 	.word	0xffffffff
    1eb4:	ffffffff 	.word	0xffffffff
    1eb8:	ffffffff 	.word	0xffffffff
    1ebc:	ffffffff 	.word	0xffffffff
    1ec0:	ffffffff 	.word	0xffffffff
    1ec4:	ffffffff 	.word	0xffffffff
    1ec8:	ffffffff 	.word	0xffffffff
    1ecc:	ffffffff 	.word	0xffffffff
    1ed0:	ffffffff 	.word	0xffffffff
    1ed4:	ffffffff 	.word	0xffffffff
    1ed8:	ffffffff 	.word	0xffffffff
    1edc:	ffffffff 	.word	0xffffffff
    1ee0:	ffffffff 	.word	0xffffffff
    1ee4:	ffffffff 	.word	0xffffffff
    1ee8:	ffffffff 	.word	0xffffffff
    1eec:	ffffffff 	.word	0xffffffff
    1ef0:	ffffffff 	.word	0xffffffff
    1ef4:	ffffffff 	.word	0xffffffff
    1ef8:	ffffffff 	.word	0xffffffff
    1efc:	ffffffff 	.word	0xffffffff
    1f00:	ffffffff 	.word	0xffffffff
    1f04:	ffffffff 	.word	0xffffffff
    1f08:	ffffffff 	.word	0xffffffff
    1f0c:	ffffffff 	.word	0xffffffff
    1f10:	ffffffff 	.word	0xffffffff
    1f14:	ffffffff 	.word	0xffffffff
    1f18:	ffffffff 	.word	0xffffffff
    1f1c:	ffffffff 	.word	0xffffffff
    1f20:	ffffffff 	.word	0xffffffff
    1f24:	ffffffff 	.word	0xffffffff
    1f28:	ffffffff 	.word	0xffffffff
    1f2c:	ffffffff 	.word	0xffffffff
    1f30:	ffffffff 	.word	0xffffffff
    1f34:	ffffffff 	.word	0xffffffff
    1f38:	ffffffff 	.word	0xffffffff
    1f3c:	ffffffff 	.word	0xffffffff
    1f40:	ffffffff 	.word	0xffffffff
    1f44:	ffffffff 	.word	0xffffffff
    1f48:	ffffffff 	.word	0xffffffff
    1f4c:	ffffffff 	.word	0xffffffff
    1f50:	ffffffff 	.word	0xffffffff
    1f54:	ffffffff 	.word	0xffffffff
    1f58:	ffffffff 	.word	0xffffffff
    1f5c:	ffffffff 	.word	0xffffffff
    1f60:	ffffffff 	.word	0xffffffff
    1f64:	ffffffff 	.word	0xffffffff
    1f68:	ffffffff 	.word	0xffffffff
    1f6c:	ffffffff 	.word	0xffffffff
    1f70:	ffffffff 	.word	0xffffffff
    1f74:	ffffffff 	.word	0xffffffff
    1f78:	ffffffff 	.word	0xffffffff
    1f7c:	ffffffff 	.word	0xffffffff
    1f80:	ffffffff 	.word	0xffffffff
    1f84:	ffffffff 	.word	0xffffffff
    1f88:	ffffffff 	.word	0xffffffff
    1f8c:	ffffffff 	.word	0xffffffff
    1f90:	ffffffff 	.word	0xffffffff
    1f94:	ffffffff 	.word	0xffffffff
    1f98:	ffffffff 	.word	0xffffffff
    1f9c:	ffffffff 	.word	0xffffffff
    1fa0:	ffffffff 	.word	0xffffffff
    1fa4:	ffffffff 	.word	0xffffffff
    1fa8:	ffffffff 	.word	0xffffffff
    1fac:	ffffffff 	.word	0xffffffff
    1fb0:	ffffffff 	.word	0xffffffff
    1fb4:	ffffffff 	.word	0xffffffff
    1fb8:	ffffffff 	.word	0xffffffff
    1fbc:	ffffffff 	.word	0xffffffff
    1fc0:	ffffffff 	.word	0xffffffff
    1fc4:	ffffffff 	.word	0xffffffff
    1fc8:	ffffffff 	.word	0xffffffff
    1fcc:	ffffffff 	.word	0xffffffff
    1fd0:	ffffffff 	.word	0xffffffff
    1fd4:	ffffffff 	.word	0xffffffff
    1fd8:	ffffffff 	.word	0xffffffff
    1fdc:	ffffffff 	.word	0xffffffff
    1fe0:	ffffffff 	.word	0xffffffff
    1fe4:	ffffffff 	.word	0xffffffff
    1fe8:	ffffffff 	.word	0xffffffff
    1fec:	ffffffff 	.word	0xffffffff
    1ff0:	ffffffff 	.word	0xffffffff
    1ff4:	ffffffff 	.word	0xffffffff
    1ff8:	ffffffff 	.word	0xffffffff
    1ffc:	ffffffff 	.word	0xffffffff
    2000:	ffffffff 	.word	0xffffffff
    2004:	ffffffff 	.word	0xffffffff
    2008:	ffffffff 	.word	0xffffffff
    200c:	ffffffff 	.word	0xffffffff
    2010:	ffffffff 	.word	0xffffffff
    2014:	ffffffff 	.word	0xffffffff
    2018:	ffffffff 	.word	0xffffffff
    201c:	ffffffff 	.word	0xffffffff
    2020:	ffffffff 	.word	0xffffffff
    2024:	ffffffff 	.word	0xffffffff
    2028:	ffffffff 	.word	0xffffffff
    202c:	ffffffff 	.word	0xffffffff
    2030:	ffffffff 	.word	0xffffffff
    2034:	ffffffff 	.word	0xffffffff
    2038:	ffffffff 	.word	0xffffffff
    203c:	ffffffff 	.word	0xffffffff
    2040:	ffffffff 	.word	0xffffffff
    2044:	ffffffff 	.word	0xffffffff
    2048:	ffffffff 	.word	0xffffffff
    204c:	ffffffff 	.word	0xffffffff
    2050:	ffffffff 	.word	0xffffffff
    2054:	ffffffff 	.word	0xffffffff
    2058:	ffffffff 	.word	0xffffffff
    205c:	ffffffff 	.word	0xffffffff
    2060:	ffffffff 	.word	0xffffffff
    2064:	ffffffff 	.word	0xffffffff
    2068:	ffffffff 	.word	0xffffffff
    206c:	ffffffff 	.word	0xffffffff
    2070:	ffffffff 	.word	0xffffffff
    2074:	ffffffff 	.word	0xffffffff
    2078:	ffffffff 	.word	0xffffffff
    207c:	ffffffff 	.word	0xffffffff
    2080:	ffffffff 	.word	0xffffffff
    2084:	ffffffff 	.word	0xffffffff
    2088:	ffffffff 	.word	0xffffffff
    208c:	ffffffff 	.word	0xffffffff
    2090:	ffffffff 	.word	0xffffffff
    2094:	ffffffff 	.word	0xffffffff
    2098:	ffffffff 	.word	0xffffffff
    209c:	ffffffff 	.word	0xffffffff
    20a0:	ffffffff 	.word	0xffffffff
    20a4:	ffffffff 	.word	0xffffffff
    20a8:	ffffffff 	.word	0xffffffff
    20ac:	ffffffff 	.word	0xffffffff
    20b0:	ffffffff 	.word	0xffffffff
    20b4:	ffffffff 	.word	0xffffffff
    20b8:	ffffffff 	.word	0xffffffff
    20bc:	ffffffff 	.word	0xffffffff
    20c0:	ffffffff 	.word	0xffffffff
    20c4:	ffffffff 	.word	0xffffffff
    20c8:	ffffffff 	.word	0xffffffff
    20cc:	ffffffff 	.word	0xffffffff
    20d0:	ffffffff 	.word	0xffffffff
    20d4:	ffffffff 	.word	0xffffffff
    20d8:	ffffffff 	.word	0xffffffff
    20dc:	ffffffff 	.word	0xffffffff
    20e0:	ffffffff 	.word	0xffffffff
    20e4:	ffffffff 	.word	0xffffffff
    20e8:	ffffffff 	.word	0xffffffff
    20ec:	ffffffff 	.word	0xffffffff
    20f0:	ffffffff 	.word	0xffffffff
    20f4:	ffffffff 	.word	0xffffffff
    20f8:	ffffffff 	.word	0xffffffff
    20fc:	ffffffff 	.word	0xffffffff
    2100:	ffffffff 	.word	0xffffffff
    2104:	ffffffff 	.word	0xffffffff
    2108:	ffffffff 	.word	0xffffffff
    210c:	ffffffff 	.word	0xffffffff
    2110:	ffffffff 	.word	0xffffffff
    2114:	ffffffff 	.word	0xffffffff
    2118:	ffffffff 	.word	0xffffffff
    211c:	ffffffff 	.word	0xffffffff
    2120:	ffffffff 	.word	0xffffffff
    2124:	ffffffff 	.word	0xffffffff
    2128:	ffffffff 	.word	0xffffffff
    212c:	ffffffff 	.word	0xffffffff
    2130:	ffffffff 	.word	0xffffffff
    2134:	ffffffff 	.word	0xffffffff
    2138:	ffffffff 	.word	0xffffffff
    213c:	ffffffff 	.word	0xffffffff
    2140:	ffffffff 	.word	0xffffffff
    2144:	ffffffff 	.word	0xffffffff
    2148:	ffffffff 	.word	0xffffffff
    214c:	ffffffff 	.word	0xffffffff
    2150:	ffffffff 	.word	0xffffffff
    2154:	ffffffff 	.word	0xffffffff
    2158:	ffffffff 	.word	0xffffffff
    215c:	ffffffff 	.word	0xffffffff
    2160:	ffffffff 	.word	0xffffffff
    2164:	ffffffff 	.word	0xffffffff
    2168:	ffffffff 	.word	0xffffffff
    216c:	ffffffff 	.word	0xffffffff
    2170:	ffffffff 	.word	0xffffffff
    2174:	ffffffff 	.word	0xffffffff
    2178:	ffffffff 	.word	0xffffffff
    217c:	ffffffff 	.word	0xffffffff
    2180:	ffffffff 	.word	0xffffffff
    2184:	ffffffff 	.word	0xffffffff
    2188:	ffffffff 	.word	0xffffffff
    218c:	ffffffff 	.word	0xffffffff
    2190:	ffffffff 	.word	0xffffffff
    2194:	ffffffff 	.word	0xffffffff
    2198:	ffffffff 	.word	0xffffffff
    219c:	ffffffff 	.word	0xffffffff
    21a0:	ffffffff 	.word	0xffffffff
    21a4:	ffffffff 	.word	0xffffffff
    21a8:	ffffffff 	.word	0xffffffff
    21ac:	ffffffff 	.word	0xffffffff
    21b0:	ffffffff 	.word	0xffffffff
    21b4:	ffffffff 	.word	0xffffffff
    21b8:	ffffffff 	.word	0xffffffff
    21bc:	ffffffff 	.word	0xffffffff
    21c0:	ffffffff 	.word	0xffffffff
    21c4:	ffffffff 	.word	0xffffffff
    21c8:	ffffffff 	.word	0xffffffff
    21cc:	ffffffff 	.word	0xffffffff
    21d0:	ffffffff 	.word	0xffffffff
    21d4:	ffffffff 	.word	0xffffffff
    21d8:	ffffffff 	.word	0xffffffff
    21dc:	ffffffff 	.word	0xffffffff
    21e0:	ffffffff 	.word	0xffffffff
    21e4:	ffffffff 	.word	0xffffffff
    21e8:	ffffffff 	.word	0xffffffff
    21ec:	ffffffff 	.word	0xffffffff
    21f0:	ffffffff 	.word	0xffffffff
    21f4:	ffffffff 	.word	0xffffffff
    21f8:	ffffffff 	.word	0xffffffff
    21fc:	ffffffff 	.word	0xffffffff
    2200:	ffffffff 	.word	0xffffffff
    2204:	ffffffff 	.word	0xffffffff
    2208:	ffffffff 	.word	0xffffffff
    220c:	ffffffff 	.word	0xffffffff
    2210:	ffffffff 	.word	0xffffffff
    2214:	ffffffff 	.word	0xffffffff
    2218:	ffffffff 	.word	0xffffffff
    221c:	ffffffff 	.word	0xffffffff
    2220:	ffffffff 	.word	0xffffffff
    2224:	ffffffff 	.word	0xffffffff
    2228:	ffffffff 	.word	0xffffffff
    222c:	ffffffff 	.word	0xffffffff
    2230:	ffffffff 	.word	0xffffffff
    2234:	ffffffff 	.word	0xffffffff
    2238:	ffffffff 	.word	0xffffffff
    223c:	ffffffff 	.word	0xffffffff
    2240:	ffffffff 	.word	0xffffffff
    2244:	ffffffff 	.word	0xffffffff
    2248:	ffffffff 	.word	0xffffffff
    224c:	ffffffff 	.word	0xffffffff
    2250:	ffffffff 	.word	0xffffffff
    2254:	ffffffff 	.word	0xffffffff
    2258:	ffffffff 	.word	0xffffffff
    225c:	ffffffff 	.word	0xffffffff
    2260:	ffffffff 	.word	0xffffffff
    2264:	ffffffff 	.word	0xffffffff
    2268:	ffffffff 	.word	0xffffffff
    226c:	ffffffff 	.word	0xffffffff
    2270:	ffffffff 	.word	0xffffffff
    2274:	ffffffff 	.word	0xffffffff
    2278:	ffffffff 	.word	0xffffffff
    227c:	ffffffff 	.word	0xffffffff
    2280:	ffffffff 	.word	0xffffffff
    2284:	ffffffff 	.word	0xffffffff
    2288:	ffffffff 	.word	0xffffffff
    228c:	ffffffff 	.word	0xffffffff
    2290:	ffffffff 	.word	0xffffffff
    2294:	ffffffff 	.word	0xffffffff
    2298:	ffffffff 	.word	0xffffffff
    229c:	ffffffff 	.word	0xffffffff
    22a0:	ffffffff 	.word	0xffffffff
    22a4:	ffffffff 	.word	0xffffffff
    22a8:	ffffffff 	.word	0xffffffff
    22ac:	ffffffff 	.word	0xffffffff
    22b0:	ffffffff 	.word	0xffffffff
    22b4:	ffffffff 	.word	0xffffffff
    22b8:	ffffffff 	.word	0xffffffff
    22bc:	ffffffff 	.word	0xffffffff
    22c0:	ffffffff 	.word	0xffffffff
    22c4:	ffffffff 	.word	0xffffffff
    22c8:	ffffffff 	.word	0xffffffff
    22cc:	ffffffff 	.word	0xffffffff
    22d0:	ffffffff 	.word	0xffffffff
    22d4:	ffffffff 	.word	0xffffffff
    22d8:	ffffffff 	.word	0xffffffff
    22dc:	ffffffff 	.word	0xffffffff
    22e0:	ffffffff 	.word	0xffffffff
    22e4:	ffffffff 	.word	0xffffffff
    22e8:	ffffffff 	.word	0xffffffff
    22ec:	ffffffff 	.word	0xffffffff
    22f0:	ffffffff 	.word	0xffffffff
    22f4:	ffffffff 	.word	0xffffffff
    22f8:	ffffffff 	.word	0xffffffff
    22fc:	ffffffff 	.word	0xffffffff
    2300:	ffffffff 	.word	0xffffffff
    2304:	ffffffff 	.word	0xffffffff
    2308:	ffffffff 	.word	0xffffffff
    230c:	ffffffff 	.word	0xffffffff
    2310:	ffffffff 	.word	0xffffffff
    2314:	ffffffff 	.word	0xffffffff
    2318:	ffffffff 	.word	0xffffffff
    231c:	ffffffff 	.word	0xffffffff
    2320:	ffffffff 	.word	0xffffffff
    2324:	ffffffff 	.word	0xffffffff
    2328:	ffffffff 	.word	0xffffffff
    232c:	ffffffff 	.word	0xffffffff
    2330:	ffffffff 	.word	0xffffffff
    2334:	ffffffff 	.word	0xffffffff
    2338:	ffffffff 	.word	0xffffffff
    233c:	ffffffff 	.word	0xffffffff
    2340:	ffffffff 	.word	0xffffffff
    2344:	ffffffff 	.word	0xffffffff
    2348:	ffffffff 	.word	0xffffffff
    234c:	ffffffff 	.word	0xffffffff
    2350:	ffffffff 	.word	0xffffffff
    2354:	ffffffff 	.word	0xffffffff
    2358:	ffffffff 	.word	0xffffffff
    235c:	ffffffff 	.word	0xffffffff
    2360:	ffffffff 	.word	0xffffffff
    2364:	ffffffff 	.word	0xffffffff
    2368:	ffffffff 	.word	0xffffffff
    236c:	ffffffff 	.word	0xffffffff
    2370:	ffffffff 	.word	0xffffffff
    2374:	ffffffff 	.word	0xffffffff
    2378:	ffffffff 	.word	0xffffffff
    237c:	ffffffff 	.word	0xffffffff
    2380:	ffffffff 	.word	0xffffffff
    2384:	ffffffff 	.word	0xffffffff
    2388:	ffffffff 	.word	0xffffffff
    238c:	ffffffff 	.word	0xffffffff
    2390:	ffffffff 	.word	0xffffffff
    2394:	ffffffff 	.word	0xffffffff
    2398:	ffffffff 	.word	0xffffffff
    239c:	ffffffff 	.word	0xffffffff
    23a0:	ffffffff 	.word	0xffffffff
    23a4:	ffffffff 	.word	0xffffffff
    23a8:	ffffffff 	.word	0xffffffff
    23ac:	ffffffff 	.word	0xffffffff
    23b0:	ffffffff 	.word	0xffffffff
    23b4:	ffffffff 	.word	0xffffffff
    23b8:	ffffffff 	.word	0xffffffff
    23bc:	ffffffff 	.word	0xffffffff
    23c0:	ffffffff 	.word	0xffffffff
    23c4:	ffffffff 	.word	0xffffffff
    23c8:	ffffffff 	.word	0xffffffff
    23cc:	ffffffff 	.word	0xffffffff
    23d0:	ffffffff 	.word	0xffffffff
    23d4:	ffffffff 	.word	0xffffffff
    23d8:	ffffffff 	.word	0xffffffff
    23dc:	ffffffff 	.word	0xffffffff
    23e0:	ffffffff 	.word	0xffffffff
    23e4:	ffffffff 	.word	0xffffffff
    23e8:	ffffffff 	.word	0xffffffff
    23ec:	ffffffff 	.word	0xffffffff
    23f0:	ffffffff 	.word	0xffffffff
    23f4:	ffffffff 	.word	0xffffffff
    23f8:	ffffffff 	.word	0xffffffff
    23fc:	ffffffff 	.word	0xffffffff
    2400:	ffffffff 	.word	0xffffffff
    2404:	ffffffff 	.word	0xffffffff
    2408:	ffffffff 	.word	0xffffffff
    240c:	ffffffff 	.word	0xffffffff
    2410:	ffffffff 	.word	0xffffffff
    2414:	ffffffff 	.word	0xffffffff
    2418:	ffffffff 	.word	0xffffffff
    241c:	ffffffff 	.word	0xffffffff
    2420:	ffffffff 	.word	0xffffffff
    2424:	ffffffff 	.word	0xffffffff
    2428:	ffffffff 	.word	0xffffffff
    242c:	ffffffff 	.word	0xffffffff
    2430:	ffffffff 	.word	0xffffffff
    2434:	ffffffff 	.word	0xffffffff
    2438:	ffffffff 	.word	0xffffffff
    243c:	ffffffff 	.word	0xffffffff
    2440:	ffffffff 	.word	0xffffffff
    2444:	ffffffff 	.word	0xffffffff
    2448:	ffffffff 	.word	0xffffffff
    244c:	ffffffff 	.word	0xffffffff
    2450:	ffffffff 	.word	0xffffffff
    2454:	ffffffff 	.word	0xffffffff
    2458:	ffffffff 	.word	0xffffffff
    245c:	ffffffff 	.word	0xffffffff
    2460:	ffffffff 	.word	0xffffffff
    2464:	ffffffff 	.word	0xffffffff
    2468:	ffffffff 	.word	0xffffffff
    246c:	ffffffff 	.word	0xffffffff
    2470:	ffffffff 	.word	0xffffffff
    2474:	ffffffff 	.word	0xffffffff
    2478:	ffffffff 	.word	0xffffffff
    247c:	ffffffff 	.word	0xffffffff
    2480:	ffffffff 	.word	0xffffffff
    2484:	ffffffff 	.word	0xffffffff
    2488:	ffffffff 	.word	0xffffffff
    248c:	ffffffff 	.word	0xffffffff
    2490:	ffffffff 	.word	0xffffffff
    2494:	ffffffff 	.word	0xffffffff
    2498:	ffffffff 	.word	0xffffffff
    249c:	ffffffff 	.word	0xffffffff
    24a0:	ffffffff 	.word	0xffffffff
    24a4:	ffffffff 	.word	0xffffffff
    24a8:	ffffffff 	.word	0xffffffff
    24ac:	ffffffff 	.word	0xffffffff
    24b0:	ffffffff 	.word	0xffffffff
    24b4:	ffffffff 	.word	0xffffffff
    24b8:	ffffffff 	.word	0xffffffff
    24bc:	ffffffff 	.word	0xffffffff
    24c0:	ffffffff 	.word	0xffffffff
    24c4:	ffffffff 	.word	0xffffffff
    24c8:	ffffffff 	.word	0xffffffff
    24cc:	ffffffff 	.word	0xffffffff
    24d0:	ffffffff 	.word	0xffffffff
    24d4:	ffffffff 	.word	0xffffffff
    24d8:	ffffffff 	.word	0xffffffff
    24dc:	ffffffff 	.word	0xffffffff
    24e0:	ffffffff 	.word	0xffffffff
    24e4:	ffffffff 	.word	0xffffffff
    24e8:	ffffffff 	.word	0xffffffff
    24ec:	ffffffff 	.word	0xffffffff
    24f0:	ffffffff 	.word	0xffffffff
    24f4:	ffffffff 	.word	0xffffffff
    24f8:	ffffffff 	.word	0xffffffff
    24fc:	ffffffff 	.word	0xffffffff
    2500:	ffffffff 	.word	0xffffffff
    2504:	ffffffff 	.word	0xffffffff
    2508:	ffffffff 	.word	0xffffffff
    250c:	ffffffff 	.word	0xffffffff
    2510:	ffffffff 	.word	0xffffffff
    2514:	ffffffff 	.word	0xffffffff
    2518:	ffffffff 	.word	0xffffffff
    251c:	ffffffff 	.word	0xffffffff
    2520:	ffffffff 	.word	0xffffffff
    2524:	ffffffff 	.word	0xffffffff
    2528:	ffffffff 	.word	0xffffffff
    252c:	ffffffff 	.word	0xffffffff
    2530:	ffffffff 	.word	0xffffffff
    2534:	ffffffff 	.word	0xffffffff
    2538:	ffffffff 	.word	0xffffffff
    253c:	ffffffff 	.word	0xffffffff
    2540:	ffffffff 	.word	0xffffffff
    2544:	ffffffff 	.word	0xffffffff
    2548:	ffffffff 	.word	0xffffffff
    254c:	ffffffff 	.word	0xffffffff
    2550:	ffffffff 	.word	0xffffffff
    2554:	ffffffff 	.word	0xffffffff
    2558:	ffffffff 	.word	0xffffffff
    255c:	ffffffff 	.word	0xffffffff
    2560:	ffffffff 	.word	0xffffffff
    2564:	ffffffff 	.word	0xffffffff
    2568:	ffffffff 	.word	0xffffffff
    256c:	ffffffff 	.word	0xffffffff
    2570:	ffffffff 	.word	0xffffffff
    2574:	ffffffff 	.word	0xffffffff
    2578:	ffffffff 	.word	0xffffffff
    257c:	ffffffff 	.word	0xffffffff
    2580:	ffffffff 	.word	0xffffffff
    2584:	ffffffff 	.word	0xffffffff
    2588:	ffffffff 	.word	0xffffffff
    258c:	ffffffff 	.word	0xffffffff
    2590:	ffffffff 	.word	0xffffffff
    2594:	ffffffff 	.word	0xffffffff
    2598:	ffffffff 	.word	0xffffffff
    259c:	ffffffff 	.word	0xffffffff
    25a0:	ffffffff 	.word	0xffffffff
    25a4:	ffffffff 	.word	0xffffffff
    25a8:	ffffffff 	.word	0xffffffff
    25ac:	ffffffff 	.word	0xffffffff
    25b0:	ffffffff 	.word	0xffffffff
    25b4:	ffffffff 	.word	0xffffffff
    25b8:	ffffffff 	.word	0xffffffff
    25bc:	ffffffff 	.word	0xffffffff
    25c0:	ffffffff 	.word	0xffffffff
    25c4:	ffffffff 	.word	0xffffffff
    25c8:	ffffffff 	.word	0xffffffff
    25cc:	ffffffff 	.word	0xffffffff
    25d0:	ffffffff 	.word	0xffffffff
    25d4:	ffffffff 	.word	0xffffffff
    25d8:	ffffffff 	.word	0xffffffff
    25dc:	ffffffff 	.word	0xffffffff
    25e0:	ffffffff 	.word	0xffffffff
    25e4:	ffffffff 	.word	0xffffffff
    25e8:	ffffffff 	.word	0xffffffff
    25ec:	ffffffff 	.word	0xffffffff
    25f0:	ffffffff 	.word	0xffffffff
    25f4:	ffffffff 	.word	0xffffffff
    25f8:	ffffffff 	.word	0xffffffff
    25fc:	ffffffff 	.word	0xffffffff
    2600:	ffffffff 	.word	0xffffffff
    2604:	ffffffff 	.word	0xffffffff
    2608:	ffffffff 	.word	0xffffffff
    260c:	ffffffff 	.word	0xffffffff
    2610:	ffffffff 	.word	0xffffffff
    2614:	ffffffff 	.word	0xffffffff
    2618:	ffffffff 	.word	0xffffffff
    261c:	ffffffff 	.word	0xffffffff
    2620:	ffffffff 	.word	0xffffffff
    2624:	ffffffff 	.word	0xffffffff
    2628:	ffffffff 	.word	0xffffffff
    262c:	ffffffff 	.word	0xffffffff
    2630:	ffffffff 	.word	0xffffffff
    2634:	ffffffff 	.word	0xffffffff
    2638:	ffffffff 	.word	0xffffffff
    263c:	ffffffff 	.word	0xffffffff
    2640:	ffffffff 	.word	0xffffffff
    2644:	ffffffff 	.word	0xffffffff
    2648:	ffffffff 	.word	0xffffffff
    264c:	ffffffff 	.word	0xffffffff
    2650:	ffffffff 	.word	0xffffffff
    2654:	ffffffff 	.word	0xffffffff
    2658:	ffffffff 	.word	0xffffffff
    265c:	ffffffff 	.word	0xffffffff
    2660:	ffffffff 	.word	0xffffffff
    2664:	ffffffff 	.word	0xffffffff
    2668:	ffffffff 	.word	0xffffffff
    266c:	ffffffff 	.word	0xffffffff
    2670:	ffffffff 	.word	0xffffffff
    2674:	ffffffff 	.word	0xffffffff
    2678:	ffffffff 	.word	0xffffffff
    267c:	ffffffff 	.word	0xffffffff
    2680:	ffffffff 	.word	0xffffffff
    2684:	ffffffff 	.word	0xffffffff
    2688:	ffffffff 	.word	0xffffffff
    268c:	ffffffff 	.word	0xffffffff
    2690:	ffffffff 	.word	0xffffffff
    2694:	ffffffff 	.word	0xffffffff
    2698:	ffffffff 	.word	0xffffffff
    269c:	ffffffff 	.word	0xffffffff
    26a0:	ffffffff 	.word	0xffffffff
    26a4:	ffffffff 	.word	0xffffffff
    26a8:	ffffffff 	.word	0xffffffff
    26ac:	ffffffff 	.word	0xffffffff
    26b0:	ffffffff 	.word	0xffffffff
    26b4:	ffffffff 	.word	0xffffffff
    26b8:	ffffffff 	.word	0xffffffff
    26bc:	ffffffff 	.word	0xffffffff
    26c0:	ffffffff 	.word	0xffffffff
    26c4:	ffffffff 	.word	0xffffffff
    26c8:	ffffffff 	.word	0xffffffff
    26cc:	ffffffff 	.word	0xffffffff
    26d0:	ffffffff 	.word	0xffffffff
    26d4:	ffffffff 	.word	0xffffffff
    26d8:	ffffffff 	.word	0xffffffff
    26dc:	ffffffff 	.word	0xffffffff
    26e0:	ffffffff 	.word	0xffffffff
    26e4:	ffffffff 	.word	0xffffffff
    26e8:	ffffffff 	.word	0xffffffff
    26ec:	ffffffff 	.word	0xffffffff
    26f0:	ffffffff 	.word	0xffffffff
    26f4:	ffffffff 	.word	0xffffffff
    26f8:	ffffffff 	.word	0xffffffff
    26fc:	ffffffff 	.word	0xffffffff
    2700:	ffffffff 	.word	0xffffffff
    2704:	ffffffff 	.word	0xffffffff
    2708:	ffffffff 	.word	0xffffffff
    270c:	ffffffff 	.word	0xffffffff
    2710:	ffffffff 	.word	0xffffffff
    2714:	ffffffff 	.word	0xffffffff
    2718:	ffffffff 	.word	0xffffffff
    271c:	ffffffff 	.word	0xffffffff
    2720:	ffffffff 	.word	0xffffffff
    2724:	ffffffff 	.word	0xffffffff
    2728:	ffffffff 	.word	0xffffffff
    272c:	ffffffff 	.word	0xffffffff
    2730:	ffffffff 	.word	0xffffffff
    2734:	ffffffff 	.word	0xffffffff
    2738:	ffffffff 	.word	0xffffffff
    273c:	ffffffff 	.word	0xffffffff
    2740:	ffffffff 	.word	0xffffffff
    2744:	ffffffff 	.word	0xffffffff
    2748:	ffffffff 	.word	0xffffffff
    274c:	ffffffff 	.word	0xffffffff
    2750:	ffffffff 	.word	0xffffffff
    2754:	ffffffff 	.word	0xffffffff
    2758:	ffffffff 	.word	0xffffffff
    275c:	ffffffff 	.word	0xffffffff
    2760:	ffffffff 	.word	0xffffffff
    2764:	ffffffff 	.word	0xffffffff
    2768:	ffffffff 	.word	0xffffffff
    276c:	ffffffff 	.word	0xffffffff
    2770:	ffffffff 	.word	0xffffffff
    2774:	ffffffff 	.word	0xffffffff
    2778:	ffffffff 	.word	0xffffffff
    277c:	ffffffff 	.word	0xffffffff
    2780:	ffffffff 	.word	0xffffffff
    2784:	ffffffff 	.word	0xffffffff
    2788:	ffffffff 	.word	0xffffffff
    278c:	ffffffff 	.word	0xffffffff
    2790:	ffffffff 	.word	0xffffffff
    2794:	ffffffff 	.word	0xffffffff
    2798:	ffffffff 	.word	0xffffffff
    279c:	ffffffff 	.word	0xffffffff
    27a0:	ffffffff 	.word	0xffffffff
    27a4:	ffffffff 	.word	0xffffffff
    27a8:	ffffffff 	.word	0xffffffff
    27ac:	ffffffff 	.word	0xffffffff
    27b0:	ffffffff 	.word	0xffffffff
    27b4:	ffffffff 	.word	0xffffffff
    27b8:	ffffffff 	.word	0xffffffff
    27bc:	ffffffff 	.word	0xffffffff
    27c0:	ffffffff 	.word	0xffffffff
    27c4:	ffffffff 	.word	0xffffffff
    27c8:	ffffffff 	.word	0xffffffff
    27cc:	ffffffff 	.word	0xffffffff
    27d0:	ffffffff 	.word	0xffffffff
    27d4:	ffffffff 	.word	0xffffffff
    27d8:	ffffffff 	.word	0xffffffff
    27dc:	ffffffff 	.word	0xffffffff
    27e0:	ffffffff 	.word	0xffffffff
    27e4:	ffffffff 	.word	0xffffffff
    27e8:	ffffffff 	.word	0xffffffff
    27ec:	ffffffff 	.word	0xffffffff
    27f0:	ffffffff 	.word	0xffffffff
    27f4:	ffffffff 	.word	0xffffffff
    27f8:	ffffffff 	.word	0xffffffff
    27fc:	ffffffff 	.word	0xffffffff
    2800:	ffffffff 	.word	0xffffffff
    2804:	ffffffff 	.word	0xffffffff
    2808:	ffffffff 	.word	0xffffffff
    280c:	ffffffff 	.word	0xffffffff
    2810:	ffffffff 	.word	0xffffffff
    2814:	ffffffff 	.word	0xffffffff
    2818:	ffffffff 	.word	0xffffffff
    281c:	ffffffff 	.word	0xffffffff
    2820:	ffffffff 	.word	0xffffffff
    2824:	ffffffff 	.word	0xffffffff
    2828:	ffffffff 	.word	0xffffffff
    282c:	ffffffff 	.word	0xffffffff
    2830:	ffffffff 	.word	0xffffffff
    2834:	ffffffff 	.word	0xffffffff
    2838:	ffffffff 	.word	0xffffffff
    283c:	ffffffff 	.word	0xffffffff
    2840:	ffffffff 	.word	0xffffffff
    2844:	ffffffff 	.word	0xffffffff
    2848:	ffffffff 	.word	0xffffffff
    284c:	ffffffff 	.word	0xffffffff
    2850:	ffffffff 	.word	0xffffffff
    2854:	ffffffff 	.word	0xffffffff
    2858:	ffffffff 	.word	0xffffffff
    285c:	ffffffff 	.word	0xffffffff
    2860:	ffffffff 	.word	0xffffffff
    2864:	ffffffff 	.word	0xffffffff
    2868:	ffffffff 	.word	0xffffffff
    286c:	ffffffff 	.word	0xffffffff
    2870:	ffffffff 	.word	0xffffffff
    2874:	ffffffff 	.word	0xffffffff
    2878:	ffffffff 	.word	0xffffffff
    287c:	ffffffff 	.word	0xffffffff
    2880:	ffffffff 	.word	0xffffffff
    2884:	ffffffff 	.word	0xffffffff
    2888:	ffffffff 	.word	0xffffffff
    288c:	ffffffff 	.word	0xffffffff
    2890:	ffffffff 	.word	0xffffffff
    2894:	ffffffff 	.word	0xffffffff
    2898:	ffffffff 	.word	0xffffffff
    289c:	ffffffff 	.word	0xffffffff
    28a0:	ffffffff 	.word	0xffffffff
    28a4:	ffffffff 	.word	0xffffffff
    28a8:	ffffffff 	.word	0xffffffff
    28ac:	ffffffff 	.word	0xffffffff
    28b0:	ffffffff 	.word	0xffffffff
    28b4:	ffffffff 	.word	0xffffffff
    28b8:	ffffffff 	.word	0xffffffff
    28bc:	ffffffff 	.word	0xffffffff
    28c0:	ffffffff 	.word	0xffffffff
    28c4:	ffffffff 	.word	0xffffffff
    28c8:	ffffffff 	.word	0xffffffff
    28cc:	ffffffff 	.word	0xffffffff
    28d0:	ffffffff 	.word	0xffffffff
    28d4:	ffffffff 	.word	0xffffffff
    28d8:	ffffffff 	.word	0xffffffff
    28dc:	ffffffff 	.word	0xffffffff
    28e0:	ffffffff 	.word	0xffffffff
    28e4:	ffffffff 	.word	0xffffffff
    28e8:	ffffffff 	.word	0xffffffff
    28ec:	ffffffff 	.word	0xffffffff
    28f0:	ffffffff 	.word	0xffffffff
    28f4:	ffffffff 	.word	0xffffffff
    28f8:	ffffffff 	.word	0xffffffff
    28fc:	ffffffff 	.word	0xffffffff
    2900:	ffffffff 	.word	0xffffffff
    2904:	ffffffff 	.word	0xffffffff
    2908:	ffffffff 	.word	0xffffffff
    290c:	ffffffff 	.word	0xffffffff
    2910:	ffffffff 	.word	0xffffffff
    2914:	ffffffff 	.word	0xffffffff
    2918:	ffffffff 	.word	0xffffffff
    291c:	ffffffff 	.word	0xffffffff
    2920:	ffffffff 	.word	0xffffffff
    2924:	ffffffff 	.word	0xffffffff
    2928:	ffffffff 	.word	0xffffffff
    292c:	ffffffff 	.word	0xffffffff
    2930:	ffffffff 	.word	0xffffffff
    2934:	ffffffff 	.word	0xffffffff
    2938:	ffffffff 	.word	0xffffffff
    293c:	ffffffff 	.word	0xffffffff
    2940:	ffffffff 	.word	0xffffffff
    2944:	ffffffff 	.word	0xffffffff
    2948:	ffffffff 	.word	0xffffffff
    294c:	ffffffff 	.word	0xffffffff
    2950:	ffffffff 	.word	0xffffffff
    2954:	ffffffff 	.word	0xffffffff
    2958:	ffffffff 	.word	0xffffffff
    295c:	ffffffff 	.word	0xffffffff
    2960:	ffffffff 	.word	0xffffffff
    2964:	ffffffff 	.word	0xffffffff
    2968:	ffffffff 	.word	0xffffffff
    296c:	ffffffff 	.word	0xffffffff
    2970:	ffffffff 	.word	0xffffffff
    2974:	ffffffff 	.word	0xffffffff
    2978:	ffffffff 	.word	0xffffffff
    297c:	ffffffff 	.word	0xffffffff
    2980:	ffffffff 	.word	0xffffffff
    2984:	ffffffff 	.word	0xffffffff
    2988:	ffffffff 	.word	0xffffffff
    298c:	ffffffff 	.word	0xffffffff
    2990:	ffffffff 	.word	0xffffffff
    2994:	ffffffff 	.word	0xffffffff
    2998:	ffffffff 	.word	0xffffffff
    299c:	ffffffff 	.word	0xffffffff
    29a0:	ffffffff 	.word	0xffffffff
    29a4:	ffffffff 	.word	0xffffffff
    29a8:	ffffffff 	.word	0xffffffff
    29ac:	ffffffff 	.word	0xffffffff
    29b0:	ffffffff 	.word	0xffffffff
    29b4:	ffffffff 	.word	0xffffffff
    29b8:	ffffffff 	.word	0xffffffff
    29bc:	ffffffff 	.word	0xffffffff
    29c0:	ffffffff 	.word	0xffffffff
    29c4:	ffffffff 	.word	0xffffffff
    29c8:	ffffffff 	.word	0xffffffff
    29cc:	ffffffff 	.word	0xffffffff
    29d0:	ffffffff 	.word	0xffffffff
    29d4:	ffffffff 	.word	0xffffffff
    29d8:	ffffffff 	.word	0xffffffff
    29dc:	ffffffff 	.word	0xffffffff
    29e0:	ffffffff 	.word	0xffffffff
    29e4:	ffffffff 	.word	0xffffffff
    29e8:	ffffffff 	.word	0xffffffff
    29ec:	ffffffff 	.word	0xffffffff
    29f0:	ffffffff 	.word	0xffffffff
    29f4:	ffffffff 	.word	0xffffffff
    29f8:	ffffffff 	.word	0xffffffff
    29fc:	ffffffff 	.word	0xffffffff
    2a00:	ffffffff 	.word	0xffffffff
    2a04:	ffffffff 	.word	0xffffffff
    2a08:	ffffffff 	.word	0xffffffff
    2a0c:	ffffffff 	.word	0xffffffff
    2a10:	ffffffff 	.word	0xffffffff
    2a14:	ffffffff 	.word	0xffffffff
    2a18:	ffffffff 	.word	0xffffffff
    2a1c:	ffffffff 	.word	0xffffffff
    2a20:	ffffffff 	.word	0xffffffff
    2a24:	ffffffff 	.word	0xffffffff
    2a28:	ffffffff 	.word	0xffffffff
    2a2c:	ffffffff 	.word	0xffffffff
    2a30:	ffffffff 	.word	0xffffffff
    2a34:	ffffffff 	.word	0xffffffff
    2a38:	ffffffff 	.word	0xffffffff
    2a3c:	ffffffff 	.word	0xffffffff
    2a40:	ffffffff 	.word	0xffffffff
    2a44:	ffffffff 	.word	0xffffffff
    2a48:	ffffffff 	.word	0xffffffff
    2a4c:	ffffffff 	.word	0xffffffff
    2a50:	ffffffff 	.word	0xffffffff
    2a54:	ffffffff 	.word	0xffffffff
    2a58:	ffffffff 	.word	0xffffffff
    2a5c:	ffffffff 	.word	0xffffffff
    2a60:	ffffffff 	.word	0xffffffff
    2a64:	ffffffff 	.word	0xffffffff
    2a68:	ffffffff 	.word	0xffffffff
    2a6c:	ffffffff 	.word	0xffffffff
    2a70:	ffffffff 	.word	0xffffffff
    2a74:	ffffffff 	.word	0xffffffff
    2a78:	ffffffff 	.word	0xffffffff
    2a7c:	ffffffff 	.word	0xffffffff
    2a80:	ffffffff 	.word	0xffffffff
    2a84:	ffffffff 	.word	0xffffffff
    2a88:	ffffffff 	.word	0xffffffff
    2a8c:	ffffffff 	.word	0xffffffff
    2a90:	ffffffff 	.word	0xffffffff
    2a94:	ffffffff 	.word	0xffffffff
    2a98:	ffffffff 	.word	0xffffffff
    2a9c:	ffffffff 	.word	0xffffffff
    2aa0:	ffffffff 	.word	0xffffffff
    2aa4:	ffffffff 	.word	0xffffffff
    2aa8:	ffffffff 	.word	0xffffffff
    2aac:	ffffffff 	.word	0xffffffff
    2ab0:	ffffffff 	.word	0xffffffff
    2ab4:	ffffffff 	.word	0xffffffff
    2ab8:	ffffffff 	.word	0xffffffff
    2abc:	ffffffff 	.word	0xffffffff
    2ac0:	ffffffff 	.word	0xffffffff
    2ac4:	ffffffff 	.word	0xffffffff
    2ac8:	ffffffff 	.word	0xffffffff
    2acc:	ffffffff 	.word	0xffffffff
    2ad0:	ffffffff 	.word	0xffffffff
    2ad4:	ffffffff 	.word	0xffffffff
    2ad8:	ffffffff 	.word	0xffffffff
    2adc:	ffffffff 	.word	0xffffffff
    2ae0:	ffffffff 	.word	0xffffffff
    2ae4:	ffffffff 	.word	0xffffffff
    2ae8:	ffffffff 	.word	0xffffffff
    2aec:	ffffffff 	.word	0xffffffff
    2af0:	ffffffff 	.word	0xffffffff
    2af4:	ffffffff 	.word	0xffffffff
    2af8:	ffffffff 	.word	0xffffffff
    2afc:	ffffffff 	.word	0xffffffff
    2b00:	ffffffff 	.word	0xffffffff
    2b04:	ffffffff 	.word	0xffffffff
    2b08:	ffffffff 	.word	0xffffffff
    2b0c:	ffffffff 	.word	0xffffffff
    2b10:	ffffffff 	.word	0xffffffff
    2b14:	ffffffff 	.word	0xffffffff
    2b18:	ffffffff 	.word	0xffffffff
    2b1c:	ffffffff 	.word	0xffffffff
    2b20:	ffffffff 	.word	0xffffffff
    2b24:	ffffffff 	.word	0xffffffff
    2b28:	ffffffff 	.word	0xffffffff
    2b2c:	ffffffff 	.word	0xffffffff
    2b30:	ffffffff 	.word	0xffffffff
    2b34:	ffffffff 	.word	0xffffffff
    2b38:	ffffffff 	.word	0xffffffff
    2b3c:	ffffffff 	.word	0xffffffff
    2b40:	ffffffff 	.word	0xffffffff
    2b44:	ffffffff 	.word	0xffffffff
    2b48:	ffffffff 	.word	0xffffffff
    2b4c:	ffffffff 	.word	0xffffffff
    2b50:	ffffffff 	.word	0xffffffff
    2b54:	ffffffff 	.word	0xffffffff
    2b58:	ffffffff 	.word	0xffffffff
    2b5c:	ffffffff 	.word	0xffffffff
    2b60:	ffffffff 	.word	0xffffffff
    2b64:	ffffffff 	.word	0xffffffff
    2b68:	ffffffff 	.word	0xffffffff
    2b6c:	ffffffff 	.word	0xffffffff
    2b70:	ffffffff 	.word	0xffffffff
    2b74:	ffffffff 	.word	0xffffffff
    2b78:	ffffffff 	.word	0xffffffff
    2b7c:	ffffffff 	.word	0xffffffff
    2b80:	ffffffff 	.word	0xffffffff
    2b84:	ffffffff 	.word	0xffffffff
    2b88:	ffffffff 	.word	0xffffffff
    2b8c:	ffffffff 	.word	0xffffffff
    2b90:	ffffffff 	.word	0xffffffff
    2b94:	ffffffff 	.word	0xffffffff
    2b98:	ffffffff 	.word	0xffffffff
    2b9c:	ffffffff 	.word	0xffffffff
    2ba0:	ffffffff 	.word	0xffffffff
    2ba4:	ffffffff 	.word	0xffffffff
    2ba8:	ffffffff 	.word	0xffffffff
    2bac:	ffffffff 	.word	0xffffffff
    2bb0:	ffffffff 	.word	0xffffffff
    2bb4:	ffffffff 	.word	0xffffffff
    2bb8:	ffffffff 	.word	0xffffffff
    2bbc:	ffffffff 	.word	0xffffffff
    2bc0:	ffffffff 	.word	0xffffffff
    2bc4:	ffffffff 	.word	0xffffffff
    2bc8:	ffffffff 	.word	0xffffffff
    2bcc:	ffffffff 	.word	0xffffffff
    2bd0:	ffffffff 	.word	0xffffffff
    2bd4:	ffffffff 	.word	0xffffffff
    2bd8:	ffffffff 	.word	0xffffffff
    2bdc:	ffffffff 	.word	0xffffffff
    2be0:	ffffffff 	.word	0xffffffff
    2be4:	ffffffff 	.word	0xffffffff
    2be8:	ffffffff 	.word	0xffffffff
    2bec:	ffffffff 	.word	0xffffffff
    2bf0:	ffffffff 	.word	0xffffffff
    2bf4:	ffffffff 	.word	0xffffffff
    2bf8:	ffffffff 	.word	0xffffffff
    2bfc:	ffffffff 	.word	0xffffffff
    2c00:	ffffffff 	.word	0xffffffff
    2c04:	ffffffff 	.word	0xffffffff
    2c08:	ffffffff 	.word	0xffffffff
    2c0c:	ffffffff 	.word	0xffffffff
    2c10:	ffffffff 	.word	0xffffffff
    2c14:	ffffffff 	.word	0xffffffff
    2c18:	ffffffff 	.word	0xffffffff
    2c1c:	ffffffff 	.word	0xffffffff
    2c20:	ffffffff 	.word	0xffffffff
    2c24:	ffffffff 	.word	0xffffffff
    2c28:	ffffffff 	.word	0xffffffff
    2c2c:	ffffffff 	.word	0xffffffff
    2c30:	ffffffff 	.word	0xffffffff
    2c34:	ffffffff 	.word	0xffffffff
    2c38:	ffffffff 	.word	0xffffffff
    2c3c:	ffffffff 	.word	0xffffffff
    2c40:	ffffffff 	.word	0xffffffff
    2c44:	ffffffff 	.word	0xffffffff
    2c48:	ffffffff 	.word	0xffffffff
    2c4c:	ffffffff 	.word	0xffffffff
    2c50:	ffffffff 	.word	0xffffffff
    2c54:	ffffffff 	.word	0xffffffff
    2c58:	ffffffff 	.word	0xffffffff
    2c5c:	ffffffff 	.word	0xffffffff
    2c60:	ffffffff 	.word	0xffffffff
    2c64:	ffffffff 	.word	0xffffffff
    2c68:	ffffffff 	.word	0xffffffff
    2c6c:	ffffffff 	.word	0xffffffff
    2c70:	ffffffff 	.word	0xffffffff
    2c74:	ffffffff 	.word	0xffffffff
    2c78:	ffffffff 	.word	0xffffffff
    2c7c:	ffffffff 	.word	0xffffffff
    2c80:	ffffffff 	.word	0xffffffff
    2c84:	ffffffff 	.word	0xffffffff
    2c88:	ffffffff 	.word	0xffffffff
    2c8c:	ffffffff 	.word	0xffffffff
    2c90:	ffffffff 	.word	0xffffffff
    2c94:	ffffffff 	.word	0xffffffff
    2c98:	ffffffff 	.word	0xffffffff
    2c9c:	ffffffff 	.word	0xffffffff
    2ca0:	ffffffff 	.word	0xffffffff
    2ca4:	ffffffff 	.word	0xffffffff
    2ca8:	ffffffff 	.word	0xffffffff
    2cac:	ffffffff 	.word	0xffffffff
    2cb0:	ffffffff 	.word	0xffffffff
    2cb4:	ffffffff 	.word	0xffffffff
    2cb8:	ffffffff 	.word	0xffffffff
    2cbc:	ffffffff 	.word	0xffffffff
    2cc0:	ffffffff 	.word	0xffffffff
    2cc4:	ffffffff 	.word	0xffffffff
    2cc8:	ffffffff 	.word	0xffffffff
    2ccc:	ffffffff 	.word	0xffffffff
    2cd0:	ffffffff 	.word	0xffffffff
    2cd4:	ffffffff 	.word	0xffffffff
    2cd8:	ffffffff 	.word	0xffffffff
    2cdc:	ffffffff 	.word	0xffffffff
    2ce0:	ffffffff 	.word	0xffffffff
    2ce4:	ffffffff 	.word	0xffffffff
    2ce8:	ffffffff 	.word	0xffffffff
    2cec:	ffffffff 	.word	0xffffffff
    2cf0:	ffffffff 	.word	0xffffffff
    2cf4:	ffffffff 	.word	0xffffffff
    2cf8:	ffffffff 	.word	0xffffffff
    2cfc:	ffffffff 	.word	0xffffffff
    2d00:	ffffffff 	.word	0xffffffff
    2d04:	ffffffff 	.word	0xffffffff
    2d08:	ffffffff 	.word	0xffffffff
    2d0c:	ffffffff 	.word	0xffffffff
    2d10:	ffffffff 	.word	0xffffffff
    2d14:	ffffffff 	.word	0xffffffff
    2d18:	ffffffff 	.word	0xffffffff
    2d1c:	ffffffff 	.word	0xffffffff
    2d20:	ffffffff 	.word	0xffffffff
    2d24:	ffffffff 	.word	0xffffffff
    2d28:	ffffffff 	.word	0xffffffff
    2d2c:	ffffffff 	.word	0xffffffff
    2d30:	ffffffff 	.word	0xffffffff
    2d34:	ffffffff 	.word	0xffffffff
    2d38:	ffffffff 	.word	0xffffffff
    2d3c:	ffffffff 	.word	0xffffffff
    2d40:	ffffffff 	.word	0xffffffff
    2d44:	ffffffff 	.word	0xffffffff
    2d48:	ffffffff 	.word	0xffffffff
    2d4c:	ffffffff 	.word	0xffffffff
    2d50:	ffffffff 	.word	0xffffffff
    2d54:	ffffffff 	.word	0xffffffff
    2d58:	ffffffff 	.word	0xffffffff
    2d5c:	ffffffff 	.word	0xffffffff
    2d60:	ffffffff 	.word	0xffffffff
    2d64:	ffffffff 	.word	0xffffffff
    2d68:	ffffffff 	.word	0xffffffff
    2d6c:	ffffffff 	.word	0xffffffff
    2d70:	ffffffff 	.word	0xffffffff
    2d74:	ffffffff 	.word	0xffffffff
    2d78:	ffffffff 	.word	0xffffffff
    2d7c:	ffffffff 	.word	0xffffffff
    2d80:	ffffffff 	.word	0xffffffff
    2d84:	ffffffff 	.word	0xffffffff
    2d88:	ffffffff 	.word	0xffffffff
    2d8c:	ffffffff 	.word	0xffffffff
    2d90:	ffffffff 	.word	0xffffffff
    2d94:	ffffffff 	.word	0xffffffff
    2d98:	ffffffff 	.word	0xffffffff
    2d9c:	ffffffff 	.word	0xffffffff
    2da0:	ffffffff 	.word	0xffffffff
    2da4:	ffffffff 	.word	0xffffffff
    2da8:	ffffffff 	.word	0xffffffff
    2dac:	ffffffff 	.word	0xffffffff
    2db0:	ffffffff 	.word	0xffffffff
    2db4:	ffffffff 	.word	0xffffffff
    2db8:	ffffffff 	.word	0xffffffff
    2dbc:	ffffffff 	.word	0xffffffff
    2dc0:	ffffffff 	.word	0xffffffff
    2dc4:	ffffffff 	.word	0xffffffff
    2dc8:	ffffffff 	.word	0xffffffff
    2dcc:	ffffffff 	.word	0xffffffff
    2dd0:	ffffffff 	.word	0xffffffff
    2dd4:	ffffffff 	.word	0xffffffff
    2dd8:	ffffffff 	.word	0xffffffff
    2ddc:	ffffffff 	.word	0xffffffff
    2de0:	ffffffff 	.word	0xffffffff
    2de4:	ffffffff 	.word	0xffffffff
    2de8:	ffffffff 	.word	0xffffffff
    2dec:	ffffffff 	.word	0xffffffff
    2df0:	ffffffff 	.word	0xffffffff
    2df4:	ffffffff 	.word	0xffffffff
    2df8:	ffffffff 	.word	0xffffffff
    2dfc:	ffffffff 	.word	0xffffffff
    2e00:	ffffffff 	.word	0xffffffff
    2e04:	ffffffff 	.word	0xffffffff
    2e08:	ffffffff 	.word	0xffffffff
    2e0c:	ffffffff 	.word	0xffffffff
    2e10:	ffffffff 	.word	0xffffffff
    2e14:	ffffffff 	.word	0xffffffff
    2e18:	ffffffff 	.word	0xffffffff
    2e1c:	ffffffff 	.word	0xffffffff
    2e20:	ffffffff 	.word	0xffffffff
    2e24:	ffffffff 	.word	0xffffffff
    2e28:	ffffffff 	.word	0xffffffff
    2e2c:	ffffffff 	.word	0xffffffff
    2e30:	ffffffff 	.word	0xffffffff
    2e34:	ffffffff 	.word	0xffffffff
    2e38:	ffffffff 	.word	0xffffffff
    2e3c:	ffffffff 	.word	0xffffffff
    2e40:	ffffffff 	.word	0xffffffff
    2e44:	ffffffff 	.word	0xffffffff
    2e48:	ffffffff 	.word	0xffffffff
    2e4c:	ffffffff 	.word	0xffffffff
    2e50:	ffffffff 	.word	0xffffffff
    2e54:	ffffffff 	.word	0xffffffff
    2e58:	ffffffff 	.word	0xffffffff
    2e5c:	ffffffff 	.word	0xffffffff
    2e60:	ffffffff 	.word	0xffffffff
    2e64:	ffffffff 	.word	0xffffffff
    2e68:	ffffffff 	.word	0xffffffff
    2e6c:	ffffffff 	.word	0xffffffff
    2e70:	ffffffff 	.word	0xffffffff
    2e74:	ffffffff 	.word	0xffffffff
    2e78:	ffffffff 	.word	0xffffffff
    2e7c:	ffffffff 	.word	0xffffffff
    2e80:	ffffffff 	.word	0xffffffff
    2e84:	ffffffff 	.word	0xffffffff
    2e88:	ffffffff 	.word	0xffffffff
    2e8c:	ffffffff 	.word	0xffffffff
    2e90:	ffffffff 	.word	0xffffffff
    2e94:	ffffffff 	.word	0xffffffff
    2e98:	ffffffff 	.word	0xffffffff
    2e9c:	ffffffff 	.word	0xffffffff
    2ea0:	ffffffff 	.word	0xffffffff
    2ea4:	ffffffff 	.word	0xffffffff
    2ea8:	ffffffff 	.word	0xffffffff
    2eac:	ffffffff 	.word	0xffffffff
    2eb0:	ffffffff 	.word	0xffffffff
    2eb4:	ffffffff 	.word	0xffffffff
    2eb8:	ffffffff 	.word	0xffffffff
    2ebc:	ffffffff 	.word	0xffffffff
    2ec0:	ffffffff 	.word	0xffffffff
    2ec4:	ffffffff 	.word	0xffffffff
    2ec8:	ffffffff 	.word	0xffffffff
    2ecc:	ffffffff 	.word	0xffffffff
    2ed0:	ffffffff 	.word	0xffffffff
    2ed4:	ffffffff 	.word	0xffffffff
    2ed8:	ffffffff 	.word	0xffffffff
    2edc:	ffffffff 	.word	0xffffffff
    2ee0:	ffffffff 	.word	0xffffffff
    2ee4:	ffffffff 	.word	0xffffffff
    2ee8:	ffffffff 	.word	0xffffffff
    2eec:	ffffffff 	.word	0xffffffff
    2ef0:	ffffffff 	.word	0xffffffff
    2ef4:	ffffffff 	.word	0xffffffff
    2ef8:	ffffffff 	.word	0xffffffff
    2efc:	ffffffff 	.word	0xffffffff
    2f00:	ffffffff 	.word	0xffffffff
    2f04:	ffffffff 	.word	0xffffffff
    2f08:	ffffffff 	.word	0xffffffff
    2f0c:	ffffffff 	.word	0xffffffff
    2f10:	ffffffff 	.word	0xffffffff
    2f14:	ffffffff 	.word	0xffffffff
    2f18:	ffffffff 	.word	0xffffffff
    2f1c:	ffffffff 	.word	0xffffffff
    2f20:	ffffffff 	.word	0xffffffff
    2f24:	ffffffff 	.word	0xffffffff
    2f28:	ffffffff 	.word	0xffffffff
    2f2c:	ffffffff 	.word	0xffffffff
    2f30:	ffffffff 	.word	0xffffffff
    2f34:	ffffffff 	.word	0xffffffff
    2f38:	ffffffff 	.word	0xffffffff
    2f3c:	ffffffff 	.word	0xffffffff
    2f40:	ffffffff 	.word	0xffffffff
    2f44:	ffffffff 	.word	0xffffffff
    2f48:	ffffffff 	.word	0xffffffff
    2f4c:	ffffffff 	.word	0xffffffff
    2f50:	ffffffff 	.word	0xffffffff
    2f54:	ffffffff 	.word	0xffffffff
    2f58:	ffffffff 	.word	0xffffffff
    2f5c:	ffffffff 	.word	0xffffffff
    2f60:	ffffffff 	.word	0xffffffff
    2f64:	ffffffff 	.word	0xffffffff
    2f68:	ffffffff 	.word	0xffffffff
    2f6c:	ffffffff 	.word	0xffffffff
    2f70:	ffffffff 	.word	0xffffffff
    2f74:	ffffffff 	.word	0xffffffff
    2f78:	ffffffff 	.word	0xffffffff
    2f7c:	ffffffff 	.word	0xffffffff
    2f80:	ffffffff 	.word	0xffffffff
    2f84:	ffffffff 	.word	0xffffffff
    2f88:	ffffffff 	.word	0xffffffff
    2f8c:	ffffffff 	.word	0xffffffff
    2f90:	ffffffff 	.word	0xffffffff
    2f94:	ffffffff 	.word	0xffffffff
    2f98:	ffffffff 	.word	0xffffffff
    2f9c:	ffffffff 	.word	0xffffffff
    2fa0:	ffffffff 	.word	0xffffffff
    2fa4:	ffffffff 	.word	0xffffffff
    2fa8:	ffffffff 	.word	0xffffffff
    2fac:	ffffffff 	.word	0xffffffff
    2fb0:	ffffffff 	.word	0xffffffff
    2fb4:	ffffffff 	.word	0xffffffff
    2fb8:	ffffffff 	.word	0xffffffff
    2fbc:	ffffffff 	.word	0xffffffff
    2fc0:	ffffffff 	.word	0xffffffff
    2fc4:	ffffffff 	.word	0xffffffff
    2fc8:	ffffffff 	.word	0xffffffff
    2fcc:	ffffffff 	.word	0xffffffff
    2fd0:	ffffffff 	.word	0xffffffff
    2fd4:	ffffffff 	.word	0xffffffff
    2fd8:	ffffffff 	.word	0xffffffff
    2fdc:	ffffffff 	.word	0xffffffff
    2fe0:	ffffffff 	.word	0xffffffff
    2fe4:	ffffffff 	.word	0xffffffff
    2fe8:	ffffffff 	.word	0xffffffff
    2fec:	ffffffff 	.word	0xffffffff
    2ff0:	ffffffff 	.word	0xffffffff
    2ff4:	ffffffff 	.word	0xffffffff
    2ff8:	ffffffff 	.word	0xffffffff
    2ffc:	ffffffff 	.word	0xffffffff
    3000:	ffffffff 	.word	0xffffffff
    3004:	ffffffff 	.word	0xffffffff
    3008:	ffffffff 	.word	0xffffffff
    300c:	ffffffff 	.word	0xffffffff
    3010:	ffffffff 	.word	0xffffffff
    3014:	ffffffff 	.word	0xffffffff
    3018:	ffffffff 	.word	0xffffffff
    301c:	ffffffff 	.word	0xffffffff
    3020:	ffffffff 	.word	0xffffffff
    3024:	ffffffff 	.word	0xffffffff
    3028:	ffffffff 	.word	0xffffffff
    302c:	ffffffff 	.word	0xffffffff
    3030:	ffffffff 	.word	0xffffffff
    3034:	ffffffff 	.word	0xffffffff
    3038:	ffffffff 	.word	0xffffffff
    303c:	ffffffff 	.word	0xffffffff
    3040:	ffffffff 	.word	0xffffffff
    3044:	ffffffff 	.word	0xffffffff
    3048:	ffffffff 	.word	0xffffffff
    304c:	ffffffff 	.word	0xffffffff
    3050:	ffffffff 	.word	0xffffffff
    3054:	ffffffff 	.word	0xffffffff
    3058:	ffffffff 	.word	0xffffffff
    305c:	ffffffff 	.word	0xffffffff
    3060:	ffffffff 	.word	0xffffffff
    3064:	ffffffff 	.word	0xffffffff
    3068:	ffffffff 	.word	0xffffffff
    306c:	ffffffff 	.word	0xffffffff
    3070:	ffffffff 	.word	0xffffffff
    3074:	ffffffff 	.word	0xffffffff
    3078:	ffffffff 	.word	0xffffffff
    307c:	ffffffff 	.word	0xffffffff
    3080:	ffffffff 	.word	0xffffffff
    3084:	ffffffff 	.word	0xffffffff
    3088:	ffffffff 	.word	0xffffffff
    308c:	ffffffff 	.word	0xffffffff
    3090:	ffffffff 	.word	0xffffffff
    3094:	ffffffff 	.word	0xffffffff
    3098:	ffffffff 	.word	0xffffffff
    309c:	ffffffff 	.word	0xffffffff
    30a0:	ffffffff 	.word	0xffffffff
    30a4:	ffffffff 	.word	0xffffffff
    30a8:	ffffffff 	.word	0xffffffff
    30ac:	ffffffff 	.word	0xffffffff
    30b0:	ffffffff 	.word	0xffffffff
    30b4:	ffffffff 	.word	0xffffffff
    30b8:	ffffffff 	.word	0xffffffff
    30bc:	ffffffff 	.word	0xffffffff
    30c0:	ffffffff 	.word	0xffffffff
    30c4:	ffffffff 	.word	0xffffffff
    30c8:	ffffffff 	.word	0xffffffff
    30cc:	ffffffff 	.word	0xffffffff
    30d0:	ffffffff 	.word	0xffffffff
    30d4:	ffffffff 	.word	0xffffffff
    30d8:	ffffffff 	.word	0xffffffff
    30dc:	ffffffff 	.word	0xffffffff
    30e0:	ffffffff 	.word	0xffffffff
    30e4:	ffffffff 	.word	0xffffffff
    30e8:	ffffffff 	.word	0xffffffff
    30ec:	ffffffff 	.word	0xffffffff
    30f0:	ffffffff 	.word	0xffffffff
    30f4:	ffffffff 	.word	0xffffffff
    30f8:	ffffffff 	.word	0xffffffff
    30fc:	ffffffff 	.word	0xffffffff
    3100:	ffffffff 	.word	0xffffffff
    3104:	ffffffff 	.word	0xffffffff
    3108:	ffffffff 	.word	0xffffffff
    310c:	ffffffff 	.word	0xffffffff
    3110:	ffffffff 	.word	0xffffffff
    3114:	ffffffff 	.word	0xffffffff
    3118:	ffffffff 	.word	0xffffffff
    311c:	ffffffff 	.word	0xffffffff
    3120:	ffffffff 	.word	0xffffffff
    3124:	ffffffff 	.word	0xffffffff
    3128:	ffffffff 	.word	0xffffffff
    312c:	ffffffff 	.word	0xffffffff
    3130:	ffffffff 	.word	0xffffffff
    3134:	ffffffff 	.word	0xffffffff
    3138:	ffffffff 	.word	0xffffffff
    313c:	ffffffff 	.word	0xffffffff
    3140:	ffffffff 	.word	0xffffffff
    3144:	ffffffff 	.word	0xffffffff
    3148:	ffffffff 	.word	0xffffffff
    314c:	ffffffff 	.word	0xffffffff
    3150:	ffffffff 	.word	0xffffffff
    3154:	ffffffff 	.word	0xffffffff
    3158:	ffffffff 	.word	0xffffffff
    315c:	ffffffff 	.word	0xffffffff
    3160:	ffffffff 	.word	0xffffffff
    3164:	ffffffff 	.word	0xffffffff
    3168:	ffffffff 	.word	0xffffffff
    316c:	ffffffff 	.word	0xffffffff
    3170:	ffffffff 	.word	0xffffffff
    3174:	ffffffff 	.word	0xffffffff
    3178:	ffffffff 	.word	0xffffffff
    317c:	ffffffff 	.word	0xffffffff
    3180:	ffffffff 	.word	0xffffffff
    3184:	ffffffff 	.word	0xffffffff
    3188:	ffffffff 	.word	0xffffffff
    318c:	ffffffff 	.word	0xffffffff
    3190:	ffffffff 	.word	0xffffffff
    3194:	ffffffff 	.word	0xffffffff
    3198:	ffffffff 	.word	0xffffffff
    319c:	ffffffff 	.word	0xffffffff
    31a0:	ffffffff 	.word	0xffffffff
    31a4:	ffffffff 	.word	0xffffffff
    31a8:	ffffffff 	.word	0xffffffff
    31ac:	ffffffff 	.word	0xffffffff
    31b0:	ffffffff 	.word	0xffffffff
    31b4:	ffffffff 	.word	0xffffffff
    31b8:	ffffffff 	.word	0xffffffff
    31bc:	ffffffff 	.word	0xffffffff
    31c0:	ffffffff 	.word	0xffffffff
    31c4:	ffffffff 	.word	0xffffffff
    31c8:	ffffffff 	.word	0xffffffff
    31cc:	ffffffff 	.word	0xffffffff
    31d0:	ffffffff 	.word	0xffffffff
    31d4:	ffffffff 	.word	0xffffffff
    31d8:	ffffffff 	.word	0xffffffff
    31dc:	ffffffff 	.word	0xffffffff
    31e0:	ffffffff 	.word	0xffffffff
    31e4:	ffffffff 	.word	0xffffffff
    31e8:	ffffffff 	.word	0xffffffff
    31ec:	ffffffff 	.word	0xffffffff
    31f0:	ffffffff 	.word	0xffffffff
    31f4:	ffffffff 	.word	0xffffffff
    31f8:	ffffffff 	.word	0xffffffff
    31fc:	ffffffff 	.word	0xffffffff
    3200:	ffffffff 	.word	0xffffffff
    3204:	ffffffff 	.word	0xffffffff
    3208:	ffffffff 	.word	0xffffffff
    320c:	ffffffff 	.word	0xffffffff
    3210:	ffffffff 	.word	0xffffffff
    3214:	ffffffff 	.word	0xffffffff
    3218:	ffffffff 	.word	0xffffffff
    321c:	ffffffff 	.word	0xffffffff
    3220:	ffffffff 	.word	0xffffffff
    3224:	ffffffff 	.word	0xffffffff
    3228:	ffffffff 	.word	0xffffffff
    322c:	ffffffff 	.word	0xffffffff
    3230:	ffffffff 	.word	0xffffffff
    3234:	ffffffff 	.word	0xffffffff
    3238:	ffffffff 	.word	0xffffffff
    323c:	ffffffff 	.word	0xffffffff
    3240:	ffffffff 	.word	0xffffffff
    3244:	ffffffff 	.word	0xffffffff
    3248:	ffffffff 	.word	0xffffffff
    324c:	ffffffff 	.word	0xffffffff
    3250:	ffffffff 	.word	0xffffffff
    3254:	ffffffff 	.word	0xffffffff
    3258:	ffffffff 	.word	0xffffffff
    325c:	ffffffff 	.word	0xffffffff
    3260:	ffffffff 	.word	0xffffffff
    3264:	ffffffff 	.word	0xffffffff
    3268:	ffffffff 	.word	0xffffffff
    326c:	ffffffff 	.word	0xffffffff
    3270:	ffffffff 	.word	0xffffffff
    3274:	ffffffff 	.word	0xffffffff
    3278:	ffffffff 	.word	0xffffffff
    327c:	ffffffff 	.word	0xffffffff
    3280:	ffffffff 	.word	0xffffffff
    3284:	ffffffff 	.word	0xffffffff
    3288:	ffffffff 	.word	0xffffffff
    328c:	ffffffff 	.word	0xffffffff
    3290:	ffffffff 	.word	0xffffffff
    3294:	ffffffff 	.word	0xffffffff
    3298:	ffffffff 	.word	0xffffffff
    329c:	ffffffff 	.word	0xffffffff
    32a0:	ffffffff 	.word	0xffffffff
    32a4:	ffffffff 	.word	0xffffffff
    32a8:	ffffffff 	.word	0xffffffff
    32ac:	ffffffff 	.word	0xffffffff
    32b0:	ffffffff 	.word	0xffffffff
    32b4:	ffffffff 	.word	0xffffffff
    32b8:	ffffffff 	.word	0xffffffff
    32bc:	ffffffff 	.word	0xffffffff
    32c0:	ffffffff 	.word	0xffffffff
    32c4:	ffffffff 	.word	0xffffffff
    32c8:	ffffffff 	.word	0xffffffff
    32cc:	ffffffff 	.word	0xffffffff
    32d0:	ffffffff 	.word	0xffffffff
    32d4:	ffffffff 	.word	0xffffffff
    32d8:	ffffffff 	.word	0xffffffff
    32dc:	ffffffff 	.word	0xffffffff
    32e0:	ffffffff 	.word	0xffffffff
    32e4:	ffffffff 	.word	0xffffffff
    32e8:	ffffffff 	.word	0xffffffff
    32ec:	ffffffff 	.word	0xffffffff
    32f0:	ffffffff 	.word	0xffffffff
    32f4:	ffffffff 	.word	0xffffffff
    32f8:	ffffffff 	.word	0xffffffff
    32fc:	ffffffff 	.word	0xffffffff
    3300:	ffffffff 	.word	0xffffffff
    3304:	ffffffff 	.word	0xffffffff
    3308:	ffffffff 	.word	0xffffffff
    330c:	ffffffff 	.word	0xffffffff
    3310:	ffffffff 	.word	0xffffffff
    3314:	ffffffff 	.word	0xffffffff
    3318:	ffffffff 	.word	0xffffffff
    331c:	ffffffff 	.word	0xffffffff
    3320:	ffffffff 	.word	0xffffffff
    3324:	ffffffff 	.word	0xffffffff
    3328:	ffffffff 	.word	0xffffffff
    332c:	ffffffff 	.word	0xffffffff
    3330:	ffffffff 	.word	0xffffffff
    3334:	ffffffff 	.word	0xffffffff
    3338:	ffffffff 	.word	0xffffffff
    333c:	ffffffff 	.word	0xffffffff
    3340:	ffffffff 	.word	0xffffffff
    3344:	ffffffff 	.word	0xffffffff
    3348:	ffffffff 	.word	0xffffffff
    334c:	ffffffff 	.word	0xffffffff
    3350:	ffffffff 	.word	0xffffffff
    3354:	ffffffff 	.word	0xffffffff
    3358:	ffffffff 	.word	0xffffffff
    335c:	ffffffff 	.word	0xffffffff
    3360:	ffffffff 	.word	0xffffffff
    3364:	ffffffff 	.word	0xffffffff
    3368:	ffffffff 	.word	0xffffffff
    336c:	ffffffff 	.word	0xffffffff
    3370:	ffffffff 	.word	0xffffffff
    3374:	ffffffff 	.word	0xffffffff
    3378:	ffffffff 	.word	0xffffffff
    337c:	ffffffff 	.word	0xffffffff
    3380:	ffffffff 	.word	0xffffffff
    3384:	ffffffff 	.word	0xffffffff
    3388:	ffffffff 	.word	0xffffffff
    338c:	ffffffff 	.word	0xffffffff
    3390:	ffffffff 	.word	0xffffffff
    3394:	ffffffff 	.word	0xffffffff
    3398:	ffffffff 	.word	0xffffffff
    339c:	ffffffff 	.word	0xffffffff
    33a0:	ffffffff 	.word	0xffffffff
    33a4:	ffffffff 	.word	0xffffffff
    33a8:	ffffffff 	.word	0xffffffff
    33ac:	ffffffff 	.word	0xffffffff
    33b0:	ffffffff 	.word	0xffffffff
    33b4:	ffffffff 	.word	0xffffffff
    33b8:	ffffffff 	.word	0xffffffff
    33bc:	ffffffff 	.word	0xffffffff
    33c0:	ffffffff 	.word	0xffffffff
    33c4:	ffffffff 	.word	0xffffffff
    33c8:	ffffffff 	.word	0xffffffff
    33cc:	ffffffff 	.word	0xffffffff
    33d0:	ffffffff 	.word	0xffffffff
    33d4:	ffffffff 	.word	0xffffffff
    33d8:	ffffffff 	.word	0xffffffff
    33dc:	ffffffff 	.word	0xffffffff
    33e0:	ffffffff 	.word	0xffffffff
    33e4:	ffffffff 	.word	0xffffffff
    33e8:	ffffffff 	.word	0xffffffff
    33ec:	ffffffff 	.word	0xffffffff
    33f0:	ffffffff 	.word	0xffffffff
    33f4:	ffffffff 	.word	0xffffffff
    33f8:	ffffffff 	.word	0xffffffff
    33fc:	ffffffff 	.word	0xffffffff
    3400:	ffffffff 	.word	0xffffffff
    3404:	ffffffff 	.word	0xffffffff
    3408:	ffffffff 	.word	0xffffffff
    340c:	ffffffff 	.word	0xffffffff
    3410:	ffffffff 	.word	0xffffffff
    3414:	ffffffff 	.word	0xffffffff
    3418:	ffffffff 	.word	0xffffffff
    341c:	ffffffff 	.word	0xffffffff
    3420:	ffffffff 	.word	0xffffffff
    3424:	ffffffff 	.word	0xffffffff
    3428:	ffffffff 	.word	0xffffffff
    342c:	ffffffff 	.word	0xffffffff
    3430:	ffffffff 	.word	0xffffffff
    3434:	ffffffff 	.word	0xffffffff
    3438:	ffffffff 	.word	0xffffffff
    343c:	ffffffff 	.word	0xffffffff
    3440:	ffffffff 	.word	0xffffffff
    3444:	ffffffff 	.word	0xffffffff
    3448:	ffffffff 	.word	0xffffffff
    344c:	ffffffff 	.word	0xffffffff
    3450:	ffffffff 	.word	0xffffffff
    3454:	ffffffff 	.word	0xffffffff
    3458:	ffffffff 	.word	0xffffffff
    345c:	ffffffff 	.word	0xffffffff
    3460:	ffffffff 	.word	0xffffffff
    3464:	ffffffff 	.word	0xffffffff
    3468:	ffffffff 	.word	0xffffffff
    346c:	ffffffff 	.word	0xffffffff
    3470:	ffffffff 	.word	0xffffffff
    3474:	ffffffff 	.word	0xffffffff
    3478:	ffffffff 	.word	0xffffffff
    347c:	ffffffff 	.word	0xffffffff
    3480:	ffffffff 	.word	0xffffffff
    3484:	ffffffff 	.word	0xffffffff
    3488:	ffffffff 	.word	0xffffffff
    348c:	ffffffff 	.word	0xffffffff
    3490:	ffffffff 	.word	0xffffffff
    3494:	ffffffff 	.word	0xffffffff
    3498:	ffffffff 	.word	0xffffffff
    349c:	ffffffff 	.word	0xffffffff
    34a0:	ffffffff 	.word	0xffffffff
    34a4:	ffffffff 	.word	0xffffffff
    34a8:	ffffffff 	.word	0xffffffff
    34ac:	ffffffff 	.word	0xffffffff
    34b0:	ffffffff 	.word	0xffffffff
    34b4:	ffffffff 	.word	0xffffffff
    34b8:	ffffffff 	.word	0xffffffff
    34bc:	ffffffff 	.word	0xffffffff
    34c0:	ffffffff 	.word	0xffffffff
    34c4:	ffffffff 	.word	0xffffffff
    34c8:	ffffffff 	.word	0xffffffff
    34cc:	ffffffff 	.word	0xffffffff
    34d0:	ffffffff 	.word	0xffffffff
    34d4:	ffffffff 	.word	0xffffffff
    34d8:	ffffffff 	.word	0xffffffff
    34dc:	ffffffff 	.word	0xffffffff
    34e0:	ffffffff 	.word	0xffffffff
    34e4:	ffffffff 	.word	0xffffffff
    34e8:	ffffffff 	.word	0xffffffff
    34ec:	ffffffff 	.word	0xffffffff
    34f0:	ffffffff 	.word	0xffffffff
    34f4:	ffffffff 	.word	0xffffffff
    34f8:	ffffffff 	.word	0xffffffff
    34fc:	ffffffff 	.word	0xffffffff
    3500:	ffffffff 	.word	0xffffffff
    3504:	ffffffff 	.word	0xffffffff
    3508:	ffffffff 	.word	0xffffffff
    350c:	ffffffff 	.word	0xffffffff
    3510:	ffffffff 	.word	0xffffffff
    3514:	ffffffff 	.word	0xffffffff
    3518:	ffffffff 	.word	0xffffffff
    351c:	ffffffff 	.word	0xffffffff
    3520:	ffffffff 	.word	0xffffffff
    3524:	ffffffff 	.word	0xffffffff
    3528:	ffffffff 	.word	0xffffffff
    352c:	ffffffff 	.word	0xffffffff
    3530:	ffffffff 	.word	0xffffffff
    3534:	ffffffff 	.word	0xffffffff
    3538:	ffffffff 	.word	0xffffffff
    353c:	ffffffff 	.word	0xffffffff
    3540:	ffffffff 	.word	0xffffffff
    3544:	ffffffff 	.word	0xffffffff
    3548:	ffffffff 	.word	0xffffffff
    354c:	ffffffff 	.word	0xffffffff
    3550:	ffffffff 	.word	0xffffffff
    3554:	ffffffff 	.word	0xffffffff
    3558:	ffffffff 	.word	0xffffffff
    355c:	ffffffff 	.word	0xffffffff
    3560:	ffffffff 	.word	0xffffffff
    3564:	ffffffff 	.word	0xffffffff
    3568:	ffffffff 	.word	0xffffffff
    356c:	ffffffff 	.word	0xffffffff
    3570:	ffffffff 	.word	0xffffffff
    3574:	ffffffff 	.word	0xffffffff
    3578:	ffffffff 	.word	0xffffffff
    357c:	ffffffff 	.word	0xffffffff
    3580:	ffffffff 	.word	0xffffffff
    3584:	ffffffff 	.word	0xffffffff
    3588:	ffffffff 	.word	0xffffffff
    358c:	ffffffff 	.word	0xffffffff
    3590:	ffffffff 	.word	0xffffffff
    3594:	ffffffff 	.word	0xffffffff
    3598:	ffffffff 	.word	0xffffffff
    359c:	ffffffff 	.word	0xffffffff
    35a0:	ffffffff 	.word	0xffffffff
    35a4:	ffffffff 	.word	0xffffffff
    35a8:	ffffffff 	.word	0xffffffff
    35ac:	ffffffff 	.word	0xffffffff
    35b0:	ffffffff 	.word	0xffffffff
    35b4:	ffffffff 	.word	0xffffffff
    35b8:	ffffffff 	.word	0xffffffff
    35bc:	ffffffff 	.word	0xffffffff
    35c0:	ffffffff 	.word	0xffffffff
    35c4:	ffffffff 	.word	0xffffffff
    35c8:	ffffffff 	.word	0xffffffff
    35cc:	ffffffff 	.word	0xffffffff
    35d0:	ffffffff 	.word	0xffffffff
    35d4:	ffffffff 	.word	0xffffffff
    35d8:	ffffffff 	.word	0xffffffff
    35dc:	ffffffff 	.word	0xffffffff
    35e0:	ffffffff 	.word	0xffffffff
    35e4:	ffffffff 	.word	0xffffffff
    35e8:	ffffffff 	.word	0xffffffff
    35ec:	ffffffff 	.word	0xffffffff
    35f0:	ffffffff 	.word	0xffffffff
    35f4:	ffffffff 	.word	0xffffffff
    35f8:	ffffffff 	.word	0xffffffff
    35fc:	ffffffff 	.word	0xffffffff
    3600:	ffffffff 	.word	0xffffffff
    3604:	ffffffff 	.word	0xffffffff
    3608:	ffffffff 	.word	0xffffffff
    360c:	ffffffff 	.word	0xffffffff
    3610:	ffffffff 	.word	0xffffffff
    3614:	ffffffff 	.word	0xffffffff
    3618:	ffffffff 	.word	0xffffffff
    361c:	ffffffff 	.word	0xffffffff
    3620:	ffffffff 	.word	0xffffffff
    3624:	ffffffff 	.word	0xffffffff
    3628:	ffffffff 	.word	0xffffffff
    362c:	ffffffff 	.word	0xffffffff
    3630:	ffffffff 	.word	0xffffffff
    3634:	ffffffff 	.word	0xffffffff
    3638:	ffffffff 	.word	0xffffffff
    363c:	ffffffff 	.word	0xffffffff
    3640:	ffffffff 	.word	0xffffffff
    3644:	ffffffff 	.word	0xffffffff
    3648:	ffffffff 	.word	0xffffffff
    364c:	ffffffff 	.word	0xffffffff
    3650:	ffffffff 	.word	0xffffffff
    3654:	ffffffff 	.word	0xffffffff
    3658:	ffffffff 	.word	0xffffffff
    365c:	ffffffff 	.word	0xffffffff
    3660:	ffffffff 	.word	0xffffffff
    3664:	ffffffff 	.word	0xffffffff
    3668:	ffffffff 	.word	0xffffffff
    366c:	ffffffff 	.word	0xffffffff
    3670:	ffffffff 	.word	0xffffffff
    3674:	ffffffff 	.word	0xffffffff
    3678:	ffffffff 	.word	0xffffffff
    367c:	ffffffff 	.word	0xffffffff
    3680:	ffffffff 	.word	0xffffffff
    3684:	ffffffff 	.word	0xffffffff
    3688:	ffffffff 	.word	0xffffffff
    368c:	ffffffff 	.word	0xffffffff
    3690:	ffffffff 	.word	0xffffffff
    3694:	ffffffff 	.word	0xffffffff
    3698:	ffffffff 	.word	0xffffffff
    369c:	ffffffff 	.word	0xffffffff
    36a0:	ffffffff 	.word	0xffffffff
    36a4:	ffffffff 	.word	0xffffffff
    36a8:	ffffffff 	.word	0xffffffff
    36ac:	ffffffff 	.word	0xffffffff
    36b0:	ffffffff 	.word	0xffffffff
    36b4:	ffffffff 	.word	0xffffffff
    36b8:	ffffffff 	.word	0xffffffff
    36bc:	ffffffff 	.word	0xffffffff
    36c0:	ffffffff 	.word	0xffffffff
    36c4:	ffffffff 	.word	0xffffffff
    36c8:	ffffffff 	.word	0xffffffff
    36cc:	ffffffff 	.word	0xffffffff
    36d0:	ffffffff 	.word	0xffffffff
    36d4:	ffffffff 	.word	0xffffffff
    36d8:	ffffffff 	.word	0xffffffff
    36dc:	ffffffff 	.word	0xffffffff
    36e0:	ffffffff 	.word	0xffffffff
    36e4:	ffffffff 	.word	0xffffffff
    36e8:	ffffffff 	.word	0xffffffff
    36ec:	ffffffff 	.word	0xffffffff
    36f0:	ffffffff 	.word	0xffffffff
    36f4:	ffffffff 	.word	0xffffffff
    36f8:	ffffffff 	.word	0xffffffff
    36fc:	ffffffff 	.word	0xffffffff
    3700:	ffffffff 	.word	0xffffffff
    3704:	ffffffff 	.word	0xffffffff
    3708:	ffffffff 	.word	0xffffffff
    370c:	ffffffff 	.word	0xffffffff
    3710:	ffffffff 	.word	0xffffffff
    3714:	ffffffff 	.word	0xffffffff
    3718:	ffffffff 	.word	0xffffffff
    371c:	ffffffff 	.word	0xffffffff
    3720:	ffffffff 	.word	0xffffffff
    3724:	ffffffff 	.word	0xffffffff
    3728:	ffffffff 	.word	0xffffffff
    372c:	ffffffff 	.word	0xffffffff
    3730:	ffffffff 	.word	0xffffffff
    3734:	ffffffff 	.word	0xffffffff
    3738:	ffffffff 	.word	0xffffffff
    373c:	ffffffff 	.word	0xffffffff
    3740:	ffffffff 	.word	0xffffffff
    3744:	ffffffff 	.word	0xffffffff
    3748:	ffffffff 	.word	0xffffffff
    374c:	ffffffff 	.word	0xffffffff
    3750:	ffffffff 	.word	0xffffffff
    3754:	ffffffff 	.word	0xffffffff
    3758:	ffffffff 	.word	0xffffffff
    375c:	ffffffff 	.word	0xffffffff
    3760:	ffffffff 	.word	0xffffffff
    3764:	ffffffff 	.word	0xffffffff
    3768:	ffffffff 	.word	0xffffffff
    376c:	ffffffff 	.word	0xffffffff
    3770:	ffffffff 	.word	0xffffffff
    3774:	ffffffff 	.word	0xffffffff
    3778:	ffffffff 	.word	0xffffffff
    377c:	ffffffff 	.word	0xffffffff
    3780:	ffffffff 	.word	0xffffffff
    3784:	ffffffff 	.word	0xffffffff
    3788:	ffffffff 	.word	0xffffffff
    378c:	ffffffff 	.word	0xffffffff
    3790:	ffffffff 	.word	0xffffffff
    3794:	ffffffff 	.word	0xffffffff
    3798:	ffffffff 	.word	0xffffffff
    379c:	ffffffff 	.word	0xffffffff
    37a0:	ffffffff 	.word	0xffffffff
    37a4:	ffffffff 	.word	0xffffffff
    37a8:	ffffffff 	.word	0xffffffff
    37ac:	ffffffff 	.word	0xffffffff
    37b0:	ffffffff 	.word	0xffffffff
    37b4:	ffffffff 	.word	0xffffffff
    37b8:	ffffffff 	.word	0xffffffff
    37bc:	ffffffff 	.word	0xffffffff
    37c0:	ffffffff 	.word	0xffffffff
    37c4:	ffffffff 	.word	0xffffffff
    37c8:	ffffffff 	.word	0xffffffff
    37cc:	ffffffff 	.word	0xffffffff
    37d0:	ffffffff 	.word	0xffffffff
    37d4:	ffffffff 	.word	0xffffffff
    37d8:	ffffffff 	.word	0xffffffff
    37dc:	ffffffff 	.word	0xffffffff
    37e0:	ffffffff 	.word	0xffffffff
    37e4:	ffffffff 	.word	0xffffffff
    37e8:	ffffffff 	.word	0xffffffff
    37ec:	ffffffff 	.word	0xffffffff
    37f0:	ffffffff 	.word	0xffffffff
    37f4:	ffffffff 	.word	0xffffffff
    37f8:	ffffffff 	.word	0xffffffff
    37fc:	ffffffff 	.word	0xffffffff
    3800:	ffffffff 	.word	0xffffffff
    3804:	ffffffff 	.word	0xffffffff
    3808:	ffffffff 	.word	0xffffffff
    380c:	ffffffff 	.word	0xffffffff
    3810:	ffffffff 	.word	0xffffffff
    3814:	ffffffff 	.word	0xffffffff
    3818:	ffffffff 	.word	0xffffffff
    381c:	ffffffff 	.word	0xffffffff
    3820:	ffffffff 	.word	0xffffffff
    3824:	ffffffff 	.word	0xffffffff
    3828:	ffffffff 	.word	0xffffffff
    382c:	ffffffff 	.word	0xffffffff
    3830:	ffffffff 	.word	0xffffffff
    3834:	ffffffff 	.word	0xffffffff
    3838:	ffffffff 	.word	0xffffffff
    383c:	ffffffff 	.word	0xffffffff
    3840:	ffffffff 	.word	0xffffffff
    3844:	ffffffff 	.word	0xffffffff
    3848:	ffffffff 	.word	0xffffffff
    384c:	ffffffff 	.word	0xffffffff
    3850:	ffffffff 	.word	0xffffffff
    3854:	ffffffff 	.word	0xffffffff
    3858:	ffffffff 	.word	0xffffffff
    385c:	ffffffff 	.word	0xffffffff
    3860:	ffffffff 	.word	0xffffffff
    3864:	ffffffff 	.word	0xffffffff
    3868:	ffffffff 	.word	0xffffffff
    386c:	ffffffff 	.word	0xffffffff
    3870:	ffffffff 	.word	0xffffffff
    3874:	ffffffff 	.word	0xffffffff
    3878:	ffffffff 	.word	0xffffffff
    387c:	ffffffff 	.word	0xffffffff
    3880:	ffffffff 	.word	0xffffffff
    3884:	ffffffff 	.word	0xffffffff
    3888:	ffffffff 	.word	0xffffffff
    388c:	ffffffff 	.word	0xffffffff
    3890:	ffffffff 	.word	0xffffffff
    3894:	ffffffff 	.word	0xffffffff
    3898:	ffffffff 	.word	0xffffffff
    389c:	ffffffff 	.word	0xffffffff
    38a0:	ffffffff 	.word	0xffffffff
    38a4:	ffffffff 	.word	0xffffffff
    38a8:	ffffffff 	.word	0xffffffff
    38ac:	ffffffff 	.word	0xffffffff
    38b0:	ffffffff 	.word	0xffffffff
    38b4:	ffffffff 	.word	0xffffffff
    38b8:	ffffffff 	.word	0xffffffff
    38bc:	ffffffff 	.word	0xffffffff
    38c0:	ffffffff 	.word	0xffffffff
    38c4:	ffffffff 	.word	0xffffffff
    38c8:	ffffffff 	.word	0xffffffff
    38cc:	ffffffff 	.word	0xffffffff
    38d0:	ffffffff 	.word	0xffffffff
    38d4:	ffffffff 	.word	0xffffffff
    38d8:	ffffffff 	.word	0xffffffff
    38dc:	ffffffff 	.word	0xffffffff
    38e0:	ffffffff 	.word	0xffffffff
    38e4:	ffffffff 	.word	0xffffffff
    38e8:	ffffffff 	.word	0xffffffff
    38ec:	ffffffff 	.word	0xffffffff
    38f0:	ffffffff 	.word	0xffffffff
    38f4:	ffffffff 	.word	0xffffffff
    38f8:	ffffffff 	.word	0xffffffff
    38fc:	ffffffff 	.word	0xffffffff
    3900:	ffffffff 	.word	0xffffffff
    3904:	ffffffff 	.word	0xffffffff
    3908:	ffffffff 	.word	0xffffffff
    390c:	ffffffff 	.word	0xffffffff
    3910:	ffffffff 	.word	0xffffffff
    3914:	ffffffff 	.word	0xffffffff
    3918:	ffffffff 	.word	0xffffffff
    391c:	ffffffff 	.word	0xffffffff
    3920:	ffffffff 	.word	0xffffffff
    3924:	ffffffff 	.word	0xffffffff
    3928:	ffffffff 	.word	0xffffffff
    392c:	ffffffff 	.word	0xffffffff
    3930:	ffffffff 	.word	0xffffffff
    3934:	ffffffff 	.word	0xffffffff
    3938:	ffffffff 	.word	0xffffffff
    393c:	ffffffff 	.word	0xffffffff
    3940:	ffffffff 	.word	0xffffffff
    3944:	ffffffff 	.word	0xffffffff
    3948:	ffffffff 	.word	0xffffffff
    394c:	ffffffff 	.word	0xffffffff
    3950:	ffffffff 	.word	0xffffffff
    3954:	ffffffff 	.word	0xffffffff
    3958:	ffffffff 	.word	0xffffffff
    395c:	ffffffff 	.word	0xffffffff
    3960:	ffffffff 	.word	0xffffffff
    3964:	ffffffff 	.word	0xffffffff
    3968:	ffffffff 	.word	0xffffffff
    396c:	ffffffff 	.word	0xffffffff
    3970:	ffffffff 	.word	0xffffffff
    3974:	ffffffff 	.word	0xffffffff
    3978:	ffffffff 	.word	0xffffffff
    397c:	ffffffff 	.word	0xffffffff
    3980:	ffffffff 	.word	0xffffffff
    3984:	ffffffff 	.word	0xffffffff
    3988:	ffffffff 	.word	0xffffffff
    398c:	ffffffff 	.word	0xffffffff
    3990:	ffffffff 	.word	0xffffffff
    3994:	ffffffff 	.word	0xffffffff
    3998:	ffffffff 	.word	0xffffffff
    399c:	ffffffff 	.word	0xffffffff
    39a0:	ffffffff 	.word	0xffffffff
    39a4:	ffffffff 	.word	0xffffffff
    39a8:	ffffffff 	.word	0xffffffff
    39ac:	ffffffff 	.word	0xffffffff
    39b0:	ffffffff 	.word	0xffffffff
    39b4:	ffffffff 	.word	0xffffffff
    39b8:	ffffffff 	.word	0xffffffff
    39bc:	ffffffff 	.word	0xffffffff
    39c0:	ffffffff 	.word	0xffffffff
    39c4:	ffffffff 	.word	0xffffffff
    39c8:	ffffffff 	.word	0xffffffff
    39cc:	ffffffff 	.word	0xffffffff
    39d0:	ffffffff 	.word	0xffffffff
    39d4:	ffffffff 	.word	0xffffffff
    39d8:	ffffffff 	.word	0xffffffff
    39dc:	ffffffff 	.word	0xffffffff
    39e0:	ffffffff 	.word	0xffffffff
    39e4:	ffffffff 	.word	0xffffffff
    39e8:	ffffffff 	.word	0xffffffff
    39ec:	ffffffff 	.word	0xffffffff
    39f0:	ffffffff 	.word	0xffffffff
    39f4:	ffffffff 	.word	0xffffffff
    39f8:	ffffffff 	.word	0xffffffff
    39fc:	ffffffff 	.word	0xffffffff
    3a00:	ffffffff 	.word	0xffffffff
    3a04:	ffffffff 	.word	0xffffffff
    3a08:	ffffffff 	.word	0xffffffff
    3a0c:	ffffffff 	.word	0xffffffff
    3a10:	ffffffff 	.word	0xffffffff
    3a14:	ffffffff 	.word	0xffffffff
    3a18:	ffffffff 	.word	0xffffffff
    3a1c:	ffffffff 	.word	0xffffffff
    3a20:	ffffffff 	.word	0xffffffff
    3a24:	ffffffff 	.word	0xffffffff
    3a28:	ffffffff 	.word	0xffffffff
    3a2c:	ffffffff 	.word	0xffffffff
    3a30:	ffffffff 	.word	0xffffffff
    3a34:	ffffffff 	.word	0xffffffff
    3a38:	ffffffff 	.word	0xffffffff
    3a3c:	ffffffff 	.word	0xffffffff
    3a40:	ffffffff 	.word	0xffffffff
    3a44:	ffffffff 	.word	0xffffffff
    3a48:	ffffffff 	.word	0xffffffff
    3a4c:	ffffffff 	.word	0xffffffff
    3a50:	ffffffff 	.word	0xffffffff
    3a54:	ffffffff 	.word	0xffffffff
    3a58:	ffffffff 	.word	0xffffffff
    3a5c:	ffffffff 	.word	0xffffffff
    3a60:	ffffffff 	.word	0xffffffff
    3a64:	ffffffff 	.word	0xffffffff
    3a68:	ffffffff 	.word	0xffffffff
    3a6c:	ffffffff 	.word	0xffffffff
    3a70:	ffffffff 	.word	0xffffffff
    3a74:	ffffffff 	.word	0xffffffff
    3a78:	ffffffff 	.word	0xffffffff
    3a7c:	ffffffff 	.word	0xffffffff
    3a80:	ffffffff 	.word	0xffffffff
    3a84:	ffffffff 	.word	0xffffffff
    3a88:	ffffffff 	.word	0xffffffff
    3a8c:	ffffffff 	.word	0xffffffff
    3a90:	ffffffff 	.word	0xffffffff
    3a94:	ffffffff 	.word	0xffffffff
    3a98:	ffffffff 	.word	0xffffffff
    3a9c:	ffffffff 	.word	0xffffffff
    3aa0:	ffffffff 	.word	0xffffffff
    3aa4:	ffffffff 	.word	0xffffffff
    3aa8:	ffffffff 	.word	0xffffffff
    3aac:	ffffffff 	.word	0xffffffff
    3ab0:	ffffffff 	.word	0xffffffff
    3ab4:	ffffffff 	.word	0xffffffff
    3ab8:	ffffffff 	.word	0xffffffff
    3abc:	ffffffff 	.word	0xffffffff
    3ac0:	ffffffff 	.word	0xffffffff
    3ac4:	ffffffff 	.word	0xffffffff
    3ac8:	ffffffff 	.word	0xffffffff
    3acc:	ffffffff 	.word	0xffffffff
    3ad0:	ffffffff 	.word	0xffffffff
    3ad4:	ffffffff 	.word	0xffffffff
    3ad8:	ffffffff 	.word	0xffffffff
    3adc:	ffffffff 	.word	0xffffffff
    3ae0:	ffffffff 	.word	0xffffffff
    3ae4:	ffffffff 	.word	0xffffffff
    3ae8:	ffffffff 	.word	0xffffffff
    3aec:	ffffffff 	.word	0xffffffff
    3af0:	ffffffff 	.word	0xffffffff
    3af4:	ffffffff 	.word	0xffffffff
    3af8:	ffffffff 	.word	0xffffffff
    3afc:	ffffffff 	.word	0xffffffff
    3b00:	ffffffff 	.word	0xffffffff
    3b04:	ffffffff 	.word	0xffffffff
    3b08:	ffffffff 	.word	0xffffffff
    3b0c:	ffffffff 	.word	0xffffffff
    3b10:	ffffffff 	.word	0xffffffff
    3b14:	ffffffff 	.word	0xffffffff
    3b18:	ffffffff 	.word	0xffffffff
    3b1c:	ffffffff 	.word	0xffffffff
    3b20:	ffffffff 	.word	0xffffffff
    3b24:	ffffffff 	.word	0xffffffff
    3b28:	ffffffff 	.word	0xffffffff
    3b2c:	ffffffff 	.word	0xffffffff
    3b30:	ffffffff 	.word	0xffffffff
    3b34:	ffffffff 	.word	0xffffffff
    3b38:	ffffffff 	.word	0xffffffff
    3b3c:	ffffffff 	.word	0xffffffff
    3b40:	ffffffff 	.word	0xffffffff
    3b44:	ffffffff 	.word	0xffffffff
    3b48:	ffffffff 	.word	0xffffffff
    3b4c:	ffffffff 	.word	0xffffffff
    3b50:	ffffffff 	.word	0xffffffff
    3b54:	ffffffff 	.word	0xffffffff
    3b58:	ffffffff 	.word	0xffffffff
    3b5c:	ffffffff 	.word	0xffffffff
    3b60:	ffffffff 	.word	0xffffffff
    3b64:	ffffffff 	.word	0xffffffff
    3b68:	ffffffff 	.word	0xffffffff
    3b6c:	ffffffff 	.word	0xffffffff
    3b70:	ffffffff 	.word	0xffffffff
    3b74:	ffffffff 	.word	0xffffffff
    3b78:	ffffffff 	.word	0xffffffff
    3b7c:	ffffffff 	.word	0xffffffff
    3b80:	ffffffff 	.word	0xffffffff
    3b84:	ffffffff 	.word	0xffffffff
    3b88:	ffffffff 	.word	0xffffffff
    3b8c:	ffffffff 	.word	0xffffffff
    3b90:	ffffffff 	.word	0xffffffff
    3b94:	ffffffff 	.word	0xffffffff
    3b98:	ffffffff 	.word	0xffffffff
    3b9c:	ffffffff 	.word	0xffffffff
    3ba0:	ffffffff 	.word	0xffffffff
    3ba4:	ffffffff 	.word	0xffffffff
    3ba8:	ffffffff 	.word	0xffffffff
    3bac:	ffffffff 	.word	0xffffffff
    3bb0:	ffffffff 	.word	0xffffffff
    3bb4:	ffffffff 	.word	0xffffffff
    3bb8:	ffffffff 	.word	0xffffffff
    3bbc:	ffffffff 	.word	0xffffffff
    3bc0:	ffffffff 	.word	0xffffffff
    3bc4:	ffffffff 	.word	0xffffffff
    3bc8:	ffffffff 	.word	0xffffffff
    3bcc:	ffffffff 	.word	0xffffffff
    3bd0:	ffffffff 	.word	0xffffffff
    3bd4:	ffffffff 	.word	0xffffffff
    3bd8:	ffffffff 	.word	0xffffffff
    3bdc:	ffffffff 	.word	0xffffffff
    3be0:	ffffffff 	.word	0xffffffff
    3be4:	ffffffff 	.word	0xffffffff
    3be8:	ffffffff 	.word	0xffffffff
    3bec:	ffffffff 	.word	0xffffffff
    3bf0:	ffffffff 	.word	0xffffffff
    3bf4:	ffffffff 	.word	0xffffffff
    3bf8:	ffffffff 	.word	0xffffffff
    3bfc:	ffffffff 	.word	0xffffffff
    3c00:	ffffffff 	.word	0xffffffff
    3c04:	ffffffff 	.word	0xffffffff
    3c08:	ffffffff 	.word	0xffffffff
    3c0c:	ffffffff 	.word	0xffffffff
    3c10:	ffffffff 	.word	0xffffffff
    3c14:	ffffffff 	.word	0xffffffff
    3c18:	ffffffff 	.word	0xffffffff
    3c1c:	ffffffff 	.word	0xffffffff
    3c20:	ffffffff 	.word	0xffffffff
    3c24:	ffffffff 	.word	0xffffffff
    3c28:	ffffffff 	.word	0xffffffff
    3c2c:	ffffffff 	.word	0xffffffff
    3c30:	ffffffff 	.word	0xffffffff
    3c34:	ffffffff 	.word	0xffffffff
    3c38:	ffffffff 	.word	0xffffffff
    3c3c:	ffffffff 	.word	0xffffffff
    3c40:	ffffffff 	.word	0xffffffff
    3c44:	ffffffff 	.word	0xffffffff
    3c48:	ffffffff 	.word	0xffffffff
    3c4c:	ffffffff 	.word	0xffffffff
    3c50:	ffffffff 	.word	0xffffffff
    3c54:	ffffffff 	.word	0xffffffff
    3c58:	ffffffff 	.word	0xffffffff
    3c5c:	ffffffff 	.word	0xffffffff
    3c60:	ffffffff 	.word	0xffffffff
    3c64:	ffffffff 	.word	0xffffffff
    3c68:	ffffffff 	.word	0xffffffff
    3c6c:	ffffffff 	.word	0xffffffff
    3c70:	ffffffff 	.word	0xffffffff
    3c74:	ffffffff 	.word	0xffffffff
    3c78:	ffffffff 	.word	0xffffffff
    3c7c:	ffffffff 	.word	0xffffffff
    3c80:	ffffffff 	.word	0xffffffff
    3c84:	ffffffff 	.word	0xffffffff
    3c88:	ffffffff 	.word	0xffffffff
    3c8c:	ffffffff 	.word	0xffffffff
    3c90:	ffffffff 	.word	0xffffffff
    3c94:	ffffffff 	.word	0xffffffff
    3c98:	ffffffff 	.word	0xffffffff
    3c9c:	ffffffff 	.word	0xffffffff
    3ca0:	ffffffff 	.word	0xffffffff
    3ca4:	ffffffff 	.word	0xffffffff
    3ca8:	ffffffff 	.word	0xffffffff
    3cac:	ffffffff 	.word	0xffffffff
    3cb0:	ffffffff 	.word	0xffffffff
    3cb4:	ffffffff 	.word	0xffffffff
    3cb8:	ffffffff 	.word	0xffffffff
    3cbc:	ffffffff 	.word	0xffffffff
    3cc0:	ffffffff 	.word	0xffffffff
    3cc4:	ffffffff 	.word	0xffffffff
    3cc8:	ffffffff 	.word	0xffffffff
    3ccc:	ffffffff 	.word	0xffffffff
    3cd0:	ffffffff 	.word	0xffffffff
    3cd4:	ffffffff 	.word	0xffffffff
    3cd8:	ffffffff 	.word	0xffffffff
    3cdc:	ffffffff 	.word	0xffffffff
    3ce0:	ffffffff 	.word	0xffffffff
    3ce4:	ffffffff 	.word	0xffffffff
    3ce8:	ffffffff 	.word	0xffffffff
    3cec:	ffffffff 	.word	0xffffffff
    3cf0:	ffffffff 	.word	0xffffffff
    3cf4:	ffffffff 	.word	0xffffffff
    3cf8:	ffffffff 	.word	0xffffffff
    3cfc:	ffffffff 	.word	0xffffffff
    3d00:	ffffffff 	.word	0xffffffff
    3d04:	ffffffff 	.word	0xffffffff
    3d08:	ffffffff 	.word	0xffffffff
    3d0c:	ffffffff 	.word	0xffffffff
    3d10:	ffffffff 	.word	0xffffffff
    3d14:	ffffffff 	.word	0xffffffff
    3d18:	ffffffff 	.word	0xffffffff
    3d1c:	ffffffff 	.word	0xffffffff
    3d20:	ffffffff 	.word	0xffffffff
    3d24:	ffffffff 	.word	0xffffffff
    3d28:	ffffffff 	.word	0xffffffff
    3d2c:	ffffffff 	.word	0xffffffff
    3d30:	ffffffff 	.word	0xffffffff
    3d34:	ffffffff 	.word	0xffffffff
    3d38:	ffffffff 	.word	0xffffffff
    3d3c:	ffffffff 	.word	0xffffffff
    3d40:	ffffffff 	.word	0xffffffff
    3d44:	ffffffff 	.word	0xffffffff
    3d48:	ffffffff 	.word	0xffffffff
    3d4c:	ffffffff 	.word	0xffffffff
    3d50:	ffffffff 	.word	0xffffffff
    3d54:	ffffffff 	.word	0xffffffff
    3d58:	ffffffff 	.word	0xffffffff
    3d5c:	ffffffff 	.word	0xffffffff
    3d60:	ffffffff 	.word	0xffffffff
    3d64:	ffffffff 	.word	0xffffffff
    3d68:	ffffffff 	.word	0xffffffff
    3d6c:	ffffffff 	.word	0xffffffff
    3d70:	ffffffff 	.word	0xffffffff
    3d74:	ffffffff 	.word	0xffffffff
    3d78:	ffffffff 	.word	0xffffffff
    3d7c:	ffffffff 	.word	0xffffffff
    3d80:	ffffffff 	.word	0xffffffff
    3d84:	ffffffff 	.word	0xffffffff
    3d88:	ffffffff 	.word	0xffffffff
    3d8c:	ffffffff 	.word	0xffffffff
    3d90:	ffffffff 	.word	0xffffffff
    3d94:	ffffffff 	.word	0xffffffff
    3d98:	ffffffff 	.word	0xffffffff
    3d9c:	ffffffff 	.word	0xffffffff
    3da0:	ffffffff 	.word	0xffffffff
    3da4:	ffffffff 	.word	0xffffffff
    3da8:	ffffffff 	.word	0xffffffff
    3dac:	ffffffff 	.word	0xffffffff
    3db0:	ffffffff 	.word	0xffffffff
    3db4:	ffffffff 	.word	0xffffffff
    3db8:	ffffffff 	.word	0xffffffff
    3dbc:	ffffffff 	.word	0xffffffff
    3dc0:	ffffffff 	.word	0xffffffff
    3dc4:	ffffffff 	.word	0xffffffff
    3dc8:	ffffffff 	.word	0xffffffff
    3dcc:	ffffffff 	.word	0xffffffff
    3dd0:	ffffffff 	.word	0xffffffff
    3dd4:	ffffffff 	.word	0xffffffff
    3dd8:	ffffffff 	.word	0xffffffff
    3ddc:	ffffffff 	.word	0xffffffff
    3de0:	ffffffff 	.word	0xffffffff
    3de4:	ffffffff 	.word	0xffffffff
    3de8:	ffffffff 	.word	0xffffffff
    3dec:	ffffffff 	.word	0xffffffff
    3df0:	ffffffff 	.word	0xffffffff
    3df4:	ffffffff 	.word	0xffffffff
    3df8:	ffffffff 	.word	0xffffffff
    3dfc:	ffffffff 	.word	0xffffffff
    3e00:	ffffffff 	.word	0xffffffff
    3e04:	ffffffff 	.word	0xffffffff
    3e08:	ffffffff 	.word	0xffffffff
    3e0c:	ffffffff 	.word	0xffffffff
    3e10:	ffffffff 	.word	0xffffffff
    3e14:	ffffffff 	.word	0xffffffff
    3e18:	ffffffff 	.word	0xffffffff
    3e1c:	ffffffff 	.word	0xffffffff
    3e20:	ffffffff 	.word	0xffffffff
    3e24:	ffffffff 	.word	0xffffffff
    3e28:	ffffffff 	.word	0xffffffff
    3e2c:	ffffffff 	.word	0xffffffff
    3e30:	ffffffff 	.word	0xffffffff
    3e34:	ffffffff 	.word	0xffffffff
    3e38:	ffffffff 	.word	0xffffffff
    3e3c:	ffffffff 	.word	0xffffffff
    3e40:	ffffffff 	.word	0xffffffff
    3e44:	ffffffff 	.word	0xffffffff
    3e48:	ffffffff 	.word	0xffffffff
    3e4c:	ffffffff 	.word	0xffffffff
    3e50:	ffffffff 	.word	0xffffffff
    3e54:	ffffffff 	.word	0xffffffff
    3e58:	ffffffff 	.word	0xffffffff
    3e5c:	ffffffff 	.word	0xffffffff
    3e60:	ffffffff 	.word	0xffffffff
    3e64:	ffffffff 	.word	0xffffffff
    3e68:	ffffffff 	.word	0xffffffff
    3e6c:	ffffffff 	.word	0xffffffff
    3e70:	ffffffff 	.word	0xffffffff
    3e74:	ffffffff 	.word	0xffffffff
    3e78:	ffffffff 	.word	0xffffffff
    3e7c:	ffffffff 	.word	0xffffffff
    3e80:	ffffffff 	.word	0xffffffff
    3e84:	ffffffff 	.word	0xffffffff
    3e88:	ffffffff 	.word	0xffffffff
    3e8c:	ffffffff 	.word	0xffffffff
    3e90:	ffffffff 	.word	0xffffffff
    3e94:	ffffffff 	.word	0xffffffff
    3e98:	ffffffff 	.word	0xffffffff
    3e9c:	ffffffff 	.word	0xffffffff
    3ea0:	ffffffff 	.word	0xffffffff
    3ea4:	ffffffff 	.word	0xffffffff
    3ea8:	ffffffff 	.word	0xffffffff
    3eac:	ffffffff 	.word	0xffffffff
    3eb0:	ffffffff 	.word	0xffffffff
    3eb4:	ffffffff 	.word	0xffffffff
    3eb8:	ffffffff 	.word	0xffffffff
    3ebc:	ffffffff 	.word	0xffffffff
    3ec0:	ffffffff 	.word	0xffffffff
    3ec4:	ffffffff 	.word	0xffffffff
    3ec8:	ffffffff 	.word	0xffffffff
    3ecc:	ffffffff 	.word	0xffffffff
    3ed0:	ffffffff 	.word	0xffffffff
    3ed4:	ffffffff 	.word	0xffffffff
    3ed8:	ffffffff 	.word	0xffffffff
    3edc:	ffffffff 	.word	0xffffffff
    3ee0:	ffffffff 	.word	0xffffffff
    3ee4:	ffffffff 	.word	0xffffffff
    3ee8:	ffffffff 	.word	0xffffffff
    3eec:	ffffffff 	.word	0xffffffff
    3ef0:	ffffffff 	.word	0xffffffff
    3ef4:	ffffffff 	.word	0xffffffff
    3ef8:	ffffffff 	.word	0xffffffff
    3efc:	ffffffff 	.word	0xffffffff
    3f00:	ffffffff 	.word	0xffffffff
    3f04:	ffffffff 	.word	0xffffffff
    3f08:	ffffffff 	.word	0xffffffff
    3f0c:	ffffffff 	.word	0xffffffff
    3f10:	ffffffff 	.word	0xffffffff
    3f14:	ffffffff 	.word	0xffffffff
    3f18:	ffffffff 	.word	0xffffffff
    3f1c:	ffffffff 	.word	0xffffffff
    3f20:	ffffffff 	.word	0xffffffff
    3f24:	ffffffff 	.word	0xffffffff
    3f28:	ffffffff 	.word	0xffffffff
    3f2c:	ffffffff 	.word	0xffffffff
    3f30:	ffffffff 	.word	0xffffffff
    3f34:	ffffffff 	.word	0xffffffff
    3f38:	ffffffff 	.word	0xffffffff
    3f3c:	ffffffff 	.word	0xffffffff
    3f40:	ffffffff 	.word	0xffffffff
    3f44:	ffffffff 	.word	0xffffffff
    3f48:	ffffffff 	.word	0xffffffff
    3f4c:	ffffffff 	.word	0xffffffff
    3f50:	ffffffff 	.word	0xffffffff
    3f54:	ffffffff 	.word	0xffffffff
    3f58:	ffffffff 	.word	0xffffffff
    3f5c:	ffffffff 	.word	0xffffffff
    3f60:	ffffffff 	.word	0xffffffff
    3f64:	ffffffff 	.word	0xffffffff
    3f68:	ffffffff 	.word	0xffffffff
    3f6c:	ffffffff 	.word	0xffffffff
    3f70:	ffffffff 	.word	0xffffffff
    3f74:	ffffffff 	.word	0xffffffff
    3f78:	ffffffff 	.word	0xffffffff
    3f7c:	ffffffff 	.word	0xffffffff
    3f80:	ffffffff 	.word	0xffffffff
    3f84:	ffffffff 	.word	0xffffffff
    3f88:	ffffffff 	.word	0xffffffff
    3f8c:	ffffffff 	.word	0xffffffff
    3f90:	ffffffff 	.word	0xffffffff
    3f94:	ffffffff 	.word	0xffffffff
    3f98:	ffffffff 	.word	0xffffffff
    3f9c:	ffffffff 	.word	0xffffffff
    3fa0:	ffffffff 	.word	0xffffffff
    3fa4:	ffffffff 	.word	0xffffffff
    3fa8:	ffffffff 	.word	0xffffffff
    3fac:	ffffffff 	.word	0xffffffff
    3fb0:	ffffffff 	.word	0xffffffff
    3fb4:	ffffffff 	.word	0xffffffff
    3fb8:	ffffffff 	.word	0xffffffff
    3fbc:	ffffffff 	.word	0xffffffff
    3fc0:	ffffffff 	.word	0xffffffff
    3fc4:	ffffffff 	.word	0xffffffff
    3fc8:	ffffffff 	.word	0xffffffff
    3fcc:	ffffffff 	.word	0xffffffff
    3fd0:	ffffffff 	.word	0xffffffff
    3fd4:	ffffffff 	.word	0xffffffff
    3fd8:	ffffffff 	.word	0xffffffff
    3fdc:	ffffffff 	.word	0xffffffff
    3fe0:	ffffffff 	.word	0xffffffff
    3fe4:	ffffffff 	.word	0xffffffff
    3fe8:	ffffffff 	.word	0xffffffff
    3fec:	ffffffff 	.word	0xffffffff
    3ff0:	ffffffff 	.word	0xffffffff
    3ff4:	ffffffff 	.word	0xffffffff
    3ff8:	ffffffff 	.word	0xffffffff
    3ffc:	ffffffff 	.word	0xffffffff
    4000:	ffffffff 	.word	0xffffffff
    4004:	ffffffff 	.word	0xffffffff
    4008:	ffffffff 	.word	0xffffffff
    400c:	ffffffff 	.word	0xffffffff
    4010:	ffffffff 	.word	0xffffffff
    4014:	ffffffff 	.word	0xffffffff
    4018:	ffffffff 	.word	0xffffffff
    401c:	ffffffff 	.word	0xffffffff
    4020:	ffffffff 	.word	0xffffffff
    4024:	ffffffff 	.word	0xffffffff
    4028:	ffffffff 	.word	0xffffffff
    402c:	ffffffff 	.word	0xffffffff
    4030:	ffffffff 	.word	0xffffffff
    4034:	ffffffff 	.word	0xffffffff
    4038:	ffffffff 	.word	0xffffffff
    403c:	ffffffff 	.word	0xffffffff
    4040:	ffffffff 	.word	0xffffffff
    4044:	ffffffff 	.word	0xffffffff
    4048:	ffffffff 	.word	0xffffffff
    404c:	ffffffff 	.word	0xffffffff
    4050:	ffffffff 	.word	0xffffffff
    4054:	ffffffff 	.word	0xffffffff
    4058:	ffffffff 	.word	0xffffffff
    405c:	ffffffff 	.word	0xffffffff
    4060:	ffffffff 	.word	0xffffffff
    4064:	ffffffff 	.word	0xffffffff
    4068:	ffffffff 	.word	0xffffffff
    406c:	ffffffff 	.word	0xffffffff
    4070:	ffffffff 	.word	0xffffffff
    4074:	ffffffff 	.word	0xffffffff
    4078:	ffffffff 	.word	0xffffffff
    407c:	ffffffff 	.word	0xffffffff
    4080:	ffffffff 	.word	0xffffffff
    4084:	ffffffff 	.word	0xffffffff
    4088:	ffffffff 	.word	0xffffffff
    408c:	ffffffff 	.word	0xffffffff
    4090:	ffffffff 	.word	0xffffffff
    4094:	ffffffff 	.word	0xffffffff
    4098:	ffffffff 	.word	0xffffffff
    409c:	ffffffff 	.word	0xffffffff
    40a0:	ffffffff 	.word	0xffffffff
    40a4:	ffffffff 	.word	0xffffffff
    40a8:	ffffffff 	.word	0xffffffff
    40ac:	ffffffff 	.word	0xffffffff
    40b0:	ffffffff 	.word	0xffffffff
    40b4:	ffffffff 	.word	0xffffffff
    40b8:	ffffffff 	.word	0xffffffff
    40bc:	ffffffff 	.word	0xffffffff
    40c0:	ffffffff 	.word	0xffffffff
    40c4:	ffffffff 	.word	0xffffffff
    40c8:	ffffffff 	.word	0xffffffff
    40cc:	ffffffff 	.word	0xffffffff
    40d0:	ffffffff 	.word	0xffffffff
    40d4:	ffffffff 	.word	0xffffffff
    40d8:	ffffffff 	.word	0xffffffff
    40dc:	ffffffff 	.word	0xffffffff
    40e0:	ffffffff 	.word	0xffffffff
    40e4:	ffffffff 	.word	0xffffffff
    40e8:	ffffffff 	.word	0xffffffff
    40ec:	ffffffff 	.word	0xffffffff
    40f0:	ffffffff 	.word	0xffffffff
    40f4:	ffffffff 	.word	0xffffffff
    40f8:	ffffffff 	.word	0xffffffff
    40fc:	ffffffff 	.word	0xffffffff
    4100:	ffffffff 	.word	0xffffffff
    4104:	ffffffff 	.word	0xffffffff
    4108:	ffffffff 	.word	0xffffffff
    410c:	ffffffff 	.word	0xffffffff
    4110:	ffffffff 	.word	0xffffffff
    4114:	ffffffff 	.word	0xffffffff
    4118:	ffffffff 	.word	0xffffffff
    411c:	ffffffff 	.word	0xffffffff
    4120:	ffffffff 	.word	0xffffffff
    4124:	ffffffff 	.word	0xffffffff
    4128:	ffffffff 	.word	0xffffffff
    412c:	ffffffff 	.word	0xffffffff
    4130:	ffffffff 	.word	0xffffffff
    4134:	ffffffff 	.word	0xffffffff
    4138:	ffffffff 	.word	0xffffffff
    413c:	ffffffff 	.word	0xffffffff
    4140:	ffffffff 	.word	0xffffffff
    4144:	ffffffff 	.word	0xffffffff
    4148:	ffffffff 	.word	0xffffffff
    414c:	ffffffff 	.word	0xffffffff
    4150:	ffffffff 	.word	0xffffffff
    4154:	ffffffff 	.word	0xffffffff
    4158:	ffffffff 	.word	0xffffffff
    415c:	ffffffff 	.word	0xffffffff
    4160:	ffffffff 	.word	0xffffffff
    4164:	ffffffff 	.word	0xffffffff
    4168:	ffffffff 	.word	0xffffffff
    416c:	ffffffff 	.word	0xffffffff
    4170:	ffffffff 	.word	0xffffffff
    4174:	ffffffff 	.word	0xffffffff
    4178:	ffffffff 	.word	0xffffffff
    417c:	ffffffff 	.word	0xffffffff
    4180:	ffffffff 	.word	0xffffffff
    4184:	ffffffff 	.word	0xffffffff
    4188:	ffffffff 	.word	0xffffffff
    418c:	ffffffff 	.word	0xffffffff
    4190:	ffffffff 	.word	0xffffffff
    4194:	ffffffff 	.word	0xffffffff
    4198:	ffffffff 	.word	0xffffffff
    419c:	ffffffff 	.word	0xffffffff
    41a0:	ffffffff 	.word	0xffffffff
    41a4:	ffffffff 	.word	0xffffffff
    41a8:	ffffffff 	.word	0xffffffff
    41ac:	ffffffff 	.word	0xffffffff
    41b0:	ffffffff 	.word	0xffffffff
    41b4:	ffffffff 	.word	0xffffffff
    41b8:	ffffffff 	.word	0xffffffff
    41bc:	ffffffff 	.word	0xffffffff
    41c0:	ffffffff 	.word	0xffffffff
    41c4:	ffffffff 	.word	0xffffffff
    41c8:	ffffffff 	.word	0xffffffff
    41cc:	ffffffff 	.word	0xffffffff
    41d0:	ffffffff 	.word	0xffffffff
    41d4:	ffffffff 	.word	0xffffffff
    41d8:	ffffffff 	.word	0xffffffff
    41dc:	ffffffff 	.word	0xffffffff
    41e0:	ffffffff 	.word	0xffffffff
    41e4:	ffffffff 	.word	0xffffffff
    41e8:	ffffffff 	.word	0xffffffff
    41ec:	ffffffff 	.word	0xffffffff
    41f0:	ffffffff 	.word	0xffffffff
    41f4:	ffffffff 	.word	0xffffffff
    41f8:	ffffffff 	.word	0xffffffff
    41fc:	ffffffff 	.word	0xffffffff
    4200:	ffffffff 	.word	0xffffffff
    4204:	ffffffff 	.word	0xffffffff
    4208:	ffffffff 	.word	0xffffffff
    420c:	ffffffff 	.word	0xffffffff
    4210:	ffffffff 	.word	0xffffffff
    4214:	ffffffff 	.word	0xffffffff
    4218:	ffffffff 	.word	0xffffffff
    421c:	ffffffff 	.word	0xffffffff
    4220:	ffffffff 	.word	0xffffffff
    4224:	ffffffff 	.word	0xffffffff
    4228:	ffffffff 	.word	0xffffffff
    422c:	ffffffff 	.word	0xffffffff
    4230:	ffffffff 	.word	0xffffffff
    4234:	ffffffff 	.word	0xffffffff
    4238:	ffffffff 	.word	0xffffffff
    423c:	ffffffff 	.word	0xffffffff
    4240:	ffffffff 	.word	0xffffffff
    4244:	ffffffff 	.word	0xffffffff
    4248:	ffffffff 	.word	0xffffffff
    424c:	ffffffff 	.word	0xffffffff
    4250:	ffffffff 	.word	0xffffffff
    4254:	ffffffff 	.word	0xffffffff
    4258:	ffffffff 	.word	0xffffffff
    425c:	ffffffff 	.word	0xffffffff
    4260:	ffffffff 	.word	0xffffffff
    4264:	ffffffff 	.word	0xffffffff
    4268:	ffffffff 	.word	0xffffffff
    426c:	ffffffff 	.word	0xffffffff
    4270:	ffffffff 	.word	0xffffffff
    4274:	ffffffff 	.word	0xffffffff
    4278:	ffffffff 	.word	0xffffffff
    427c:	ffffffff 	.word	0xffffffff
    4280:	ffffffff 	.word	0xffffffff
    4284:	ffffffff 	.word	0xffffffff
    4288:	ffffffff 	.word	0xffffffff
    428c:	ffffffff 	.word	0xffffffff
    4290:	ffffffff 	.word	0xffffffff
    4294:	ffffffff 	.word	0xffffffff
    4298:	ffffffff 	.word	0xffffffff
    429c:	ffffffff 	.word	0xffffffff
    42a0:	ffffffff 	.word	0xffffffff
    42a4:	ffffffff 	.word	0xffffffff
    42a8:	ffffffff 	.word	0xffffffff
    42ac:	ffffffff 	.word	0xffffffff
    42b0:	ffffffff 	.word	0xffffffff
    42b4:	ffffffff 	.word	0xffffffff
    42b8:	ffffffff 	.word	0xffffffff
    42bc:	ffffffff 	.word	0xffffffff
    42c0:	ffffffff 	.word	0xffffffff
    42c4:	ffffffff 	.word	0xffffffff
    42c8:	ffffffff 	.word	0xffffffff
    42cc:	ffffffff 	.word	0xffffffff
    42d0:	ffffffff 	.word	0xffffffff
    42d4:	ffffffff 	.word	0xffffffff
    42d8:	ffffffff 	.word	0xffffffff
    42dc:	ffffffff 	.word	0xffffffff
    42e0:	ffffffff 	.word	0xffffffff
    42e4:	ffffffff 	.word	0xffffffff
    42e8:	ffffffff 	.word	0xffffffff
    42ec:	ffffffff 	.word	0xffffffff
    42f0:	ffffffff 	.word	0xffffffff
    42f4:	ffffffff 	.word	0xffffffff
    42f8:	ffffffff 	.word	0xffffffff
    42fc:	ffffffff 	.word	0xffffffff
    4300:	ffffffff 	.word	0xffffffff
    4304:	ffffffff 	.word	0xffffffff
    4308:	ffffffff 	.word	0xffffffff
    430c:	ffffffff 	.word	0xffffffff
    4310:	ffffffff 	.word	0xffffffff
    4314:	ffffffff 	.word	0xffffffff
    4318:	ffffffff 	.word	0xffffffff
    431c:	ffffffff 	.word	0xffffffff
    4320:	ffffffff 	.word	0xffffffff
    4324:	ffffffff 	.word	0xffffffff
    4328:	ffffffff 	.word	0xffffffff
    432c:	ffffffff 	.word	0xffffffff
    4330:	ffffffff 	.word	0xffffffff
    4334:	ffffffff 	.word	0xffffffff
    4338:	ffffffff 	.word	0xffffffff
    433c:	ffffffff 	.word	0xffffffff
    4340:	ffffffff 	.word	0xffffffff
    4344:	ffffffff 	.word	0xffffffff
    4348:	ffffffff 	.word	0xffffffff
    434c:	ffffffff 	.word	0xffffffff
    4350:	ffffffff 	.word	0xffffffff
    4354:	ffffffff 	.word	0xffffffff
    4358:	ffffffff 	.word	0xffffffff
    435c:	ffffffff 	.word	0xffffffff
    4360:	ffffffff 	.word	0xffffffff
    4364:	ffffffff 	.word	0xffffffff
    4368:	ffffffff 	.word	0xffffffff
    436c:	ffffffff 	.word	0xffffffff
    4370:	ffffffff 	.word	0xffffffff
    4374:	ffffffff 	.word	0xffffffff
    4378:	ffffffff 	.word	0xffffffff
    437c:	ffffffff 	.word	0xffffffff
    4380:	ffffffff 	.word	0xffffffff
    4384:	ffffffff 	.word	0xffffffff
    4388:	ffffffff 	.word	0xffffffff
    438c:	ffffffff 	.word	0xffffffff
    4390:	ffffffff 	.word	0xffffffff
    4394:	ffffffff 	.word	0xffffffff
    4398:	ffffffff 	.word	0xffffffff
    439c:	ffffffff 	.word	0xffffffff
    43a0:	ffffffff 	.word	0xffffffff
    43a4:	ffffffff 	.word	0xffffffff
    43a8:	ffffffff 	.word	0xffffffff
    43ac:	ffffffff 	.word	0xffffffff
    43b0:	ffffffff 	.word	0xffffffff
    43b4:	ffffffff 	.word	0xffffffff
    43b8:	ffffffff 	.word	0xffffffff
    43bc:	ffffffff 	.word	0xffffffff
    43c0:	ffffffff 	.word	0xffffffff
    43c4:	ffffffff 	.word	0xffffffff
    43c8:	ffffffff 	.word	0xffffffff
    43cc:	ffffffff 	.word	0xffffffff
    43d0:	ffffffff 	.word	0xffffffff
    43d4:	ffffffff 	.word	0xffffffff
    43d8:	ffffffff 	.word	0xffffffff
    43dc:	ffffffff 	.word	0xffffffff
    43e0:	ffffffff 	.word	0xffffffff
    43e4:	ffffffff 	.word	0xffffffff
    43e8:	ffffffff 	.word	0xffffffff
    43ec:	ffffffff 	.word	0xffffffff
    43f0:	ffffffff 	.word	0xffffffff
    43f4:	ffffffff 	.word	0xffffffff
    43f8:	ffffffff 	.word	0xffffffff
    43fc:	ffffffff 	.word	0xffffffff

00004400 <__do_global_dtors_aux>:
    4400:	b510      	push	{r4, lr}
    4402:	4c06      	ldr	r4, [pc, #24]	; (441c <__do_global_dtors_aux+0x1c>)
    4404:	7823      	ldrb	r3, [r4, #0]
    4406:	2b00      	cmp	r3, #0
    4408:	d107      	bne.n	441a <__do_global_dtors_aux+0x1a>
    440a:	4b05      	ldr	r3, [pc, #20]	; (4420 <__do_global_dtors_aux+0x20>)
    440c:	2b00      	cmp	r3, #0
    440e:	d002      	beq.n	4416 <__do_global_dtors_aux+0x16>
    4410:	4804      	ldr	r0, [pc, #16]	; (4424 <__do_global_dtors_aux+0x24>)
    4412:	e000      	b.n	4416 <__do_global_dtors_aux+0x16>
    4414:	bf00      	nop
    4416:	2301      	movs	r3, #1
    4418:	7023      	strb	r3, [r4, #0]
    441a:	bd10      	pop	{r4, pc}
    441c:	20000090 	.word	0x20000090
    4420:	00000000 	.word	0x00000000
    4424:	000175e4 	.word	0x000175e4

00004428 <frame_dummy>:
    4428:	4b08      	ldr	r3, [pc, #32]	; (444c <frame_dummy+0x24>)
    442a:	b510      	push	{r4, lr}
    442c:	2b00      	cmp	r3, #0
    442e:	d003      	beq.n	4438 <frame_dummy+0x10>
    4430:	4907      	ldr	r1, [pc, #28]	; (4450 <frame_dummy+0x28>)
    4432:	4808      	ldr	r0, [pc, #32]	; (4454 <frame_dummy+0x2c>)
    4434:	e000      	b.n	4438 <frame_dummy+0x10>
    4436:	bf00      	nop
    4438:	4807      	ldr	r0, [pc, #28]	; (4458 <frame_dummy+0x30>)
    443a:	6803      	ldr	r3, [r0, #0]
    443c:	2b00      	cmp	r3, #0
    443e:	d100      	bne.n	4442 <frame_dummy+0x1a>
    4440:	bd10      	pop	{r4, pc}
    4442:	4b06      	ldr	r3, [pc, #24]	; (445c <frame_dummy+0x34>)
    4444:	2b00      	cmp	r3, #0
    4446:	d0fb      	beq.n	4440 <frame_dummy+0x18>
    4448:	4798      	blx	r3
    444a:	e7f9      	b.n	4440 <frame_dummy+0x18>
    444c:	00000000 	.word	0x00000000
    4450:	20000094 	.word	0x20000094
    4454:	000175e4 	.word	0x000175e4
    4458:	000175e4 	.word	0x000175e4
    445c:	00000000 	.word	0x00000000

00004460 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
    4460:	b5f0      	push	{r4, r5, r6, r7, lr}
    4462:	b083      	sub	sp, #12
    4464:	466b      	mov	r3, sp
    4466:	1ddf      	adds	r7, r3, #7
    4468:	71d8      	strb	r0, [r3, #7]
	spi_select_slave(&ssd1306_master, &ssd1306_slave, true);
    446a:	4e0b      	ldr	r6, [pc, #44]	; (4498 <ssd1306_write_command+0x38>)
    446c:	4c0b      	ldr	r4, [pc, #44]	; (449c <ssd1306_write_command+0x3c>)
    446e:	2201      	movs	r2, #1
    4470:	0031      	movs	r1, r6
    4472:	0020      	movs	r0, r4
    4474:	4d0a      	ldr	r5, [pc, #40]	; (44a0 <ssd1306_write_command+0x40>)
    4476:	47a8      	blx	r5

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4478:	2280      	movs	r2, #128	; 0x80
    447a:	0052      	lsls	r2, r2, #1
    447c:	4b09      	ldr	r3, [pc, #36]	; (44a4 <ssd1306_write_command+0x44>)
    447e:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(SSD1306_DC_PIN, false);
	spi_write_buffer_wait(&ssd1306_master, &command, 1);
    4480:	3aff      	subs	r2, #255	; 0xff
    4482:	0039      	movs	r1, r7
    4484:	0020      	movs	r0, r4
    4486:	4b08      	ldr	r3, [pc, #32]	; (44a8 <ssd1306_write_command+0x48>)
    4488:	4798      	blx	r3
	spi_select_slave(&ssd1306_master, &ssd1306_slave, false);
    448a:	2200      	movs	r2, #0
    448c:	0031      	movs	r1, r6
    448e:	0020      	movs	r0, r4
    4490:	47a8      	blx	r5
}
    4492:	b003      	add	sp, #12
    4494:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4496:	46c0      	nop			; (mov r8, r8)
    4498:	200020a8 	.word	0x200020a8
    449c:	2000209c 	.word	0x2000209c
    44a0:	00005a29 	.word	0x00005a29
    44a4:	40002800 	.word	0x40002800
    44a8:	00005b1d 	.word	0x00005b1d

000044ac <ssd1306_init>:
{
    44ac:	b530      	push	{r4, r5, lr}
    44ae:	b091      	sub	sp, #68	; 0x44
	delay_init();
    44b0:	4b5b      	ldr	r3, [pc, #364]	; (4620 <ssd1306_init+0x174>)
    44b2:	4798      	blx	r3
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    44b4:	4c5b      	ldr	r4, [pc, #364]	; (4624 <ssd1306_init+0x178>)
    44b6:	2317      	movs	r3, #23
    44b8:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    44ba:	2300      	movs	r3, #0
    44bc:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    44be:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    44c0:	a902      	add	r1, sp, #8
    44c2:	2201      	movs	r2, #1
    44c4:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    44c6:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    44c8:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    44ca:	2017      	movs	r0, #23
    44cc:	4b56      	ldr	r3, [pc, #344]	; (4628 <ssd1306_init+0x17c>)
    44ce:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    44d0:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    44d2:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    44d4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    44d6:	2900      	cmp	r1, #0
    44d8:	d104      	bne.n	44e4 <ssd1306_init+0x38>
		return &(ports[port_index]->Group[group_index]);
    44da:	0953      	lsrs	r3, r2, #5
    44dc:	01db      	lsls	r3, r3, #7
    44de:	4953      	ldr	r1, [pc, #332]	; (462c <ssd1306_init+0x180>)
    44e0:	468c      	mov	ip, r1
    44e2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    44e4:	211f      	movs	r1, #31
    44e6:	4011      	ands	r1, r2
    44e8:	2201      	movs	r2, #1
    44ea:	0010      	movs	r0, r2
    44ec:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    44ee:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    44f0:	ac02      	add	r4, sp, #8
    44f2:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    44f4:	2300      	movs	r3, #0
    44f6:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    44f8:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    44fa:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    44fc:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    44fe:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    4500:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    4502:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    4504:	3223      	adds	r2, #35	; 0x23
    4506:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    4508:	3a18      	subs	r2, #24
    450a:	2100      	movs	r1, #0
    450c:	a808      	add	r0, sp, #32
    450e:	4b48      	ldr	r3, [pc, #288]	; (4630 <ssd1306_init+0x184>)
    4510:	4798      	blx	r3
	config.mux_setting = SSD1306_SPI_PINMUX_SETTING;
    4512:	2380      	movs	r3, #128	; 0x80
    4514:	025b      	lsls	r3, r3, #9
    4516:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SSD1306_SPI_PINMUX_PAD0;
    4518:	4b46      	ldr	r3, [pc, #280]	; (4634 <ssd1306_init+0x188>)
    451a:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SSD1306_SPI_PINMUX_PAD1;
    451c:	4b46      	ldr	r3, [pc, #280]	; (4638 <ssd1306_init+0x18c>)
    451e:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SSD1306_SPI_PINMUX_PAD2;
    4520:	4b46      	ldr	r3, [pc, #280]	; (463c <ssd1306_init+0x190>)
    4522:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SSD1306_SPI_PINMUX_PAD3;
    4524:	4b46      	ldr	r3, [pc, #280]	; (4640 <ssd1306_init+0x194>)
    4526:	6363      	str	r3, [r4, #52]	; 0x34
	config.mode_specific.master.baudrate = SSD1306_CLOCK_SPEED;
    4528:	4b46      	ldr	r3, [pc, #280]	; (4644 <ssd1306_init+0x198>)
    452a:	61a3      	str	r3, [r4, #24]
	spi_init(&ssd1306_master, SSD1306_SPI, &config);
    452c:	4d46      	ldr	r5, [pc, #280]	; (4648 <ssd1306_init+0x19c>)
    452e:	0022      	movs	r2, r4
    4530:	4946      	ldr	r1, [pc, #280]	; (464c <ssd1306_init+0x1a0>)
    4532:	0028      	movs	r0, r5
    4534:	4b46      	ldr	r3, [pc, #280]	; (4650 <ssd1306_init+0x1a4>)
    4536:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4538:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    453a:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    453c:	2b00      	cmp	r3, #0
    453e:	d1fc      	bne.n	453a <ssd1306_init+0x8e>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    4540:	6813      	ldr	r3, [r2, #0]
    4542:	2102      	movs	r1, #2
    4544:	430b      	orrs	r3, r1
    4546:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    4548:	ac01      	add	r4, sp, #4
    454a:	2301      	movs	r3, #1
    454c:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    454e:	2200      	movs	r2, #0
    4550:	70a2      	strb	r2, [r4, #2]
	pin.direction = PORT_PIN_DIR_OUTPUT;
    4552:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(SSD1306_DC_PIN, &pin);
    4554:	0021      	movs	r1, r4
    4556:	2008      	movs	r0, #8
    4558:	4d33      	ldr	r5, [pc, #204]	; (4628 <ssd1306_init+0x17c>)
    455a:	47a8      	blx	r5
	port_pin_set_config(SSD1306_RES_PIN, &pin);
    455c:	0021      	movs	r1, r4
    455e:	200f      	movs	r0, #15
    4560:	47a8      	blx	r5
 *
 * This functions will reset the OLED controller by setting the reset pin low.
 */
static inline void ssd1306_hard_reset(void)
{
	uint32_t delay_10us = 10 * (system_gclk_gen_get_hz(0)/1000000);
    4562:	2000      	movs	r0, #0
    4564:	4b3b      	ldr	r3, [pc, #236]	; (4654 <ssd1306_init+0x1a8>)
    4566:	4798      	blx	r3
    4568:	4936      	ldr	r1, [pc, #216]	; (4644 <ssd1306_init+0x198>)
    456a:	4b3b      	ldr	r3, [pc, #236]	; (4658 <ssd1306_init+0x1ac>)
    456c:	4798      	blx	r3
    456e:	0083      	lsls	r3, r0, #2
    4570:	1818      	adds	r0, r3, r0
    4572:	0040      	lsls	r0, r0, #1
		port_base->OUTCLR.reg = pin_mask;
    4574:	2280      	movs	r2, #128	; 0x80
    4576:	0212      	lsls	r2, r2, #8
    4578:	4b2c      	ldr	r3, [pc, #176]	; (462c <ssd1306_init+0x180>)
    457a:	615a      	str	r2, [r3, #20]
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
    457c:	2800      	cmp	r0, #0
    457e:	d04a      	beq.n	4616 <ssd1306_init+0x16a>
		SysTick->LOAD = n;
    4580:	4b36      	ldr	r3, [pc, #216]	; (465c <ssd1306_init+0x1b0>)
    4582:	6058      	str	r0, [r3, #4]
		SysTick->VAL = 0;
    4584:	2200      	movs	r2, #0
    4586:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    4588:	0019      	movs	r1, r3
    458a:	2280      	movs	r2, #128	; 0x80
    458c:	0252      	lsls	r2, r2, #9
    458e:	680b      	ldr	r3, [r1, #0]
    4590:	4213      	tst	r3, r2
    4592:	d0fc      	beq.n	458e <ssd1306_init+0xe2>
		port_base->OUTSET.reg = pin_mask;
    4594:	2280      	movs	r2, #128	; 0x80
    4596:	0212      	lsls	r2, r2, #8
    4598:	4b24      	ldr	r3, [pc, #144]	; (462c <ssd1306_init+0x180>)
    459a:	619a      	str	r2, [r3, #24]
		SysTick->LOAD = n;
    459c:	4b2f      	ldr	r3, [pc, #188]	; (465c <ssd1306_init+0x1b0>)
    459e:	6058      	str	r0, [r3, #4]
		SysTick->VAL = 0;
    45a0:	2200      	movs	r2, #0
    45a2:	609a      	str	r2, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    45a4:	0019      	movs	r1, r3
    45a6:	2280      	movs	r2, #128	; 0x80
    45a8:	0252      	lsls	r2, r2, #9
    45aa:	680b      	ldr	r3, [r1, #0]
    45ac:	4213      	tst	r3, r2
    45ae:	d0fc      	beq.n	45aa <ssd1306_init+0xfe>
    45b0:	2280      	movs	r2, #128	; 0x80
    45b2:	0212      	lsls	r2, r2, #8
    45b4:	4b1d      	ldr	r3, [pc, #116]	; (462c <ssd1306_init+0x180>)
    45b6:	619a      	str	r2, [r3, #24]
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
    45b8:	20a8      	movs	r0, #168	; 0xa8
    45ba:	4c29      	ldr	r4, [pc, #164]	; (4660 <ssd1306_init+0x1b4>)
    45bc:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
    45be:	201f      	movs	r0, #31
    45c0:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
    45c2:	20d3      	movs	r0, #211	; 0xd3
    45c4:	47a0      	blx	r4
	ssd1306_write_command(0x00);
    45c6:	2000      	movs	r0, #0
    45c8:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
    45ca:	2040      	movs	r0, #64	; 0x40
    45cc:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
    45ce:	20a1      	movs	r0, #161	; 0xa1
    45d0:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
    45d2:	20c8      	movs	r0, #200	; 0xc8
    45d4:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
    45d6:	20da      	movs	r0, #218	; 0xda
    45d8:	47a0      	blx	r4
	ssd1306_write_command(0x02);
    45da:	2002      	movs	r0, #2
    45dc:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
    45de:	2081      	movs	r0, #129	; 0x81
    45e0:	47a0      	blx	r4
	ssd1306_write_command(contrast);
    45e2:	208f      	movs	r0, #143	; 0x8f
    45e4:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
    45e6:	20a4      	movs	r0, #164	; 0xa4
    45e8:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
    45ea:	20a6      	movs	r0, #166	; 0xa6
    45ec:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
    45ee:	20d5      	movs	r0, #213	; 0xd5
    45f0:	47a0      	blx	r4
	ssd1306_write_command(0x80);
    45f2:	2080      	movs	r0, #128	; 0x80
    45f4:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
    45f6:	208d      	movs	r0, #141	; 0x8d
    45f8:	47a0      	blx	r4
	ssd1306_write_command(0x14);
    45fa:	2014      	movs	r0, #20
    45fc:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
    45fe:	20db      	movs	r0, #219	; 0xdb
    4600:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
    4602:	2040      	movs	r0, #64	; 0x40
    4604:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
    4606:	20d9      	movs	r0, #217	; 0xd9
    4608:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
    460a:	20f1      	movs	r0, #241	; 0xf1
    460c:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
    460e:	20af      	movs	r0, #175	; 0xaf
    4610:	47a0      	blx	r4
}
    4612:	b011      	add	sp, #68	; 0x44
    4614:	bd30      	pop	{r4, r5, pc}
    4616:	2280      	movs	r2, #128	; 0x80
    4618:	0212      	lsls	r2, r2, #8
    461a:	4b04      	ldr	r3, [pc, #16]	; (462c <ssd1306_init+0x180>)
    461c:	619a      	str	r2, [r3, #24]
    461e:	e7c7      	b.n	45b0 <ssd1306_init+0x104>
    4620:	000046b1 	.word	0x000046b1
    4624:	200020a8 	.word	0x200020a8
    4628:	00005155 	.word	0x00005155
    462c:	40002800 	.word	0x40002800
    4630:	00014df1 	.word	0x00014df1
    4634:	00220003 	.word	0x00220003
    4638:	00170003 	.word	0x00170003
    463c:	00360003 	.word	0x00360003
    4640:	00370003 	.word	0x00370003
    4644:	000f4240 	.word	0x000f4240
    4648:	2000209c 	.word	0x2000209c
    464c:	43000400 	.word	0x43000400
    4650:	000056dd 	.word	0x000056dd
    4654:	0000696d 	.word	0x0000696d
    4658:	00011b7d 	.word	0x00011b7d
    465c:	e000e010 	.word	0xe000e010
    4660:	00004461 	.word	0x00004461

00004664 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
    4664:	b5f0      	push	{r4, r5, r6, r7, lr}
    4666:	b083      	sub	sp, #12
    4668:	466b      	mov	r3, sp
    466a:	1ddf      	adds	r7, r3, #7
    466c:	71d8      	strb	r0, [r3, #7]
	spi_select_slave(&ssd1306_master, &ssd1306_slave, true);
    466e:	4e0b      	ldr	r6, [pc, #44]	; (469c <ssd1306_write_data+0x38>)
    4670:	4c0b      	ldr	r4, [pc, #44]	; (46a0 <ssd1306_write_data+0x3c>)
    4672:	2201      	movs	r2, #1
    4674:	0031      	movs	r1, r6
    4676:	0020      	movs	r0, r4
    4678:	4d0a      	ldr	r5, [pc, #40]	; (46a4 <ssd1306_write_data+0x40>)
    467a:	47a8      	blx	r5
    467c:	2280      	movs	r2, #128	; 0x80
    467e:	0052      	lsls	r2, r2, #1
    4680:	4b09      	ldr	r3, [pc, #36]	; (46a8 <ssd1306_write_data+0x44>)
    4682:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(SSD1306_DC_PIN, true);
	spi_write_buffer_wait(&ssd1306_master, &data, 1);
    4684:	3aff      	subs	r2, #255	; 0xff
    4686:	0039      	movs	r1, r7
    4688:	0020      	movs	r0, r4
    468a:	4b08      	ldr	r3, [pc, #32]	; (46ac <ssd1306_write_data+0x48>)
    468c:	4798      	blx	r3
	spi_select_slave(&ssd1306_master, &ssd1306_slave, false);
    468e:	2200      	movs	r2, #0
    4690:	0031      	movs	r1, r6
    4692:	0020      	movs	r0, r4
    4694:	47a8      	blx	r5
}
    4696:	b003      	add	sp, #12
    4698:	bdf0      	pop	{r4, r5, r6, r7, pc}
    469a:	46c0      	nop			; (mov r8, r8)
    469c:	200020a8 	.word	0x200020a8
    46a0:	2000209c 	.word	0x2000209c
    46a4:	00005a29 	.word	0x00005a29
    46a8:	40002800 	.word	0x40002800
    46ac:	00005b1d 	.word	0x00005b1d

000046b0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    46b0:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    46b2:	2000      	movs	r0, #0
    46b4:	4b08      	ldr	r3, [pc, #32]	; (46d8 <delay_init+0x28>)
    46b6:	4798      	blx	r3
    46b8:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    46ba:	4c08      	ldr	r4, [pc, #32]	; (46dc <delay_init+0x2c>)
    46bc:	21fa      	movs	r1, #250	; 0xfa
    46be:	0089      	lsls	r1, r1, #2
    46c0:	47a0      	blx	r4
    46c2:	4b07      	ldr	r3, [pc, #28]	; (46e0 <delay_init+0x30>)
    46c4:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    46c6:	4907      	ldr	r1, [pc, #28]	; (46e4 <delay_init+0x34>)
    46c8:	0028      	movs	r0, r5
    46ca:	47a0      	blx	r4
    46cc:	4b06      	ldr	r3, [pc, #24]	; (46e8 <delay_init+0x38>)
    46ce:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    46d0:	2205      	movs	r2, #5
    46d2:	4b06      	ldr	r3, [pc, #24]	; (46ec <delay_init+0x3c>)
    46d4:	601a      	str	r2, [r3, #0]
}
    46d6:	bd70      	pop	{r4, r5, r6, pc}
    46d8:	0000696d 	.word	0x0000696d
    46dc:	00011b7d 	.word	0x00011b7d
    46e0:	20000000 	.word	0x20000000
    46e4:	000f4240 	.word	0x000f4240
    46e8:	20000004 	.word	0x20000004
    46ec:	e000e010 	.word	0xe000e010

000046f0 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    46f0:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    46f2:	4b08      	ldr	r3, [pc, #32]	; (4714 <delay_cycles_us+0x24>)
    46f4:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    46f6:	4a08      	ldr	r2, [pc, #32]	; (4718 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    46f8:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    46fa:	2180      	movs	r1, #128	; 0x80
    46fc:	0249      	lsls	r1, r1, #9
	while (n--) {
    46fe:	3801      	subs	r0, #1
    4700:	d307      	bcc.n	4712 <delay_cycles_us+0x22>
	if (n > 0) {
    4702:	2c00      	cmp	r4, #0
    4704:	d0fb      	beq.n	46fe <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    4706:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    4708:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    470a:	6813      	ldr	r3, [r2, #0]
    470c:	420b      	tst	r3, r1
    470e:	d0fc      	beq.n	470a <delay_cycles_us+0x1a>
    4710:	e7f5      	b.n	46fe <delay_cycles_us+0xe>
	}
}
    4712:	bd30      	pop	{r4, r5, pc}
    4714:	20000004 	.word	0x20000004
    4718:	e000e010 	.word	0xe000e010

0000471c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    471c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    471e:	4b08      	ldr	r3, [pc, #32]	; (4740 <delay_cycles_ms+0x24>)
    4720:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    4722:	4a08      	ldr	r2, [pc, #32]	; (4744 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    4724:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    4726:	2180      	movs	r1, #128	; 0x80
    4728:	0249      	lsls	r1, r1, #9
	while (n--) {
    472a:	3801      	subs	r0, #1
    472c:	d307      	bcc.n	473e <delay_cycles_ms+0x22>
	if (n > 0) {
    472e:	2c00      	cmp	r4, #0
    4730:	d0fb      	beq.n	472a <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    4732:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    4734:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    4736:	6813      	ldr	r3, [r2, #0]
    4738:	420b      	tst	r3, r1
    473a:	d0fc      	beq.n	4736 <delay_cycles_ms+0x1a>
    473c:	e7f5      	b.n	472a <delay_cycles_ms+0xe>
	}
}
    473e:	bd30      	pop	{r4, r5, pc}
    4740:	20000000 	.word	0x20000000
    4744:	e000e010 	.word	0xe000e010

00004748 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
    4748:	4b01      	ldr	r3, [pc, #4]	; (4750 <gfx_mono_set_framebuffer+0x8>)
    474a:	6018      	str	r0, [r3, #0]
}
    474c:	4770      	bx	lr
    474e:	46c0      	nop			; (mov r8, r8)
    4750:	200000ac 	.word	0x200000ac

00004754 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
    4754:	4b02      	ldr	r3, [pc, #8]	; (4760 <gfx_mono_framebuffer_put_byte+0xc>)
    4756:	681b      	ldr	r3, [r3, #0]
    4758:	01c0      	lsls	r0, r0, #7
    475a:	1818      	adds	r0, r3, r0
    475c:	5442      	strb	r2, [r0, r1]
}
    475e:	4770      	bx	lr
    4760:	200000ac 	.word	0x200000ac

00004764 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
    4764:	4b02      	ldr	r3, [pc, #8]	; (4770 <gfx_mono_framebuffer_get_byte+0xc>)
    4766:	681b      	ldr	r3, [r3, #0]
    4768:	01c0      	lsls	r0, r0, #7
    476a:	1818      	adds	r0, r3, r0
    476c:	5c40      	ldrb	r0, [r0, r1]
}
    476e:	4770      	bx	lr
    4770:	200000ac 	.word	0x200000ac

00004774 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
    4774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4776:	46ce      	mov	lr, r9
    4778:	4647      	mov	r7, r8
    477a:	b580      	push	{r7, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
    477c:	1884      	adds	r4, r0, r2
    477e:	2c80      	cmp	r4, #128	; 0x80
    4780:	dd03      	ble.n	478a <gfx_mono_generic_draw_horizontal_line+0x16>
		length = GFX_MONO_LCD_WIDTH - x;
    4782:	2280      	movs	r2, #128	; 0x80
    4784:	4252      	negs	r2, r2
    4786:	1a12      	subs	r2, r2, r0
    4788:	b2d2      	uxtb	r2, r2
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
    478a:	2a00      	cmp	r2, #0
    478c:	d037      	beq.n	47fe <gfx_mono_generic_draw_horizontal_line+0x8a>
	page = y / 8;
    478e:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
    4790:	00ec      	lsls	r4, r5, #3
    4792:	1b09      	subs	r1, r1, r4
    4794:	2701      	movs	r7, #1
    4796:	408f      	lsls	r7, r1
    4798:	0039      	movs	r1, r7
    479a:	b2ff      	uxtb	r7, r7
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
    479c:	2b01      	cmp	r3, #1
    479e:	d019      	beq.n	47d4 <gfx_mono_generic_draw_horizontal_line+0x60>
    47a0:	2b00      	cmp	r3, #0
    47a2:	d030      	beq.n	4806 <gfx_mono_generic_draw_horizontal_line+0x92>
    47a4:	2b02      	cmp	r3, #2
    47a6:	d12a      	bne.n	47fe <gfx_mono_generic_draw_horizontal_line+0x8a>
    47a8:	3801      	subs	r0, #1
    47aa:	b2c6      	uxtb	r6, r0
    47ac:	1992      	adds	r2, r2, r6
    47ae:	b2d4      	uxtb	r4, r2
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
    47b0:	4b20      	ldr	r3, [pc, #128]	; (4834 <gfx_mono_generic_draw_horizontal_line+0xc0>)
    47b2:	4699      	mov	r9, r3
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
    47b4:	4b20      	ldr	r3, [pc, #128]	; (4838 <gfx_mono_generic_draw_horizontal_line+0xc4>)
    47b6:	4698      	mov	r8, r3
			temp = gfx_mono_get_byte(page, x + length);
    47b8:	0021      	movs	r1, r4
    47ba:	0028      	movs	r0, r5
    47bc:	47c8      	blx	r9
			temp ^= pixelmask;
    47be:	4078      	eors	r0, r7
			gfx_mono_put_byte(page, x + length, temp);
    47c0:	b2c2      	uxtb	r2, r0
    47c2:	2300      	movs	r3, #0
    47c4:	0021      	movs	r1, r4
    47c6:	0028      	movs	r0, r5
    47c8:	47c0      	blx	r8
    47ca:	3c01      	subs	r4, #1
    47cc:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
    47ce:	42b4      	cmp	r4, r6
    47d0:	d1f2      	bne.n	47b8 <gfx_mono_generic_draw_horizontal_line+0x44>
    47d2:	e014      	b.n	47fe <gfx_mono_generic_draw_horizontal_line+0x8a>
    47d4:	3801      	subs	r0, #1
    47d6:	b2c6      	uxtb	r6, r0
    47d8:	1992      	adds	r2, r2, r6
    47da:	b2d4      	uxtb	r4, r2
			temp = gfx_mono_get_byte(page, x + length);
    47dc:	4b15      	ldr	r3, [pc, #84]	; (4834 <gfx_mono_generic_draw_horizontal_line+0xc0>)
    47de:	4699      	mov	r9, r3
			gfx_mono_put_byte(page, x + length, temp);
    47e0:	4b15      	ldr	r3, [pc, #84]	; (4838 <gfx_mono_generic_draw_horizontal_line+0xc4>)
    47e2:	4698      	mov	r8, r3
			temp = gfx_mono_get_byte(page, x + length);
    47e4:	0021      	movs	r1, r4
    47e6:	0028      	movs	r0, r5
    47e8:	47c8      	blx	r9
			temp |= pixelmask;
    47ea:	4338      	orrs	r0, r7
			gfx_mono_put_byte(page, x + length, temp);
    47ec:	b2c2      	uxtb	r2, r0
    47ee:	2300      	movs	r3, #0
    47f0:	0021      	movs	r1, r4
    47f2:	0028      	movs	r0, r5
    47f4:	47c0      	blx	r8
    47f6:	3c01      	subs	r4, #1
    47f8:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
    47fa:	42b4      	cmp	r4, r6
    47fc:	d1f2      	bne.n	47e4 <gfx_mono_generic_draw_horizontal_line+0x70>
		break;

	default:
		break;
	}
}
    47fe:	bc0c      	pop	{r2, r3}
    4800:	4690      	mov	r8, r2
    4802:	4699      	mov	r9, r3
    4804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4806:	3801      	subs	r0, #1
    4808:	b2c6      	uxtb	r6, r0
    480a:	1992      	adds	r2, r2, r6
    480c:	b2d4      	uxtb	r4, r2
			temp = gfx_mono_get_byte(page, x + length);
    480e:	4b09      	ldr	r3, [pc, #36]	; (4834 <gfx_mono_generic_draw_horizontal_line+0xc0>)
    4810:	4699      	mov	r9, r3
			temp &= ~pixelmask;
    4812:	43cf      	mvns	r7, r1
			gfx_mono_put_byte(page, x + length, temp);
    4814:	4b08      	ldr	r3, [pc, #32]	; (4838 <gfx_mono_generic_draw_horizontal_line+0xc4>)
    4816:	4698      	mov	r8, r3
			temp = gfx_mono_get_byte(page, x + length);
    4818:	0021      	movs	r1, r4
    481a:	0028      	movs	r0, r5
    481c:	47c8      	blx	r9
			temp &= ~pixelmask;
    481e:	4038      	ands	r0, r7
			gfx_mono_put_byte(page, x + length, temp);
    4820:	b2c2      	uxtb	r2, r0
    4822:	2300      	movs	r3, #0
    4824:	0021      	movs	r1, r4
    4826:	0028      	movs	r0, r5
    4828:	47c0      	blx	r8
    482a:	3c01      	subs	r4, #1
    482c:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
    482e:	42b4      	cmp	r4, r6
    4830:	d1f2      	bne.n	4818 <gfx_mono_generic_draw_horizontal_line+0xa4>
    4832:	e7e4      	b.n	47fe <gfx_mono_generic_draw_horizontal_line+0x8a>
    4834:	00004a99 	.word	0x00004a99
    4838:	00004991 	.word	0x00004991

0000483c <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
    483c:	b5f0      	push	{r4, r5, r6, r7, lr}
    483e:	b083      	sub	sp, #12
    4840:	9000      	str	r0, [sp, #0]
    4842:	9201      	str	r2, [sp, #4]
    4844:	aa08      	add	r2, sp, #32
    4846:	7817      	ldrb	r7, [r2, #0]
	if (height == 0) {
    4848:	2b00      	cmp	r3, #0
    484a:	d00d      	beq.n	4868 <gfx_mono_generic_draw_filled_rect+0x2c>
    484c:	3901      	subs	r1, #1
    484e:	b2ce      	uxtb	r6, r1
    4850:	199b      	adds	r3, r3, r6
    4852:	b2dc      	uxtb	r4, r3
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
    4854:	4d05      	ldr	r5, [pc, #20]	; (486c <gfx_mono_generic_draw_filled_rect+0x30>)
    4856:	003b      	movs	r3, r7
    4858:	9a01      	ldr	r2, [sp, #4]
    485a:	0021      	movs	r1, r4
    485c:	9800      	ldr	r0, [sp, #0]
    485e:	47a8      	blx	r5
    4860:	3c01      	subs	r4, #1
    4862:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
    4864:	42b4      	cmp	r4, r6
    4866:	d1f6      	bne.n	4856 <gfx_mono_generic_draw_filled_rect+0x1a>
	}
}
    4868:	b003      	add	sp, #12
    486a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    486c:	00004775 	.word	0x00004775

00004870 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    4870:	b5f0      	push	{r4, r5, r6, r7, lr}
    4872:	46de      	mov	lr, fp
    4874:	4657      	mov	r7, sl
    4876:	464e      	mov	r6, r9
    4878:	4645      	mov	r5, r8
    487a:	b5e0      	push	{r5, r6, r7, lr}
    487c:	b085      	sub	sp, #20
    487e:	0004      	movs	r4, r0
    4880:	4688      	mov	r8, r1
    4882:	0015      	movs	r5, r2
    4884:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    4886:	7a5b      	ldrb	r3, [r3, #9]
    4888:	465a      	mov	r2, fp
    488a:	7a12      	ldrb	r2, [r2, #8]
    488c:	2100      	movs	r1, #0
    488e:	9100      	str	r1, [sp, #0]
    4890:	0029      	movs	r1, r5
    4892:	4640      	mov	r0, r8
    4894:	4e28      	ldr	r6, [pc, #160]	; (4938 <gfx_mono_draw_char+0xc8>)
    4896:	47b0      	blx	r6
			GFX_PIXEL_CLR);

	switch (font->type) {
    4898:	465b      	mov	r3, fp
    489a:	781b      	ldrb	r3, [r3, #0]
    489c:	2b00      	cmp	r3, #0
    489e:	d006      	beq.n	48ae <gfx_mono_draw_char+0x3e>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    48a0:	b005      	add	sp, #20
    48a2:	bc3c      	pop	{r2, r3, r4, r5}
    48a4:	4690      	mov	r8, r2
    48a6:	4699      	mov	r9, r3
    48a8:	46a2      	mov	sl, r4
    48aa:	46ab      	mov	fp, r5
    48ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    48ae:	465b      	mov	r3, fp
    48b0:	7a1a      	ldrb	r2, [r3, #8]
    48b2:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    48b4:	0752      	lsls	r2, r2, #29
    48b6:	d000      	beq.n	48ba <gfx_mono_draw_char+0x4a>
		char_row_size++;
    48b8:	3301      	adds	r3, #1
	glyph_data_offset = char_row_size * font->height *
    48ba:	465a      	mov	r2, fp
    48bc:	7a52      	ldrb	r2, [r2, #9]
    48be:	4692      	mov	sl, r2
			((uint8_t)ch - font->first_char);
    48c0:	465a      	mov	r2, fp
    48c2:	7a97      	ldrb	r7, [r2, #10]
    48c4:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
    48c6:	4652      	mov	r2, sl
    48c8:	4357      	muls	r7, r2
    48ca:	435f      	muls	r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
    48cc:	b2bf      	uxth	r7, r7
    48ce:	465b      	mov	r3, fp
    48d0:	685b      	ldr	r3, [r3, #4]
    48d2:	469c      	mov	ip, r3
    48d4:	4467      	add	r7, ip
	gfx_coord_t inc_y = y;
    48d6:	9502      	str	r5, [sp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
    48d8:	4643      	mov	r3, r8
    48da:	9303      	str	r3, [sp, #12]
    48dc:	e020      	b.n	4920 <gfx_mono_draw_char+0xb0>
			if ((glyph_byte & 0x80)) {
    48de:	b26b      	sxtb	r3, r5
    48e0:	2b00      	cmp	r3, #0
    48e2:	db0d      	blt.n	4900 <gfx_mono_draw_char+0x90>
			inc_x += 1;
    48e4:	3401      	adds	r4, #1
    48e6:	b2e4      	uxtb	r4, r4
			glyph_byte <<= 1;
    48e8:	006d      	lsls	r5, r5, #1
    48ea:	b2ed      	uxtb	r5, r5
		for (i = 0; i < pixelsToDraw; i++) {
    48ec:	42a6      	cmp	r6, r4
    48ee:	d00d      	beq.n	490c <gfx_mono_draw_char+0x9c>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    48f0:	4643      	mov	r3, r8
    48f2:	1ae3      	subs	r3, r4, r3
    48f4:	464a      	mov	r2, r9
    48f6:	421a      	tst	r2, r3
    48f8:	d1f1      	bne.n	48de <gfx_mono_draw_char+0x6e>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    48fa:	783d      	ldrb	r5, [r7, #0]
				glyph_data++;
    48fc:	3701      	adds	r7, #1
    48fe:	e7ee      	b.n	48de <gfx_mono_draw_char+0x6e>
				gfx_mono_draw_pixel(inc_x, inc_y,
    4900:	2201      	movs	r2, #1
    4902:	9902      	ldr	r1, [sp, #8]
    4904:	0020      	movs	r0, r4
    4906:	4b0d      	ldr	r3, [pc, #52]	; (493c <gfx_mono_draw_char+0xcc>)
    4908:	4798      	blx	r3
    490a:	e7eb      	b.n	48e4 <gfx_mono_draw_char+0x74>
		inc_y += 1;
    490c:	9b02      	ldr	r3, [sp, #8]
    490e:	3301      	adds	r3, #1
    4910:	b2db      	uxtb	r3, r3
    4912:	9302      	str	r3, [sp, #8]
		rows_left--;
    4914:	4653      	mov	r3, sl
    4916:	3b01      	subs	r3, #1
    4918:	b2db      	uxtb	r3, r3
    491a:	469a      	mov	sl, r3
	} while (rows_left > 0);
    491c:	2b00      	cmp	r3, #0
    491e:	d0bf      	beq.n	48a0 <gfx_mono_draw_char+0x30>
		uint8_t pixelsToDraw = font->width;
    4920:	465b      	mov	r3, fp
    4922:	7a1e      	ldrb	r6, [r3, #8]
		for (i = 0; i < pixelsToDraw; i++) {
    4924:	2e00      	cmp	r6, #0
    4926:	d0f1      	beq.n	490c <gfx_mono_draw_char+0x9c>
    4928:	4446      	add	r6, r8
    492a:	b2f6      	uxtb	r6, r6
    492c:	9c03      	ldr	r4, [sp, #12]
    492e:	2500      	movs	r5, #0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    4930:	2307      	movs	r3, #7
    4932:	4699      	mov	r9, r3
    4934:	e7dc      	b.n	48f0 <gfx_mono_draw_char+0x80>
    4936:	46c0      	nop			; (mov r8, r8)
    4938:	0000483d 	.word	0x0000483d
    493c:	00004a31 	.word	0x00004a31

00004940 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    4940:	b5f0      	push	{r4, r5, r6, r7, lr}
    4942:	46c6      	mov	lr, r8
    4944:	b500      	push	{lr}
    4946:	b082      	sub	sp, #8
    4948:	0004      	movs	r4, r0
    494a:	4690      	mov	r8, r2
    494c:	001f      	movs	r7, r3
    494e:	000d      	movs	r5, r1

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    4950:	9101      	str	r1, [sp, #4]
    4952:	e009      	b.n	4968 <gfx_mono_draw_string+0x28>
			y += font->height + 1;
    4954:	7a7a      	ldrb	r2, [r7, #9]
    4956:	3201      	adds	r2, #1
    4958:	4442      	add	r2, r8
    495a:	b2d3      	uxtb	r3, r2
    495c:	4698      	mov	r8, r3
			x = start_of_string_position_x;
    495e:	9d01      	ldr	r5, [sp, #4]
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
			x += font->width;
		}
	} while (*(++str));
    4960:	3401      	adds	r4, #1
    4962:	7823      	ldrb	r3, [r4, #0]
    4964:	2b00      	cmp	r3, #0
    4966:	d00d      	beq.n	4984 <gfx_mono_draw_string+0x44>
		if (*str == '\n') {
    4968:	7820      	ldrb	r0, [r4, #0]
    496a:	280a      	cmp	r0, #10
    496c:	d0f2      	beq.n	4954 <gfx_mono_draw_string+0x14>
		} else if (*str == '\r') {
    496e:	280d      	cmp	r0, #13
    4970:	d0f6      	beq.n	4960 <gfx_mono_draw_string+0x20>
			gfx_mono_draw_char(*str, x, y, font);
    4972:	003b      	movs	r3, r7
    4974:	4642      	mov	r2, r8
    4976:	0029      	movs	r1, r5
    4978:	4e04      	ldr	r6, [pc, #16]	; (498c <gfx_mono_draw_string+0x4c>)
    497a:	47b0      	blx	r6
			x += font->width;
    497c:	7a3b      	ldrb	r3, [r7, #8]
    497e:	18ed      	adds	r5, r5, r3
    4980:	b2ed      	uxtb	r5, r5
    4982:	e7ed      	b.n	4960 <gfx_mono_draw_string+0x20>
}
    4984:	b002      	add	sp, #8
    4986:	bc04      	pop	{r2}
    4988:	4690      	mov	r8, r2
    498a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    498c:	00004871 	.word	0x00004871

00004990 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
    4990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4992:	0004      	movs	r4, r0
    4994:	000f      	movs	r7, r1
    4996:	0015      	movs	r5, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
    4998:	2b00      	cmp	r3, #0
    499a:	d103      	bne.n	49a4 <gfx_mono_ssd1306_put_byte+0x14>
    499c:	4b0d      	ldr	r3, [pc, #52]	; (49d4 <gfx_mono_ssd1306_put_byte+0x44>)
    499e:	4798      	blx	r3
    49a0:	42a8      	cmp	r0, r5
    49a2:	d015      	beq.n	49d0 <gfx_mono_ssd1306_put_byte+0x40>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
    49a4:	002a      	movs	r2, r5
    49a6:	0039      	movs	r1, r7
    49a8:	0020      	movs	r0, r4
    49aa:	4b0b      	ldr	r3, [pc, #44]	; (49d8 <gfx_mono_ssd1306_put_byte+0x48>)
    49ac:	4798      	blx	r3
	address &= 0x0F;
    49ae:	260f      	movs	r6, #15
    49b0:	4034      	ands	r4, r6
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
    49b2:	20b0      	movs	r0, #176	; 0xb0
    49b4:	4320      	orrs	r0, r4
    49b6:	4c09      	ldr	r4, [pc, #36]	; (49dc <gfx_mono_ssd1306_put_byte+0x4c>)
    49b8:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
    49ba:	0678      	lsls	r0, r7, #25
    49bc:	0f40      	lsrs	r0, r0, #29
    49be:	2310      	movs	r3, #16
    49c0:	4318      	orrs	r0, r3
    49c2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
    49c4:	0030      	movs	r0, r6
    49c6:	4038      	ands	r0, r7
    49c8:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
    49ca:	0028      	movs	r0, r5
    49cc:	4b04      	ldr	r3, [pc, #16]	; (49e0 <gfx_mono_ssd1306_put_byte+0x50>)
    49ce:	4798      	blx	r3
}
    49d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    49d2:	46c0      	nop			; (mov r8, r8)
    49d4:	00004765 	.word	0x00004765
    49d8:	00004755 	.word	0x00004755
    49dc:	00004461 	.word	0x00004461
    49e0:	00004665 	.word	0x00004665

000049e4 <gfx_mono_ssd1306_init>:
{
    49e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	gfx_mono_set_framebuffer(framebuffer);
    49e6:	480d      	ldr	r0, [pc, #52]	; (4a1c <gfx_mono_ssd1306_init+0x38>)
    49e8:	4b0d      	ldr	r3, [pc, #52]	; (4a20 <gfx_mono_ssd1306_init+0x3c>)
    49ea:	4798      	blx	r3
	ssd1306_init();
    49ec:	4b0d      	ldr	r3, [pc, #52]	; (4a24 <gfx_mono_ssd1306_init+0x40>)
    49ee:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
    49f0:	2040      	movs	r0, #64	; 0x40
    49f2:	4b0d      	ldr	r3, [pc, #52]	; (4a28 <gfx_mono_ssd1306_init+0x44>)
    49f4:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    49f6:	2500      	movs	r5, #0
{
    49f8:	2600      	movs	r6, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
    49fa:	4f0c      	ldr	r7, [pc, #48]	; (4a2c <gfx_mono_ssd1306_init+0x48>)
{
    49fc:	0034      	movs	r4, r6
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
    49fe:	2301      	movs	r3, #1
    4a00:	0032      	movs	r2, r6
    4a02:	0021      	movs	r1, r4
    4a04:	0028      	movs	r0, r5
    4a06:	47b8      	blx	r7
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
    4a08:	3401      	adds	r4, #1
    4a0a:	b2e4      	uxtb	r4, r4
    4a0c:	2c80      	cmp	r4, #128	; 0x80
    4a0e:	d1f6      	bne.n	49fe <gfx_mono_ssd1306_init+0x1a>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    4a10:	3501      	adds	r5, #1
    4a12:	b2ed      	uxtb	r5, r5
    4a14:	2d04      	cmp	r5, #4
    4a16:	d1f1      	bne.n	49fc <gfx_mono_ssd1306_init+0x18>
}
    4a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4a1a:	46c0      	nop			; (mov r8, r8)
    4a1c:	200000b0 	.word	0x200000b0
    4a20:	00004749 	.word	0x00004749
    4a24:	000044ad 	.word	0x000044ad
    4a28:	00004461 	.word	0x00004461
    4a2c:	00004991 	.word	0x00004991

00004a30 <gfx_mono_ssd1306_draw_pixel>:
{
    4a30:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a32:	46c6      	mov	lr, r8
    4a34:	b500      	push	{lr}
    4a36:	0004      	movs	r4, r0
    4a38:	0015      	movs	r5, r2
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
    4a3a:	b243      	sxtb	r3, r0
    4a3c:	2b00      	cmp	r3, #0
    4a3e:	db01      	blt.n	4a44 <gfx_mono_ssd1306_draw_pixel+0x14>
    4a40:	291f      	cmp	r1, #31
    4a42:	d902      	bls.n	4a4a <gfx_mono_ssd1306_draw_pixel+0x1a>
}
    4a44:	bc04      	pop	{r2}
    4a46:	4690      	mov	r8, r2
    4a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
    4a4a:	08cf      	lsrs	r7, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
    4a4c:	00fb      	lsls	r3, r7, #3
    4a4e:	1ac9      	subs	r1, r1, r3
    4a50:	2601      	movs	r6, #1
    4a52:	408e      	lsls	r6, r1
    4a54:	b2f3      	uxtb	r3, r6
    4a56:	4698      	mov	r8, r3
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
    4a58:	0001      	movs	r1, r0
    4a5a:	0038      	movs	r0, r7
    4a5c:	4b0c      	ldr	r3, [pc, #48]	; (4a90 <gfx_mono_ssd1306_draw_pixel+0x60>)
    4a5e:	4798      	blx	r3
    4a60:	0002      	movs	r2, r0
	switch (color) {
    4a62:	2d01      	cmp	r5, #1
    4a64:	d009      	beq.n	4a7a <gfx_mono_ssd1306_draw_pixel+0x4a>
    4a66:	2d00      	cmp	r5, #0
    4a68:	d00b      	beq.n	4a82 <gfx_mono_ssd1306_draw_pixel+0x52>
    4a6a:	2d02      	cmp	r5, #2
    4a6c:	d00c      	beq.n	4a88 <gfx_mono_ssd1306_draw_pixel+0x58>
	gfx_mono_put_byte(page, x, pixel_value);
    4a6e:	2300      	movs	r3, #0
    4a70:	0021      	movs	r1, r4
    4a72:	0038      	movs	r0, r7
    4a74:	4c07      	ldr	r4, [pc, #28]	; (4a94 <gfx_mono_ssd1306_draw_pixel+0x64>)
    4a76:	47a0      	blx	r4
    4a78:	e7e4      	b.n	4a44 <gfx_mono_ssd1306_draw_pixel+0x14>
		pixel_value |= pixel_mask;
    4a7a:	4643      	mov	r3, r8
    4a7c:	4303      	orrs	r3, r0
    4a7e:	b2da      	uxtb	r2, r3
		break;
    4a80:	e7f5      	b.n	4a6e <gfx_mono_ssd1306_draw_pixel+0x3e>
		pixel_value &= ~pixel_mask;
    4a82:	43b0      	bics	r0, r6
    4a84:	b2c2      	uxtb	r2, r0
		break;
    4a86:	e7f2      	b.n	4a6e <gfx_mono_ssd1306_draw_pixel+0x3e>
		pixel_value ^= pixel_mask;
    4a88:	4643      	mov	r3, r8
    4a8a:	4043      	eors	r3, r0
    4a8c:	b2da      	uxtb	r2, r3
		break;
    4a8e:	e7ee      	b.n	4a6e <gfx_mono_ssd1306_draw_pixel+0x3e>
    4a90:	00004765 	.word	0x00004765
    4a94:	00004991 	.word	0x00004991

00004a98 <gfx_mono_ssd1306_get_byte>:
{
    4a98:	b510      	push	{r4, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
    4a9a:	4b01      	ldr	r3, [pc, #4]	; (4aa0 <gfx_mono_ssd1306_get_byte+0x8>)
    4a9c:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
    4a9e:	bd10      	pop	{r4, pc}
    4aa0:	00004765 	.word	0x00004765

00004aa4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    4aa4:	4b0c      	ldr	r3, [pc, #48]	; (4ad8 <cpu_irq_enter_critical+0x34>)
    4aa6:	681b      	ldr	r3, [r3, #0]
    4aa8:	2b00      	cmp	r3, #0
    4aaa:	d106      	bne.n	4aba <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4aac:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    4ab0:	2b00      	cmp	r3, #0
    4ab2:	d007      	beq.n	4ac4 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    4ab4:	2200      	movs	r2, #0
    4ab6:	4b09      	ldr	r3, [pc, #36]	; (4adc <cpu_irq_enter_critical+0x38>)
    4ab8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    4aba:	4a07      	ldr	r2, [pc, #28]	; (4ad8 <cpu_irq_enter_critical+0x34>)
    4abc:	6813      	ldr	r3, [r2, #0]
    4abe:	3301      	adds	r3, #1
    4ac0:	6013      	str	r3, [r2, #0]
}
    4ac2:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    4ac4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    4ac6:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    4aca:	2200      	movs	r2, #0
    4acc:	4b04      	ldr	r3, [pc, #16]	; (4ae0 <cpu_irq_enter_critical+0x3c>)
    4ace:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    4ad0:	3201      	adds	r2, #1
    4ad2:	4b02      	ldr	r3, [pc, #8]	; (4adc <cpu_irq_enter_critical+0x38>)
    4ad4:	701a      	strb	r2, [r3, #0]
    4ad6:	e7f0      	b.n	4aba <cpu_irq_enter_critical+0x16>
    4ad8:	200002b0 	.word	0x200002b0
    4adc:	200002b4 	.word	0x200002b4
    4ae0:	20000014 	.word	0x20000014

00004ae4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4ae4:	4b08      	ldr	r3, [pc, #32]	; (4b08 <cpu_irq_leave_critical+0x24>)
    4ae6:	681a      	ldr	r2, [r3, #0]
    4ae8:	3a01      	subs	r2, #1
    4aea:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    4aec:	681b      	ldr	r3, [r3, #0]
    4aee:	2b00      	cmp	r3, #0
    4af0:	d109      	bne.n	4b06 <cpu_irq_leave_critical+0x22>
    4af2:	4b06      	ldr	r3, [pc, #24]	; (4b0c <cpu_irq_leave_critical+0x28>)
    4af4:	781b      	ldrb	r3, [r3, #0]
    4af6:	2b00      	cmp	r3, #0
    4af8:	d005      	beq.n	4b06 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    4afa:	2201      	movs	r2, #1
    4afc:	4b04      	ldr	r3, [pc, #16]	; (4b10 <cpu_irq_leave_critical+0x2c>)
    4afe:	701a      	strb	r2, [r3, #0]
    4b00:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4b04:	b662      	cpsie	i
	}
}
    4b06:	4770      	bx	lr
    4b08:	200002b0 	.word	0x200002b0
    4b0c:	200002b4 	.word	0x200002b4
    4b10:	20000014 	.word	0x20000014

00004b14 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    4b14:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b16:	46c6      	mov	lr, r8
    4b18:	b500      	push	{lr}
    4b1a:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
    4b1c:	ac01      	add	r4, sp, #4
    4b1e:	2501      	movs	r5, #1
    4b20:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    4b22:	2300      	movs	r3, #0
    4b24:	4698      	mov	r8, r3
    4b26:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4b28:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    4b2a:	0021      	movs	r1, r4
    4b2c:	2013      	movs	r0, #19
    4b2e:	4e12      	ldr	r6, [pc, #72]	; (4b78 <system_board_init+0x64>)
    4b30:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    4b32:	4f12      	ldr	r7, [pc, #72]	; (4b7c <system_board_init+0x68>)
    4b34:	2380      	movs	r3, #128	; 0x80
    4b36:	031b      	lsls	r3, r3, #12
    4b38:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4b3a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
    4b3c:	0021      	movs	r1, r4
    4b3e:	2012      	movs	r0, #18
    4b40:	47b0      	blx	r6
    4b42:	2380      	movs	r3, #128	; 0x80
    4b44:	02db      	lsls	r3, r3, #11
    4b46:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);
#ifdef RFSWITCH_ENABLE
	/* Configure RFSWITCH as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4b48:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(RF_SWITCH_PIN, &pin_conf);
    4b4a:	0021      	movs	r1, r4
    4b4c:	200d      	movs	r0, #13
    4b4e:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    4b50:	2380      	movs	r3, #128	; 0x80
    4b52:	019b      	lsls	r3, r3, #6
    4b54:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
#endif

#ifdef TCXO_ENABLE
	/* Configure TXPO PWR as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4b56:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(TCXO_PWR_PIN, &pin_conf);
    4b58:	0021      	movs	r1, r4
    4b5a:	2009      	movs	r0, #9
    4b5c:	47b0      	blx	r6
    4b5e:	2380      	movs	r3, #128	; 0x80
    4b60:	009b      	lsls	r3, r3, #2
    4b62:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    4b64:	4643      	mov	r3, r8
    4b66:	7023      	strb	r3, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    4b68:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    4b6a:	0021      	movs	r1, r4
    4b6c:	201c      	movs	r0, #28
    4b6e:	47b0      	blx	r6
		
}
    4b70:	b002      	add	sp, #8
    4b72:	bc04      	pop	{r2}
    4b74:	4690      	mov	r8, r2
    4b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b78:	00005155 	.word	0x00005155
    4b7c:	40002800 	.word	0x40002800

00004b80 <aes_get_config_defaults>:
		struct aes_config *const config)
{

	/* Sanity check arguments */
	Assert(config);
	config->encrypt_mode = AES_ENCRYPTION;
    4b80:	2301      	movs	r3, #1
    4b82:	7003      	strb	r3, [r0, #0]
	config->key_size = AES_KEY_SIZE_128;
    4b84:	2300      	movs	r3, #0
    4b86:	7043      	strb	r3, [r0, #1]
	config->start_mode = AES_MANUAL_START;
    4b88:	7083      	strb	r3, [r0, #2]
	config->opmode= AES_ECB_MODE;
    4b8a:	70c3      	strb	r3, [r0, #3]
	config->cfb_size = AES_CFB_SIZE_128;
    4b8c:	7103      	strb	r3, [r0, #4]
	config->ctype = AES_COUNTERMEASURE_TYPE_ALL;
    4b8e:	220f      	movs	r2, #15
    4b90:	7142      	strb	r2, [r0, #5]
	config->enable_xor_key = false;
    4b92:	7183      	strb	r3, [r0, #6]
	config->enable_key_gen = false;
    4b94:	71c3      	strb	r3, [r0, #7]
	config->lod = false;
    4b96:	7203      	strb	r3, [r0, #8]
}
    4b98:	4770      	bx	lr

00004b9a <aes_enable>:
 */
void aes_enable(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLA.reg |= AES_CTRLA_ENABLE;
    4b9a:	6802      	ldr	r2, [r0, #0]
    4b9c:	6813      	ldr	r3, [r2, #0]
    4b9e:	2102      	movs	r1, #2
    4ba0:	430b      	orrs	r3, r1
    4ba2:	6013      	str	r3, [r2, #0]

}
    4ba4:	4770      	bx	lr

00004ba6 <aes_disable>:
{
	Assert(module);
	Assert(module->hw);

	/* Disbale interrupt */
	module->hw->INTENCLR.reg = AES_INTENCLR_MASK;
    4ba6:	2303      	movs	r3, #3
    4ba8:	6802      	ldr	r2, [r0, #0]
    4baa:	7153      	strb	r3, [r2, #5]
	/* Clear interrupt flag */
	module->hw->INTFLAG.reg = AES_INTFLAG_MASK;
    4bac:	6802      	ldr	r2, [r0, #0]
    4bae:	71d3      	strb	r3, [r2, #7]

	module->hw->CTRLA.reg &= (~AES_CTRLA_ENABLE);
    4bb0:	6802      	ldr	r2, [r0, #0]
    4bb2:	6813      	ldr	r3, [r2, #0]
    4bb4:	2102      	movs	r1, #2
    4bb6:	438b      	bics	r3, r1
    4bb8:	6013      	str	r3, [r2, #0]
}
    4bba:	4770      	bx	lr

00004bbc <aes_set_config>:
 */
void aes_set_config(
		struct aes_module *const module,
		Aes *const hw,
		struct aes_config *const config)
{
    4bbc:	b570      	push	{r4, r5, r6, lr}
    4bbe:	0004      	movs	r4, r0
    4bc0:	000d      	movs	r5, r1
	/* Validate arguments. */
	Assert(hw);
	Assert(config);
	Assert(module);

	module->opmode = config->opmode;
    4bc2:	78d3      	ldrb	r3, [r2, #3]
    4bc4:	7103      	strb	r3, [r0, #4]
	module->hw = hw;
    4bc6:	6021      	str	r1, [r4, #0]
	module->key_size = config->key_size;
    4bc8:	7853      	ldrb	r3, [r2, #1]
    4bca:	7143      	strb	r3, [r0, #5]
	module->cfb_size = config->cfb_size;
    4bcc:	7913      	ldrb	r3, [r2, #4]
    4bce:	7183      	strb	r3, [r0, #6]

	ul_mode |= (config->encrypt_mode << AES_CTRLA_CIPHER_Pos)
    4bd0:	7813      	ldrb	r3, [r2, #0]
    4bd2:	029b      	lsls	r3, r3, #10
			 | (config->start_mode << AES_CTRLA_STARTMODE_Pos)
    4bd4:	7891      	ldrb	r1, [r2, #2]
    4bd6:	02c9      	lsls	r1, r1, #11
    4bd8:	430b      	orrs	r3, r1
			 | (config->key_size << AES_CTRLA_KEYSIZE_Pos)
    4bda:	7851      	ldrb	r1, [r2, #1]
    4bdc:	0209      	lsls	r1, r1, #8
    4bde:	430b      	orrs	r3, r1
			 | (config->opmode << AES_CTRLA_AESMODE_Pos)
    4be0:	78d1      	ldrb	r1, [r2, #3]
    4be2:	0089      	lsls	r1, r1, #2
    4be4:	430b      	orrs	r3, r1
			 | (config->cfb_size << AES_CTRLA_CFBS_Pos)
    4be6:	7911      	ldrb	r1, [r2, #4]
    4be8:	0149      	lsls	r1, r1, #5
    4bea:	430b      	orrs	r3, r1
			 | (AES_CTRLA_CTYPE(config->ctype))
			 | (config->enable_xor_key << AES_CTRLA_XORKEY_Pos)
    4bec:	7991      	ldrb	r1, [r2, #6]
    4bee:	0389      	lsls	r1, r1, #14
			 | (config->enable_key_gen << AES_CTRLA_KEYGEN_Pos)
    4bf0:	79d0      	ldrb	r0, [r2, #7]
    4bf2:	0340      	lsls	r0, r0, #13
			 | (config->lod << AES_CTRLA_LOD_Pos);
    4bf4:	4301      	orrs	r1, r0
    4bf6:	7a10      	ldrb	r0, [r2, #8]
    4bf8:	0300      	lsls	r0, r0, #12
    4bfa:	4301      	orrs	r1, r0
			 | (AES_CTRLA_CTYPE(config->ctype))
    4bfc:	7952      	ldrb	r2, [r2, #5]
    4bfe:	0412      	lsls	r2, r2, #16
    4c00:	20f0      	movs	r0, #240	; 0xf0
    4c02:	0300      	lsls	r0, r0, #12
    4c04:	4002      	ands	r2, r0
			 | (config->lod << AES_CTRLA_LOD_Pos);
    4c06:	430a      	orrs	r2, r1
    4c08:	4313      	orrs	r3, r2
    4c0a:	001e      	movs	r6, r3
	if (hw->CTRLA.reg & AES_CTRLA_ENABLE) {
    4c0c:	682b      	ldr	r3, [r5, #0]
    4c0e:	079b      	lsls	r3, r3, #30
    4c10:	d401      	bmi.n	4c16 <aes_set_config+0x5a>
		aes_disable(module);
		hw->CTRLA.reg = ul_mode;
		aes_enable(module);
	} else {
		hw->CTRLA.reg = ul_mode;
    4c12:	602e      	str	r6, [r5, #0]
	}
}
    4c14:	bd70      	pop	{r4, r5, r6, pc}
		aes_disable(module);
    4c16:	0020      	movs	r0, r4
    4c18:	4b03      	ldr	r3, [pc, #12]	; (4c28 <aes_set_config+0x6c>)
    4c1a:	4798      	blx	r3
		hw->CTRLA.reg = ul_mode;
    4c1c:	602e      	str	r6, [r5, #0]
		aes_enable(module);
    4c1e:	0020      	movs	r0, r4
    4c20:	4b02      	ldr	r3, [pc, #8]	; (4c2c <aes_set_config+0x70>)
    4c22:	4798      	blx	r3
    4c24:	e7f6      	b.n	4c14 <aes_set_config+0x58>
    4c26:	46c0      	nop			; (mov r8, r8)
    4c28:	00004ba7 	.word	0x00004ba7
    4c2c:	00004b9b 	.word	0x00004b9b

00004c30 <aes_init>:
{
    4c30:	b570      	push	{r4, r5, r6, lr}
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    4c32:	4c05      	ldr	r4, [pc, #20]	; (4c48 <aes_init+0x18>)
    4c34:	69e5      	ldr	r5, [r4, #28]
    4c36:	2380      	movs	r3, #128	; 0x80
    4c38:	019b      	lsls	r3, r3, #6
    4c3a:	432b      	orrs	r3, r5
    4c3c:	61e3      	str	r3, [r4, #28]
	hw->CTRLA.reg = AES_CTRLA_SWRST;
    4c3e:	2301      	movs	r3, #1
    4c40:	600b      	str	r3, [r1, #0]
	aes_set_config(module,hw, config);
    4c42:	4b02      	ldr	r3, [pc, #8]	; (4c4c <aes_init+0x1c>)
    4c44:	4798      	blx	r3
}
    4c46:	bd70      	pop	{r4, r5, r6, pc}
    4c48:	40000400 	.word	0x40000400
    4c4c:	00004bbd 	.word	0x00004bbd

00004c50 <aes_write_key>:
 * \note The key size depends on the current AES configuration.
 */
void aes_write_key(
		struct aes_module *const module,
		const uint32_t *key)
{
    4c50:	b570      	push	{r4, r5, r6, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(key);

	switch (module->key_size) {
    4c52:	7943      	ldrb	r3, [r0, #5]
    4c54:	2b01      	cmp	r3, #1
    4c56:	d005      	beq.n	4c64 <aes_write_key+0x14>
    4c58:	2b00      	cmp	r3, #0
    4c5a:	d010      	beq.n	4c7e <aes_write_key+0x2e>
    4c5c:	2b02      	cmp	r3, #2
    4c5e:	d10d      	bne.n	4c7c <aes_write_key+0x2c>
	case AES_KEY_SIZE_192:
		key_length = 6;
		break;

	case AES_KEY_SIZE_256:
		key_length = 8;
    4c60:	2508      	movs	r5, #8
    4c62:	e000      	b.n	4c66 <aes_write_key+0x16>
		key_length = 6;
    4c64:	2506      	movs	r5, #6
{
    4c66:	2300      	movs	r3, #0
	default:
		break;
	}

	for (i = 0; i < key_length; i++) {
		module->hw->KEYWORD[i].reg = *key;
    4c68:	c910      	ldmia	r1!, {r4}
    4c6a:	1c9a      	adds	r2, r3, #2
    4c6c:	0092      	lsls	r2, r2, #2
    4c6e:	6806      	ldr	r6, [r0, #0]
    4c70:	46b4      	mov	ip, r6
    4c72:	4462      	add	r2, ip
    4c74:	6054      	str	r4, [r2, #4]
	for (i = 0; i < key_length; i++) {
    4c76:	3301      	adds	r3, #1
    4c78:	42ab      	cmp	r3, r5
    4c7a:	d3f5      	bcc.n	4c68 <aes_write_key+0x18>
		key++;
	}
}
    4c7c:	bd70      	pop	{r4, r5, r6, pc}
		key_length = 4;
    4c7e:	2504      	movs	r5, #4
    4c80:	e7f1      	b.n	4c66 <aes_write_key+0x16>
    4c82:	Address 0x00004c82 is out of bounds.


00004c84 <aes_write_input_data>:
 * \param[in] input_data_buffer Pointer to an input data buffer
 */
void aes_write_input_data(
		struct aes_module *const module,
		const uint32_t *input_data_buffer)
{
    4c84:	b510      	push	{r4, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);;
	Assert(input_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    4c86:	2300      	movs	r3, #0
    4c88:	6802      	ldr	r2, [r0, #0]
    4c8a:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
    4c8c:	4b0f      	ldr	r3, [pc, #60]	; (4ccc <aes_write_input_data+0x48>)
    4c8e:	6842      	ldr	r2, [r0, #4]
    4c90:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
    4c92:	4a0f      	ldr	r2, [pc, #60]	; (4cd0 <aes_write_input_data+0x4c>)
    4c94:	4293      	cmp	r3, r2
    4c96:	d00a      	beq.n	4cae <aes_write_input_data+0x2a>
		for (i = 0; i < 2; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
			input_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
    4c98:	7903      	ldrb	r3, [r0, #4]
    4c9a:	2b03      	cmp	r3, #3
    4c9c:	d00e      	beq.n	4cbc <aes_write_input_data+0x38>
    4c9e:	000c      	movs	r4, r1
    4ca0:	3410      	adds	r4, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		module->hw->INDATA.reg = *input_data_buffer;
	} else {
		for (i = 0; i < 4; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
    4ca2:	6803      	ldr	r3, [r0, #0]
    4ca4:	c904      	ldmia	r1!, {r2}
    4ca6:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < 4; i++) {
    4ca8:	428c      	cmp	r4, r1
    4caa:	d1fa      	bne.n	4ca2 <aes_write_input_data+0x1e>
			input_data_buffer++;
		}
	}
}
    4cac:	bd10      	pop	{r4, pc}
			module->hw->INDATA.reg = *input_data_buffer;
    4cae:	6803      	ldr	r3, [r0, #0]
    4cb0:	680a      	ldr	r2, [r1, #0]
    4cb2:	639a      	str	r2, [r3, #56]	; 0x38
    4cb4:	6803      	ldr	r3, [r0, #0]
    4cb6:	684a      	ldr	r2, [r1, #4]
    4cb8:	639a      	str	r2, [r3, #56]	; 0x38
    4cba:	e7f7      	b.n	4cac <aes_write_input_data+0x28>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    4cbc:	7983      	ldrb	r3, [r0, #6]
    4cbe:	3b02      	subs	r3, #2
    4cc0:	2b01      	cmp	r3, #1
    4cc2:	d8ec      	bhi.n	4c9e <aes_write_input_data+0x1a>
		module->hw->INDATA.reg = *input_data_buffer;
    4cc4:	6803      	ldr	r3, [r0, #0]
    4cc6:	680a      	ldr	r2, [r1, #0]
    4cc8:	639a      	str	r2, [r3, #56]	; 0x38
    4cca:	e7ef      	b.n	4cac <aes_write_input_data+0x28>
    4ccc:	00ff00ff 	.word	0x00ff00ff
    4cd0:	00010003 	.word	0x00010003

00004cd4 <aes_read_output_data>:
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(output_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    4cd4:	2300      	movs	r3, #0
    4cd6:	6802      	ldr	r2, [r0, #0]
    4cd8:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
    4cda:	4b10      	ldr	r3, [pc, #64]	; (4d1c <aes_read_output_data+0x48>)
    4cdc:	6842      	ldr	r2, [r0, #4]
    4cde:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
    4ce0:	4a0f      	ldr	r2, [pc, #60]	; (4d20 <aes_read_output_data+0x4c>)
    4ce2:	4293      	cmp	r3, r2
    4ce4:	d00a      	beq.n	4cfc <aes_read_output_data+0x28>
		for (i = 0; i < 2; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
			output_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
    4ce6:	7903      	ldrb	r3, [r0, #4]
    4ce8:	2b03      	cmp	r3, #3
    4cea:	d00e      	beq.n	4d0a <aes_read_output_data+0x36>
    4cec:	000a      	movs	r2, r1
    4cee:	3210      	adds	r2, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		*output_data_buffer = module->hw->INDATA.reg;
	} else {
		for (i = 0; i < 4; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
    4cf0:	6803      	ldr	r3, [r0, #0]
    4cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4cf4:	c108      	stmia	r1!, {r3}
		for (i = 0; i < 4; i++) {
    4cf6:	428a      	cmp	r2, r1
    4cf8:	d1fa      	bne.n	4cf0 <aes_read_output_data+0x1c>
			output_data_buffer++;
		}
	}
}
    4cfa:	4770      	bx	lr
			*output_data_buffer = module->hw->INDATA.reg;
    4cfc:	6803      	ldr	r3, [r0, #0]
    4cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4d00:	600b      	str	r3, [r1, #0]
    4d02:	6803      	ldr	r3, [r0, #0]
    4d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4d06:	604b      	str	r3, [r1, #4]
    4d08:	e7f7      	b.n	4cfa <aes_read_output_data+0x26>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    4d0a:	7983      	ldrb	r3, [r0, #6]
    4d0c:	3b02      	subs	r3, #2
    4d0e:	2b01      	cmp	r3, #1
    4d10:	d8ec      	bhi.n	4cec <aes_read_output_data+0x18>
		*output_data_buffer = module->hw->INDATA.reg;
    4d12:	6803      	ldr	r3, [r0, #0]
    4d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4d16:	600b      	str	r3, [r1, #0]
    4d18:	e7ef      	b.n	4cfa <aes_read_output_data+0x26>
    4d1a:	46c0      	nop			; (mov r8, r8)
    4d1c:	00ff00ff 	.word	0x00ff00ff
    4d20:	00010003 	.word	0x00010003

00004d24 <AES_Handler>:

/**
* \internal The AES interrupt handler.
*/
void AES_Handler(void)
{
    4d24:	b510      	push	{r4, lr}
	uint32_t status = AES->INTFLAG.reg;
    4d26:	4b0c      	ldr	r3, [pc, #48]	; (4d58 <AES_Handler+0x34>)
    4d28:	79dc      	ldrb	r4, [r3, #7]
    4d2a:	b2e4      	uxtb	r4, r4

	if (status & AES_INTFLAG_ENCCMP) {
    4d2c:	07e3      	lsls	r3, r4, #31
    4d2e:	d507      	bpl.n	4d40 <AES_Handler+0x1c>
		if (aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]) {
    4d30:	4b0a      	ldr	r3, [pc, #40]	; (4d5c <AES_Handler+0x38>)
    4d32:	681b      	ldr	r3, [r3, #0]
    4d34:	2b00      	cmp	r3, #0
    4d36:	d00d      	beq.n	4d54 <AES_Handler+0x30>
			AES->INTFLAG.reg = AES_INTFLAG_ENCCMP;
    4d38:	2101      	movs	r1, #1
    4d3a:	4a07      	ldr	r2, [pc, #28]	; (4d58 <AES_Handler+0x34>)
    4d3c:	71d1      	strb	r1, [r2, #7]
			aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]();
    4d3e:	4798      	blx	r3
		}
	}

	if (status & AES_INTFLAG_GFMCMP) {
    4d40:	07a3      	lsls	r3, r4, #30
    4d42:	d507      	bpl.n	4d54 <AES_Handler+0x30>
		if (aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]) {
    4d44:	4b05      	ldr	r3, [pc, #20]	; (4d5c <AES_Handler+0x38>)
    4d46:	681b      	ldr	r3, [r3, #0]
    4d48:	2b00      	cmp	r3, #0
    4d4a:	d003      	beq.n	4d54 <AES_Handler+0x30>
			AES->INTFLAG.reg = AES_INTFLAG_GFMCMP;
    4d4c:	2102      	movs	r1, #2
    4d4e:	4a02      	ldr	r2, [pc, #8]	; (4d58 <AES_Handler+0x34>)
    4d50:	71d1      	strb	r1, [r2, #7]
			aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]();
    4d52:	4798      	blx	r3
		}
	}
}
    4d54:	bd10      	pop	{r4, pc}
    4d56:	46c0      	nop			; (mov r8, r8)
    4d58:	42003400 	.word	0x42003400
    4d5c:	200002b8 	.word	0x200002b8

00004d60 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4d60:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    4d62:	2a00      	cmp	r2, #0
    4d64:	d001      	beq.n	4d6a <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    4d66:	0018      	movs	r0, r3
    4d68:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    4d6a:	008b      	lsls	r3, r1, #2
    4d6c:	4a06      	ldr	r2, [pc, #24]	; (4d88 <extint_register_callback+0x28>)
    4d6e:	589b      	ldr	r3, [r3, r2]
    4d70:	2b00      	cmp	r3, #0
    4d72:	d003      	beq.n	4d7c <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    4d74:	4283      	cmp	r3, r0
    4d76:	d005      	beq.n	4d84 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    4d78:	231d      	movs	r3, #29
    4d7a:	e7f4      	b.n	4d66 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    4d7c:	0089      	lsls	r1, r1, #2
    4d7e:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    4d80:	2300      	movs	r3, #0
    4d82:	e7f0      	b.n	4d66 <extint_register_callback+0x6>
		return STATUS_OK;
    4d84:	2300      	movs	r3, #0
    4d86:	e7ee      	b.n	4d66 <extint_register_callback+0x6>
    4d88:	200020ac 	.word	0x200020ac

00004d8c <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4d8c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    4d8e:	2900      	cmp	r1, #0
    4d90:	d001      	beq.n	4d96 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    4d92:	0018      	movs	r0, r3
    4d94:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    4d96:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    4d98:	281f      	cmp	r0, #31
    4d9a:	d800      	bhi.n	4d9e <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    4d9c:	4a02      	ldr	r2, [pc, #8]	; (4da8 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    4d9e:	2301      	movs	r3, #1
    4da0:	4083      	lsls	r3, r0
    4da2:	6113      	str	r3, [r2, #16]
	return STATUS_OK;
    4da4:	2300      	movs	r3, #0
    4da6:	e7f4      	b.n	4d92 <extint_chan_enable_callback+0x6>
    4da8:	40002400 	.word	0x40002400

00004dac <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    4dac:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4dae:	2200      	movs	r2, #0
    4db0:	4b10      	ldr	r3, [pc, #64]	; (4df4 <EIC_Handler+0x48>)
    4db2:	701a      	strb	r2, [r3, #0]
    4db4:	2300      	movs	r3, #0
    4db6:	4910      	ldr	r1, [pc, #64]	; (4df8 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    4db8:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4dba:	4e10      	ldr	r6, [pc, #64]	; (4dfc <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4dbc:	4c0d      	ldr	r4, [pc, #52]	; (4df4 <EIC_Handler+0x48>)
    4dbe:	e00a      	b.n	4dd6 <EIC_Handler+0x2a>
		return eics[eic_index];
    4dc0:	490d      	ldr	r1, [pc, #52]	; (4df8 <EIC_Handler+0x4c>)
    4dc2:	e008      	b.n	4dd6 <EIC_Handler+0x2a>
    4dc4:	7823      	ldrb	r3, [r4, #0]
    4dc6:	3301      	adds	r3, #1
    4dc8:	b2db      	uxtb	r3, r3
    4dca:	7023      	strb	r3, [r4, #0]
    4dcc:	2b0f      	cmp	r3, #15
    4dce:	d810      	bhi.n	4df2 <EIC_Handler+0x46>
		return NULL;
    4dd0:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    4dd2:	2b1f      	cmp	r3, #31
    4dd4:	d9f4      	bls.n	4dc0 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    4dd6:	0028      	movs	r0, r5
    4dd8:	4018      	ands	r0, r3
    4dda:	2201      	movs	r2, #1
    4ddc:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    4dde:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    4de0:	4210      	tst	r0, r2
    4de2:	d0ef      	beq.n	4dc4 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    4de4:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4de6:	009b      	lsls	r3, r3, #2
    4de8:	599b      	ldr	r3, [r3, r6]
    4dea:	2b00      	cmp	r3, #0
    4dec:	d0ea      	beq.n	4dc4 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    4dee:	4798      	blx	r3
    4df0:	e7e8      	b.n	4dc4 <EIC_Handler+0x18>
			}
		}
	}
}
    4df2:	bd70      	pop	{r4, r5, r6, pc}
    4df4:	200020ab 	.word	0x200020ab
    4df8:	40002400 	.word	0x40002400
    4dfc:	200020ac 	.word	0x200020ac

00004e00 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4e00:	4a06      	ldr	r2, [pc, #24]	; (4e1c <_extint_enable+0x1c>)
    4e02:	7813      	ldrb	r3, [r2, #0]
    4e04:	2102      	movs	r1, #2
    4e06:	430b      	orrs	r3, r1
    4e08:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4e0a:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4e0c:	6853      	ldr	r3, [r2, #4]
    4e0e:	4219      	tst	r1, r3
    4e10:	d1fc      	bne.n	4e0c <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4e12:	6853      	ldr	r3, [r2, #4]
    4e14:	4218      	tst	r0, r3
    4e16:	d1f9      	bne.n	4e0c <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    4e18:	4770      	bx	lr
    4e1a:	46c0      	nop			; (mov r8, r8)
    4e1c:	40002400 	.word	0x40002400

00004e20 <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    4e20:	4a06      	ldr	r2, [pc, #24]	; (4e3c <_extint_disable+0x1c>)
    4e22:	7813      	ldrb	r3, [r2, #0]
    4e24:	2102      	movs	r1, #2
    4e26:	438b      	bics	r3, r1
    4e28:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4e2a:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4e2c:	6853      	ldr	r3, [r2, #4]
    4e2e:	4219      	tst	r1, r3
    4e30:	d1fc      	bne.n	4e2c <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4e32:	6853      	ldr	r3, [r2, #4]
    4e34:	4218      	tst	r0, r3
    4e36:	d1f9      	bne.n	4e2c <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    4e38:	4770      	bx	lr
    4e3a:	46c0      	nop			; (mov r8, r8)
    4e3c:	40002400 	.word	0x40002400

00004e40 <_system_extint_init>:
{
    4e40:	b510      	push	{r4, lr}
			MCLK->APBAMASK.reg |= mask;
    4e42:	4a12      	ldr	r2, [pc, #72]	; (4e8c <_system_extint_init+0x4c>)
    4e44:	6951      	ldr	r1, [r2, #20]
    4e46:	2380      	movs	r3, #128	; 0x80
    4e48:	009b      	lsls	r3, r3, #2
    4e4a:	430b      	orrs	r3, r1
    4e4c:	6153      	str	r3, [r2, #20]
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    4e4e:	4a10      	ldr	r2, [pc, #64]	; (4e90 <_system_extint_init+0x50>)
    4e50:	7813      	ldrb	r3, [r2, #0]
    4e52:	2101      	movs	r1, #1
    4e54:	430b      	orrs	r3, r1
    4e56:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4e58:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4e5a:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4e5c:	6853      	ldr	r3, [r2, #4]
    4e5e:	4219      	tst	r1, r3
    4e60:	d1fc      	bne.n	4e5c <_system_extint_init+0x1c>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4e62:	6853      	ldr	r3, [r2, #4]
    4e64:	4218      	tst	r0, r3
    4e66:	d1f9      	bne.n	4e5c <_system_extint_init+0x1c>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_ULP32K;
    4e68:	4a09      	ldr	r2, [pc, #36]	; (4e90 <_system_extint_init+0x50>)
    4e6a:	7813      	ldrb	r3, [r2, #0]
    4e6c:	2110      	movs	r1, #16
    4e6e:	430b      	orrs	r3, r1
    4e70:	7013      	strb	r3, [r2, #0]
    4e72:	4b08      	ldr	r3, [pc, #32]	; (4e94 <_system_extint_init+0x54>)
    4e74:	0019      	movs	r1, r3
    4e76:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    4e78:	2200      	movs	r2, #0
    4e7a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4e7c:	428b      	cmp	r3, r1
    4e7e:	d1fc      	bne.n	4e7a <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4e80:	2208      	movs	r2, #8
    4e82:	4b05      	ldr	r3, [pc, #20]	; (4e98 <_system_extint_init+0x58>)
    4e84:	601a      	str	r2, [r3, #0]
	_extint_enable();
    4e86:	4b05      	ldr	r3, [pc, #20]	; (4e9c <_system_extint_init+0x5c>)
    4e88:	4798      	blx	r3
}
    4e8a:	bd10      	pop	{r4, pc}
    4e8c:	40000400 	.word	0x40000400
    4e90:	40002400 	.word	0x40002400
    4e94:	200020ac 	.word	0x200020ac
    4e98:	e000e100 	.word	0xe000e100
    4e9c:	00004e01 	.word	0x00004e01

00004ea0 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    4ea0:	2300      	movs	r3, #0
    4ea2:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    4ea4:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    4ea6:	2201      	movs	r2, #1
    4ea8:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
    4eaa:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    4eac:	3201      	adds	r2, #1
    4eae:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
    4eb0:	7243      	strb	r3, [r0, #9]
}
    4eb2:	4770      	bx	lr

00004eb4 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    4eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4eb6:	b083      	sub	sp, #12
    4eb8:	0005      	movs	r5, r0
    4eba:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
    4ebc:	4b1c      	ldr	r3, [pc, #112]	; (4f30 <extint_chan_set_config+0x7c>)
    4ebe:	4798      	blx	r3
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4ec0:	a901      	add	r1, sp, #4
    4ec2:	2300      	movs	r3, #0
    4ec4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    4ec6:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    4ec8:	7923      	ldrb	r3, [r4, #4]
    4eca:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    4ecc:	7a23      	ldrb	r3, [r4, #8]
    4ece:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    4ed0:	7820      	ldrb	r0, [r4, #0]
    4ed2:	4b18      	ldr	r3, [pc, #96]	; (4f34 <extint_chan_set_config+0x80>)
    4ed4:	4798      	blx	r3
		return NULL;
    4ed6:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    4ed8:	2d1f      	cmp	r5, #31
    4eda:	d800      	bhi.n	4ede <extint_chan_set_config+0x2a>
		return eics[eic_index];
    4edc:	4916      	ldr	r1, [pc, #88]	; (4f38 <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    4ede:	2207      	movs	r2, #7
    4ee0:	402a      	ands	r2, r5
    4ee2:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    4ee4:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    4ee6:	7aa3      	ldrb	r3, [r4, #10]
    4ee8:	2b00      	cmp	r3, #0
    4eea:	d001      	beq.n	4ef0 <extint_chan_set_config+0x3c>
    4eec:	2308      	movs	r3, #8
    4eee:	431f      	orrs	r7, r3
    4ef0:	08eb      	lsrs	r3, r5, #3
    4ef2:	009b      	lsls	r3, r3, #2
    4ef4:	18cb      	adds	r3, r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    4ef6:	69d8      	ldr	r0, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4ef8:	260f      	movs	r6, #15
    4efa:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    4efc:	43b0      	bics	r0, r6
			(new_config << config_pos);
    4efe:	4097      	lsls	r7, r2
    4f00:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4f02:	4302      	orrs	r2, r0
		= (EIC_module->CONFIG[channel / 8].reg &
    4f04:	61da      	str	r2, [r3, #28]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
    4f06:	7a63      	ldrb	r3, [r4, #9]
    4f08:	2b00      	cmp	r3, #0
    4f0a:	d10b      	bne.n	4f24 <extint_chan_set_config+0x70>
		EIC_module->ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
    4f0c:	698a      	ldr	r2, [r1, #24]
    4f0e:	2301      	movs	r3, #1
    4f10:	40ab      	lsls	r3, r5
    4f12:	43db      	mvns	r3, r3
    4f14:	041b      	lsls	r3, r3, #16
    4f16:	0c1b      	lsrs	r3, r3, #16
    4f18:	4013      	ands	r3, r2
    4f1a:	618b      	str	r3, [r1, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
    4f1c:	4b07      	ldr	r3, [pc, #28]	; (4f3c <extint_chan_set_config+0x88>)
    4f1e:	4798      	blx	r3
}
    4f20:	b003      	add	sp, #12
    4f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->ASYNCH.reg |= (1UL << channel);
    4f24:	698a      	ldr	r2, [r1, #24]
    4f26:	2301      	movs	r3, #1
    4f28:	40ab      	lsls	r3, r5
    4f2a:	4313      	orrs	r3, r2
    4f2c:	618b      	str	r3, [r1, #24]
    4f2e:	e7f5      	b.n	4f1c <extint_chan_set_config+0x68>
    4f30:	00004e21 	.word	0x00004e21
    4f34:	00006b45 	.word	0x00006b45
    4f38:	40002400 	.word	0x40002400
    4f3c:	00004e01 	.word	0x00004e01

00004f40 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    4f40:	b530      	push	{r4, r5, lr}
    4f42:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    4f44:	4a25      	ldr	r2, [pc, #148]	; (4fdc <nvm_execute_command+0x9c>)
    4f46:	8810      	ldrh	r0, [r2, #0]
    4f48:	8853      	ldrh	r3, [r2, #2]
    4f4a:	4343      	muls	r3, r0
    4f4c:	428b      	cmp	r3, r1
    4f4e:	d20b      	bcs.n	4f68 <nvm_execute_command+0x28>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    4f50:	2280      	movs	r2, #128	; 0x80
    4f52:	0192      	lsls	r2, r2, #6
    4f54:	4b22      	ldr	r3, [pc, #136]	; (4fe0 <nvm_execute_command+0xa0>)
    4f56:	18cb      	adds	r3, r1, r3
    4f58:	4293      	cmp	r3, r2
    4f5a:	d905      	bls.n	4f68 <nvm_execute_command+0x28>
#ifdef FEATURE_NVM_RWWEE
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4f5c:	4a21      	ldr	r2, [pc, #132]	; (4fe4 <nvm_execute_command+0xa4>)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4f5e:	2018      	movs	r0, #24
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4f60:	4b21      	ldr	r3, [pc, #132]	; (4fe8 <nvm_execute_command+0xa8>)
    4f62:	18cb      	adds	r3, r1, r3
    4f64:	4293      	cmp	r3, r2
    4f66:	d80e      	bhi.n	4f86 <nvm_execute_command+0x46>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    4f68:	4b20      	ldr	r3, [pc, #128]	; (4fec <nvm_execute_command+0xac>)
    4f6a:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    4f6c:	2280      	movs	r2, #128	; 0x80
    4f6e:	02d2      	lsls	r2, r2, #11
    4f70:	432a      	orrs	r2, r5
    4f72:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4f74:	2220      	movs	r2, #32
    4f76:	32ff      	adds	r2, #255	; 0xff
    4f78:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    4f7a:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    4f7c:	07db      	lsls	r3, r3, #31
    4f7e:	d403      	bmi.n	4f88 <nvm_execute_command+0x48>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    4f80:	4b1a      	ldr	r3, [pc, #104]	; (4fec <nvm_execute_command+0xac>)
    4f82:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
    4f84:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    4f86:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    4f88:	2c45      	cmp	r4, #69	; 0x45
    4f8a:	d822      	bhi.n	4fd2 <nvm_execute_command+0x92>
    4f8c:	00a3      	lsls	r3, r4, #2
    4f8e:	4a18      	ldr	r2, [pc, #96]	; (4ff0 <nvm_execute_command+0xb0>)
    4f90:	58d3      	ldr	r3, [r2, r3]
    4f92:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    4f94:	4b15      	ldr	r3, [pc, #84]	; (4fec <nvm_execute_command+0xac>)
    4f96:	8b1b      	ldrh	r3, [r3, #24]
    4f98:	05db      	lsls	r3, r3, #23
    4f9a:	d503      	bpl.n	4fa4 <nvm_execute_command+0x64>
				nvm_module->CTRLB.reg = ctrlb_bak;
    4f9c:	4b13      	ldr	r3, [pc, #76]	; (4fec <nvm_execute_command+0xac>)
    4f9e:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
    4fa0:	2010      	movs	r0, #16
    4fa2:	e7f0      	b.n	4f86 <nvm_execute_command+0x46>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    4fa4:	0889      	lsrs	r1, r1, #2
    4fa6:	0049      	lsls	r1, r1, #1
    4fa8:	4b10      	ldr	r3, [pc, #64]	; (4fec <nvm_execute_command+0xac>)
    4faa:	61d9      	str	r1, [r3, #28]
			break;
    4fac:	e003      	b.n	4fb6 <nvm_execute_command+0x76>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    4fae:	0889      	lsrs	r1, r1, #2
    4fb0:	0049      	lsls	r1, r1, #1
    4fb2:	4b0e      	ldr	r3, [pc, #56]	; (4fec <nvm_execute_command+0xac>)
    4fb4:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    4fb6:	20a5      	movs	r0, #165	; 0xa5
    4fb8:	0200      	lsls	r0, r0, #8
    4fba:	4304      	orrs	r4, r0
    4fbc:	4b0b      	ldr	r3, [pc, #44]	; (4fec <nvm_execute_command+0xac>)
    4fbe:	801c      	strh	r4, [r3, #0]
    4fc0:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    4fc2:	2201      	movs	r2, #1
    4fc4:	7d0b      	ldrb	r3, [r1, #20]
    4fc6:	4213      	tst	r3, r2
    4fc8:	d0fc      	beq.n	4fc4 <nvm_execute_command+0x84>
	nvm_module->CTRLB.reg = ctrlb_bak;
    4fca:	4b08      	ldr	r3, [pc, #32]	; (4fec <nvm_execute_command+0xac>)
    4fcc:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
    4fce:	2000      	movs	r0, #0
    4fd0:	e7d9      	b.n	4f86 <nvm_execute_command+0x46>
			nvm_module->CTRLB.reg = ctrlb_bak;
    4fd2:	4b06      	ldr	r3, [pc, #24]	; (4fec <nvm_execute_command+0xac>)
    4fd4:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    4fd6:	2017      	movs	r0, #23
    4fd8:	e7d5      	b.n	4f86 <nvm_execute_command+0x46>
    4fda:	46c0      	nop			; (mov r8, r8)
    4fdc:	200002c0 	.word	0x200002c0
    4fe0:	ff7fc000 	.word	0xff7fc000
    4fe4:	00001fff 	.word	0x00001fff
    4fe8:	ffc00000 	.word	0xffc00000
    4fec:	41004000 	.word	0x41004000
    4ff0:	00016708 	.word	0x00016708

00004ff4 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    4ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    4ff6:	4b2f      	ldr	r3, [pc, #188]	; (50b4 <nvm_write_buffer+0xc0>)
    4ff8:	881c      	ldrh	r4, [r3, #0]
    4ffa:	885b      	ldrh	r3, [r3, #2]
    4ffc:	4363      	muls	r3, r4
	if (destination_address >
    4ffe:	4283      	cmp	r3, r0
    5000:	d207      	bcs.n	5012 <nvm_write_buffer+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    5002:	4e2d      	ldr	r6, [pc, #180]	; (50b8 <nvm_write_buffer+0xc4>)
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    5004:	2518      	movs	r5, #24
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    5006:	4b2d      	ldr	r3, [pc, #180]	; (50bc <nvm_write_buffer+0xc8>)
    5008:	18c3      	adds	r3, r0, r3
    500a:	42b3      	cmp	r3, r6
    500c:	d806      	bhi.n	501c <nvm_write_buffer+0x28>
		}
		is_rww_eeprom = true;
    500e:	2601      	movs	r6, #1
    5010:	e000      	b.n	5014 <nvm_write_buffer+0x20>
	bool is_rww_eeprom = false;
    5012:	2600      	movs	r6, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    5014:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
    5016:	2518      	movs	r5, #24
	if (destination_address & (_nvm_dev.page_size - 1)) {
    5018:	4218      	tst	r0, r3
    501a:	d001      	beq.n	5020 <nvm_write_buffer+0x2c>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    501c:	0028      	movs	r0, r5
    501e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    5020:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
    5022:	4294      	cmp	r4, r2
    5024:	d3fa      	bcc.n	501c <nvm_write_buffer+0x28>
    5026:	4b26      	ldr	r3, [pc, #152]	; (50c0 <nvm_write_buffer+0xcc>)
    5028:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    502a:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
    502c:	07db      	lsls	r3, r3, #31
    502e:	d5f5      	bpl.n	501c <nvm_write_buffer+0x28>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    5030:	4c24      	ldr	r4, [pc, #144]	; (50c4 <nvm_write_buffer+0xd0>)
    5032:	4b23      	ldr	r3, [pc, #140]	; (50c0 <nvm_write_buffer+0xcc>)
    5034:	801c      	strh	r4, [r3, #0]
    5036:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    5038:	2401      	movs	r4, #1
    503a:	7d2b      	ldrb	r3, [r5, #20]
    503c:	4223      	tst	r3, r4
    503e:	d0fc      	beq.n	503a <nvm_write_buffer+0x46>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    5040:	2420      	movs	r4, #32
    5042:	34ff      	adds	r4, #255	; 0xff
    5044:	4b1e      	ldr	r3, [pc, #120]	; (50c0 <nvm_write_buffer+0xcc>)
    5046:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    5048:	2a00      	cmp	r2, #0
    504a:	d02c      	beq.n	50a6 <nvm_write_buffer+0xb2>
    504c:	2301      	movs	r3, #1
    504e:	0005      	movs	r5, r0
    5050:	439d      	bics	r5, r3
    5052:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    5054:	1e54      	subs	r4, r2, #1
    5056:	46a4      	mov	ip, r4
    5058:	e009      	b.n	506e <nvm_write_buffer+0x7a>
			data |= (buffer[i + 1] << 8);
    505a:	18cf      	adds	r7, r1, r3
    505c:	787f      	ldrb	r7, [r7, #1]
    505e:	023f      	lsls	r7, r7, #8
    5060:	433c      	orrs	r4, r7
		NVM_MEMORY[nvm_address++] = data;
    5062:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    5064:	3302      	adds	r3, #2
    5066:	b29b      	uxth	r3, r3
    5068:	3502      	adds	r5, #2
    506a:	429a      	cmp	r2, r3
    506c:	d904      	bls.n	5078 <nvm_write_buffer+0x84>
		data = buffer[i];
    506e:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    5070:	4563      	cmp	r3, ip
    5072:	dbf2      	blt.n	505a <nvm_write_buffer+0x66>
		data = buffer[i];
    5074:	b2a4      	uxth	r4, r4
    5076:	e7f4      	b.n	5062 <nvm_write_buffer+0x6e>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    5078:	4b0e      	ldr	r3, [pc, #56]	; (50b4 <nvm_write_buffer+0xc0>)
    507a:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    507c:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    507e:	2b00      	cmp	r3, #0
    5080:	d1cc      	bne.n	501c <nvm_write_buffer+0x28>
    5082:	2a3f      	cmp	r2, #63	; 0x3f
    5084:	d8ca      	bhi.n	501c <nvm_write_buffer+0x28>
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
    5086:	2e00      	cmp	r6, #0
    5088:	d106      	bne.n	5098 <nvm_write_buffer+0xa4>
    508a:	2200      	movs	r2, #0
    508c:	0001      	movs	r1, r0
    508e:	2004      	movs	r0, #4
    5090:	4b0d      	ldr	r3, [pc, #52]	; (50c8 <nvm_write_buffer+0xd4>)
    5092:	4798      	blx	r3
    5094:	0005      	movs	r5, r0
    5096:	e7c1      	b.n	501c <nvm_write_buffer+0x28>
    5098:	2200      	movs	r2, #0
    509a:	0001      	movs	r1, r0
    509c:	201c      	movs	r0, #28
    509e:	4b0a      	ldr	r3, [pc, #40]	; (50c8 <nvm_write_buffer+0xd4>)
    50a0:	4798      	blx	r3
    50a2:	0005      	movs	r5, r0
    50a4:	e7ba      	b.n	501c <nvm_write_buffer+0x28>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    50a6:	4b03      	ldr	r3, [pc, #12]	; (50b4 <nvm_write_buffer+0xc0>)
    50a8:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    50aa:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    50ac:	2b00      	cmp	r3, #0
    50ae:	d0ea      	beq.n	5086 <nvm_write_buffer+0x92>
    50b0:	e7b4      	b.n	501c <nvm_write_buffer+0x28>
    50b2:	46c0      	nop			; (mov r8, r8)
    50b4:	200002c0 	.word	0x200002c0
    50b8:	00001fff 	.word	0x00001fff
    50bc:	ffc00000 	.word	0xffc00000
    50c0:	41004000 	.word	0x41004000
    50c4:	ffffa544 	.word	0xffffa544
    50c8:	00004f41 	.word	0x00004f41

000050cc <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    50cc:	b510      	push	{r4, lr}
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    50ce:	4a1b      	ldr	r2, [pc, #108]	; (513c <nvm_erase_row+0x70>)
    50d0:	8813      	ldrh	r3, [r2, #0]
    50d2:	8852      	ldrh	r2, [r2, #2]
    50d4:	435a      	muls	r2, r3
	if (row_address >
    50d6:	4282      	cmp	r2, r0
    50d8:	d207      	bcs.n	50ea <nvm_erase_row+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    50da:	4c19      	ldr	r4, [pc, #100]	; (5140 <nvm_erase_row+0x74>)
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    50dc:	2218      	movs	r2, #24
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    50de:	4919      	ldr	r1, [pc, #100]	; (5144 <nvm_erase_row+0x78>)
    50e0:	1841      	adds	r1, r0, r1
    50e2:	42a1      	cmp	r1, r4
    50e4:	d807      	bhi.n	50f6 <nvm_erase_row+0x2a>
		}
		is_rww_eeprom = true;
    50e6:	2101      	movs	r1, #1
    50e8:	e000      	b.n	50ec <nvm_erase_row+0x20>
		bool is_rww_eeprom = false;
    50ea:	2100      	movs	r1, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    50ec:	009b      	lsls	r3, r3, #2
    50ee:	3b01      	subs	r3, #1
		return STATUS_ERR_BAD_ADDRESS;
    50f0:	2218      	movs	r2, #24
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    50f2:	4218      	tst	r0, r3
    50f4:	d001      	beq.n	50fa <nvm_erase_row+0x2e>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    50f6:	0010      	movs	r0, r2
    50f8:	bd10      	pop	{r4, pc}
    50fa:	4b13      	ldr	r3, [pc, #76]	; (5148 <nvm_erase_row+0x7c>)
    50fc:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    50fe:	3a13      	subs	r2, #19
	if (!nvm_is_ready()) {
    5100:	07db      	lsls	r3, r3, #31
    5102:	d5f8      	bpl.n	50f6 <nvm_erase_row+0x2a>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    5104:	4b10      	ldr	r3, [pc, #64]	; (5148 <nvm_erase_row+0x7c>)
    5106:	2220      	movs	r2, #32
    5108:	32ff      	adds	r2, #255	; 0xff
    510a:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    510c:	0880      	lsrs	r0, r0, #2
    510e:	0040      	lsls	r0, r0, #1
    5110:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
    5112:	2900      	cmp	r1, #0
    5114:	d10f      	bne.n	5136 <nvm_erase_row+0x6a>
    5116:	4a0d      	ldr	r2, [pc, #52]	; (514c <nvm_erase_row+0x80>)
    5118:	4b0b      	ldr	r3, [pc, #44]	; (5148 <nvm_erase_row+0x7c>)
    511a:	801a      	strh	r2, [r3, #0]
    511c:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    511e:	2201      	movs	r2, #1
    5120:	7d0b      	ldrb	r3, [r1, #20]
    5122:	4213      	tst	r3, r2
    5124:	d0fc      	beq.n	5120 <nvm_erase_row+0x54>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    5126:	4b08      	ldr	r3, [pc, #32]	; (5148 <nvm_erase_row+0x7c>)
    5128:	8b1a      	ldrh	r2, [r3, #24]
    512a:	201c      	movs	r0, #28
    512c:	4002      	ands	r2, r0
	return STATUS_OK;
    512e:	1e50      	subs	r0, r2, #1
    5130:	4182      	sbcs	r2, r0
    5132:	0092      	lsls	r2, r2, #2
    5134:	e7df      	b.n	50f6 <nvm_erase_row+0x2a>
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
    5136:	4a06      	ldr	r2, [pc, #24]	; (5150 <nvm_erase_row+0x84>)
    5138:	e7ee      	b.n	5118 <nvm_erase_row+0x4c>
    513a:	46c0      	nop			; (mov r8, r8)
    513c:	200002c0 	.word	0x200002c0
    5140:	00001fff 	.word	0x00001fff
    5144:	ffc00000 	.word	0xffc00000
    5148:	41004000 	.word	0x41004000
    514c:	0000a502 	.word	0x0000a502
    5150:	0000a51a 	.word	0x0000a51a

00005154 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    5154:	b500      	push	{lr}
    5156:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5158:	ab01      	add	r3, sp, #4
    515a:	2280      	movs	r2, #128	; 0x80
    515c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    515e:	780a      	ldrb	r2, [r1, #0]
    5160:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    5162:	784a      	ldrb	r2, [r1, #1]
    5164:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    5166:	788a      	ldrb	r2, [r1, #2]
    5168:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    516a:	0019      	movs	r1, r3
    516c:	4b01      	ldr	r3, [pc, #4]	; (5174 <port_pin_set_config+0x20>)
    516e:	4798      	blx	r3
}
    5170:	b003      	add	sp, #12
    5172:	bd00      	pop	{pc}
    5174:	00006b45 	.word	0x00006b45

00005178 <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    5178:	6803      	ldr	r3, [r0, #0]

	if (rtc_module->MODE0.SYNCBUSY.reg) {
    517a:	6918      	ldr	r0, [r3, #16]
    517c:	1e43      	subs	r3, r0, #1
    517e:	4198      	sbcs	r0, r3
    5180:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
    5182:	4770      	bx	lr

00005184 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
    5184:	b570      	push	{r4, r5, r6, lr}
    5186:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    5188:	6806      	ldr	r6, [r0, #0]

	/* Initialize return value. */
	uint32_t ret_val;

	while (rtc_count_is_syncing(module)) {
    518a:	4d08      	ldr	r5, [pc, #32]	; (51ac <rtc_count_get_count+0x28>)
    518c:	0020      	movs	r0, r4
    518e:	47a8      	blx	r5
    5190:	2800      	cmp	r0, #0
    5192:	d1fb      	bne.n	518c <rtc_count_get_count+0x8>
		/* Wait for synchronization */
	}

	/* Read value based on mode. */
	switch (module->mode) {
    5194:	7923      	ldrb	r3, [r4, #4]
    5196:	2b00      	cmp	r3, #0
    5198:	d004      	beq.n	51a4 <rtc_count_get_count+0x20>
			break;

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
    519a:	2000      	movs	r0, #0
	switch (module->mode) {
    519c:	2b01      	cmp	r3, #1
    519e:	d100      	bne.n	51a2 <rtc_count_get_count+0x1e>
			ret_val = rtc_module->MODE0.COUNT.reg;
    51a0:	69b0      	ldr	r0, [r6, #24]
			break;
	}

	return ret_val;
}
    51a2:	bd70      	pop	{r4, r5, r6, pc}
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
    51a4:	8b30      	ldrh	r0, [r6, #24]
    51a6:	b280      	uxth	r0, r0
			break;
    51a8:	e7fb      	b.n	51a2 <rtc_count_get_count+0x1e>
    51aa:	46c0      	nop			; (mov r8, r8)
    51ac:	00005179 	.word	0x00005179

000051b0 <rtc_count_disable_callback>:
 * \param[in]     callback_type Callback type to disable
 */
void rtc_count_disable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    51b0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    51b2:	6802      	ldr	r2, [r0, #0]

	/* Disable interrupt */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    51b4:	290a      	cmp	r1, #10
    51b6:	d010      	beq.n	51da <rtc_count_disable_callback+0x2a>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if(callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    51b8:	2907      	cmp	r1, #7
    51ba:	d911      	bls.n	51e0 <rtc_count_disable_callback+0x30>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7){
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
	}else {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    51bc:	2380      	movs	r3, #128	; 0x80
    51be:	005b      	lsls	r3, r3, #1
    51c0:	000c      	movs	r4, r1
    51c2:	3c08      	subs	r4, #8
    51c4:	40a3      	lsls	r3, r4
    51c6:	24c0      	movs	r4, #192	; 0xc0
    51c8:	00a4      	lsls	r4, r4, #2
    51ca:	4023      	ands	r3, r4
    51cc:	8113      	strh	r3, [r2, #8]
	}

	/* Mark callback as disabled. */
	module->enabled_callback &= ~(1 << callback_type);
    51ce:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    51d0:	2201      	movs	r2, #1
    51d2:	408a      	lsls	r2, r1
    51d4:	4393      	bics	r3, r2
    51d6:	86c3      	strh	r3, [r0, #54]	; 0x36
}
    51d8:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
    51da:	4b04      	ldr	r3, [pc, #16]	; (51ec <rtc_count_disable_callback+0x3c>)
    51dc:	8113      	strh	r3, [r2, #8]
    51de:	e7f6      	b.n	51ce <rtc_count_disable_callback+0x1e>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
    51e0:	2401      	movs	r4, #1
    51e2:	408c      	lsls	r4, r1
    51e4:	23ff      	movs	r3, #255	; 0xff
    51e6:	4023      	ands	r3, r4
    51e8:	8113      	strh	r3, [r2, #8]
    51ea:	e7f0      	b.n	51ce <rtc_count_disable_callback+0x1e>
    51ec:	ffff8000 	.word	0xffff8000

000051f0 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    51f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    51f2:	46de      	mov	lr, fp
    51f4:	4657      	mov	r7, sl
    51f6:	464e      	mov	r6, r9
    51f8:	4645      	mov	r5, r8
    51fa:	b5e0      	push	{r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    51fc:	4b2b      	ldr	r3, [pc, #172]	; (52ac <RTC_Handler+0xbc>)
    51fe:	681b      	ldr	r3, [r3, #0]
    5200:	469a      	mov	sl, r3
	Rtc *const rtc_module = module->hw;
    5202:	681e      	ldr	r6, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
    5204:	8edb      	ldrh	r3, [r3, #54]	; 0x36
	callback_mask &= module->registered_callback;
    5206:	4652      	mov	r2, sl
    5208:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    520a:	401a      	ands	r2, r3
    520c:	4690      	mov	r8, r2
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    520e:	89b2      	ldrh	r2, [r6, #12]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    5210:	8973      	ldrh	r3, [r6, #10]
    5212:	4013      	ands	r3, r2
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    5214:	b21a      	sxth	r2, r3
    5216:	2a00      	cmp	r2, #0
    5218:	db08      	blt.n	522c <RTC_Handler+0x3c>
    521a:	27ff      	movs	r7, #255	; 0xff
    521c:	401f      	ands	r7, r3
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
    521e:	d02a      	beq.n	5276 <RTC_Handler+0x86>
    5220:	2400      	movs	r4, #0
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    5222:	2301      	movs	r3, #1
    5224:	4699      	mov	r9, r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    5226:	33fe      	adds	r3, #254	; 0xfe
    5228:	469b      	mov	fp, r3
    522a:	e014      	b.n	5256 <RTC_Handler+0x66>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    522c:	4643      	mov	r3, r8
    522e:	055b      	lsls	r3, r3, #21
    5230:	d407      	bmi.n	5242 <RTC_Handler+0x52>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    5232:	4b1f      	ldr	r3, [pc, #124]	; (52b0 <RTC_Handler+0xc0>)
    5234:	81b3      	strh	r3, [r6, #12]
	_rtc_interrupt_handler(0);
}
    5236:	bc3c      	pop	{r2, r3, r4, r5}
    5238:	4690      	mov	r8, r2
    523a:	4699      	mov	r9, r3
    523c:	46a2      	mov	sl, r4
    523e:	46ab      	mov	fp, r5
    5240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    5242:	4653      	mov	r3, sl
    5244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5246:	4798      	blx	r3
    5248:	e7f3      	b.n	5232 <RTC_Handler+0x42>
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    524a:	465b      	mov	r3, fp
    524c:	401d      	ands	r5, r3
    524e:	81b5      	strh	r5, [r6, #12]
    5250:	3401      	adds	r4, #1
		for ( i = 0;i < RTC_PER_NUM;i++) {
    5252:	2c08      	cmp	r4, #8
    5254:	d0ef      	beq.n	5236 <RTC_Handler+0x46>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    5256:	0023      	movs	r3, r4
    5258:	464d      	mov	r5, r9
    525a:	40a5      	lsls	r5, r4
    525c:	422f      	tst	r7, r5
    525e:	d0f4      	beq.n	524a <RTC_Handler+0x5a>
			  && (callback_mask & (1 << i))) {
    5260:	4642      	mov	r2, r8
    5262:	4122      	asrs	r2, r4
    5264:	4649      	mov	r1, r9
    5266:	4211      	tst	r1, r2
    5268:	d0ef      	beq.n	524a <RTC_Handler+0x5a>
				module->callbacks[i]();
    526a:	3302      	adds	r3, #2
    526c:	009b      	lsls	r3, r3, #2
    526e:	4652      	mov	r2, sl
    5270:	589b      	ldr	r3, [r3, r2]
    5272:	4798      	blx	r3
    5274:	e7e9      	b.n	524a <RTC_Handler+0x5a>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    5276:	05da      	lsls	r2, r3, #23
    5278:	d50a      	bpl.n	5290 <RTC_Handler+0xa0>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    527a:	4643      	mov	r3, r8
    527c:	05db      	lsls	r3, r3, #23
    527e:	d403      	bmi.n	5288 <RTC_Handler+0x98>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    5280:	2380      	movs	r3, #128	; 0x80
    5282:	005b      	lsls	r3, r3, #1
    5284:	81b3      	strh	r3, [r6, #12]
    5286:	e7d6      	b.n	5236 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    5288:	4653      	mov	r3, sl
    528a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    528c:	4798      	blx	r3
    528e:	e7f7      	b.n	5280 <RTC_Handler+0x90>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    5290:	059b      	lsls	r3, r3, #22
    5292:	d5d0      	bpl.n	5236 <RTC_Handler+0x46>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    5294:	4643      	mov	r3, r8
    5296:	059b      	lsls	r3, r3, #22
    5298:	d403      	bmi.n	52a2 <RTC_Handler+0xb2>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    529a:	2380      	movs	r3, #128	; 0x80
    529c:	009b      	lsls	r3, r3, #2
    529e:	81b3      	strh	r3, [r6, #12]
}
    52a0:	e7c9      	b.n	5236 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    52a2:	4653      	mov	r3, sl
    52a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    52a6:	4798      	blx	r3
    52a8:	e7f7      	b.n	529a <RTC_Handler+0xaa>
    52aa:	46c0      	nop			; (mov r8, r8)
    52ac:	200020ec 	.word	0x200020ec
    52b0:	ffff8000 	.word	0xffff8000

000052b4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    52b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    52b6:	46de      	mov	lr, fp
    52b8:	4657      	mov	r7, sl
    52ba:	464e      	mov	r6, r9
    52bc:	4645      	mov	r5, r8
    52be:	b5e0      	push	{r5, r6, r7, lr}
    52c0:	b087      	sub	sp, #28
    52c2:	4680      	mov	r8, r0
    52c4:	9104      	str	r1, [sp, #16]
    52c6:	0016      	movs	r6, r2
    52c8:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    52ca:	2200      	movs	r2, #0
    52cc:	2300      	movs	r3, #0
    52ce:	2100      	movs	r1, #0
    52d0:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    52d2:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    52d4:	2001      	movs	r0, #1
    52d6:	0021      	movs	r1, r4
    52d8:	9600      	str	r6, [sp, #0]
    52da:	9701      	str	r7, [sp, #4]
    52dc:	465c      	mov	r4, fp
    52de:	9403      	str	r4, [sp, #12]
    52e0:	4644      	mov	r4, r8
    52e2:	9405      	str	r4, [sp, #20]
    52e4:	e013      	b.n	530e <long_division+0x5a>
    52e6:	2420      	movs	r4, #32
    52e8:	1a64      	subs	r4, r4, r1
    52ea:	0005      	movs	r5, r0
    52ec:	40e5      	lsrs	r5, r4
    52ee:	46a8      	mov	r8, r5
    52f0:	e014      	b.n	531c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    52f2:	9c00      	ldr	r4, [sp, #0]
    52f4:	9d01      	ldr	r5, [sp, #4]
    52f6:	1b12      	subs	r2, r2, r4
    52f8:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    52fa:	465c      	mov	r4, fp
    52fc:	464d      	mov	r5, r9
    52fe:	432c      	orrs	r4, r5
    5300:	46a3      	mov	fp, r4
    5302:	9c03      	ldr	r4, [sp, #12]
    5304:	4645      	mov	r5, r8
    5306:	432c      	orrs	r4, r5
    5308:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    530a:	3901      	subs	r1, #1
    530c:	d325      	bcc.n	535a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    530e:	2420      	movs	r4, #32
    5310:	4264      	negs	r4, r4
    5312:	190c      	adds	r4, r1, r4
    5314:	d4e7      	bmi.n	52e6 <long_division+0x32>
    5316:	0005      	movs	r5, r0
    5318:	40a5      	lsls	r5, r4
    531a:	46a8      	mov	r8, r5
    531c:	0004      	movs	r4, r0
    531e:	408c      	lsls	r4, r1
    5320:	46a1      	mov	r9, r4
		r = r << 1;
    5322:	1892      	adds	r2, r2, r2
    5324:	415b      	adcs	r3, r3
    5326:	0014      	movs	r4, r2
    5328:	001d      	movs	r5, r3
		if (n & bit_shift) {
    532a:	9e05      	ldr	r6, [sp, #20]
    532c:	464f      	mov	r7, r9
    532e:	403e      	ands	r6, r7
    5330:	46b4      	mov	ip, r6
    5332:	9e04      	ldr	r6, [sp, #16]
    5334:	4647      	mov	r7, r8
    5336:	403e      	ands	r6, r7
    5338:	46b2      	mov	sl, r6
    533a:	4666      	mov	r6, ip
    533c:	4657      	mov	r7, sl
    533e:	433e      	orrs	r6, r7
    5340:	d003      	beq.n	534a <long_division+0x96>
			r |= 0x01;
    5342:	0006      	movs	r6, r0
    5344:	4326      	orrs	r6, r4
    5346:	0032      	movs	r2, r6
    5348:	002b      	movs	r3, r5
		if (r >= d) {
    534a:	9c00      	ldr	r4, [sp, #0]
    534c:	9d01      	ldr	r5, [sp, #4]
    534e:	429d      	cmp	r5, r3
    5350:	d8db      	bhi.n	530a <long_division+0x56>
    5352:	d1ce      	bne.n	52f2 <long_division+0x3e>
    5354:	4294      	cmp	r4, r2
    5356:	d8d8      	bhi.n	530a <long_division+0x56>
    5358:	e7cb      	b.n	52f2 <long_division+0x3e>
    535a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    535c:	4658      	mov	r0, fp
    535e:	0019      	movs	r1, r3
    5360:	b007      	add	sp, #28
    5362:	bc3c      	pop	{r2, r3, r4, r5}
    5364:	4690      	mov	r8, r2
    5366:	4699      	mov	r9, r3
    5368:	46a2      	mov	sl, r4
    536a:	46ab      	mov	fp, r5
    536c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000536e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    536e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    5370:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5372:	2340      	movs	r3, #64	; 0x40
    5374:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    5376:	4281      	cmp	r1, r0
    5378:	d202      	bcs.n	5380 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    537a:	0018      	movs	r0, r3
    537c:	bd10      	pop	{r4, pc}
		baud_calculated++;
    537e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    5380:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    5382:	1c63      	adds	r3, r4, #1
    5384:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    5386:	4288      	cmp	r0, r1
    5388:	d9f9      	bls.n	537e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    538a:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    538c:	2cff      	cmp	r4, #255	; 0xff
    538e:	d8f4      	bhi.n	537a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    5390:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    5392:	2300      	movs	r3, #0
    5394:	e7f1      	b.n	537a <_sercom_get_sync_baud_val+0xc>
    5396:	Address 0x00005396 is out of bounds.


00005398 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    5398:	b5f0      	push	{r4, r5, r6, r7, lr}
    539a:	b083      	sub	sp, #12
    539c:	000f      	movs	r7, r1
    539e:	0016      	movs	r6, r2
    53a0:	aa08      	add	r2, sp, #32
    53a2:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    53a4:	0004      	movs	r4, r0
    53a6:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    53a8:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    53aa:	42bc      	cmp	r4, r7
    53ac:	d902      	bls.n	53b4 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    53ae:	0010      	movs	r0, r2
    53b0:	b003      	add	sp, #12
    53b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    53b4:	2b00      	cmp	r3, #0
    53b6:	d114      	bne.n	53e2 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    53b8:	0002      	movs	r2, r0
    53ba:	0008      	movs	r0, r1
    53bc:	2100      	movs	r1, #0
    53be:	4c19      	ldr	r4, [pc, #100]	; (5424 <_sercom_get_async_baud_val+0x8c>)
    53c0:	47a0      	blx	r4
    53c2:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    53c4:	003a      	movs	r2, r7
    53c6:	2300      	movs	r3, #0
    53c8:	2000      	movs	r0, #0
    53ca:	4c17      	ldr	r4, [pc, #92]	; (5428 <_sercom_get_async_baud_val+0x90>)
    53cc:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    53ce:	2200      	movs	r2, #0
    53d0:	2301      	movs	r3, #1
    53d2:	1a12      	subs	r2, r2, r0
    53d4:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    53d6:	0c12      	lsrs	r2, r2, #16
    53d8:	041b      	lsls	r3, r3, #16
    53da:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    53dc:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    53de:	2200      	movs	r2, #0
    53e0:	e7e5      	b.n	53ae <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    53e2:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    53e4:	2b01      	cmp	r3, #1
    53e6:	d1f9      	bne.n	53dc <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    53e8:	000a      	movs	r2, r1
    53ea:	2300      	movs	r3, #0
    53ec:	2100      	movs	r1, #0
    53ee:	4c0d      	ldr	r4, [pc, #52]	; (5424 <_sercom_get_async_baud_val+0x8c>)
    53f0:	47a0      	blx	r4
    53f2:	0002      	movs	r2, r0
    53f4:	000b      	movs	r3, r1
    53f6:	9200      	str	r2, [sp, #0]
    53f8:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    53fa:	0038      	movs	r0, r7
    53fc:	2100      	movs	r1, #0
    53fe:	4c0a      	ldr	r4, [pc, #40]	; (5428 <_sercom_get_async_baud_val+0x90>)
    5400:	47a0      	blx	r4
    5402:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    5404:	2380      	movs	r3, #128	; 0x80
    5406:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5408:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    540a:	4298      	cmp	r0, r3
    540c:	d8cf      	bhi.n	53ae <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    540e:	0f79      	lsrs	r1, r7, #29
    5410:	00f8      	lsls	r0, r7, #3
    5412:	9a00      	ldr	r2, [sp, #0]
    5414:	9b01      	ldr	r3, [sp, #4]
    5416:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    5418:	00ea      	lsls	r2, r5, #3
    541a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    541c:	b2d2      	uxtb	r2, r2
    541e:	0352      	lsls	r2, r2, #13
    5420:	432a      	orrs	r2, r5
    5422:	e7db      	b.n	53dc <_sercom_get_async_baud_val+0x44>
    5424:	00011f1d 	.word	0x00011f1d
    5428:	000052b5 	.word	0x000052b5

0000542c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    542c:	b510      	push	{r4, lr}
    542e:	b082      	sub	sp, #8
    5430:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    5432:	4b0e      	ldr	r3, [pc, #56]	; (546c <sercom_set_gclk_generator+0x40>)
    5434:	781b      	ldrb	r3, [r3, #0]
    5436:	2b00      	cmp	r3, #0
    5438:	d007      	beq.n	544a <sercom_set_gclk_generator+0x1e>
    543a:	2900      	cmp	r1, #0
    543c:	d105      	bne.n	544a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    543e:	4b0b      	ldr	r3, [pc, #44]	; (546c <sercom_set_gclk_generator+0x40>)
    5440:	785b      	ldrb	r3, [r3, #1]
    5442:	4283      	cmp	r3, r0
    5444:	d010      	beq.n	5468 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    5446:	201d      	movs	r0, #29
    5448:	e00c      	b.n	5464 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    544a:	a901      	add	r1, sp, #4
    544c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    544e:	2011      	movs	r0, #17
    5450:	4b07      	ldr	r3, [pc, #28]	; (5470 <sercom_set_gclk_generator+0x44>)
    5452:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    5454:	2011      	movs	r0, #17
    5456:	4b07      	ldr	r3, [pc, #28]	; (5474 <sercom_set_gclk_generator+0x48>)
    5458:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    545a:	4b04      	ldr	r3, [pc, #16]	; (546c <sercom_set_gclk_generator+0x40>)
    545c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    545e:	2201      	movs	r2, #1
    5460:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    5462:	2000      	movs	r0, #0
}
    5464:	b002      	add	sp, #8
    5466:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    5468:	2000      	movs	r0, #0
    546a:	e7fb      	b.n	5464 <sercom_set_gclk_generator+0x38>
    546c:	200002c8 	.word	0x200002c8
    5470:	00006a49 	.word	0x00006a49
    5474:	000069d9 	.word	0x000069d9

00005478 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    5478:	4b3c      	ldr	r3, [pc, #240]	; (556c <_sercom_get_default_pad+0xf4>)
    547a:	4298      	cmp	r0, r3
    547c:	d032      	beq.n	54e4 <_sercom_get_default_pad+0x6c>
    547e:	d90a      	bls.n	5496 <_sercom_get_default_pad+0x1e>
    5480:	4b3b      	ldr	r3, [pc, #236]	; (5570 <_sercom_get_default_pad+0xf8>)
    5482:	4298      	cmp	r0, r3
    5484:	d04e      	beq.n	5524 <_sercom_get_default_pad+0xac>
    5486:	4b3b      	ldr	r3, [pc, #236]	; (5574 <_sercom_get_default_pad+0xfc>)
    5488:	4298      	cmp	r0, r3
    548a:	d055      	beq.n	5538 <_sercom_get_default_pad+0xc0>
    548c:	4b3a      	ldr	r3, [pc, #232]	; (5578 <_sercom_get_default_pad+0x100>)
    548e:	4298      	cmp	r0, r3
    5490:	d038      	beq.n	5504 <_sercom_get_default_pad+0x8c>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    5492:	2000      	movs	r0, #0
}
    5494:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    5496:	2384      	movs	r3, #132	; 0x84
    5498:	05db      	lsls	r3, r3, #23
    549a:	4298      	cmp	r0, r3
    549c:	d00c      	beq.n	54b8 <_sercom_get_default_pad+0x40>
    549e:	4b37      	ldr	r3, [pc, #220]	; (557c <_sercom_get_default_pad+0x104>)
    54a0:	4298      	cmp	r0, r3
    54a2:	d1f6      	bne.n	5492 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    54a4:	2901      	cmp	r1, #1
    54a6:	d017      	beq.n	54d8 <_sercom_get_default_pad+0x60>
    54a8:	2900      	cmp	r1, #0
    54aa:	d057      	beq.n	555c <_sercom_get_default_pad+0xe4>
    54ac:	2902      	cmp	r1, #2
    54ae:	d015      	beq.n	54dc <_sercom_get_default_pad+0x64>
    54b0:	2903      	cmp	r1, #3
    54b2:	d015      	beq.n	54e0 <_sercom_get_default_pad+0x68>
	return 0;
    54b4:	2000      	movs	r0, #0
    54b6:	e7ed      	b.n	5494 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    54b8:	2901      	cmp	r1, #1
    54ba:	d007      	beq.n	54cc <_sercom_get_default_pad+0x54>
    54bc:	2900      	cmp	r1, #0
    54be:	d04b      	beq.n	5558 <_sercom_get_default_pad+0xe0>
    54c0:	2902      	cmp	r1, #2
    54c2:	d005      	beq.n	54d0 <_sercom_get_default_pad+0x58>
    54c4:	2903      	cmp	r1, #3
    54c6:	d005      	beq.n	54d4 <_sercom_get_default_pad+0x5c>
	return 0;
    54c8:	2000      	movs	r0, #0
    54ca:	e7e3      	b.n	5494 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    54cc:	482c      	ldr	r0, [pc, #176]	; (5580 <_sercom_get_default_pad+0x108>)
    54ce:	e7e1      	b.n	5494 <_sercom_get_default_pad+0x1c>
    54d0:	482c      	ldr	r0, [pc, #176]	; (5584 <_sercom_get_default_pad+0x10c>)
    54d2:	e7df      	b.n	5494 <_sercom_get_default_pad+0x1c>
    54d4:	482c      	ldr	r0, [pc, #176]	; (5588 <_sercom_get_default_pad+0x110>)
    54d6:	e7dd      	b.n	5494 <_sercom_get_default_pad+0x1c>
    54d8:	482c      	ldr	r0, [pc, #176]	; (558c <_sercom_get_default_pad+0x114>)
    54da:	e7db      	b.n	5494 <_sercom_get_default_pad+0x1c>
    54dc:	482c      	ldr	r0, [pc, #176]	; (5590 <_sercom_get_default_pad+0x118>)
    54de:	e7d9      	b.n	5494 <_sercom_get_default_pad+0x1c>
    54e0:	482c      	ldr	r0, [pc, #176]	; (5594 <_sercom_get_default_pad+0x11c>)
    54e2:	e7d7      	b.n	5494 <_sercom_get_default_pad+0x1c>
    54e4:	2901      	cmp	r1, #1
    54e6:	d007      	beq.n	54f8 <_sercom_get_default_pad+0x80>
    54e8:	2900      	cmp	r1, #0
    54ea:	d039      	beq.n	5560 <_sercom_get_default_pad+0xe8>
    54ec:	2902      	cmp	r1, #2
    54ee:	d005      	beq.n	54fc <_sercom_get_default_pad+0x84>
    54f0:	2903      	cmp	r1, #3
    54f2:	d005      	beq.n	5500 <_sercom_get_default_pad+0x88>
	return 0;
    54f4:	2000      	movs	r0, #0
    54f6:	e7cd      	b.n	5494 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    54f8:	4827      	ldr	r0, [pc, #156]	; (5598 <_sercom_get_default_pad+0x120>)
    54fa:	e7cb      	b.n	5494 <_sercom_get_default_pad+0x1c>
    54fc:	4827      	ldr	r0, [pc, #156]	; (559c <_sercom_get_default_pad+0x124>)
    54fe:	e7c9      	b.n	5494 <_sercom_get_default_pad+0x1c>
    5500:	4827      	ldr	r0, [pc, #156]	; (55a0 <_sercom_get_default_pad+0x128>)
    5502:	e7c7      	b.n	5494 <_sercom_get_default_pad+0x1c>
    5504:	2901      	cmp	r1, #1
    5506:	d007      	beq.n	5518 <_sercom_get_default_pad+0xa0>
    5508:	2900      	cmp	r1, #0
    550a:	d02b      	beq.n	5564 <_sercom_get_default_pad+0xec>
    550c:	2902      	cmp	r1, #2
    550e:	d005      	beq.n	551c <_sercom_get_default_pad+0xa4>
    5510:	2903      	cmp	r1, #3
    5512:	d005      	beq.n	5520 <_sercom_get_default_pad+0xa8>
	return 0;
    5514:	2000      	movs	r0, #0
    5516:	e7bd      	b.n	5494 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5518:	4822      	ldr	r0, [pc, #136]	; (55a4 <_sercom_get_default_pad+0x12c>)
    551a:	e7bb      	b.n	5494 <_sercom_get_default_pad+0x1c>
    551c:	4822      	ldr	r0, [pc, #136]	; (55a8 <_sercom_get_default_pad+0x130>)
    551e:	e7b9      	b.n	5494 <_sercom_get_default_pad+0x1c>
    5520:	4822      	ldr	r0, [pc, #136]	; (55ac <_sercom_get_default_pad+0x134>)
    5522:	e7b7      	b.n	5494 <_sercom_get_default_pad+0x1c>
    5524:	2902      	cmp	r1, #2
    5526:	d003      	beq.n	5530 <_sercom_get_default_pad+0xb8>
    5528:	2903      	cmp	r1, #3
    552a:	d003      	beq.n	5534 <_sercom_get_default_pad+0xbc>
    552c:	2000      	movs	r0, #0
    552e:	e7b1      	b.n	5494 <_sercom_get_default_pad+0x1c>
    5530:	481f      	ldr	r0, [pc, #124]	; (55b0 <_sercom_get_default_pad+0x138>)
    5532:	e7af      	b.n	5494 <_sercom_get_default_pad+0x1c>
    5534:	481f      	ldr	r0, [pc, #124]	; (55b4 <_sercom_get_default_pad+0x13c>)
    5536:	e7ad      	b.n	5494 <_sercom_get_default_pad+0x1c>
    5538:	2901      	cmp	r1, #1
    553a:	d007      	beq.n	554c <_sercom_get_default_pad+0xd4>
    553c:	2900      	cmp	r1, #0
    553e:	d013      	beq.n	5568 <_sercom_get_default_pad+0xf0>
    5540:	2902      	cmp	r1, #2
    5542:	d005      	beq.n	5550 <_sercom_get_default_pad+0xd8>
    5544:	2903      	cmp	r1, #3
    5546:	d005      	beq.n	5554 <_sercom_get_default_pad+0xdc>
	return 0;
    5548:	2000      	movs	r0, #0
    554a:	e7a3      	b.n	5494 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    554c:	481a      	ldr	r0, [pc, #104]	; (55b8 <_sercom_get_default_pad+0x140>)
    554e:	e7a1      	b.n	5494 <_sercom_get_default_pad+0x1c>
    5550:	481a      	ldr	r0, [pc, #104]	; (55bc <_sercom_get_default_pad+0x144>)
    5552:	e79f      	b.n	5494 <_sercom_get_default_pad+0x1c>
    5554:	481a      	ldr	r0, [pc, #104]	; (55c0 <_sercom_get_default_pad+0x148>)
    5556:	e79d      	b.n	5494 <_sercom_get_default_pad+0x1c>
    5558:	481a      	ldr	r0, [pc, #104]	; (55c4 <_sercom_get_default_pad+0x14c>)
    555a:	e79b      	b.n	5494 <_sercom_get_default_pad+0x1c>
    555c:	2003      	movs	r0, #3
    555e:	e799      	b.n	5494 <_sercom_get_default_pad+0x1c>
    5560:	4819      	ldr	r0, [pc, #100]	; (55c8 <_sercom_get_default_pad+0x150>)
    5562:	e797      	b.n	5494 <_sercom_get_default_pad+0x1c>
    5564:	4819      	ldr	r0, [pc, #100]	; (55cc <_sercom_get_default_pad+0x154>)
    5566:	e795      	b.n	5494 <_sercom_get_default_pad+0x1c>
    5568:	4819      	ldr	r0, [pc, #100]	; (55d0 <_sercom_get_default_pad+0x158>)
    556a:	e793      	b.n	5494 <_sercom_get_default_pad+0x1c>
    556c:	42000800 	.word	0x42000800
    5570:	42001000 	.word	0x42001000
    5574:	43000400 	.word	0x43000400
    5578:	42000c00 	.word	0x42000c00
    557c:	42000400 	.word	0x42000400
    5580:	00050003 	.word	0x00050003
    5584:	00060003 	.word	0x00060003
    5588:	00070003 	.word	0x00070003
    558c:	00010003 	.word	0x00010003
    5590:	001e0003 	.word	0x001e0003
    5594:	001f0003 	.word	0x001f0003
    5598:	00090003 	.word	0x00090003
    559c:	000a0003 	.word	0x000a0003
    55a0:	000b0003 	.word	0x000b0003
    55a4:	00110003 	.word	0x00110003
    55a8:	00120003 	.word	0x00120003
    55ac:	00130003 	.word	0x00130003
    55b0:	000e0003 	.word	0x000e0003
    55b4:	000f0003 	.word	0x000f0003
    55b8:	00170003 	.word	0x00170003
    55bc:	00180003 	.word	0x00180003
    55c0:	00190003 	.word	0x00190003
    55c4:	00040003 	.word	0x00040003
    55c8:	00080003 	.word	0x00080003
    55cc:	00100003 	.word	0x00100003
    55d0:	00160003 	.word	0x00160003

000055d4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    55d4:	b530      	push	{r4, r5, lr}
    55d6:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    55d8:	4b0b      	ldr	r3, [pc, #44]	; (5608 <_sercom_get_sercom_inst_index+0x34>)
    55da:	466a      	mov	r2, sp
    55dc:	cb32      	ldmia	r3!, {r1, r4, r5}
    55de:	c232      	stmia	r2!, {r1, r4, r5}
    55e0:	cb32      	ldmia	r3!, {r1, r4, r5}
    55e2:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    55e4:	9b00      	ldr	r3, [sp, #0]
    55e6:	4283      	cmp	r3, r0
    55e8:	d00b      	beq.n	5602 <_sercom_get_sercom_inst_index+0x2e>
    55ea:	2301      	movs	r3, #1
    55ec:	009a      	lsls	r2, r3, #2
    55ee:	4669      	mov	r1, sp
    55f0:	5852      	ldr	r2, [r2, r1]
    55f2:	4282      	cmp	r2, r0
    55f4:	d006      	beq.n	5604 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    55f6:	3301      	adds	r3, #1
    55f8:	2b06      	cmp	r3, #6
    55fa:	d1f7      	bne.n	55ec <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    55fc:	2000      	movs	r0, #0
}
    55fe:	b007      	add	sp, #28
    5600:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5602:	2300      	movs	r3, #0
			return i;
    5604:	b2d8      	uxtb	r0, r3
    5606:	e7fa      	b.n	55fe <_sercom_get_sercom_inst_index+0x2a>
    5608:	00016820 	.word	0x00016820

0000560c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    560c:	4770      	bx	lr
    560e:	Address 0x0000560e is out of bounds.


00005610 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    5610:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    5612:	4b0a      	ldr	r3, [pc, #40]	; (563c <_sercom_set_handler+0x2c>)
    5614:	781b      	ldrb	r3, [r3, #0]
    5616:	2b00      	cmp	r3, #0
    5618:	d10c      	bne.n	5634 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    561a:	4f09      	ldr	r7, [pc, #36]	; (5640 <_sercom_set_handler+0x30>)
    561c:	4e09      	ldr	r6, [pc, #36]	; (5644 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    561e:	4d0a      	ldr	r5, [pc, #40]	; (5648 <_sercom_set_handler+0x38>)
    5620:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    5622:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    5624:	195a      	adds	r2, r3, r5
    5626:	6014      	str	r4, [r2, #0]
    5628:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    562a:	2b18      	cmp	r3, #24
    562c:	d1f9      	bne.n	5622 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    562e:	2201      	movs	r2, #1
    5630:	4b02      	ldr	r3, [pc, #8]	; (563c <_sercom_set_handler+0x2c>)
    5632:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    5634:	0080      	lsls	r0, r0, #2
    5636:	4b02      	ldr	r3, [pc, #8]	; (5640 <_sercom_set_handler+0x30>)
    5638:	50c1      	str	r1, [r0, r3]
}
    563a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    563c:	200002ca 	.word	0x200002ca
    5640:	200002cc 	.word	0x200002cc
    5644:	0000560d 	.word	0x0000560d
    5648:	200020f0 	.word	0x200020f0

0000564c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    564c:	b500      	push	{lr}
    564e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    5650:	2308      	movs	r3, #8
    5652:	466a      	mov	r2, sp
    5654:	7013      	strb	r3, [r2, #0]
    5656:	3301      	adds	r3, #1
    5658:	7053      	strb	r3, [r2, #1]
    565a:	3301      	adds	r3, #1
    565c:	7093      	strb	r3, [r2, #2]
    565e:	3301      	adds	r3, #1
    5660:	70d3      	strb	r3, [r2, #3]
    5662:	3301      	adds	r3, #1
    5664:	7113      	strb	r3, [r2, #4]
    5666:	3301      	adds	r3, #1
    5668:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    566a:	4b03      	ldr	r3, [pc, #12]	; (5678 <_sercom_get_interrupt_vector+0x2c>)
    566c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    566e:	466b      	mov	r3, sp
    5670:	5618      	ldrsb	r0, [r3, r0]
}
    5672:	b003      	add	sp, #12
    5674:	bd00      	pop	{pc}
    5676:	46c0      	nop			; (mov r8, r8)
    5678:	000055d5 	.word	0x000055d5

0000567c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    567c:	b510      	push	{r4, lr}
    567e:	4b02      	ldr	r3, [pc, #8]	; (5688 <SERCOM0_Handler+0xc>)
    5680:	681b      	ldr	r3, [r3, #0]
    5682:	2000      	movs	r0, #0
    5684:	4798      	blx	r3
    5686:	bd10      	pop	{r4, pc}
    5688:	200002cc 	.word	0x200002cc

0000568c <SERCOM1_Handler>:
    568c:	b510      	push	{r4, lr}
    568e:	4b02      	ldr	r3, [pc, #8]	; (5698 <SERCOM1_Handler+0xc>)
    5690:	685b      	ldr	r3, [r3, #4]
    5692:	2001      	movs	r0, #1
    5694:	4798      	blx	r3
    5696:	bd10      	pop	{r4, pc}
    5698:	200002cc 	.word	0x200002cc

0000569c <SERCOM2_Handler>:
    569c:	b510      	push	{r4, lr}
    569e:	4b02      	ldr	r3, [pc, #8]	; (56a8 <SERCOM2_Handler+0xc>)
    56a0:	689b      	ldr	r3, [r3, #8]
    56a2:	2002      	movs	r0, #2
    56a4:	4798      	blx	r3
    56a6:	bd10      	pop	{r4, pc}
    56a8:	200002cc 	.word	0x200002cc

000056ac <SERCOM3_Handler>:
    56ac:	b510      	push	{r4, lr}
    56ae:	4b02      	ldr	r3, [pc, #8]	; (56b8 <SERCOM3_Handler+0xc>)
    56b0:	68db      	ldr	r3, [r3, #12]
    56b2:	2003      	movs	r0, #3
    56b4:	4798      	blx	r3
    56b6:	bd10      	pop	{r4, pc}
    56b8:	200002cc 	.word	0x200002cc

000056bc <SERCOM4_Handler>:
    56bc:	b510      	push	{r4, lr}
    56be:	4b02      	ldr	r3, [pc, #8]	; (56c8 <SERCOM4_Handler+0xc>)
    56c0:	691b      	ldr	r3, [r3, #16]
    56c2:	2004      	movs	r0, #4
    56c4:	4798      	blx	r3
    56c6:	bd10      	pop	{r4, pc}
    56c8:	200002cc 	.word	0x200002cc

000056cc <SERCOM5_Handler>:
    56cc:	b510      	push	{r4, lr}
    56ce:	4b02      	ldr	r3, [pc, #8]	; (56d8 <SERCOM5_Handler+0xc>)
    56d0:	695b      	ldr	r3, [r3, #20]
    56d2:	2005      	movs	r0, #5
    56d4:	4798      	blx	r3
    56d6:	bd10      	pop	{r4, pc}
    56d8:	200002cc 	.word	0x200002cc

000056dc <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    56dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    56de:	46d6      	mov	lr, sl
    56e0:	464f      	mov	r7, r9
    56e2:	4646      	mov	r6, r8
    56e4:	b5c0      	push	{r6, r7, lr}
    56e6:	b08a      	sub	sp, #40	; 0x28
    56e8:	0006      	movs	r6, r0
    56ea:	000f      	movs	r7, r1
    56ec:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    56ee:	6031      	str	r1, [r6, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    56f0:	680b      	ldr	r3, [r1, #0]
    56f2:	079b      	lsls	r3, r3, #30
    56f4:	d40a      	bmi.n	570c <spi_init+0x30>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    56f6:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    56f8:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    56fa:	07db      	lsls	r3, r3, #31
    56fc:	d400      	bmi.n	5700 <spi_init+0x24>
    56fe:	e0af      	b.n	5860 <spi_init+0x184>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    5700:	b00a      	add	sp, #40	; 0x28
    5702:	bc1c      	pop	{r2, r3, r4}
    5704:	4690      	mov	r8, r2
    5706:	4699      	mov	r9, r3
    5708:	46a2      	mov	sl, r4
    570a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    570c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    570e:	9305      	str	r3, [sp, #20]
    5710:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    5712:	9306      	str	r3, [sp, #24]
    5714:	6b13      	ldr	r3, [r2, #48]	; 0x30
    5716:	9307      	str	r3, [sp, #28]
    5718:	6b53      	ldr	r3, [r2, #52]	; 0x34
    571a:	9308      	str	r3, [sp, #32]
    571c:	2500      	movs	r5, #0
    571e:	e00a      	b.n	5736 <spi_init+0x5a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5720:	0038      	movs	r0, r7
    5722:	4bb6      	ldr	r3, [pc, #728]	; (59fc <spi_init+0x320>)
    5724:	4798      	blx	r3
    5726:	e00e      	b.n	5746 <spi_init+0x6a>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    5728:	230f      	movs	r3, #15
    572a:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    572c:	4581      	cmp	r9, r0
    572e:	d130      	bne.n	5792 <spi_init+0xb6>
    5730:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    5732:	2d04      	cmp	r5, #4
    5734:	d031      	beq.n	579a <spi_init+0xbe>
    5736:	b2e9      	uxtb	r1, r5
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5738:	00ab      	lsls	r3, r5, #2
    573a:	aa02      	add	r2, sp, #8
    573c:	200c      	movs	r0, #12
    573e:	1812      	adds	r2, r2, r0
    5740:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    5742:	2800      	cmp	r0, #0
    5744:	d0ec      	beq.n	5720 <spi_init+0x44>
		if (current_pinmux == PINMUX_UNUSED) {
    5746:	1c43      	adds	r3, r0, #1
    5748:	d0f2      	beq.n	5730 <spi_init+0x54>
		if ((current_pinmux & 0xFFFF) !=
    574a:	0401      	lsls	r1, r0, #16
    574c:	0c0b      	lsrs	r3, r1, #16
    574e:	4699      	mov	r9, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    5750:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    5752:	b2c3      	uxtb	r3, r0
    5754:	469c      	mov	ip, r3
		return NULL;
    5756:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5758:	0602      	lsls	r2, r0, #24
    575a:	d405      	bmi.n	5768 <spi_init+0x8c>
		return &(ports[port_index]->Group[group_index]);
    575c:	4663      	mov	r3, ip
    575e:	095b      	lsrs	r3, r3, #5
    5760:	01db      	lsls	r3, r3, #7
    5762:	4aa7      	ldr	r2, [pc, #668]	; (5a00 <spi_init+0x324>)
    5764:	4690      	mov	r8, r2
    5766:	4443      	add	r3, r8
	uint32_t pin_index = (gpio_pin % 32);
    5768:	221f      	movs	r2, #31
    576a:	4660      	mov	r0, ip
    576c:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    576e:	1898      	adds	r0, r3, r2
    5770:	3040      	adds	r0, #64	; 0x40
    5772:	7800      	ldrb	r0, [r0, #0]
    5774:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    5776:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    5778:	4651      	mov	r1, sl
    577a:	07c9      	lsls	r1, r1, #31
    577c:	d5d6      	bpl.n	572c <spi_init+0x50>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    577e:	0852      	lsrs	r2, r2, #1
    5780:	189b      	adds	r3, r3, r2
    5782:	3330      	adds	r3, #48	; 0x30
    5784:	7818      	ldrb	r0, [r3, #0]
    5786:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    5788:	4663      	mov	r3, ip
    578a:	07db      	lsls	r3, r3, #31
    578c:	d5cc      	bpl.n	5728 <spi_init+0x4c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    578e:	0900      	lsrs	r0, r0, #4
    5790:	e7cc      	b.n	572c <spi_init+0x50>
			module->hw = NULL;
    5792:	2300      	movs	r3, #0
    5794:	6033      	str	r3, [r6, #0]
			return STATUS_ERR_DENIED;
    5796:	201c      	movs	r0, #28
    5798:	e7b2      	b.n	5700 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    579a:	2011      	movs	r0, #17
    579c:	4b99      	ldr	r3, [pc, #612]	; (5a04 <spi_init+0x328>)
    579e:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    57a0:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    57a2:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    57a4:	2a01      	cmp	r2, #1
    57a6:	d016      	beq.n	57d6 <spi_init+0xfa>
	if (config->mode == SPI_MODE_SLAVE) {
    57a8:	7821      	ldrb	r1, [r4, #0]
    57aa:	2900      	cmp	r1, #0
    57ac:	d127      	bne.n	57fe <spi_init+0x122>
		if (spi_module->CTRLA.reg != addr) {
    57ae:	683b      	ldr	r3, [r7, #0]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    57b0:	7fe2      	ldrb	r2, [r4, #31]
    57b2:	0412      	lsls	r2, r2, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    57b4:	7fa0      	ldrb	r0, [r4, #30]
    57b6:	4302      	orrs	r2, r0
			return STATUS_ERR_DENIED;
    57b8:	201c      	movs	r0, #28
		if (spi_module->CTRLA.reg != addr) {
    57ba:	429a      	cmp	r2, r3
    57bc:	d1a0      	bne.n	5700 <spi_init+0x24>
		ctrla |= config->mode_specific.slave.frame_format;
    57be:	69a3      	ldr	r3, [r4, #24]
		ctrlb |= config->mode_specific.slave.address_mode;
    57c0:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
    57c2:	3004      	adds	r0, #4
    57c4:	5c20      	ldrb	r0, [r4, r0]
    57c6:	2800      	cmp	r0, #0
    57c8:	d001      	beq.n	57ce <spi_init+0xf2>
    57ca:	2040      	movs	r0, #64	; 0x40
    57cc:	4302      	orrs	r2, r0
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    57ce:	2008      	movs	r0, #8
    57d0:	4303      	orrs	r3, r0
    57d2:	431d      	orrs	r5, r3
    57d4:	e014      	b.n	5800 <spi_init+0x124>
		enum status_code error_code = _sercom_get_sync_baud_val(
    57d6:	aa04      	add	r2, sp, #16
    57d8:	0001      	movs	r1, r0
    57da:	69a0      	ldr	r0, [r4, #24]
    57dc:	4b8a      	ldr	r3, [pc, #552]	; (5a08 <spi_init+0x32c>)
    57de:	4798      	blx	r3
    57e0:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    57e2:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    57e4:	2b00      	cmp	r3, #0
    57e6:	d000      	beq.n	57ea <spi_init+0x10e>
    57e8:	e78a      	b.n	5700 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    57ea:	7b3b      	ldrb	r3, [r7, #12]
    57ec:	b2db      	uxtb	r3, r3
    57ee:	aa04      	add	r2, sp, #16
    57f0:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    57f2:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    57f4:	429a      	cmp	r2, r3
    57f6:	d000      	beq.n	57fa <spi_init+0x11e>
    57f8:	e782      	b.n	5700 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    57fa:	350c      	adds	r5, #12
    57fc:	e7d4      	b.n	57a8 <spi_init+0xcc>
	uint32_t ctrlb = 0;
    57fe:	2200      	movs	r2, #0
	ctrla |= config->mux_setting;
    5800:	6863      	ldr	r3, [r4, #4]
    5802:	68a0      	ldr	r0, [r4, #8]
    5804:	4303      	orrs	r3, r0
    5806:	68e0      	ldr	r0, [r4, #12]
    5808:	4303      	orrs	r3, r0
    580a:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    580c:	7c20      	ldrb	r0, [r4, #16]
    580e:	4302      	orrs	r2, r0
	if (config->run_in_standby) {
    5810:	7c60      	ldrb	r0, [r4, #17]
    5812:	2800      	cmp	r0, #0
    5814:	d001      	beq.n	581a <spi_init+0x13e>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    5816:	2080      	movs	r0, #128	; 0x80
    5818:	4303      	orrs	r3, r0
	if (config->receiver_enable) {
    581a:	7ca0      	ldrb	r0, [r4, #18]
    581c:	2800      	cmp	r0, #0
    581e:	d002      	beq.n	5826 <spi_init+0x14a>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    5820:	2080      	movs	r0, #128	; 0x80
    5822:	0280      	lsls	r0, r0, #10
    5824:	4302      	orrs	r2, r0
	if (config->select_slave_low_detect_enable) {
    5826:	7ce0      	ldrb	r0, [r4, #19]
    5828:	2800      	cmp	r0, #0
    582a:	d002      	beq.n	5832 <spi_init+0x156>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    582c:	2080      	movs	r0, #128	; 0x80
    582e:	0080      	lsls	r0, r0, #2
    5830:	4302      	orrs	r2, r0
	if (config->master_slave_select_enable) {
    5832:	7d20      	ldrb	r0, [r4, #20]
    5834:	2800      	cmp	r0, #0
    5836:	d002      	beq.n	583e <spi_init+0x162>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    5838:	2080      	movs	r0, #128	; 0x80
    583a:	0180      	lsls	r0, r0, #6
    583c:	4302      	orrs	r2, r0
	if (spi_module->CTRLA.reg == ctrla &&
    583e:	6838      	ldr	r0, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    5840:	2502      	movs	r5, #2
    5842:	432b      	orrs	r3, r5
	if (spi_module->CTRLA.reg == ctrla &&
    5844:	4283      	cmp	r3, r0
    5846:	d003      	beq.n	5850 <spi_init+0x174>
	module->hw = NULL;
    5848:	2300      	movs	r3, #0
    584a:	6033      	str	r3, [r6, #0]
	return STATUS_ERR_DENIED;
    584c:	201c      	movs	r0, #28
    584e:	e757      	b.n	5700 <spi_init+0x24>
			spi_module->CTRLB.reg == ctrlb) {
    5850:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    5852:	4293      	cmp	r3, r2
    5854:	d1f8      	bne.n	5848 <spi_init+0x16c>
		module->mode           = config->mode;
    5856:	7171      	strb	r1, [r6, #5]
		module->character_size = config->character_size;
    5858:	7c23      	ldrb	r3, [r4, #16]
    585a:	71b3      	strb	r3, [r6, #6]
		return STATUS_OK;
    585c:	2000      	movs	r0, #0
    585e:	e74f      	b.n	5700 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5860:	0008      	movs	r0, r1
    5862:	4b6a      	ldr	r3, [pc, #424]	; (5a0c <spi_init+0x330>)
    5864:	4798      	blx	r3
	if (sercom_index == 5) {
    5866:	2805      	cmp	r0, #5
    5868:	d100      	bne.n	586c <spi_init+0x190>
    586a:	e0bf      	b.n	59ec <spi_init+0x310>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    586c:	0003      	movs	r3, r0
    586e:	3312      	adds	r3, #18
			MCLK->APBCMASK.reg |= mask;
    5870:	4967      	ldr	r1, [pc, #412]	; (5a10 <spi_init+0x334>)
    5872:	69cd      	ldr	r5, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5874:	2201      	movs	r2, #1
    5876:	4082      	lsls	r2, r0
    5878:	432a      	orrs	r2, r5
    587a:	61ca      	str	r2, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    587c:	a909      	add	r1, sp, #36	; 0x24
    587e:	2524      	movs	r5, #36	; 0x24
    5880:	5d62      	ldrb	r2, [r4, r5]
    5882:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5884:	b2db      	uxtb	r3, r3
    5886:	9301      	str	r3, [sp, #4]
    5888:	0018      	movs	r0, r3
    588a:	4b62      	ldr	r3, [pc, #392]	; (5a14 <spi_init+0x338>)
    588c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    588e:	9801      	ldr	r0, [sp, #4]
    5890:	4b61      	ldr	r3, [pc, #388]	; (5a18 <spi_init+0x33c>)
    5892:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5894:	5d60      	ldrb	r0, [r4, r5]
    5896:	2100      	movs	r1, #0
    5898:	4b60      	ldr	r3, [pc, #384]	; (5a1c <spi_init+0x340>)
    589a:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    589c:	7823      	ldrb	r3, [r4, #0]
    589e:	2b01      	cmp	r3, #1
    58a0:	d020      	beq.n	58e4 <spi_init+0x208>
	if (config->mode == SPI_MODE_SLAVE) {
    58a2:	7823      	ldrb	r3, [r4, #0]
    58a4:	2b00      	cmp	r3, #0
    58a6:	d103      	bne.n	58b0 <spi_init+0x1d4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    58a8:	683b      	ldr	r3, [r7, #0]
    58aa:	2208      	movs	r2, #8
    58ac:	4313      	orrs	r3, r2
    58ae:	603b      	str	r3, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    58b0:	6833      	ldr	r3, [r6, #0]
    58b2:	4698      	mov	r8, r3
	config->mux_position = SYSTEM_PINMUX_GPIO;
    58b4:	ab04      	add	r3, sp, #16
    58b6:	2280      	movs	r2, #128	; 0x80
    58b8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    58ba:	2200      	movs	r2, #0
    58bc:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    58be:	2101      	movs	r1, #1
    58c0:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    58c2:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    58c4:	7823      	ldrb	r3, [r4, #0]
    58c6:	2b00      	cmp	r3, #0
    58c8:	d101      	bne.n	58ce <spi_init+0x1f2>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    58ca:	ab04      	add	r3, sp, #16
    58cc:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    58ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    58d0:	9305      	str	r3, [sp, #20]
    58d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    58d4:	9306      	str	r3, [sp, #24]
    58d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    58d8:	9307      	str	r3, [sp, #28]
    58da:	6b63      	ldr	r3, [r4, #52]	; 0x34
    58dc:	9308      	str	r3, [sp, #32]
    58de:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    58e0:	ad05      	add	r5, sp, #20
    58e2:	e011      	b.n	5908 <spi_init+0x22c>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    58e4:	683b      	ldr	r3, [r7, #0]
    58e6:	220c      	movs	r2, #12
    58e8:	4313      	orrs	r3, r2
    58ea:	603b      	str	r3, [r7, #0]
    58ec:	e7d9      	b.n	58a2 <spi_init+0x1c6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    58ee:	4640      	mov	r0, r8
    58f0:	4b42      	ldr	r3, [pc, #264]	; (59fc <spi_init+0x320>)
    58f2:	4798      	blx	r3
    58f4:	e00d      	b.n	5912 <spi_init+0x236>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    58f6:	a904      	add	r1, sp, #16
    58f8:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    58fa:	0c00      	lsrs	r0, r0, #16
    58fc:	b2c0      	uxtb	r0, r0
    58fe:	4b48      	ldr	r3, [pc, #288]	; (5a20 <spi_init+0x344>)
    5900:	4798      	blx	r3
    5902:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    5904:	2f04      	cmp	r7, #4
    5906:	d007      	beq.n	5918 <spi_init+0x23c>
    5908:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    590a:	00bb      	lsls	r3, r7, #2
    590c:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    590e:	2800      	cmp	r0, #0
    5910:	d0ed      	beq.n	58ee <spi_init+0x212>
		if (current_pinmux != PINMUX_UNUSED) {
    5912:	1c43      	adds	r3, r0, #1
    5914:	d1ef      	bne.n	58f6 <spi_init+0x21a>
    5916:	e7f4      	b.n	5902 <spi_init+0x226>
	module->mode             = config->mode;
    5918:	7823      	ldrb	r3, [r4, #0]
    591a:	7173      	strb	r3, [r6, #5]
	module->character_size   = config->character_size;
    591c:	7c23      	ldrb	r3, [r4, #16]
    591e:	71b3      	strb	r3, [r6, #6]
	module->receiver_enabled = config->receiver_enable;
    5920:	7ca3      	ldrb	r3, [r4, #18]
    5922:	71f3      	strb	r3, [r6, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    5924:	7d23      	ldrb	r3, [r4, #20]
    5926:	7233      	strb	r3, [r6, #8]
	uint16_t baud = 0;
    5928:	2200      	movs	r2, #0
    592a:	ab02      	add	r3, sp, #8
    592c:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    592e:	7823      	ldrb	r3, [r4, #0]
    5930:	2b01      	cmp	r3, #1
    5932:	d014      	beq.n	595e <spi_init+0x282>
	if (config->mode == SPI_MODE_SLAVE) {
    5934:	7823      	ldrb	r3, [r4, #0]
    5936:	2b00      	cmp	r3, #0
    5938:	d129      	bne.n	598e <spi_init+0x2b2>
		ctrla = config->mode_specific.slave.frame_format;
    593a:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    593c:	8ba2      	ldrh	r2, [r4, #28]
		spi_module->ADDR.reg |=
    593e:	4643      	mov	r3, r8
    5940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    5942:	7fe1      	ldrb	r1, [r4, #31]
    5944:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    5946:	7fa5      	ldrb	r5, [r4, #30]
    5948:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
    594a:	4319      	orrs	r1, r3
    594c:	4643      	mov	r3, r8
    594e:	6259      	str	r1, [r3, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    5950:	2320      	movs	r3, #32
    5952:	5ce3      	ldrb	r3, [r4, r3]
    5954:	2b00      	cmp	r3, #0
    5956:	d01c      	beq.n	5992 <spi_init+0x2b6>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    5958:	2340      	movs	r3, #64	; 0x40
    595a:	431a      	orrs	r2, r3
    595c:	e019      	b.n	5992 <spi_init+0x2b6>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    595e:	6830      	ldr	r0, [r6, #0]
    5960:	4b2a      	ldr	r3, [pc, #168]	; (5a0c <spi_init+0x330>)
    5962:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5964:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    5966:	b2c0      	uxtb	r0, r0
    5968:	4b26      	ldr	r3, [pc, #152]	; (5a04 <spi_init+0x328>)
    596a:	4798      	blx	r3
    596c:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    596e:	ab02      	add	r3, sp, #8
    5970:	1d9a      	adds	r2, r3, #6
    5972:	69a0      	ldr	r0, [r4, #24]
    5974:	4b24      	ldr	r3, [pc, #144]	; (5a08 <spi_init+0x32c>)
    5976:	4798      	blx	r3
    5978:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    597a:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    597c:	2b00      	cmp	r3, #0
    597e:	d000      	beq.n	5982 <spi_init+0x2a6>
    5980:	e6be      	b.n	5700 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    5982:	ab02      	add	r3, sp, #8
    5984:	3306      	adds	r3, #6
    5986:	781b      	ldrb	r3, [r3, #0]
    5988:	4642      	mov	r2, r8
    598a:	7313      	strb	r3, [r2, #12]
    598c:	e7d2      	b.n	5934 <spi_init+0x258>
	uint32_t ctrlb = 0;
    598e:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    5990:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    5992:	6863      	ldr	r3, [r4, #4]
    5994:	68a1      	ldr	r1, [r4, #8]
    5996:	430b      	orrs	r3, r1
    5998:	68e1      	ldr	r1, [r4, #12]
    599a:	430b      	orrs	r3, r1
    599c:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    599e:	7c21      	ldrb	r1, [r4, #16]
    59a0:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    59a2:	7c61      	ldrb	r1, [r4, #17]
    59a4:	2900      	cmp	r1, #0
    59a6:	d103      	bne.n	59b0 <spi_init+0x2d4>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    59a8:	491e      	ldr	r1, [pc, #120]	; (5a24 <spi_init+0x348>)
    59aa:	7889      	ldrb	r1, [r1, #2]
    59ac:	0789      	lsls	r1, r1, #30
    59ae:	d501      	bpl.n	59b4 <spi_init+0x2d8>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    59b0:	2180      	movs	r1, #128	; 0x80
    59b2:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    59b4:	7ca1      	ldrb	r1, [r4, #18]
    59b6:	2900      	cmp	r1, #0
    59b8:	d002      	beq.n	59c0 <spi_init+0x2e4>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    59ba:	2180      	movs	r1, #128	; 0x80
    59bc:	0289      	lsls	r1, r1, #10
    59be:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    59c0:	7ce1      	ldrb	r1, [r4, #19]
    59c2:	2900      	cmp	r1, #0
    59c4:	d002      	beq.n	59cc <spi_init+0x2f0>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    59c6:	2180      	movs	r1, #128	; 0x80
    59c8:	0089      	lsls	r1, r1, #2
    59ca:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    59cc:	7d21      	ldrb	r1, [r4, #20]
    59ce:	2900      	cmp	r1, #0
    59d0:	d002      	beq.n	59d8 <spi_init+0x2fc>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    59d2:	2180      	movs	r1, #128	; 0x80
    59d4:	0189      	lsls	r1, r1, #6
    59d6:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    59d8:	4641      	mov	r1, r8
    59da:	6809      	ldr	r1, [r1, #0]
    59dc:	430b      	orrs	r3, r1
    59de:	4641      	mov	r1, r8
    59e0:	600b      	str	r3, [r1, #0]
	spi_module->CTRLB.reg |= ctrlb;
    59e2:	684b      	ldr	r3, [r1, #4]
    59e4:	431a      	orrs	r2, r3
    59e6:	604a      	str	r2, [r1, #4]
	return STATUS_OK;
    59e8:	2000      	movs	r0, #0
    59ea:	e689      	b.n	5700 <spi_init+0x24>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    59ec:	4a08      	ldr	r2, [pc, #32]	; (5a10 <spi_init+0x334>)
    59ee:	6a13      	ldr	r3, [r2, #32]
    59f0:	2102      	movs	r1, #2
    59f2:	430b      	orrs	r3, r1
    59f4:	6213      	str	r3, [r2, #32]
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    59f6:	2318      	movs	r3, #24
    59f8:	e740      	b.n	587c <spi_init+0x1a0>
    59fa:	46c0      	nop			; (mov r8, r8)
    59fc:	00005479 	.word	0x00005479
    5a00:	40002800 	.word	0x40002800
    5a04:	00006a6d 	.word	0x00006a6d
    5a08:	0000536f 	.word	0x0000536f
    5a0c:	000055d5 	.word	0x000055d5
    5a10:	40000400 	.word	0x40000400
    5a14:	00006a49 	.word	0x00006a49
    5a18:	000069d9 	.word	0x000069d9
    5a1c:	0000542d 	.word	0x0000542d
    5a20:	00006b45 	.word	0x00006b45
    5a24:	41002000 	.word	0x41002000

00005a28 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    5a28:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    5a2a:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    5a2c:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    5a2e:	2c01      	cmp	r4, #1
    5a30:	d001      	beq.n	5a36 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    5a32:	0018      	movs	r0, r3
    5a34:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    5a36:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    5a38:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    5a3a:	2c00      	cmp	r4, #0
    5a3c:	d1f9      	bne.n	5a32 <spi_select_slave+0xa>
		if (select) {
    5a3e:	2a00      	cmp	r2, #0
    5a40:	d058      	beq.n	5af4 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    5a42:	784b      	ldrb	r3, [r1, #1]
    5a44:	2b00      	cmp	r3, #0
    5a46:	d044      	beq.n	5ad2 <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5a48:	6803      	ldr	r3, [r0, #0]
    5a4a:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    5a4c:	07db      	lsls	r3, r3, #31
    5a4e:	d410      	bmi.n	5a72 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    5a50:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5a52:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5a54:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5a56:	2900      	cmp	r1, #0
    5a58:	d104      	bne.n	5a64 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    5a5a:	0953      	lsrs	r3, r2, #5
    5a5c:	01db      	lsls	r3, r3, #7
    5a5e:	492e      	ldr	r1, [pc, #184]	; (5b18 <spi_select_slave+0xf0>)
    5a60:	468c      	mov	ip, r1
    5a62:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5a64:	211f      	movs	r1, #31
    5a66:	4011      	ands	r1, r2
    5a68:	2201      	movs	r2, #1
    5a6a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5a6c:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    5a6e:	2305      	movs	r3, #5
    5a70:	e7df      	b.n	5a32 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    5a72:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5a74:	09d4      	lsrs	r4, r2, #7
		return NULL;
    5a76:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5a78:	2c00      	cmp	r4, #0
    5a7a:	d104      	bne.n	5a86 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    5a7c:	0953      	lsrs	r3, r2, #5
    5a7e:	01db      	lsls	r3, r3, #7
    5a80:	4c25      	ldr	r4, [pc, #148]	; (5b18 <spi_select_slave+0xf0>)
    5a82:	46a4      	mov	ip, r4
    5a84:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5a86:	241f      	movs	r4, #31
    5a88:	4014      	ands	r4, r2
    5a8a:	2201      	movs	r2, #1
    5a8c:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    5a8e:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5a90:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5a92:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    5a94:	07d2      	lsls	r2, r2, #31
    5a96:	d501      	bpl.n	5a9c <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5a98:	788a      	ldrb	r2, [r1, #2]
    5a9a:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    5a9c:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    5a9e:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    5aa0:	2a00      	cmp	r2, #0
    5aa2:	d1c6      	bne.n	5a32 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5aa4:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    5aa6:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5aa8:	7e13      	ldrb	r3, [r2, #24]
    5aaa:	420b      	tst	r3, r1
    5aac:	d0fc      	beq.n	5aa8 <spi_select_slave+0x80>
    5aae:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    5ab0:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    5ab2:	0749      	lsls	r1, r1, #29
    5ab4:	d5bd      	bpl.n	5a32 <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5ab6:	8b53      	ldrh	r3, [r2, #26]
    5ab8:	075b      	lsls	r3, r3, #29
    5aba:	d501      	bpl.n	5ac0 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5abc:	2304      	movs	r3, #4
    5abe:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5ac0:	7983      	ldrb	r3, [r0, #6]
    5ac2:	2b01      	cmp	r3, #1
    5ac4:	d002      	beq.n	5acc <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5ac6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5ac8:	2300      	movs	r3, #0
    5aca:	e7b2      	b.n	5a32 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5acc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5ace:	2300      	movs	r3, #0
    5ad0:	e7af      	b.n	5a32 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    5ad2:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5ad4:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5ad6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5ad8:	2900      	cmp	r1, #0
    5ada:	d104      	bne.n	5ae6 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    5adc:	0953      	lsrs	r3, r2, #5
    5ade:	01db      	lsls	r3, r3, #7
    5ae0:	490d      	ldr	r1, [pc, #52]	; (5b18 <spi_select_slave+0xf0>)
    5ae2:	468c      	mov	ip, r1
    5ae4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5ae6:	211f      	movs	r1, #31
    5ae8:	4011      	ands	r1, r2
    5aea:	2201      	movs	r2, #1
    5aec:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    5aee:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    5af0:	2300      	movs	r3, #0
    5af2:	e79e      	b.n	5a32 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    5af4:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5af6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5af8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5afa:	2900      	cmp	r1, #0
    5afc:	d104      	bne.n	5b08 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    5afe:	0953      	lsrs	r3, r2, #5
    5b00:	01db      	lsls	r3, r3, #7
    5b02:	4905      	ldr	r1, [pc, #20]	; (5b18 <spi_select_slave+0xf0>)
    5b04:	468c      	mov	ip, r1
    5b06:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5b08:	211f      	movs	r1, #31
    5b0a:	4011      	ands	r1, r2
    5b0c:	2201      	movs	r2, #1
    5b0e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5b10:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    5b12:	2300      	movs	r3, #0
    5b14:	e78d      	b.n	5a32 <spi_select_slave+0xa>
    5b16:	46c0      	nop			; (mov r8, r8)
    5b18:	40002800 	.word	0x40002800

00005b1c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    5b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b1e:	46de      	mov	lr, fp
    5b20:	4657      	mov	r7, sl
    5b22:	464e      	mov	r6, r9
    5b24:	4645      	mov	r5, r8
    5b26:	b5e0      	push	{r5, r6, r7, lr}
    5b28:	b083      	sub	sp, #12
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    5b2a:	2317      	movs	r3, #23
	if (length == 0) {
    5b2c:	2a00      	cmp	r2, #0
    5b2e:	d107      	bne.n	5b40 <spi_write_buffer_wait+0x24>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    5b30:	0018      	movs	r0, r3
    5b32:	b003      	add	sp, #12
    5b34:	bc3c      	pop	{r2, r3, r4, r5}
    5b36:	4690      	mov	r8, r2
    5b38:	4699      	mov	r9, r3
    5b3a:	46a2      	mov	sl, r4
    5b3c:	46ab      	mov	fp, r5
    5b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    5b40:	7943      	ldrb	r3, [r0, #5]
    5b42:	2b00      	cmp	r3, #0
    5b44:	d103      	bne.n	5b4e <spi_write_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5b46:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5b48:	7e1c      	ldrb	r4, [r3, #24]
    5b4a:	07a4      	lsls	r4, r4, #30
    5b4c:	d40a      	bmi.n	5b64 <spi_write_buffer_wait+0x48>
						data_to_send = tx_data[tx_pos++];
    5b4e:	4693      	mov	fp, r2
    5b50:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
    5b52:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
    5b54:	2502      	movs	r5, #2
    5b56:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
    5b58:	3502      	adds	r5, #2
    5b5a:	46a8      	mov	r8, r5
    5b5c:	3a01      	subs	r2, #1
    5b5e:	b292      	uxth	r2, r2
    5b60:	468a      	mov	sl, r1
    5b62:	e023      	b.n	5bac <spi_write_buffer_wait+0x90>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5b64:	2402      	movs	r4, #2
    5b66:	761c      	strb	r4, [r3, #24]
    5b68:	e7f1      	b.n	5b4e <spi_write_buffer_wait+0x32>
    5b6a:	7e35      	ldrb	r5, [r6, #24]
			if (spi_is_write_complete(module)) {
    5b6c:	4661      	mov	r1, ip
    5b6e:	420d      	tst	r5, r1
    5b70:	d12e      	bne.n	5bd0 <spi_write_buffer_wait+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5b72:	7e35      	ldrb	r5, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    5b74:	421d      	tst	r5, r3
    5b76:	d100      	bne.n	5b7a <spi_write_buffer_wait+0x5e>
    5b78:	e0c2      	b.n	5d00 <spi_write_buffer_wait+0x1e4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5b7a:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5b7c:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
    5b7e:	421d      	tst	r5, r3
    5b80:	d0fc      	beq.n	5b7c <spi_write_buffer_wait+0x60>
		uint16_t data_to_send = tx_data[tx_pos++];
    5b82:	1c67      	adds	r7, r4, #1
    5b84:	b2bf      	uxth	r7, r7
    5b86:	4651      	mov	r1, sl
    5b88:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5b8a:	7981      	ldrb	r1, [r0, #6]
    5b8c:	2901      	cmp	r1, #1
    5b8e:	d023      	beq.n	5bd8 <spi_write_buffer_wait+0xbc>
		uint16_t data_to_send = tx_data[tx_pos++];
    5b90:	b2ad      	uxth	r5, r5
    5b92:	003c      	movs	r4, r7
    5b94:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    5b96:	421f      	tst	r7, r3
    5b98:	d002      	beq.n	5ba0 <spi_write_buffer_wait+0x84>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5b9a:	05ed      	lsls	r5, r5, #23
    5b9c:	0ded      	lsrs	r5, r5, #23
    5b9e:	62b5      	str	r5, [r6, #40]	; 0x28
    5ba0:	1e55      	subs	r5, r2, #1
    5ba2:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
    5ba4:	79c6      	ldrb	r6, [r0, #7]
    5ba6:	2e00      	cmp	r6, #0
    5ba8:	d11d      	bne.n	5be6 <spi_write_buffer_wait+0xca>
    5baa:	002a      	movs	r2, r5
	while (length--) {
    5bac:	4d59      	ldr	r5, [pc, #356]	; (5d14 <spi_write_buffer_wait+0x1f8>)
    5bae:	42aa      	cmp	r2, r5
    5bb0:	d070      	beq.n	5c94 <spi_write_buffer_wait+0x178>
		if (module->mode == SPI_MODE_SLAVE) {
    5bb2:	7945      	ldrb	r5, [r0, #5]
    5bb4:	2d00      	cmp	r5, #0
    5bb6:	d1e0      	bne.n	5b7a <spi_write_buffer_wait+0x5e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5bb8:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5bba:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    5bbc:	421d      	tst	r5, r3
    5bbe:	d1d4      	bne.n	5b6a <spi_write_buffer_wait+0x4e>
    5bc0:	4d55      	ldr	r5, [pc, #340]	; (5d18 <spi_write_buffer_wait+0x1fc>)
    5bc2:	7e37      	ldrb	r7, [r6, #24]
    5bc4:	421f      	tst	r7, r3
    5bc6:	d1d0      	bne.n	5b6a <spi_write_buffer_wait+0x4e>
    5bc8:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    5bca:	2d00      	cmp	r5, #0
    5bcc:	d1f9      	bne.n	5bc2 <spi_write_buffer_wait+0xa6>
    5bce:	e7cc      	b.n	5b6a <spi_write_buffer_wait+0x4e>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5bd0:	2302      	movs	r3, #2
    5bd2:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    5bd4:	3302      	adds	r3, #2
    5bd6:	e7ab      	b.n	5b30 <spi_write_buffer_wait+0x14>
			data_to_send |= (tx_data[tx_pos++] << 8);
    5bd8:	3402      	adds	r4, #2
    5bda:	b2a4      	uxth	r4, r4
    5bdc:	4651      	mov	r1, sl
    5bde:	5dcf      	ldrb	r7, [r1, r7]
    5be0:	023f      	lsls	r7, r7, #8
    5be2:	433d      	orrs	r5, r7
    5be4:	e7d6      	b.n	5b94 <spi_write_buffer_wait+0x78>
    5be6:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
    5be8:	7945      	ldrb	r5, [r0, #5]
    5bea:	2d00      	cmp	r5, #0
    5bec:	d137      	bne.n	5c5e <spi_write_buffer_wait+0x142>
    5bee:	4d4b      	ldr	r5, [pc, #300]	; (5d1c <spi_write_buffer_wait+0x200>)
    5bf0:	9101      	str	r1, [sp, #4]
    5bf2:	e012      	b.n	5c1a <spi_write_buffer_wait+0xfe>
							data_to_send |= (tx_data[tx_pos++] << 8);
    5bf4:	3402      	adds	r4, #2
    5bf6:	b2a4      	uxth	r4, r4
    5bf8:	4649      	mov	r1, r9
    5bfa:	9f01      	ldr	r7, [sp, #4]
    5bfc:	5c79      	ldrb	r1, [r7, r1]
    5bfe:	0209      	lsls	r1, r1, #8
    5c00:	9f00      	ldr	r7, [sp, #0]
    5c02:	430f      	orrs	r7, r1
    5c04:	e01b      	b.n	5c3e <spi_write_buffer_wait+0x122>
						length--;
    5c06:	3a01      	subs	r2, #1
    5c08:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
    5c0a:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5c0c:	7e37      	ldrb	r7, [r6, #24]
					if (spi_is_ready_to_read(module)) {
    5c0e:	4641      	mov	r1, r8
    5c10:	420f      	tst	r7, r1
    5c12:	d11b      	bne.n	5c4c <spi_write_buffer_wait+0x130>
    5c14:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    5c16:	2d00      	cmp	r5, #0
    5c18:	d018      	beq.n	5c4c <spi_write_buffer_wait+0x130>
					if (length && spi_is_ready_to_write(module)) {
    5c1a:	2a00      	cmp	r2, #0
    5c1c:	d0f5      	beq.n	5c0a <spi_write_buffer_wait+0xee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5c1e:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5c20:	7e37      	ldrb	r7, [r6, #24]
    5c22:	421f      	tst	r7, r3
    5c24:	d0f1      	beq.n	5c0a <spi_write_buffer_wait+0xee>
						data_to_send = tx_data[tx_pos++];
    5c26:	1c67      	adds	r7, r4, #1
    5c28:	b2b9      	uxth	r1, r7
    5c2a:	4689      	mov	r9, r1
    5c2c:	9901      	ldr	r1, [sp, #4]
    5c2e:	5d09      	ldrb	r1, [r1, r4]
    5c30:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5c32:	7981      	ldrb	r1, [r0, #6]
    5c34:	2901      	cmp	r1, #1
    5c36:	d0dd      	beq.n	5bf4 <spi_write_buffer_wait+0xd8>
						data_to_send = tx_data[tx_pos++];
    5c38:	4669      	mov	r1, sp
    5c3a:	880f      	ldrh	r7, [r1, #0]
    5c3c:	464c      	mov	r4, r9
    5c3e:	7e31      	ldrb	r1, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    5c40:	4219      	tst	r1, r3
    5c42:	d0e0      	beq.n	5c06 <spi_write_buffer_wait+0xea>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5c44:	05ff      	lsls	r7, r7, #23
    5c46:	0dff      	lsrs	r7, r7, #23
    5c48:	62b7      	str	r7, [r6, #40]	; 0x28
    5c4a:	e7dc      	b.n	5c06 <spi_write_buffer_wait+0xea>
    5c4c:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5c4e:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    5c50:	4667      	mov	r7, ip
    5c52:	423d      	tst	r5, r7
    5c54:	d118      	bne.n	5c88 <spi_write_buffer_wait+0x16c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5c56:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    5c58:	4646      	mov	r6, r8
    5c5a:	4235      	tst	r5, r6
    5c5c:	d052      	beq.n	5d04 <spi_write_buffer_wait+0x1e8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5c5e:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5c60:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    5c62:	4647      	mov	r7, r8
    5c64:	423d      	tst	r5, r7
    5c66:	d0fb      	beq.n	5c60 <spi_write_buffer_wait+0x144>
    5c68:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    5c6a:	423d      	tst	r5, r7
    5c6c:	d007      	beq.n	5c7e <spi_write_buffer_wait+0x162>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5c6e:	8b75      	ldrh	r5, [r6, #26]
    5c70:	423d      	tst	r5, r7
    5c72:	d000      	beq.n	5c76 <spi_write_buffer_wait+0x15a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5c74:	8377      	strh	r7, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5c76:	7985      	ldrb	r5, [r0, #6]
    5c78:	2d01      	cmp	r5, #1
    5c7a:	d009      	beq.n	5c90 <spi_write_buffer_wait+0x174>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5c7c:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			flush_length--;
    5c7e:	465d      	mov	r5, fp
    5c80:	3d01      	subs	r5, #1
    5c82:	b2ad      	uxth	r5, r5
    5c84:	46ab      	mov	fp, r5
    5c86:	e769      	b.n	5b5c <spi_write_buffer_wait+0x40>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5c88:	2302      	movs	r3, #2
    5c8a:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    5c8c:	3302      	adds	r3, #2
    5c8e:	e74f      	b.n	5b30 <spi_write_buffer_wait+0x14>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5c90:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    5c92:	e7f4      	b.n	5c7e <spi_write_buffer_wait+0x162>
	if (module->mode == SPI_MODE_MASTER) {
    5c94:	7943      	ldrb	r3, [r0, #5]
    5c96:	2b01      	cmp	r3, #1
    5c98:	d00b      	beq.n	5cb2 <spi_write_buffer_wait+0x196>
	if (module->mode == SPI_MODE_SLAVE) {
    5c9a:	2b00      	cmp	r3, #0
    5c9c:	d134      	bne.n	5d08 <spi_write_buffer_wait+0x1ec>
		if (module->receiver_enabled) {
    5c9e:	79c2      	ldrb	r2, [r0, #7]
    5ca0:	2a00      	cmp	r2, #0
    5ca2:	d100      	bne.n	5ca6 <spi_write_buffer_wait+0x18a>
    5ca4:	e744      	b.n	5b30 <spi_write_buffer_wait+0x14>
					if (spi_is_ready_to_read(module)) {
    5ca6:	2404      	movs	r4, #4
			while (flush_length) {
    5ca8:	465b      	mov	r3, fp
    5caa:	465d      	mov	r5, fp
    5cac:	2b00      	cmp	r3, #0
    5cae:	d119      	bne.n	5ce4 <spi_write_buffer_wait+0x1c8>
    5cb0:	e73e      	b.n	5b30 <spi_write_buffer_wait+0x14>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5cb2:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    5cb4:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5cb6:	7e0b      	ldrb	r3, [r1, #24]
    5cb8:	4213      	tst	r3, r2
    5cba:	d0fc      	beq.n	5cb6 <spi_write_buffer_wait+0x19a>
	return STATUS_OK;
    5cbc:	2300      	movs	r3, #0
    5cbe:	e737      	b.n	5b30 <spi_write_buffer_wait+0x14>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5cc0:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    5cc2:	4223      	tst	r3, r4
    5cc4:	d022      	beq.n	5d0c <spi_write_buffer_wait+0x1f0>
    5cc6:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    5cc8:	4223      	tst	r3, r4
    5cca:	d007      	beq.n	5cdc <spi_write_buffer_wait+0x1c0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5ccc:	8b4b      	ldrh	r3, [r1, #26]
    5cce:	4223      	tst	r3, r4
    5cd0:	d000      	beq.n	5cd4 <spi_write_buffer_wait+0x1b8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5cd2:	834c      	strh	r4, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5cd4:	7983      	ldrb	r3, [r0, #6]
    5cd6:	2b01      	cmp	r3, #1
    5cd8:	d010      	beq.n	5cfc <spi_write_buffer_wait+0x1e0>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5cda:	6a8b      	ldr	r3, [r1, #40]	; 0x28
				flush_length--;
    5cdc:	3d01      	subs	r5, #1
    5cde:	b2ad      	uxth	r5, r5
			while (flush_length) {
    5ce0:	2d00      	cmp	r5, #0
    5ce2:	d015      	beq.n	5d10 <spi_write_buffer_wait+0x1f4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5ce4:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5ce6:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    5ce8:	4223      	tst	r3, r4
    5cea:	d1e9      	bne.n	5cc0 <spi_write_buffer_wait+0x1a4>
    5cec:	4b0a      	ldr	r3, [pc, #40]	; (5d18 <spi_write_buffer_wait+0x1fc>)
    5cee:	7e0a      	ldrb	r2, [r1, #24]
    5cf0:	4222      	tst	r2, r4
    5cf2:	d1e5      	bne.n	5cc0 <spi_write_buffer_wait+0x1a4>
    5cf4:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    5cf6:	2b00      	cmp	r3, #0
    5cf8:	d1f9      	bne.n	5cee <spi_write_buffer_wait+0x1d2>
    5cfa:	e7e1      	b.n	5cc0 <spi_write_buffer_wait+0x1a4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5cfc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    5cfe:	e7ed      	b.n	5cdc <spi_write_buffer_wait+0x1c0>
				return STATUS_ERR_TIMEOUT;
    5d00:	2312      	movs	r3, #18
    5d02:	e715      	b.n	5b30 <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    5d04:	2312      	movs	r3, #18
    5d06:	e713      	b.n	5b30 <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    5d08:	2300      	movs	r3, #0
    5d0a:	e711      	b.n	5b30 <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    5d0c:	2312      	movs	r3, #18
    5d0e:	e70f      	b.n	5b30 <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    5d10:	2300      	movs	r3, #0
    5d12:	e70d      	b.n	5b30 <spi_write_buffer_wait+0x14>
    5d14:	0000ffff 	.word	0x0000ffff
    5d18:	00002710 	.word	0x00002710
    5d1c:	00002711 	.word	0x00002711

00005d20 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    5d20:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d22:	46de      	mov	lr, fp
    5d24:	4657      	mov	r7, sl
    5d26:	464e      	mov	r6, r9
    5d28:	4645      	mov	r5, r8
    5d2a:	b5e0      	push	{r5, r6, r7, lr}
    5d2c:	b091      	sub	sp, #68	; 0x44
    5d2e:	0005      	movs	r5, r0
    5d30:	000c      	movs	r4, r1
    5d32:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    5d34:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5d36:	0008      	movs	r0, r1
    5d38:	4bc6      	ldr	r3, [pc, #792]	; (6054 <usart_init+0x334>)
    5d3a:	4798      	blx	r3
    5d3c:	0002      	movs	r2, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    5d3e:	2805      	cmp	r0, #5
    5d40:	d00d      	beq.n	5d5e <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5d42:	0007      	movs	r7, r0
    5d44:	3712      	adds	r7, #18
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    5d46:	0003      	movs	r3, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    5d48:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    5d4a:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    5d4c:	07c9      	lsls	r1, r1, #31
    5d4e:	d509      	bpl.n	5d64 <usart_init+0x44>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    5d50:	b011      	add	sp, #68	; 0x44
    5d52:	bc3c      	pop	{r2, r3, r4, r5}
    5d54:	4690      	mov	r8, r2
    5d56:	4699      	mov	r9, r3
    5d58:	46a2      	mov	sl, r4
    5d5a:	46ab      	mov	fp, r5
    5d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    5d5e:	2718      	movs	r7, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    5d60:	2301      	movs	r3, #1
    5d62:	e7f1      	b.n	5d48 <usart_init+0x28>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    5d64:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
    5d66:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    5d68:	0789      	lsls	r1, r1, #30
    5d6a:	d4f1      	bmi.n	5d50 <usart_init+0x30>
	if (sercom_index == 5) {
    5d6c:	2a05      	cmp	r2, #5
    5d6e:	d049      	beq.n	5e04 <usart_init+0xe4>
			MCLK->APBCMASK.reg |= mask;
    5d70:	49b9      	ldr	r1, [pc, #740]	; (6058 <usart_init+0x338>)
    5d72:	69c8      	ldr	r0, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    5d74:	2201      	movs	r2, #1
    5d76:	409a      	lsls	r2, r3
    5d78:	0013      	movs	r3, r2
    5d7a:	4303      	orrs	r3, r0
    5d7c:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    5d7e:	a90f      	add	r1, sp, #60	; 0x3c
    5d80:	232d      	movs	r3, #45	; 0x2d
    5d82:	4698      	mov	r8, r3
    5d84:	5cf3      	ldrb	r3, [r6, r3]
    5d86:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5d88:	b2ff      	uxtb	r7, r7
    5d8a:	0038      	movs	r0, r7
    5d8c:	4bb3      	ldr	r3, [pc, #716]	; (605c <usart_init+0x33c>)
    5d8e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    5d90:	0038      	movs	r0, r7
    5d92:	4bb3      	ldr	r3, [pc, #716]	; (6060 <usart_init+0x340>)
    5d94:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5d96:	4643      	mov	r3, r8
    5d98:	5cf0      	ldrb	r0, [r6, r3]
    5d9a:	2100      	movs	r1, #0
    5d9c:	4bb1      	ldr	r3, [pc, #708]	; (6064 <usart_init+0x344>)
    5d9e:	4798      	blx	r3
	module->character_size = config->character_size;
    5da0:	7af3      	ldrb	r3, [r6, #11]
    5da2:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    5da4:	2324      	movs	r3, #36	; 0x24
    5da6:	5cf3      	ldrb	r3, [r6, r3]
    5da8:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    5daa:	2325      	movs	r3, #37	; 0x25
    5dac:	5cf3      	ldrb	r3, [r6, r3]
    5dae:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    5db0:	7ef3      	ldrb	r3, [r6, #27]
    5db2:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    5db4:	7f33      	ldrb	r3, [r6, #28]
    5db6:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5db8:	682b      	ldr	r3, [r5, #0]
    5dba:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5dbc:	0018      	movs	r0, r3
    5dbe:	4ba5      	ldr	r3, [pc, #660]	; (6054 <usart_init+0x334>)
    5dc0:	4798      	blx	r3
	if (sercom_index == 5) {
    5dc2:	2805      	cmp	r0, #5
    5dc4:	d026      	beq.n	5e14 <usart_init+0xf4>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5dc6:	3012      	adds	r0, #18
	uint16_t baud  = 0;
    5dc8:	2200      	movs	r2, #0
    5dca:	230e      	movs	r3, #14
    5dcc:	a906      	add	r1, sp, #24
    5dce:	468c      	mov	ip, r1
    5dd0:	4463      	add	r3, ip
    5dd2:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    5dd4:	8a32      	ldrh	r2, [r6, #16]
    5dd6:	9202      	str	r2, [sp, #8]
    5dd8:	2380      	movs	r3, #128	; 0x80
    5dda:	01db      	lsls	r3, r3, #7
    5ddc:	429a      	cmp	r2, r3
    5dde:	d100      	bne.n	5de2 <usart_init+0xc2>
    5de0:	e0ab      	b.n	5f3a <usart_init+0x21a>
    5de2:	d919      	bls.n	5e18 <usart_init+0xf8>
    5de4:	23c0      	movs	r3, #192	; 0xc0
    5de6:	01db      	lsls	r3, r3, #7
    5de8:	9a02      	ldr	r2, [sp, #8]
    5dea:	429a      	cmp	r2, r3
    5dec:	d100      	bne.n	5df0 <usart_init+0xd0>
    5dee:	e09f      	b.n	5f30 <usart_init+0x210>
    5df0:	2380      	movs	r3, #128	; 0x80
    5df2:	021b      	lsls	r3, r3, #8
    5df4:	429a      	cmp	r2, r3
    5df6:	d000      	beq.n	5dfa <usart_init+0xda>
    5df8:	e127      	b.n	604a <usart_init+0x32a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    5dfa:	2303      	movs	r3, #3
    5dfc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5dfe:	2300      	movs	r3, #0
    5e00:	9307      	str	r3, [sp, #28]
    5e02:	e012      	b.n	5e2a <usart_init+0x10a>
			MCLK->APBDMASK.reg |= mask;
    5e04:	4994      	ldr	r1, [pc, #592]	; (6058 <usart_init+0x338>)
    5e06:	6a08      	ldr	r0, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    5e08:	3a04      	subs	r2, #4
    5e0a:	409a      	lsls	r2, r3
    5e0c:	0013      	movs	r3, r2
    5e0e:	4303      	orrs	r3, r0
    5e10:	620b      	str	r3, [r1, #32]
    5e12:	e7b4      	b.n	5d7e <usart_init+0x5e>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    5e14:	2018      	movs	r0, #24
    5e16:	e7d7      	b.n	5dc8 <usart_init+0xa8>
	switch (config->sample_rate) {
    5e18:	2380      	movs	r3, #128	; 0x80
    5e1a:	019b      	lsls	r3, r3, #6
    5e1c:	429a      	cmp	r2, r3
    5e1e:	d000      	beq.n	5e22 <usart_init+0x102>
    5e20:	e113      	b.n	604a <usart_init+0x32a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5e22:	2310      	movs	r3, #16
    5e24:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5e26:	3b0f      	subs	r3, #15
    5e28:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    5e2a:	6833      	ldr	r3, [r6, #0]
    5e2c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    5e2e:	68f3      	ldr	r3, [r6, #12]
    5e30:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    5e32:	6973      	ldr	r3, [r6, #20]
    5e34:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5e36:	7e33      	ldrb	r3, [r6, #24]
    5e38:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5e3a:	2326      	movs	r3, #38	; 0x26
    5e3c:	5cf3      	ldrb	r3, [r6, r3]
    5e3e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    5e40:	6873      	ldr	r3, [r6, #4]
    5e42:	4699      	mov	r9, r3
	switch (transfer_mode)
    5e44:	2b00      	cmp	r3, #0
    5e46:	d100      	bne.n	5e4a <usart_init+0x12a>
    5e48:	e09f      	b.n	5f8a <usart_init+0x26a>
    5e4a:	2380      	movs	r3, #128	; 0x80
    5e4c:	055b      	lsls	r3, r3, #21
    5e4e:	4599      	cmp	r9, r3
    5e50:	d104      	bne.n	5e5c <usart_init+0x13c>
			if (!config->use_external_clock) {
    5e52:	2327      	movs	r3, #39	; 0x27
    5e54:	5cf3      	ldrb	r3, [r6, r3]
    5e56:	2b00      	cmp	r3, #0
    5e58:	d100      	bne.n	5e5c <usart_init+0x13c>
    5e5a:	e084      	b.n	5f66 <usart_init+0x246>
	if(config->encoding_format_enable) {
    5e5c:	7e73      	ldrb	r3, [r6, #25]
    5e5e:	2b00      	cmp	r3, #0
    5e60:	d002      	beq.n	5e68 <usart_init+0x148>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    5e62:	7eb3      	ldrb	r3, [r6, #26]
    5e64:	4642      	mov	r2, r8
    5e66:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    5e68:	682a      	ldr	r2, [r5, #0]
    5e6a:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    5e6c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    5e6e:	2b00      	cmp	r3, #0
    5e70:	d1fc      	bne.n	5e6c <usart_init+0x14c>
	usart_hw->BAUD.reg = baud;
    5e72:	330e      	adds	r3, #14
    5e74:	aa06      	add	r2, sp, #24
    5e76:	4694      	mov	ip, r2
    5e78:	4463      	add	r3, ip
    5e7a:	881b      	ldrh	r3, [r3, #0]
    5e7c:	4642      	mov	r2, r8
    5e7e:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    5e80:	9b05      	ldr	r3, [sp, #20]
    5e82:	9a03      	ldr	r2, [sp, #12]
    5e84:	4313      	orrs	r3, r2
    5e86:	9a04      	ldr	r2, [sp, #16]
    5e88:	4313      	orrs	r3, r2
    5e8a:	464a      	mov	r2, r9
    5e8c:	4313      	orrs	r3, r2
    5e8e:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5e90:	465b      	mov	r3, fp
    5e92:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    5e94:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5e96:	4653      	mov	r3, sl
    5e98:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    5e9a:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    5e9c:	2327      	movs	r3, #39	; 0x27
    5e9e:	5cf3      	ldrb	r3, [r6, r3]
    5ea0:	2b00      	cmp	r3, #0
    5ea2:	d101      	bne.n	5ea8 <usart_init+0x188>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    5ea4:	3304      	adds	r3, #4
    5ea6:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5ea8:	7e73      	ldrb	r3, [r6, #25]
    5eaa:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5eac:	7f32      	ldrb	r2, [r6, #28]
    5eae:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5eb0:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    5eb2:	7f72      	ldrb	r2, [r6, #29]
    5eb4:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5eb6:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5eb8:	2224      	movs	r2, #36	; 0x24
    5eba:	5cb2      	ldrb	r2, [r6, r2]
    5ebc:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    5ebe:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    5ec0:	2225      	movs	r2, #37	; 0x25
    5ec2:	5cb2      	ldrb	r2, [r6, r2]
    5ec4:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5ec6:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    5ec8:	7ab1      	ldrb	r1, [r6, #10]
    5eca:	7af2      	ldrb	r2, [r6, #11]
    5ecc:	4311      	orrs	r1, r2
    5ece:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    5ed0:	8933      	ldrh	r3, [r6, #8]
    5ed2:	2bff      	cmp	r3, #255	; 0xff
    5ed4:	d07d      	beq.n	5fd2 <usart_init+0x2b2>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    5ed6:	2280      	movs	r2, #128	; 0x80
    5ed8:	0452      	lsls	r2, r2, #17
    5eda:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    5edc:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    5ede:	232c      	movs	r3, #44	; 0x2c
    5ee0:	5cf3      	ldrb	r3, [r6, r3]
    5ee2:	2b00      	cmp	r3, #0
    5ee4:	d103      	bne.n	5eee <usart_init+0x1ce>
    5ee6:	4b60      	ldr	r3, [pc, #384]	; (6068 <usart_init+0x348>)
    5ee8:	789b      	ldrb	r3, [r3, #2]
    5eea:	079b      	lsls	r3, r3, #30
    5eec:	d501      	bpl.n	5ef2 <usart_init+0x1d2>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    5eee:	2380      	movs	r3, #128	; 0x80
    5ef0:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    5ef2:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    5ef4:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    5ef6:	2b00      	cmp	r3, #0
    5ef8:	d1fc      	bne.n	5ef4 <usart_init+0x1d4>
	usart_hw->CTRLB.reg = ctrlb;
    5efa:	4643      	mov	r3, r8
    5efc:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5efe:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    5f00:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    5f02:	2b00      	cmp	r3, #0
    5f04:	d1fc      	bne.n	5f00 <usart_init+0x1e0>
	usart_hw->CTRLA.reg = ctrla;
    5f06:	4643      	mov	r3, r8
    5f08:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5f0a:	ab0e      	add	r3, sp, #56	; 0x38
    5f0c:	2280      	movs	r2, #128	; 0x80
    5f0e:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5f10:	2200      	movs	r2, #0
    5f12:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    5f14:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    5f16:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    5f18:	6b33      	ldr	r3, [r6, #48]	; 0x30
    5f1a:	930a      	str	r3, [sp, #40]	; 0x28
    5f1c:	6b73      	ldr	r3, [r6, #52]	; 0x34
    5f1e:	930b      	str	r3, [sp, #44]	; 0x2c
    5f20:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    5f22:	930c      	str	r3, [sp, #48]	; 0x30
    5f24:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    5f26:	9302      	str	r3, [sp, #8]
    5f28:	930d      	str	r3, [sp, #52]	; 0x34
    5f2a:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5f2c:	ae0a      	add	r6, sp, #40	; 0x28
    5f2e:	e05e      	b.n	5fee <usart_init+0x2ce>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5f30:	2308      	movs	r3, #8
    5f32:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5f34:	3b07      	subs	r3, #7
    5f36:	9307      	str	r3, [sp, #28]
    5f38:	e777      	b.n	5e2a <usart_init+0x10a>
	ctrla = (uint32_t)config->data_order |
    5f3a:	6833      	ldr	r3, [r6, #0]
    5f3c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    5f3e:	68f3      	ldr	r3, [r6, #12]
    5f40:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    5f42:	6973      	ldr	r3, [r6, #20]
    5f44:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5f46:	7e33      	ldrb	r3, [r6, #24]
    5f48:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5f4a:	2326      	movs	r3, #38	; 0x26
    5f4c:	5cf3      	ldrb	r3, [r6, r3]
    5f4e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    5f50:	6873      	ldr	r3, [r6, #4]
    5f52:	4699      	mov	r9, r3
	switch (transfer_mode)
    5f54:	2b00      	cmp	r3, #0
    5f56:	d014      	beq.n	5f82 <usart_init+0x262>
    5f58:	2380      	movs	r3, #128	; 0x80
    5f5a:	055b      	lsls	r3, r3, #21
    5f5c:	4599      	cmp	r9, r3
    5f5e:	d100      	bne.n	5f62 <usart_init+0x242>
    5f60:	e777      	b.n	5e52 <usart_init+0x132>
	enum status_code status_code = STATUS_OK;
    5f62:	2000      	movs	r0, #0
    5f64:	e020      	b.n	5fa8 <usart_init+0x288>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    5f66:	6a33      	ldr	r3, [r6, #32]
    5f68:	001f      	movs	r7, r3
    5f6a:	b2c0      	uxtb	r0, r0
    5f6c:	4b3f      	ldr	r3, [pc, #252]	; (606c <usart_init+0x34c>)
    5f6e:	4798      	blx	r3
    5f70:	0001      	movs	r1, r0
    5f72:	220e      	movs	r2, #14
    5f74:	ab06      	add	r3, sp, #24
    5f76:	469c      	mov	ip, r3
    5f78:	4462      	add	r2, ip
    5f7a:	0038      	movs	r0, r7
    5f7c:	4b3c      	ldr	r3, [pc, #240]	; (6070 <usart_init+0x350>)
    5f7e:	4798      	blx	r3
    5f80:	e012      	b.n	5fa8 <usart_init+0x288>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5f82:	2308      	movs	r3, #8
    5f84:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5f86:	2300      	movs	r3, #0
    5f88:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    5f8a:	2327      	movs	r3, #39	; 0x27
    5f8c:	5cf3      	ldrb	r3, [r6, r3]
    5f8e:	2b00      	cmp	r3, #0
    5f90:	d00e      	beq.n	5fb0 <usart_init+0x290>
				status_code =
    5f92:	9b06      	ldr	r3, [sp, #24]
    5f94:	9300      	str	r3, [sp, #0]
    5f96:	9b07      	ldr	r3, [sp, #28]
    5f98:	220e      	movs	r2, #14
    5f9a:	a906      	add	r1, sp, #24
    5f9c:	468c      	mov	ip, r1
    5f9e:	4462      	add	r2, ip
    5fa0:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    5fa2:	6a30      	ldr	r0, [r6, #32]
    5fa4:	4f33      	ldr	r7, [pc, #204]	; (6074 <usart_init+0x354>)
    5fa6:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    5fa8:	2800      	cmp	r0, #0
    5faa:	d000      	beq.n	5fae <usart_init+0x28e>
    5fac:	e6d0      	b.n	5d50 <usart_init+0x30>
    5fae:	e755      	b.n	5e5c <usart_init+0x13c>
						_sercom_get_async_baud_val(config->baudrate,
    5fb0:	6a33      	ldr	r3, [r6, #32]
    5fb2:	001f      	movs	r7, r3
    5fb4:	b2c0      	uxtb	r0, r0
    5fb6:	4b2d      	ldr	r3, [pc, #180]	; (606c <usart_init+0x34c>)
    5fb8:	4798      	blx	r3
    5fba:	0001      	movs	r1, r0
				status_code =
    5fbc:	9b06      	ldr	r3, [sp, #24]
    5fbe:	9300      	str	r3, [sp, #0]
    5fc0:	9b07      	ldr	r3, [sp, #28]
    5fc2:	220e      	movs	r2, #14
    5fc4:	a806      	add	r0, sp, #24
    5fc6:	4684      	mov	ip, r0
    5fc8:	4462      	add	r2, ip
    5fca:	0038      	movs	r0, r7
    5fcc:	4f29      	ldr	r7, [pc, #164]	; (6074 <usart_init+0x354>)
    5fce:	47b8      	blx	r7
    5fd0:	e7ea      	b.n	5fa8 <usart_init+0x288>
		if(config->lin_slave_enable) {
    5fd2:	7ef3      	ldrb	r3, [r6, #27]
    5fd4:	2b00      	cmp	r3, #0
    5fd6:	d082      	beq.n	5ede <usart_init+0x1be>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    5fd8:	2380      	movs	r3, #128	; 0x80
    5fda:	04db      	lsls	r3, r3, #19
    5fdc:	431f      	orrs	r7, r3
    5fde:	e77e      	b.n	5ede <usart_init+0x1be>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5fe0:	0020      	movs	r0, r4
    5fe2:	4b25      	ldr	r3, [pc, #148]	; (6078 <usart_init+0x358>)
    5fe4:	4798      	blx	r3
    5fe6:	e007      	b.n	5ff8 <usart_init+0x2d8>
    5fe8:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    5fea:	2f04      	cmp	r7, #4
    5fec:	d00d      	beq.n	600a <usart_init+0x2ea>
    5fee:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5ff0:	00bb      	lsls	r3, r7, #2
    5ff2:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    5ff4:	2800      	cmp	r0, #0
    5ff6:	d0f3      	beq.n	5fe0 <usart_init+0x2c0>
		if (current_pinmux != PINMUX_UNUSED) {
    5ff8:	1c43      	adds	r3, r0, #1
    5ffa:	d0f5      	beq.n	5fe8 <usart_init+0x2c8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    5ffc:	a90e      	add	r1, sp, #56	; 0x38
    5ffe:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    6000:	0c00      	lsrs	r0, r0, #16
    6002:	b2c0      	uxtb	r0, r0
    6004:	4b1d      	ldr	r3, [pc, #116]	; (607c <usart_init+0x35c>)
    6006:	4798      	blx	r3
    6008:	e7ee      	b.n	5fe8 <usart_init+0x2c8>
		module->callback[i]            = NULL;
    600a:	2300      	movs	r3, #0
    600c:	60eb      	str	r3, [r5, #12]
    600e:	612b      	str	r3, [r5, #16]
    6010:	616b      	str	r3, [r5, #20]
    6012:	61ab      	str	r3, [r5, #24]
    6014:	61eb      	str	r3, [r5, #28]
    6016:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    6018:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    601a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    601c:	2200      	movs	r2, #0
    601e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    6020:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    6022:	3330      	adds	r3, #48	; 0x30
    6024:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    6026:	3301      	adds	r3, #1
    6028:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    602a:	3301      	adds	r3, #1
    602c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    602e:	3301      	adds	r3, #1
    6030:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    6032:	6828      	ldr	r0, [r5, #0]
    6034:	4b07      	ldr	r3, [pc, #28]	; (6054 <usart_init+0x334>)
    6036:	4798      	blx	r3
    6038:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    603a:	4911      	ldr	r1, [pc, #68]	; (6080 <usart_init+0x360>)
    603c:	4b11      	ldr	r3, [pc, #68]	; (6084 <usart_init+0x364>)
    603e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    6040:	00a4      	lsls	r4, r4, #2
    6042:	4b11      	ldr	r3, [pc, #68]	; (6088 <usart_init+0x368>)
    6044:	50e5      	str	r5, [r4, r3]
	return status_code;
    6046:	2000      	movs	r0, #0
    6048:	e682      	b.n	5d50 <usart_init+0x30>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    604a:	2310      	movs	r3, #16
    604c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    604e:	2300      	movs	r3, #0
    6050:	9307      	str	r3, [sp, #28]
    6052:	e6ea      	b.n	5e2a <usart_init+0x10a>
    6054:	000055d5 	.word	0x000055d5
    6058:	40000400 	.word	0x40000400
    605c:	00006a49 	.word	0x00006a49
    6060:	000069d9 	.word	0x000069d9
    6064:	0000542d 	.word	0x0000542d
    6068:	41002000 	.word	0x41002000
    606c:	00006a6d 	.word	0x00006a6d
    6070:	0000536f 	.word	0x0000536f
    6074:	00005399 	.word	0x00005399
    6078:	00005479 	.word	0x00005479
    607c:	00006b45 	.word	0x00006b45
    6080:	00006281 	.word	0x00006281
    6084:	00005611 	.word	0x00005611
    6088:	200020f0 	.word	0x200020f0

0000608c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    608c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    608e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    6090:	2a00      	cmp	r2, #0
    6092:	d101      	bne.n	6098 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    6094:	0018      	movs	r0, r3
    6096:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    6098:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    609a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    609c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    609e:	2a00      	cmp	r2, #0
    60a0:	d1f8      	bne.n	6094 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    60a2:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    60a4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    60a6:	2a00      	cmp	r2, #0
    60a8:	d1fc      	bne.n	60a4 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    60aa:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    60ac:	2102      	movs	r1, #2
    60ae:	7e1a      	ldrb	r2, [r3, #24]
    60b0:	420a      	tst	r2, r1
    60b2:	d0fc      	beq.n	60ae <usart_write_wait+0x22>
	return STATUS_OK;
    60b4:	2300      	movs	r3, #0
    60b6:	e7ed      	b.n	6094 <usart_write_wait+0x8>

000060b8 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    60b8:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    60ba:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    60bc:	2a00      	cmp	r2, #0
    60be:	d101      	bne.n	60c4 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    60c0:	0018      	movs	r0, r3
    60c2:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    60c4:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    60c6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    60c8:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    60ca:	2a00      	cmp	r2, #0
    60cc:	d1f8      	bne.n	60c0 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    60ce:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    60d0:	7e10      	ldrb	r0, [r2, #24]
    60d2:	0740      	lsls	r0, r0, #29
    60d4:	d5f4      	bpl.n	60c0 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    60d6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    60d8:	2b00      	cmp	r3, #0
    60da:	d1fc      	bne.n	60d6 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    60dc:	8b53      	ldrh	r3, [r2, #26]
    60de:	b2db      	uxtb	r3, r3
	if (error_code) {
    60e0:	0698      	lsls	r0, r3, #26
    60e2:	d01d      	beq.n	6120 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    60e4:	0798      	lsls	r0, r3, #30
    60e6:	d503      	bpl.n	60f0 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    60e8:	2302      	movs	r3, #2
    60ea:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    60ec:	3318      	adds	r3, #24
    60ee:	e7e7      	b.n	60c0 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    60f0:	0758      	lsls	r0, r3, #29
    60f2:	d503      	bpl.n	60fc <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    60f4:	2304      	movs	r3, #4
    60f6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    60f8:	331a      	adds	r3, #26
    60fa:	e7e1      	b.n	60c0 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    60fc:	07d8      	lsls	r0, r3, #31
    60fe:	d503      	bpl.n	6108 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    6100:	2301      	movs	r3, #1
    6102:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    6104:	3312      	adds	r3, #18
    6106:	e7db      	b.n	60c0 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    6108:	06d8      	lsls	r0, r3, #27
    610a:	d503      	bpl.n	6114 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    610c:	2310      	movs	r3, #16
    610e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    6110:	3332      	adds	r3, #50	; 0x32
    6112:	e7d5      	b.n	60c0 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    6114:	069b      	lsls	r3, r3, #26
    6116:	d503      	bpl.n	6120 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    6118:	2320      	movs	r3, #32
    611a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    611c:	3321      	adds	r3, #33	; 0x21
    611e:	e7cf      	b.n	60c0 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    6120:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    6122:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    6124:	2300      	movs	r3, #0
    6126:	e7cb      	b.n	60c0 <usart_read_wait+0x8>

00006128 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    6128:	b5f0      	push	{r4, r5, r6, r7, lr}
    612a:	46ce      	mov	lr, r9
    612c:	4647      	mov	r7, r8
    612e:	b580      	push	{r7, lr}
    6130:	b083      	sub	sp, #12
    6132:	0005      	movs	r5, r0
    6134:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    6136:	2017      	movs	r0, #23
	if (length == 0) {
    6138:	2a00      	cmp	r2, #0
    613a:	d104      	bne.n	6146 <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    613c:	b003      	add	sp, #12
    613e:	bc0c      	pop	{r2, r3}
    6140:	4690      	mov	r8, r2
    6142:	4699      	mov	r9, r3
    6144:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    6146:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    6148:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    614a:	2b00      	cmp	r3, #0
    614c:	d0f6      	beq.n	613c <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    614e:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    6150:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    6152:	2b00      	cmp	r3, #0
    6154:	d1fc      	bne.n	6150 <usart_write_buffer_wait+0x28>
	while (length--) {
    6156:	3a01      	subs	r2, #1
    6158:	b293      	uxth	r3, r2
    615a:	4699      	mov	r9, r3
    615c:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    615e:	2701      	movs	r7, #1
	while (length--) {
    6160:	4b1f      	ldr	r3, [pc, #124]	; (61e0 <usart_write_buffer_wait+0xb8>)
    6162:	4698      	mov	r8, r3
    6164:	e011      	b.n	618a <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
    6166:	1c73      	adds	r3, r6, #1
    6168:	b29b      	uxth	r3, r3
    616a:	9a01      	ldr	r2, [sp, #4]
    616c:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    616e:	796a      	ldrb	r2, [r5, #5]
    6170:	2a01      	cmp	r2, #1
    6172:	d017      	beq.n	61a4 <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
    6174:	b289      	uxth	r1, r1
    6176:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    6178:	0028      	movs	r0, r5
    617a:	4b1a      	ldr	r3, [pc, #104]	; (61e4 <usart_write_buffer_wait+0xbc>)
    617c:	4798      	blx	r3
	while (length--) {
    617e:	464b      	mov	r3, r9
    6180:	3b01      	subs	r3, #1
    6182:	b29b      	uxth	r3, r3
    6184:	4699      	mov	r9, r3
    6186:	4543      	cmp	r3, r8
    6188:	d013      	beq.n	61b2 <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    618a:	7e23      	ldrb	r3, [r4, #24]
    618c:	423b      	tst	r3, r7
    618e:	d1ea      	bne.n	6166 <usart_write_buffer_wait+0x3e>
    6190:	4b13      	ldr	r3, [pc, #76]	; (61e0 <usart_write_buffer_wait+0xb8>)
    6192:	7e22      	ldrb	r2, [r4, #24]
    6194:	423a      	tst	r2, r7
    6196:	d1e6      	bne.n	6166 <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
    6198:	2b01      	cmp	r3, #1
    619a:	d019      	beq.n	61d0 <usart_write_buffer_wait+0xa8>
    619c:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    619e:	2b00      	cmp	r3, #0
    61a0:	d1f7      	bne.n	6192 <usart_write_buffer_wait+0x6a>
    61a2:	e7e0      	b.n	6166 <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    61a4:	3602      	adds	r6, #2
    61a6:	b2b6      	uxth	r6, r6
    61a8:	9a01      	ldr	r2, [sp, #4]
    61aa:	5cd3      	ldrb	r3, [r2, r3]
    61ac:	021b      	lsls	r3, r3, #8
    61ae:	4319      	orrs	r1, r3
    61b0:	e7e2      	b.n	6178 <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    61b2:	7e23      	ldrb	r3, [r4, #24]
    61b4:	079b      	lsls	r3, r3, #30
    61b6:	d40d      	bmi.n	61d4 <usart_write_buffer_wait+0xac>
    61b8:	4b09      	ldr	r3, [pc, #36]	; (61e0 <usart_write_buffer_wait+0xb8>)
    61ba:	2102      	movs	r1, #2
    61bc:	7e22      	ldrb	r2, [r4, #24]
    61be:	420a      	tst	r2, r1
    61c0:	d10a      	bne.n	61d8 <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
    61c2:	2b01      	cmp	r3, #1
    61c4:	d00a      	beq.n	61dc <usart_write_buffer_wait+0xb4>
    61c6:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    61c8:	2b00      	cmp	r3, #0
    61ca:	d1f7      	bne.n	61bc <usart_write_buffer_wait+0x94>
	return STATUS_OK;
    61cc:	2000      	movs	r0, #0
    61ce:	e7b5      	b.n	613c <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    61d0:	2012      	movs	r0, #18
    61d2:	e7b3      	b.n	613c <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    61d4:	2000      	movs	r0, #0
    61d6:	e7b1      	b.n	613c <usart_write_buffer_wait+0x14>
    61d8:	2000      	movs	r0, #0
    61da:	e7af      	b.n	613c <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    61dc:	2012      	movs	r0, #18
    61de:	e7ad      	b.n	613c <usart_write_buffer_wait+0x14>
    61e0:	0000ffff 	.word	0x0000ffff
    61e4:	0000608d 	.word	0x0000608d

000061e8 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    61e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    61ea:	46d6      	mov	lr, sl
    61ec:	b500      	push	{lr}
    61ee:	b084      	sub	sp, #16
    61f0:	0004      	movs	r4, r0
    61f2:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    61f4:	2017      	movs	r0, #23
	if (length == 0) {
    61f6:	2a00      	cmp	r2, #0
    61f8:	d103      	bne.n	6202 <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    61fa:	b004      	add	sp, #16
    61fc:	bc04      	pop	{r2}
    61fe:	4692      	mov	sl, r2
    6200:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    6202:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    6204:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    6206:	2b00      	cmp	r3, #0
    6208:	d0f7      	beq.n	61fa <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    620a:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    620c:	3a01      	subs	r2, #1
    620e:	b293      	uxth	r3, r2
    6210:	469a      	mov	sl, r3
    6212:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    6214:	2704      	movs	r7, #4
    6216:	e019      	b.n	624c <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    6218:	2300      	movs	r3, #0
    621a:	aa02      	add	r2, sp, #8
    621c:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    621e:	1d91      	adds	r1, r2, #6
    6220:	0020      	movs	r0, r4
    6222:	4b15      	ldr	r3, [pc, #84]	; (6278 <usart_read_buffer_wait+0x90>)
    6224:	4798      	blx	r3
		if (retval != STATUS_OK) {
    6226:	2800      	cmp	r0, #0
    6228:	d1e7      	bne.n	61fa <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    622a:	1c69      	adds	r1, r5, #1
    622c:	b289      	uxth	r1, r1
    622e:	ab02      	add	r3, sp, #8
    6230:	88db      	ldrh	r3, [r3, #6]
    6232:	9a01      	ldr	r2, [sp, #4]
    6234:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    6236:	7962      	ldrb	r2, [r4, #5]
    6238:	2a01      	cmp	r2, #1
    623a:	d014      	beq.n	6266 <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    623c:	000d      	movs	r5, r1
	while (length--) {
    623e:	4653      	mov	r3, sl
    6240:	3b01      	subs	r3, #1
    6242:	b29b      	uxth	r3, r3
    6244:	469a      	mov	sl, r3
    6246:	4b0d      	ldr	r3, [pc, #52]	; (627c <usart_read_buffer_wait+0x94>)
    6248:	459a      	cmp	sl, r3
    624a:	d0d6      	beq.n	61fa <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    624c:	7e33      	ldrb	r3, [r6, #24]
    624e:	423b      	tst	r3, r7
    6250:	d1e2      	bne.n	6218 <usart_read_buffer_wait+0x30>
    6252:	4b0a      	ldr	r3, [pc, #40]	; (627c <usart_read_buffer_wait+0x94>)
    6254:	7e32      	ldrb	r2, [r6, #24]
    6256:	423a      	tst	r2, r7
    6258:	d1de      	bne.n	6218 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    625a:	2b01      	cmp	r3, #1
    625c:	d009      	beq.n	6272 <usart_read_buffer_wait+0x8a>
    625e:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    6260:	2b00      	cmp	r3, #0
    6262:	d1f7      	bne.n	6254 <usart_read_buffer_wait+0x6c>
    6264:	e7d8      	b.n	6218 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    6266:	3502      	adds	r5, #2
    6268:	b2ad      	uxth	r5, r5
    626a:	0a1b      	lsrs	r3, r3, #8
    626c:	9a01      	ldr	r2, [sp, #4]
    626e:	5453      	strb	r3, [r2, r1]
    6270:	e7e5      	b.n	623e <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    6272:	2012      	movs	r0, #18
    6274:	e7c1      	b.n	61fa <usart_read_buffer_wait+0x12>
    6276:	46c0      	nop			; (mov r8, r8)
    6278:	000060b9 	.word	0x000060b9
    627c:	0000ffff 	.word	0x0000ffff

00006280 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    6280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    6282:	0080      	lsls	r0, r0, #2
    6284:	4b62      	ldr	r3, [pc, #392]	; (6410 <_usart_interrupt_handler+0x190>)
    6286:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    6288:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    628a:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    628c:	2b00      	cmp	r3, #0
    628e:	d1fc      	bne.n	628a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    6290:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    6292:	7da6      	ldrb	r6, [r4, #22]
    6294:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    6296:	2330      	movs	r3, #48	; 0x30
    6298:	5ceb      	ldrb	r3, [r5, r3]
    629a:	2231      	movs	r2, #49	; 0x31
    629c:	5caf      	ldrb	r7, [r5, r2]
    629e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    62a0:	07f3      	lsls	r3, r6, #31
    62a2:	d522      	bpl.n	62ea <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    62a4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    62a6:	b29b      	uxth	r3, r3
    62a8:	2b00      	cmp	r3, #0
    62aa:	d01c      	beq.n	62e6 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    62ac:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    62ae:	7813      	ldrb	r3, [r2, #0]
    62b0:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    62b2:	1c51      	adds	r1, r2, #1
    62b4:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    62b6:	7969      	ldrb	r1, [r5, #5]
    62b8:	2901      	cmp	r1, #1
    62ba:	d00e      	beq.n	62da <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    62bc:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    62be:	05db      	lsls	r3, r3, #23
    62c0:	0ddb      	lsrs	r3, r3, #23
    62c2:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    62c4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    62c6:	3b01      	subs	r3, #1
    62c8:	b29b      	uxth	r3, r3
    62ca:	85eb      	strh	r3, [r5, #46]	; 0x2e
    62cc:	2b00      	cmp	r3, #0
    62ce:	d10c      	bne.n	62ea <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    62d0:	3301      	adds	r3, #1
    62d2:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    62d4:	3301      	adds	r3, #1
    62d6:	75a3      	strb	r3, [r4, #22]
    62d8:	e007      	b.n	62ea <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    62da:	7851      	ldrb	r1, [r2, #1]
    62dc:	0209      	lsls	r1, r1, #8
    62de:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    62e0:	3202      	adds	r2, #2
    62e2:	62aa      	str	r2, [r5, #40]	; 0x28
    62e4:	e7eb      	b.n	62be <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    62e6:	2301      	movs	r3, #1
    62e8:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    62ea:	07b3      	lsls	r3, r6, #30
    62ec:	d506      	bpl.n	62fc <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    62ee:	2302      	movs	r3, #2
    62f0:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    62f2:	2200      	movs	r2, #0
    62f4:	3331      	adds	r3, #49	; 0x31
    62f6:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    62f8:	07fb      	lsls	r3, r7, #31
    62fa:	d41a      	bmi.n	6332 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    62fc:	0773      	lsls	r3, r6, #29
    62fe:	d565      	bpl.n	63cc <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    6300:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    6302:	b29b      	uxth	r3, r3
    6304:	2b00      	cmp	r3, #0
    6306:	d05f      	beq.n	63c8 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6308:	8b63      	ldrh	r3, [r4, #26]
    630a:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    630c:	071a      	lsls	r2, r3, #28
    630e:	d414      	bmi.n	633a <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6310:	223f      	movs	r2, #63	; 0x3f
    6312:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    6314:	2b00      	cmp	r3, #0
    6316:	d034      	beq.n	6382 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    6318:	079a      	lsls	r2, r3, #30
    631a:	d511      	bpl.n	6340 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    631c:	221a      	movs	r2, #26
    631e:	2332      	movs	r3, #50	; 0x32
    6320:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    6322:	3b30      	subs	r3, #48	; 0x30
    6324:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    6326:	077b      	lsls	r3, r7, #29
    6328:	d550      	bpl.n	63cc <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    632a:	0028      	movs	r0, r5
    632c:	696b      	ldr	r3, [r5, #20]
    632e:	4798      	blx	r3
    6330:	e04c      	b.n	63cc <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    6332:	0028      	movs	r0, r5
    6334:	68eb      	ldr	r3, [r5, #12]
    6336:	4798      	blx	r3
    6338:	e7e0      	b.n	62fc <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    633a:	2237      	movs	r2, #55	; 0x37
    633c:	4013      	ands	r3, r2
    633e:	e7e9      	b.n	6314 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    6340:	075a      	lsls	r2, r3, #29
    6342:	d505      	bpl.n	6350 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    6344:	221e      	movs	r2, #30
    6346:	2332      	movs	r3, #50	; 0x32
    6348:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    634a:	3b2e      	subs	r3, #46	; 0x2e
    634c:	8363      	strh	r3, [r4, #26]
    634e:	e7ea      	b.n	6326 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    6350:	07da      	lsls	r2, r3, #31
    6352:	d505      	bpl.n	6360 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    6354:	2213      	movs	r2, #19
    6356:	2332      	movs	r3, #50	; 0x32
    6358:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    635a:	3b31      	subs	r3, #49	; 0x31
    635c:	8363      	strh	r3, [r4, #26]
    635e:	e7e2      	b.n	6326 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    6360:	06da      	lsls	r2, r3, #27
    6362:	d505      	bpl.n	6370 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    6364:	2242      	movs	r2, #66	; 0x42
    6366:	2332      	movs	r3, #50	; 0x32
    6368:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    636a:	3b22      	subs	r3, #34	; 0x22
    636c:	8363      	strh	r3, [r4, #26]
    636e:	e7da      	b.n	6326 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    6370:	2220      	movs	r2, #32
    6372:	421a      	tst	r2, r3
    6374:	d0d7      	beq.n	6326 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    6376:	3221      	adds	r2, #33	; 0x21
    6378:	2332      	movs	r3, #50	; 0x32
    637a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    637c:	3b12      	subs	r3, #18
    637e:	8363      	strh	r3, [r4, #26]
    6380:	e7d1      	b.n	6326 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    6382:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    6384:	05db      	lsls	r3, r3, #23
    6386:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    6388:	b2da      	uxtb	r2, r3
    638a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    638c:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    638e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    6390:	1c51      	adds	r1, r2, #1
    6392:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    6394:	7969      	ldrb	r1, [r5, #5]
    6396:	2901      	cmp	r1, #1
    6398:	d010      	beq.n	63bc <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    639a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    639c:	3b01      	subs	r3, #1
    639e:	b29b      	uxth	r3, r3
    63a0:	85ab      	strh	r3, [r5, #44]	; 0x2c
    63a2:	2b00      	cmp	r3, #0
    63a4:	d112      	bne.n	63cc <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    63a6:	3304      	adds	r3, #4
    63a8:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    63aa:	2200      	movs	r2, #0
    63ac:	332e      	adds	r3, #46	; 0x2e
    63ae:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    63b0:	07bb      	lsls	r3, r7, #30
    63b2:	d50b      	bpl.n	63cc <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    63b4:	0028      	movs	r0, r5
    63b6:	692b      	ldr	r3, [r5, #16]
    63b8:	4798      	blx	r3
    63ba:	e007      	b.n	63cc <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    63bc:	0a1b      	lsrs	r3, r3, #8
    63be:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    63c0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    63c2:	3301      	adds	r3, #1
    63c4:	626b      	str	r3, [r5, #36]	; 0x24
    63c6:	e7e8      	b.n	639a <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    63c8:	2304      	movs	r3, #4
    63ca:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    63cc:	06f3      	lsls	r3, r6, #27
    63ce:	d504      	bpl.n	63da <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    63d0:	2310      	movs	r3, #16
    63d2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    63d4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    63d6:	06fb      	lsls	r3, r7, #27
    63d8:	d40e      	bmi.n	63f8 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    63da:	06b3      	lsls	r3, r6, #26
    63dc:	d504      	bpl.n	63e8 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    63de:	2320      	movs	r3, #32
    63e0:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    63e2:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    63e4:	073b      	lsls	r3, r7, #28
    63e6:	d40b      	bmi.n	6400 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    63e8:	0733      	lsls	r3, r6, #28
    63ea:	d504      	bpl.n	63f6 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    63ec:	2308      	movs	r3, #8
    63ee:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    63f0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    63f2:	06bb      	lsls	r3, r7, #26
    63f4:	d408      	bmi.n	6408 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    63f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    63f8:	0028      	movs	r0, r5
    63fa:	69eb      	ldr	r3, [r5, #28]
    63fc:	4798      	blx	r3
    63fe:	e7ec      	b.n	63da <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    6400:	0028      	movs	r0, r5
    6402:	69ab      	ldr	r3, [r5, #24]
    6404:	4798      	blx	r3
    6406:	e7ef      	b.n	63e8 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    6408:	6a2b      	ldr	r3, [r5, #32]
    640a:	0028      	movs	r0, r5
    640c:	4798      	blx	r3
}
    640e:	e7f2      	b.n	63f6 <_usart_interrupt_handler+0x176>
    6410:	200020f0 	.word	0x200020f0

00006414 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    6414:	b510      	push	{r4, lr}
	switch (clock_source) {
    6416:	2808      	cmp	r0, #8
    6418:	d803      	bhi.n	6422 <system_clock_source_get_hz+0xe>
    641a:	0080      	lsls	r0, r0, #2
    641c:	4b1c      	ldr	r3, [pc, #112]	; (6490 <system_clock_source_get_hz+0x7c>)
    641e:	581b      	ldr	r3, [r3, r0]
    6420:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    6422:	2000      	movs	r0, #0
    6424:	e032      	b.n	648c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    6426:	4b1b      	ldr	r3, [pc, #108]	; (6494 <system_clock_source_get_hz+0x80>)
    6428:	6918      	ldr	r0, [r3, #16]
    642a:	e02f      	b.n	648c <system_clock_source_get_hz+0x78>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    642c:	4b1a      	ldr	r3, [pc, #104]	; (6498 <system_clock_source_get_hz+0x84>)
    642e:	7d18      	ldrb	r0, [r3, #20]
    6430:	0700      	lsls	r0, r0, #28
    6432:	0f80      	lsrs	r0, r0, #30
    6434:	1c43      	adds	r3, r0, #1
    6436:	4819      	ldr	r0, [pc, #100]	; (649c <system_clock_source_get_hz+0x88>)
    6438:	4358      	muls	r0, r3
    643a:	e027      	b.n	648c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    643c:	4b15      	ldr	r3, [pc, #84]	; (6494 <system_clock_source_get_hz+0x80>)
    643e:	6958      	ldr	r0, [r3, #20]
    6440:	e024      	b.n	648c <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    6442:	4b14      	ldr	r3, [pc, #80]	; (6494 <system_clock_source_get_hz+0x80>)
    6444:	681b      	ldr	r3, [r3, #0]
			return 0;
    6446:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    6448:	079b      	lsls	r3, r3, #30
    644a:	d51f      	bpl.n	648c <system_clock_source_get_hz+0x78>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    644c:	4912      	ldr	r1, [pc, #72]	; (6498 <system_clock_source_get_hz+0x84>)
    644e:	2280      	movs	r2, #128	; 0x80
    6450:	0052      	lsls	r2, r2, #1
    6452:	68cb      	ldr	r3, [r1, #12]
    6454:	4213      	tst	r3, r2
    6456:	d0fc      	beq.n	6452 <system_clock_source_get_hz+0x3e>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    6458:	4b0e      	ldr	r3, [pc, #56]	; (6494 <system_clock_source_get_hz+0x80>)
    645a:	681b      	ldr	r3, [r3, #0]
    645c:	075b      	lsls	r3, r3, #29
    645e:	d401      	bmi.n	6464 <system_clock_source_get_hz+0x50>
		return 48000000UL;
    6460:	480f      	ldr	r0, [pc, #60]	; (64a0 <system_clock_source_get_hz+0x8c>)
    6462:	e013      	b.n	648c <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    6464:	2000      	movs	r0, #0
    6466:	4b0f      	ldr	r3, [pc, #60]	; (64a4 <system_clock_source_get_hz+0x90>)
    6468:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    646a:	4b0a      	ldr	r3, [pc, #40]	; (6494 <system_clock_source_get_hz+0x80>)
    646c:	689b      	ldr	r3, [r3, #8]
    646e:	041b      	lsls	r3, r3, #16
    6470:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    6472:	4358      	muls	r0, r3
    6474:	e00a      	b.n	648c <system_clock_source_get_hz+0x78>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    6476:	2328      	movs	r3, #40	; 0x28
    6478:	4a07      	ldr	r2, [pc, #28]	; (6498 <system_clock_source_get_hz+0x84>)
    647a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    647c:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    647e:	079b      	lsls	r3, r3, #30
    6480:	d504      	bpl.n	648c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    6482:	4b04      	ldr	r3, [pc, #16]	; (6494 <system_clock_source_get_hz+0x80>)
    6484:	68d8      	ldr	r0, [r3, #12]
    6486:	e001      	b.n	648c <system_clock_source_get_hz+0x78>
		return 32768UL;
    6488:	2080      	movs	r0, #128	; 0x80
    648a:	0200      	lsls	r0, r0, #8
	}
}
    648c:	bd10      	pop	{r4, pc}
    648e:	46c0      	nop			; (mov r8, r8)
    6490:	00016838 	.word	0x00016838
    6494:	200002e4 	.word	0x200002e4
    6498:	40000c00 	.word	0x40000c00
    649c:	003d0900 	.word	0x003d0900
    64a0:	02dc6c00 	.word	0x02dc6c00
    64a4:	00006a6d 	.word	0x00006a6d

000064a8 <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    64a8:	b570      	push	{r4, r5, r6, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    64aa:	4c0b      	ldr	r4, [pc, #44]	; (64d8 <system_clock_source_osc16m_set_config+0x30>)
    64ac:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
    64ae:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
    64b0:	7846      	ldrb	r6, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
    64b2:	7802      	ldrb	r2, [r0, #0]
    64b4:	2103      	movs	r1, #3
    64b6:	4011      	ands	r1, r2
    64b8:	0089      	lsls	r1, r1, #2
    64ba:	220c      	movs	r2, #12
    64bc:	4393      	bics	r3, r2
    64be:	430b      	orrs	r3, r1
    64c0:	3a0b      	subs	r2, #11
    64c2:	4032      	ands	r2, r6
    64c4:	0192      	lsls	r2, r2, #6
    64c6:	2140      	movs	r1, #64	; 0x40
    64c8:	438b      	bics	r3, r1
    64ca:	4313      	orrs	r3, r2
    64cc:	01ed      	lsls	r5, r5, #7
    64ce:	227f      	movs	r2, #127	; 0x7f
    64d0:	4013      	ands	r3, r2
    64d2:	432b      	orrs	r3, r5
    64d4:	7523      	strb	r3, [r4, #20]
}
    64d6:	bd70      	pop	{r4, r5, r6, pc}
    64d8:	40000c00 	.word	0x40000c00

000064dc <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    64dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    64de:	46d6      	mov	lr, sl
    64e0:	464f      	mov	r7, r9
    64e2:	4646      	mov	r6, r8
    64e4:	b5c0      	push	{r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    64e6:	4b20      	ldr	r3, [pc, #128]	; (6568 <system_clock_source_xosc32k_set_config+0x8c>)
    64e8:	469a      	mov	sl, r3
    64ea:	695b      	ldr	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    64ec:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    64ee:	7801      	ldrb	r1, [r0, #0]
    64f0:	424c      	negs	r4, r1
    64f2:	414c      	adcs	r4, r1
    64f4:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    64f6:	7881      	ldrb	r1, [r0, #2]
    64f8:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    64fa:	78c1      	ldrb	r1, [r0, #3]
    64fc:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    64fe:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    6500:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    6502:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    6504:	6840      	ldr	r0, [r0, #4]
    6506:	4919      	ldr	r1, [pc, #100]	; (656c <system_clock_source_xosc32k_set_config+0x90>)
    6508:	6148      	str	r0, [r1, #20]

	OSC32KCTRL->XOSC32K = temp;
    650a:	2101      	movs	r1, #1
    650c:	4648      	mov	r0, r9
    650e:	0080      	lsls	r0, r0, #2
    6510:	2204      	movs	r2, #4
    6512:	4393      	bics	r3, r2
    6514:	4303      	orrs	r3, r0
    6516:	4640      	mov	r0, r8
    6518:	4008      	ands	r0, r1
    651a:	00c0      	lsls	r0, r0, #3
    651c:	3204      	adds	r2, #4
    651e:	4393      	bics	r3, r2
    6520:	4303      	orrs	r3, r0
    6522:	4660      	mov	r0, ip
    6524:	4008      	ands	r0, r1
    6526:	0100      	lsls	r0, r0, #4
    6528:	3208      	adds	r2, #8
    652a:	4393      	bics	r3, r2
    652c:	4303      	orrs	r3, r0
    652e:	400f      	ands	r7, r1
    6530:	01bf      	lsls	r7, r7, #6
    6532:	2040      	movs	r0, #64	; 0x40
    6534:	4383      	bics	r3, r0
    6536:	433b      	orrs	r3, r7
    6538:	400e      	ands	r6, r1
    653a:	01f6      	lsls	r6, r6, #7
    653c:	3040      	adds	r0, #64	; 0x40
    653e:	4383      	bics	r3, r0
    6540:	4333      	orrs	r3, r6
    6542:	3879      	subs	r0, #121	; 0x79
    6544:	4005      	ands	r5, r0
    6546:	022d      	lsls	r5, r5, #8
    6548:	4809      	ldr	r0, [pc, #36]	; (6570 <system_clock_source_xosc32k_set_config+0x94>)
    654a:	4003      	ands	r3, r0
    654c:	432b      	orrs	r3, r5
    654e:	4021      	ands	r1, r4
    6550:	0309      	lsls	r1, r1, #12
    6552:	4808      	ldr	r0, [pc, #32]	; (6574 <system_clock_source_xosc32k_set_config+0x98>)
    6554:	4003      	ands	r3, r0
    6556:	430b      	orrs	r3, r1
    6558:	4652      	mov	r2, sl
    655a:	6153      	str	r3, [r2, #20]
}
    655c:	bc1c      	pop	{r2, r3, r4}
    655e:	4690      	mov	r8, r2
    6560:	4699      	mov	r9, r3
    6562:	46a2      	mov	sl, r4
    6564:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6566:	46c0      	nop			; (mov r8, r8)
    6568:	40001000 	.word	0x40001000
    656c:	200002e4 	.word	0x200002e4
    6570:	fffff8ff 	.word	0xfffff8ff
    6574:	ffffefff 	.word	0xffffefff

00006578 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    6578:	2808      	cmp	r0, #8
    657a:	d803      	bhi.n	6584 <system_clock_source_enable+0xc>
    657c:	0080      	lsls	r0, r0, #2
    657e:	4b29      	ldr	r3, [pc, #164]	; (6624 <system_clock_source_enable+0xac>)
    6580:	581b      	ldr	r3, [r3, r0]
    6582:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6584:	2017      	movs	r0, #23
    6586:	e04b      	b.n	6620 <system_clock_source_enable+0xa8>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    6588:	4a27      	ldr	r2, [pc, #156]	; (6628 <system_clock_source_enable+0xb0>)
    658a:	7d13      	ldrb	r3, [r2, #20]
    658c:	2102      	movs	r1, #2
    658e:	430b      	orrs	r3, r1
    6590:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    6592:	2000      	movs	r0, #0
    6594:	e044      	b.n	6620 <system_clock_source_enable+0xa8>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    6596:	4a25      	ldr	r2, [pc, #148]	; (662c <system_clock_source_enable+0xb4>)
    6598:	6993      	ldr	r3, [r2, #24]
    659a:	2102      	movs	r1, #2
    659c:	430b      	orrs	r3, r1
    659e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    65a0:	2000      	movs	r0, #0
		break;
    65a2:	e03d      	b.n	6620 <system_clock_source_enable+0xa8>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    65a4:	4a20      	ldr	r2, [pc, #128]	; (6628 <system_clock_source_enable+0xb0>)
    65a6:	8a13      	ldrh	r3, [r2, #16]
    65a8:	2102      	movs	r1, #2
    65aa:	430b      	orrs	r3, r1
    65ac:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    65ae:	2000      	movs	r0, #0
		break;
    65b0:	e036      	b.n	6620 <system_clock_source_enable+0xa8>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    65b2:	4a1e      	ldr	r2, [pc, #120]	; (662c <system_clock_source_enable+0xb4>)
    65b4:	6953      	ldr	r3, [r2, #20]
    65b6:	2102      	movs	r1, #2
    65b8:	430b      	orrs	r3, r1
    65ba:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    65bc:	2000      	movs	r0, #0
		break;
    65be:	e02f      	b.n	6620 <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    65c0:	491b      	ldr	r1, [pc, #108]	; (6630 <system_clock_source_enable+0xb8>)
    65c2:	680b      	ldr	r3, [r1, #0]
    65c4:	2202      	movs	r2, #2
    65c6:	4313      	orrs	r3, r2
    65c8:	600b      	str	r3, [r1, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    65ca:	4b17      	ldr	r3, [pc, #92]	; (6628 <system_clock_source_enable+0xb0>)
    65cc:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    65ce:	0019      	movs	r1, r3
    65d0:	32fe      	adds	r2, #254	; 0xfe
    65d2:	68cb      	ldr	r3, [r1, #12]
    65d4:	4213      	tst	r3, r2
    65d6:	d0fc      	beq.n	65d2 <system_clock_source_enable+0x5a>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    65d8:	4a15      	ldr	r2, [pc, #84]	; (6630 <system_clock_source_enable+0xb8>)
    65da:	6891      	ldr	r1, [r2, #8]
    65dc:	4b12      	ldr	r3, [pc, #72]	; (6628 <system_clock_source_enable+0xb0>)
    65de:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    65e0:	6852      	ldr	r2, [r2, #4]
    65e2:	61da      	str	r2, [r3, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
    65e4:	2200      	movs	r2, #0
    65e6:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    65e8:	0019      	movs	r1, r3
    65ea:	3201      	adds	r2, #1
    65ec:	32ff      	adds	r2, #255	; 0xff
    65ee:	68cb      	ldr	r3, [r1, #12]
    65f0:	4213      	tst	r3, r2
    65f2:	d0fc      	beq.n	65ee <system_clock_source_enable+0x76>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    65f4:	4b0e      	ldr	r3, [pc, #56]	; (6630 <system_clock_source_enable+0xb8>)
    65f6:	681b      	ldr	r3, [r3, #0]
    65f8:	b29b      	uxth	r3, r3
    65fa:	4a0b      	ldr	r2, [pc, #44]	; (6628 <system_clock_source_enable+0xb0>)
    65fc:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    65fe:	2000      	movs	r0, #0
    6600:	e00e      	b.n	6620 <system_clock_source_enable+0xa8>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    6602:	4909      	ldr	r1, [pc, #36]	; (6628 <system_clock_source_enable+0xb0>)
    6604:	2228      	movs	r2, #40	; 0x28
    6606:	5c8b      	ldrb	r3, [r1, r2]
    6608:	2002      	movs	r0, #2
    660a:	4303      	orrs	r3, r0
    660c:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    660e:	0008      	movs	r0, r1
    6610:	2138      	movs	r1, #56	; 0x38
    6612:	3a26      	subs	r2, #38	; 0x26
    6614:	5c43      	ldrb	r3, [r0, r1]
    6616:	4213      	tst	r3, r2
    6618:	d1fc      	bne.n	6614 <system_clock_source_enable+0x9c>
	return STATUS_OK;
    661a:	2000      	movs	r0, #0
    661c:	e000      	b.n	6620 <system_clock_source_enable+0xa8>
		return STATUS_OK;
    661e:	2000      	movs	r0, #0
}
    6620:	4770      	bx	lr
    6622:	46c0      	nop			; (mov r8, r8)
    6624:	0001685c 	.word	0x0001685c
    6628:	40000c00 	.word	0x40000c00
    662c:	40001000 	.word	0x40001000
    6630:	200002e4 	.word	0x200002e4

00006634 <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    6634:	2808      	cmp	r0, #8
    6636:	d832      	bhi.n	669e <system_clock_source_disable+0x6a>
    6638:	0080      	lsls	r0, r0, #2
    663a:	4b1a      	ldr	r3, [pc, #104]	; (66a4 <system_clock_source_disable+0x70>)
    663c:	581b      	ldr	r3, [r3, r0]
    663e:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    6640:	4a19      	ldr	r2, [pc, #100]	; (66a8 <system_clock_source_disable+0x74>)
    6642:	7d13      	ldrb	r3, [r2, #20]
    6644:	2102      	movs	r1, #2
    6646:	438b      	bics	r3, r1
    6648:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    664a:	2000      	movs	r0, #0
}
    664c:	4770      	bx	lr
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    664e:	4a17      	ldr	r2, [pc, #92]	; (66ac <system_clock_source_disable+0x78>)
    6650:	6993      	ldr	r3, [r2, #24]
    6652:	2102      	movs	r1, #2
    6654:	438b      	bics	r3, r1
    6656:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    6658:	2000      	movs	r0, #0
		break;
    665a:	e7f7      	b.n	664c <system_clock_source_disable+0x18>
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    665c:	4a12      	ldr	r2, [pc, #72]	; (66a8 <system_clock_source_disable+0x74>)
    665e:	8a13      	ldrh	r3, [r2, #16]
    6660:	2102      	movs	r1, #2
    6662:	438b      	bics	r3, r1
    6664:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    6666:	2000      	movs	r0, #0
		break;
    6668:	e7f0      	b.n	664c <system_clock_source_disable+0x18>
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    666a:	4a10      	ldr	r2, [pc, #64]	; (66ac <system_clock_source_disable+0x78>)
    666c:	6953      	ldr	r3, [r2, #20]
    666e:	2102      	movs	r1, #2
    6670:	438b      	bics	r3, r1
    6672:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    6674:	2000      	movs	r0, #0
		break;
    6676:	e7e9      	b.n	664c <system_clock_source_disable+0x18>
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    6678:	4b0d      	ldr	r3, [pc, #52]	; (66b0 <system_clock_source_disable+0x7c>)
    667a:	681a      	ldr	r2, [r3, #0]
    667c:	2102      	movs	r1, #2
    667e:	438a      	bics	r2, r1
    6680:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    6682:	681b      	ldr	r3, [r3, #0]
    6684:	b29b      	uxth	r3, r3
    6686:	4a08      	ldr	r2, [pc, #32]	; (66a8 <system_clock_source_disable+0x74>)
    6688:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    668a:	2000      	movs	r0, #0
		break;
    668c:	e7de      	b.n	664c <system_clock_source_disable+0x18>
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    668e:	4906      	ldr	r1, [pc, #24]	; (66a8 <system_clock_source_disable+0x74>)
    6690:	2228      	movs	r2, #40	; 0x28
    6692:	5c8b      	ldrb	r3, [r1, r2]
    6694:	2002      	movs	r0, #2
    6696:	4383      	bics	r3, r0
    6698:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    669a:	2000      	movs	r0, #0
		break;
    669c:	e7d6      	b.n	664c <system_clock_source_disable+0x18>
		return STATUS_ERR_INVALID_ARG;
    669e:	2017      	movs	r0, #23
    66a0:	e7d4      	b.n	664c <system_clock_source_disable+0x18>
    66a2:	46c0      	nop			; (mov r8, r8)
    66a4:	00016880 	.word	0x00016880
    66a8:	40000c00 	.word	0x40000c00
    66ac:	40001000 	.word	0x40001000
    66b0:	200002e4 	.word	0x200002e4

000066b4 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    66b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    66b6:	46d6      	mov	lr, sl
    66b8:	464f      	mov	r7, r9
    66ba:	4646      	mov	r6, r8
    66bc:	b5c0      	push	{r6, r7, lr}
    66be:	b088      	sub	sp, #32
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    66c0:	2280      	movs	r2, #128	; 0x80
    66c2:	0052      	lsls	r2, r2, #1
    66c4:	4b56      	ldr	r3, [pc, #344]	; (6820 <system_clock_init+0x16c>)
    66c6:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    66c8:	3afd      	subs	r2, #253	; 0xfd
    66ca:	4b56      	ldr	r3, [pc, #344]	; (6824 <system_clock_init+0x170>)
    66cc:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    66ce:	4a56      	ldr	r2, [pc, #344]	; (6828 <system_clock_init+0x174>)
    66d0:	6853      	ldr	r3, [r2, #4]
    66d2:	211e      	movs	r1, #30
    66d4:	438b      	bics	r3, r1
    66d6:	391a      	subs	r1, #26
    66d8:	430b      	orrs	r3, r1
    66da:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    66dc:	2380      	movs	r3, #128	; 0x80
    66de:	05db      	lsls	r3, r3, #23
    66e0:	789b      	ldrb	r3, [r3, #2]
    66e2:	2b02      	cmp	r3, #2
    66e4:	d00f      	beq.n	6706 <system_clock_init+0x52>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB || SAMR34J || SAMR35J || (WLR089U0)
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    66e6:	2380      	movs	r3, #128	; 0x80
    66e8:	05db      	lsls	r3, r3, #23
    66ea:	789b      	ldrb	r3, [r3, #2]
    66ec:	b25b      	sxtb	r3, r3
    66ee:	2b00      	cmp	r3, #0
    66f0:	db09      	blt.n	6706 <system_clock_init+0x52>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    66f2:	2380      	movs	r3, #128	; 0x80
    66f4:	05db      	lsls	r3, r3, #23
    66f6:	2201      	movs	r2, #1
    66f8:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    66fa:	3201      	adds	r2, #1
    66fc:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    66fe:	001a      	movs	r2, r3
    6700:	7993      	ldrb	r3, [r2, #6]
    6702:	2b00      	cmp	r3, #0
    6704:	d0fc      	beq.n	6700 <system_clock_init+0x4c>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    6706:	a805      	add	r0, sp, #20
    6708:	2300      	movs	r3, #0
    670a:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    670c:	2280      	movs	r2, #128	; 0x80
    670e:	0212      	lsls	r2, r2, #8
    6710:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    6712:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    6714:	2201      	movs	r2, #1
    6716:	70c2      	strb	r2, [r0, #3]
	config->run_in_standby      = false;
    6718:	7203      	strb	r3, [r0, #8]
	config->write_once          = false;
    671a:	7283      	strb	r3, [r0, #10]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    671c:	3203      	adds	r2, #3
    671e:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    6720:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    6722:	4b42      	ldr	r3, [pc, #264]	; (682c <system_clock_init+0x178>)
    6724:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    6726:	2005      	movs	r0, #5
    6728:	4b41      	ldr	r3, [pc, #260]	; (6830 <system_clock_init+0x17c>)
    672a:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    672c:	4941      	ldr	r1, [pc, #260]	; (6834 <system_clock_init+0x180>)
    672e:	2201      	movs	r2, #1
    6730:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    6732:	421a      	tst	r2, r3
    6734:	d0fc      	beq.n	6730 <system_clock_init+0x7c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		OSC32KCTRL->XOSC32K.bit.ONDEMAND = 1;
    6736:	4a3f      	ldr	r2, [pc, #252]	; (6834 <system_clock_init+0x180>)
    6738:	6953      	ldr	r3, [r2, #20]
    673a:	2180      	movs	r1, #128	; 0x80
    673c:	430b      	orrs	r3, r1
    673e:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    6740:	a902      	add	r1, sp, #8
    6742:	2501      	movs	r5, #1
    6744:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    6746:	2400      	movs	r4, #0
    6748:	704c      	strb	r4, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    674a:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    674c:	724c      	strb	r4, [r1, #9]
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    674e:	2303      	movs	r3, #3
    6750:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    6752:	2000      	movs	r0, #0
    6754:	4b38      	ldr	r3, [pc, #224]	; (6838 <system_clock_init+0x184>)
    6756:	4798      	blx	r3
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    6758:	2006      	movs	r0, #6
    675a:	4b38      	ldr	r3, [pc, #224]	; (683c <system_clock_init+0x188>)
    675c:	4798      	blx	r3
	config->run_in_standby  = false;
    675e:	a801      	add	r0, sp, #4
    6760:	7044      	strb	r4, [r0, #1]
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    6762:	7005      	strb	r5, [r0, #0]
	osc16m_conf.on_demand       = 0;
    6764:	7084      	strb	r4, [r0, #2]
	system_clock_source_osc16m_set_config(&osc16m_conf);
    6766:	4b36      	ldr	r3, [pc, #216]	; (6840 <system_clock_init+0x18c>)
    6768:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    676a:	2006      	movs	r0, #6
    676c:	4b30      	ldr	r3, [pc, #192]	; (6830 <system_clock_init+0x17c>)
    676e:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    6770:	492b      	ldr	r1, [pc, #172]	; (6820 <system_clock_init+0x16c>)
    6772:	2210      	movs	r2, #16
    6774:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    6776:	421a      	tst	r2, r3
    6778:	d0fc      	beq.n	6774 <system_clock_init+0xc0>
	config->division_factor    = 1;
    677a:	ac02      	add	r4, sp, #8
    677c:	2601      	movs	r6, #1
    677e:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    6780:	2500      	movs	r5, #0
    6782:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    6784:	2306      	movs	r3, #6
    6786:	469a      	mov	sl, r3
    6788:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    678a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    678c:	7265      	strb	r5, [r4, #9]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    678e:	0021      	movs	r1, r4
    6790:	2000      	movs	r0, #0
    6792:	4b29      	ldr	r3, [pc, #164]	; (6838 <system_clock_init+0x184>)
    6794:	4698      	mov	r8, r3
    6796:	4798      	blx	r3
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    6798:	4b2a      	ldr	r3, [pc, #168]	; (6844 <system_clock_init+0x190>)
    679a:	4798      	blx	r3
	config->division_factor    = 1;
    679c:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    679e:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    67a0:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    67a2:	2305      	movs	r3, #5
    67a4:	7023      	strb	r3, [r4, #0]
    67a6:	7226      	strb	r6, [r4, #8]
    67a8:	0021      	movs	r1, r4
    67aa:	2001      	movs	r0, #1
    67ac:	47c0      	blx	r8
    67ae:	2001      	movs	r0, #1
    67b0:	4b25      	ldr	r3, [pc, #148]	; (6848 <system_clock_init+0x194>)
    67b2:	4699      	mov	r9, r3
    67b4:	4798      	blx	r3
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    67b6:	4f25      	ldr	r7, [pc, #148]	; (684c <system_clock_init+0x198>)
    67b8:	71be      	strb	r6, [r7, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    67ba:	717e      	strb	r6, [r7, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    67bc:	713e      	strb	r6, [r7, #4]
	config->division_factor    = 1;
    67be:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    67c0:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    67c2:	4653      	mov	r3, sl
    67c4:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    67c6:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    67c8:	7265      	strb	r5, [r4, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    67ca:	0021      	movs	r1, r4
    67cc:	2000      	movs	r0, #0
    67ce:	47c0      	blx	r8
    67d0:	2000      	movs	r0, #0
    67d2:	47c8      	blx	r9
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    67d4:	2000      	movs	r0, #0
    67d6:	4b1e      	ldr	r3, [pc, #120]	; (6850 <system_clock_init+0x19c>)
    67d8:	4798      	blx	r3
    67da:	7939      	ldrb	r1, [r7, #4]
    67dc:	b2c9      	uxtb	r1, r1
    67de:	4b1d      	ldr	r3, [pc, #116]	; (6854 <system_clock_init+0x1a0>)
    67e0:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    67e2:	4b1d      	ldr	r3, [pc, #116]	; (6858 <system_clock_init+0x1a4>)
    67e4:	4298      	cmp	r0, r3
    67e6:	d814      	bhi.n	6812 <system_clock_init+0x15e>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    67e8:	2380      	movs	r3, #128	; 0x80
    67ea:	05db      	lsls	r3, r3, #23
    67ec:	789b      	ldrb	r3, [r3, #2]
    67ee:	2b00      	cmp	r3, #0
    67f0:	d00f      	beq.n	6812 <system_clock_init+0x15e>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    67f2:	2380      	movs	r3, #128	; 0x80
    67f4:	05db      	lsls	r3, r3, #23
    67f6:	789b      	ldrb	r3, [r3, #2]
    67f8:	b25b      	sxtb	r3, r3
    67fa:	2b00      	cmp	r3, #0
    67fc:	db09      	blt.n	6812 <system_clock_init+0x15e>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    67fe:	2380      	movs	r3, #128	; 0x80
    6800:	05db      	lsls	r3, r3, #23
    6802:	2201      	movs	r2, #1
    6804:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    6806:	2200      	movs	r2, #0
    6808:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    680a:	001a      	movs	r2, r3
    680c:	7993      	ldrb	r3, [r2, #6]
    680e:	2b00      	cmp	r3, #0
    6810:	d0fc      	beq.n	680c <system_clock_init+0x158>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    6812:	b008      	add	sp, #32
    6814:	bc1c      	pop	{r2, r3, r4}
    6816:	4690      	mov	r8, r2
    6818:	4699      	mov	r9, r3
    681a:	46a2      	mov	sl, r4
    681c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    681e:	46c0      	nop			; (mov r8, r8)
    6820:	40000c00 	.word	0x40000c00
    6824:	40001400 	.word	0x40001400
    6828:	41004000 	.word	0x41004000
    682c:	000064dd 	.word	0x000064dd
    6830:	00006579 	.word	0x00006579
    6834:	40001000 	.word	0x40001000
    6838:	00006881 	.word	0x00006881
    683c:	00006635 	.word	0x00006635
    6840:	000064a9 	.word	0x000064a9
    6844:	0000685d 	.word	0x0000685d
    6848:	0000692d 	.word	0x0000692d
    684c:	40000400 	.word	0x40000400
    6850:	0000696d 	.word	0x0000696d
    6854:	00011b7d 	.word	0x00011b7d
    6858:	00b71b00 	.word	0x00b71b00

0000685c <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    685c:	4a06      	ldr	r2, [pc, #24]	; (6878 <system_gclk_init+0x1c>)
    685e:	6953      	ldr	r3, [r2, #20]
    6860:	2140      	movs	r1, #64	; 0x40
    6862:	430b      	orrs	r3, r1
    6864:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    6866:	2201      	movs	r2, #1
    6868:	4b04      	ldr	r3, [pc, #16]	; (687c <system_gclk_init+0x20>)
    686a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    686c:	0019      	movs	r1, r3
    686e:	780b      	ldrb	r3, [r1, #0]
    6870:	4213      	tst	r3, r2
    6872:	d1fc      	bne.n	686e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    6874:	4770      	bx	lr
    6876:	46c0      	nop			; (mov r8, r8)
    6878:	40000400 	.word	0x40000400
    687c:	40001800 	.word	0x40001800

00006880 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    6880:	b570      	push	{r4, r5, r6, lr}
    6882:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    6884:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    6886:	784b      	ldrb	r3, [r1, #1]
    6888:	2b00      	cmp	r3, #0
    688a:	d002      	beq.n	6892 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    688c:	2380      	movs	r3, #128	; 0x80
    688e:	00db      	lsls	r3, r3, #3
    6890:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    6892:	7a4b      	ldrb	r3, [r1, #9]
    6894:	2b00      	cmp	r3, #0
    6896:	d002      	beq.n	689e <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    6898:	2380      	movs	r3, #128	; 0x80
    689a:	011b      	lsls	r3, r3, #4
    689c:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    689e:	6848      	ldr	r0, [r1, #4]
    68a0:	2801      	cmp	r0, #1
    68a2:	d90f      	bls.n	68c4 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    68a4:	1e43      	subs	r3, r0, #1
    68a6:	4218      	tst	r0, r3
    68a8:	d131      	bne.n	690e <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    68aa:	2802      	cmp	r0, #2
    68ac:	d92d      	bls.n	690a <system_gclk_gen_set_config+0x8a>
    68ae:	2302      	movs	r3, #2
    68b0:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    68b2:	3201      	adds	r2, #1
						mask <<= 1) {
    68b4:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    68b6:	4298      	cmp	r0, r3
    68b8:	d8fb      	bhi.n	68b2 <system_gclk_gen_set_config+0x32>
    68ba:	2380      	movs	r3, #128	; 0x80
    68bc:	015b      	lsls	r3, r3, #5
    68be:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    68c0:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    68c2:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    68c4:	7a0b      	ldrb	r3, [r1, #8]
    68c6:	2b00      	cmp	r3, #0
    68c8:	d002      	beq.n	68d0 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    68ca:	2380      	movs	r3, #128	; 0x80
    68cc:	019b      	lsls	r3, r3, #6
    68ce:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    68d0:	2604      	movs	r6, #4
    68d2:	40a6      	lsls	r6, r4
    68d4:	4911      	ldr	r1, [pc, #68]	; (691c <system_gclk_gen_set_config+0x9c>)
    68d6:	4a12      	ldr	r2, [pc, #72]	; (6920 <system_gclk_gen_set_config+0xa0>)
    68d8:	684b      	ldr	r3, [r1, #4]
    68da:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    68dc:	421e      	tst	r6, r3
    68de:	d1fb      	bne.n	68d8 <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    68e0:	4b10      	ldr	r3, [pc, #64]	; (6924 <system_gclk_gen_set_config+0xa4>)
    68e2:	4798      	blx	r3
    68e4:	00a4      	lsls	r4, r4, #2
    68e6:	4b0d      	ldr	r3, [pc, #52]	; (691c <system_gclk_gen_set_config+0x9c>)
    68e8:	469c      	mov	ip, r3
    68ea:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    68ec:	6a22      	ldr	r2, [r4, #32]
    68ee:	2380      	movs	r3, #128	; 0x80
    68f0:	005b      	lsls	r3, r3, #1
    68f2:	401a      	ands	r2, r3
    68f4:	432a      	orrs	r2, r5
    68f6:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    68f8:	4661      	mov	r1, ip
    68fa:	4a09      	ldr	r2, [pc, #36]	; (6920 <system_gclk_gen_set_config+0xa0>)
    68fc:	684b      	ldr	r3, [r1, #4]
    68fe:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    6900:	421e      	tst	r6, r3
    6902:	d1fb      	bne.n	68fc <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    6904:	4b08      	ldr	r3, [pc, #32]	; (6928 <system_gclk_gen_set_config+0xa8>)
    6906:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    6908:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    690a:	2200      	movs	r2, #0
    690c:	e7d5      	b.n	68ba <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    690e:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    6910:	2380      	movs	r3, #128	; 0x80
    6912:	009b      	lsls	r3, r3, #2
    6914:	4318      	orrs	r0, r3
    6916:	4305      	orrs	r5, r0
    6918:	e7d4      	b.n	68c4 <system_gclk_gen_set_config+0x44>
    691a:	46c0      	nop			; (mov r8, r8)
    691c:	40001800 	.word	0x40001800
    6920:	000007fc 	.word	0x000007fc
    6924:	00004aa5 	.word	0x00004aa5
    6928:	00004ae5 	.word	0x00004ae5

0000692c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    692c:	b510      	push	{r4, lr}
    692e:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    6930:	2204      	movs	r2, #4
    6932:	4082      	lsls	r2, r0
    6934:	4809      	ldr	r0, [pc, #36]	; (695c <system_gclk_gen_enable+0x30>)
    6936:	490a      	ldr	r1, [pc, #40]	; (6960 <system_gclk_gen_enable+0x34>)
    6938:	6843      	ldr	r3, [r0, #4]
    693a:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    693c:	421a      	tst	r2, r3
    693e:	d1fb      	bne.n	6938 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    6940:	4b08      	ldr	r3, [pc, #32]	; (6964 <system_gclk_gen_enable+0x38>)
    6942:	4798      	blx	r3
    6944:	00a4      	lsls	r4, r4, #2
    6946:	4b05      	ldr	r3, [pc, #20]	; (695c <system_gclk_gen_enable+0x30>)
    6948:	469c      	mov	ip, r3
    694a:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    694c:	6a22      	ldr	r2, [r4, #32]
    694e:	2380      	movs	r3, #128	; 0x80
    6950:	005b      	lsls	r3, r3, #1
    6952:	4313      	orrs	r3, r2
    6954:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    6956:	4b04      	ldr	r3, [pc, #16]	; (6968 <system_gclk_gen_enable+0x3c>)
    6958:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    695a:	bd10      	pop	{r4, pc}
    695c:	40001800 	.word	0x40001800
    6960:	000007fc 	.word	0x000007fc
    6964:	00004aa5 	.word	0x00004aa5
    6968:	00004ae5 	.word	0x00004ae5

0000696c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    696c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    696e:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    6970:	2204      	movs	r2, #4
    6972:	4082      	lsls	r2, r0
    6974:	4812      	ldr	r0, [pc, #72]	; (69c0 <system_gclk_gen_get_hz+0x54>)
    6976:	4913      	ldr	r1, [pc, #76]	; (69c4 <system_gclk_gen_get_hz+0x58>)
    6978:	6843      	ldr	r3, [r0, #4]
    697a:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    697c:	421a      	tst	r2, r3
    697e:	d1fb      	bne.n	6978 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    6980:	4b11      	ldr	r3, [pc, #68]	; (69c8 <system_gclk_gen_get_hz+0x5c>)
    6982:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    6984:	4f0e      	ldr	r7, [pc, #56]	; (69c0 <system_gclk_gen_get_hz+0x54>)
    6986:	3408      	adds	r4, #8
    6988:	00a4      	lsls	r4, r4, #2
    698a:	59e0      	ldr	r0, [r4, r7]
    698c:	0700      	lsls	r0, r0, #28
    698e:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    6990:	4b0e      	ldr	r3, [pc, #56]	; (69cc <system_gclk_gen_get_hz+0x60>)
    6992:	4798      	blx	r3
    6994:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    6996:	59e5      	ldr	r5, [r4, r7]
    6998:	04ed      	lsls	r5, r5, #19
    699a:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    699c:	59e4      	ldr	r4, [r4, r7]
    699e:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    69a0:	4b0b      	ldr	r3, [pc, #44]	; (69d0 <system_gclk_gen_get_hz+0x64>)
    69a2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    69a4:	2d00      	cmp	r5, #0
    69a6:	d107      	bne.n	69b8 <system_gclk_gen_get_hz+0x4c>
    69a8:	2c01      	cmp	r4, #1
    69aa:	d907      	bls.n	69bc <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    69ac:	0021      	movs	r1, r4
    69ae:	0030      	movs	r0, r6
    69b0:	4b08      	ldr	r3, [pc, #32]	; (69d4 <system_gclk_gen_get_hz+0x68>)
    69b2:	4798      	blx	r3
    69b4:	0006      	movs	r6, r0
    69b6:	e001      	b.n	69bc <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    69b8:	3401      	adds	r4, #1
    69ba:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    69bc:	0030      	movs	r0, r6
    69be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    69c0:	40001800 	.word	0x40001800
    69c4:	000007fc 	.word	0x000007fc
    69c8:	00004aa5 	.word	0x00004aa5
    69cc:	00006415 	.word	0x00006415
    69d0:	00004ae5 	.word	0x00004ae5
    69d4:	00011b7d 	.word	0x00011b7d

000069d8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    69d8:	b510      	push	{r4, lr}
    69da:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    69dc:	4b09      	ldr	r3, [pc, #36]	; (6a04 <system_gclk_chan_enable+0x2c>)
    69de:	4798      	blx	r3
    69e0:	00a0      	lsls	r0, r4, #2
    69e2:	4b09      	ldr	r3, [pc, #36]	; (6a08 <system_gclk_chan_enable+0x30>)
    69e4:	469c      	mov	ip, r3
    69e6:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    69e8:	2280      	movs	r2, #128	; 0x80
    69ea:	5883      	ldr	r3, [r0, r2]
    69ec:	2140      	movs	r1, #64	; 0x40
    69ee:	430b      	orrs	r3, r1
    69f0:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    69f2:	3140      	adds	r1, #64	; 0x40
    69f4:	3a40      	subs	r2, #64	; 0x40
    69f6:	5843      	ldr	r3, [r0, r1]
    69f8:	421a      	tst	r2, r3
    69fa:	d0fc      	beq.n	69f6 <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    69fc:	4b03      	ldr	r3, [pc, #12]	; (6a0c <system_gclk_chan_enable+0x34>)
    69fe:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    6a00:	bd10      	pop	{r4, pc}
    6a02:	46c0      	nop			; (mov r8, r8)
    6a04:	00004aa5 	.word	0x00004aa5
    6a08:	40001800 	.word	0x40001800
    6a0c:	00004ae5 	.word	0x00004ae5

00006a10 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    6a10:	b510      	push	{r4, lr}
    6a12:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6a14:	4b09      	ldr	r3, [pc, #36]	; (6a3c <system_gclk_chan_disable+0x2c>)
    6a16:	4798      	blx	r3
    6a18:	00a0      	lsls	r0, r4, #2
    6a1a:	4b09      	ldr	r3, [pc, #36]	; (6a40 <system_gclk_chan_disable+0x30>)
    6a1c:	469c      	mov	ip, r3
    6a1e:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    6a20:	2280      	movs	r2, #128	; 0x80
    6a22:	5883      	ldr	r3, [r0, r2]
    6a24:	2140      	movs	r1, #64	; 0x40
    6a26:	438b      	bics	r3, r1
    6a28:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    6a2a:	3140      	adds	r1, #64	; 0x40
    6a2c:	3a40      	subs	r2, #64	; 0x40
    6a2e:	5843      	ldr	r3, [r0, r1]
    6a30:	421a      	tst	r2, r3
    6a32:	d1fc      	bne.n	6a2e <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    6a34:	4b03      	ldr	r3, [pc, #12]	; (6a44 <system_gclk_chan_disable+0x34>)
    6a36:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    6a38:	bd10      	pop	{r4, pc}
    6a3a:	46c0      	nop			; (mov r8, r8)
    6a3c:	00004aa5 	.word	0x00004aa5
    6a40:	40001800 	.word	0x40001800
    6a44:	00004ae5 	.word	0x00004ae5

00006a48 <system_gclk_chan_set_config>:
{
    6a48:	b570      	push	{r4, r5, r6, lr}
    6a4a:	0004      	movs	r4, r0
    6a4c:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    6a4e:	4b05      	ldr	r3, [pc, #20]	; (6a64 <system_gclk_chan_set_config+0x1c>)
    6a50:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    6a52:	782a      	ldrb	r2, [r5, #0]
    6a54:	230f      	movs	r3, #15
    6a56:	4013      	ands	r3, r2
    6a58:	3420      	adds	r4, #32
    6a5a:	00a4      	lsls	r4, r4, #2
    6a5c:	4a02      	ldr	r2, [pc, #8]	; (6a68 <system_gclk_chan_set_config+0x20>)
    6a5e:	50a3      	str	r3, [r4, r2]
}
    6a60:	bd70      	pop	{r4, r5, r6, pc}
    6a62:	46c0      	nop			; (mov r8, r8)
    6a64:	00006a11 	.word	0x00006a11
    6a68:	40001800 	.word	0x40001800

00006a6c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6a6c:	b510      	push	{r4, lr}
    6a6e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6a70:	4b06      	ldr	r3, [pc, #24]	; (6a8c <system_gclk_chan_get_hz+0x20>)
    6a72:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    6a74:	3420      	adds	r4, #32
    6a76:	00a4      	lsls	r4, r4, #2
    6a78:	4b05      	ldr	r3, [pc, #20]	; (6a90 <system_gclk_chan_get_hz+0x24>)
    6a7a:	58e4      	ldr	r4, [r4, r3]
    6a7c:	0724      	lsls	r4, r4, #28
    6a7e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    6a80:	4b04      	ldr	r3, [pc, #16]	; (6a94 <system_gclk_chan_get_hz+0x28>)
    6a82:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6a84:	0020      	movs	r0, r4
    6a86:	4b04      	ldr	r3, [pc, #16]	; (6a98 <system_gclk_chan_get_hz+0x2c>)
    6a88:	4798      	blx	r3
}
    6a8a:	bd10      	pop	{r4, pc}
    6a8c:	00004aa5 	.word	0x00004aa5
    6a90:	40001800 	.word	0x40001800
    6a94:	00004ae5 	.word	0x00004ae5
    6a98:	0000696d 	.word	0x0000696d

00006a9c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    6a9c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    6a9e:	78d3      	ldrb	r3, [r2, #3]
    6aa0:	2b00      	cmp	r3, #0
    6aa2:	d135      	bne.n	6b10 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    6aa4:	7813      	ldrb	r3, [r2, #0]
    6aa6:	2b80      	cmp	r3, #128	; 0x80
    6aa8:	d029      	beq.n	6afe <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    6aaa:	061b      	lsls	r3, r3, #24
    6aac:	2480      	movs	r4, #128	; 0x80
    6aae:	0264      	lsls	r4, r4, #9
    6ab0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6ab2:	7854      	ldrb	r4, [r2, #1]
    6ab4:	2502      	movs	r5, #2
    6ab6:	43ac      	bics	r4, r5
    6ab8:	d106      	bne.n	6ac8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    6aba:	7894      	ldrb	r4, [r2, #2]
    6abc:	2c00      	cmp	r4, #0
    6abe:	d120      	bne.n	6b02 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    6ac0:	2480      	movs	r4, #128	; 0x80
    6ac2:	02a4      	lsls	r4, r4, #10
    6ac4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    6ac6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6ac8:	7854      	ldrb	r4, [r2, #1]
    6aca:	3c01      	subs	r4, #1
    6acc:	2c01      	cmp	r4, #1
    6ace:	d91c      	bls.n	6b0a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6ad0:	040d      	lsls	r5, r1, #16
    6ad2:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6ad4:	24a0      	movs	r4, #160	; 0xa0
    6ad6:	05e4      	lsls	r4, r4, #23
    6ad8:	432c      	orrs	r4, r5
    6ada:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6adc:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6ade:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6ae0:	24d0      	movs	r4, #208	; 0xd0
    6ae2:	0624      	lsls	r4, r4, #24
    6ae4:	432c      	orrs	r4, r5
    6ae6:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6ae8:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    6aea:	78d4      	ldrb	r4, [r2, #3]
    6aec:	2c00      	cmp	r4, #0
    6aee:	d122      	bne.n	6b36 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    6af0:	035b      	lsls	r3, r3, #13
    6af2:	d51c      	bpl.n	6b2e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    6af4:	7893      	ldrb	r3, [r2, #2]
    6af6:	2b01      	cmp	r3, #1
    6af8:	d01e      	beq.n	6b38 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    6afa:	6141      	str	r1, [r0, #20]
    6afc:	e017      	b.n	6b2e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    6afe:	2300      	movs	r3, #0
    6b00:	e7d7      	b.n	6ab2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    6b02:	24c0      	movs	r4, #192	; 0xc0
    6b04:	02e4      	lsls	r4, r4, #11
    6b06:	4323      	orrs	r3, r4
    6b08:	e7dd      	b.n	6ac6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    6b0a:	4c0d      	ldr	r4, [pc, #52]	; (6b40 <_system_pinmux_config+0xa4>)
    6b0c:	4023      	ands	r3, r4
    6b0e:	e7df      	b.n	6ad0 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    6b10:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6b12:	040c      	lsls	r4, r1, #16
    6b14:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6b16:	23a0      	movs	r3, #160	; 0xa0
    6b18:	05db      	lsls	r3, r3, #23
    6b1a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6b1c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6b1e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6b20:	23d0      	movs	r3, #208	; 0xd0
    6b22:	061b      	lsls	r3, r3, #24
    6b24:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6b26:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    6b28:	78d3      	ldrb	r3, [r2, #3]
    6b2a:	2b00      	cmp	r3, #0
    6b2c:	d103      	bne.n	6b36 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6b2e:	7853      	ldrb	r3, [r2, #1]
    6b30:	3b01      	subs	r3, #1
    6b32:	2b01      	cmp	r3, #1
    6b34:	d902      	bls.n	6b3c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    6b36:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    6b38:	6181      	str	r1, [r0, #24]
    6b3a:	e7f8      	b.n	6b2e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    6b3c:	6081      	str	r1, [r0, #8]
}
    6b3e:	e7fa      	b.n	6b36 <_system_pinmux_config+0x9a>
    6b40:	fffbffff 	.word	0xfffbffff

00006b44 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    6b44:	b510      	push	{r4, lr}
    6b46:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    6b48:	09c1      	lsrs	r1, r0, #7
		return NULL;
    6b4a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    6b4c:	2900      	cmp	r1, #0
    6b4e:	d104      	bne.n	6b5a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    6b50:	0943      	lsrs	r3, r0, #5
    6b52:	01db      	lsls	r3, r3, #7
    6b54:	4905      	ldr	r1, [pc, #20]	; (6b6c <system_pinmux_pin_set_config+0x28>)
    6b56:	468c      	mov	ip, r1
    6b58:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    6b5a:	241f      	movs	r4, #31
    6b5c:	4020      	ands	r0, r4
    6b5e:	2101      	movs	r1, #1
    6b60:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    6b62:	0018      	movs	r0, r3
    6b64:	4b02      	ldr	r3, [pc, #8]	; (6b70 <system_pinmux_pin_set_config+0x2c>)
    6b66:	4798      	blx	r3
}
    6b68:	bd10      	pop	{r4, pc}
    6b6a:	46c0      	nop			; (mov r8, r8)
    6b6c:	40002800 	.word	0x40002800
    6b70:	00006a9d 	.word	0x00006a9d

00006b74 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    6b74:	4770      	bx	lr
    6b76:	Address 0x00006b76 is out of bounds.


00006b78 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6b78:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6b7a:	4b05      	ldr	r3, [pc, #20]	; (6b90 <system_init+0x18>)
    6b7c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    6b7e:	4b05      	ldr	r3, [pc, #20]	; (6b94 <system_init+0x1c>)
    6b80:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    6b82:	4b05      	ldr	r3, [pc, #20]	; (6b98 <system_init+0x20>)
    6b84:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6b86:	4b05      	ldr	r3, [pc, #20]	; (6b9c <system_init+0x24>)
    6b88:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    6b8a:	4b05      	ldr	r3, [pc, #20]	; (6ba0 <system_init+0x28>)
    6b8c:	4798      	blx	r3
}
    6b8e:	bd10      	pop	{r4, pc}
    6b90:	000066b5 	.word	0x000066b5
    6b94:	00004b15 	.word	0x00004b15
    6b98:	00006b75 	.word	0x00006b75
    6b9c:	00004e41 	.word	0x00004e41
    6ba0:	00006b75 	.word	0x00006b75

00006ba4 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    6ba4:	1c93      	adds	r3, r2, #2
    6ba6:	009b      	lsls	r3, r3, #2
    6ba8:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    6baa:	2a02      	cmp	r2, #2
    6bac:	d009      	beq.n	6bc2 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    6bae:	2a03      	cmp	r2, #3
    6bb0:	d00c      	beq.n	6bcc <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    6bb2:	2301      	movs	r3, #1
    6bb4:	4093      	lsls	r3, r2
    6bb6:	001a      	movs	r2, r3
    6bb8:	7e03      	ldrb	r3, [r0, #24]
    6bba:	4313      	orrs	r3, r2
    6bbc:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    6bbe:	2000      	movs	r0, #0
    6bc0:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    6bc2:	7e03      	ldrb	r3, [r0, #24]
    6bc4:	2210      	movs	r2, #16
    6bc6:	4313      	orrs	r3, r2
    6bc8:	7603      	strb	r3, [r0, #24]
    6bca:	e7f8      	b.n	6bbe <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    6bcc:	7e03      	ldrb	r3, [r0, #24]
    6bce:	2220      	movs	r2, #32
    6bd0:	4313      	orrs	r3, r2
    6bd2:	7603      	strb	r3, [r0, #24]
    6bd4:	e7f3      	b.n	6bbe <tc_register_callback+0x1a>
    6bd6:	Address 0x00006bd6 is out of bounds.


00006bd8 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    6bd8:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    6bda:	0080      	lsls	r0, r0, #2
    6bdc:	4b16      	ldr	r3, [pc, #88]	; (6c38 <_tc_interrupt_handler+0x60>)
    6bde:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    6be0:	6823      	ldr	r3, [r4, #0]
    6be2:	7a9d      	ldrb	r5, [r3, #10]
    6be4:	7e22      	ldrb	r2, [r4, #24]
    6be6:	7e63      	ldrb	r3, [r4, #25]
    6be8:	4013      	ands	r3, r2
    6bea:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    6bec:	07eb      	lsls	r3, r5, #31
    6bee:	d406      	bmi.n	6bfe <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    6bf0:	07ab      	lsls	r3, r5, #30
    6bf2:	d40b      	bmi.n	6c0c <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    6bf4:	06eb      	lsls	r3, r5, #27
    6bf6:	d410      	bmi.n	6c1a <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    6bf8:	06ab      	lsls	r3, r5, #26
    6bfa:	d415      	bmi.n	6c28 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    6bfc:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    6bfe:	0020      	movs	r0, r4
    6c00:	68a3      	ldr	r3, [r4, #8]
    6c02:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    6c04:	2301      	movs	r3, #1
    6c06:	6822      	ldr	r2, [r4, #0]
    6c08:	7293      	strb	r3, [r2, #10]
    6c0a:	e7f1      	b.n	6bf0 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    6c0c:	0020      	movs	r0, r4
    6c0e:	68e3      	ldr	r3, [r4, #12]
    6c10:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    6c12:	2302      	movs	r3, #2
    6c14:	6822      	ldr	r2, [r4, #0]
    6c16:	7293      	strb	r3, [r2, #10]
    6c18:	e7ec      	b.n	6bf4 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    6c1a:	0020      	movs	r0, r4
    6c1c:	6923      	ldr	r3, [r4, #16]
    6c1e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    6c20:	2310      	movs	r3, #16
    6c22:	6822      	ldr	r2, [r4, #0]
    6c24:	7293      	strb	r3, [r2, #10]
    6c26:	e7e7      	b.n	6bf8 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    6c28:	0020      	movs	r0, r4
    6c2a:	6963      	ldr	r3, [r4, #20]
    6c2c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    6c2e:	6823      	ldr	r3, [r4, #0]
    6c30:	2220      	movs	r2, #32
    6c32:	729a      	strb	r2, [r3, #10]
}
    6c34:	e7e2      	b.n	6bfc <_tc_interrupt_handler+0x24>
    6c36:	46c0      	nop			; (mov r8, r8)
    6c38:	20002108 	.word	0x20002108

00006c3c <TC0_Handler>:
	_TC_INTERRUPT_HANDLER(0,0)
    6c3c:	b510      	push	{r4, lr}
    6c3e:	2000      	movs	r0, #0
    6c40:	4b01      	ldr	r3, [pc, #4]	; (6c48 <TC0_Handler+0xc>)
    6c42:	4798      	blx	r3
    6c44:	bd10      	pop	{r4, pc}
    6c46:	46c0      	nop			; (mov r8, r8)
    6c48:	00006bd9 	.word	0x00006bd9

00006c4c <TC1_Handler>:
	_TC_INTERRUPT_HANDLER(1,1)
    6c4c:	b510      	push	{r4, lr}
    6c4e:	2001      	movs	r0, #1
    6c50:	4b01      	ldr	r3, [pc, #4]	; (6c58 <TC1_Handler+0xc>)
    6c52:	4798      	blx	r3
    6c54:	bd10      	pop	{r4, pc}
    6c56:	46c0      	nop			; (mov r8, r8)
    6c58:	00006bd9 	.word	0x00006bd9

00006c5c <TC4_Handler>:
	_TC_INTERRUPT_HANDLER(4,2)
    6c5c:	b510      	push	{r4, lr}
    6c5e:	2002      	movs	r0, #2
    6c60:	4b01      	ldr	r3, [pc, #4]	; (6c68 <TC4_Handler+0xc>)
    6c62:	4798      	blx	r3
    6c64:	bd10      	pop	{r4, pc}
    6c66:	46c0      	nop			; (mov r8, r8)
    6c68:	00006bd9 	.word	0x00006bd9

00006c6c <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    6c6c:	b530      	push	{r4, r5, lr}
    6c6e:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    6c70:	a901      	add	r1, sp, #4
    6c72:	4b0c      	ldr	r3, [pc, #48]	; (6ca4 <_tc_get_inst_index+0x38>)
    6c74:	000a      	movs	r2, r1
    6c76:	cb32      	ldmia	r3!, {r1, r4, r5}
    6c78:	c232      	stmia	r2!, {r1, r4, r5}
    6c7a:	cb12      	ldmia	r3!, {r1, r4}
    6c7c:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    6c7e:	9b01      	ldr	r3, [sp, #4]
    6c80:	4298      	cmp	r0, r3
    6c82:	d00b      	beq.n	6c9c <_tc_get_inst_index+0x30>
    6c84:	2301      	movs	r3, #1
    6c86:	a901      	add	r1, sp, #4
    6c88:	009a      	lsls	r2, r3, #2
    6c8a:	5852      	ldr	r2, [r2, r1]
    6c8c:	4282      	cmp	r2, r0
    6c8e:	d006      	beq.n	6c9e <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    6c90:	3301      	adds	r3, #1
    6c92:	2b05      	cmp	r3, #5
    6c94:	d1f8      	bne.n	6c88 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    6c96:	2000      	movs	r0, #0
}
    6c98:	b007      	add	sp, #28
    6c9a:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    6c9c:	2300      	movs	r3, #0
			return i;
    6c9e:	b2d8      	uxtb	r0, r3
    6ca0:	e7fa      	b.n	6c98 <_tc_get_inst_index+0x2c>
    6ca2:	46c0      	nop			; (mov r8, r8)
    6ca4:	000168cc 	.word	0x000168cc

00006ca8 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    6ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
    6caa:	46c6      	mov	lr, r8
    6cac:	b500      	push	{lr}
    6cae:	b08e      	sub	sp, #56	; 0x38
    6cb0:	0004      	movs	r4, r0
    6cb2:	000d      	movs	r5, r1
    6cb4:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    6cb6:	0008      	movs	r0, r1
    6cb8:	4bae      	ldr	r3, [pc, #696]	; (6f74 <tc_init+0x2cc>)
    6cba:	4798      	blx	r3
    6cbc:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC4};
#elif (SAML21J) || (SAMR34J) || (SAMR35J) || (WLR089U0)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
    6cbe:	ab0c      	add	r3, sp, #48	; 0x30
    6cc0:	221b      	movs	r2, #27
    6cc2:	701a      	strb	r2, [r3, #0]
    6cc4:	705a      	strb	r2, [r3, #1]
    6cc6:	3201      	adds	r2, #1
    6cc8:	709a      	strb	r2, [r3, #2]
    6cca:	70da      	strb	r2, [r3, #3]
    6ccc:	3201      	adds	r2, #1
    6cce:	711a      	strb	r2, [r3, #4]
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    6cd0:	a902      	add	r1, sp, #8
    6cd2:	4ba9      	ldr	r3, [pc, #676]	; (6f78 <tc_init+0x2d0>)
    6cd4:	3314      	adds	r3, #20
    6cd6:	000a      	movs	r2, r1
    6cd8:	cb83      	ldmia	r3!, {r0, r1, r7}
    6cda:	c283      	stmia	r2!, {r0, r1, r7}
    6cdc:	cb83      	ldmia	r3!, {r0, r1, r7}
    6cde:	c283      	stmia	r2!, {r0, r1, r7}
    6ce0:	cb83      	ldmia	r3!, {r0, r1, r7}
    6ce2:	c283      	stmia	r2!, {r0, r1, r7}
    6ce4:	681b      	ldr	r3, [r3, #0]
    6ce6:	6013      	str	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    6ce8:	2300      	movs	r3, #0
    6cea:	60a3      	str	r3, [r4, #8]
    6cec:	60e3      	str	r3, [r4, #12]
    6cee:	6123      	str	r3, [r4, #16]
    6cf0:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    6cf2:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    6cf4:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    6cf6:	4643      	mov	r3, r8
    6cf8:	009a      	lsls	r2, r3, #2
    6cfa:	4ba0      	ldr	r3, [pc, #640]	; (6f7c <tc_init+0x2d4>)
    6cfc:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    6cfe:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    6d00:	2334      	movs	r3, #52	; 0x34
    6d02:	5cf3      	ldrb	r3, [r6, r3]
    6d04:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    6d06:	78f3      	ldrb	r3, [r6, #3]
    6d08:	2b08      	cmp	r3, #8
    6d0a:	d008      	beq.n	6d1e <tc_init+0x76>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    6d0c:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    6d0e:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    6d10:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    6d12:	07db      	lsls	r3, r3, #31
    6d14:	d508      	bpl.n	6d28 <tc_init+0x80>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    6d16:	b00e      	add	sp, #56	; 0x38
    6d18:	bc04      	pop	{r2}
    6d1a:	4690      	mov	r8, r2
    6d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    6d1e:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    6d20:	4642      	mov	r2, r8
    6d22:	07d2      	lsls	r2, r2, #31
    6d24:	d4f7      	bmi.n	6d16 <tc_init+0x6e>
    6d26:	e7f1      	b.n	6d0c <tc_init+0x64>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    6d28:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
    6d2a:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    6d2c:	079b      	lsls	r3, r3, #30
    6d2e:	d4f2      	bmi.n	6d16 <tc_init+0x6e>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    6d30:	682b      	ldr	r3, [r5, #0]
    6d32:	079b      	lsls	r3, r3, #30
    6d34:	d4ef      	bmi.n	6d16 <tc_init+0x6e>
	if (config->pwm_channel[0].enabled) {
    6d36:	7c33      	ldrb	r3, [r6, #16]
    6d38:	2b00      	cmp	r3, #0
    6d3a:	d112      	bne.n	6d62 <tc_init+0xba>
	if (config->pwm_channel[1].enabled) {
    6d3c:	7f33      	ldrb	r3, [r6, #28]
    6d3e:	2b00      	cmp	r3, #0
    6d40:	d11b      	bne.n	6d7a <tc_init+0xd2>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    6d42:	4643      	mov	r3, r8
    6d44:	005a      	lsls	r2, r3, #1
    6d46:	a902      	add	r1, sp, #8
    6d48:	1c53      	adds	r3, r2, #1
    6d4a:	009b      	lsls	r3, r3, #2
    6d4c:	5858      	ldr	r0, [r3, r1]
    6d4e:	4643      	mov	r3, r8
    6d50:	00db      	lsls	r3, r3, #3
    6d52:	585b      	ldr	r3, [r3, r1]
	switch (bus) {
    6d54:	b2d9      	uxtb	r1, r3
    6d56:	2904      	cmp	r1, #4
    6d58:	d823      	bhi.n	6da2 <tc_init+0xfa>
    6d5a:	008b      	lsls	r3, r1, #2
    6d5c:	4988      	ldr	r1, [pc, #544]	; (6f80 <tc_init+0x2d8>)
    6d5e:	58cb      	ldr	r3, [r1, r3]
    6d60:	469f      	mov	pc, r3
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6d62:	a901      	add	r1, sp, #4
    6d64:	2301      	movs	r3, #1
    6d66:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    6d68:	2200      	movs	r2, #0
    6d6a:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    6d6c:	7e32      	ldrb	r2, [r6, #24]
    6d6e:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    6d70:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    6d72:	7d30      	ldrb	r0, [r6, #20]
    6d74:	4b83      	ldr	r3, [pc, #524]	; (6f84 <tc_init+0x2dc>)
    6d76:	4798      	blx	r3
    6d78:	e7e0      	b.n	6d3c <tc_init+0x94>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6d7a:	a901      	add	r1, sp, #4
    6d7c:	2301      	movs	r3, #1
    6d7e:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    6d80:	2200      	movs	r2, #0
    6d82:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    6d84:	3224      	adds	r2, #36	; 0x24
    6d86:	18b2      	adds	r2, r6, r2
    6d88:	7812      	ldrb	r2, [r2, #0]
    6d8a:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    6d8c:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    6d8e:	331f      	adds	r3, #31
    6d90:	18f3      	adds	r3, r6, r3
    6d92:	7818      	ldrb	r0, [r3, #0]
    6d94:	4b7b      	ldr	r3, [pc, #492]	; (6f84 <tc_init+0x2dc>)
    6d96:	4798      	blx	r3
    6d98:	e7d3      	b.n	6d42 <tc_init+0x9a>
			MCLK->APBAMASK.reg |= mask;
    6d9a:	497b      	ldr	r1, [pc, #492]	; (6f88 <tc_init+0x2e0>)
    6d9c:	694b      	ldr	r3, [r1, #20]
    6d9e:	4318      	orrs	r0, r3
    6da0:	6148      	str	r0, [r1, #20]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    6da2:	78f3      	ldrb	r3, [r6, #3]
    6da4:	2b08      	cmp	r3, #8
    6da6:	d100      	bne.n	6daa <tc_init+0x102>
    6da8:	e086      	b.n	6eb8 <tc_init+0x210>
	gclk_chan_config.source_generator = config->clock_source;
    6daa:	7833      	ldrb	r3, [r6, #0]
    6dac:	466a      	mov	r2, sp
    6dae:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    6db0:	ab0c      	add	r3, sp, #48	; 0x30
    6db2:	4642      	mov	r2, r8
    6db4:	5c9f      	ldrb	r7, [r3, r2]
    6db6:	4669      	mov	r1, sp
    6db8:	0038      	movs	r0, r7
    6dba:	4b74      	ldr	r3, [pc, #464]	; (6f8c <tc_init+0x2e4>)
    6dbc:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    6dbe:	0038      	movs	r0, r7
    6dc0:	4b73      	ldr	r3, [pc, #460]	; (6f90 <tc_init+0x2e8>)
    6dc2:	4798      	blx	r3
			(uint32_t)config->counter_size |
    6dc4:	78f3      	ldrb	r3, [r6, #3]
    6dc6:	79f2      	ldrb	r2, [r6, #7]
    6dc8:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
    6dca:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
    6dcc:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    6dce:	7a72      	ldrb	r2, [r6, #9]
    6dd0:	2a00      	cmp	r2, #0
    6dd2:	d002      	beq.n	6dda <tc_init+0x132>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    6dd4:	2280      	movs	r2, #128	; 0x80
    6dd6:	0252      	lsls	r2, r2, #9
    6dd8:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    6dda:	7ab2      	ldrb	r2, [r6, #10]
    6ddc:	2a00      	cmp	r2, #0
    6dde:	d002      	beq.n	6de6 <tc_init+0x13e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    6de0:	2280      	movs	r2, #128	; 0x80
    6de2:	0292      	lsls	r2, r2, #10
    6de4:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    6de6:	7af2      	ldrb	r2, [r6, #11]
    6de8:	2a00      	cmp	r2, #0
    6dea:	d002      	beq.n	6df2 <tc_init+0x14a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    6dec:	2280      	movs	r2, #128	; 0x80
    6dee:	0352      	lsls	r2, r2, #13
    6df0:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    6df2:	7b32      	ldrb	r2, [r6, #12]
    6df4:	2a00      	cmp	r2, #0
    6df6:	d002      	beq.n	6dfe <tc_init+0x156>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    6df8:	2280      	movs	r2, #128	; 0x80
    6dfa:	0392      	lsls	r2, r2, #14
    6dfc:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    6dfe:	7871      	ldrb	r1, [r6, #1]
    6e00:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    6e02:	78b2      	ldrb	r2, [r6, #2]
    6e04:	01d2      	lsls	r2, r2, #7
    6e06:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    6e08:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e0a:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	return (tc_module->SYNCBUSY.reg);
    6e0c:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    6e0e:	2b00      	cmp	r3, #0
    6e10:	d1fc      	bne.n	6e0c <tc_init+0x164>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    6e12:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e14:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6e16:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    6e18:	2b00      	cmp	r3, #0
    6e1a:	d1fc      	bne.n	6e16 <tc_init+0x16e>
	hw->COUNT8.WAVE.reg = config->wave_generation;
    6e1c:	79b3      	ldrb	r3, [r6, #6]
    6e1e:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
    6e20:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    6e22:	1e4b      	subs	r3, r1, #1
    6e24:	4199      	sbcs	r1, r3
    6e26:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    6e28:	7bb3      	ldrb	r3, [r6, #14]
    6e2a:	2b00      	cmp	r3, #0
    6e2c:	d001      	beq.n	6e32 <tc_init+0x18a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    6e2e:	2301      	movs	r3, #1
    6e30:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e32:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6e34:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    6e36:	2b00      	cmp	r3, #0
    6e38:	d1fc      	bne.n	6e34 <tc_init+0x18c>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    6e3a:	33ff      	adds	r3, #255	; 0xff
    6e3c:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    6e3e:	2900      	cmp	r1, #0
    6e40:	d004      	beq.n	6e4c <tc_init+0x1a4>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e42:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6e44:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    6e46:	2b00      	cmp	r3, #0
    6e48:	d1fc      	bne.n	6e44 <tc_init+0x19c>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    6e4a:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    6e4c:	7a33      	ldrb	r3, [r6, #8]
    6e4e:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e50:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6e52:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    6e54:	2b00      	cmp	r3, #0
    6e56:	d1fc      	bne.n	6e52 <tc_init+0x1aa>
	switch (module_inst->counter_size) {
    6e58:	7923      	ldrb	r3, [r4, #4]
    6e5a:	2b04      	cmp	r3, #4
    6e5c:	d059      	beq.n	6f12 <tc_init+0x26a>
    6e5e:	2b08      	cmp	r3, #8
    6e60:	d074      	beq.n	6f4c <tc_init+0x2a4>
	return STATUS_ERR_INVALID_ARG;
    6e62:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    6e64:	2b00      	cmp	r3, #0
    6e66:	d000      	beq.n	6e6a <tc_init+0x1c2>
    6e68:	e755      	b.n	6d16 <tc_init+0x6e>
    6e6a:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6e6c:	2b00      	cmp	r3, #0
    6e6e:	d1fc      	bne.n	6e6a <tc_init+0x1c2>
				= config->counter_16_bit.value;
    6e70:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    6e72:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e74:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6e76:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6e78:	2b00      	cmp	r3, #0
    6e7a:	d1fc      	bne.n	6e76 <tc_init+0x1ce>
					config->counter_16_bit.compare_capture_channel[0];
    6e7c:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    6e7e:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6e80:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6e82:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6e84:	2b00      	cmp	r3, #0
    6e86:	d1fc      	bne.n	6e82 <tc_init+0x1da>
					config->counter_16_bit.compare_capture_channel[1];
    6e88:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    6e8a:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
    6e8c:	2000      	movs	r0, #0
    6e8e:	e742      	b.n	6d16 <tc_init+0x6e>
			MCLK->APBBMASK.reg |= mask;
    6e90:	493d      	ldr	r1, [pc, #244]	; (6f88 <tc_init+0x2e0>)
    6e92:	698b      	ldr	r3, [r1, #24]
    6e94:	4318      	orrs	r0, r3
    6e96:	6188      	str	r0, [r1, #24]
    6e98:	e783      	b.n	6da2 <tc_init+0xfa>
			MCLK->APBCMASK.reg |= mask;
    6e9a:	493b      	ldr	r1, [pc, #236]	; (6f88 <tc_init+0x2e0>)
    6e9c:	69cb      	ldr	r3, [r1, #28]
    6e9e:	4318      	orrs	r0, r3
    6ea0:	61c8      	str	r0, [r1, #28]
    6ea2:	e77e      	b.n	6da2 <tc_init+0xfa>
			MCLK->APBDMASK.reg |= mask;
    6ea4:	4938      	ldr	r1, [pc, #224]	; (6f88 <tc_init+0x2e0>)
    6ea6:	6a0b      	ldr	r3, [r1, #32]
    6ea8:	4318      	orrs	r0, r3
    6eaa:	6208      	str	r0, [r1, #32]
    6eac:	e779      	b.n	6da2 <tc_init+0xfa>
			MCLK->APBEMASK.reg |= mask;
    6eae:	4b36      	ldr	r3, [pc, #216]	; (6f88 <tc_init+0x2e0>)
    6eb0:	6a59      	ldr	r1, [r3, #36]	; 0x24
    6eb2:	4308      	orrs	r0, r1
    6eb4:	6258      	str	r0, [r3, #36]	; 0x24
    6eb6:	e774      	b.n	6da2 <tc_init+0xfa>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    6eb8:	4643      	mov	r3, r8
    6eba:	3301      	adds	r3, #1
    6ebc:	2b04      	cmp	r3, #4
    6ebe:	dd00      	ble.n	6ec2 <tc_init+0x21a>
    6ec0:	e773      	b.n	6daa <tc_init+0x102>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    6ec2:	ab02      	add	r3, sp, #8
    6ec4:	1cd1      	adds	r1, r2, #3
    6ec6:	0089      	lsls	r1, r1, #2
    6ec8:	58c9      	ldr	r1, [r1, r3]
    6eca:	3202      	adds	r2, #2
    6ecc:	0092      	lsls	r2, r2, #2
    6ece:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
    6ed0:	b2da      	uxtb	r2, r3
    6ed2:	2a04      	cmp	r2, #4
    6ed4:	d900      	bls.n	6ed8 <tc_init+0x230>
    6ed6:	e768      	b.n	6daa <tc_init+0x102>
    6ed8:	0093      	lsls	r3, r2, #2
    6eda:	4a2e      	ldr	r2, [pc, #184]	; (6f94 <tc_init+0x2ec>)
    6edc:	58d3      	ldr	r3, [r2, r3]
    6ede:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    6ee0:	4a29      	ldr	r2, [pc, #164]	; (6f88 <tc_init+0x2e0>)
    6ee2:	6953      	ldr	r3, [r2, #20]
    6ee4:	4319      	orrs	r1, r3
    6ee6:	6151      	str	r1, [r2, #20]
    6ee8:	e75f      	b.n	6daa <tc_init+0x102>
			MCLK->APBBMASK.reg |= mask;
    6eea:	4a27      	ldr	r2, [pc, #156]	; (6f88 <tc_init+0x2e0>)
    6eec:	6993      	ldr	r3, [r2, #24]
    6eee:	4319      	orrs	r1, r3
    6ef0:	6191      	str	r1, [r2, #24]
    6ef2:	e75a      	b.n	6daa <tc_init+0x102>
			MCLK->APBCMASK.reg |= mask;
    6ef4:	4a24      	ldr	r2, [pc, #144]	; (6f88 <tc_init+0x2e0>)
    6ef6:	69d3      	ldr	r3, [r2, #28]
    6ef8:	4319      	orrs	r1, r3
    6efa:	61d1      	str	r1, [r2, #28]
    6efc:	e755      	b.n	6daa <tc_init+0x102>
			MCLK->APBDMASK.reg |= mask;
    6efe:	4a22      	ldr	r2, [pc, #136]	; (6f88 <tc_init+0x2e0>)
    6f00:	6a13      	ldr	r3, [r2, #32]
    6f02:	4319      	orrs	r1, r3
    6f04:	6211      	str	r1, [r2, #32]
    6f06:	e750      	b.n	6daa <tc_init+0x102>
			MCLK->APBEMASK.reg |= mask;
    6f08:	4b1f      	ldr	r3, [pc, #124]	; (6f88 <tc_init+0x2e0>)
    6f0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6f0c:	4311      	orrs	r1, r2
    6f0e:	6259      	str	r1, [r3, #36]	; 0x24
    6f10:	e74b      	b.n	6daa <tc_init+0x102>
    6f12:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6f14:	2b00      	cmp	r3, #0
    6f16:	d1fc      	bne.n	6f12 <tc_init+0x26a>
					config->counter_8_bit.value;
    6f18:	3328      	adds	r3, #40	; 0x28
    6f1a:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    6f1c:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6f1e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6f20:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6f22:	2b00      	cmp	r3, #0
    6f24:	d1fc      	bne.n	6f20 <tc_init+0x278>
					config->counter_8_bit.period;
    6f26:	3329      	adds	r3, #41	; 0x29
    6f28:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    6f2a:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6f2c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6f2e:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6f30:	2b00      	cmp	r3, #0
    6f32:	d1fc      	bne.n	6f2e <tc_init+0x286>
					config->counter_8_bit.compare_capture_channel[0];
    6f34:	332a      	adds	r3, #42	; 0x2a
    6f36:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    6f38:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6f3a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6f3c:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6f3e:	2b00      	cmp	r3, #0
    6f40:	d1fc      	bne.n	6f3c <tc_init+0x294>
					config->counter_8_bit.compare_capture_channel[1];
    6f42:	332b      	adds	r3, #43	; 0x2b
    6f44:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    6f46:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
    6f48:	2000      	movs	r0, #0
    6f4a:	e6e4      	b.n	6d16 <tc_init+0x6e>
    6f4c:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6f4e:	2b00      	cmp	r3, #0
    6f50:	d1fc      	bne.n	6f4c <tc_init+0x2a4>
				= config->counter_32_bit.value;
    6f52:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    6f54:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6f56:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6f58:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6f5a:	2b00      	cmp	r3, #0
    6f5c:	d1fc      	bne.n	6f58 <tc_init+0x2b0>
			hw->COUNT32.CC[0].reg =
    6f5e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    6f60:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6f62:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6f64:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6f66:	2b00      	cmp	r3, #0
    6f68:	d1fc      	bne.n	6f64 <tc_init+0x2bc>
					config->counter_32_bit.compare_capture_channel[1];
    6f6a:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    6f6c:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
    6f6e:	2000      	movs	r0, #0
    6f70:	e6d1      	b.n	6d16 <tc_init+0x6e>
    6f72:	46c0      	nop			; (mov r8, r8)
    6f74:	00006c6d 	.word	0x00006c6d
    6f78:	000168cc 	.word	0x000168cc
    6f7c:	20002108 	.word	0x20002108
    6f80:	000168a4 	.word	0x000168a4
    6f84:	00006b45 	.word	0x00006b45
    6f88:	40000400 	.word	0x40000400
    6f8c:	00006a49 	.word	0x00006a49
    6f90:	000069d9 	.word	0x000069d9
    6f94:	000168b8 	.word	0x000168b8

00006f98 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6f98:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    6f9a:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    6f9c:	2b00      	cmp	r3, #0
    6f9e:	d1fc      	bne.n	6f9a <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    6fa0:	7113      	strb	r3, [r2, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6fa2:	6801      	ldr	r1, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    6fa4:	690b      	ldr	r3, [r1, #16]

	while (tc_is_syncing(module_inst)) {
    6fa6:	2b00      	cmp	r3, #0
    6fa8:	d1fc      	bne.n	6fa4 <tc_get_count_value+0xc>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
    6faa:	3380      	adds	r3, #128	; 0x80
    6fac:	7153      	strb	r3, [r2, #5]
#if (SAMC20) || (SAMC21) || (SAML21) || (SAML22) || (SAMR30) || (SAMR34) || (WLR089)
	/* wait for the CMD bits in CTRLBSET to be cleared, meaning the CMD has been executed */
	while(tc_module->CTRLBSET.reg & TC_CTRLBSET_CMD_READSYNC);	
    6fae:	7953      	ldrb	r3, [r2, #5]
    6fb0:	b25b      	sxtb	r3, r3
    6fb2:	2b00      	cmp	r3, #0
    6fb4:	dbfb      	blt.n	6fae <tc_get_count_value+0x16>

	/* Read synchronization */
	tc_sync_read_count(module_inst);
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    6fb6:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    6fb8:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    6fba:	2b00      	cmp	r3, #0
    6fbc:	d1fc      	bne.n	6fb8 <tc_get_count_value+0x20>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    6fbe:	7903      	ldrb	r3, [r0, #4]
    6fc0:	2b04      	cmp	r3, #4
    6fc2:	d005      	beq.n	6fd0 <tc_get_count_value+0x38>
    6fc4:	2b08      	cmp	r3, #8
    6fc6:	d009      	beq.n	6fdc <tc_get_count_value+0x44>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    6fc8:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    6fca:	2b00      	cmp	r3, #0
    6fcc:	d003      	beq.n	6fd6 <tc_get_count_value+0x3e>
}
    6fce:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    6fd0:	7d10      	ldrb	r0, [r2, #20]
    6fd2:	b2c0      	uxtb	r0, r0
    6fd4:	e7fb      	b.n	6fce <tc_get_count_value+0x36>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    6fd6:	8a90      	ldrh	r0, [r2, #20]
    6fd8:	b280      	uxth	r0, r0
    6fda:	e7f8      	b.n	6fce <tc_get_count_value+0x36>
			return tc_module->COUNT32.COUNT.reg;
    6fdc:	6950      	ldr	r0, [r2, #20]
    6fde:	e7f6      	b.n	6fce <tc_get_count_value+0x36>

00006fe0 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    6fe0:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    6fe2:	6804      	ldr	r4, [r0, #0]
    6fe4:	6923      	ldr	r3, [r4, #16]

	while (tc_is_syncing(module_inst)) {
    6fe6:	2b00      	cmp	r3, #0
    6fe8:	d1fc      	bne.n	6fe4 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    6fea:	7903      	ldrb	r3, [r0, #4]
    6fec:	2b04      	cmp	r3, #4
    6fee:	d006      	beq.n	6ffe <tc_set_compare_value+0x1e>
    6ff0:	2b08      	cmp	r3, #8
    6ff2:	d028      	beq.n	7046 <tc_set_compare_value+0x66>
    6ff4:	2b00      	cmp	r3, #0
    6ff6:	d013      	beq.n	7020 <tc_set_compare_value+0x40>
				}
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    6ff8:	2317      	movs	r3, #23
}
    6ffa:	0018      	movs	r0, r3
    6ffc:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    6ffe:	2317      	movs	r3, #23
			if (channel_index <
    7000:	2901      	cmp	r1, #1
    7002:	d8fa      	bhi.n	6ffa <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    7004:	7e83      	ldrb	r3, [r0, #26]
    7006:	2b00      	cmp	r3, #0
    7008:	d005      	beq.n	7016 <tc_set_compare_value+0x36>
							(uint8_t)compare;
    700a:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CCBUF[channel_index].reg =
    700c:	1861      	adds	r1, r4, r1
    700e:	3130      	adds	r1, #48	; 0x30
    7010:	700a      	strb	r2, [r1, #0]
				return STATUS_OK;
    7012:	2300      	movs	r3, #0
    7014:	e7f1      	b.n	6ffa <tc_set_compare_value+0x1a>
							(uint8_t)compare;
    7016:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CC[channel_index].reg  =
    7018:	1864      	adds	r4, r4, r1
    701a:	7722      	strb	r2, [r4, #28]
				return STATUS_OK;
    701c:	2300      	movs	r3, #0
    701e:	e7ec      	b.n	6ffa <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    7020:	2317      	movs	r3, #23
			if (channel_index <
    7022:	2901      	cmp	r1, #1
    7024:	d8e9      	bhi.n	6ffa <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    7026:	7e83      	ldrb	r3, [r0, #26]
    7028:	2b00      	cmp	r3, #0
    702a:	d005      	beq.n	7038 <tc_set_compare_value+0x58>
							(uint16_t)compare;
    702c:	b292      	uxth	r2, r2
					tc_module->COUNT16.CCBUF[channel_index].reg =
    702e:	3118      	adds	r1, #24
    7030:	0049      	lsls	r1, r1, #1
    7032:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    7034:	2300      	movs	r3, #0
    7036:	e7e0      	b.n	6ffa <tc_set_compare_value+0x1a>
							(uint16_t)compare;
    7038:	b292      	uxth	r2, r2
					tc_module->COUNT16.CC[channel_index].reg =
    703a:	310c      	adds	r1, #12
    703c:	0049      	lsls	r1, r1, #1
    703e:	1864      	adds	r4, r4, r1
    7040:	80a2      	strh	r2, [r4, #4]
				return STATUS_OK;
    7042:	2300      	movs	r3, #0
    7044:	e7d9      	b.n	6ffa <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    7046:	2317      	movs	r3, #23
			if (channel_index <
    7048:	2901      	cmp	r1, #1
    704a:	d8d6      	bhi.n	6ffa <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    704c:	7e83      	ldrb	r3, [r0, #26]
    704e:	2b00      	cmp	r3, #0
    7050:	d105      	bne.n	705e <tc_set_compare_value+0x7e>
					tc_module->COUNT32.CC[channel_index].reg =
    7052:	3106      	adds	r1, #6
    7054:	0089      	lsls	r1, r1, #2
    7056:	1864      	adds	r4, r4, r1
    7058:	6062      	str	r2, [r4, #4]
				return STATUS_OK;
    705a:	2300      	movs	r3, #0
    705c:	e7cd      	b.n	6ffa <tc_set_compare_value+0x1a>
					tc_module->COUNT32.CCBUF[channel_index].reg =
    705e:	310c      	adds	r1, #12
    7060:	0089      	lsls	r1, r1, #2
    7062:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    7064:	2300      	movs	r3, #0
    7066:	e7c8      	b.n	6ffa <tc_set_compare_value+0x1a>

00007068 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    7068:	e7fe      	b.n	7068 <Dummy_Handler>
    706a:	Address 0x0000706a is out of bounds.


0000706c <Reset_Handler>:
{
    706c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    706e:	4a1a      	ldr	r2, [pc, #104]	; (70d8 <Reset_Handler+0x6c>)
    7070:	4b1a      	ldr	r3, [pc, #104]	; (70dc <Reset_Handler+0x70>)
    7072:	429a      	cmp	r2, r3
    7074:	d011      	beq.n	709a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    7076:	001a      	movs	r2, r3
    7078:	4b19      	ldr	r3, [pc, #100]	; (70e0 <Reset_Handler+0x74>)
    707a:	429a      	cmp	r2, r3
    707c:	d20d      	bcs.n	709a <Reset_Handler+0x2e>
    707e:	4a19      	ldr	r2, [pc, #100]	; (70e4 <Reset_Handler+0x78>)
    7080:	3303      	adds	r3, #3
    7082:	1a9b      	subs	r3, r3, r2
    7084:	089b      	lsrs	r3, r3, #2
    7086:	3301      	adds	r3, #1
    7088:	009b      	lsls	r3, r3, #2
    708a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    708c:	4813      	ldr	r0, [pc, #76]	; (70dc <Reset_Handler+0x70>)
    708e:	4912      	ldr	r1, [pc, #72]	; (70d8 <Reset_Handler+0x6c>)
    7090:	588c      	ldr	r4, [r1, r2]
    7092:	5084      	str	r4, [r0, r2]
    7094:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    7096:	429a      	cmp	r2, r3
    7098:	d1fa      	bne.n	7090 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    709a:	4a13      	ldr	r2, [pc, #76]	; (70e8 <Reset_Handler+0x7c>)
    709c:	4b13      	ldr	r3, [pc, #76]	; (70ec <Reset_Handler+0x80>)
    709e:	429a      	cmp	r2, r3
    70a0:	d20a      	bcs.n	70b8 <Reset_Handler+0x4c>
    70a2:	43d3      	mvns	r3, r2
    70a4:	4911      	ldr	r1, [pc, #68]	; (70ec <Reset_Handler+0x80>)
    70a6:	185b      	adds	r3, r3, r1
    70a8:	2103      	movs	r1, #3
    70aa:	438b      	bics	r3, r1
    70ac:	3304      	adds	r3, #4
    70ae:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    70b0:	2100      	movs	r1, #0
    70b2:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    70b4:	4293      	cmp	r3, r2
    70b6:	d1fc      	bne.n	70b2 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    70b8:	4a0d      	ldr	r2, [pc, #52]	; (70f0 <Reset_Handler+0x84>)
    70ba:	21ff      	movs	r1, #255	; 0xff
    70bc:	4b0d      	ldr	r3, [pc, #52]	; (70f4 <Reset_Handler+0x88>)
    70be:	438b      	bics	r3, r1
    70c0:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    70c2:	4a0d      	ldr	r2, [pc, #52]	; (70f8 <Reset_Handler+0x8c>)
    70c4:	6853      	ldr	r3, [r2, #4]
    70c6:	397f      	subs	r1, #127	; 0x7f
    70c8:	430b      	orrs	r3, r1
    70ca:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    70cc:	4b0b      	ldr	r3, [pc, #44]	; (70fc <Reset_Handler+0x90>)
    70ce:	4798      	blx	r3
        main();
    70d0:	4b0b      	ldr	r3, [pc, #44]	; (7100 <Reset_Handler+0x94>)
    70d2:	4798      	blx	r3
    70d4:	e7fe      	b.n	70d4 <Reset_Handler+0x68>
    70d6:	46c0      	nop			; (mov r8, r8)
    70d8:	000175e4 	.word	0x000175e4
    70dc:	20000000 	.word	0x20000000
    70e0:	2000008c 	.word	0x2000008c
    70e4:	20000004 	.word	0x20000004
    70e8:	20000090 	.word	0x20000090
    70ec:	200032bc 	.word	0x200032bc
    70f0:	e000ed00 	.word	0xe000ed00
    70f4:	00000000 	.word	0x00000000
    70f8:	41004000 	.word	0x41004000
    70fc:	00014d79 	.word	0x00014d79
    7100:	0000752d 	.word	0x0000752d

00007104 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    7104:	b5f0      	push	{r4, r5, r6, r7, lr}
    7106:	46c6      	mov	lr, r8
    7108:	b500      	push	{lr}
    710a:	000c      	movs	r4, r1
    710c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    710e:	2800      	cmp	r0, #0
    7110:	d10f      	bne.n	7132 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    7112:	2a00      	cmp	r2, #0
    7114:	dd11      	ble.n	713a <_read+0x36>
    7116:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    7118:	4e09      	ldr	r6, [pc, #36]	; (7140 <_read+0x3c>)
    711a:	4d0a      	ldr	r5, [pc, #40]	; (7144 <_read+0x40>)
    711c:	6830      	ldr	r0, [r6, #0]
    711e:	0021      	movs	r1, r4
    7120:	682b      	ldr	r3, [r5, #0]
    7122:	4798      	blx	r3
		ptr++;
    7124:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    7126:	42bc      	cmp	r4, r7
    7128:	d1f8      	bne.n	711c <_read+0x18>
		nChars++;
	}
	return nChars;
}
    712a:	4640      	mov	r0, r8
    712c:	bc04      	pop	{r2}
    712e:	4690      	mov	r8, r2
    7130:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    7132:	2301      	movs	r3, #1
    7134:	425b      	negs	r3, r3
    7136:	4698      	mov	r8, r3
    7138:	e7f7      	b.n	712a <_read+0x26>
	for (; len > 0; --len) {
    713a:	4680      	mov	r8, r0
    713c:	e7f5      	b.n	712a <_read+0x26>
    713e:	46c0      	nop			; (mov r8, r8)
    7140:	20002124 	.word	0x20002124
    7144:	2000211c 	.word	0x2000211c

00007148 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    7148:	b5f0      	push	{r4, r5, r6, r7, lr}
    714a:	46c6      	mov	lr, r8
    714c:	b500      	push	{lr}
    714e:	000e      	movs	r6, r1
    7150:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    7152:	3801      	subs	r0, #1
    7154:	2802      	cmp	r0, #2
    7156:	d810      	bhi.n	717a <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    7158:	2a00      	cmp	r2, #0
    715a:	d011      	beq.n	7180 <_write+0x38>
    715c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    715e:	4b0c      	ldr	r3, [pc, #48]	; (7190 <_write+0x48>)
    7160:	4698      	mov	r8, r3
    7162:	4f0c      	ldr	r7, [pc, #48]	; (7194 <_write+0x4c>)
    7164:	4643      	mov	r3, r8
    7166:	6818      	ldr	r0, [r3, #0]
    7168:	5d31      	ldrb	r1, [r6, r4]
    716a:	683b      	ldr	r3, [r7, #0]
    716c:	4798      	blx	r3
    716e:	2800      	cmp	r0, #0
    7170:	db08      	blt.n	7184 <_write+0x3c>
			return -1;
		}
		++nChars;
    7172:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    7174:	42a5      	cmp	r5, r4
    7176:	d1f5      	bne.n	7164 <_write+0x1c>
    7178:	e006      	b.n	7188 <_write+0x40>
		return -1;
    717a:	2401      	movs	r4, #1
    717c:	4264      	negs	r4, r4
    717e:	e003      	b.n	7188 <_write+0x40>
	for (; len != 0; --len) {
    7180:	0014      	movs	r4, r2
    7182:	e001      	b.n	7188 <_write+0x40>
			return -1;
    7184:	2401      	movs	r4, #1
    7186:	4264      	negs	r4, r4
	}
	return nChars;
}
    7188:	0020      	movs	r0, r4
    718a:	bc04      	pop	{r2}
    718c:	4690      	mov	r8, r2
    718e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7190:	20002124 	.word	0x20002124
    7194:	20002120 	.word	0x20002120

00007198 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    7198:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    719a:	4a06      	ldr	r2, [pc, #24]	; (71b4 <_sbrk+0x1c>)
    719c:	6812      	ldr	r2, [r2, #0]
    719e:	2a00      	cmp	r2, #0
    71a0:	d004      	beq.n	71ac <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    71a2:	4a04      	ldr	r2, [pc, #16]	; (71b4 <_sbrk+0x1c>)
    71a4:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    71a6:	18c3      	adds	r3, r0, r3
    71a8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    71aa:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    71ac:	4902      	ldr	r1, [pc, #8]	; (71b8 <_sbrk+0x20>)
    71ae:	4a01      	ldr	r2, [pc, #4]	; (71b4 <_sbrk+0x1c>)
    71b0:	6011      	str	r1, [r2, #0]
    71b2:	e7f6      	b.n	71a2 <_sbrk+0xa>
    71b4:	200002fc 	.word	0x200002fc
    71b8:	200052c0 	.word	0x200052c0

000071bc <_close>:
}

extern int _close(int file)
{
	return -1;
}
    71bc:	2001      	movs	r0, #1
    71be:	4240      	negs	r0, r0
    71c0:	4770      	bx	lr

000071c2 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    71c2:	2380      	movs	r3, #128	; 0x80
    71c4:	019b      	lsls	r3, r3, #6
    71c6:	604b      	str	r3, [r1, #4]

	return 0;
}
    71c8:	2000      	movs	r0, #0
    71ca:	4770      	bx	lr

000071cc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    71cc:	2001      	movs	r0, #1
    71ce:	4770      	bx	lr

000071d0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    71d0:	2000      	movs	r0, #0
    71d2:	4770      	bx	lr

000071d4 <_exit>:

extern void _exit(int status)
{
	asm("BKPT #0");
    71d4:	be00      	bkpt	0x0000
    71d6:	e7fe      	b.n	71d6 <_exit+0x2>

000071d8 <_kill>:
}

extern void _kill(int pid, int sig)
{
	return;
}
    71d8:	4770      	bx	lr

000071da <_getpid>:

extern int _getpid(void)
{
	return -1;
}
    71da:	2001      	movs	r0, #1
    71dc:	4240      	negs	r0, r0
    71de:	4770      	bx	lr

000071e0 <DemoOutput_Greeting>:

bool PUSH_BUTTON_pressed;
MIWI_TICK PUSH_BUTTON_press_time;

void DemoOutput_Greeting(void)
{    
    71e0:	b510      	push	{r4, lr}
#if defined (ENABLE_LCD)
	#if defined(PROTOCOL_P2P)
		LCDDisplay((char *)"Simple LoRa P2P Demo on \n SAMR34 Node ", 0, true);
    71e2:	2201      	movs	r2, #1
    71e4:	2100      	movs	r1, #0
    71e6:	480c      	ldr	r0, [pc, #48]	; (7218 <DemoOutput_Greeting+0x38>)
    71e8:	4b0c      	ldr	r3, [pc, #48]	; (721c <DemoOutput_Greeting+0x3c>)
    71ea:	4798      	blx	r3
	#endif
#endif
    #if defined (ENABLE_CONSOLE)
        #if defined(PROTOCOL_P2P)
            printf("\r\nStarting Node 1 of Simple Demo for LoRa P2P Stack ...");  
    71ec:	480c      	ldr	r0, [pc, #48]	; (7220 <DemoOutput_Greeting+0x40>)
    71ee:	4c0d      	ldr	r4, [pc, #52]	; (7224 <DemoOutput_Greeting+0x44>)
    71f0:	47a0      	blx	r4
        #endif
		#if defined(ENABLE_SLEEP_FEATURE)
			printf("\r\nReduced Function Device (RFD) operations") ;
		#else
			printf("\r\nFull Function Device (FFD) operations") ;
    71f2:	480d      	ldr	r0, [pc, #52]	; (7228 <DemoOutput_Greeting+0x48>)
    71f4:	47a0      	blx	r4
		#endif
        printf("\r\n     RF Transceiver: SX_1276");
    71f6:	480d      	ldr	r0, [pc, #52]	; (722c <DemoOutput_Greeting+0x4c>)
    71f8:	47a0      	blx	r4
        printf("\r\n     Demo Instruction:");
    71fa:	480d      	ldr	r0, [pc, #52]	; (7230 <DemoOutput_Greeting+0x50>)
    71fc:	47a0      	blx	r4
        printf("\r\n                     Power on the board until LED 1 lights up");
    71fe:	480d      	ldr	r0, [pc, #52]	; (7234 <DemoOutput_Greeting+0x54>)
    7200:	47a0      	blx	r4
        printf("\r\n                     to indicate connecting with peer.");
    7202:	480d      	ldr	r0, [pc, #52]	; (7238 <DemoOutput_Greeting+0x58>)
    7204:	47a0      	blx	r4
        printf("\r\n                     Push Button 1 to broadcast message.");
    7206:	480d      	ldr	r0, [pc, #52]	; (723c <DemoOutput_Greeting+0x5c>)
    7208:	47a0      	blx	r4
        printf("\r\n                     LED 1 will be toggled upon receiving messages. ");
    720a:	480d      	ldr	r0, [pc, #52]	; (7240 <DemoOutput_Greeting+0x60>)
    720c:	47a0      	blx	r4
        printf("\r\n\r\n");		
    720e:	480d      	ldr	r0, [pc, #52]	; (7244 <DemoOutput_Greeting+0x64>)
    7210:	4b0d      	ldr	r3, [pc, #52]	; (7248 <DemoOutput_Greeting+0x68>)
    7212:	4798      	blx	r3
    #endif 
}        
    7214:	bd10      	pop	{r4, pc}
    7216:	46c0      	nop			; (mov r8, r8)
    7218:	000169fc 	.word	0x000169fc
    721c:	00007bf1 	.word	0x00007bf1
    7220:	00016a24 	.word	0x00016a24
    7224:	00015399 	.word	0x00015399
    7228:	00016a5c 	.word	0x00016a5c
    722c:	00016a84 	.word	0x00016a84
    7230:	00016aa4 	.word	0x00016aa4
    7234:	00016ac0 	.word	0x00016ac0
    7238:	00016b00 	.word	0x00016b00
    723c:	00016b3c 	.word	0x00016b3c
    7240:	00016b78 	.word	0x00016b78
    7244:	00016bc0 	.word	0x00016bc0
    7248:	000154b5 	.word	0x000154b5

0000724c <DemoOutput_Channel>:
	LCDDisplay((char *)"SW: Use Nwk Freezer \nPress in 5 sec", 0, false);	
	delay_ms(1000);
#endif
}
void DemoOutput_Channel(uint8_t channel, uint8_t Step)
{
    724c:	b570      	push	{r4, r5, r6, lr}
    724e:	0004      	movs	r4, r0
    if( Step == 0 )
    7250:	2900      	cmp	r1, #0
    7252:	d00e      	beq.n	7272 <DemoOutput_Channel+0x26>
#endif
    }
    else
    { 
#if defined (ENABLE_LCD)
        LCDDisplay((char *)"Connected Peer on \n Channel ", channel, true);
    7254:	2201      	movs	r2, #1
    7256:	0001      	movs	r1, r0
    7258:	480d      	ldr	r0, [pc, #52]	; (7290 <DemoOutput_Channel+0x44>)
    725a:	4b0e      	ldr	r3, [pc, #56]	; (7294 <DemoOutput_Channel+0x48>)
    725c:	4798      	blx	r3
#endif
#if defined (ENABLE_CONSOLE)
        #if !defined(MIWIKIT)
        printf("\r\nConnected Peer on Channel ");
    725e:	480e      	ldr	r0, [pc, #56]	; (7298 <DemoOutput_Channel+0x4c>)
    7260:	4d0e      	ldr	r5, [pc, #56]	; (729c <DemoOutput_Channel+0x50>)
    7262:	47a8      	blx	r5
        printf("%d",channel);
    7264:	0021      	movs	r1, r4
    7266:	480e      	ldr	r0, [pc, #56]	; (72a0 <DemoOutput_Channel+0x54>)
    7268:	47a8      	blx	r5
        printf("\r\n");
    726a:	480e      	ldr	r0, [pc, #56]	; (72a4 <DemoOutput_Channel+0x58>)
    726c:	4b0e      	ldr	r3, [pc, #56]	; (72a8 <DemoOutput_Channel+0x5c>)
    726e:	4798      	blx	r3
        #endif
#endif
    }
}    
    7270:	bd70      	pop	{r4, r5, r6, pc}
        LCDDisplay((char *)"Connecting Peer on \n Channel ", channel, true);
    7272:	2201      	movs	r2, #1
    7274:	0001      	movs	r1, r0
    7276:	480d      	ldr	r0, [pc, #52]	; (72ac <DemoOutput_Channel+0x60>)
    7278:	4b06      	ldr	r3, [pc, #24]	; (7294 <DemoOutput_Channel+0x48>)
    727a:	4798      	blx	r3
        printf("\r\nConnecting Peer on Channel ");
    727c:	480c      	ldr	r0, [pc, #48]	; (72b0 <DemoOutput_Channel+0x64>)
    727e:	4d07      	ldr	r5, [pc, #28]	; (729c <DemoOutput_Channel+0x50>)
    7280:	47a8      	blx	r5
        printf("%d",channel);
    7282:	0021      	movs	r1, r4
    7284:	4806      	ldr	r0, [pc, #24]	; (72a0 <DemoOutput_Channel+0x54>)
    7286:	47a8      	blx	r5
        printf("\r\n");
    7288:	4806      	ldr	r0, [pc, #24]	; (72a4 <DemoOutput_Channel+0x58>)
    728a:	4b07      	ldr	r3, [pc, #28]	; (72a8 <DemoOutput_Channel+0x5c>)
    728c:	4798      	blx	r3
    728e:	e7ef      	b.n	7270 <DemoOutput_Channel+0x24>
    7290:	00016974 	.word	0x00016974
    7294:	00007bf1 	.word	0x00007bf1
    7298:	00016994 	.word	0x00016994
    729c:	00015399 	.word	0x00015399
    72a0:	00016970 	.word	0x00016970
    72a4:	000172cc 	.word	0x000172cc
    72a8:	000154b5 	.word	0x000154b5
    72ac:	00016930 	.word	0x00016930
    72b0:	00016950 	.word	0x00016950

000072b4 <DemoOutput_Instruction>:

void DemoOutput_Instruction(void)
{
    72b4:	b510      	push	{r4, lr}
#if defined (ENABLE_LCD)
	#if defined (EXT_BOARD_OLED1_XPLAINED_PRO)
		LCDDisplay((char *)"SW     : Broadcast \nBUTTON1: Unicast", 0, false);
    72b6:	2200      	movs	r2, #0
    72b8:	2100      	movs	r1, #0
    72ba:	4802      	ldr	r0, [pc, #8]	; (72c4 <DemoOutput_Instruction+0x10>)
    72bc:	4b02      	ldr	r3, [pc, #8]	; (72c8 <DemoOutput_Instruction+0x14>)
    72be:	4798      	blx	r3
	#else
		LCDDisplay((char *)"SW: Broadcast", 0, false);
	#endif
#endif
}
    72c0:	bd10      	pop	{r4, pc}
    72c2:	46c0      	nop			; (mov r8, r8)
    72c4:	00016c20 	.word	0x00016c20
    72c8:	00007bf1 	.word	0x00007bf1

000072cc <DemoOutput_HandleMessage>:


void DemoOutput_HandleMessage(void)
{
    72cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;

    if( rxMessage.flags.bits.secEn )
    72ce:	4b2a      	ldr	r3, [pc, #168]	; (7378 <DemoOutput_HandleMessage+0xac>)
    72d0:	781b      	ldrb	r3, [r3, #0]
    72d2:	071b      	lsls	r3, r3, #28
    72d4:	d426      	bmi.n	7324 <DemoOutput_HandleMessage+0x58>
    {
        sio2host_tx((uint8_t *)"Secured ", sizeof("Secured "));
    }

    if( rxMessage.flags.bits.broadcast )
    72d6:	4b28      	ldr	r3, [pc, #160]	; (7378 <DemoOutput_HandleMessage+0xac>)
    72d8:	781b      	ldrb	r3, [r3, #0]
    72da:	079b      	lsls	r3, r3, #30
    72dc:	d027      	beq.n	732e <DemoOutput_HandleMessage+0x62>
    {
        sio2host_tx((uint8_t *)"Broadcast Packet with RSSI ", sizeof("Broadcast Packet with RSSI "));
    72de:	211c      	movs	r1, #28
    72e0:	4826      	ldr	r0, [pc, #152]	; (737c <DemoOutput_HandleMessage+0xb0>)
    72e2:	4b27      	ldr	r3, [pc, #156]	; (7380 <DemoOutput_HandleMessage+0xb4>)
    72e4:	4798      	blx	r3
    }
    else
    {
        sio2host_tx((uint8_t *)"Unicast Packet with RSSI ",sizeof("Unicast Packet with RSSI "));
    }
    printf("%02x", rxMessage.PacketRSSI);
    72e6:	4c24      	ldr	r4, [pc, #144]	; (7378 <DemoOutput_HandleMessage+0xac>)
    72e8:	7b61      	ldrb	r1, [r4, #13]
    72ea:	4826      	ldr	r0, [pc, #152]	; (7384 <DemoOutput_HandleMessage+0xb8>)
    72ec:	4b26      	ldr	r3, [pc, #152]	; (7388 <DemoOutput_HandleMessage+0xbc>)
    72ee:	4798      	blx	r3
    if( rxMessage.flags.bits.srcPrsnt )
    72f0:	7823      	ldrb	r3, [r4, #0]
    72f2:	065b      	lsls	r3, r3, #25
    72f4:	d420      	bmi.n	7338 <DemoOutput_HandleMessage+0x6c>
            {
                printf("%x", rxMessage.SourceAddress[MY_ADDRESS_LENGTH-1-i]);
            }    
        }
    }
    sio2host_tx((uint8_t *)": ",sizeof(": "));
    72f6:	2103      	movs	r1, #3
    72f8:	4824      	ldr	r0, [pc, #144]	; (738c <DemoOutput_HandleMessage+0xc0>)
    72fa:	4b21      	ldr	r3, [pc, #132]	; (7380 <DemoOutput_HandleMessage+0xb4>)
    72fc:	4798      	blx	r3
    
    for(i = 0; i < rxMessage.PayloadSize; i++)
    72fe:	4b1e      	ldr	r3, [pc, #120]	; (7378 <DemoOutput_HandleMessage+0xac>)
    7300:	7b1b      	ldrb	r3, [r3, #12]
    7302:	2b00      	cmp	r3, #0
    7304:	d00a      	beq.n	731c <DemoOutput_HandleMessage+0x50>
    7306:	2400      	movs	r4, #0
    {
        sio2host_putchar(rxMessage.Payload[i]);
    7308:	4d1b      	ldr	r5, [pc, #108]	; (7378 <DemoOutput_HandleMessage+0xac>)
    730a:	4e21      	ldr	r6, [pc, #132]	; (7390 <DemoOutput_HandleMessage+0xc4>)
    730c:	68ab      	ldr	r3, [r5, #8]
    730e:	5d18      	ldrb	r0, [r3, r4]
    7310:	47b0      	blx	r6
    for(i = 0; i < rxMessage.PayloadSize; i++)
    7312:	3401      	adds	r4, #1
    7314:	b2e4      	uxtb	r4, r4
    7316:	7b2b      	ldrb	r3, [r5, #12]
    7318:	42a3      	cmp	r3, r4
    731a:	d8f7      	bhi.n	730c <DemoOutput_HandleMessage+0x40>
    }   
	printf("\r\n");    
    731c:	481d      	ldr	r0, [pc, #116]	; (7394 <DemoOutput_HandleMessage+0xc8>)
    731e:	4b1e      	ldr	r3, [pc, #120]	; (7398 <DemoOutput_HandleMessage+0xcc>)
    7320:	4798      	blx	r3
} 
    7322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        sio2host_tx((uint8_t *)"Secured ", sizeof("Secured "));
    7324:	2109      	movs	r1, #9
    7326:	481d      	ldr	r0, [pc, #116]	; (739c <DemoOutput_HandleMessage+0xd0>)
    7328:	4b15      	ldr	r3, [pc, #84]	; (7380 <DemoOutput_HandleMessage+0xb4>)
    732a:	4798      	blx	r3
    732c:	e7d3      	b.n	72d6 <DemoOutput_HandleMessage+0xa>
        sio2host_tx((uint8_t *)"Unicast Packet with RSSI ",sizeof("Unicast Packet with RSSI "));
    732e:	211a      	movs	r1, #26
    7330:	481b      	ldr	r0, [pc, #108]	; (73a0 <DemoOutput_HandleMessage+0xd4>)
    7332:	4b13      	ldr	r3, [pc, #76]	; (7380 <DemoOutput_HandleMessage+0xb4>)
    7334:	4798      	blx	r3
    7336:	e7d6      	b.n	72e6 <DemoOutput_HandleMessage+0x1a>
        sio2host_tx((uint8_t *)" from ", sizeof(" from "));
    7338:	2107      	movs	r1, #7
    733a:	481a      	ldr	r0, [pc, #104]	; (73a4 <DemoOutput_HandleMessage+0xd8>)
    733c:	4b10      	ldr	r3, [pc, #64]	; (7380 <DemoOutput_HandleMessage+0xb4>)
    733e:	4798      	blx	r3
        if( rxMessage.flags.bits.altSrcAddr )
    7340:	4b0d      	ldr	r3, [pc, #52]	; (7378 <DemoOutput_HandleMessage+0xac>)
    7342:	781b      	ldrb	r3, [r3, #0]
    7344:	2407      	movs	r4, #7
    7346:	2b7f      	cmp	r3, #127	; 0x7f
    7348:	d809      	bhi.n	735e <DemoOutput_HandleMessage+0x92>
                printf("%x", rxMessage.SourceAddress[MY_ADDRESS_LENGTH-1-i]);
    734a:	4f0b      	ldr	r7, [pc, #44]	; (7378 <DemoOutput_HandleMessage+0xac>)
    734c:	4e16      	ldr	r6, [pc, #88]	; (73a8 <DemoOutput_HandleMessage+0xdc>)
    734e:	4d0e      	ldr	r5, [pc, #56]	; (7388 <DemoOutput_HandleMessage+0xbc>)
    7350:	687b      	ldr	r3, [r7, #4]
    7352:	5d19      	ldrb	r1, [r3, r4]
    7354:	0030      	movs	r0, r6
    7356:	47a8      	blx	r5
            for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    7358:	3c01      	subs	r4, #1
    735a:	d2f9      	bcs.n	7350 <DemoOutput_HandleMessage+0x84>
    735c:	e7cb      	b.n	72f6 <DemoOutput_HandleMessage+0x2a>
            printf( "%x", rxMessage.SourceAddress[1]);
    735e:	4e06      	ldr	r6, [pc, #24]	; (7378 <DemoOutput_HandleMessage+0xac>)
    7360:	6873      	ldr	r3, [r6, #4]
    7362:	7859      	ldrb	r1, [r3, #1]
    7364:	4d10      	ldr	r5, [pc, #64]	; (73a8 <DemoOutput_HandleMessage+0xdc>)
    7366:	0028      	movs	r0, r5
    7368:	4c07      	ldr	r4, [pc, #28]	; (7388 <DemoOutput_HandleMessage+0xbc>)
    736a:	47a0      	blx	r4
            printf( "%x", rxMessage.SourceAddress[0]);
    736c:	6873      	ldr	r3, [r6, #4]
    736e:	7819      	ldrb	r1, [r3, #0]
    7370:	0028      	movs	r0, r5
    7372:	47a0      	blx	r4
    7374:	e7bf      	b.n	72f6 <DemoOutput_HandleMessage+0x2a>
    7376:	46c0      	nop			; (mov r8, r8)
    7378:	20002af0 	.word	0x20002af0
    737c:	00016bd0 	.word	0x00016bd0
    7380:	0000bd45 	.word	0x0000bd45
    7384:	00016c08 	.word	0x00016c08
    7388:	00015399 	.word	0x00015399
    738c:	00016c1c 	.word	0x00016c1c
    7390:	0000bd71 	.word	0x0000bd71
    7394:	000172cc 	.word	0x000172cc
    7398:	000154b5 	.word	0x000154b5
    739c:	00016bc4 	.word	0x00016bc4
    73a0:	00016bec 	.word	0x00016bec
    73a4:	00016c10 	.word	0x00016c10
    73a8:	00016c18 	.word	0x00016c18

000073ac <DemoOutput_UpdateTxRx>:

void DemoOutput_UpdateTxRx(uint8_t TxNum, uint8_t RxNum)
{
    73ac:	b510      	push	{r4, lr}
#if defined (ENABLE_LCD)
    LCDTRXCount(TxNum, RxNum);  
    73ae:	4b01      	ldr	r3, [pc, #4]	; (73b4 <DemoOutput_UpdateTxRx+0x8>)
    73b0:	4798      	blx	r3
#endif
}
    73b2:	bd10      	pop	{r4, pc}
    73b4:	00007b95 	.word	0x00007b95

000073b8 <DemoOutput_ChannelError>:

void DemoOutput_ChannelError(uint8_t channel)
{
    73b8:	b570      	push	{r4, r5, r6, lr}
    73ba:	0005      	movs	r5, r0
    #if defined (ENABLE_CONSOLE)
        printf("\r\nSelection of channel ");
    73bc:	4804      	ldr	r0, [pc, #16]	; (73d0 <DemoOutput_ChannelError+0x18>)
    73be:	4c05      	ldr	r4, [pc, #20]	; (73d4 <DemoOutput_ChannelError+0x1c>)
    73c0:	47a0      	blx	r4
        printf("%d", channel);
    73c2:	0029      	movs	r1, r5
    73c4:	4804      	ldr	r0, [pc, #16]	; (73d8 <DemoOutput_ChannelError+0x20>)
    73c6:	47a0      	blx	r4
        printf(" is not supported in current configuration.\r\n");
    73c8:	4804      	ldr	r0, [pc, #16]	; (73dc <DemoOutput_ChannelError+0x24>)
    73ca:	4b05      	ldr	r3, [pc, #20]	; (73e0 <DemoOutput_ChannelError+0x28>)
    73cc:	4798      	blx	r3
    #endif
}
    73ce:	bd70      	pop	{r4, r5, r6, pc}
    73d0:	000169b4 	.word	0x000169b4
    73d4:	00015399 	.word	0x00015399
    73d8:	00016970 	.word	0x00016970
    73dc:	000169cc 	.word	0x000169cc
    73e0:	000154b5 	.word	0x000154b5

000073e4 <DemoOutput_UnicastFail>:

void DemoOutput_UnicastFail(void)
{
    73e4:	b510      	push	{r4, lr}
    #if defined (ENABLE_CONSOLE)
        printf("\r\nUnicast Failed\r\n");
    73e6:	4804      	ldr	r0, [pc, #16]	; (73f8 <DemoOutput_UnicastFail+0x14>)
    73e8:	4b04      	ldr	r3, [pc, #16]	; (73fc <DemoOutput_UnicastFail+0x18>)
    73ea:	4798      	blx	r3
    #endif
#if defined (ENABLE_LCD)
    LCDDisplay((char *)" Unicast Failed", 0, true);
    73ec:	2201      	movs	r2, #1
    73ee:	2100      	movs	r1, #0
    73f0:	4803      	ldr	r0, [pc, #12]	; (7400 <DemoOutput_UnicastFail+0x1c>)
    73f2:	4b04      	ldr	r3, [pc, #16]	; (7404 <DemoOutput_UnicastFail+0x20>)
    73f4:	4798      	blx	r3
#endif
}    
    73f6:	bd10      	pop	{r4, pc}
    73f8:	00016c48 	.word	0x00016c48
    73fc:	000154b5 	.word	0x000154b5
    7400:	00016c5c 	.word	0x00016c5c
    7404:	00007bf1 	.word	0x00007bf1

00007408 <DemoOutput_BroadcastFail>:

void DemoOutput_BroadcastFail(void)
{
    7408:	b510      	push	{r4, lr}
	#if defined (ENABLE_CONSOLE)
	printf("\r\nBroadcast Failed\r\n");
    740a:	4804      	ldr	r0, [pc, #16]	; (741c <DemoOutput_BroadcastFail+0x14>)
    740c:	4b04      	ldr	r3, [pc, #16]	; (7420 <DemoOutput_BroadcastFail+0x18>)
    740e:	4798      	blx	r3
	#endif
	#if defined (ENABLE_LCD)
	LCDDisplay((char *)" Broadcast Failed", 0, true);
    7410:	2201      	movs	r2, #1
    7412:	2100      	movs	r1, #0
    7414:	4803      	ldr	r0, [pc, #12]	; (7424 <DemoOutput_BroadcastFail+0x1c>)
    7416:	4b04      	ldr	r3, [pc, #16]	; (7428 <DemoOutput_BroadcastFail+0x20>)
    7418:	4798      	blx	r3
	#endif
}    
    741a:	bd10      	pop	{r4, pc}
    741c:	00016908 	.word	0x00016908
    7420:	000154b5 	.word	0x000154b5
    7424:	0001691c 	.word	0x0001691c
    7428:	00007bf1 	.word	0x00007bf1

0000742c <ButtonPressed>:
 *
 * Note:
 ********************************************************************/

uint8_t ButtonPressed(void)
{
    742c:	b510      	push	{r4, lr}
	return (port_base->IN.reg & pin_mask);
    742e:	4b19      	ldr	r3, [pc, #100]	; (7494 <ButtonPressed+0x68>)
    7430:	6a1b      	ldr	r3, [r3, #32]
    MIWI_TICK tickDifference;
    if(!port_pin_get_input_level(BUTTON_0_PIN))
    7432:	00db      	lsls	r3, r3, #3
    7434:	d40e      	bmi.n	7454 <ButtonPressed+0x28>
    {
        //if the button was previously not pressed
        if(PUSH_BUTTON_pressed == false)
    7436:	4b18      	ldr	r3, [pc, #96]	; (7498 <ButtonPressed+0x6c>)
    7438:	781b      	ldrb	r3, [r3, #0]
        if(tickDifference.Val > DEBOUNCE_TIME)
        {
            PUSH_BUTTON_pressed = false;
        }
    }
    return 0;
    743a:	2000      	movs	r0, #0
        if(PUSH_BUTTON_pressed == false)
    743c:	2b00      	cmp	r3, #0
    743e:	d000      	beq.n	7442 <ButtonPressed+0x16>
}
    7440:	bd10      	pop	{r4, pc}
            PUSH_BUTTON_pressed = true;
    7442:	2201      	movs	r2, #1
    7444:	4b14      	ldr	r3, [pc, #80]	; (7498 <ButtonPressed+0x6c>)
    7446:	701a      	strb	r2, [r3, #0]
            PUSH_BUTTON_press_time.Val = MiWi_TickGet();
    7448:	4b14      	ldr	r3, [pc, #80]	; (749c <ButtonPressed+0x70>)
    744a:	4798      	blx	r3
    744c:	4b14      	ldr	r3, [pc, #80]	; (74a0 <ButtonPressed+0x74>)
    744e:	6018      	str	r0, [r3, #0]
            return 1;
    7450:	2001      	movs	r0, #1
    7452:	e7f5      	b.n	7440 <ButtonPressed+0x14>
    7454:	4b0f      	ldr	r3, [pc, #60]	; (7494 <ButtonPressed+0x68>)
    7456:	6a1b      	ldr	r3, [r3, #32]
    else if(!port_pin_get_input_level(WING_BUTTON_1))
    7458:	025b      	lsls	r3, r3, #9
    745a:	d40d      	bmi.n	7478 <ButtonPressed+0x4c>
	    if(PUSH_BUTTON_pressed == false)
    745c:	4b0e      	ldr	r3, [pc, #56]	; (7498 <ButtonPressed+0x6c>)
    745e:	781b      	ldrb	r3, [r3, #0]
    return 0;
    7460:	2000      	movs	r0, #0
	    if(PUSH_BUTTON_pressed == false)
    7462:	2b00      	cmp	r3, #0
    7464:	d1ec      	bne.n	7440 <ButtonPressed+0x14>
		    PUSH_BUTTON_pressed = true;
    7466:	2201      	movs	r2, #1
    7468:	4b0b      	ldr	r3, [pc, #44]	; (7498 <ButtonPressed+0x6c>)
    746a:	701a      	strb	r2, [r3, #0]
		    PUSH_BUTTON_press_time.Val = MiWi_TickGet();
    746c:	4b0b      	ldr	r3, [pc, #44]	; (749c <ButtonPressed+0x70>)
    746e:	4798      	blx	r3
    7470:	4b0b      	ldr	r3, [pc, #44]	; (74a0 <ButtonPressed+0x74>)
    7472:	6018      	str	r0, [r3, #0]
		    return 2;
    7474:	2002      	movs	r0, #2
    7476:	e7e3      	b.n	7440 <ButtonPressed+0x14>
		t.Val = MiWi_TickGet();
    7478:	4b08      	ldr	r3, [pc, #32]	; (749c <ButtonPressed+0x70>)
    747a:	4798      	blx	r3
        tickDifference.Val = MiWi_TickGetDiff(t,PUSH_BUTTON_press_time);
    747c:	4b08      	ldr	r3, [pc, #32]	; (74a0 <ButtonPressed+0x74>)
    747e:	6819      	ldr	r1, [r3, #0]
    7480:	4b08      	ldr	r3, [pc, #32]	; (74a4 <ButtonPressed+0x78>)
    7482:	4798      	blx	r3
        if(tickDifference.Val > DEBOUNCE_TIME)
    7484:	4b08      	ldr	r3, [pc, #32]	; (74a8 <ButtonPressed+0x7c>)
    7486:	4298      	cmp	r0, r3
    7488:	d902      	bls.n	7490 <ButtonPressed+0x64>
            PUSH_BUTTON_pressed = false;
    748a:	2200      	movs	r2, #0
    748c:	4b02      	ldr	r3, [pc, #8]	; (7498 <ButtonPressed+0x6c>)
    748e:	701a      	strb	r2, [r3, #0]
    return 0;
    7490:	2000      	movs	r0, #0
    7492:	e7d5      	b.n	7440 <ButtonPressed+0x14>
    7494:	40002800 	.word	0x40002800
    7498:	20002128 	.word	0x20002128
    749c:	0000bae5 	.word	0x0000bae5
    74a0:	2000212c 	.word	0x2000212c
    74a4:	0000bb45 	.word	0x0000bb45
    74a8:	00003fff 	.word	0x00003fff

000074ac <Buttons_init>:
#if (defined EXT_BOARD_OLED1_XPLAINED_PRO)
/**
 * \brief Configures buttons
 */
void Buttons_init(void)
{
    74ac:	b530      	push	{r4, r5, lr}
    74ae:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    74b0:	ac01      	add	r4, sp, #4
    74b2:	2300      	movs	r3, #0
    74b4:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    74b6:	2201      	movs	r2, #1
    74b8:	7062      	strb	r2, [r4, #1]
	config->powersave  = false;
    74ba:	70a3      	strb	r3, [r4, #2]

	conf.direction = PORT_PIN_DIR_INPUT;
	conf.input_pull = PORT_PIN_PULL_UP;

	/* Configure all three buttons as inputs */
	port_pin_set_config(WING_BUTTON_1, &conf);
    74bc:	0021      	movs	r1, r4
    74be:	2016      	movs	r0, #22
    74c0:	4d04      	ldr	r5, [pc, #16]	; (74d4 <Buttons_init+0x28>)
    74c2:	47a8      	blx	r5
	port_pin_set_config(WING_BUTTON_2, &conf);
    74c4:	0021      	movs	r1, r4
    74c6:	2006      	movs	r0, #6
    74c8:	47a8      	blx	r5
	port_pin_set_config(WING_BUTTON_3, &conf);
    74ca:	0021      	movs	r1, r4
    74cc:	2007      	movs	r0, #7
    74ce:	47a8      	blx	r5
}
    74d0:	b003      	add	sp, #12
    74d2:	bd30      	pop	{r4, r5, pc}
    74d4:	00005155 	.word	0x00005155

000074d8 <APP_TaskHandler>:

/*********************************************************************//*
 \brief      Application Task Handler
 ************************************************************************/
SYSTEM_TaskStatus_t APP_TaskHandler(void)
{
    74d8:	b510      	push	{r4, lr}
    Run_Demo();
    74da:	4b02      	ldr	r3, [pc, #8]	; (74e4 <APP_TaskHandler+0xc>)
    74dc:	4798      	blx	r3
    return SYSTEM_TASK_SUCCESS;
}
    74de:	2000      	movs	r0, #0
    74e0:	bd10      	pop	{r4, pc}
    74e2:	46c0      	nop			; (mov r8, r8)
    74e4:	00007b3d 	.word	0x00007b3d

000074e8 <ReadMacAddress>:
* Overview:		    Uses the MAC Address for addressing
*
* Note:			    
**********************************************************************/
void ReadMacAddress(void)
{
    74e8:	b510      	push	{r4, lr}
    74ea:	b082      	sub	sp, #8
    74ec:	466b      	mov	r3, sp
    74ee:	4669      	mov	r1, sp
    74f0:	4a0b      	ldr	r2, [pc, #44]	; (7520 <ReadMacAddress+0x38>)
	}
#elif (BOARD == WLR089_XPLAINED_PRO && defined(__WLR089U0__))
	#define NVM_UID_ADDRESS   ((volatile uint16_t *)(0x0080400AU))
	uint8_t i = 0, j = 0 ;
	uint8_t peui64[8] ;
	for (i = 0; i < MY_ADDRESS_LENGTH; i += 2, j++)
    74f2:	4c0c      	ldr	r4, [pc, #48]	; (7524 <ReadMacAddress+0x3c>)
	{
		peui64[i] = (NVM_UID_ADDRESS[j] & 0xFF) ;
    74f4:	8810      	ldrh	r0, [r2, #0]
    74f6:	7008      	strb	r0, [r1, #0]
		peui64[i + 1] = (NVM_UID_ADDRESS[j] >> 8) ;
    74f8:	8810      	ldrh	r0, [r2, #0]
    74fa:	0a00      	lsrs	r0, r0, #8
    74fc:	7048      	strb	r0, [r1, #1]
    74fe:	3202      	adds	r2, #2
    7500:	3102      	adds	r1, #2
	for (i = 0; i < MY_ADDRESS_LENGTH; i += 2, j++)
    7502:	42a2      	cmp	r2, r4
    7504:	d1f6      	bne.n	74f4 <ReadMacAddress+0xc>
    7506:	4a08      	ldr	r2, [pc, #32]	; (7528 <ReadMacAddress+0x40>)
    7508:	2008      	movs	r0, #8
    750a:	4240      	negs	r0, r0
    750c:	4468      	add	r0, sp
	}
	for (i= 0; i < MY_ADDRESS_LENGTH; i++)
	{
		myLongAddress[i] = peui64[MY_ADDRESS_LENGTH-i-1] ;
    750e:	79d9      	ldrb	r1, [r3, #7]
    7510:	7011      	strb	r1, [r2, #0]
    7512:	3b01      	subs	r3, #1
    7514:	3201      	adds	r2, #1
	for (i= 0; i < MY_ADDRESS_LENGTH; i++)
    7516:	4283      	cmp	r3, r0
    7518:	d1f9      	bne.n	750e <ReadMacAddress+0x26>
	}
#endif
}
    751a:	b002      	add	sp, #8
    751c:	bd10      	pop	{r4, pc}
    751e:	46c0      	nop			; (mov r8, r8)
    7520:	0080400a 	.word	0x0080400a
    7524:	00804012 	.word	0x00804012
    7528:	20000020 	.word	0x20000020

0000752c <main>:
{   
    752c:	b570      	push	{r4, r5, r6, lr}
	system_init();
    752e:	4b10      	ldr	r3, [pc, #64]	; (7570 <main+0x44>)
    7530:	4798      	blx	r3
	delay_init();
    7532:	4b10      	ldr	r3, [pc, #64]	; (7574 <main+0x48>)
    7534:	4798      	blx	r3
	cpu_irq_enable();
    7536:	2201      	movs	r2, #1
    7538:	4b0f      	ldr	r3, [pc, #60]	; (7578 <main+0x4c>)
    753a:	701a      	strb	r2, [r3, #0]
    753c:	f3bf 8f5f 	dmb	sy
    7540:	b662      	cpsie	i
	LCD_Initialize();
    7542:	4b0e      	ldr	r3, [pc, #56]	; (757c <main+0x50>)
    7544:	4798      	blx	r3
	sio2host_init();
    7546:	4b0e      	ldr	r3, [pc, #56]	; (7580 <main+0x54>)
    7548:	4798      	blx	r3
	ReadMacAddress(); 
    754a:	4b0e      	ldr	r3, [pc, #56]	; (7584 <main+0x58>)
    754c:	4798      	blx	r3
	SystemTimerInit();
    754e:	4b0e      	ldr	r3, [pc, #56]	; (7588 <main+0x5c>)
    7550:	4798      	blx	r3
    DemoOutput_Greeting();	
    7552:	4b0e      	ldr	r3, [pc, #56]	; (758c <main+0x60>)
    7554:	4798      	blx	r3
    Buttons_init();
    7556:	4b0e      	ldr	r3, [pc, #56]	; (7590 <main+0x64>)
    7558:	4798      	blx	r3
    Initialize_Demo(freezer_enable);
    755a:	2000      	movs	r0, #0
    755c:	4b0d      	ldr	r3, [pc, #52]	; (7594 <main+0x68>)
    755e:	4798      	blx	r3
    Stack_Init();
    7560:	4b0d      	ldr	r3, [pc, #52]	; (7598 <main+0x6c>)
    7562:	4798      	blx	r3
		SYSTEM_RunTasks();
    7564:	4d0d      	ldr	r5, [pc, #52]	; (759c <main+0x70>)
		Run_Demo();
    7566:	4c0e      	ldr	r4, [pc, #56]	; (75a0 <main+0x74>)
		SYSTEM_RunTasks();
    7568:	47a8      	blx	r5
		Run_Demo();
    756a:	47a0      	blx	r4
    756c:	e7fc      	b.n	7568 <main+0x3c>
    756e:	46c0      	nop			; (mov r8, r8)
    7570:	00006b79 	.word	0x00006b79
    7574:	000046b1 	.word	0x000046b1
    7578:	20000014 	.word	0x20000014
    757c:	00007b51 	.word	0x00007b51
    7580:	0000bbf9 	.word	0x0000bbf9
    7584:	000074e9 	.word	0x000074e9
    7588:	0000c69d 	.word	0x0000c69d
    758c:	000071e1 	.word	0x000071e1
    7590:	000074ad 	.word	0x000074ad
    7594:	00007981 	.word	0x00007981
    7598:	0000ccad 	.word	0x0000ccad
    759c:	0000ccbd 	.word	0x0000ccbd
    75a0:	00007b3d 	.word	0x00007b3d

000075a4 <TxToutCallback>:
#if defined(ENABLE_SLEEP_FEATURE)
volatile uint8_t send_data = 0;	// Flag used to put a sleeping device(RFD) in sleep - wakeup - transmit cycle
#endif // #if defined(ENABLE_SLEEP_FEATURE)

void TxToutCallback(void)
{
    75a4:	b510      	push	{r4, lr}
	#if defined(ENABLE_SLEEP_FEATURE)
		send_data = 0;
	#endif // #if defined(ENABLE_SLEEP_FEATURE)
	/* That bring the node back to continuous transaction cycle */
	PHY_DataConf(TRANSACTION_EXPIRED);
    75a6:	2005      	movs	r0, #5
    75a8:	4b03      	ldr	r3, [pc, #12]	; (75b8 <TxToutCallback+0x14>)
    75aa:	4798      	blx	r3
	SwTimerStop(TxTimerId);
    75ac:	4b03      	ldr	r3, [pc, #12]	; (75bc <TxToutCallback+0x18>)
    75ae:	7818      	ldrb	r0, [r3, #0]
    75b0:	4b03      	ldr	r3, [pc, #12]	; (75c0 <TxToutCallback+0x1c>)
    75b2:	4798      	blx	r3
}
    75b4:	bd10      	pop	{r4, pc}
    75b6:	46c0      	nop			; (mov r8, r8)
    75b8:	000098d5 	.word	0x000098d5
    75bc:	20000305 	.word	0x20000305
    75c0:	0000ca3d 	.word	0x0000ca3d

000075c4 <dataConfcb>:

void dataConfcb(uint8_t handle, miwi_status_t status, uint8_t* msgPointer)
{
    75c4:	b510      	push	{r4, lr}
    75c6:	0014      	movs	r4, r2
	#if defined (ENABLE_CONSOLE)
        printf("\nData Confirm: Handle: %d status:%d \r\n", handle, status);
    75c8:	000a      	movs	r2, r1
    75ca:	0001      	movs	r1, r0
    75cc:	4805      	ldr	r0, [pc, #20]	; (75e4 <dataConfcb+0x20>)
    75ce:	4b06      	ldr	r3, [pc, #24]	; (75e8 <dataConfcb+0x24>)
    75d0:	4798      	blx	r3
	#endif // #if defined (ENABLE_CONSOLE)
	#if defined(ENABLE_SLEEP_FEATURE)
		send_data = 0;
	#endif // #if defined(ENABLE_SLEEP_FEATURE)
	/* Stop transmission timeout timer */
		SwTimerStop(TxTimerId);
    75d2:	4b06      	ldr	r3, [pc, #24]	; (75ec <dataConfcb+0x28>)
    75d4:	7818      	ldrb	r0, [r3, #0]
    75d6:	4b06      	ldr	r3, [pc, #24]	; (75f0 <dataConfcb+0x2c>)
    75d8:	4798      	blx	r3
	/* Free payload buffer allocated */
	MiMem_Free(msgPointer);
    75da:	0020      	movs	r0, r4
    75dc:	4b05      	ldr	r3, [pc, #20]	; (75f4 <dataConfcb+0x30>)
    75de:	4798      	blx	r3
}
    75e0:	bd10      	pop	{r4, pc}
    75e2:	46c0      	nop			; (mov r8, r8)
    75e4:	00016ca0 	.word	0x00016ca0
    75e8:	00015399 	.word	0x00015399
    75ec:	20000305 	.word	0x20000305
    75f0:	0000ca3d 	.word	0x0000ca3d
    75f4:	0000b961 	.word	0x0000b961

000075f8 <run_p2p_demo>:

void run_p2p_demo(void)
{
    75f8:	b570      	push	{r4, r5, r6, lr}
    75fa:	b086      	sub	sp, #24
		// Function ButtonPressed will return if any of the two buttons
		// has been pushed.
		/*******************************************************************/

		/* Read the button */
		uint8_t PressedButton = ButtonPressed();
    75fc:	4b6f      	ldr	r3, [pc, #444]	; (77bc <run_p2p_demo+0x1c4>)
    75fe:	4798      	blx	r3
		switch( PressedButton )
    7600:	2801      	cmp	r0, #1
    7602:	d003      	beq.n	760c <run_p2p_demo+0x14>
    7604:	2802      	cmp	r0, #2
    7606:	d048      	beq.n	769a <run_p2p_demo+0xa2>
			break;
			default:
			break;
		}
	}
}
    7608:	b006      	add	sp, #24
    760a:	bd70      	pop	{r4, r5, r6, pc}
				uint16_t broadcastAddress = 0xFFFF;
    760c:	2201      	movs	r2, #1
    760e:	4252      	negs	r2, r2
    7610:	2316      	movs	r3, #22
    7612:	446b      	add	r3, sp
    7614:	801a      	strh	r2, [r3, #0]
					dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(MAX_SEC_BCAST_PAYLOAD)); 
    7616:	20e0      	movs	r0, #224	; 0xe0
    7618:	4b69      	ldr	r3, [pc, #420]	; (77c0 <run_p2p_demo+0x1c8>)
    761a:	4798      	blx	r3
					if (NULL == dataPtr)
    761c:	2800      	cmp	r0, #0
    761e:	d0f3      	beq.n	7608 <run_p2p_demo+0x10>
                    for(i = 0; i < MAX_SEC_BCAST_PAYLOAD; i++) 
    7620:	2200      	movs	r2, #0
    7622:	4b68      	ldr	r3, [pc, #416]	; (77c4 <run_p2p_demo+0x1cc>)
    7624:	701a      	strb	r2, [r3, #0]
    7626:	2400      	movs	r4, #0
						dataPtr[dataLen++] = 0x42;	// 'B'
    7628:	2342      	movs	r3, #66	; 0x42
                    for(i = 0; i < MAX_SEC_BCAST_PAYLOAD; i++) 
    762a:	4d66      	ldr	r5, [pc, #408]	; (77c4 <run_p2p_demo+0x1cc>)
						dataPtr[dataLen++] = 0x42;	// 'B'
    762c:	1c62      	adds	r2, r4, #1
    762e:	b2d2      	uxtb	r2, r2
    7630:	5503      	strb	r3, [r0, r4]
                    for(i = 0; i < MAX_SEC_BCAST_PAYLOAD; i++) 
    7632:	7829      	ldrb	r1, [r5, #0]
    7634:	3101      	adds	r1, #1
    7636:	b2c9      	uxtb	r1, r1
    7638:	7029      	strb	r1, [r5, #0]
						dataPtr[dataLen++] = 0x42;	// 'B'
    763a:	0014      	movs	r4, r2
                    for(i = 0; i < MAX_SEC_BCAST_PAYLOAD; i++) 
    763c:	29d9      	cmp	r1, #217	; 0xd9
    763e:	d9f5      	bls.n	762c <run_p2p_demo+0x34>
                    TxSynCount++;
    7640:	4961      	ldr	r1, [pc, #388]	; (77c8 <run_p2p_demo+0x1d0>)
    7642:	780b      	ldrb	r3, [r1, #0]
    7644:	3301      	adds	r3, #1
    7646:	700b      	strb	r3, [r1, #0]
				if(MiApp_SendData(SHORT_ADDR_LEN, (uint8_t *)&broadcastAddress, dataLen, dataPtr, msghandledemo++, true, dataConfcb)== false)
    7648:	4960      	ldr	r1, [pc, #384]	; (77cc <run_p2p_demo+0x1d4>)
    764a:	780b      	ldrb	r3, [r1, #0]
    764c:	1c5c      	adds	r4, r3, #1
    764e:	700c      	strb	r4, [r1, #0]
    7650:	495f      	ldr	r1, [pc, #380]	; (77d0 <run_p2p_demo+0x1d8>)
    7652:	9102      	str	r1, [sp, #8]
    7654:	2101      	movs	r1, #1
    7656:	9101      	str	r1, [sp, #4]
    7658:	9300      	str	r3, [sp, #0]
    765a:	0003      	movs	r3, r0
    765c:	3115      	adds	r1, #21
    765e:	4469      	add	r1, sp
    7660:	2002      	movs	r0, #2
    7662:	4c5c      	ldr	r4, [pc, #368]	; (77d4 <run_p2p_demo+0x1dc>)
    7664:	47a0      	blx	r4
    7666:	2800      	cmp	r0, #0
    7668:	d10d      	bne.n	7686 <run_p2p_demo+0x8e>
					DemoOutput_BroadcastFail();
    766a:	4b5b      	ldr	r3, [pc, #364]	; (77d8 <run_p2p_demo+0x1e0>)
    766c:	4798      	blx	r3
				DemoOutput_UpdateTxRx(++TxNum, RxNum);
    766e:	4b5b      	ldr	r3, [pc, #364]	; (77dc <run_p2p_demo+0x1e4>)
    7670:	7818      	ldrb	r0, [r3, #0]
    7672:	3001      	adds	r0, #1
    7674:	b2c0      	uxtb	r0, r0
    7676:	7018      	strb	r0, [r3, #0]
    7678:	4b59      	ldr	r3, [pc, #356]	; (77e0 <run_p2p_demo+0x1e8>)
    767a:	7819      	ldrb	r1, [r3, #0]
    767c:	4b59      	ldr	r3, [pc, #356]	; (77e4 <run_p2p_demo+0x1ec>)
    767e:	4798      	blx	r3
				DemoOutput_Instruction();
    7680:	4b59      	ldr	r3, [pc, #356]	; (77e8 <run_p2p_demo+0x1f0>)
    7682:	4798      	blx	r3
			break;
    7684:	e7c0      	b.n	7608 <run_p2p_demo+0x10>
					SwTimerStart (TxTimerId, MS_TO_US(5000), 0/*SW_TIMEOUT_RELATIVE*/, (void *)TxToutCallback, NULL);
    7686:	4b59      	ldr	r3, [pc, #356]	; (77ec <run_p2p_demo+0x1f4>)
    7688:	7818      	ldrb	r0, [r3, #0]
    768a:	2300      	movs	r3, #0
    768c:	9300      	str	r3, [sp, #0]
    768e:	4b58      	ldr	r3, [pc, #352]	; (77f0 <run_p2p_demo+0x1f8>)
    7690:	2200      	movs	r2, #0
    7692:	4958      	ldr	r1, [pc, #352]	; (77f4 <run_p2p_demo+0x1fc>)
    7694:	4c58      	ldr	r4, [pc, #352]	; (77f8 <run_p2p_demo+0x200>)
    7696:	47a0      	blx	r4
    7698:	e7e9      	b.n	766e <run_p2p_demo+0x76>
				chk_sel_status = true;
    769a:	2301      	movs	r3, #1
    769c:	4a57      	ldr	r2, [pc, #348]	; (77fc <run_p2p_demo+0x204>)
    769e:	7013      	strb	r3, [r2, #0]
				select_ed = 0;
    76a0:	2100      	movs	r1, #0
    76a2:	4a57      	ldr	r2, [pc, #348]	; (7800 <run_p2p_demo+0x208>)
    76a4:	7011      	strb	r1, [r2, #0]
				update_ed = true;
    76a6:	4a57      	ldr	r2, [pc, #348]	; (7804 <run_p2p_demo+0x20c>)
    76a8:	7013      	strb	r3, [r2, #0]
						uint8_t switch_val = ButtonPressed();
    76aa:	4c44      	ldr	r4, [pc, #272]	; (77bc <run_p2p_demo+0x1c4>)
				while(update_ed == true)
    76ac:	e03d      	b.n	772a <run_p2p_demo+0x132>
							update_ed = false;
    76ae:	2300      	movs	r3, #0
    76b0:	4a54      	ldr	r2, [pc, #336]	; (7804 <run_p2p_demo+0x20c>)
    76b2:	7013      	strb	r3, [r2, #0]
							chk_sel_status = false;
    76b4:	4a51      	ldr	r2, [pc, #324]	; (77fc <run_p2p_demo+0x204>)
    76b6:	7013      	strb	r3, [r2, #0]
								dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(MAX_SEC_UCAST_PAYLOAD));
    76b8:	30df      	adds	r0, #223	; 0xdf
    76ba:	4b41      	ldr	r3, [pc, #260]	; (77c0 <run_p2p_demo+0x1c8>)
    76bc:	4798      	blx	r3
							    if (NULL == dataPtr)
    76be:	2800      	cmp	r0, #0
    76c0:	d0a2      	beq.n	7608 <run_p2p_demo+0x10>
                                for(i = 0; i < MAX_SEC_UCAST_PAYLOAD; i++)        
    76c2:	2200      	movs	r2, #0
    76c4:	4b3f      	ldr	r3, [pc, #252]	; (77c4 <run_p2p_demo+0x1cc>)
    76c6:	701a      	strb	r2, [r3, #0]
    76c8:	2500      	movs	r5, #0
									dataPtr[dataLen++] = 0x55;	// 'U'
    76ca:	2355      	movs	r3, #85	; 0x55
                                for(i = 0; i < MAX_SEC_UCAST_PAYLOAD; i++)        
    76cc:	4e3d      	ldr	r6, [pc, #244]	; (77c4 <run_p2p_demo+0x1cc>)
									dataPtr[dataLen++] = 0x55;	// 'U'
    76ce:	1c6a      	adds	r2, r5, #1
    76d0:	b2d2      	uxtb	r2, r2
    76d2:	5543      	strb	r3, [r0, r5]
                                for(i = 0; i < MAX_SEC_UCAST_PAYLOAD; i++)        
    76d4:	7831      	ldrb	r1, [r6, #0]
    76d6:	3101      	adds	r1, #1
    76d8:	b2c9      	uxtb	r1, r1
    76da:	7031      	strb	r1, [r6, #0]
									dataPtr[dataLen++] = 0x55;	// 'U'
    76dc:	0015      	movs	r5, r2
                                for(i = 0; i < MAX_SEC_UCAST_PAYLOAD; i++)        
    76de:	29d9      	cmp	r1, #217	; 0xd9
    76e0:	d9f5      	bls.n	76ce <run_p2p_demo+0xd6>
                                TxSynCount2++;
    76e2:	4949      	ldr	r1, [pc, #292]	; (7808 <run_p2p_demo+0x210>)
    76e4:	780b      	ldrb	r3, [r1, #0]
    76e6:	3301      	adds	r3, #1
    76e8:	700b      	strb	r3, [r1, #0]
							if (MiApp_SendData(LONG_ADDR_LEN, ConnectionTable[select_ed].Address, dataLen, dataPtr, msghandledemo++, 1, dataConfcb) == false)
    76ea:	4b45      	ldr	r3, [pc, #276]	; (7800 <run_p2p_demo+0x208>)
    76ec:	781b      	ldrb	r3, [r3, #0]
    76ee:	0099      	lsls	r1, r3, #2
    76f0:	18c9      	adds	r1, r1, r3
    76f2:	0049      	lsls	r1, r1, #1
    76f4:	4b45      	ldr	r3, [pc, #276]	; (780c <run_p2p_demo+0x214>)
    76f6:	18c9      	adds	r1, r1, r3
    76f8:	4d34      	ldr	r5, [pc, #208]	; (77cc <run_p2p_demo+0x1d4>)
    76fa:	782b      	ldrb	r3, [r5, #0]
    76fc:	1c5e      	adds	r6, r3, #1
    76fe:	702e      	strb	r6, [r5, #0]
    7700:	4d33      	ldr	r5, [pc, #204]	; (77d0 <run_p2p_demo+0x1d8>)
    7702:	9502      	str	r5, [sp, #8]
    7704:	2501      	movs	r5, #1
    7706:	9501      	str	r5, [sp, #4]
    7708:	9300      	str	r3, [sp, #0]
    770a:	0003      	movs	r3, r0
    770c:	2008      	movs	r0, #8
    770e:	4d31      	ldr	r5, [pc, #196]	; (77d4 <run_p2p_demo+0x1dc>)
    7710:	47a8      	blx	r5
    7712:	2800      	cmp	r0, #0
    7714:	d140      	bne.n	7798 <run_p2p_demo+0x1a0>
								DemoOutput_UnicastFail();
    7716:	4b3e      	ldr	r3, [pc, #248]	; (7810 <run_p2p_demo+0x218>)
    7718:	4798      	blx	r3
							DemoOutput_UpdateTxRx(TxNum, RxNum);
    771a:	4b31      	ldr	r3, [pc, #196]	; (77e0 <run_p2p_demo+0x1e8>)
    771c:	7819      	ldrb	r1, [r3, #0]
    771e:	4b2f      	ldr	r3, [pc, #188]	; (77dc <run_p2p_demo+0x1e4>)
    7720:	7818      	ldrb	r0, [r3, #0]
    7722:	4b30      	ldr	r3, [pc, #192]	; (77e4 <run_p2p_demo+0x1ec>)
    7724:	4798      	blx	r3
							DemoOutput_Instruction();
    7726:	4b30      	ldr	r3, [pc, #192]	; (77e8 <run_p2p_demo+0x1f0>)
    7728:	4798      	blx	r3
				while(update_ed == true)
    772a:	4b36      	ldr	r3, [pc, #216]	; (7804 <run_p2p_demo+0x20c>)
    772c:	781b      	ldrb	r3, [r3, #0]
    772e:	2b00      	cmp	r3, #0
    7730:	d100      	bne.n	7734 <run_p2p_demo+0x13c>
    7732:	e769      	b.n	7608 <run_p2p_demo+0x10>
						LCD_Erase();
    7734:	4b37      	ldr	r3, [pc, #220]	; (7814 <run_p2p_demo+0x21c>)
    7736:	4798      	blx	r3
						snprintf(LCDText, sizeof(LCDText),(char*)"SW:%02d-%02x%02x%02x \nBUTTON1: Change node",select_ed,ConnectionTable[select_ed].Address[0],
    7738:	4b31      	ldr	r3, [pc, #196]	; (7800 <run_p2p_demo+0x208>)
    773a:	781b      	ldrb	r3, [r3, #0]
                               ConnectionTable[select_ed].Address[1],ConnectionTable[select_ed].Address[2]);
    773c:	4833      	ldr	r0, [pc, #204]	; (780c <run_p2p_demo+0x214>)
    773e:	009a      	lsls	r2, r3, #2
    7740:	18d1      	adds	r1, r2, r3
    7742:	0049      	lsls	r1, r1, #1
    7744:	1841      	adds	r1, r0, r1
						snprintf(LCDText, sizeof(LCDText),(char*)"SW:%02d-%02x%02x%02x \nBUTTON1: Change node",select_ed,ConnectionTable[select_ed].Address[0],
    7746:	788d      	ldrb	r5, [r1, #2]
    7748:	9502      	str	r5, [sp, #8]
    774a:	7849      	ldrb	r1, [r1, #1]
    774c:	9101      	str	r1, [sp, #4]
    774e:	18d2      	adds	r2, r2, r3
    7750:	0052      	lsls	r2, r2, #1
    7752:	5c12      	ldrb	r2, [r2, r0]
    7754:	9200      	str	r2, [sp, #0]
    7756:	4a30      	ldr	r2, [pc, #192]	; (7818 <run_p2p_demo+0x220>)
    7758:	2141      	movs	r1, #65	; 0x41
    775a:	4830      	ldr	r0, [pc, #192]	; (781c <run_p2p_demo+0x224>)
    775c:	4d30      	ldr	r5, [pc, #192]	; (7820 <run_p2p_demo+0x228>)
    775e:	47a8      	blx	r5
                        LCD_Update();
    7760:	4b30      	ldr	r3, [pc, #192]	; (7824 <run_p2p_demo+0x22c>)
    7762:	4798      	blx	r3
					chk_sel_status = true;
    7764:	2201      	movs	r2, #1
    7766:	4b25      	ldr	r3, [pc, #148]	; (77fc <run_p2p_demo+0x204>)
    7768:	701a      	strb	r2, [r3, #0]
					while(chk_sel_status)
    776a:	001d      	movs	r5, r3
    776c:	782b      	ldrb	r3, [r5, #0]
    776e:	2b00      	cmp	r3, #0
    7770:	d0db      	beq.n	772a <run_p2p_demo+0x132>
						uint8_t switch_val = ButtonPressed();
    7772:	47a0      	blx	r4
						if(switch_val == 1)
    7774:	2801      	cmp	r0, #1
    7776:	d09a      	beq.n	76ae <run_p2p_demo+0xb6>
						else if(switch_val == 2)
    7778:	2802      	cmp	r0, #2
    777a:	d1f7      	bne.n	776c <run_p2p_demo+0x174>
							if (select_ed > conn_size-2)
    777c:	4b20      	ldr	r3, [pc, #128]	; (7800 <run_p2p_demo+0x208>)
    777e:	781a      	ldrb	r2, [r3, #0]
    7780:	4b29      	ldr	r3, [pc, #164]	; (7828 <run_p2p_demo+0x230>)
    7782:	781b      	ldrb	r3, [r3, #0]
    7784:	3b02      	subs	r3, #2
    7786:	429a      	cmp	r2, r3
    7788:	dd14      	ble.n	77b4 <run_p2p_demo+0x1bc>
								select_ed = 0;
    778a:	2200      	movs	r2, #0
    778c:	4b1c      	ldr	r3, [pc, #112]	; (7800 <run_p2p_demo+0x208>)
    778e:	701a      	strb	r2, [r3, #0]
							chk_sel_status = false;
    7790:	2200      	movs	r2, #0
    7792:	4b1a      	ldr	r3, [pc, #104]	; (77fc <run_p2p_demo+0x204>)
    7794:	701a      	strb	r2, [r3, #0]
    7796:	e7e9      	b.n	776c <run_p2p_demo+0x174>
								TxNum++;
    7798:	4a10      	ldr	r2, [pc, #64]	; (77dc <run_p2p_demo+0x1e4>)
    779a:	7813      	ldrb	r3, [r2, #0]
    779c:	3301      	adds	r3, #1
    779e:	7013      	strb	r3, [r2, #0]
								SwTimerStart (TxTimerId, MS_TO_US(5000), 0/*SW_TIMEOUT_RELATIVE*/, (void *)TxToutCallback, NULL);
    77a0:	4b12      	ldr	r3, [pc, #72]	; (77ec <run_p2p_demo+0x1f4>)
    77a2:	7818      	ldrb	r0, [r3, #0]
    77a4:	2300      	movs	r3, #0
    77a6:	9300      	str	r3, [sp, #0]
    77a8:	4b11      	ldr	r3, [pc, #68]	; (77f0 <run_p2p_demo+0x1f8>)
    77aa:	2200      	movs	r2, #0
    77ac:	4911      	ldr	r1, [pc, #68]	; (77f4 <run_p2p_demo+0x1fc>)
    77ae:	4d12      	ldr	r5, [pc, #72]	; (77f8 <run_p2p_demo+0x200>)
    77b0:	47a8      	blx	r5
    77b2:	e7b2      	b.n	771a <run_p2p_demo+0x122>
								select_ed = select_ed+1;
    77b4:	3201      	adds	r2, #1
    77b6:	4b12      	ldr	r3, [pc, #72]	; (7800 <run_p2p_demo+0x208>)
    77b8:	701a      	strb	r2, [r3, #0]
    77ba:	e7e9      	b.n	7790 <run_p2p_demo+0x198>
    77bc:	0000742d 	.word	0x0000742d
    77c0:	0000b8a5 	.word	0x0000b8a5
    77c4:	20002132 	.word	0x20002132
    77c8:	20000302 	.word	0x20000302
    77cc:	20000304 	.word	0x20000304
    77d0:	000075c5 	.word	0x000075c5
    77d4:	0000a6f1 	.word	0x0000a6f1
    77d8:	00007409 	.word	0x00007409
    77dc:	20000301 	.word	0x20000301
    77e0:	20000300 	.word	0x20000300
    77e4:	000073ad 	.word	0x000073ad
    77e8:	000072b5 	.word	0x000072b5
    77ec:	20000305 	.word	0x20000305
    77f0:	000075a5 	.word	0x000075a5
    77f4:	004c4b40 	.word	0x004c4b40
    77f8:	0000c739 	.word	0x0000c739
    77fc:	20000015 	.word	0x20000015
    7800:	20002131 	.word	0x20002131
    7804:	20002130 	.word	0x20002130
    7808:	20000303 	.word	0x20000303
    780c:	2000280c 	.word	0x2000280c
    7810:	000073e5 	.word	0x000073e5
    7814:	00007b5d 	.word	0x00007b5d
    7818:	00016cc8 	.word	0x00016cc8
    781c:	20002134 	.word	0x20002134
    7820:	00015709 	.word	0x00015709
    7824:	00007b79 	.word	0x00007b79
    7828:	20002865 	.word	0x20002865

0000782c <ReceivedDataIndication>:

void ReceivedDataIndication (RECEIVED_MESSAGE *ind)
{
    782c:	b510      	push	{r4, lr}
    /*******************************************************************/
    // If a packet has been received, handle the information available
    // in rxMessage.
    /*******************************************************************/
	if ((myPANID.v[1] == ind->SourcePANID.v[1]) && (myPANID.v[0] == ind->SourcePANID.v[0]))
    782e:	4b0e      	ldr	r3, [pc, #56]	; (7868 <ReceivedDataIndication+0x3c>)
    7830:	881a      	ldrh	r2, [r3, #0]
    7832:	8843      	ldrh	r3, [r0, #2]
    7834:	429a      	cmp	r2, r3
    7836:	d005      	beq.n	7844 <ReceivedDataIndication+0x18>
		LED_Toggle(LED0);
		DemoOutput_Instruction();
	}
	else
	{
		printf("Packet received from other Source PAN ID : 0x%x%x\r\n",ind->SourcePANID.v[1],ind->SourcePANID.v[0]);
    7838:	7882      	ldrb	r2, [r0, #2]
    783a:	78c1      	ldrb	r1, [r0, #3]
    783c:	480b      	ldr	r0, [pc, #44]	; (786c <ReceivedDataIndication+0x40>)
    783e:	4b0c      	ldr	r3, [pc, #48]	; (7870 <ReceivedDataIndication+0x44>)
    7840:	4798      	blx	r3
	}
}
    7842:	bd10      	pop	{r4, pc}
		DemoOutput_HandleMessage();
    7844:	4b0b      	ldr	r3, [pc, #44]	; (7874 <ReceivedDataIndication+0x48>)
    7846:	4798      	blx	r3
		DemoOutput_UpdateTxRx(TxNum, ++RxNum);
    7848:	4b0b      	ldr	r3, [pc, #44]	; (7878 <ReceivedDataIndication+0x4c>)
    784a:	7818      	ldrb	r0, [r3, #0]
    784c:	4b0b      	ldr	r3, [pc, #44]	; (787c <ReceivedDataIndication+0x50>)
    784e:	7819      	ldrb	r1, [r3, #0]
    7850:	3101      	adds	r1, #1
    7852:	b2c9      	uxtb	r1, r1
    7854:	7019      	strb	r1, [r3, #0]
    7856:	4b0a      	ldr	r3, [pc, #40]	; (7880 <ReceivedDataIndication+0x54>)
    7858:	4798      	blx	r3
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    785a:	2280      	movs	r2, #128	; 0x80
    785c:	0312      	lsls	r2, r2, #12
    785e:	4b09      	ldr	r3, [pc, #36]	; (7884 <ReceivedDataIndication+0x58>)
    7860:	61da      	str	r2, [r3, #28]
		DemoOutput_Instruction();
    7862:	4b09      	ldr	r3, [pc, #36]	; (7888 <ReceivedDataIndication+0x5c>)
    7864:	4798      	blx	r3
    7866:	e7ec      	b.n	7842 <ReceivedDataIndication+0x16>
    7868:	2000285c 	.word	0x2000285c
    786c:	00016c6c 	.word	0x00016c6c
    7870:	00015399 	.word	0x00015399
    7874:	000072cd 	.word	0x000072cd
    7878:	20000301 	.word	0x20000301
    787c:	20000300 	.word	0x20000300
    7880:	000073ad 	.word	0x000073ad
    7884:	40002800 	.word	0x40002800
    7888:	000072b5 	.word	0x000072b5

0000788c <Connection_Confirm>:
#endif // #if defined (ENABLE_CONSOLE)
}
#endif // #ifdef ENABLE_ACTIVE_SCAN	

static void Connection_Confirm(miwi_status_t status)
{
    788c:	b570      	push	{r4, r5, r6, lr}
    788e:	0005      	movs	r5, r0
#if defined (ENABLE_CONSOLE)	
	printf("\r\nConnect Operation Status: "); 
    7890:	4803      	ldr	r0, [pc, #12]	; (78a0 <Connection_Confirm+0x14>)
    7892:	4c04      	ldr	r4, [pc, #16]	; (78a4 <Connection_Confirm+0x18>)
    7894:	47a0      	blx	r4
	printf("%d\n",status);
    7896:	0029      	movs	r1, r5
    7898:	4803      	ldr	r0, [pc, #12]	; (78a8 <Connection_Confirm+0x1c>)
    789a:	47a0      	blx	r4
#endif // #if defined (ENABLE_CONSOLE)	
}
    789c:	bd70      	pop	{r4, r5, r6, pc}
    789e:	46c0      	nop			; (mov r8, r8)
    78a0:	00016cf4 	.word	0x00016cf4
    78a4:	00015399 	.word	0x00015399
    78a8:	00016d14 	.word	0x00016d14

000078ac <Scan_Confirm>:
{
    78ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    78ae:	46de      	mov	lr, fp
    78b0:	4657      	mov	r7, sl
    78b2:	464e      	mov	r6, r9
    78b4:	4645      	mov	r5, r8
    78b6:	b5e0      	push	{r5, r6, r7, lr}
    78b8:	b083      	sub	sp, #12
    78ba:	0003      	movs	r3, r0
    78bc:	9001      	str	r0, [sp, #4]
    78be:	468b      	mov	fp, r1
	for(uint8_t count =0; count <= ActiveScanResultCount-1; count++ )
    78c0:	3b01      	subs	r3, #1
    78c2:	4699      	mov	r9, r3
    78c4:	d440      	bmi.n	7948 <Scan_Confirm+0x9c>
    78c6:	2400      	movs	r4, #0
    78c8:	2300      	movs	r3, #0
    78ca:	4698      	mov	r8, r3
		printf("\nID\tDevice Address \t\tCapability \tPAN ID \tChannel \n");
    78cc:	4b24      	ldr	r3, [pc, #144]	; (7960 <Scan_Confirm+0xb4>)
    78ce:	469a      	mov	sl, r3
		printf("%02x",count+1);
    78d0:	464b      	mov	r3, r9
    78d2:	9300      	str	r3, [sp, #0]
    78d4:	e01f      	b.n	7916 <Scan_Confirm+0x6a>
		printf("\t");
    78d6:	2009      	movs	r0, #9
    78d8:	4e22      	ldr	r6, [pc, #136]	; (7964 <Scan_Confirm+0xb8>)
    78da:	47b0      	blx	r6
		printf("%02x",(ActiveScanResult[count].Capability.Val));	
    78dc:	464b      	mov	r3, r9
    78de:	7b99      	ldrb	r1, [r3, #14]
    78e0:	4c21      	ldr	r4, [pc, #132]	; (7968 <Scan_Confirm+0xbc>)
    78e2:	0020      	movs	r0, r4
    78e4:	4d21      	ldr	r5, [pc, #132]	; (796c <Scan_Confirm+0xc0>)
    78e6:	47a8      	blx	r5
		printf("\t\t");
    78e8:	4821      	ldr	r0, [pc, #132]	; (7970 <Scan_Confirm+0xc4>)
    78ea:	47a8      	blx	r5
		printf("%02x",(ActiveScanResult[count].PANID.Val));
    78ec:	464b      	mov	r3, r9
    78ee:	8959      	ldrh	r1, [r3, #10]
    78f0:	0020      	movs	r0, r4
    78f2:	47a8      	blx	r5
		printf("\t");
    78f4:	2009      	movs	r0, #9
    78f6:	47b0      	blx	r6
		printf("%02x",ActiveScanResult[count].Channel);
    78f8:	464b      	mov	r3, r9
    78fa:	7819      	ldrb	r1, [r3, #0]
    78fc:	0020      	movs	r0, r4
    78fe:	47a8      	blx	r5
		printf("\r\n");
    7900:	481c      	ldr	r0, [pc, #112]	; (7974 <Scan_Confirm+0xc8>)
    7902:	4b17      	ldr	r3, [pc, #92]	; (7960 <Scan_Confirm+0xb4>)
    7904:	4798      	blx	r3
	for(uint8_t count =0; count <= ActiveScanResultCount-1; count++ )
    7906:	4643      	mov	r3, r8
    7908:	3301      	adds	r3, #1
    790a:	b2db      	uxtb	r3, r3
    790c:	4698      	mov	r8, r3
    790e:	001c      	movs	r4, r3
    7910:	9b00      	ldr	r3, [sp, #0]
    7912:	4598      	cmp	r8, r3
    7914:	dc18      	bgt.n	7948 <Scan_Confirm+0x9c>
		printf("\nID\tDevice Address \t\tCapability \tPAN ID \tChannel \n");
    7916:	4818      	ldr	r0, [pc, #96]	; (7978 <Scan_Confirm+0xcc>)
    7918:	47d0      	blx	sl
		printf("%02x",count+1);
    791a:	1c61      	adds	r1, r4, #1
    791c:	4812      	ldr	r0, [pc, #72]	; (7968 <Scan_Confirm+0xbc>)
    791e:	4b13      	ldr	r3, [pc, #76]	; (796c <Scan_Confirm+0xc0>)
    7920:	4798      	blx	r3
		printf("\t");
    7922:	2009      	movs	r0, #9
    7924:	4b0f      	ldr	r3, [pc, #60]	; (7964 <Scan_Confirm+0xb8>)
    7926:	4798      	blx	r3
				printf("%02x",ActiveScanResult[count].Address[MY_ADDRESS_LENGTH-1-j] );
    7928:	4643      	mov	r3, r8
    792a:	011b      	lsls	r3, r3, #4
    792c:	445b      	add	r3, fp
    792e:	4699      	mov	r9, r3
    7930:	001c      	movs	r4, r3
    7932:	3408      	adds	r4, #8
    7934:	001f      	movs	r7, r3
    7936:	4e0c      	ldr	r6, [pc, #48]	; (7968 <Scan_Confirm+0xbc>)
    7938:	4d0c      	ldr	r5, [pc, #48]	; (796c <Scan_Confirm+0xc0>)
    793a:	7821      	ldrb	r1, [r4, #0]
    793c:	0030      	movs	r0, r6
    793e:	47a8      	blx	r5
    7940:	3c01      	subs	r4, #1
		for(uint8_t j = 0; j < 8; j++)
    7942:	42a7      	cmp	r7, r4
    7944:	d1f9      	bne.n	793a <Scan_Confirm+0x8e>
    7946:	e7c6      	b.n	78d6 <Scan_Confirm+0x2a>
	printf("\r\n Scan Operation Status: %d device found",ActiveScanResultCount); 
    7948:	9901      	ldr	r1, [sp, #4]
    794a:	480c      	ldr	r0, [pc, #48]	; (797c <Scan_Confirm+0xd0>)
    794c:	4b07      	ldr	r3, [pc, #28]	; (796c <Scan_Confirm+0xc0>)
    794e:	4798      	blx	r3
}
    7950:	b003      	add	sp, #12
    7952:	bc3c      	pop	{r2, r3, r4, r5}
    7954:	4690      	mov	r8, r2
    7956:	4699      	mov	r9, r3
    7958:	46a2      	mov	sl, r4
    795a:	46ab      	mov	fp, r5
    795c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    795e:	46c0      	nop			; (mov r8, r8)
    7960:	000154b5 	.word	0x000154b5
    7964:	000153cd 	.word	0x000153cd
    7968:	00016c08 	.word	0x00016c08
    796c:	00015399 	.word	0x00015399
    7970:	00016d4c 	.word	0x00016d4c
    7974:	000172cc 	.word	0x000172cc
    7978:	00016d18 	.word	0x00016d18
    797c:	00016d50 	.word	0x00016d50

00007980 <Initialize_Demo>:

bool Initialize_Demo(bool freezer_enable)
{
    7980:	b570      	push	{r4, r5, r6, lr}
    7982:	b086      	sub	sp, #24
    7984:	0004      	movs	r4, r0
    uint8_t i;

	bool invalidIEEEAddrFlag = false;
	uint64_t invalidIEEEAddr;

    MiApp_SubscribeDataIndicationCallback(ReceivedDataIndication);
    7986:	4855      	ldr	r0, [pc, #340]	; (7adc <Initialize_Demo+0x15c>)
    7988:	4b55      	ldr	r3, [pc, #340]	; (7ae0 <Initialize_Demo+0x160>)
    798a:	4798      	blx	r3

	#ifdef ENABLE_SLEEP_FEATURE
		sm_init();
	#endif

    if (freezer_enable)
    798c:	2c00      	cmp	r4, #0
    798e:	d033      	beq.n	79f8 <Initialize_Demo+0x78>
    {
        MiApp_ProtocolInit(NULL, NULL);
    7990:	2100      	movs	r1, #0
    7992:	2000      	movs	r0, #0
    7994:	4b53      	ldr	r3, [pc, #332]	; (7ae4 <Initialize_Demo+0x164>)
    7996:	4798      	blx	r3
		srand(PHY_RandomReq());
    7998:	4b53      	ldr	r3, [pc, #332]	; (7ae8 <Initialize_Demo+0x168>)
    799a:	4798      	blx	r3
    799c:	4b53      	ldr	r3, [pc, #332]	; (7aec <Initialize_Demo+0x16c>)
    799e:	4798      	blx	r3
		/* Check if a valid IEEE address is available.
		0x0000000000000000 and 0xFFFFFFFFFFFFFFFF is presumed to be invalid */
		/* Check if IEEE address is 0x0000000000000000 */
		memset((uint8_t *)&invalidIEEEAddr, 0x00, LONG_ADDR_LEN);
    79a0:	2200      	movs	r2, #0
    79a2:	2300      	movs	r3, #0
    79a4:	9204      	str	r2, [sp, #16]
    79a6:	9305      	str	r3, [sp, #20]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    79a8:	4e51      	ldr	r6, [pc, #324]	; (7af0 <Initialize_Demo+0x170>)
    79aa:	3208      	adds	r2, #8
    79ac:	0031      	movs	r1, r6
    79ae:	a804      	add	r0, sp, #16
    79b0:	4d50      	ldr	r5, [pc, #320]	; (7af4 <Initialize_Demo+0x174>)
    79b2:	47a8      	blx	r5
    79b4:	0004      	movs	r4, r0
		{
			invalidIEEEAddrFlag = true;
		}

		/* Check if IEEE address is 0xFFFFFFFFFFFFFFFF */
		memset((uint8_t *)&invalidIEEEAddr, 0xFF, LONG_ADDR_LEN);
    79b6:	2201      	movs	r2, #1
    79b8:	4252      	negs	r2, r2
    79ba:	17d3      	asrs	r3, r2, #31
    79bc:	9204      	str	r2, [sp, #16]
    79be:	9305      	str	r3, [sp, #20]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    79c0:	3209      	adds	r2, #9
    79c2:	0031      	movs	r1, r6
    79c4:	a804      	add	r0, sp, #16
    79c6:	47a8      	blx	r5
    79c8:	2800      	cmp	r0, #0
    79ca:	d001      	beq.n	79d0 <Initialize_Demo+0x50>
		{
			invalidIEEEAddrFlag = true;
		}
		
		if (invalidIEEEAddrFlag)
    79cc:	2c00      	cmp	r4, #0
    79ce:	d108      	bne.n	79e2 <Initialize_Demo+0x62>
    79d0:	4c47      	ldr	r4, [pc, #284]	; (7af0 <Initialize_Demo+0x170>)
    79d2:	0026      	movs	r6, r4
    79d4:	3608      	adds	r6, #8
			 * In production code this can be omitted.
			 */
			uint8_t* peui64 = (uint8_t *)&myLongAddress;
			for(i = 0; i<MY_ADDRESS_LENGTH; i++)
			{
				*peui64++ = (uint8_t)rand();
    79d6:	4d48      	ldr	r5, [pc, #288]	; (7af8 <Initialize_Demo+0x178>)
    79d8:	47a8      	blx	r5
    79da:	7020      	strb	r0, [r4, #0]
    79dc:	3401      	adds	r4, #1
			for(i = 0; i<MY_ADDRESS_LENGTH; i++)
    79de:	42b4      	cmp	r4, r6
    79e0:	d1fa      	bne.n	79d8 <Initialize_Demo+0x58>
			}
		}
		PHY_SetIEEEAddr((uint8_t *)&myLongAddress);
    79e2:	4843      	ldr	r0, [pc, #268]	; (7af0 <Initialize_Demo+0x170>)
    79e4:	4b45      	ldr	r3, [pc, #276]	; (7afc <Initialize_Demo+0x17c>)
    79e6:	4798      	blx	r3
        #if defined(PROTOCOL_P2P)  
            DemoOutput_Instruction();
    79e8:	4b45      	ldr	r3, [pc, #276]	; (7b00 <Initialize_Demo+0x180>)
    79ea:	4798      	blx	r3
        #endif    
        
    }
	
	/* Create SW timer for transmission timeout */
	SwTimerCreate(&TxTimerId);
    79ec:	4845      	ldr	r0, [pc, #276]	; (7b04 <Initialize_Demo+0x184>)
    79ee:	4b46      	ldr	r3, [pc, #280]	; (7b08 <Initialize_Demo+0x188>)
    79f0:	4798      	blx	r3
	
	return true;
}
    79f2:	2001      	movs	r0, #1
    79f4:	b006      	add	sp, #24
    79f6:	bd70      	pop	{r4, r5, r6, pc}
		port_base->OUTSET.reg = pin_mask;
    79f8:	2280      	movs	r2, #128	; 0x80
    79fa:	0312      	lsls	r2, r2, #12
    79fc:	4b43      	ldr	r3, [pc, #268]	; (7b0c <Initialize_Demo+0x18c>)
    79fe:	619a      	str	r2, [r3, #24]
        MiApp_ProtocolInit(NULL, NULL);
    7a00:	2100      	movs	r1, #0
    7a02:	2000      	movs	r0, #0
    7a04:	4b37      	ldr	r3, [pc, #220]	; (7ae4 <Initialize_Demo+0x164>)
    7a06:	4798      	blx	r3
		srand(PHY_RandomReq());
    7a08:	4b37      	ldr	r3, [pc, #220]	; (7ae8 <Initialize_Demo+0x168>)
    7a0a:	4798      	blx	r3
    7a0c:	4b37      	ldr	r3, [pc, #220]	; (7aec <Initialize_Demo+0x16c>)
    7a0e:	4798      	blx	r3
		memset((uint8_t *)&invalidIEEEAddr, 0x00, LONG_ADDR_LEN);
    7a10:	2200      	movs	r2, #0
    7a12:	2300      	movs	r3, #0
    7a14:	9204      	str	r2, [sp, #16]
    7a16:	9305      	str	r3, [sp, #20]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    7a18:	4e35      	ldr	r6, [pc, #212]	; (7af0 <Initialize_Demo+0x170>)
    7a1a:	3208      	adds	r2, #8
    7a1c:	0031      	movs	r1, r6
    7a1e:	a804      	add	r0, sp, #16
    7a20:	4d34      	ldr	r5, [pc, #208]	; (7af4 <Initialize_Demo+0x174>)
    7a22:	47a8      	blx	r5
    7a24:	0004      	movs	r4, r0
		memset((uint8_t *)&invalidIEEEAddr, 0xFF, LONG_ADDR_LEN);
    7a26:	2201      	movs	r2, #1
    7a28:	4252      	negs	r2, r2
    7a2a:	17d3      	asrs	r3, r2, #31
    7a2c:	9204      	str	r2, [sp, #16]
    7a2e:	9305      	str	r3, [sp, #20]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    7a30:	3209      	adds	r2, #9
    7a32:	0031      	movs	r1, r6
    7a34:	a804      	add	r0, sp, #16
    7a36:	47a8      	blx	r5
    7a38:	2800      	cmp	r0, #0
    7a3a:	d036      	beq.n	7aaa <Initialize_Demo+0x12a>
		if (invalidIEEEAddrFlag)
    7a3c:	2c00      	cmp	r4, #0
    7a3e:	d034      	beq.n	7aaa <Initialize_Demo+0x12a>
		PHY_SetIEEEAddr((uint8_t *)&myLongAddress);
    7a40:	482b      	ldr	r0, [pc, #172]	; (7af0 <Initialize_Demo+0x170>)
    7a42:	4b2e      	ldr	r3, [pc, #184]	; (7afc <Initialize_Demo+0x17c>)
    7a44:	4798      	blx	r3
        MiApp_ConnectionMode(ENABLE_ALL_CONN);
    7a46:	2000      	movs	r0, #0
    7a48:	4b31      	ldr	r3, [pc, #196]	; (7b10 <Initialize_Demo+0x190>)
    7a4a:	4798      	blx	r3
        DemoOutput_Channel(myChannel, 0);
    7a4c:	4c31      	ldr	r4, [pc, #196]	; (7b14 <Initialize_Demo+0x194>)
    7a4e:	7820      	ldrb	r0, [r4, #0]
    7a50:	2100      	movs	r1, #0
    7a52:	4b31      	ldr	r3, [pc, #196]	; (7b18 <Initialize_Demo+0x198>)
    7a54:	4798      	blx	r3
		MiApp_SearchConnection(5, 0xFFFFFFFF, Scan_Confirm);
    7a56:	4a31      	ldr	r2, [pc, #196]	; (7b1c <Initialize_Demo+0x19c>)
    7a58:	2101      	movs	r1, #1
    7a5a:	4249      	negs	r1, r1
    7a5c:	2005      	movs	r0, #5
    7a5e:	4b30      	ldr	r3, [pc, #192]	; (7b20 <Initialize_Demo+0x1a0>)
    7a60:	4798      	blx	r3
        if( MiApp_Set(CHANNEL, &myChannel) == false )
    7a62:	0021      	movs	r1, r4
    7a64:	2000      	movs	r0, #0
    7a66:	4b2f      	ldr	r3, [pc, #188]	; (7b24 <Initialize_Demo+0x1a4>)
    7a68:	4798      	blx	r3
    7a6a:	2800      	cmp	r0, #0
    7a6c:	d027      	beq.n	7abe <Initialize_Demo+0x13e>
		uint16_t broadcastAddress = 0xFFFF;
    7a6e:	220e      	movs	r2, #14
    7a70:	446a      	add	r2, sp
    7a72:	2301      	movs	r3, #1
    7a74:	425b      	negs	r3, r3
    7a76:	8013      	strh	r3, [r2, #0]
		i = MiApp_EstablishConnection(myChannel, 0, (uint8_t*)&broadcastAddress, 0, Connection_Confirm);
    7a78:	4b26      	ldr	r3, [pc, #152]	; (7b14 <Initialize_Demo+0x194>)
    7a7a:	7818      	ldrb	r0, [r3, #0]
    7a7c:	4b2a      	ldr	r3, [pc, #168]	; (7b28 <Initialize_Demo+0x1a8>)
    7a7e:	9300      	str	r3, [sp, #0]
    7a80:	2300      	movs	r3, #0
    7a82:	2100      	movs	r1, #0
    7a84:	4c29      	ldr	r4, [pc, #164]	; (7b2c <Initialize_Demo+0x1ac>)
    7a86:	47a0      	blx	r4
        if( i != 0xFF )
    7a88:	28ff      	cmp	r0, #255	; 0xff
    7a8a:	d01d      	beq.n	7ac8 <Initialize_Demo+0x148>
            DemoOutput_Channel(myChannel, 1);
    7a8c:	4b21      	ldr	r3, [pc, #132]	; (7b14 <Initialize_Demo+0x194>)
    7a8e:	7818      	ldrb	r0, [r3, #0]
    7a90:	2101      	movs	r1, #1
    7a92:	4b21      	ldr	r3, [pc, #132]	; (7b18 <Initialize_Demo+0x198>)
    7a94:	4798      	blx	r3
			DumpConnection(0xFF);
    7a96:	20ff      	movs	r0, #255	; 0xff
    7a98:	4b25      	ldr	r3, [pc, #148]	; (7b30 <Initialize_Demo+0x1b0>)
    7a9a:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    7a9c:	2280      	movs	r2, #128	; 0x80
    7a9e:	0312      	lsls	r2, r2, #12
    7aa0:	4b1a      	ldr	r3, [pc, #104]	; (7b0c <Initialize_Demo+0x18c>)
    7aa2:	615a      	str	r2, [r3, #20]
            DemoOutput_Instruction();
    7aa4:	4b16      	ldr	r3, [pc, #88]	; (7b00 <Initialize_Demo+0x180>)
    7aa6:	4798      	blx	r3
    7aa8:	e7a0      	b.n	79ec <Initialize_Demo+0x6c>
    7aaa:	4c11      	ldr	r4, [pc, #68]	; (7af0 <Initialize_Demo+0x170>)
    7aac:	0026      	movs	r6, r4
    7aae:	3608      	adds	r6, #8
				*peui64++ = (uint8_t)rand();
    7ab0:	4d11      	ldr	r5, [pc, #68]	; (7af8 <Initialize_Demo+0x178>)
    7ab2:	47a8      	blx	r5
    7ab4:	7020      	strb	r0, [r4, #0]
    7ab6:	3401      	adds	r4, #1
			for(i = 0; i<MY_ADDRESS_LENGTH; i++)
    7ab8:	42b4      	cmp	r4, r6
    7aba:	d1fa      	bne.n	7ab2 <Initialize_Demo+0x132>
    7abc:	e7c0      	b.n	7a40 <Initialize_Demo+0xc0>
            DemoOutput_ChannelError(myChannel);
    7abe:	4b15      	ldr	r3, [pc, #84]	; (7b14 <Initialize_Demo+0x194>)
    7ac0:	7818      	ldrb	r0, [r3, #0]
    7ac2:	4b1c      	ldr	r3, [pc, #112]	; (7b34 <Initialize_Demo+0x1b4>)
    7ac4:	4798      	blx	r3
    7ac6:	e7d2      	b.n	7a6e <Initialize_Demo+0xee>
            MiApp_StartConnection(START_CONN_DIRECT, 10, (1L << myChannel), Connection_Confirm);
    7ac8:	4b12      	ldr	r3, [pc, #72]	; (7b14 <Initialize_Demo+0x194>)
    7aca:	781b      	ldrb	r3, [r3, #0]
    7acc:	2201      	movs	r2, #1
    7ace:	409a      	lsls	r2, r3
    7ad0:	4b15      	ldr	r3, [pc, #84]	; (7b28 <Initialize_Demo+0x1a8>)
    7ad2:	210a      	movs	r1, #10
    7ad4:	2000      	movs	r0, #0
    7ad6:	4c18      	ldr	r4, [pc, #96]	; (7b38 <Initialize_Demo+0x1b8>)
    7ad8:	47a0      	blx	r4
    7ada:	e7dc      	b.n	7a96 <Initialize_Demo+0x116>
    7adc:	0000782d 	.word	0x0000782d
    7ae0:	0000ac7d 	.word	0x0000ac7d
    7ae4:	0000a849 	.word	0x0000a849
    7ae8:	0000a44d 	.word	0x0000a44d
    7aec:	000154c9 	.word	0x000154c9
    7af0:	20000020 	.word	0x20000020
    7af4:	00014dc1 	.word	0x00014dc1
    7af8:	00015525 	.word	0x00015525
    7afc:	0000a471 	.word	0x0000a471
    7b00:	000072b5 	.word	0x000072b5
    7b04:	20000305 	.word	0x20000305
    7b08:	0000c705 	.word	0x0000c705
    7b0c:	40002800 	.word	0x40002800
    7b10:	0000ac5d 	.word	0x0000ac5d
    7b14:	20000019 	.word	0x20000019
    7b18:	0000724d 	.word	0x0000724d
    7b1c:	000078ad 	.word	0x000078ad
    7b20:	0000b72d 	.word	0x0000b72d
    7b24:	0000a825 	.word	0x0000a825
    7b28:	0000788d 	.word	0x0000788d
    7b2c:	0000b539 	.word	0x0000b539
    7b30:	0000a995 	.word	0x0000a995
    7b34:	000073b9 	.word	0x000073b9
    7b38:	0000a8f5 	.word	0x0000a8f5

00007b3c <Run_Demo>:


void Run_Demo(void)
{
    7b3c:	b510      	push	{r4, lr}
    P2PTasks();
    7b3e:	4b02      	ldr	r3, [pc, #8]	; (7b48 <Run_Demo+0xc>)
    7b40:	4798      	blx	r3
    run_p2p_demo();   
    7b42:	4b02      	ldr	r3, [pc, #8]	; (7b4c <Run_Demo+0x10>)
    7b44:	4798      	blx	r3
    7b46:	bd10      	pop	{r4, pc}
    7b48:	0000ade5 	.word	0x0000ade5
    7b4c:	000075f9 	.word	0x000075f9

00007b50 <LCD_Initialize>:
* Overview:         Configure the LCD
*
* Note:             None
********************************************************************/
void LCD_Initialize(void)
{
    7b50:	b510      	push	{r4, lr}
	gfx_mono_init();
    7b52:	4b01      	ldr	r3, [pc, #4]	; (7b58 <LCD_Initialize+0x8>)
    7b54:	4798      	blx	r3
}    
    7b56:	bd10      	pop	{r4, pc}
    7b58:	000049e5 	.word	0x000049e5

00007b5c <LCD_Erase>:
* Overview:         Clears LCD display
*
* Note:             None
********************************************************************/
void LCD_Erase(void)
{
    7b5c:	b510      	push	{r4, lr}
    7b5e:	b082      	sub	sp, #8
    /* Clear screen */
	gfx_mono_draw_filled_rect(0, 0, GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_HEIGHT,
    7b60:	2300      	movs	r3, #0
    7b62:	9300      	str	r3, [sp, #0]
    7b64:	3320      	adds	r3, #32
    7b66:	2280      	movs	r2, #128	; 0x80
    7b68:	2100      	movs	r1, #0
    7b6a:	2000      	movs	r0, #0
    7b6c:	4c01      	ldr	r4, [pc, #4]	; (7b74 <LCD_Erase+0x18>)
    7b6e:	47a0      	blx	r4
	GFX_PIXEL_CLR);
}
    7b70:	b002      	add	sp, #8
    7b72:	bd10      	pop	{r4, pc}
    7b74:	0000483d 	.word	0x0000483d

00007b78 <LCD_Update>:
* Overview:         LCD displays message
*
* Note:             None
********************************************************************/
void LCD_Update(void)
{
    7b78:	b510      	push	{r4, lr}
	gfx_mono_draw_string(LCDText, 0, 0, &sysfont);
    7b7a:	4b03      	ldr	r3, [pc, #12]	; (7b88 <LCD_Update+0x10>)
    7b7c:	2200      	movs	r2, #0
    7b7e:	2100      	movs	r1, #0
    7b80:	4802      	ldr	r0, [pc, #8]	; (7b8c <LCD_Update+0x14>)
    7b82:	4c03      	ldr	r4, [pc, #12]	; (7b90 <LCD_Update+0x18>)
    7b84:	47a0      	blx	r4
}
    7b86:	bd10      	pop	{r4, pc}
    7b88:	20000008 	.word	0x20000008
    7b8c:	20002134 	.word	0x20002134
    7b90:	00004941 	.word	0x00004941

00007b94 <LCDTRXCount>:
 *
 * Note:            This routine is only effective if Explorer16 or
 *                  PIC18 Explorer demo boards are used
 ********************************************************************/
void LCDTRXCount(uint8_t txCount, uint8_t rxCount)
{
    7b94:	b570      	push	{r4, r5, r6, lr}
    7b96:	b082      	sub	sp, #8
    7b98:	0005      	movs	r5, r0
    7b9a:	000e      	movs	r6, r1
	/* Clear screen */
	gfx_mono_draw_filled_rect(0, 0, GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_HEIGHT, 
    7b9c:	2300      	movs	r3, #0
    7b9e:	9300      	str	r3, [sp, #0]
    7ba0:	3320      	adds	r3, #32
    7ba2:	2280      	movs	r2, #128	; 0x80
    7ba4:	2100      	movs	r1, #0
    7ba6:	2000      	movs	r0, #0
    7ba8:	4c0a      	ldr	r4, [pc, #40]	; (7bd4 <LCDTRXCount+0x40>)
    7baa:	47a0      	blx	r4
	GFX_PIXEL_CLR);
    snprintf(LCDText, sizeof(LCDText), "TX Messages: %d \nRX Messages: %d", txCount, rxCount);
    7bac:	4c0a      	ldr	r4, [pc, #40]	; (7bd8 <LCDTRXCount+0x44>)
    7bae:	9600      	str	r6, [sp, #0]
    7bb0:	002b      	movs	r3, r5
    7bb2:	4a0a      	ldr	r2, [pc, #40]	; (7bdc <LCDTRXCount+0x48>)
    7bb4:	2141      	movs	r1, #65	; 0x41
    7bb6:	0020      	movs	r0, r4
    7bb8:	4d09      	ldr	r5, [pc, #36]	; (7be0 <LCDTRXCount+0x4c>)
    7bba:	47a8      	blx	r5
    gfx_mono_draw_string(LCDText, 0, 0, &sysfont); 
    7bbc:	4b09      	ldr	r3, [pc, #36]	; (7be4 <LCDTRXCount+0x50>)
    7bbe:	2200      	movs	r2, #0
    7bc0:	2100      	movs	r1, #0
    7bc2:	0020      	movs	r0, r4
    7bc4:	4c08      	ldr	r4, [pc, #32]	; (7be8 <LCDTRXCount+0x54>)
    7bc6:	47a0      	blx	r4
	delay_ms(200);
    7bc8:	20c8      	movs	r0, #200	; 0xc8
    7bca:	4b08      	ldr	r3, [pc, #32]	; (7bec <LCDTRXCount+0x58>)
    7bcc:	4798      	blx	r3
}
    7bce:	b002      	add	sp, #8
    7bd0:	bd70      	pop	{r4, r5, r6, pc}
    7bd2:	46c0      	nop			; (mov r8, r8)
    7bd4:	0000483d 	.word	0x0000483d
    7bd8:	20002134 	.word	0x20002134
    7bdc:	00016d7c 	.word	0x00016d7c
    7be0:	00015709 	.word	0x00015709
    7be4:	20000008 	.word	0x20000008
    7be8:	00004941 	.word	0x00004941
    7bec:	0000471d 	.word	0x0000471d

00007bf0 <LCDDisplay>:
 *
 * Note:            This routine is only effective if Explorer16 or
 *                  PIC18 Explorer demo boards are used
 ********************************************************************/
void LCDDisplay(char *text, uint8_t value, bool delay)
{
    7bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7bf2:	b083      	sub	sp, #12
    7bf4:	0005      	movs	r5, r0
    7bf6:	000c      	movs	r4, r1
    7bf8:	0016      	movs	r6, r2
	/* Clear screen */	
	gfx_mono_draw_filled_rect(0, 0, GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_HEIGHT,
    7bfa:	2300      	movs	r3, #0
    7bfc:	9300      	str	r3, [sp, #0]
    7bfe:	3320      	adds	r3, #32
    7c00:	2280      	movs	r2, #128	; 0x80
    7c02:	2100      	movs	r1, #0
    7c04:	2000      	movs	r0, #0
    7c06:	4f13      	ldr	r7, [pc, #76]	; (7c54 <LCDDisplay+0x64>)
    7c08:	47b8      	blx	r7
			GFX_PIXEL_CLR);    

    snprintf(LCDText, sizeof(LCDText), text);
    7c0a:	002a      	movs	r2, r5
    7c0c:	2141      	movs	r1, #65	; 0x41
    7c0e:	4812      	ldr	r0, [pc, #72]	; (7c58 <LCDDisplay+0x68>)
    7c10:	4b12      	ldr	r3, [pc, #72]	; (7c5c <LCDDisplay+0x6c>)
    7c12:	4798      	blx	r3

    if (value)
    7c14:	2c00      	cmp	r4, #0
    7c16:	d00d      	beq.n	7c34 <LCDDisplay+0x44>
    7c18:	2000      	movs	r0, #0
    {
		uint8_t char_count = 0;
		do {
           ++char_count;
    7c1a:	3001      	adds	r0, #1
    7c1c:	b2c0      	uxtb	r0, r0
		} while (*(++text));
    7c1e:	3501      	adds	r5, #1
    7c20:	782b      	ldrb	r3, [r5, #0]
    7c22:	2b00      	cmp	r3, #0
    7c24:	d1f9      	bne.n	7c1a <LCDDisplay+0x2a>
		
	    snprintf(LCDText+char_count, sizeof(LCDText), "%d", value);
    7c26:	4b0c      	ldr	r3, [pc, #48]	; (7c58 <LCDDisplay+0x68>)
    7c28:	18c0      	adds	r0, r0, r3
    7c2a:	0023      	movs	r3, r4
    7c2c:	4a0c      	ldr	r2, [pc, #48]	; (7c60 <LCDDisplay+0x70>)
    7c2e:	2141      	movs	r1, #65	; 0x41
    7c30:	4c0a      	ldr	r4, [pc, #40]	; (7c5c <LCDDisplay+0x6c>)
    7c32:	47a0      	blx	r4
	}
	    
	gfx_mono_draw_string(LCDText, 0, 0, &sysfont);
    7c34:	4b0b      	ldr	r3, [pc, #44]	; (7c64 <LCDDisplay+0x74>)
    7c36:	2200      	movs	r2, #0
    7c38:	2100      	movs	r1, #0
    7c3a:	4807      	ldr	r0, [pc, #28]	; (7c58 <LCDDisplay+0x68>)
    7c3c:	4c0a      	ldr	r4, [pc, #40]	; (7c68 <LCDDisplay+0x78>)
    7c3e:	47a0      	blx	r4
	
	if(delay)
    7c40:	2e00      	cmp	r6, #0
    7c42:	d101      	bne.n	7c48 <LCDDisplay+0x58>
	{
	  delay_s(2);
	}
}
    7c44:	b003      	add	sp, #12
    7c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  delay_s(2);
    7c48:	20fa      	movs	r0, #250	; 0xfa
    7c4a:	00c0      	lsls	r0, r0, #3
    7c4c:	4b07      	ldr	r3, [pc, #28]	; (7c6c <LCDDisplay+0x7c>)
    7c4e:	4798      	blx	r3
}
    7c50:	e7f8      	b.n	7c44 <LCDDisplay+0x54>
    7c52:	46c0      	nop			; (mov r8, r8)
    7c54:	0000483d 	.word	0x0000483d
    7c58:	20002134 	.word	0x20002134
    7c5c:	00015709 	.word	0x00015709
    7c60:	00016970 	.word	0x00016970
    7c64:	20000008 	.word	0x20000008
    7c68:	00004941 	.word	0x00004941
    7c6c:	0000471d 	.word	0x0000471d

00007c70 <CompareData>:
     Otherwise it is the start address of the buffer that contains the data to compare with
    \param numberOfBytes The number of bytes to compare
    \note offset+numberOfBytes must be <= D_NV_SECTOR_SIZE (meaning sector crossing is not permitted)
*/
static bool CompareData(uint8_t sector, uint16_t offset, uint8_t *pBuffer, D_Nv_Size_t numberOfBytes)
{
    7c70:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c72:	46c6      	mov	lr, r8
    7c74:	b500      	push	{lr}
    7c76:	b084      	sub	sp, #16
    7c78:	0014      	movs	r4, r2
    7c7a:	001f      	movs	r7, r3
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    7c7c:	4b29      	ldr	r3, [pc, #164]	; (7d24 <CompareData+0xb4>)
    7c7e:	18cb      	adds	r3, r1, r3
    7c80:	0340      	lsls	r0, r0, #13
    7c82:	181d      	adds	r5, r3, r0
  uint8_t  buffer[16U];

  assert(numberOfBytes);
    7c84:	2f00      	cmp	r7, #0
    7c86:	d01a      	beq.n	7cbe <CompareData+0x4e>
  assert(address <= D_NV_MEMORY_END);
    7c88:	4b27      	ldr	r3, [pc, #156]	; (7d28 <CompareData+0xb8>)
    7c8a:	1e5a      	subs	r2, r3, #1
    7c8c:	4295      	cmp	r5, r2
    7c8e:	d81c      	bhi.n	7cca <CompareData+0x5a>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    7c90:	197a      	adds	r2, r7, r5
    7c92:	4293      	cmp	r3, r2
    7c94:	d31f      	bcc.n	7cd6 <CompareData+0x66>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    7c96:	19c9      	adds	r1, r1, r7
    7c98:	2380      	movs	r3, #128	; 0x80
    7c9a:	019b      	lsls	r3, r3, #6
    7c9c:	4299      	cmp	r1, r3
    7c9e:	d820      	bhi.n	7ce2 <CompareData+0x72>

  while(numberOfBytes)
  {
    uint16_t bytesToRead = MIN(sizeof(buffer), numberOfBytes);

    memcpy(buffer, (uint8_t FLASH_PTR *)address, bytesToRead);
    7ca0:	4b22      	ldr	r3, [pc, #136]	; (7d2c <CompareData+0xbc>)
    7ca2:	4698      	mov	r8, r3
    uint16_t bytesToRead = MIN(sizeof(buffer), numberOfBytes);
    7ca4:	1c3e      	adds	r6, r7, #0
    7ca6:	2f10      	cmp	r7, #16
    7ca8:	d900      	bls.n	7cac <CompareData+0x3c>
    7caa:	2610      	movs	r6, #16
    7cac:	b2b6      	uxth	r6, r6
    memcpy(buffer, (uint8_t FLASH_PTR *)address, bytesToRead);
    7cae:	0032      	movs	r2, r6
    7cb0:	0029      	movs	r1, r5
    7cb2:	4668      	mov	r0, sp
    7cb4:	47c0      	blx	r8
    for (uint8_t i = 0U; i < bytesToRead; i++)
    7cb6:	2e00      	cmp	r6, #0
    7cb8:	d028      	beq.n	7d0c <CompareData+0x9c>
    7cba:	2300      	movs	r3, #0
    7cbc:	e01f      	b.n	7cfe <CompareData+0x8e>
  assert(numberOfBytes);
    7cbe:	4b1c      	ldr	r3, [pc, #112]	; (7d30 <CompareData+0xc0>)
    7cc0:	4a1c      	ldr	r2, [pc, #112]	; (7d34 <CompareData+0xc4>)
    7cc2:	21d9      	movs	r1, #217	; 0xd9
    7cc4:	481c      	ldr	r0, [pc, #112]	; (7d38 <CompareData+0xc8>)
    7cc6:	4c1d      	ldr	r4, [pc, #116]	; (7d3c <CompareData+0xcc>)
    7cc8:	47a0      	blx	r4
  assert(address <= D_NV_MEMORY_END);
    7cca:	4b1d      	ldr	r3, [pc, #116]	; (7d40 <CompareData+0xd0>)
    7ccc:	4a19      	ldr	r2, [pc, #100]	; (7d34 <CompareData+0xc4>)
    7cce:	21da      	movs	r1, #218	; 0xda
    7cd0:	4819      	ldr	r0, [pc, #100]	; (7d38 <CompareData+0xc8>)
    7cd2:	4c1a      	ldr	r4, [pc, #104]	; (7d3c <CompareData+0xcc>)
    7cd4:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    7cd6:	4b1b      	ldr	r3, [pc, #108]	; (7d44 <CompareData+0xd4>)
    7cd8:	4a16      	ldr	r2, [pc, #88]	; (7d34 <CompareData+0xc4>)
    7cda:	21db      	movs	r1, #219	; 0xdb
    7cdc:	4816      	ldr	r0, [pc, #88]	; (7d38 <CompareData+0xc8>)
    7cde:	4c17      	ldr	r4, [pc, #92]	; (7d3c <CompareData+0xcc>)
    7ce0:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    7ce2:	4b19      	ldr	r3, [pc, #100]	; (7d48 <CompareData+0xd8>)
    7ce4:	4a13      	ldr	r2, [pc, #76]	; (7d34 <CompareData+0xc4>)
    7ce6:	21dc      	movs	r1, #220	; 0xdc
    7ce8:	4813      	ldr	r0, [pc, #76]	; (7d38 <CompareData+0xc8>)
    7cea:	4c14      	ldr	r4, [pc, #80]	; (7d3c <CompareData+0xcc>)
    7cec:	47a0      	blx	r4
      if (buffer[i] != ((pBuffer != NULL) ? *(pBuffer++) : 0xFF))
    7cee:	21ff      	movs	r1, #255	; 0xff
    7cf0:	4291      	cmp	r1, r2
    7cf2:	d112      	bne.n	7d1a <CompareData+0xaa>
    for (uint8_t i = 0U; i < bytesToRead; i++)
    7cf4:	3301      	adds	r3, #1
    7cf6:	b2db      	uxtb	r3, r3
    7cf8:	b29a      	uxth	r2, r3
    7cfa:	4296      	cmp	r6, r2
    7cfc:	d906      	bls.n	7d0c <CompareData+0x9c>
      if (buffer[i] != ((pBuffer != NULL) ? *(pBuffer++) : 0xFF))
    7cfe:	466a      	mov	r2, sp
    7d00:	5cd2      	ldrb	r2, [r2, r3]
    7d02:	2c00      	cmp	r4, #0
    7d04:	d0f3      	beq.n	7cee <CompareData+0x7e>
    7d06:	7821      	ldrb	r1, [r4, #0]
    7d08:	3401      	adds	r4, #1
    7d0a:	e7f1      	b.n	7cf0 <CompareData+0x80>
        return false;

    numberOfBytes -= bytesToRead;
    7d0c:	1bbf      	subs	r7, r7, r6
    7d0e:	b2bf      	uxth	r7, r7
    address += bytesToRead;
    7d10:	19ad      	adds	r5, r5, r6
  while(numberOfBytes)
    7d12:	2f00      	cmp	r7, #0
    7d14:	d1c6      	bne.n	7ca4 <CompareData+0x34>
  }

  return true;
    7d16:	2001      	movs	r0, #1
    7d18:	e000      	b.n	7d1c <CompareData+0xac>
        return false;
    7d1a:	2000      	movs	r0, #0
}
    7d1c:	b004      	add	sp, #16
    7d1e:	bc04      	pop	{r2}
    7d20:	4690      	mov	r8, r2
    7d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7d24:	00000400 	.word	0x00000400
    7d28:	00004400 	.word	0x00004400
    7d2c:	00014ddf 	.word	0x00014ddf
    7d30:	00016da0 	.word	0x00016da0
    7d34:	00016eac 	.word	0x00016eac
    7d38:	00016db0 	.word	0x00016db0
    7d3c:	00014d1d 	.word	0x00014d1d
    7d40:	00016df4 	.word	0x00016df4
    7d44:	00016e10 	.word	0x00016e10
    7d48:	00016e44 	.word	0x00016e44

00007d4c <D_Nv_Read_Impl>:
{
    7d4c:	b570      	push	{r4, r5, r6, lr}
    7d4e:	0015      	movs	r5, r2
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    7d50:	0344      	lsls	r4, r0, #13
    7d52:	4813      	ldr	r0, [pc, #76]	; (7da0 <D_Nv_Read_Impl+0x54>)
    7d54:	1808      	adds	r0, r1, r0
    7d56:	1824      	adds	r4, r4, r0
  assert(address <= D_NV_MEMORY_END);
    7d58:	4a12      	ldr	r2, [pc, #72]	; (7da4 <D_Nv_Read_Impl+0x58>)
    7d5a:	1e50      	subs	r0, r2, #1
    7d5c:	4284      	cmp	r4, r0
    7d5e:	d80d      	bhi.n	7d7c <D_Nv_Read_Impl+0x30>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    7d60:	18e0      	adds	r0, r4, r3
    7d62:	4282      	cmp	r2, r0
    7d64:	d310      	bcc.n	7d88 <D_Nv_Read_Impl+0x3c>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    7d66:	18c9      	adds	r1, r1, r3
    7d68:	2280      	movs	r2, #128	; 0x80
    7d6a:	0192      	lsls	r2, r2, #6
    7d6c:	4291      	cmp	r1, r2
    7d6e:	d811      	bhi.n	7d94 <D_Nv_Read_Impl+0x48>
  memcpy(pBuffer, (uint8_t FLASH_PTR *)address, numberOfBytes);
    7d70:	001a      	movs	r2, r3
    7d72:	0021      	movs	r1, r4
    7d74:	0028      	movs	r0, r5
    7d76:	4b0c      	ldr	r3, [pc, #48]	; (7da8 <D_Nv_Read_Impl+0x5c>)
    7d78:	4798      	blx	r3
}
    7d7a:	bd70      	pop	{r4, r5, r6, pc}
  assert(address <= D_NV_MEMORY_END);
    7d7c:	4b0b      	ldr	r3, [pc, #44]	; (7dac <D_Nv_Read_Impl+0x60>)
    7d7e:	4a0c      	ldr	r2, [pc, #48]	; (7db0 <D_Nv_Read_Impl+0x64>)
    7d80:	2172      	movs	r1, #114	; 0x72
    7d82:	480c      	ldr	r0, [pc, #48]	; (7db4 <D_Nv_Read_Impl+0x68>)
    7d84:	4c0c      	ldr	r4, [pc, #48]	; (7db8 <D_Nv_Read_Impl+0x6c>)
    7d86:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    7d88:	4b0c      	ldr	r3, [pc, #48]	; (7dbc <D_Nv_Read_Impl+0x70>)
    7d8a:	4a09      	ldr	r2, [pc, #36]	; (7db0 <D_Nv_Read_Impl+0x64>)
    7d8c:	2173      	movs	r1, #115	; 0x73
    7d8e:	4809      	ldr	r0, [pc, #36]	; (7db4 <D_Nv_Read_Impl+0x68>)
    7d90:	4c09      	ldr	r4, [pc, #36]	; (7db8 <D_Nv_Read_Impl+0x6c>)
    7d92:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    7d94:	4b0a      	ldr	r3, [pc, #40]	; (7dc0 <D_Nv_Read_Impl+0x74>)
    7d96:	4a06      	ldr	r2, [pc, #24]	; (7db0 <D_Nv_Read_Impl+0x64>)
    7d98:	2174      	movs	r1, #116	; 0x74
    7d9a:	4806      	ldr	r0, [pc, #24]	; (7db4 <D_Nv_Read_Impl+0x68>)
    7d9c:	4c06      	ldr	r4, [pc, #24]	; (7db8 <D_Nv_Read_Impl+0x6c>)
    7d9e:	47a0      	blx	r4
    7da0:	00000400 	.word	0x00000400
    7da4:	00004400 	.word	0x00004400
    7da8:	00014ddf 	.word	0x00014ddf
    7dac:	00016df4 	.word	0x00016df4
    7db0:	00016e74 	.word	0x00016e74
    7db4:	00016db0 	.word	0x00016db0
    7db8:	00014d1d 	.word	0x00014d1d
    7dbc:	00016e10 	.word	0x00016e10
    7dc0:	00016e44 	.word	0x00016e44

00007dc4 <D_Nv_Write_Impl>:
{
    7dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7dc6:	46de      	mov	lr, fp
    7dc8:	4657      	mov	r7, sl
    7dca:	464e      	mov	r6, r9
    7dcc:	4645      	mov	r5, r8
    7dce:	b5e0      	push	{r5, r6, r7, lr}
    7dd0:	b093      	sub	sp, #76	; 0x4c
    7dd2:	9201      	str	r2, [sp, #4]
    7dd4:	469a      	mov	sl, r3
  uint32_t  address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    7dd6:	4c46      	ldr	r4, [pc, #280]	; (7ef0 <D_Nv_Write_Impl+0x12c>)
    7dd8:	190c      	adds	r4, r1, r4
    7dda:	0340      	lsls	r0, r0, #13
    7ddc:	1825      	adds	r5, r4, r0
  assert(numberOfBytes);
    7dde:	2b00      	cmp	r3, #0
    7de0:	d047      	beq.n	7e72 <D_Nv_Write_Impl+0xae>
  assert(address <= D_NV_MEMORY_END);
    7de2:	4b44      	ldr	r3, [pc, #272]	; (7ef4 <D_Nv_Write_Impl+0x130>)
    7de4:	1e5a      	subs	r2, r3, #1
    7de6:	4295      	cmp	r5, r2
    7de8:	d849      	bhi.n	7e7e <D_Nv_Write_Impl+0xba>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    7dea:	4652      	mov	r2, sl
    7dec:	1952      	adds	r2, r2, r5
    7dee:	4293      	cmp	r3, r2
    7df0:	d34b      	bcc.n	7e8a <D_Nv_Write_Impl+0xc6>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    7df2:	46d3      	mov	fp, sl
    7df4:	4451      	add	r1, sl
    7df6:	2380      	movs	r3, #128	; 0x80
    7df8:	019b      	lsls	r3, r3, #6
    7dfa:	4299      	cmp	r1, r3
    7dfc:	d84b      	bhi.n	7e96 <D_Nv_Write_Impl+0xd2>
  if (s_pfSystemCheckCallback != NULL)
    7dfe:	4b3e      	ldr	r3, [pc, #248]	; (7ef8 <D_Nv_Write_Impl+0x134>)
    7e00:	681b      	ldr	r3, [r3, #0]
    7e02:	2b00      	cmp	r3, #0
    7e04:	d000      	beq.n	7e08 <D_Nv_Write_Impl+0x44>
    s_pfSystemCheckCallback();
    7e06:	4798      	blx	r3
  pageOffset = address % NVMCTRL_PAGE_SIZE;
    7e08:	273f      	movs	r7, #63	; 0x3f
    7e0a:	402f      	ands	r7, r5
  pageStart = address - pageOffset;
    7e0c:	1bec      	subs	r4, r5, r7
  numberOfPageBytes = MIN((NVMCTRL_PAGE_SIZE - pageOffset), numberOfBytes);
    7e0e:	2640      	movs	r6, #64	; 0x40
    7e10:	1bf6      	subs	r6, r6, r7
    7e12:	455e      	cmp	r6, fp
    7e14:	dd00      	ble.n	7e18 <D_Nv_Write_Impl+0x54>
    7e16:	4656      	mov	r6, sl
    7e18:	b2b3      	uxth	r3, r6
    7e1a:	469b      	mov	fp, r3
  memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    7e1c:	2240      	movs	r2, #64	; 0x40
    7e1e:	21ff      	movs	r1, #255	; 0xff
    7e20:	a802      	add	r0, sp, #8
    7e22:	4b36      	ldr	r3, [pc, #216]	; (7efc <D_Nv_Write_Impl+0x138>)
    7e24:	4798      	blx	r3
  memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    7e26:	003b      	movs	r3, r7
    7e28:	aa02      	add	r2, sp, #8
    7e2a:	4694      	mov	ip, r2
    7e2c:	4463      	add	r3, ip
    7e2e:	9300      	str	r3, [sp, #0]
    7e30:	0436      	lsls	r6, r6, #16
    7e32:	0c37      	lsrs	r7, r6, #16
    7e34:	003a      	movs	r2, r7
    7e36:	9901      	ldr	r1, [sp, #4]
    7e38:	0018      	movs	r0, r3
    7e3a:	4b31      	ldr	r3, [pc, #196]	; (7f00 <D_Nv_Write_Impl+0x13c>)
    7e3c:	4798      	blx	r3
	cpu_irq_enter_critical();
    7e3e:	4b31      	ldr	r3, [pc, #196]	; (7f04 <D_Nv_Write_Impl+0x140>)
    7e40:	4798      	blx	r3
    error_code = nvm_write_buffer(pageStart, page_buf, NVMCTRL_PAGE_SIZE);
    7e42:	4e31      	ldr	r6, [pc, #196]	; (7f08 <D_Nv_Write_Impl+0x144>)
    7e44:	2240      	movs	r2, #64	; 0x40
    7e46:	a902      	add	r1, sp, #8
    7e48:	0020      	movs	r0, r4
    7e4a:	47b0      	blx	r6
  } while (error_code == STATUS_BUSY);
    7e4c:	2805      	cmp	r0, #5
    7e4e:	d0f9      	beq.n	7e44 <D_Nv_Write_Impl+0x80>
	cpu_irq_leave_critical();
    7e50:	4b2e      	ldr	r3, [pc, #184]	; (7f0c <D_Nv_Write_Impl+0x148>)
    7e52:	4798      	blx	r3
  numberOfBytes -= numberOfPageBytes;
    7e54:	4653      	mov	r3, sl
    7e56:	465a      	mov	r2, fp
    7e58:	1a9e      	subs	r6, r3, r2
    7e5a:	b2b6      	uxth	r6, r6
  address += numberOfPageBytes;
    7e5c:	19ec      	adds	r4, r5, r7
  pBuffer += numberOfPageBytes;
    7e5e:	9b01      	ldr	r3, [sp, #4]
    7e60:	4699      	mov	r9, r3
    7e62:	44b9      	add	r9, r7
  while (0U < numberOfBytes)
    7e64:	2e00      	cmp	r6, #0
    7e66:	d03b      	beq.n	7ee0 <D_Nv_Write_Impl+0x11c>
    memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    7e68:	4b24      	ldr	r3, [pc, #144]	; (7efc <D_Nv_Write_Impl+0x138>)
    7e6a:	469b      	mov	fp, r3
    memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    7e6c:	4b24      	ldr	r3, [pc, #144]	; (7f00 <D_Nv_Write_Impl+0x13c>)
    7e6e:	4698      	mov	r8, r3
    7e70:	e031      	b.n	7ed6 <D_Nv_Write_Impl+0x112>
  assert(numberOfBytes);
    7e72:	4b27      	ldr	r3, [pc, #156]	; (7f10 <D_Nv_Write_Impl+0x14c>)
    7e74:	4a27      	ldr	r2, [pc, #156]	; (7f14 <D_Nv_Write_Impl+0x150>)
    7e76:	218a      	movs	r1, #138	; 0x8a
    7e78:	4827      	ldr	r0, [pc, #156]	; (7f18 <D_Nv_Write_Impl+0x154>)
    7e7a:	4c28      	ldr	r4, [pc, #160]	; (7f1c <D_Nv_Write_Impl+0x158>)
    7e7c:	47a0      	blx	r4
  assert(address <= D_NV_MEMORY_END);
    7e7e:	4b28      	ldr	r3, [pc, #160]	; (7f20 <D_Nv_Write_Impl+0x15c>)
    7e80:	4a24      	ldr	r2, [pc, #144]	; (7f14 <D_Nv_Write_Impl+0x150>)
    7e82:	218b      	movs	r1, #139	; 0x8b
    7e84:	4824      	ldr	r0, [pc, #144]	; (7f18 <D_Nv_Write_Impl+0x154>)
    7e86:	4c25      	ldr	r4, [pc, #148]	; (7f1c <D_Nv_Write_Impl+0x158>)
    7e88:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    7e8a:	4b26      	ldr	r3, [pc, #152]	; (7f24 <D_Nv_Write_Impl+0x160>)
    7e8c:	4a21      	ldr	r2, [pc, #132]	; (7f14 <D_Nv_Write_Impl+0x150>)
    7e8e:	218c      	movs	r1, #140	; 0x8c
    7e90:	4821      	ldr	r0, [pc, #132]	; (7f18 <D_Nv_Write_Impl+0x154>)
    7e92:	4c22      	ldr	r4, [pc, #136]	; (7f1c <D_Nv_Write_Impl+0x158>)
    7e94:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    7e96:	4b24      	ldr	r3, [pc, #144]	; (7f28 <D_Nv_Write_Impl+0x164>)
    7e98:	4a1e      	ldr	r2, [pc, #120]	; (7f14 <D_Nv_Write_Impl+0x150>)
    7e9a:	218d      	movs	r1, #141	; 0x8d
    7e9c:	481e      	ldr	r0, [pc, #120]	; (7f18 <D_Nv_Write_Impl+0x154>)
    7e9e:	4c1f      	ldr	r4, [pc, #124]	; (7f1c <D_Nv_Write_Impl+0x158>)
    7ea0:	47a0      	blx	r4
    numberOfPageBytes = MIN(NVMCTRL_PAGE_SIZE, numberOfBytes);
    7ea2:	b29f      	uxth	r7, r3
    memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    7ea4:	2240      	movs	r2, #64	; 0x40
    7ea6:	21ff      	movs	r1, #255	; 0xff
    7ea8:	a802      	add	r0, sp, #8
    7eaa:	47d8      	blx	fp
    memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    7eac:	003a      	movs	r2, r7
    7eae:	4649      	mov	r1, r9
    7eb0:	9800      	ldr	r0, [sp, #0]
    7eb2:	47c0      	blx	r8
	cpu_irq_enter_critical();
    7eb4:	4b13      	ldr	r3, [pc, #76]	; (7f04 <D_Nv_Write_Impl+0x140>)
    7eb6:	4798      	blx	r3
      error_code = nvm_write_buffer(address, page_buf, NVMCTRL_PAGE_SIZE);
    7eb8:	4d13      	ldr	r5, [pc, #76]	; (7f08 <D_Nv_Write_Impl+0x144>)
    7eba:	2240      	movs	r2, #64	; 0x40
    7ebc:	a902      	add	r1, sp, #8
    7ebe:	0020      	movs	r0, r4
    7ec0:	47a8      	blx	r5
    } while (error_code == STATUS_BUSY);
    7ec2:	2805      	cmp	r0, #5
    7ec4:	d0f9      	beq.n	7eba <D_Nv_Write_Impl+0xf6>
	cpu_irq_leave_critical();
    7ec6:	4b11      	ldr	r3, [pc, #68]	; (7f0c <D_Nv_Write_Impl+0x148>)
    7ec8:	4798      	blx	r3
    numberOfBytes -= numberOfPageBytes;
    7eca:	1bf6      	subs	r6, r6, r7
    7ecc:	b2b6      	uxth	r6, r6
    address += numberOfPageBytes;
    7ece:	19e4      	adds	r4, r4, r7
    pBuffer += numberOfPageBytes;
    7ed0:	44b9      	add	r9, r7
  while (0U < numberOfBytes)
    7ed2:	2e00      	cmp	r6, #0
    7ed4:	d004      	beq.n	7ee0 <D_Nv_Write_Impl+0x11c>
    numberOfPageBytes = MIN(NVMCTRL_PAGE_SIZE, numberOfBytes);
    7ed6:	1c33      	adds	r3, r6, #0
    7ed8:	2e40      	cmp	r6, #64	; 0x40
    7eda:	d9e2      	bls.n	7ea2 <D_Nv_Write_Impl+0xde>
    7edc:	2340      	movs	r3, #64	; 0x40
    7ede:	e7e0      	b.n	7ea2 <D_Nv_Write_Impl+0xde>
}
    7ee0:	b013      	add	sp, #76	; 0x4c
    7ee2:	bc3c      	pop	{r2, r3, r4, r5}
    7ee4:	4690      	mov	r8, r2
    7ee6:	4699      	mov	r9, r3
    7ee8:	46a2      	mov	sl, r4
    7eea:	46ab      	mov	fp, r5
    7eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7eee:	46c0      	nop			; (mov r8, r8)
    7ef0:	00000400 	.word	0x00000400
    7ef4:	00004400 	.word	0x00004400
    7ef8:	20000308 	.word	0x20000308
    7efc:	00014df1 	.word	0x00014df1
    7f00:	00014ddf 	.word	0x00014ddf
    7f04:	00004aa5 	.word	0x00004aa5
    7f08:	00004ff5 	.word	0x00004ff5
    7f0c:	00004ae5 	.word	0x00004ae5
    7f10:	00016da0 	.word	0x00016da0
    7f14:	00016e84 	.word	0x00016e84
    7f18:	00016db0 	.word	0x00016db0
    7f1c:	00014d1d 	.word	0x00014d1d
    7f20:	00016df4 	.word	0x00016df4
    7f24:	00016e10 	.word	0x00016e10
    7f28:	00016e44 	.word	0x00016e44

00007f2c <D_Nv_EraseSector_Impl>:
{
    7f2c:	b570      	push	{r4, r5, r6, lr}
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE;
    7f2e:	0344      	lsls	r4, r0, #13
    7f30:	480c      	ldr	r0, [pc, #48]	; (7f64 <D_Nv_EraseSector_Impl+0x38>)
    7f32:	1824      	adds	r4, r4, r0
  address &= ~(NVMCTRL_ROW_SIZE - 1);
    7f34:	23ff      	movs	r3, #255	; 0xff
    7f36:	439c      	bics	r4, r3
  assert(address <= D_NV_MEMORY_END);
    7f38:	4b0b      	ldr	r3, [pc, #44]	; (7f68 <D_Nv_EraseSector_Impl+0x3c>)
    7f3a:	3b01      	subs	r3, #1
    7f3c:	2280      	movs	r2, #128	; 0x80
    7f3e:	0192      	lsls	r2, r2, #6
    7f40:	18a6      	adds	r6, r4, r2
    7f42:	429c      	cmp	r4, r3
    7f44:	d807      	bhi.n	7f56 <D_Nv_EraseSector_Impl+0x2a>
    nvm_erase_row (address);
    7f46:	4d09      	ldr	r5, [pc, #36]	; (7f6c <D_Nv_EraseSector_Impl+0x40>)
    7f48:	0020      	movs	r0, r4
    7f4a:	47a8      	blx	r5
    address += NVMCTRL_ROW_SIZE;
    7f4c:	3401      	adds	r4, #1
    7f4e:	34ff      	adds	r4, #255	; 0xff
  for (uint8_t i = 0U; i < (D_NV_SECTOR_SIZE / NVMCTRL_ROW_SIZE); i++)
    7f50:	42b4      	cmp	r4, r6
    7f52:	d1f9      	bne.n	7f48 <D_Nv_EraseSector_Impl+0x1c>
}
    7f54:	bd70      	pop	{r4, r5, r6, pc}
  assert(address <= D_NV_MEMORY_END);
    7f56:	4b06      	ldr	r3, [pc, #24]	; (7f70 <D_Nv_EraseSector_Impl+0x44>)
    7f58:	4a06      	ldr	r2, [pc, #24]	; (7f74 <D_Nv_EraseSector_Impl+0x48>)
    7f5a:	21c2      	movs	r1, #194	; 0xc2
    7f5c:	4806      	ldr	r0, [pc, #24]	; (7f78 <D_Nv_EraseSector_Impl+0x4c>)
    7f5e:	4c07      	ldr	r4, [pc, #28]	; (7f7c <D_Nv_EraseSector_Impl+0x50>)
    7f60:	47a0      	blx	r4
    7f62:	46c0      	nop			; (mov r8, r8)
    7f64:	00000400 	.word	0x00000400
    7f68:	00004400 	.word	0x00004400
    7f6c:	000050cd 	.word	0x000050cd
    7f70:	00016df4 	.word	0x00016df4
    7f74:	00016e94 	.word	0x00016e94
    7f78:	00016db0 	.word	0x00016db0
    7f7c:	00014d1d 	.word	0x00014d1d

00007f80 <D_Nv_IsEmpty_Impl>:
    \param numberOfBytes The number of bytes to check
    \returns true if the range is empty, FALSE otherwise.
    \note Sector crossing is not permitted
*/
bool D_Nv_IsEmpty(uint8_t sector, uint16_t offset, D_Nv_Size_t numberOfBytes)
{
    7f80:	b510      	push	{r4, lr}
    7f82:	0013      	movs	r3, r2
  return CompareData(sector, offset, NULL, numberOfBytes);
    7f84:	2200      	movs	r2, #0
    7f86:	4c01      	ldr	r4, [pc, #4]	; (7f8c <D_Nv_IsEmpty_Impl+0xc>)
    7f88:	47a0      	blx	r4
}
    7f8a:	bd10      	pop	{r4, pc}
    7f8c:	00007c71 	.word	0x00007c71

00007f90 <D_Nv_IsEqual_Impl>:
    \param[in] pBuffer The start address of the buffer that contains the data to compare with
    \param numberOfBytes The number of bytes to compare
    \note offset+numberOfBytes must be <= D_NV_SECTOR_SIZE (meaning sector crossing is not permitted)
*/
bool D_Nv_IsEqual(uint8_t sector, uint16_t offset, uint8_t *pBuffer, D_Nv_Size_t numberOfBytes)
{
    7f90:	b510      	push	{r4, lr}
  return CompareData(sector, offset, pBuffer, numberOfBytes);
    7f92:	4c01      	ldr	r4, [pc, #4]	; (7f98 <D_Nv_IsEqual_Impl+0x8>)
    7f94:	47a0      	blx	r4
}
    7f96:	bd10      	pop	{r4, pc}
    7f98:	00007c71 	.word	0x00007c71

00007f9c <PowerSupplyTooLow>:
/** Check the power supply.
    \returns TRUE if the power supply is too low, FALSE when the the power
             supply is OK or when there is no callback installed.
*/
static bool PowerSupplyTooLow()
{
    7f9c:	b510      	push	{r4, lr}
    bool result = false;
    if ( s_powerSupplyCheckingFunction != NULL )
    7f9e:	4b05      	ldr	r3, [pc, #20]	; (7fb4 <PowerSupplyTooLow+0x18>)
    7fa0:	681b      	ldr	r3, [r3, #0]
    7fa2:	2b00      	cmp	r3, #0
    7fa4:	d004      	beq.n	7fb0 <PowerSupplyTooLow+0x14>
    {
        if ( !s_powerSupplyCheckingFunction() )
    7fa6:	4798      	blx	r3
    7fa8:	2301      	movs	r3, #1
    7faa:	4058      	eors	r0, r3
    7fac:	b2c0      	uxtb	r0, r0
        {
            result = true;
        }
    }
    return result;
}
    7fae:	bd10      	pop	{r4, pc}
    bool result = false;
    7fb0:	2000      	movs	r0, #0
    7fb2:	e7fc      	b.n	7fae <PowerSupplyTooLow+0x12>
    7fb4:	20000474 	.word	0x20000474

00007fb8 <UpdateSectorHead>:
*/

static void UpdateSectorHead(uint16_t increment, ItemAlignment_t itemAlignment )
{
    // Adjust the sector head according to the increment and alignment given
    switch(itemAlignment)
    7fb8:	2901      	cmp	r1, #1
    7fba:	d009      	beq.n	7fd0 <UpdateSectorHead+0x18>
    7fbc:	2900      	cmp	r1, #0
    7fbe:	d002      	beq.n	7fc6 <UpdateSectorHead+0xe>
    7fc0:	2902      	cmp	r1, #2
    7fc2:	d00d      	beq.n	7fe0 <UpdateSectorHead+0x28>
           s_sectorHead = (s_sectorHead + increment + 0x003Fu) & 0xFFC0u;
           break;
        default:
           break;
    }
}
    7fc4:	4770      	bx	lr
           s_sectorHead = (s_sectorHead + increment);
    7fc6:	4b0a      	ldr	r3, [pc, #40]	; (7ff0 <UpdateSectorHead+0x38>)
    7fc8:	881a      	ldrh	r2, [r3, #0]
    7fca:	1880      	adds	r0, r0, r2
    7fcc:	8018      	strh	r0, [r3, #0]
           break;
    7fce:	e7f9      	b.n	7fc4 <UpdateSectorHead+0xc>
           s_sectorHead = (s_sectorHead + increment + 0x000Fu) & 0xFFF0u;
    7fd0:	4a07      	ldr	r2, [pc, #28]	; (7ff0 <UpdateSectorHead+0x38>)
    7fd2:	8813      	ldrh	r3, [r2, #0]
    7fd4:	330f      	adds	r3, #15
    7fd6:	18c0      	adds	r0, r0, r3
    7fd8:	230f      	movs	r3, #15
    7fda:	4398      	bics	r0, r3
    7fdc:	8010      	strh	r0, [r2, #0]
           break;
    7fde:	e7f1      	b.n	7fc4 <UpdateSectorHead+0xc>
           s_sectorHead = (s_sectorHead + increment + 0x003Fu) & 0xFFC0u;
    7fe0:	4a03      	ldr	r2, [pc, #12]	; (7ff0 <UpdateSectorHead+0x38>)
    7fe2:	8813      	ldrh	r3, [r2, #0]
    7fe4:	333f      	adds	r3, #63	; 0x3f
    7fe6:	18c0      	adds	r0, r0, r3
    7fe8:	233f      	movs	r3, #63	; 0x3f
    7fea:	4398      	bics	r0, r3
    7fec:	8010      	strh	r0, [r2, #0]
}
    7fee:	e7e9      	b.n	7fc4 <UpdateSectorHead+0xc>
    7ff0:	2000047a 	.word	0x2000047a

00007ff4 <ComputeCrc>:
    // item not found
    return 0x0000u;
}

static uint16_t ComputeCrc(uint8_t* pData, uint16_t length, uint16_t crc)
{
    7ff4:	b530      	push	{r4, r5, lr}
    for ( /* empty */ ; length != 0u; length-- )
    7ff6:	2900      	cmp	r1, #0
    7ff8:	d019      	beq.n	802e <ComputeCrc+0x3a>
    {
        uint8_t x;
        uint8_t data;

        if (pData == NULL)
            data = 0xFF;
    7ffa:	24ff      	movs	r4, #255	; 0xff
    7ffc:	e013      	b.n	8026 <ComputeCrc+0x32>
    7ffe:	0023      	movs	r3, r4
        else
            data = *pData;

        x = (uint8_t) ((crc >> 8) ^ data);
    8000:	0a15      	lsrs	r5, r2, #8
    8002:	406b      	eors	r3, r5
        x = x ^ (x >> 4);
    8004:	091d      	lsrs	r5, r3, #4
    8006:	406b      	eors	r3, r5
        crc = (crc << 8) ^ ((uint16_t) x << 12) ^ ((uint16_t) x << 5) ^ (uint16_t) x;
    8008:	0212      	lsls	r2, r2, #8
    800a:	405a      	eors	r2, r3
    800c:	031d      	lsls	r5, r3, #12
    800e:	406a      	eors	r2, r5
    8010:	015b      	lsls	r3, r3, #5
    8012:	405a      	eors	r2, r3
    8014:	b292      	uxth	r2, r2

        if ( pData != NULL )
          pData++;
    8016:	0003      	movs	r3, r0
    8018:	1e5d      	subs	r5, r3, #1
    801a:	41ab      	sbcs	r3, r5
    801c:	18c0      	adds	r0, r0, r3
    for ( /* empty */ ; length != 0u; length-- )
    801e:	3901      	subs	r1, #1
    8020:	b289      	uxth	r1, r1
    8022:	2900      	cmp	r1, #0
    8024:	d003      	beq.n	802e <ComputeCrc+0x3a>
        if (pData == NULL)
    8026:	2800      	cmp	r0, #0
    8028:	d0e9      	beq.n	7ffe <ComputeCrc+0xa>
            data = *pData;
    802a:	7803      	ldrb	r3, [r0, #0]
    802c:	e7e8      	b.n	8000 <ComputeCrc+0xc>
    }

    return crc;
}
    802e:	0010      	movs	r0, r2
    8030:	bd30      	pop	{r4, r5, pc}
    8032:	Address 0x00008032 is out of bounds.


00008034 <GatherData>:
       be copied to the flash memory \ref s_sectorHead in sector \ref s_sector.

*/

static bool GatherData(uint8_t sourceSector, uint16_t lastBlockPointer, uint16_t offset, uint16_t length, void* pData)
{
    8034:	b5f0      	push	{r4, r5, r6, r7, lr}
    8036:	46de      	mov	lr, fp
    8038:	4657      	mov	r7, sl
    803a:	b580      	push	{r7, lr}
    803c:	b089      	sub	sp, #36	; 0x24
    803e:	9001      	str	r0, [sp, #4]
    8040:	9102      	str	r1, [sp, #8]
    8042:	4693      	mov	fp, r2
    uint16_t blockStart;
    uint16_t blockEnd;
    uint16_t count;

    // prepare the correct pointer
    if ( pData != NULL )
    8044:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8046:	2a00      	cmp	r2, #0
    8048:	d00d      	beq.n	8066 <GatherData+0x32>
    {
        pDestination = (uint8_t*) pData + length;
    804a:	4692      	mov	sl, r2
    804c:	449a      	add	sl, r3

    // [readStart, readEnd> is the range of data that can be read during the current
    // pass over the blocks (the range includes readStart, but not readEnd).
    // it is initialized with the requested range
    uint16_t readStart = offset;
    uint16_t readEnd = offset + length;
    804e:	445b      	add	r3, fp
    8050:	b29d      	uxth	r5, r3

    // continue until we have all the data that was requested
    while ( readStart != readEnd )
    8052:	465e      	mov	r6, fp
    8054:	9c02      	ldr	r4, [sp, #8]
            sourcePointer -= count;
            pDestination -= count;
            D_Nv_Read(sourceSector, sourcePointer, (uint8_t*)pDestination, count);
        }
    }
    return true;
    8056:	2001      	movs	r0, #1
    while ( readStart != readEnd )
    8058:	45ab      	cmp	fp, r5
    805a:	d03e      	beq.n	80da <GatherData+0xa6>
            D_Nv_Read(sourceSector, currentBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    805c:	4f22      	ldr	r7, [pc, #136]	; (80e8 <GatherData+0xb4>)
            if ( currentBlockPointer == 0x0000u )
    805e:	2c00      	cmp	r4, #0
    8060:	d108      	bne.n	8074 <GatherData+0x40>
                return false;
    8062:	2000      	movs	r0, #0
    8064:	e039      	b.n	80da <GatherData+0xa6>
    uint8_t* pDestination = NULL;
    8066:	2200      	movs	r2, #0
    8068:	4692      	mov	sl, r2
    806a:	e7f0      	b.n	804e <GatherData+0x1a>
            currentBlockPointer = blockHeader.previousBlock;
    806c:	ab04      	add	r3, sp, #16
    806e:	895c      	ldrh	r4, [r3, #10]
            if ( currentBlockPointer == 0x0000u )
    8070:	2c00      	cmp	r4, #0
    8072:	d031      	beq.n	80d8 <GatherData+0xa4>
            D_Nv_Read(sourceSector, currentBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8074:	2310      	movs	r3, #16
    8076:	aa04      	add	r2, sp, #16
    8078:	0021      	movs	r1, r4
    807a:	9801      	ldr	r0, [sp, #4]
    807c:	47b8      	blx	r7
            blockStart = blockHeader.blockOffset;
    807e:	ab04      	add	r3, sp, #16
    8080:	889a      	ldrh	r2, [r3, #4]
            if ( (readEnd <= blockStart) || (readStart >= blockEnd) )
    8082:	42aa      	cmp	r2, r5
    8084:	d2f2      	bcs.n	806c <GatherData+0x38>
            blockEnd = blockHeader.blockOffset + blockHeader.blockLength;
    8086:	88db      	ldrh	r3, [r3, #6]
    8088:	18d3      	adds	r3, r2, r3
    808a:	b29b      	uxth	r3, r3
            if ( (readEnd <= blockStart) || (readStart >= blockEnd) )
    808c:	42b3      	cmp	r3, r6
    808e:	d9ed      	bls.n	806c <GatherData+0x38>
            else if ( readEnd > blockEnd )
    8090:	42ab      	cmp	r3, r5
    8092:	d201      	bcs.n	8098 <GatherData+0x64>
                readStart = blockEnd;
    8094:	001e      	movs	r6, r3
    8096:	e7e9      	b.n	806c <GatherData+0x38>
        uint16_t sourcePointer = (currentBlockPointer + BLOCK_HEADER_SIZE) + (readEnd - blockStart);
    8098:	1aa9      	subs	r1, r5, r2
    809a:	b289      	uxth	r1, r1
        if ( readStart < blockStart )
    809c:	42b2      	cmp	r2, r6
    809e:	d915      	bls.n	80cc <GatherData+0x98>
            currentBlockPointer = blockHeader.previousBlock;
    80a0:	ab04      	add	r3, sp, #16
    80a2:	895b      	ldrh	r3, [r3, #10]
    80a4:	9303      	str	r3, [sp, #12]
            count = readEnd - blockStart;
    80a6:	000b      	movs	r3, r1
        readEnd -= count;
    80a8:	1aed      	subs	r5, r5, r3
    80aa:	b2ad      	uxth	r5, r5
        if ( pDestination != NULL)
    80ac:	4652      	mov	r2, sl
    80ae:	2a00      	cmp	r2, #0
    80b0:	d008      	beq.n	80c4 <GatherData+0x90>
        uint16_t sourcePointer = (currentBlockPointer + BLOCK_HEADER_SIZE) + (readEnd - blockStart);
    80b2:	3410      	adds	r4, #16
    80b4:	1909      	adds	r1, r1, r4
            pDestination -= count;
    80b6:	1ad2      	subs	r2, r2, r3
    80b8:	4692      	mov	sl, r2
            sourcePointer -= count;
    80ba:	1ac9      	subs	r1, r1, r3
            D_Nv_Read(sourceSector, sourcePointer, (uint8_t*)pDestination, count);
    80bc:	b289      	uxth	r1, r1
    80be:	9801      	ldr	r0, [sp, #4]
    80c0:	4c09      	ldr	r4, [pc, #36]	; (80e8 <GatherData+0xb4>)
    80c2:	47a0      	blx	r4
    while ( readStart != readEnd )
    80c4:	42ae      	cmp	r6, r5
    80c6:	d00d      	beq.n	80e4 <GatherData+0xb0>
    80c8:	9c03      	ldr	r4, [sp, #12]
    80ca:	e7c8      	b.n	805e <GatherData+0x2a>
            count = readEnd - readStart;
    80cc:	1bab      	subs	r3, r5, r6
    80ce:	b29b      	uxth	r3, r3
            readStart = offset;
    80d0:	465e      	mov	r6, fp
            currentBlockPointer = lastBlockPointer;
    80d2:	9a02      	ldr	r2, [sp, #8]
    80d4:	9203      	str	r2, [sp, #12]
    80d6:	e7e7      	b.n	80a8 <GatherData+0x74>
                return false;
    80d8:	2000      	movs	r0, #0
}
    80da:	b009      	add	sp, #36	; 0x24
    80dc:	bc0c      	pop	{r2, r3}
    80de:	4692      	mov	sl, r2
    80e0:	469b      	mov	fp, r3
    80e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return true;
    80e4:	2001      	movs	r0, #1
    80e6:	e7f8      	b.n	80da <GatherData+0xa6>
    80e8:	00007d4d 	.word	0x00007d4d

000080ec <ComputeDataCrc>:
{
    80ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    80ee:	46de      	mov	lr, fp
    80f0:	4647      	mov	r7, r8
    80f2:	b580      	push	{r7, lr}
    80f4:	b087      	sub	sp, #28
    80f6:	9004      	str	r0, [sp, #16]
    80f8:	9105      	str	r1, [sp, #20]
    length = pBlockHeader->blockLength;
    80fa:	7995      	ldrb	r5, [r2, #6]
    80fc:	79d3      	ldrb	r3, [r2, #7]
    80fe:	021b      	lsls	r3, r3, #8
    8100:	431d      	orrs	r5, r3
    offset = pBlockHeader->blockOffset;
    8102:	7917      	ldrb	r7, [r2, #4]
    8104:	7953      	ldrb	r3, [r2, #5]
    8106:	021b      	lsls	r3, r3, #8
    8108:	431f      	orrs	r7, r3
    for(int8_t i= (length/sizeof(dataBlock)); i>=0; i--)
    810a:	0a2c      	lsrs	r4, r5, #8
    810c:	b264      	sxtb	r4, r4
    810e:	2c00      	cmp	r4, #0
    8110:	db2f      	blt.n	8172 <ComputeDataCrc+0x86>
    8112:	4b1c      	ldr	r3, [pc, #112]	; (8184 <ComputeDataCrc+0x98>)
    8114:	9303      	str	r3, [sp, #12]
            crc = ComputeCrc(((uint8_t*) &dataBlock), dataLength, crc);
    8116:	4b1c      	ldr	r3, [pc, #112]	; (8188 <ComputeDataCrc+0x9c>)
    8118:	4698      	mov	r8, r3
    811a:	e011      	b.n	8140 <ComputeDataCrc+0x54>
        if (dataLength == 0)
    811c:	2d00      	cmp	r5, #0
    811e:	d02a      	beq.n	8176 <ComputeDataCrc+0x8a>
        if (GatherData(sourceSector, blockPointer, offset, dataLength, dataBlock))
    8120:	4b1a      	ldr	r3, [pc, #104]	; (818c <ComputeDataCrc+0xa0>)
    8122:	9300      	str	r3, [sp, #0]
    8124:	002b      	movs	r3, r5
    8126:	003a      	movs	r2, r7
    8128:	9905      	ldr	r1, [sp, #20]
    812a:	9804      	ldr	r0, [sp, #16]
    812c:	4e18      	ldr	r6, [pc, #96]	; (8190 <ComputeDataCrc+0xa4>)
    812e:	47b0      	blx	r6
    8130:	2800      	cmp	r0, #0
    8132:	d020      	beq.n	8176 <ComputeDataCrc+0x8a>
    8134:	0029      	movs	r1, r5
    8136:	e015      	b.n	8164 <ComputeDataCrc+0x78>
    8138:	3c01      	subs	r4, #1
    813a:	b264      	sxtb	r4, r4
    for(int8_t i= (length/sizeof(dataBlock)); i>=0; i--)
    813c:	1c63      	adds	r3, r4, #1
    813e:	d01a      	beq.n	8176 <ComputeDataCrc+0x8a>
        if (i)
    8140:	2c00      	cmp	r4, #0
    8142:	d0eb      	beq.n	811c <ComputeDataCrc+0x30>
            length = length - sizeof(dataBlock);
    8144:	3d01      	subs	r5, #1
    8146:	3dff      	subs	r5, #255	; 0xff
    8148:	b2ad      	uxth	r5, r5
        if (GatherData(sourceSector, blockPointer, offset, dataLength, dataBlock))
    814a:	4b10      	ldr	r3, [pc, #64]	; (818c <ComputeDataCrc+0xa0>)
    814c:	9300      	str	r3, [sp, #0]
    814e:	2380      	movs	r3, #128	; 0x80
    8150:	005b      	lsls	r3, r3, #1
    8152:	003a      	movs	r2, r7
    8154:	9905      	ldr	r1, [sp, #20]
    8156:	9804      	ldr	r0, [sp, #16]
    8158:	4e0d      	ldr	r6, [pc, #52]	; (8190 <ComputeDataCrc+0xa4>)
    815a:	47b0      	blx	r6
    815c:	2800      	cmp	r0, #0
    815e:	d0eb      	beq.n	8138 <ComputeDataCrc+0x4c>
            dataLength = sizeof(dataBlock);
    8160:	2180      	movs	r1, #128	; 0x80
    8162:	0049      	lsls	r1, r1, #1
            offset = offset+dataLength;
    8164:	187f      	adds	r7, r7, r1
    8166:	b2bf      	uxth	r7, r7
            crc = ComputeCrc(((uint8_t*) &dataBlock), dataLength, crc);
    8168:	9a03      	ldr	r2, [sp, #12]
    816a:	4808      	ldr	r0, [pc, #32]	; (818c <ComputeDataCrc+0xa0>)
    816c:	47c0      	blx	r8
    816e:	9003      	str	r0, [sp, #12]
    8170:	e7e2      	b.n	8138 <ComputeDataCrc+0x4c>
    uint16_t crc = 0xFFFFu;
    8172:	4b04      	ldr	r3, [pc, #16]	; (8184 <ComputeDataCrc+0x98>)
    8174:	9303      	str	r3, [sp, #12]
}
    8176:	9803      	ldr	r0, [sp, #12]
    8178:	b007      	add	sp, #28
    817a:	bc0c      	pop	{r2, r3}
    817c:	4690      	mov	r8, r2
    817e:	469b      	mov	fp, r3
    8180:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8182:	46c0      	nop			; (mov r8, r8)
    8184:	0000ffff 	.word	0x0000ffff
    8188:	00007ff5 	.word	0x00007ff5
    818c:	2000033c 	.word	0x2000033c
    8190:	00008035 	.word	0x00008035

00008194 <FindItemCache>:
{
    8194:	b570      	push	{r4, r5, r6, lr}
    for ( uint8_t cacheIndex = 0u; cacheIndex < s_itemCount; cacheIndex++ )
    8196:	4b16      	ldr	r3, [pc, #88]	; (81f0 <FindItemCache+0x5c>)
    8198:	781c      	ldrb	r4, [r3, #0]
    819a:	2c00      	cmp	r4, #0
    819c:	d026      	beq.n	81ec <FindItemCache+0x58>
        if ( cache->id == id )
    819e:	4b15      	ldr	r3, [pc, #84]	; (81f4 <FindItemCache+0x60>)
    81a0:	881b      	ldrh	r3, [r3, #0]
    81a2:	4283      	cmp	r3, r0
    81a4:	d016      	beq.n	81d4 <FindItemCache+0x40>
    81a6:	2301      	movs	r3, #1
    81a8:	4e12      	ldr	r6, [pc, #72]	; (81f4 <FindItemCache+0x60>)
    for ( uint8_t cacheIndex = 0u; cacheIndex < s_itemCount; cacheIndex++ )
    81aa:	b2da      	uxtb	r2, r3
    81ac:	4294      	cmp	r4, r2
    81ae:	d91b      	bls.n	81e8 <FindItemCache+0x54>
        Item_t *cache = &s_itemCache[cacheIndex];
    81b0:	001d      	movs	r5, r3
        if ( cache->id == id )
    81b2:	1c59      	adds	r1, r3, #1
    81b4:	009a      	lsls	r2, r3, #2
    81b6:	5ab2      	ldrh	r2, [r6, r2]
    81b8:	4282      	cmp	r2, r0
    81ba:	d001      	beq.n	81c0 <FindItemCache+0x2c>
    81bc:	000b      	movs	r3, r1
    81be:	e7f4      	b.n	81aa <FindItemCache+0x16>
        Item_t *cache = &s_itemCache[cacheIndex];
    81c0:	009b      	lsls	r3, r3, #2
    81c2:	480c      	ldr	r0, [pc, #48]	; (81f4 <FindItemCache+0x60>)
    81c4:	18c0      	adds	r0, r0, r3
            assert(cache->lastBlock != 0x0000);
    81c6:	00ad      	lsls	r5, r5, #2
    81c8:	4b0a      	ldr	r3, [pc, #40]	; (81f4 <FindItemCache+0x60>)
    81ca:	195d      	adds	r5, r3, r5
    81cc:	886b      	ldrh	r3, [r5, #2]
    81ce:	2b00      	cmp	r3, #0
    81d0:	d003      	beq.n	81da <FindItemCache+0x46>
}
    81d2:	bd70      	pop	{r4, r5, r6, pc}
        Item_t *cache = &s_itemCache[cacheIndex];
    81d4:	4807      	ldr	r0, [pc, #28]	; (81f4 <FindItemCache+0x60>)
    81d6:	2500      	movs	r5, #0
    81d8:	e7f5      	b.n	81c6 <FindItemCache+0x32>
            assert(cache->lastBlock != 0x0000);
    81da:	4b07      	ldr	r3, [pc, #28]	; (81f8 <FindItemCache+0x64>)
    81dc:	4a07      	ldr	r2, [pc, #28]	; (81fc <FindItemCache+0x68>)
    81de:	218c      	movs	r1, #140	; 0x8c
    81e0:	31ff      	adds	r1, #255	; 0xff
    81e2:	4807      	ldr	r0, [pc, #28]	; (8200 <FindItemCache+0x6c>)
    81e4:	4c07      	ldr	r4, [pc, #28]	; (8204 <FindItemCache+0x70>)
    81e6:	47a0      	blx	r4
    return NULL;
    81e8:	2000      	movs	r0, #0
    81ea:	e7f2      	b.n	81d2 <FindItemCache+0x3e>
    81ec:	2000      	movs	r0, #0
    81ee:	e7f0      	b.n	81d2 <FindItemCache+0x3e>
    81f0:	20000470 	.word	0x20000470
    81f4:	20000454 	.word	0x20000454
    81f8:	00016f0c 	.word	0x00016f0c
    81fc:	00016ff8 	.word	0x00016ff8
    8200:	00016f28 	.word	0x00016f28
    8204:	00014d1d 	.word	0x00014d1d

00008208 <FindItem>:
{
    8208:	b510      	push	{r4, lr}
    Item_t *cache = FindItemCache(id);
    820a:	4b05      	ldr	r3, [pc, #20]	; (8220 <FindItem+0x18>)
    820c:	4798      	blx	r3
    if (cache)
    820e:	2800      	cmp	r0, #0
    8210:	d004      	beq.n	821c <FindItem+0x14>
        return cache->lastBlock;
    8212:	7883      	ldrb	r3, [r0, #2]
    8214:	78c0      	ldrb	r0, [r0, #3]
    8216:	0200      	lsls	r0, r0, #8
    8218:	4318      	orrs	r0, r3
}
    821a:	bd10      	pop	{r4, pc}
    return 0x0000u;
    821c:	2000      	movs	r0, #0
    821e:	e7fc      	b.n	821a <FindItem+0x12>
    8220:	00008195 	.word	0x00008195

00008224 <CreateItemCache>:
{
    8224:	b510      	push	{r4, lr}
    8226:	0004      	movs	r4, r0
    assert(FindItemCache(id) == NULL);
    8228:	4b0e      	ldr	r3, [pc, #56]	; (8264 <CreateItemCache+0x40>)
    822a:	4798      	blx	r3
    822c:	2800      	cmp	r0, #0
    822e:	d10b      	bne.n	8248 <CreateItemCache+0x24>
    assert(s_itemCount < MAX_ITEM_COUNT);
    8230:	4b0d      	ldr	r3, [pc, #52]	; (8268 <CreateItemCache+0x44>)
    8232:	781b      	ldrb	r3, [r3, #0]
    8234:	2b06      	cmp	r3, #6
    8236:	d80e      	bhi.n	8256 <CreateItemCache+0x32>
    Item_t *cache = &s_itemCache[s_itemCount++];
    8238:	1c59      	adds	r1, r3, #1
    823a:	4a0b      	ldr	r2, [pc, #44]	; (8268 <CreateItemCache+0x44>)
    823c:	7011      	strb	r1, [r2, #0]
    cache->id = id;
    823e:	480b      	ldr	r0, [pc, #44]	; (826c <CreateItemCache+0x48>)
    8240:	009b      	lsls	r3, r3, #2
    8242:	521c      	strh	r4, [r3, r0]
    Item_t *cache = &s_itemCache[s_itemCount++];
    8244:	18c0      	adds	r0, r0, r3
}
    8246:	bd10      	pop	{r4, pc}
    assert(FindItemCache(id) == NULL);
    8248:	4b09      	ldr	r3, [pc, #36]	; (8270 <CreateItemCache+0x4c>)
    824a:	4a0a      	ldr	r2, [pc, #40]	; (8274 <CreateItemCache+0x50>)
    824c:	21cc      	movs	r1, #204	; 0xcc
    824e:	0049      	lsls	r1, r1, #1
    8250:	4809      	ldr	r0, [pc, #36]	; (8278 <CreateItemCache+0x54>)
    8252:	4c0a      	ldr	r4, [pc, #40]	; (827c <CreateItemCache+0x58>)
    8254:	47a0      	blx	r4
    assert(s_itemCount < MAX_ITEM_COUNT);
    8256:	4b0a      	ldr	r3, [pc, #40]	; (8280 <CreateItemCache+0x5c>)
    8258:	4a06      	ldr	r2, [pc, #24]	; (8274 <CreateItemCache+0x50>)
    825a:	219a      	movs	r1, #154	; 0x9a
    825c:	31ff      	adds	r1, #255	; 0xff
    825e:	4806      	ldr	r0, [pc, #24]	; (8278 <CreateItemCache+0x54>)
    8260:	4c06      	ldr	r4, [pc, #24]	; (827c <CreateItemCache+0x58>)
    8262:	47a0      	blx	r4
    8264:	00008195 	.word	0x00008195
    8268:	20000470 	.word	0x20000470
    826c:	20000454 	.word	0x20000454
    8270:	00016ed0 	.word	0x00016ed0
    8274:	00017008 	.word	0x00017008
    8278:	00016f28 	.word	0x00016f28
    827c:	00014d1d 	.word	0x00014d1d
    8280:	00016eec 	.word	0x00016eec

00008284 <EraseSector>:

static bool EraseSector(void)
{
    8284:	b510      	push	{r4, lr}
    // Erase the sector
    D_Nv_EraseSector(s_sector);
    8286:	4c08      	ldr	r4, [pc, #32]	; (82a8 <EraseSector+0x24>)
    8288:	7820      	ldrb	r0, [r4, #0]
    828a:	4b08      	ldr	r3, [pc, #32]	; (82ac <EraseSector+0x28>)
    828c:	4798      	blx	r3
    // check if the erase succeeded
    if ( !D_Nv_IsEmpty(s_sector, 0u, SECTOR_SIZE) )
    828e:	7820      	ldrb	r0, [r4, #0]
    8290:	2280      	movs	r2, #128	; 0x80
    8292:	0192      	lsls	r2, r2, #6
    8294:	2100      	movs	r1, #0
    8296:	4b06      	ldr	r3, [pc, #24]	; (82b0 <EraseSector+0x2c>)
    8298:	4798      	blx	r3
    829a:	2800      	cmp	r0, #0
    829c:	d003      	beq.n	82a6 <EraseSector+0x22>
    {
        return false;
    }
    s_sectorHead =  ITEMS_AREA_START_ADDRESS;
    829e:	2280      	movs	r2, #128	; 0x80
    82a0:	0052      	lsls	r2, r2, #1
    82a2:	4b04      	ldr	r3, [pc, #16]	; (82b4 <EraseSector+0x30>)
    82a4:	801a      	strh	r2, [r3, #0]

    return true;
}
    82a6:	bd10      	pop	{r4, pc}
    82a8:	20000478 	.word	0x20000478
    82ac:	00007f2d 	.word	0x00007f2d
    82b0:	00007f81 	.word	0x00007f81
    82b4:	2000047a 	.word	0x2000047a

000082b8 <WriteAndCheck>:
{
    82b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    82ba:	b083      	sub	sp, #12
    82bc:	9001      	str	r0, [sp, #4]
    82be:	000d      	movs	r5, r1
    82c0:	0016      	movs	r6, r2
    D_Nv_Write(s_sector, offset, pData, length);
    82c2:	4f07      	ldr	r7, [pc, #28]	; (82e0 <WriteAndCheck+0x28>)
    82c4:	7838      	ldrb	r0, [r7, #0]
    82c6:	0013      	movs	r3, r2
    82c8:	000a      	movs	r2, r1
    82ca:	9901      	ldr	r1, [sp, #4]
    82cc:	4c05      	ldr	r4, [pc, #20]	; (82e4 <WriteAndCheck+0x2c>)
    82ce:	47a0      	blx	r4
    return D_Nv_IsEqual(s_sector, offset, pData, length);
    82d0:	7838      	ldrb	r0, [r7, #0]
    82d2:	0033      	movs	r3, r6
    82d4:	002a      	movs	r2, r5
    82d6:	9901      	ldr	r1, [sp, #4]
    82d8:	4c03      	ldr	r4, [pc, #12]	; (82e8 <WriteAndCheck+0x30>)
    82da:	47a0      	blx	r4
}
    82dc:	b003      	add	sp, #12
    82de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    82e0:	20000478 	.word	0x20000478
    82e4:	00007dc5 	.word	0x00007dc5
    82e8:	00007f91 	.word	0x00007f91

000082ec <WriteSectorHeader>:

static bool WriteSectorHeader(uint32_t sequenceNumber)
{
    82ec:	b510      	push	{r4, lr}
    82ee:	b086      	sub	sp, #24
    // write sector header
    SectorHeader_t sectorHeader;
    sectorHeader.signature[0] = (uint8_t) 'A';
    82f0:	ac01      	add	r4, sp, #4
    82f2:	2341      	movs	r3, #65	; 0x41
    82f4:	70a3      	strb	r3, [r4, #2]
    sectorHeader.signature[1] = (uint8_t) 'T';
    82f6:	3313      	adds	r3, #19
    82f8:	70e3      	strb	r3, [r4, #3]
    sectorHeader.signature[2] = (uint8_t) 'S';
    82fa:	3b01      	subs	r3, #1
    82fc:	7123      	strb	r3, [r4, #4]
    sectorHeader.signature[3] = (uint8_t) 'N';
    82fe:	3b05      	subs	r3, #5
    8300:	7163      	strb	r3, [r4, #5]
    sectorHeader.signature[4] = (uint8_t) 'v';
    8302:	3328      	adds	r3, #40	; 0x28
    8304:	71a3      	strb	r3, [r4, #6]
    sectorHeader.signature[5] = (uint8_t) '2';
    8306:	3b44      	subs	r3, #68	; 0x44
    8308:	71e3      	strb	r3, [r4, #7]
    sectorHeader.sequenceNumber = sequenceNumber;
    830a:	9003      	str	r0, [sp, #12]
    sectorHeader.sequenceParity = sequenceNumber ^ 0xFFFFFFFFuL;
    830c:	43c0      	mvns	r0, r0
    830e:	9004      	str	r0, [sp, #16]
    sectorHeader.nextPageAddressAfterCompact = s_nextPageAddressAfterCompact;
    8310:	4b08      	ldr	r3, [pc, #32]	; (8334 <WriteSectorHeader+0x48>)
    8312:	881b      	ldrh	r3, [r3, #0]
    8314:	8223      	strh	r3, [r4, #16]
    return ComputeCrc(((uint8_t*) pSectorHeader) + sizeof(pSectorHeader->headerCrc), (sizeof(SectorHeader_t)- sizeof(pSectorHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    8316:	4a08      	ldr	r2, [pc, #32]	; (8338 <WriteSectorHeader+0x4c>)
    8318:	2110      	movs	r1, #16
    831a:	466b      	mov	r3, sp
    831c:	1d98      	adds	r0, r3, #6
    831e:	4b07      	ldr	r3, [pc, #28]	; (833c <WriteSectorHeader+0x50>)
    8320:	4798      	blx	r3
    sectorHeader.headerCrc = ComputeSectorHeaderCrc(&sectorHeader);
    8322:	8020      	strh	r0, [r4, #0]
    if ( !WriteAndCheck(0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE) )
    8324:	2212      	movs	r2, #18
    8326:	0021      	movs	r1, r4
    8328:	2000      	movs	r0, #0
    832a:	4b05      	ldr	r3, [pc, #20]	; (8340 <WriteSectorHeader+0x54>)
    832c:	4798      	blx	r3
    {
        return false;
    }
    return true;
}
    832e:	b006      	add	sp, #24
    8330:	bd10      	pop	{r4, pc}
    8332:	46c0      	nop			; (mov r8, r8)
    8334:	20000472 	.word	0x20000472
    8338:	0000ffff 	.word	0x0000ffff
    833c:	00007ff5 	.word	0x00007ff5
    8340:	000082b9 	.word	0x000082b9

00008344 <SmartCompacting>:
 * without following any alignements as normal item updates.Items are filled into
  256 byte buffer(= row size), committed in shot which takes 4 page writs maximum
 */

static bool SmartCompacting(uint8_t* compactBlock, uint16_t curItemLength)
{
    8344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8346:	0004      	movs	r4, r0
    8348:	000d      	movs	r5, r1
    //manupulate the current compact length
    currentCompactLength += curItemLength;
    834a:	4a21      	ldr	r2, [pc, #132]	; (83d0 <SmartCompacting+0x8c>)
    834c:	8813      	ldrh	r3, [r2, #0]
    834e:	18cb      	adds	r3, r1, r3
    8350:	b29b      	uxth	r3, r3
    8352:	8013      	strh	r3, [r2, #0]

    // if the complete buffer cannot be filled with the current item
    if ( currentCompactLength < ROW_SIZE)
    8354:	2bff      	cmp	r3, #255	; 0xff
    8356:	d92e      	bls.n	83b6 <SmartCompacting+0x72>
    else  //(currentCompactLength >= ROW_SIZE) cases
    {
        uint16_t dataBlockOffset = 0;


        memcpy(compactBlock + compactBlockOffset, dataBlock, (ROW_SIZE - compactBlockOffset));
    8358:	4b1e      	ldr	r3, [pc, #120]	; (83d4 <SmartCompacting+0x90>)
    835a:	881a      	ldrh	r2, [r3, #0]
    835c:	1880      	adds	r0, r0, r2
    835e:	2580      	movs	r5, #128	; 0x80
    8360:	006d      	lsls	r5, r5, #1
    8362:	1aaa      	subs	r2, r5, r2
    8364:	491c      	ldr	r1, [pc, #112]	; (83d8 <SmartCompacting+0x94>)
    8366:	4b1d      	ldr	r3, [pc, #116]	; (83dc <SmartCompacting+0x98>)
    8368:	4798      	blx	r3
        if ( !WriteAndCheck(s_sectorHead, compactBlock, ROW_SIZE ))
    836a:	4b1d      	ldr	r3, [pc, #116]	; (83e0 <SmartCompacting+0x9c>)
    836c:	8818      	ldrh	r0, [r3, #0]
    836e:	002a      	movs	r2, r5
    8370:	0021      	movs	r1, r4
    8372:	4b1c      	ldr	r3, [pc, #112]	; (83e4 <SmartCompacting+0xa0>)
    8374:	4798      	blx	r3
    8376:	1e05      	subs	r5, r0, #0
    8378:	d027      	beq.n	83ca <SmartCompacting+0x86>
        {
            return false;
        }
        UpdateSectorHead(ROW_SIZE, ITEM_NO_ALIGNMENT);
    837a:	2100      	movs	r1, #0
    837c:	2080      	movs	r0, #128	; 0x80
    837e:	0040      	lsls	r0, r0, #1
    8380:	4b19      	ldr	r3, [pc, #100]	; (83e8 <SmartCompacting+0xa4>)
    8382:	4798      	blx	r3
        dataBlockOffset += (ROW_SIZE - compactBlockOffset);
    8384:	4b13      	ldr	r3, [pc, #76]	; (83d4 <SmartCompacting+0x90>)
    8386:	8818      	ldrh	r0, [r3, #0]
        compactBlockOffset = 0;
    8388:	2200      	movs	r2, #0
    838a:	801a      	strh	r2, [r3, #0]
        currentCompactLength -= ROW_SIZE;
    838c:	4b10      	ldr	r3, [pc, #64]	; (83d0 <SmartCompacting+0x8c>)
    838e:	881e      	ldrh	r6, [r3, #0]
    8390:	3e01      	subs	r6, #1
    8392:	3eff      	subs	r6, #255	; 0xff
    8394:	b2b6      	uxth	r6, r6
    8396:	801e      	strh	r6, [r3, #0]
        if (currentCompactLength)
    8398:	2e00      	cmp	r6, #0
    839a:	d016      	beq.n	83ca <SmartCompacting+0x86>
        dataBlockOffset += (ROW_SIZE - compactBlockOffset);
    839c:	2180      	movs	r1, #128	; 0x80
    839e:	0049      	lsls	r1, r1, #1
    83a0:	1a09      	subs	r1, r1, r0
        {
            memcpy(compactBlock, dataBlock + dataBlockOffset, currentCompactLength);
    83a2:	b289      	uxth	r1, r1
    83a4:	4b0c      	ldr	r3, [pc, #48]	; (83d8 <SmartCompacting+0x94>)
    83a6:	1859      	adds	r1, r3, r1
    83a8:	0032      	movs	r2, r6
    83aa:	0020      	movs	r0, r4
    83ac:	4b0b      	ldr	r3, [pc, #44]	; (83dc <SmartCompacting+0x98>)
    83ae:	4798      	blx	r3
            compactBlockOffset = currentCompactLength;
    83b0:	4b08      	ldr	r3, [pc, #32]	; (83d4 <SmartCompacting+0x90>)
    83b2:	801e      	strh	r6, [r3, #0]
    83b4:	e009      	b.n	83ca <SmartCompacting+0x86>
        memcpy(compactBlock + compactBlockOffset, dataBlock, curItemLength);
    83b6:	4e07      	ldr	r6, [pc, #28]	; (83d4 <SmartCompacting+0x90>)
    83b8:	8837      	ldrh	r7, [r6, #0]
    83ba:	19c0      	adds	r0, r0, r7
    83bc:	000a      	movs	r2, r1
    83be:	4906      	ldr	r1, [pc, #24]	; (83d8 <SmartCompacting+0x94>)
    83c0:	4b06      	ldr	r3, [pc, #24]	; (83dc <SmartCompacting+0x98>)
    83c2:	4798      	blx	r3
        compactBlockOffset += curItemLength;
    83c4:	19ed      	adds	r5, r5, r7
    83c6:	8035      	strh	r5, [r6, #0]
        return true;
    83c8:	2501      	movs	r5, #1
        }
    }

    return true;

}
    83ca:	0028      	movs	r0, r5
    83cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    83ce:	46c0      	nop			; (mov r8, r8)
    83d0:	20000338 	.word	0x20000338
    83d4:	2000030c 	.word	0x2000030c
    83d8:	2000033c 	.word	0x2000033c
    83dc:	00014ddf 	.word	0x00014ddf
    83e0:	2000047a 	.word	0x2000047a
    83e4:	000082b9 	.word	0x000082b9
    83e8:	00007fb9 	.word	0x00007fb9

000083ec <CompactSector>:
 * This is because the itemCache, sector head and sector selector will
 * be messed up.
 */

static bool CompactSector(void)
{
    83ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    83ee:	46de      	mov	lr, fp
    83f0:	4657      	mov	r7, sl
    83f2:	464e      	mov	r6, r9
    83f4:	4645      	mov	r5, r8
    83f6:	b5e0      	push	{r5, r6, r7, lr}
    83f8:	b0d5      	sub	sp, #340	; 0x154
    PRINTA(("CompactSector(s=%X)", s_sector));
#endif
    uint8_t compactBlock[ROW_SIZE];

    // stop timer for preemptive compact sector as this will not be needed any more
    SYS_TimerStop(&compactSectorTimer);
    83fa:	487b      	ldr	r0, [pc, #492]	; (85e8 <CompactSector+0x1fc>)
    83fc:	4b7b      	ldr	r3, [pc, #492]	; (85ec <CompactSector+0x200>)
    83fe:	4798      	blx	r3

    // stop the compact item as a compact sector will compact all items
    s_compactItemId = 0u;
    8400:	2300      	movs	r3, #0
    8402:	4a7b      	ldr	r2, [pc, #492]	; (85f0 <CompactSector+0x204>)
    8404:	8013      	strh	r3, [r2, #0]
    s_compactItemLength = 0u;
    8406:	4a7b      	ldr	r2, [pc, #492]	; (85f4 <CompactSector+0x208>)
    8408:	8013      	strh	r3, [r2, #0]

    compactBlockOffset = 0;
    840a:	4a7b      	ldr	r2, [pc, #492]	; (85f8 <CompactSector+0x20c>)
    840c:	8013      	strh	r3, [r2, #0]
    currentCompactLength = 0;
    840e:	4a7b      	ldr	r2, [pc, #492]	; (85fc <CompactSector+0x210>)
    8410:	8013      	strh	r3, [r2, #0]

    uint8_t sourceSector = s_sector;
    8412:	4b7b      	ldr	r3, [pc, #492]	; (8600 <CompactSector+0x214>)
    8414:	781b      	ldrb	r3, [r3, #0]
    8416:	001f      	movs	r7, r3
    8418:	9303      	str	r3, [sp, #12]

    // get the sector header for the source sector
    SectorHeader_t sectorHeader;
    D_Nv_Read(sourceSector, 0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE);
    841a:	2312      	movs	r3, #18
    841c:	aa0f      	add	r2, sp, #60	; 0x3c
    841e:	2100      	movs	r1, #0
    8420:	0038      	movs	r0, r7
    8422:	4c78      	ldr	r4, [pc, #480]	; (8604 <CompactSector+0x218>)
    8424:	47a0      	blx	r4

    uint32_t nextSequenceNumber = sectorHeader.sequenceNumber - 1uL;
    8426:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8428:	9309      	str	r3, [sp, #36]	; 0x24

    // find and prepare a destination sector
    do
    {
        s_sector++;
    842a:	4c75      	ldr	r4, [pc, #468]	; (8600 <CompactSector+0x214>)
        if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
        {
            s_sector = FIRST_SECTOR;
    842c:	0025      	movs	r5, r4
        s_sector++;
    842e:	0026      	movs	r6, r4
    8430:	e008      	b.n	8444 <CompactSector+0x58>
    8432:	7033      	strb	r3, [r6, #0]
        }

        if ( s_sector == sourceSector )
    8434:	4b72      	ldr	r3, [pc, #456]	; (8600 <CompactSector+0x214>)
    8436:	781b      	ldrb	r3, [r3, #0]
    8438:	42bb      	cmp	r3, r7
    843a:	d00b      	beq.n	8454 <CompactSector+0x68>
        {
            // all sector failed to initialize
            assert(false);
        }
    }
    while ( !EraseSector());
    843c:	4b72      	ldr	r3, [pc, #456]	; (8608 <CompactSector+0x21c>)
    843e:	4798      	blx	r3
    8440:	2800      	cmp	r0, #0
    8442:	d10d      	bne.n	8460 <CompactSector+0x74>
        s_sector++;
    8444:	7823      	ldrb	r3, [r4, #0]
    8446:	3301      	adds	r3, #1
    8448:	b2db      	uxtb	r3, r3
        if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
    844a:	2b01      	cmp	r3, #1
    844c:	d9f1      	bls.n	8432 <CompactSector+0x46>
            s_sector = FIRST_SECTOR;
    844e:	2300      	movs	r3, #0
    8450:	702b      	strb	r3, [r5, #0]
    8452:	e7ef      	b.n	8434 <CompactSector+0x48>
            assert(false);
    8454:	4b6d      	ldr	r3, [pc, #436]	; (860c <CompactSector+0x220>)
    8456:	4a6e      	ldr	r2, [pc, #440]	; (8610 <CompactSector+0x224>)
    8458:	496e      	ldr	r1, [pc, #440]	; (8614 <CompactSector+0x228>)
    845a:	486f      	ldr	r0, [pc, #444]	; (8618 <CompactSector+0x22c>)
    845c:	4c6f      	ldr	r4, [pc, #444]	; (861c <CompactSector+0x230>)
    845e:	47a0      	blx	r4

    // Traverse the item cache, writing all items to the new sector
    for (uint8_t cacheIndex = 0; cacheIndex < s_itemCount; cacheIndex++) {
    8460:	4b6f      	ldr	r3, [pc, #444]	; (8620 <CompactSector+0x234>)
    8462:	781b      	ldrb	r3, [r3, #0]
    8464:	2b00      	cmp	r3, #0
    8466:	d06a      	beq.n	853e <CompactSector+0x152>
    8468:	2300      	movs	r3, #0
    846a:	9306      	str	r3, [sp, #24]

        blockHeader.dataCrc =  ComputeDataCrc(sourceSector, lastBlockPointer, &blockHeader);

        blockHeader.headerCrc = ComputeHeaderCrc(&blockHeader);

        memset(dataBlock, 0xFF, sizeof(dataBlock));
    846c:	3301      	adds	r3, #1
    846e:	33ff      	adds	r3, #255	; 0xff
    8470:	4699      	mov	r9, r3
            uint16_t bytesToGather;
            uint16_t inDataOffset = 0;

            do
            {
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    8472:	466a      	mov	r2, sp
    8474:	82d3      	strh	r3, [r2, #22]
            if (!GatherData(sourceSector, lastBlockPointer, 0u, blockHeader.itemLength, (dataBlock + BLOCK_HEADER_SIZE )))
    8476:	4b6b      	ldr	r3, [pc, #428]	; (8624 <CompactSector+0x238>)
    8478:	3310      	adds	r3, #16
    847a:	9308      	str	r3, [sp, #32]
        Item_t *cache = &s_itemCache[cacheIndex];
    847c:	9b06      	ldr	r3, [sp, #24]
    847e:	9307      	str	r3, [sp, #28]
        uint16_t lastBlockPointer = cache->lastBlock;
    8480:	009f      	lsls	r7, r3, #2
    8482:	4b69      	ldr	r3, [pc, #420]	; (8628 <CompactSector+0x23c>)
    8484:	469c      	mov	ip, r3
    8486:	4467      	add	r7, ip
    8488:	887b      	ldrh	r3, [r7, #2]
    848a:	001d      	movs	r5, r3
    848c:	9304      	str	r3, [sp, #16]
        D_Nv_Read(sourceSector, lastBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    848e:	2310      	movs	r3, #16
    8490:	aa0b      	add	r2, sp, #44	; 0x2c
    8492:	0029      	movs	r1, r5
    8494:	9803      	ldr	r0, [sp, #12]
    8496:	4680      	mov	r8, r0
    8498:	4c5a      	ldr	r4, [pc, #360]	; (8604 <CompactSector+0x218>)
    849a:	47a0      	blx	r4
        blockHeader.blockOffset = 0x0000u;
    849c:	ae0b      	add	r6, sp, #44	; 0x2c
    849e:	2300      	movs	r3, #0
    84a0:	80b3      	strh	r3, [r6, #4]
        blockHeader.blockLength = blockHeader.itemLength;
    84a2:	8934      	ldrh	r4, [r6, #8]
    84a4:	80f4      	strh	r4, [r6, #6]
        blockHeader.previousBlock = 0x0000u;
    84a6:	8173      	strh	r3, [r6, #10]
        blockHeader.writeCount = 0u;
    84a8:	81b3      	strh	r3, [r6, #12]
        uint16_t currLength = BLOCK_HEADER_SIZE + blockHeader.itemLength;
    84aa:	3410      	adds	r4, #16
    84ac:	b2a4      	uxth	r4, r4
        blockHeader.dataCrc =  ComputeDataCrc(sourceSector, lastBlockPointer, &blockHeader);
    84ae:	0032      	movs	r2, r6
    84b0:	0029      	movs	r1, r5
    84b2:	4640      	mov	r0, r8
    84b4:	4b5d      	ldr	r3, [pc, #372]	; (862c <CompactSector+0x240>)
    84b6:	4798      	blx	r3
    84b8:	8030      	strh	r0, [r6, #0]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    84ba:	4a5d      	ldr	r2, [pc, #372]	; (8630 <CompactSector+0x244>)
    84bc:	210e      	movs	r1, #14
    84be:	a80b      	add	r0, sp, #44	; 0x2c
    84c0:	4b5c      	ldr	r3, [pc, #368]	; (8634 <CompactSector+0x248>)
    84c2:	4798      	blx	r3
        blockHeader.headerCrc = ComputeHeaderCrc(&blockHeader);
    84c4:	81f0      	strh	r0, [r6, #14]
        memset(dataBlock, 0xFF, sizeof(dataBlock));
    84c6:	4d57      	ldr	r5, [pc, #348]	; (8624 <CompactSector+0x238>)
    84c8:	464a      	mov	r2, r9
    84ca:	21ff      	movs	r1, #255	; 0xff
    84cc:	0028      	movs	r0, r5
    84ce:	4b5a      	ldr	r3, [pc, #360]	; (8638 <CompactSector+0x24c>)
    84d0:	4798      	blx	r3
        memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    84d2:	002b      	movs	r3, r5
    84d4:	ce07      	ldmia	r6!, {r0, r1, r2}
    84d6:	c307      	stmia	r3!, {r0, r1, r2}
    84d8:	6832      	ldr	r2, [r6, #0]
    84da:	601a      	str	r2, [r3, #0]
        cache->lastBlock = s_sectorHead  + compactBlockOffset;
    84dc:	4b57      	ldr	r3, [pc, #348]	; (863c <CompactSector+0x250>)
    84de:	881b      	ldrh	r3, [r3, #0]
    84e0:	4a45      	ldr	r2, [pc, #276]	; (85f8 <CompactSector+0x20c>)
    84e2:	8812      	ldrh	r2, [r2, #0]
    84e4:	189b      	adds	r3, r3, r2
    84e6:	807b      	strh	r3, [r7, #2]
        if (currLength <= ROW_SIZE)
    84e8:	454c      	cmp	r4, r9
    84ea:	d904      	bls.n	84f6 <CompactSector+0x10a>
    84ec:	2600      	movs	r6, #0
    84ee:	2310      	movs	r3, #16
              
              if (!GatherData(sourceSector, lastBlockPointer, inDataOffset, (bytesToGather - dataBlockOffset) , (dataBlock + dataBlockOffset)))
    84f0:	4a4c      	ldr	r2, [pc, #304]	; (8624 <CompactSector+0x238>)
    84f2:	4690      	mov	r8, r2
    84f4:	e068      	b.n	85c8 <CompactSector+0x1dc>
            if (!GatherData(sourceSector, lastBlockPointer, 0u, blockHeader.itemLength, (dataBlock + BLOCK_HEADER_SIZE )))
    84f6:	ab0b      	add	r3, sp, #44	; 0x2c
    84f8:	891b      	ldrh	r3, [r3, #8]
    84fa:	9a08      	ldr	r2, [sp, #32]
    84fc:	9200      	str	r2, [sp, #0]
    84fe:	2200      	movs	r2, #0
    8500:	9904      	ldr	r1, [sp, #16]
    8502:	9803      	ldr	r0, [sp, #12]
    8504:	4e4e      	ldr	r6, [pc, #312]	; (8640 <CompactSector+0x254>)
    8506:	47b0      	blx	r6
    8508:	2800      	cmp	r0, #0
    850a:	d063      	beq.n	85d4 <CompactSector+0x1e8>
            cache->lastBlock = s_sectorHead  + compactBlockOffset;
    850c:	9b07      	ldr	r3, [sp, #28]
    850e:	009d      	lsls	r5, r3, #2
    8510:	4b45      	ldr	r3, [pc, #276]	; (8628 <CompactSector+0x23c>)
    8512:	195d      	adds	r5, r3, r5
    8514:	4b49      	ldr	r3, [pc, #292]	; (863c <CompactSector+0x250>)
    8516:	881b      	ldrh	r3, [r3, #0]
    8518:	4a37      	ldr	r2, [pc, #220]	; (85f8 <CompactSector+0x20c>)
    851a:	8812      	ldrh	r2, [r2, #0]
    851c:	189b      	adds	r3, r3, r2
    851e:	806b      	strh	r3, [r5, #2]
            if (!SmartCompacting(compactBlock, currLength))
    8520:	0021      	movs	r1, r4
    8522:	a814      	add	r0, sp, #80	; 0x50
    8524:	4b47      	ldr	r3, [pc, #284]	; (8644 <CompactSector+0x258>)
    8526:	4798      	blx	r3
    8528:	2800      	cmp	r0, #0
    852a:	d053      	beq.n	85d4 <CompactSector+0x1e8>
    for (uint8_t cacheIndex = 0; cacheIndex < s_itemCount; cacheIndex++) {
    852c:	9b06      	ldr	r3, [sp, #24]
    852e:	3301      	adds	r3, #1
    8530:	b2db      	uxtb	r3, r3
    8532:	001a      	movs	r2, r3
    8534:	9306      	str	r3, [sp, #24]
    8536:	4b3a      	ldr	r3, [pc, #232]	; (8620 <CompactSector+0x234>)
    8538:	781b      	ldrb	r3, [r3, #0]
    853a:	4293      	cmp	r3, r2
    853c:	d89e      	bhi.n	847c <CompactSector+0x90>

            } while(currLength > 0);
        }
    }
    // if some uncommitted data avaialble, committ it
    if ( currentCompactLength)
    853e:	4b2f      	ldr	r3, [pc, #188]	; (85fc <CompactSector+0x210>)
    8540:	881a      	ldrh	r2, [r3, #0]
    8542:	2a00      	cmp	r2, #0
    8544:	d006      	beq.n	8554 <CompactSector+0x168>
    {
        if ( !WriteAndCheck(s_sectorHead, compactBlock, currentCompactLength) )
    8546:	4b3d      	ldr	r3, [pc, #244]	; (863c <CompactSector+0x250>)
    8548:	8818      	ldrh	r0, [r3, #0]
    854a:	a914      	add	r1, sp, #80	; 0x50
    854c:	4b3e      	ldr	r3, [pc, #248]	; (8648 <CompactSector+0x25c>)
    854e:	4798      	blx	r3
    8550:	1e04      	subs	r4, r0, #0
    8552:	d040      	beq.n	85d6 <CompactSector+0x1ea>
        {
            return false;
        }
    }
    // Just update sector header as per the the length of the data committed, no alignments
    UpdateSectorHead(currentCompactLength, ITEM_NO_ALIGNMENT);
    8554:	4b29      	ldr	r3, [pc, #164]	; (85fc <CompactSector+0x210>)
    8556:	8818      	ldrh	r0, [r3, #0]
    8558:	2100      	movs	r1, #0
    855a:	4b3c      	ldr	r3, [pc, #240]	; (864c <CompactSector+0x260>)
    855c:	4798      	blx	r3

    s_nextPageAddressAfterCompact = s_sectorHead;
    855e:	4b37      	ldr	r3, [pc, #220]	; (863c <CompactSector+0x250>)
    8560:	881a      	ldrh	r2, [r3, #0]
    8562:	4b3b      	ldr	r3, [pc, #236]	; (8650 <CompactSector+0x264>)
    8564:	801a      	strh	r2, [r3, #0]
    uint32_t nextSequenceNumber = sectorHeader.sequenceNumber - 1uL;
    8566:	9809      	ldr	r0, [sp, #36]	; 0x24
    8568:	3801      	subs	r0, #1
    //SYS_PostEvent(BC_EVENT_UPGRADE_STRUCT_CHANGED_ITEMS, 0U);

    // update nextPageAddressAfterCompact in the sector header
    // All items moved, so now we just need to Write the Sector Header with 
    // nextPageAddressAfterCompact at the end of compact sector operation
    if ( !WriteSectorHeader(nextSequenceNumber))
    856a:	4b3a      	ldr	r3, [pc, #232]	; (8654 <CompactSector+0x268>)
    856c:	4798      	blx	r3
    856e:	1e04      	subs	r4, r0, #0
    8570:	d031      	beq.n	85d6 <CompactSector+0x1ea>
    {
        return false;
    }
    // Done with compact sector opration, Set the Sector Head to next page address for normal item update 
    UpdateSectorHead(0, ITEM_64BYTE_ALIGNMENT);
    8572:	2102      	movs	r1, #2
    8574:	2000      	movs	r0, #0
    8576:	4b35      	ldr	r3, [pc, #212]	; (864c <CompactSector+0x260>)
    8578:	4798      	blx	r3

    // schedule an erase of the source sector,Restart the timer if it is already running.
    s_sectorToErase = sourceSector;
    857a:	4b37      	ldr	r3, [pc, #220]	; (8658 <CompactSector+0x26c>)
    857c:	466a      	mov	r2, sp
    857e:	7b12      	ldrb	r2, [r2, #12]
    8580:	701a      	strb	r2, [r3, #0]
    SYS_TimerStop(&eraseSectorTimer);
    8582:	4d36      	ldr	r5, [pc, #216]	; (865c <CompactSector+0x270>)
    8584:	0028      	movs	r0, r5
    8586:	4b19      	ldr	r3, [pc, #100]	; (85ec <CompactSector+0x200>)
    8588:	4798      	blx	r3
    SYS_TimerStart(&eraseSectorTimer);
    858a:	0028      	movs	r0, r5
    858c:	4b34      	ldr	r3, [pc, #208]	; (8660 <CompactSector+0x274>)
    858e:	4798      	blx	r3

    return true;
    8590:	e021      	b.n	85d6 <CompactSector+0x1ea>
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    8592:	b2ad      	uxth	r5, r5
              if (!GatherData(sourceSector, lastBlockPointer, inDataOffset, (bytesToGather - dataBlockOffset) , (dataBlock + dataBlockOffset)))
    8594:	1aef      	subs	r7, r5, r3
    8596:	b2ba      	uxth	r2, r7
    8598:	4693      	mov	fp, r2
    859a:	4443      	add	r3, r8
    859c:	9300      	str	r3, [sp, #0]
    859e:	0013      	movs	r3, r2
    85a0:	0032      	movs	r2, r6
    85a2:	9904      	ldr	r1, [sp, #16]
    85a4:	9803      	ldr	r0, [sp, #12]
    85a6:	4f26      	ldr	r7, [pc, #152]	; (8640 <CompactSector+0x254>)
    85a8:	47b8      	blx	r7
    85aa:	2800      	cmp	r0, #0
    85ac:	d012      	beq.n	85d4 <CompactSector+0x1e8>
              if (!SmartCompacting(compactBlock, bytesToGather))
    85ae:	0029      	movs	r1, r5
    85b0:	a814      	add	r0, sp, #80	; 0x50
    85b2:	4b24      	ldr	r3, [pc, #144]	; (8644 <CompactSector+0x258>)
    85b4:	4798      	blx	r3
    85b6:	2800      	cmp	r0, #0
    85b8:	d00c      	beq.n	85d4 <CompactSector+0x1e8>
              currLength -= bytesToGather;
    85ba:	1b64      	subs	r4, r4, r5
    85bc:	b2a4      	uxth	r4, r4
              inDataOffset += (bytesToGather - dataBlockOffset);
    85be:	445e      	add	r6, fp
    85c0:	b2b6      	uxth	r6, r6
              dataBlockOffset = 0;
    85c2:	2300      	movs	r3, #0
            } while(currLength > 0);
    85c4:	2c00      	cmp	r4, #0
    85c6:	d0b1      	beq.n	852c <CompactSector+0x140>
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    85c8:	1c25      	adds	r5, r4, #0
    85ca:	454c      	cmp	r4, r9
    85cc:	d9e1      	bls.n	8592 <CompactSector+0x1a6>
    85ce:	466a      	mov	r2, sp
    85d0:	8ad5      	ldrh	r5, [r2, #22]
    85d2:	e7de      	b.n	8592 <CompactSector+0x1a6>
                return false;
    85d4:	2400      	movs	r4, #0
}
    85d6:	0020      	movs	r0, r4
    85d8:	b055      	add	sp, #340	; 0x154
    85da:	bc3c      	pop	{r2, r3, r4, r5}
    85dc:	4690      	mov	r8, r2
    85de:	4699      	mov	r9, r3
    85e0:	46a2      	mov	sl, r4
    85e2:	46ab      	mov	fp, r5
    85e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    85e6:	46c0      	nop			; (mov r8, r8)
    85e8:	20000324 	.word	0x20000324
    85ec:	0000ba59 	.word	0x0000ba59
    85f0:	20000450 	.word	0x20000450
    85f4:	20000452 	.word	0x20000452
    85f8:	2000030c 	.word	0x2000030c
    85fc:	20000338 	.word	0x20000338
    8600:	20000478 	.word	0x20000478
    8604:	00007d4d 	.word	0x00007d4d
    8608:	00008285 	.word	0x00008285
    860c:	00016ec8 	.word	0x00016ec8
    8610:	00017018 	.word	0x00017018
    8614:	000003d5 	.word	0x000003d5
    8618:	00016f28 	.word	0x00016f28
    861c:	00014d1d 	.word	0x00014d1d
    8620:	20000470 	.word	0x20000470
    8624:	2000033c 	.word	0x2000033c
    8628:	20000454 	.word	0x20000454
    862c:	000080ed 	.word	0x000080ed
    8630:	0000ffff 	.word	0x0000ffff
    8634:	00007ff5 	.word	0x00007ff5
    8638:	00014df1 	.word	0x00014df1
    863c:	2000047a 	.word	0x2000047a
    8640:	00008035 	.word	0x00008035
    8644:	00008345 	.word	0x00008345
    8648:	000082b9 	.word	0x000082b9
    864c:	00007fb9 	.word	0x00007fb9
    8650:	20000472 	.word	0x20000472
    8654:	000082ed 	.word	0x000082ed
    8658:	2000001a 	.word	0x2000001a
    865c:	2000043c 	.word	0x2000043c
    8660:	0000bac5 	.word	0x0000bac5

00008664 <compactSectorTimerFired>:
{
    8664:	b510      	push	{r4, lr}
    if (!PowerSupplyTooLow()) {
    8666:	4b07      	ldr	r3, [pc, #28]	; (8684 <compactSectorTimerFired+0x20>)
    8668:	4798      	blx	r3
    866a:	2800      	cmp	r0, #0
    866c:	d000      	beq.n	8670 <compactSectorTimerFired+0xc>
}
    866e:	bd10      	pop	{r4, pc}
      status = CompactSector();
    8670:	4b05      	ldr	r3, [pc, #20]	; (8688 <compactSectorTimerFired+0x24>)
    8672:	4798      	blx	r3
      assert(false);
    8674:	4b05      	ldr	r3, [pc, #20]	; (868c <compactSectorTimerFired+0x28>)
    8676:	4a06      	ldr	r2, [pc, #24]	; (8690 <compactSectorTimerFired+0x2c>)
    8678:	212c      	movs	r1, #44	; 0x2c
    867a:	31ff      	adds	r1, #255	; 0xff
    867c:	4805      	ldr	r0, [pc, #20]	; (8694 <compactSectorTimerFired+0x30>)
    867e:	4c06      	ldr	r4, [pc, #24]	; (8698 <compactSectorTimerFired+0x34>)
    8680:	47a0      	blx	r4
    8682:	46c0      	nop			; (mov r8, r8)
    8684:	00007f9d 	.word	0x00007f9d
    8688:	000083ed 	.word	0x000083ed
    868c:	00016ec8 	.word	0x00016ec8
    8690:	00016fe0 	.word	0x00016fe0
    8694:	00016f28 	.word	0x00016f28
    8698:	00014d1d 	.word	0x00014d1d

0000869c <CompactSectorIfNeeded>:

static void CompactSectorIfNeeded(uint16_t immediateThreshold)
{
    869c:	b510      	push	{r4, lr}
    uint16_t freeSpace = SECTOR_SIZE - s_sectorHead;
    869e:	4b12      	ldr	r3, [pc, #72]	; (86e8 <CompactSectorIfNeeded+0x4c>)
    86a0:	881a      	ldrh	r2, [r3, #0]
    86a2:	2380      	movs	r3, #128	; 0x80
    86a4:	019b      	lsls	r3, r3, #6
    86a6:	1a9b      	subs	r3, r3, r2
    86a8:	b29b      	uxth	r3, r3

    if ( freeSpace < immediateThreshold )
    86aa:	4283      	cmp	r3, r0
    86ac:	d303      	bcc.n	86b6 <CompactSectorIfNeeded+0x1a>
        {
            assert(false);
        }
        return;
    }
    if ( freeSpace < PREEMPTIVE_COMPACT_SECTOR_THRESHOLD )
    86ae:	4a0f      	ldr	r2, [pc, #60]	; (86ec <CompactSectorIfNeeded+0x50>)
    86b0:	4293      	cmp	r3, r2
    86b2:	d90a      	bls.n	86ca <CompactSectorIfNeeded+0x2e>
        compactSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
        //TODO: check timer to be started or not
        //SYS_StartTimer(&compactSectorTimer);
        }
    }
}
    86b4:	bd10      	pop	{r4, pc}
        if ( !CompactSector() )
    86b6:	4b0e      	ldr	r3, [pc, #56]	; (86f0 <CompactSectorIfNeeded+0x54>)
    86b8:	4798      	blx	r3
    86ba:	2800      	cmp	r0, #0
    86bc:	d1fa      	bne.n	86b4 <CompactSectorIfNeeded+0x18>
            assert(false);
    86be:	4b0d      	ldr	r3, [pc, #52]	; (86f4 <CompactSectorIfNeeded+0x58>)
    86c0:	4a0d      	ldr	r2, [pc, #52]	; (86f8 <CompactSectorIfNeeded+0x5c>)
    86c2:	490e      	ldr	r1, [pc, #56]	; (86fc <CompactSectorIfNeeded+0x60>)
    86c4:	480e      	ldr	r0, [pc, #56]	; (8700 <CompactSectorIfNeeded+0x64>)
    86c6:	4c0f      	ldr	r4, [pc, #60]	; (8704 <CompactSectorIfNeeded+0x68>)
    86c8:	47a0      	blx	r4
        if (!SYS_TimerStarted(&compactSectorTimer))
    86ca:	480f      	ldr	r0, [pc, #60]	; (8708 <CompactSectorIfNeeded+0x6c>)
    86cc:	4b0f      	ldr	r3, [pc, #60]	; (870c <CompactSectorIfNeeded+0x70>)
    86ce:	4798      	blx	r3
    86d0:	2800      	cmp	r0, #0
    86d2:	d1ef      	bne.n	86b4 <CompactSectorIfNeeded+0x18>
        compactSectorTimer.handler = compactSectorTimerFired;
    86d4:	4b0c      	ldr	r3, [pc, #48]	; (8708 <CompactSectorIfNeeded+0x6c>)
    86d6:	4a0e      	ldr	r2, [pc, #56]	; (8710 <CompactSectorIfNeeded+0x74>)
    86d8:	611a      	str	r2, [r3, #16]
        compactSectorTimer.timeout = COMPACT_SECTOR_DELAY_MS;
    86da:	4a0e      	ldr	r2, [pc, #56]	; (8714 <CompactSectorIfNeeded+0x78>)
    86dc:	605a      	str	r2, [r3, #4]
        compactSectorTimer.interval = COMPACT_SECTOR_DELAY_MS;
    86de:	609a      	str	r2, [r3, #8]
        compactSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
    86e0:	2200      	movs	r2, #0
    86e2:	731a      	strb	r2, [r3, #12]
    86e4:	e7e6      	b.n	86b4 <CompactSectorIfNeeded+0x18>
    86e6:	46c0      	nop			; (mov r8, r8)
    86e8:	2000047a 	.word	0x2000047a
    86ec:	0000080f 	.word	0x0000080f
    86f0:	000083ed 	.word	0x000083ed
    86f4:	00016ec8 	.word	0x00016ec8
    86f8:	00017028 	.word	0x00017028
    86fc:	0000044e 	.word	0x0000044e
    8700:	00016f28 	.word	0x00016f28
    8704:	00014d1d 	.word	0x00014d1d
    8708:	20000324 	.word	0x20000324
    870c:	0000ba99 	.word	0x0000ba99
    8710:	00008665 	.word	0x00008665
    8714:	00002710 	.word	0x00002710

00008718 <CompactItem>:

static S_Nv_ReturnValue_t CompactItem(void)
{
    8718:	b5f0      	push	{r4, r5, r6, r7, lr}
    871a:	46de      	mov	lr, fp
    871c:	4657      	mov	r7, sl
    871e:	464e      	mov	r6, r9
    8720:	4645      	mov	r5, r8
    8722:	b5e0      	push	{r5, r6, r7, lr}
    8724:	b08b      	sub	sp, #44	; 0x2c
#if defined(ENABLE_NV_COMPACT_LOGGING)
    PRINTA(("CompactItem(id=%X)", s_compactItemId));
#endif

    if ( PowerSupplyTooLow() )
    8726:	4b77      	ldr	r3, [pc, #476]	; (8904 <CompactItem+0x1ec>)
    8728:	4798      	blx	r3
    {
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    872a:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    872c:	2800      	cmp	r0, #0
    872e:	d007      	beq.n	8740 <CompactItem+0x28>
    s_compactItemLength = 0u;

    cache->lastBlock = lastBlock;

    return S_Nv_ReturnValue_Ok;
}
    8730:	0018      	movs	r0, r3
    8732:	b00b      	add	sp, #44	; 0x2c
    8734:	bc3c      	pop	{r2, r3, r4, r5}
    8736:	4690      	mov	r8, r2
    8738:	4699      	mov	r9, r3
    873a:	46a2      	mov	sl, r4
    873c:	46ab      	mov	fp, r5
    873e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ( (s_compactItemLength == 0u) && ( s_compactItemId == 0u ) )
    8740:	4b71      	ldr	r3, [pc, #452]	; (8908 <CompactItem+0x1f0>)
    8742:	8818      	ldrh	r0, [r3, #0]
    8744:	2800      	cmp	r0, #0
    8746:	d146      	bne.n	87d6 <CompactItem+0xbe>
    8748:	4b70      	ldr	r3, [pc, #448]	; (890c <CompactItem+0x1f4>)
    874a:	881b      	ldrh	r3, [r3, #0]
    874c:	2b00      	cmp	r3, #0
    874e:	d100      	bne.n	8752 <CompactItem+0x3a>
    8750:	e0d0      	b.n	88f4 <CompactItem+0x1dc>
    Item_t *cache = FindItemCache(s_compactItemId);
    8752:	4b6e      	ldr	r3, [pc, #440]	; (890c <CompactItem+0x1f4>)
    8754:	8818      	ldrh	r0, [r3, #0]
    8756:	4b6e      	ldr	r3, [pc, #440]	; (8910 <CompactItem+0x1f8>)
    8758:	4798      	blx	r3
    875a:	4683      	mov	fp, r0
    if ( cache == NULL )
    875c:	2800      	cmp	r0, #0
    875e:	d100      	bne.n	8762 <CompactItem+0x4a>
    8760:	e0ca      	b.n	88f8 <CompactItem+0x1e0>
    uint16_t blockPointer = cache->lastBlock;
    8762:	7882      	ldrb	r2, [r0, #2]
    8764:	78c3      	ldrb	r3, [r0, #3]
    8766:	021b      	lsls	r3, r3, #8
    8768:	4313      	orrs	r3, r2
    876a:	0019      	movs	r1, r3
    876c:	9303      	str	r3, [sp, #12]
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    876e:	4b69      	ldr	r3, [pc, #420]	; (8914 <CompactItem+0x1fc>)
    8770:	7818      	ldrb	r0, [r3, #0]
    8772:	2310      	movs	r3, #16
    8774:	aa06      	add	r2, sp, #24
    8776:	4c68      	ldr	r4, [pc, #416]	; (8918 <CompactItem+0x200>)
    8778:	47a0      	blx	r4
    if (s_compactItemLength == 0)
    877a:	4b63      	ldr	r3, [pc, #396]	; (8908 <CompactItem+0x1f0>)
    877c:	881a      	ldrh	r2, [r3, #0]
    877e:	2a00      	cmp	r2, #0
    8780:	d02e      	beq.n	87e0 <CompactItem+0xc8>
    uint16_t lastBlock = s_sectorHead;
    8782:	4b66      	ldr	r3, [pc, #408]	; (891c <CompactItem+0x204>)
    8784:	881b      	ldrh	r3, [r3, #0]
    8786:	9305      	str	r3, [sp, #20]
    uint16_t bytesToGather = blockHeader.itemLength;
    8788:	ab06      	add	r3, sp, #24
    878a:	891b      	ldrh	r3, [r3, #8]
        blockHeader.itemLength = s_compactItemLength;
    878c:	a906      	add	r1, sp, #24
    878e:	810a      	strh	r2, [r1, #8]
    8790:	1c19      	adds	r1, r3, #0
    8792:	4293      	cmp	r3, r2
    8794:	d900      	bls.n	8798 <CompactItem+0x80>
    8796:	1c11      	adds	r1, r2, #0
    8798:	b28b      	uxth	r3, r1
    blockHeader.blockOffset = 0u;
    879a:	aa06      	add	r2, sp, #24
    879c:	2100      	movs	r1, #0
    879e:	8091      	strh	r1, [r2, #4]
    blockHeader.blockLength = blockHeader.itemLength;
    87a0:	8910      	ldrh	r0, [r2, #8]
    87a2:	80d0      	strh	r0, [r2, #6]
    blockHeader.previousBlock = 0x0000u;
    87a4:	8151      	strh	r1, [r2, #10]
    blockHeader.writeCount = 0u;
    87a6:	8191      	strh	r1, [r2, #12]
    uint16_t currLength = BLOCK_HEADER_SIZE + bytesToGather;
    87a8:	001c      	movs	r4, r3
    87aa:	3410      	adds	r4, #16
    87ac:	b2a4      	uxth	r4, r4
    memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    87ae:	495c      	ldr	r1, [pc, #368]	; (8920 <CompactItem+0x208>)
    87b0:	ca61      	ldmia	r2!, {r0, r5, r6}
    87b2:	c161      	stmia	r1!, {r0, r5, r6}
    87b4:	6812      	ldr	r2, [r2, #0]
    87b6:	600a      	str	r2, [r1, #0]
    if (currLength <= ROW_SIZE)
    87b8:	2280      	movs	r2, #128	; 0x80
    87ba:	0052      	lsls	r2, r2, #1
    87bc:	4294      	cmp	r4, r2
    87be:	d939      	bls.n	8834 <CompactItem+0x11c>
    87c0:	2600      	movs	r6, #0
    87c2:	2310      	movs	r3, #16
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    87c4:	2280      	movs	r2, #128	; 0x80
    87c6:	0052      	lsls	r2, r2, #1
    87c8:	4691      	mov	r9, r2
    87ca:	4669      	mov	r1, sp
    87cc:	824a      	strh	r2, [r1, #18]
            if (!GatherData(s_sector, blockPointer, inDataOffset, bytesToGatherAndCommit - dataBlockOffset , (dataBlock + dataBlockOffset)))
    87ce:	4a51      	ldr	r2, [pc, #324]	; (8914 <CompactItem+0x1fc>)
    87d0:	4692      	mov	sl, r2
    87d2:	001a      	movs	r2, r3
    87d4:	e088      	b.n	88e8 <CompactItem+0x1d0>
        CompactSectorIfNeeded(s_compactItemLength + BLOCK_HEADER_SIZE);
    87d6:	3010      	adds	r0, #16
    87d8:	b280      	uxth	r0, r0
    87da:	4b52      	ldr	r3, [pc, #328]	; (8924 <CompactItem+0x20c>)
    87dc:	4798      	blx	r3
    87de:	e7b8      	b.n	8752 <CompactItem+0x3a>
        CompactSectorIfNeeded(blockHeader.itemLength + BLOCK_HEADER_SIZE);
    87e0:	ab06      	add	r3, sp, #24
    87e2:	8918      	ldrh	r0, [r3, #8]
    87e4:	3010      	adds	r0, #16
    87e6:	b280      	uxth	r0, r0
    87e8:	4b4e      	ldr	r3, [pc, #312]	; (8924 <CompactItem+0x20c>)
    87ea:	4798      	blx	r3
        cache = FindItemCache(s_compactItemId);
    87ec:	4b47      	ldr	r3, [pc, #284]	; (890c <CompactItem+0x1f4>)
    87ee:	8818      	ldrh	r0, [r3, #0]
    87f0:	4b47      	ldr	r3, [pc, #284]	; (8910 <CompactItem+0x1f8>)
    87f2:	4798      	blx	r3
    87f4:	4683      	mov	fp, r0
        assert(cache != NULL);
    87f6:	2800      	cmp	r0, #0
    87f8:	d015      	beq.n	8826 <CompactItem+0x10e>
        blockPointer = cache->lastBlock;
    87fa:	7882      	ldrb	r2, [r0, #2]
    87fc:	78c3      	ldrb	r3, [r0, #3]
    87fe:	021b      	lsls	r3, r3, #8
    8800:	4313      	orrs	r3, r2
    8802:	0019      	movs	r1, r3
    8804:	9303      	str	r3, [sp, #12]
        D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8806:	ac06      	add	r4, sp, #24
    8808:	4b42      	ldr	r3, [pc, #264]	; (8914 <CompactItem+0x1fc>)
    880a:	7818      	ldrb	r0, [r3, #0]
    880c:	2310      	movs	r3, #16
    880e:	0022      	movs	r2, r4
    8810:	4d41      	ldr	r5, [pc, #260]	; (8918 <CompactItem+0x200>)
    8812:	47a8      	blx	r5
    uint16_t lastBlock = s_sectorHead;
    8814:	4b41      	ldr	r3, [pc, #260]	; (891c <CompactItem+0x204>)
    8816:	881b      	ldrh	r3, [r3, #0]
    8818:	9305      	str	r3, [sp, #20]
    uint16_t bytesToGather = blockHeader.itemLength;
    881a:	8923      	ldrh	r3, [r4, #8]
    if ( s_compactItemLength != 0u )
    881c:	4a3a      	ldr	r2, [pc, #232]	; (8908 <CompactItem+0x1f0>)
    881e:	8812      	ldrh	r2, [r2, #0]
    8820:	2a00      	cmp	r2, #0
    8822:	d0ba      	beq.n	879a <CompactItem+0x82>
    8824:	e7b2      	b.n	878c <CompactItem+0x74>
        assert(cache != NULL);
    8826:	4b40      	ldr	r3, [pc, #256]	; (8928 <CompactItem+0x210>)
    8828:	4a40      	ldr	r2, [pc, #256]	; (892c <CompactItem+0x214>)
    882a:	2191      	movs	r1, #145	; 0x91
    882c:	00c9      	lsls	r1, r1, #3
    882e:	4840      	ldr	r0, [pc, #256]	; (8930 <CompactItem+0x218>)
    8830:	4c40      	ldr	r4, [pc, #256]	; (8934 <CompactItem+0x21c>)
    8832:	47a0      	blx	r4
        if (!GatherData(s_sector, blockPointer, 0u, bytesToGather, (dataBlock + BLOCK_HEADER_SIZE )))
    8834:	4a37      	ldr	r2, [pc, #220]	; (8914 <CompactItem+0x1fc>)
    8836:	7810      	ldrb	r0, [r2, #0]
    8838:	4a39      	ldr	r2, [pc, #228]	; (8920 <CompactItem+0x208>)
    883a:	3210      	adds	r2, #16
    883c:	9200      	str	r2, [sp, #0]
    883e:	2200      	movs	r2, #0
    8840:	9903      	ldr	r1, [sp, #12]
    8842:	4c3d      	ldr	r4, [pc, #244]	; (8938 <CompactItem+0x220>)
    8844:	47a0      	blx	r4
            return S_Nv_ReturnValue_Failure;
    8846:	2301      	movs	r3, #1
        if (!GatherData(s_sector, blockPointer, 0u, bytesToGather, (dataBlock + BLOCK_HEADER_SIZE )))
    8848:	2800      	cmp	r0, #0
    884a:	d100      	bne.n	884e <CompactItem+0x136>
    884c:	e770      	b.n	8730 <CompactItem+0x18>
        memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    884e:	4934      	ldr	r1, [pc, #208]	; (8920 <CompactItem+0x208>)
    8850:	ab06      	add	r3, sp, #24
    8852:	000a      	movs	r2, r1
    8854:	0018      	movs	r0, r3
    8856:	c870      	ldmia	r0!, {r4, r5, r6}
    8858:	c270      	stmia	r2!, {r4, r5, r6}
    885a:	6800      	ldr	r0, [r0, #0]
    885c:	6010      	str	r0, [r2, #0]
        if ( !WriteAndCheck(s_sectorHead, dataBlock, blockHeader.blockLength + BLOCK_HEADER_SIZE) )
    885e:	88da      	ldrh	r2, [r3, #6]
    8860:	3210      	adds	r2, #16
    8862:	b292      	uxth	r2, r2
    8864:	4b2d      	ldr	r3, [pc, #180]	; (891c <CompactItem+0x204>)
    8866:	8818      	ldrh	r0, [r3, #0]
    8868:	4b34      	ldr	r3, [pc, #208]	; (893c <CompactItem+0x224>)
    886a:	4798      	blx	r3
            return false;
    886c:	2300      	movs	r3, #0
        if ( !WriteAndCheck(s_sectorHead, dataBlock, blockHeader.blockLength + BLOCK_HEADER_SIZE) )
    886e:	2800      	cmp	r0, #0
    8870:	d100      	bne.n	8874 <CompactItem+0x15c>
    8872:	e75d      	b.n	8730 <CompactItem+0x18>
        UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_64BYTE_ALIGNMENT);
    8874:	ab06      	add	r3, sp, #24
    8876:	88d8      	ldrh	r0, [r3, #6]
    8878:	3010      	adds	r0, #16
    887a:	b280      	uxth	r0, r0
    887c:	2102      	movs	r1, #2
    887e:	4b30      	ldr	r3, [pc, #192]	; (8940 <CompactItem+0x228>)
    8880:	4798      	blx	r3
    s_compactItemId = 0u;
    8882:	2300      	movs	r3, #0
    8884:	4a21      	ldr	r2, [pc, #132]	; (890c <CompactItem+0x1f4>)
    8886:	8013      	strh	r3, [r2, #0]
    s_compactItemLength = 0u;
    8888:	4a1f      	ldr	r2, [pc, #124]	; (8908 <CompactItem+0x1f0>)
    888a:	8013      	strh	r3, [r2, #0]
    cache->lastBlock = lastBlock;
    888c:	465b      	mov	r3, fp
    888e:	9905      	ldr	r1, [sp, #20]
    8890:	7099      	strb	r1, [r3, #2]
    8892:	0a0b      	lsrs	r3, r1, #8
    8894:	465a      	mov	r2, fp
    8896:	70d3      	strb	r3, [r2, #3]
    return S_Nv_ReturnValue_Ok;
    8898:	2300      	movs	r3, #0
    889a:	e749      	b.n	8730 <CompactItem+0x18>
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    889c:	b2ad      	uxth	r5, r5
            if (!GatherData(s_sector, blockPointer, inDataOffset, bytesToGatherAndCommit - dataBlockOffset , (dataBlock + dataBlockOffset)))
    889e:	1aaf      	subs	r7, r5, r2
    88a0:	b2bb      	uxth	r3, r7
    88a2:	0019      	movs	r1, r3
    88a4:	4653      	mov	r3, sl
    88a6:	7818      	ldrb	r0, [r3, #0]
    88a8:	4b1d      	ldr	r3, [pc, #116]	; (8920 <CompactItem+0x208>)
    88aa:	189b      	adds	r3, r3, r2
    88ac:	9300      	str	r3, [sp, #0]
    88ae:	9102      	str	r1, [sp, #8]
    88b0:	000b      	movs	r3, r1
    88b2:	0032      	movs	r2, r6
    88b4:	9903      	ldr	r1, [sp, #12]
    88b6:	4f20      	ldr	r7, [pc, #128]	; (8938 <CompactItem+0x220>)
    88b8:	47b8      	blx	r7
    88ba:	2800      	cmp	r0, #0
    88bc:	d01e      	beq.n	88fc <CompactItem+0x1e4>
            if ( !WriteAndCheck(s_sectorHead, dataBlock, bytesToGatherAndCommit) )
    88be:	4b17      	ldr	r3, [pc, #92]	; (891c <CompactItem+0x204>)
    88c0:	8818      	ldrh	r0, [r3, #0]
    88c2:	002a      	movs	r2, r5
    88c4:	4916      	ldr	r1, [pc, #88]	; (8920 <CompactItem+0x208>)
    88c6:	4b1d      	ldr	r3, [pc, #116]	; (893c <CompactItem+0x224>)
    88c8:	4798      	blx	r3
    88ca:	2800      	cmp	r0, #0
    88cc:	d018      	beq.n	8900 <CompactItem+0x1e8>
            UpdateSectorHead(bytesToGatherAndCommit, ITEM_64BYTE_ALIGNMENT);
    88ce:	2102      	movs	r1, #2
    88d0:	0028      	movs	r0, r5
    88d2:	4b1b      	ldr	r3, [pc, #108]	; (8940 <CompactItem+0x228>)
    88d4:	4798      	blx	r3
            currLength -= bytesToGatherAndCommit;
    88d6:	1b64      	subs	r4, r4, r5
    88d8:	b2a4      	uxth	r4, r4
            inDataOffset += (bytesToGatherAndCommit - dataBlockOffset);
    88da:	9902      	ldr	r1, [sp, #8]
    88dc:	468c      	mov	ip, r1
    88de:	4466      	add	r6, ip
    88e0:	b2b6      	uxth	r6, r6
            dataBlockOffset = 0;
    88e2:	2200      	movs	r2, #0
        } while(currLength > 0);
    88e4:	2c00      	cmp	r4, #0
    88e6:	d0cc      	beq.n	8882 <CompactItem+0x16a>
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    88e8:	1c25      	adds	r5, r4, #0
    88ea:	454c      	cmp	r4, r9
    88ec:	d9d6      	bls.n	889c <CompactItem+0x184>
    88ee:	466b      	mov	r3, sp
    88f0:	8a5d      	ldrh	r5, [r3, #18]
    88f2:	e7d3      	b.n	889c <CompactItem+0x184>
        return S_Nv_ReturnValue_Ok;
    88f4:	2300      	movs	r3, #0
    88f6:	e71b      	b.n	8730 <CompactItem+0x18>
        return S_Nv_ReturnValue_Ok;
    88f8:	2300      	movs	r3, #0
    88fa:	e719      	b.n	8730 <CompactItem+0x18>
                return S_Nv_ReturnValue_Failure;
    88fc:	2301      	movs	r3, #1
    88fe:	e717      	b.n	8730 <CompactItem+0x18>
                return false;
    8900:	2300      	movs	r3, #0
    8902:	e715      	b.n	8730 <CompactItem+0x18>
    8904:	00007f9d 	.word	0x00007f9d
    8908:	20000452 	.word	0x20000452
    890c:	20000450 	.word	0x20000450
    8910:	00008195 	.word	0x00008195
    8914:	20000478 	.word	0x20000478
    8918:	00007d4d 	.word	0x00007d4d
    891c:	2000047a 	.word	0x2000047a
    8920:	2000033c 	.word	0x2000033c
    8924:	0000869d 	.word	0x0000869d
    8928:	00016eb8 	.word	0x00016eb8
    892c:	00017040 	.word	0x00017040
    8930:	00016f28 	.word	0x00016f28
    8934:	00014d1d 	.word	0x00014d1d
    8938:	00008035 	.word	0x00008035
    893c:	000082b9 	.word	0x000082b9
    8940:	00007fb9 	.word	0x00007fb9

00008944 <compactItemTimerFired>:
{
    8944:	b510      	push	{r4, lr}
    (void)CompactItem();
    8946:	4b01      	ldr	r3, [pc, #4]	; (894c <compactItemTimerFired+0x8>)
    8948:	4798      	blx	r3
}
    894a:	bd10      	pop	{r4, pc}
    894c:	00008719 	.word	0x00008719

00008950 <WriteDataBlockAndHeader>:
{
    8950:	b5f0      	push	{r4, r5, r6, r7, lr}
    8952:	46de      	mov	lr, fp
    8954:	4657      	mov	r7, sl
    8956:	464e      	mov	r6, r9
    8958:	4645      	mov	r5, r8
    895a:	b5e0      	push	{r5, r6, r7, lr}
    895c:	b083      	sub	sp, #12
    895e:	0004      	movs	r4, r0
    8960:	468a      	mov	sl, r1
    memset(dataBlock, 0xFF, sizeof(dataBlock));
    8962:	4d46      	ldr	r5, [pc, #280]	; (8a7c <WriteDataBlockAndHeader+0x12c>)
    8964:	2280      	movs	r2, #128	; 0x80
    8966:	0052      	lsls	r2, r2, #1
    8968:	21ff      	movs	r1, #255	; 0xff
    896a:	0028      	movs	r0, r5
    896c:	4b44      	ldr	r3, [pc, #272]	; (8a80 <WriteDataBlockAndHeader+0x130>)
    896e:	4798      	blx	r3
    pBlockHeader->dataCrc = ComputeCrc(pData, pBlockHeader->blockLength, 0xFFFF);
    8970:	4e44      	ldr	r6, [pc, #272]	; (8a84 <WriteDataBlockAndHeader+0x134>)
    8972:	79a3      	ldrb	r3, [r4, #6]
    8974:	79e1      	ldrb	r1, [r4, #7]
    8976:	0209      	lsls	r1, r1, #8
    8978:	4319      	orrs	r1, r3
    897a:	0032      	movs	r2, r6
    897c:	4650      	mov	r0, sl
    897e:	4f42      	ldr	r7, [pc, #264]	; (8a88 <WriteDataBlockAndHeader+0x138>)
    8980:	47b8      	blx	r7
    8982:	7020      	strb	r0, [r4, #0]
    8984:	0a00      	lsrs	r0, r0, #8
    8986:	7060      	strb	r0, [r4, #1]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    8988:	0032      	movs	r2, r6
    898a:	210e      	movs	r1, #14
    898c:	0020      	movs	r0, r4
    898e:	47b8      	blx	r7
    pBlockHeader->headerCrc = ComputeHeaderCrc(pBlockHeader);
    8990:	73a0      	strb	r0, [r4, #14]
    8992:	0a00      	lsrs	r0, r0, #8
    8994:	73e0      	strb	r0, [r4, #15]
    memcpy(dataBlock, pBlockHeader, BLOCK_HEADER_SIZE);
    8996:	2210      	movs	r2, #16
    8998:	0021      	movs	r1, r4
    899a:	0028      	movs	r0, r5
    899c:	4b3b      	ldr	r3, [pc, #236]	; (8a8c <WriteDataBlockAndHeader+0x13c>)
    899e:	4798      	blx	r3
    currentLength = pBlockHeader->blockLength + BLOCK_HEADER_SIZE;
    89a0:	79a3      	ldrb	r3, [r4, #6]
    89a2:	79e2      	ldrb	r2, [r4, #7]
    89a4:	0212      	lsls	r2, r2, #8
    89a6:	431a      	orrs	r2, r3
    89a8:	0015      	movs	r5, r2
    89aa:	3510      	adds	r5, #16
    89ac:	b2ad      	uxth	r5, r5
    if (pData != NULL )
    89ae:	4653      	mov	r3, sl
    89b0:	2b00      	cmp	r3, #0
    89b2:	d012      	beq.n	89da <WriteDataBlockAndHeader+0x8a>
        if(currentLength <= ROW_SIZE)
    89b4:	2380      	movs	r3, #128	; 0x80
    89b6:	005b      	lsls	r3, r3, #1
    89b8:	429d      	cmp	r5, r3
    89ba:	d909      	bls.n	89d0 <WriteDataBlockAndHeader+0x80>
    89bc:	2600      	movs	r6, #0
    89be:	2710      	movs	r7, #16
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    89c0:	2380      	movs	r3, #128	; 0x80
    89c2:	005b      	lsls	r3, r3, #1
    89c4:	469b      	mov	fp, r3
    89c6:	466a      	mov	r2, sp
    89c8:	80d3      	strh	r3, [r2, #6]
                memcpy(dataBlock + dataBlockOffset, pData + inDataOffset, bytesToCommit - dataBlockOffset);
    89ca:	4b2c      	ldr	r3, [pc, #176]	; (8a7c <WriteDataBlockAndHeader+0x12c>)
    89cc:	4699      	mov	r9, r3
    89ce:	e045      	b.n	8a5c <WriteDataBlockAndHeader+0x10c>
            memcpy(dataBlock + BLOCK_HEADER_SIZE , pData, pBlockHeader->blockLength);
    89d0:	4651      	mov	r1, sl
    89d2:	482a      	ldr	r0, [pc, #168]	; (8a7c <WriteDataBlockAndHeader+0x12c>)
    89d4:	3010      	adds	r0, #16
    89d6:	4b2d      	ldr	r3, [pc, #180]	; (8a8c <WriteDataBlockAndHeader+0x13c>)
    89d8:	4798      	blx	r3
    if ( !WriteAndCheck(s_sectorHead, dataBlock, MIN((BLOCK_HEADER_SIZE + pBlockHeader->blockLength), ROW_SIZE)) )
    89da:	79a3      	ldrb	r3, [r4, #6]
    89dc:	79e2      	ldrb	r2, [r4, #7]
    89de:	0212      	lsls	r2, r2, #8
    89e0:	431a      	orrs	r2, r3
    89e2:	3210      	adds	r2, #16
    89e4:	2380      	movs	r3, #128	; 0x80
    89e6:	005b      	lsls	r3, r3, #1
    89e8:	429a      	cmp	r2, r3
    89ea:	dd00      	ble.n	89ee <WriteDataBlockAndHeader+0x9e>
    89ec:	001a      	movs	r2, r3
    89ee:	b292      	uxth	r2, r2
    89f0:	4b27      	ldr	r3, [pc, #156]	; (8a90 <WriteDataBlockAndHeader+0x140>)
    89f2:	8818      	ldrh	r0, [r3, #0]
    89f4:	4921      	ldr	r1, [pc, #132]	; (8a7c <WriteDataBlockAndHeader+0x12c>)
    89f6:	4b27      	ldr	r3, [pc, #156]	; (8a94 <WriteDataBlockAndHeader+0x144>)
    89f8:	4798      	blx	r3
    89fa:	4680      	mov	r8, r0
    89fc:	2800      	cmp	r0, #0
    89fe:	d033      	beq.n	8a68 <WriteDataBlockAndHeader+0x118>
    UpdateSectorHead((pBlockHeader->blockLength + BLOCK_HEADER_SIZE), ITEM_64BYTE_ALIGNMENT );
    8a00:	79a3      	ldrb	r3, [r4, #6]
    8a02:	79e0      	ldrb	r0, [r4, #7]
    8a04:	0200      	lsls	r0, r0, #8
    8a06:	4318      	orrs	r0, r3
    8a08:	3010      	adds	r0, #16
    8a0a:	b280      	uxth	r0, r0
    8a0c:	2102      	movs	r1, #2
    8a0e:	4b22      	ldr	r3, [pc, #136]	; (8a98 <WriteDataBlockAndHeader+0x148>)
    8a10:	4798      	blx	r3
}
    8a12:	4640      	mov	r0, r8
    8a14:	b003      	add	sp, #12
    8a16:	bc3c      	pop	{r2, r3, r4, r5}
    8a18:	4690      	mov	r8, r2
    8a1a:	4699      	mov	r9, r3
    8a1c:	46a2      	mov	sl, r4
    8a1e:	46ab      	mov	fp, r5
    8a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    8a22:	b2a4      	uxth	r4, r4
                memcpy(dataBlock + dataBlockOffset, pData + inDataOffset, bytesToCommit - dataBlockOffset);
    8a24:	464b      	mov	r3, r9
    8a26:	19d8      	adds	r0, r3, r7
    8a28:	1be2      	subs	r2, r4, r7
    8a2a:	4653      	mov	r3, sl
    8a2c:	1999      	adds	r1, r3, r6
    8a2e:	4b17      	ldr	r3, [pc, #92]	; (8a8c <WriteDataBlockAndHeader+0x13c>)
    8a30:	4798      	blx	r3
                if ( !WriteAndCheck(s_sectorHead, dataBlock, bytesToCommit))
    8a32:	4b17      	ldr	r3, [pc, #92]	; (8a90 <WriteDataBlockAndHeader+0x140>)
    8a34:	8818      	ldrh	r0, [r3, #0]
    8a36:	0022      	movs	r2, r4
    8a38:	4649      	mov	r1, r9
    8a3a:	4b16      	ldr	r3, [pc, #88]	; (8a94 <WriteDataBlockAndHeader+0x144>)
    8a3c:	4798      	blx	r3
    8a3e:	4680      	mov	r8, r0
    8a40:	2800      	cmp	r0, #0
    8a42:	d0e6      	beq.n	8a12 <WriteDataBlockAndHeader+0xc2>
                UpdateSectorHead(bytesToCommit, ITEM_64BYTE_ALIGNMENT);
    8a44:	2102      	movs	r1, #2
    8a46:	0020      	movs	r0, r4
    8a48:	4b13      	ldr	r3, [pc, #76]	; (8a98 <WriteDataBlockAndHeader+0x148>)
    8a4a:	4798      	blx	r3
                currentLength -= bytesToCommit;
    8a4c:	1b2d      	subs	r5, r5, r4
    8a4e:	b2ad      	uxth	r5, r5
                inDataOffset += (bytesToCommit - dataBlockOffset);
    8a50:	1be4      	subs	r4, r4, r7
    8a52:	1936      	adds	r6, r6, r4
    8a54:	b2b6      	uxth	r6, r6
                dataBlockOffset = 0;
    8a56:	2700      	movs	r7, #0
            } while(currentLength > 0);
    8a58:	2d00      	cmp	r5, #0
    8a5a:	d0da      	beq.n	8a12 <WriteDataBlockAndHeader+0xc2>
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    8a5c:	1c2c      	adds	r4, r5, #0
    8a5e:	455d      	cmp	r5, fp
    8a60:	d9df      	bls.n	8a22 <WriteDataBlockAndHeader+0xd2>
    8a62:	466b      	mov	r3, sp
    8a64:	88dc      	ldrh	r4, [r3, #6]
    8a66:	e7dc      	b.n	8a22 <WriteDataBlockAndHeader+0xd2>
        UpdateSectorHead((pBlockHeader->blockLength + BLOCK_HEADER_SIZE), ITEM_64BYTE_ALIGNMENT);
    8a68:	79a3      	ldrb	r3, [r4, #6]
    8a6a:	79e0      	ldrb	r0, [r4, #7]
    8a6c:	0200      	lsls	r0, r0, #8
    8a6e:	4318      	orrs	r0, r3
    8a70:	3010      	adds	r0, #16
    8a72:	b280      	uxth	r0, r0
    8a74:	2102      	movs	r1, #2
    8a76:	4b08      	ldr	r3, [pc, #32]	; (8a98 <WriteDataBlockAndHeader+0x148>)
    8a78:	4798      	blx	r3
        return false;
    8a7a:	e7ca      	b.n	8a12 <WriteDataBlockAndHeader+0xc2>
    8a7c:	2000033c 	.word	0x2000033c
    8a80:	00014df1 	.word	0x00014df1
    8a84:	0000ffff 	.word	0x0000ffff
    8a88:	00007ff5 	.word	0x00007ff5
    8a8c:	00014ddf 	.word	0x00014ddf
    8a90:	2000047a 	.word	0x2000047a
    8a94:	000082b9 	.word	0x000082b9
    8a98:	00007fb9 	.word	0x00007fb9

00008a9c <S_Nv_Write_Impl>:
#if defined(S_XNV_LOGGING)
static S_Nv_ReturnValue_t S_Nv_Write_Original(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#else
S_Nv_ReturnValue_t S_Nv_Write_Impl(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#endif
{
    8a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a9e:	46ce      	mov	lr, r9
    8aa0:	4647      	mov	r7, r8
    8aa2:	b580      	push	{r7, lr}
    8aa4:	b087      	sub	sp, #28
    8aa6:	0004      	movs	r4, r0
    8aa8:	9101      	str	r1, [sp, #4]
    8aaa:	0015      	movs	r5, r2
    8aac:	001f      	movs	r7, r3
    assert((id != 0u) && (pData != NULL));
    8aae:	2800      	cmp	r0, #0
    8ab0:	d00c      	beq.n	8acc <S_Nv_Write_Impl+0x30>
    8ab2:	2b00      	cmp	r3, #0
    8ab4:	d00a      	beq.n	8acc <S_Nv_Write_Impl+0x30>

    if ( PowerSupplyTooLow() )
    8ab6:	4b35      	ldr	r3, [pc, #212]	; (8b8c <S_Nv_Write_Impl+0xf0>)
    8ab8:	4798      	blx	r3
    {
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    8aba:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    8abc:	2800      	cmp	r0, #0
    8abe:	d00b      	beq.n	8ad8 <S_Nv_Write_Impl+0x3c>
        //SYS_StartTimer(&compactItemTimer);
        }
    }

    return S_Nv_ReturnValue_Ok;
}
    8ac0:	0018      	movs	r0, r3
    8ac2:	b007      	add	sp, #28
    8ac4:	bc0c      	pop	{r2, r3}
    8ac6:	4690      	mov	r8, r2
    8ac8:	4699      	mov	r9, r3
    8aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((id != 0u) && (pData != NULL));
    8acc:	4b30      	ldr	r3, [pc, #192]	; (8b90 <S_Nv_Write_Impl+0xf4>)
    8ace:	4a31      	ldr	r2, [pc, #196]	; (8b94 <S_Nv_Write_Impl+0xf8>)
    8ad0:	4931      	ldr	r1, [pc, #196]	; (8b98 <S_Nv_Write_Impl+0xfc>)
    8ad2:	4832      	ldr	r0, [pc, #200]	; (8b9c <S_Nv_Write_Impl+0x100>)
    8ad4:	4c32      	ldr	r4, [pc, #200]	; (8ba0 <S_Nv_Write_Impl+0x104>)
    8ad6:	47a0      	blx	r4
    CompactSectorIfNeeded(BLOCK_HEADER_SIZE + dataLength);
    8ad8:	0028      	movs	r0, r5
    8ada:	3010      	adds	r0, #16
    8adc:	b280      	uxth	r0, r0
    8ade:	4b31      	ldr	r3, [pc, #196]	; (8ba4 <S_Nv_Write_Impl+0x108>)
    8ae0:	4798      	blx	r3
    Item_t *cache = FindItemCache(id);
    8ae2:	0020      	movs	r0, r4
    8ae4:	4b30      	ldr	r3, [pc, #192]	; (8ba8 <S_Nv_Write_Impl+0x10c>)
    8ae6:	4798      	blx	r3
    8ae8:	0006      	movs	r6, r0
        return S_Nv_ReturnValue_DoesNotExist;
    8aea:	2303      	movs	r3, #3
    if ( cache == NULL )
    8aec:	2800      	cmp	r0, #0
    8aee:	d0e7      	beq.n	8ac0 <S_Nv_Write_Impl+0x24>
    uint16_t blockPointer = cache->lastBlock;
    8af0:	7883      	ldrb	r3, [r0, #2]
    8af2:	78c4      	ldrb	r4, [r0, #3]
    8af4:	0224      	lsls	r4, r4, #8
    8af6:	431c      	orrs	r4, r3
    8af8:	46a0      	mov	r8, r4
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8afa:	4b2c      	ldr	r3, [pc, #176]	; (8bac <S_Nv_Write_Impl+0x110>)
    8afc:	7818      	ldrb	r0, [r3, #0]
    8afe:	2310      	movs	r3, #16
    8b00:	aa02      	add	r2, sp, #8
    8b02:	0021      	movs	r1, r4
    8b04:	4c2a      	ldr	r4, [pc, #168]	; (8bb0 <S_Nv_Write_Impl+0x114>)
    8b06:	47a0      	blx	r4
    if ( ((uint32_t) offset + (uint32_t) dataLength) > (uint32_t) blockHeader.itemLength )
    8b08:	ab02      	add	r3, sp, #8
    8b0a:	8919      	ldrh	r1, [r3, #8]
    8b0c:	9b01      	ldr	r3, [sp, #4]
    8b0e:	195a      	adds	r2, r3, r5
        return S_Nv_ReturnValue_BeyondEnd;
    8b10:	2304      	movs	r3, #4
    if ( ((uint32_t) offset + (uint32_t) dataLength) > (uint32_t) blockHeader.itemLength )
    8b12:	428a      	cmp	r2, r1
    8b14:	d8d4      	bhi.n	8ac0 <S_Nv_Write_Impl+0x24>
    blockHeader.blockOffset = offset;
    8b16:	ab02      	add	r3, sp, #8
    8b18:	466a      	mov	r2, sp
    8b1a:	8892      	ldrh	r2, [r2, #4]
    8b1c:	809a      	strh	r2, [r3, #4]
    blockHeader.blockLength = dataLength;
    8b1e:	80dd      	strh	r5, [r3, #6]
    blockHeader.previousBlock = blockPointer;
    8b20:	4642      	mov	r2, r8
    8b22:	815a      	strh	r2, [r3, #10]
    if ( blockHeader.blockLength == blockHeader.itemLength )
    8b24:	428d      	cmp	r5, r1
    8b26:	d02c      	beq.n	8b82 <S_Nv_Write_Impl+0xe6>
        blockHeader.writeCount++;
    8b28:	ab02      	add	r3, sp, #8
    8b2a:	899b      	ldrh	r3, [r3, #12]
    8b2c:	3301      	adds	r3, #1
    8b2e:	aa02      	add	r2, sp, #8
    8b30:	8193      	strh	r3, [r2, #12]
    uint16_t newBlockPointer = s_sectorHead;
    8b32:	4b20      	ldr	r3, [pc, #128]	; (8bb4 <S_Nv_Write_Impl+0x118>)
    8b34:	881c      	ldrh	r4, [r3, #0]
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pData) )
    8b36:	0039      	movs	r1, r7
    8b38:	a802      	add	r0, sp, #8
    8b3a:	4b1f      	ldr	r3, [pc, #124]	; (8bb8 <S_Nv_Write_Impl+0x11c>)
    8b3c:	4798      	blx	r3
        return S_Nv_ReturnValue_Failure;
    8b3e:	2301      	movs	r3, #1
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pData) )
    8b40:	2800      	cmp	r0, #0
    8b42:	d0bd      	beq.n	8ac0 <S_Nv_Write_Impl+0x24>
    cache->lastBlock = newBlockPointer;
    8b44:	70b4      	strb	r4, [r6, #2]
    8b46:	0a24      	lsrs	r4, r4, #8
    8b48:	70f4      	strb	r4, [r6, #3]
    if ( blockHeader.writeCount > COMPACT_ITEM_THRESHOLD )
    8b4a:	ab02      	add	r3, sp, #8
    8b4c:	899a      	ldrh	r2, [r3, #12]
    return S_Nv_ReturnValue_Ok;
    8b4e:	2300      	movs	r3, #0
    if ( blockHeader.writeCount > COMPACT_ITEM_THRESHOLD )
    8b50:	2a64      	cmp	r2, #100	; 0x64
    8b52:	d9b5      	bls.n	8ac0 <S_Nv_Write_Impl+0x24>
        s_compactItemId = blockHeader.id;
    8b54:	ab02      	add	r3, sp, #8
    8b56:	885a      	ldrh	r2, [r3, #2]
    8b58:	4b18      	ldr	r3, [pc, #96]	; (8bbc <S_Nv_Write_Impl+0x120>)
    8b5a:	801a      	strh	r2, [r3, #0]
        s_compactItemLength = 0u;           // no need to resize this item here
    8b5c:	2200      	movs	r2, #0
    8b5e:	4b18      	ldr	r3, [pc, #96]	; (8bc0 <S_Nv_Write_Impl+0x124>)
    8b60:	801a      	strh	r2, [r3, #0]
        if (!SYS_TimerStarted(&compactItemTimer))
    8b62:	4818      	ldr	r0, [pc, #96]	; (8bc4 <S_Nv_Write_Impl+0x128>)
    8b64:	4b18      	ldr	r3, [pc, #96]	; (8bc8 <S_Nv_Write_Impl+0x12c>)
    8b66:	4798      	blx	r3
    return S_Nv_ReturnValue_Ok;
    8b68:	2300      	movs	r3, #0
        if (!SYS_TimerStarted(&compactItemTimer))
    8b6a:	2800      	cmp	r0, #0
    8b6c:	d1a8      	bne.n	8ac0 <S_Nv_Write_Impl+0x24>
        compactItemTimer.handler = compactItemTimerFired;
    8b6e:	4b15      	ldr	r3, [pc, #84]	; (8bc4 <S_Nv_Write_Impl+0x128>)
    8b70:	4a16      	ldr	r2, [pc, #88]	; (8bcc <S_Nv_Write_Impl+0x130>)
    8b72:	611a      	str	r2, [r3, #16]
        compactItemTimer.timeout = COMPACT_ITEM_DELAY_MS;
    8b74:	4a16      	ldr	r2, [pc, #88]	; (8bd0 <S_Nv_Write_Impl+0x134>)
    8b76:	605a      	str	r2, [r3, #4]
        compactItemTimer.interval = COMPACT_ITEM_DELAY_MS;
    8b78:	609a      	str	r2, [r3, #8]
        compactItemTimer.mode = SYS_TIMER_INTERVAL_MODE;
    8b7a:	2200      	movs	r2, #0
    8b7c:	731a      	strb	r2, [r3, #12]
    return S_Nv_ReturnValue_Ok;
    8b7e:	2300      	movs	r3, #0
    8b80:	e79e      	b.n	8ac0 <S_Nv_Write_Impl+0x24>
        blockHeader.writeCount = 0u;
    8b82:	2300      	movs	r3, #0
    8b84:	aa02      	add	r2, sp, #8
    8b86:	8193      	strh	r3, [r2, #12]
    8b88:	e7d3      	b.n	8b32 <S_Nv_Write_Impl+0x96>
    8b8a:	46c0      	nop			; (mov r8, r8)
    8b8c:	00007f9d 	.word	0x00007f9d
    8b90:	00016fc0 	.word	0x00016fc0
    8b94:	00017060 	.word	0x00017060
    8b98:	00000596 	.word	0x00000596
    8b9c:	00016f28 	.word	0x00016f28
    8ba0:	00014d1d 	.word	0x00014d1d
    8ba4:	0000869d 	.word	0x0000869d
    8ba8:	00008195 	.word	0x00008195
    8bac:	20000478 	.word	0x20000478
    8bb0:	00007d4d 	.word	0x00007d4d
    8bb4:	2000047a 	.word	0x2000047a
    8bb8:	00008951 	.word	0x00008951
    8bbc:	20000450 	.word	0x20000450
    8bc0:	20000452 	.word	0x20000452
    8bc4:	20000310 	.word	0x20000310
    8bc8:	0000ba99 	.word	0x0000ba99
    8bcc:	00008945 	.word	0x00008945
    8bd0:	00000bb8 	.word	0x00000bb8

00008bd4 <S_Nv_Read_Impl>:
#if defined(S_XNV_LOGGING)
static S_Nv_ReturnValue_t S_Nv_Read_Original(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#else
S_Nv_ReturnValue_t S_Nv_Read_Impl(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#endif
{
    8bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    8bd6:	b083      	sub	sp, #12
    8bd8:	000c      	movs	r4, r1
    8bda:	0015      	movs	r5, r2
    8bdc:	001e      	movs	r6, r3
    assert((id != 0u) && (pData != NULL));
    8bde:	2800      	cmp	r0, #0
    8be0:	d009      	beq.n	8bf6 <S_Nv_Read_Impl+0x22>
    8be2:	2b00      	cmp	r3, #0
    8be4:	d007      	beq.n	8bf6 <S_Nv_Read_Impl+0x22>

    // get the pointer to the last written block for the item
    uint16_t lastBlockPointer = FindItem(id);
    8be6:	4b10      	ldr	r3, [pc, #64]	; (8c28 <S_Nv_Read_Impl+0x54>)
    8be8:	4798      	blx	r3
    if ( lastBlockPointer == 0x0000u )
    {
        // item does not exist
        return S_Nv_ReturnValue_DoesNotExist;
    8bea:	2303      	movs	r3, #3
    if ( lastBlockPointer == 0x0000u )
    8bec:	2800      	cmp	r0, #0
    8bee:	d108      	bne.n	8c02 <S_Nv_Read_Impl+0x2e>
    {
        return S_Nv_ReturnValue_BeyondEnd;
    }

    return S_Nv_ReturnValue_Ok;
}
    8bf0:	0018      	movs	r0, r3
    8bf2:	b003      	add	sp, #12
    8bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((id != 0u) && (pData != NULL));
    8bf6:	4b0d      	ldr	r3, [pc, #52]	; (8c2c <S_Nv_Read_Impl+0x58>)
    8bf8:	4a0d      	ldr	r2, [pc, #52]	; (8c30 <S_Nv_Read_Impl+0x5c>)
    8bfa:	490e      	ldr	r1, [pc, #56]	; (8c34 <S_Nv_Read_Impl+0x60>)
    8bfc:	480e      	ldr	r0, [pc, #56]	; (8c38 <S_Nv_Read_Impl+0x64>)
    8bfe:	4c0f      	ldr	r4, [pc, #60]	; (8c3c <S_Nv_Read_Impl+0x68>)
    8c00:	47a0      	blx	r4
    if ( ((uint32_t) offset + (uint32_t) dataLength) >= 0x10000uL )
    8c02:	1962      	adds	r2, r4, r5
    8c04:	490e      	ldr	r1, [pc, #56]	; (8c40 <S_Nv_Read_Impl+0x6c>)
        return S_Nv_ReturnValue_BeyondEnd;
    8c06:	3301      	adds	r3, #1
    if ( ((uint32_t) offset + (uint32_t) dataLength) >= 0x10000uL )
    8c08:	428a      	cmp	r2, r1
    8c0a:	d8f1      	bhi.n	8bf0 <S_Nv_Read_Impl+0x1c>
    if ( !GatherData(s_sector, lastBlockPointer, offset, dataLength, pData ))
    8c0c:	4b0d      	ldr	r3, [pc, #52]	; (8c44 <S_Nv_Read_Impl+0x70>)
    8c0e:	781f      	ldrb	r7, [r3, #0]
    8c10:	9600      	str	r6, [sp, #0]
    8c12:	002b      	movs	r3, r5
    8c14:	0022      	movs	r2, r4
    8c16:	0001      	movs	r1, r0
    8c18:	0038      	movs	r0, r7
    8c1a:	4c0b      	ldr	r4, [pc, #44]	; (8c48 <S_Nv_Read_Impl+0x74>)
    8c1c:	47a0      	blx	r4
    return S_Nv_ReturnValue_Ok;
    8c1e:	4243      	negs	r3, r0
    8c20:	4143      	adcs	r3, r0
    8c22:	009b      	lsls	r3, r3, #2
    8c24:	e7e4      	b.n	8bf0 <S_Nv_Read_Impl+0x1c>
    8c26:	46c0      	nop			; (mov r8, r8)
    8c28:	00008209 	.word	0x00008209
    8c2c:	00016fc0 	.word	0x00016fc0
    8c30:	00017070 	.word	0x00017070
    8c34:	000005ee 	.word	0x000005ee
    8c38:	00016f28 	.word	0x00016f28
    8c3c:	00014d1d 	.word	0x00014d1d
    8c40:	0000ffff 	.word	0x0000ffff
    8c44:	20000478 	.word	0x20000478
    8c48:	00008035 	.word	0x00008035

00008c4c <S_Nv_ItemLength_Impl>:

/** Interface function, see \ref S_Nv_ItemLength. */
uint16_t S_Nv_ItemLength_Impl(S_Nv_ItemId_t id)
{
    8c4c:	b510      	push	{r4, lr}
    8c4e:	b084      	sub	sp, #16
    assert(id != 0u);
    8c50:	2800      	cmp	r0, #0
    8c52:	d005      	beq.n	8c60 <S_Nv_ItemLength_Impl+0x14>

    uint16_t blockPointer = FindItem(id);
    8c54:	4b0a      	ldr	r3, [pc, #40]	; (8c80 <S_Nv_ItemLength_Impl+0x34>)
    8c56:	4798      	blx	r3
    8c58:	1e01      	subs	r1, r0, #0
    if ( blockPointer == 0x0000u )
    8c5a:	d107      	bne.n	8c6c <S_Nv_ItemLength_Impl+0x20>

    // read last written item block header
    BlockHeader_t blockHeader;
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    return blockHeader.itemLength;
}
    8c5c:	b004      	add	sp, #16
    8c5e:	bd10      	pop	{r4, pc}
    assert(id != 0u);
    8c60:	4b08      	ldr	r3, [pc, #32]	; (8c84 <S_Nv_ItemLength_Impl+0x38>)
    8c62:	4a09      	ldr	r2, [pc, #36]	; (8c88 <S_Nv_ItemLength_Impl+0x3c>)
    8c64:	4909      	ldr	r1, [pc, #36]	; (8c8c <S_Nv_ItemLength_Impl+0x40>)
    8c66:	480a      	ldr	r0, [pc, #40]	; (8c90 <S_Nv_ItemLength_Impl+0x44>)
    8c68:	4c0a      	ldr	r4, [pc, #40]	; (8c94 <S_Nv_ItemLength_Impl+0x48>)
    8c6a:	47a0      	blx	r4
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8c6c:	4b0a      	ldr	r3, [pc, #40]	; (8c98 <S_Nv_ItemLength_Impl+0x4c>)
    8c6e:	7818      	ldrb	r0, [r3, #0]
    8c70:	2310      	movs	r3, #16
    8c72:	466a      	mov	r2, sp
    8c74:	4c09      	ldr	r4, [pc, #36]	; (8c9c <S_Nv_ItemLength_Impl+0x50>)
    8c76:	47a0      	blx	r4
    return blockHeader.itemLength;
    8c78:	466b      	mov	r3, sp
    8c7a:	8918      	ldrh	r0, [r3, #8]
    8c7c:	e7ee      	b.n	8c5c <S_Nv_ItemLength_Impl+0x10>
    8c7e:	46c0      	nop			; (mov r8, r8)
    8c80:	00008209 	.word	0x00008209
    8c84:	00016fb4 	.word	0x00016fb4
    8c88:	00017080 	.word	0x00017080
    8c8c:	0000060b 	.word	0x0000060b
    8c90:	00016f28 	.word	0x00016f28
    8c94:	00014d1d 	.word	0x00014d1d
    8c98:	20000478 	.word	0x20000478
    8c9c:	00007d4d 	.word	0x00007d4d

00008ca0 <S_Nv_ItemInit_Impl>:
{
    8ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
    8ca2:	b085      	sub	sp, #20
    8ca4:	0004      	movs	r4, r0
    8ca6:	000e      	movs	r6, r1
    8ca8:	0015      	movs	r5, r2
    assert((id != 0u) && (id < 0xF000u) && (itemLength <= MAX_ITEM_LENGTH));
    8caa:	1e43      	subs	r3, r0, #1
    8cac:	b29b      	uxth	r3, r3
    8cae:	4a2e      	ldr	r2, [pc, #184]	; (8d68 <S_Nv_ItemInit_Impl+0xc8>)
    8cb0:	4293      	cmp	r3, r2
    8cb2:	d81e      	bhi.n	8cf2 <S_Nv_ItemInit_Impl+0x52>
    8cb4:	2380      	movs	r3, #128	; 0x80
    8cb6:	011b      	lsls	r3, r3, #4
    8cb8:	4299      	cmp	r1, r3
    8cba:	d81a      	bhi.n	8cf2 <S_Nv_ItemInit_Impl+0x52>
    if ( FindItem(id) != 0x0000u )
    8cbc:	4b2b      	ldr	r3, [pc, #172]	; (8d6c <S_Nv_ItemInit_Impl+0xcc>)
    8cbe:	4798      	blx	r3
    8cc0:	2800      	cmp	r0, #0
    8cc2:	d01d      	beq.n	8d00 <S_Nv_ItemInit_Impl+0x60>
        uint16_t oldItemLength = S_Nv_ItemLength(id);
    8cc4:	0020      	movs	r0, r4
    8cc6:	4b2a      	ldr	r3, [pc, #168]	; (8d70 <S_Nv_ItemInit_Impl+0xd0>)
    8cc8:	4798      	blx	r3
        if ( oldItemLength != itemLength )
    8cca:	4286      	cmp	r6, r0
    8ccc:	d007      	beq.n	8cde <S_Nv_ItemInit_Impl+0x3e>
            s_compactItemId = id;
    8cce:	4b29      	ldr	r3, [pc, #164]	; (8d74 <S_Nv_ItemInit_Impl+0xd4>)
    8cd0:	801c      	strh	r4, [r3, #0]
            s_compactItemLength = itemLength;
    8cd2:	4b29      	ldr	r3, [pc, #164]	; (8d78 <S_Nv_ItemInit_Impl+0xd8>)
    8cd4:	801e      	strh	r6, [r3, #0]
            S_Nv_ReturnValue_t resizeResult = CompactItem();
    8cd6:	4b29      	ldr	r3, [pc, #164]	; (8d7c <S_Nv_ItemInit_Impl+0xdc>)
    8cd8:	4798      	blx	r3
    8cda:	1e03      	subs	r3, r0, #0
            if ( resizeResult != S_Nv_ReturnValue_Ok )
    8cdc:	d115      	bne.n	8d0a <S_Nv_ItemInit_Impl+0x6a>
        if (pDefaultData != NULL)
    8cde:	2d00      	cmp	r5, #0
    8ce0:	d040      	beq.n	8d64 <S_Nv_ItemInit_Impl+0xc4>
            return S_Nv_Read(id, 0u, itemLength, pDefaultData);
    8ce2:	002b      	movs	r3, r5
    8ce4:	0032      	movs	r2, r6
    8ce6:	2100      	movs	r1, #0
    8ce8:	0020      	movs	r0, r4
    8cea:	4c25      	ldr	r4, [pc, #148]	; (8d80 <S_Nv_ItemInit_Impl+0xe0>)
    8cec:	47a0      	blx	r4
    8cee:	0003      	movs	r3, r0
    8cf0:	e00b      	b.n	8d0a <S_Nv_ItemInit_Impl+0x6a>
    assert((id != 0u) && (id < 0xF000u) && (itemLength <= MAX_ITEM_LENGTH));
    8cf2:	4b24      	ldr	r3, [pc, #144]	; (8d84 <S_Nv_ItemInit_Impl+0xe4>)
    8cf4:	4a24      	ldr	r2, [pc, #144]	; (8d88 <S_Nv_ItemInit_Impl+0xe8>)
    8cf6:	21aa      	movs	r1, #170	; 0xaa
    8cf8:	00c9      	lsls	r1, r1, #3
    8cfa:	4824      	ldr	r0, [pc, #144]	; (8d8c <S_Nv_ItemInit_Impl+0xec>)
    8cfc:	4c24      	ldr	r4, [pc, #144]	; (8d90 <S_Nv_ItemInit_Impl+0xf0>)
    8cfe:	47a0      	blx	r4
    if ( PowerSupplyTooLow() )
    8d00:	4b24      	ldr	r3, [pc, #144]	; (8d94 <S_Nv_ItemInit_Impl+0xf4>)
    8d02:	4798      	blx	r3
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    8d04:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    8d06:	2800      	cmp	r0, #0
    8d08:	d002      	beq.n	8d10 <S_Nv_ItemInit_Impl+0x70>
}
    8d0a:	0018      	movs	r0, r3
    8d0c:	b005      	add	sp, #20
    8d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CompactSectorIfNeeded(BLOCK_HEADER_SIZE + itemLength);
    8d10:	0030      	movs	r0, r6
    8d12:	3010      	adds	r0, #16
    8d14:	b280      	uxth	r0, r0
    8d16:	4b20      	ldr	r3, [pc, #128]	; (8d98 <S_Nv_ItemInit_Impl+0xf8>)
    8d18:	4798      	blx	r3
    assert(s_itemCount < MAX_ITEM_COUNT);
    8d1a:	4b20      	ldr	r3, [pc, #128]	; (8d9c <S_Nv_ItemInit_Impl+0xfc>)
    8d1c:	781b      	ldrb	r3, [r3, #0]
    8d1e:	2b06      	cmp	r3, #6
    8d20:	d819      	bhi.n	8d56 <S_Nv_ItemInit_Impl+0xb6>
    uint16_t newItemPointer = s_sectorHead;
    8d22:	4b1f      	ldr	r3, [pc, #124]	; (8da0 <S_Nv_ItemInit_Impl+0x100>)
    8d24:	881f      	ldrh	r7, [r3, #0]
    blockHeader.id = newItemId;
    8d26:	466b      	mov	r3, sp
    8d28:	805c      	strh	r4, [r3, #2]
    blockHeader.blockOffset = 0x0000u;
    8d2a:	2300      	movs	r3, #0
    8d2c:	466a      	mov	r2, sp
    8d2e:	8093      	strh	r3, [r2, #4]
    blockHeader.blockLength = itemLength;
    8d30:	80d6      	strh	r6, [r2, #6]
    blockHeader.itemLength = itemLength;
    8d32:	8116      	strh	r6, [r2, #8]
    blockHeader.previousBlock = 0x0000u;
    8d34:	8153      	strh	r3, [r2, #10]
    blockHeader.writeCount = 0u;
    8d36:	8193      	strh	r3, [r2, #12]
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pDefaultData) )
    8d38:	0029      	movs	r1, r5
    8d3a:	4668      	mov	r0, sp
    8d3c:	4b19      	ldr	r3, [pc, #100]	; (8da4 <S_Nv_ItemInit_Impl+0x104>)
    8d3e:	4798      	blx	r3
        return S_Nv_ReturnValue_Failure;
    8d40:	2301      	movs	r3, #1
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pDefaultData) )
    8d42:	2800      	cmp	r0, #0
    8d44:	d0e1      	beq.n	8d0a <S_Nv_ItemInit_Impl+0x6a>
    Item_t *newItemCache = CreateItemCache(newItemId);
    8d46:	0020      	movs	r0, r4
    8d48:	4b17      	ldr	r3, [pc, #92]	; (8da8 <S_Nv_ItemInit_Impl+0x108>)
    8d4a:	4798      	blx	r3
    newItemCache->lastBlock = newItemPointer;
    8d4c:	7087      	strb	r7, [r0, #2]
    8d4e:	0a3f      	lsrs	r7, r7, #8
    8d50:	70c7      	strb	r7, [r0, #3]
    return S_Nv_ReturnValue_DidNotExist;
    8d52:	2302      	movs	r3, #2
    8d54:	e7d9      	b.n	8d0a <S_Nv_ItemInit_Impl+0x6a>
    assert(s_itemCount < MAX_ITEM_COUNT);
    8d56:	4b15      	ldr	r3, [pc, #84]	; (8dac <S_Nv_ItemInit_Impl+0x10c>)
    8d58:	4a0b      	ldr	r2, [pc, #44]	; (8d88 <S_Nv_ItemInit_Impl+0xe8>)
    8d5a:	21af      	movs	r1, #175	; 0xaf
    8d5c:	00c9      	lsls	r1, r1, #3
    8d5e:	480b      	ldr	r0, [pc, #44]	; (8d8c <S_Nv_ItemInit_Impl+0xec>)
    8d60:	4c0b      	ldr	r4, [pc, #44]	; (8d90 <S_Nv_ItemInit_Impl+0xf0>)
    8d62:	47a0      	blx	r4
            return S_Nv_ReturnValue_Ok;
    8d64:	2300      	movs	r3, #0
    8d66:	e7d0      	b.n	8d0a <S_Nv_ItemInit_Impl+0x6a>
    8d68:	0000effe 	.word	0x0000effe
    8d6c:	00008209 	.word	0x00008209
    8d70:	00008c4d 	.word	0x00008c4d
    8d74:	20000450 	.word	0x20000450
    8d78:	20000452 	.word	0x20000452
    8d7c:	00008719 	.word	0x00008719
    8d80:	00008bd5 	.word	0x00008bd5
    8d84:	00016f74 	.word	0x00016f74
    8d88:	0001704c 	.word	0x0001704c
    8d8c:	00016f28 	.word	0x00016f28
    8d90:	00014d1d 	.word	0x00014d1d
    8d94:	00007f9d 	.word	0x00007f9d
    8d98:	0000869d 	.word	0x0000869d
    8d9c:	20000470 	.word	0x20000470
    8da0:	2000047a 	.word	0x2000047a
    8da4:	00008951 	.word	0x00008951
    8da8:	00008225 	.word	0x00008225
    8dac:	00016eec 	.word	0x00016eec

00008db0 <S_Nv_IsItemAvailable_Impl>:
/** Interface function, see \ref S_Nv_IsItemAvailable.
 *
 * Important: This will check whether the item is found in the storage area
 */
bool S_Nv_IsItemAvailable_Impl(S_Nv_ItemId_t id)
{
    8db0:	b510      	push	{r4, lr}
  return ( FindItem(id) != 0x0000u );
    8db2:	4b03      	ldr	r3, [pc, #12]	; (8dc0 <S_Nv_IsItemAvailable_Impl+0x10>)
    8db4:	4798      	blx	r3
    8db6:	1e43      	subs	r3, r0, #1
    8db8:	4198      	sbcs	r0, r3
    8dba:	b2c0      	uxtb	r0, r0
}
    8dbc:	bd10      	pop	{r4, pc}
    8dbe:	46c0      	nop			; (mov r8, r8)
    8dc0:	00008209 	.word	0x00008209

00008dc4 <pdsInitItemMask>:
\param[in] itemMask - itemMask to be initialized

\return true itemMask is initialized, false otherwise
******************************************************************************/
static bool pdsInitItemMask(S_Nv_ItemId_t memoryId, uint8_t *itemMask)
{
    8dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    8dc6:	46d6      	mov	lr, sl
    8dc8:	4647      	mov	r7, r8
    8dca:	b580      	push	{r7, lr}
    8dcc:	b087      	sub	sp, #28
    8dce:	000f      	movs	r7, r1
  if (PDS_ALL_EXISTENT_MEMORY == memoryId)
    8dd0:	4b20      	ldr	r3, [pc, #128]	; (8e54 <pdsInitItemMask+0x90>)
    8dd2:	4298      	cmp	r0, r3
    8dd4:	d012      	beq.n	8dfc <pdsInitItemMask+0x38>
  {
    memset(itemMask, 0xFFU, PDS_ITEM_MASK_SIZE);
    itemMask[0] &= 0xFEU;
  }
  else if (PDS_DIRECTORY_MASK & memoryId)
    8dd6:	0443      	lsls	r3, r0, #17
    8dd8:	d415      	bmi.n	8e06 <pdsInitItemMask+0x42>
    else
      return false;
  }
  else
  {
    itemMask[memoryId / 8] |= 1 << (memoryId % 8);
    8dda:	08c3      	lsrs	r3, r0, #3
    8ddc:	18cf      	adds	r7, r1, r3
    8dde:	2307      	movs	r3, #7
    8de0:	4018      	ands	r0, r3
    8de2:	3b06      	subs	r3, #6
    8de4:	4083      	lsls	r3, r0
    8de6:	783a      	ldrb	r2, [r7, #0]
    8de8:	4313      	orrs	r3, r2
    8dea:	703b      	strb	r3, [r7, #0]
  }

  return true;
    8dec:	2301      	movs	r3, #1
    8dee:	9301      	str	r3, [sp, #4]
}
    8df0:	9801      	ldr	r0, [sp, #4]
    8df2:	b007      	add	sp, #28
    8df4:	bc0c      	pop	{r2, r3}
    8df6:	4690      	mov	r8, r2
    8df8:	469a      	mov	sl, r3
    8dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    itemMask[0] &= 0xFEU;
    8dfc:	23fe      	movs	r3, #254	; 0xfe
    8dfe:	700b      	strb	r3, [r1, #0]
  return true;
    8e00:	3bfd      	subs	r3, #253	; 0xfd
    8e02:	9301      	str	r3, [sp, #4]
    8e04:	e7f4      	b.n	8df0 <pdsInitItemMask+0x2c>
    if (pdsGetDirDescr(memoryId, &dirDescr))
    8e06:	a904      	add	r1, sp, #16
    8e08:	4b13      	ldr	r3, [pc, #76]	; (8e58 <pdsInitItemMask+0x94>)
    8e0a:	4798      	blx	r3
    8e0c:	9001      	str	r0, [sp, #4]
    8e0e:	2800      	cmp	r0, #0
    8e10:	d0ee      	beq.n	8df0 <pdsInitItemMask+0x2c>
      for (uint8_t index=0U; index < dirDescr.filesCount; index++)
    8e12:	ab04      	add	r3, sp, #16
    8e14:	889b      	ldrh	r3, [r3, #4]
    8e16:	4698      	mov	r8, r3
    8e18:	2b00      	cmp	r3, #0
    8e1a:	d0e9      	beq.n	8df0 <pdsInitItemMask+0x2c>
    8e1c:	2400      	movs	r4, #0
        memcpy(&memId, (void const FLASH_PTR*)(dirDescr.list + index), sizeof(uint16_t));
    8e1e:	ab02      	add	r3, sp, #8
    8e20:	1d9d      	adds	r5, r3, #6
    8e22:	4b0e      	ldr	r3, [pc, #56]	; (8e5c <pdsInitItemMask+0x98>)
    8e24:	469a      	mov	sl, r3
        itemMask[memId / 8U] |= 1U << (memId % 8U);
    8e26:	2607      	movs	r6, #7
        memcpy(&memId, (void const FLASH_PTR*)(dirDescr.list + index), sizeof(uint16_t));
    8e28:	0061      	lsls	r1, r4, #1
    8e2a:	9b04      	ldr	r3, [sp, #16]
    8e2c:	469c      	mov	ip, r3
    8e2e:	4461      	add	r1, ip
    8e30:	2202      	movs	r2, #2
    8e32:	0028      	movs	r0, r5
    8e34:	47d0      	blx	sl
        itemMask[memId / 8U] |= 1U << (memId % 8U);
    8e36:	8829      	ldrh	r1, [r5, #0]
    8e38:	08ca      	lsrs	r2, r1, #3
    8e3a:	18ba      	adds	r2, r7, r2
    8e3c:	4031      	ands	r1, r6
    8e3e:	2301      	movs	r3, #1
    8e40:	408b      	lsls	r3, r1
    8e42:	7811      	ldrb	r1, [r2, #0]
    8e44:	430b      	orrs	r3, r1
    8e46:	7013      	strb	r3, [r2, #0]
      for (uint8_t index=0U; index < dirDescr.filesCount; index++)
    8e48:	3401      	adds	r4, #1
    8e4a:	b2e4      	uxtb	r4, r4
    8e4c:	b2a3      	uxth	r3, r4
    8e4e:	4543      	cmp	r3, r8
    8e50:	d3ea      	bcc.n	8e28 <pdsInitItemMask+0x64>
    8e52:	e7cd      	b.n	8df0 <pdsInitItemMask+0x2c>
    8e54:	00004002 	.word	0x00004002
    8e58:	00009071 	.word	0x00009071
    8e5c:	00014ddf 	.word	0x00014ddf

00008e60 <PDS_Store>:
{
    8e60:	b510      	push	{r4, lr}
  if (!pdsInitItemMask(memoryId, itemsToStore))
    8e62:	4905      	ldr	r1, [pc, #20]	; (8e78 <PDS_Store+0x18>)
    8e64:	4b05      	ldr	r3, [pc, #20]	; (8e7c <PDS_Store+0x1c>)
    8e66:	4798      	blx	r3
    8e68:	1e04      	subs	r4, r0, #0
    8e6a:	d101      	bne.n	8e70 <PDS_Store+0x10>
}
    8e6c:	0020      	movs	r0, r4
    8e6e:	bd10      	pop	{r4, pc}
  pdsPostTask(PDS_STORE_ITEM_TASK_ID);
    8e70:	2000      	movs	r0, #0
    8e72:	4b03      	ldr	r3, [pc, #12]	; (8e80 <PDS_Store+0x20>)
    8e74:	4798      	blx	r3
  return true;
    8e76:	e7f9      	b.n	8e6c <PDS_Store+0xc>
    8e78:	20000480 	.word	0x20000480
    8e7c:	00008dc5 	.word	0x00008dc5
    8e80:	00008fc1 	.word	0x00008fc1

00008e84 <pdsStoreItemTaskHandler>:
{
    8e84:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e86:	b085      	sub	sp, #20
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    8e88:	4b3e      	ldr	r3, [pc, #248]	; (8f84 <pdsStoreItemTaskHandler+0x100>)
    8e8a:	781b      	ldrb	r3, [r3, #0]
    8e8c:	3301      	adds	r3, #1
      bit_index %= 8;
    8e8e:	2207      	movs	r2, #7
    8e90:	4013      	ands	r3, r2
      if (itemsToStore[byte_index] & (1U << bit_index))
    8e92:	4a3d      	ldr	r2, [pc, #244]	; (8f88 <pdsStoreItemTaskHandler+0x104>)
    8e94:	7817      	ldrb	r7, [r2, #0]
    8e96:	0038      	movs	r0, r7
    8e98:	001e      	movs	r6, r3
    8e9a:	003a      	movs	r2, r7
    8e9c:	40da      	lsrs	r2, r3
    8e9e:	07d2      	lsls	r2, r2, #31
    8ea0:	d431      	bmi.n	8f06 <pdsStoreItemTaskHandler+0x82>
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    8ea2:	3301      	adds	r3, #1
    8ea4:	b2db      	uxtb	r3, r3
    8ea6:	2207      	movs	r2, #7
      bit_index %= 8;
    8ea8:	2507      	movs	r5, #7
      if (itemsToStore[byte_index] & (1U << bit_index))
    8eaa:	2401      	movs	r4, #1
      bit_index %= 8;
    8eac:	402b      	ands	r3, r5
      if (itemsToStore[byte_index] & (1U << bit_index))
    8eae:	001e      	movs	r6, r3
    8eb0:	0001      	movs	r1, r0
    8eb2:	40d9      	lsrs	r1, r3
    8eb4:	420c      	tst	r4, r1
    8eb6:	d126      	bne.n	8f06 <pdsStoreItemTaskHandler+0x82>
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    8eb8:	3301      	adds	r3, #1
    8eba:	b2db      	uxtb	r3, r3
    8ebc:	3a01      	subs	r2, #1
    8ebe:	b2d2      	uxtb	r2, r2
    8ec0:	2a00      	cmp	r2, #0
    8ec2:	d1f3      	bne.n	8eac <pdsStoreItemTaskHandler+0x28>
  for (i = 0U, byte_index = i_found + 1; i < PDS_ITEM_MASK_SIZE; i++, byte_index++)
    8ec4:	2401      	movs	r4, #1
  if (!S_Nv_IsItemAvailable(((S_Nv_ItemId_t)byte_index << 3U) + bit_index))
    8ec6:	00e4      	lsls	r4, r4, #3
    8ec8:	18e4      	adds	r4, r4, r3
    8eca:	0020      	movs	r0, r4
    8ecc:	4b2f      	ldr	r3, [pc, #188]	; (8f8c <pdsStoreItemTaskHandler+0x108>)
    8ece:	4798      	blx	r3
    8ed0:	2800      	cmp	r0, #0
    8ed2:	d124      	bne.n	8f1e <pdsStoreItemTaskHandler+0x9a>
    if(pdsGetItemDescr(((S_Nv_ItemId_t)byte_index << 3U) + bit_index, &itemDescr))
    8ed4:	4669      	mov	r1, sp
    8ed6:	0020      	movs	r0, r4
    8ed8:	4b2d      	ldr	r3, [pc, #180]	; (8f90 <pdsStoreItemTaskHandler+0x10c>)
    8eda:	4798      	blx	r3
    8edc:	2800      	cmp	r0, #0
    8ede:	d038      	beq.n	8f52 <pdsStoreItemTaskHandler+0xce>
      if (itemDescr.filler)
    8ee0:	9b02      	ldr	r3, [sp, #8]
    8ee2:	2b00      	cmp	r3, #0
    8ee4:	d000      	beq.n	8ee8 <pdsStoreItemTaskHandler+0x64>
        itemDescr.filler();
    8ee6:	4798      	blx	r3
      ret = S_Nv_ItemInit(((S_Nv_ItemId_t)byte_index << 3U) + bit_index, itemDescr.itemSize, itemDescr.itemData);
    8ee8:	9a01      	ldr	r2, [sp, #4]
    8eea:	466b      	mov	r3, sp
    8eec:	8859      	ldrh	r1, [r3, #2]
    8eee:	0020      	movs	r0, r4
    8ef0:	4b28      	ldr	r3, [pc, #160]	; (8f94 <pdsStoreItemTaskHandler+0x110>)
    8ef2:	4798      	blx	r3
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    8ef4:	23fd      	movs	r3, #253	; 0xfd
    8ef6:	4218      	tst	r0, r3
    8ef8:	d02b      	beq.n	8f52 <pdsStoreItemTaskHandler+0xce>
    8efa:	4b27      	ldr	r3, [pc, #156]	; (8f98 <pdsStoreItemTaskHandler+0x114>)
    8efc:	4a27      	ldr	r2, [pc, #156]	; (8f9c <pdsStoreItemTaskHandler+0x118>)
    8efe:	21ea      	movs	r1, #234	; 0xea
    8f00:	4827      	ldr	r0, [pc, #156]	; (8fa0 <pdsStoreItemTaskHandler+0x11c>)
    8f02:	4c28      	ldr	r4, [pc, #160]	; (8fa4 <pdsStoreItemTaskHandler+0x120>)
    8f04:	47a0      	blx	r4
        itemsToStore[byte_index] &= ~(1U << bit_index);
    8f06:	2201      	movs	r2, #1
    8f08:	40b2      	lsls	r2, r6
    8f0a:	4397      	bics	r7, r2
    8f0c:	4a1e      	ldr	r2, [pc, #120]	; (8f88 <pdsStoreItemTaskHandler+0x104>)
    8f0e:	7017      	strb	r7, [r2, #0]
        i_found = byte_index;
    8f10:	2100      	movs	r1, #0
    8f12:	4a25      	ldr	r2, [pc, #148]	; (8fa8 <pdsStoreItemTaskHandler+0x124>)
    8f14:	7011      	strb	r1, [r2, #0]
        j_found = bit_index;
    8f16:	4a1b      	ldr	r2, [pc, #108]	; (8f84 <pdsStoreItemTaskHandler+0x100>)
    8f18:	7013      	strb	r3, [r2, #0]
    byte_index %= PDS_ITEM_MASK_SIZE;
    8f1a:	2400      	movs	r4, #0
    8f1c:	e7d3      	b.n	8ec6 <pdsStoreItemTaskHandler+0x42>
  if (pdsGetItemDescr(id, &itemDescr))
    8f1e:	4669      	mov	r1, sp
    8f20:	0020      	movs	r0, r4
    8f22:	4b1b      	ldr	r3, [pc, #108]	; (8f90 <pdsStoreItemTaskHandler+0x10c>)
    8f24:	4798      	blx	r3
    8f26:	2800      	cmp	r0, #0
    8f28:	d013      	beq.n	8f52 <pdsStoreItemTaskHandler+0xce>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    8f2a:	466b      	mov	r3, sp
    8f2c:	885b      	ldrh	r3, [r3, #2]
    8f2e:	2b00      	cmp	r3, #0
    8f30:	d015      	beq.n	8f5e <pdsStoreItemTaskHandler+0xda>
    8f32:	9b01      	ldr	r3, [sp, #4]
    8f34:	2b00      	cmp	r3, #0
    8f36:	d012      	beq.n	8f5e <pdsStoreItemTaskHandler+0xda>
    if (itemDescr.filler)
    8f38:	9b02      	ldr	r3, [sp, #8]
    8f3a:	2b00      	cmp	r3, #0
    8f3c:	d000      	beq.n	8f40 <pdsStoreItemTaskHandler+0xbc>
      itemDescr.filler();
    8f3e:	4798      	blx	r3
      ret = S_Nv_Write(id, 0U, itemDescr.itemSize, itemDescr.itemData);
    8f40:	9b01      	ldr	r3, [sp, #4]
    8f42:	466a      	mov	r2, sp
    8f44:	8852      	ldrh	r2, [r2, #2]
    8f46:	2100      	movs	r1, #0
    8f48:	0020      	movs	r0, r4
    8f4a:	4c18      	ldr	r4, [pc, #96]	; (8fac <pdsStoreItemTaskHandler+0x128>)
    8f4c:	47a0      	blx	r4
      assert(ret == S_Nv_ReturnValue_Ok);
    8f4e:	2800      	cmp	r0, #0
    8f50:	d10c      	bne.n	8f6c <pdsStoreItemTaskHandler+0xe8>
    if (itemsToStore[i])
    8f52:	4b0d      	ldr	r3, [pc, #52]	; (8f88 <pdsStoreItemTaskHandler+0x104>)
    8f54:	781b      	ldrb	r3, [r3, #0]
    8f56:	2b00      	cmp	r3, #0
    8f58:	d10f      	bne.n	8f7a <pdsStoreItemTaskHandler+0xf6>
}
    8f5a:	b005      	add	sp, #20
    8f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    8f5e:	4b14      	ldr	r3, [pc, #80]	; (8fb0 <pdsStoreItemTaskHandler+0x12c>)
    8f60:	4a14      	ldr	r2, [pc, #80]	; (8fb4 <pdsStoreItemTaskHandler+0x130>)
    8f62:	2134      	movs	r1, #52	; 0x34
    8f64:	31ff      	adds	r1, #255	; 0xff
    8f66:	480e      	ldr	r0, [pc, #56]	; (8fa0 <pdsStoreItemTaskHandler+0x11c>)
    8f68:	4c0e      	ldr	r4, [pc, #56]	; (8fa4 <pdsStoreItemTaskHandler+0x120>)
    8f6a:	47a0      	blx	r4
      assert(ret == S_Nv_ReturnValue_Ok);
    8f6c:	4b12      	ldr	r3, [pc, #72]	; (8fb8 <pdsStoreItemTaskHandler+0x134>)
    8f6e:	4a11      	ldr	r2, [pc, #68]	; (8fb4 <pdsStoreItemTaskHandler+0x130>)
    8f70:	2142      	movs	r1, #66	; 0x42
    8f72:	31ff      	adds	r1, #255	; 0xff
    8f74:	480a      	ldr	r0, [pc, #40]	; (8fa0 <pdsStoreItemTaskHandler+0x11c>)
    8f76:	4c0b      	ldr	r4, [pc, #44]	; (8fa4 <pdsStoreItemTaskHandler+0x120>)
    8f78:	47a0      	blx	r4
      pdsPostTask(PDS_STORE_ITEM_TASK_ID);
    8f7a:	2000      	movs	r0, #0
    8f7c:	4b0f      	ldr	r3, [pc, #60]	; (8fbc <pdsStoreItemTaskHandler+0x138>)
    8f7e:	4798      	blx	r3
}
    8f80:	e7eb      	b.n	8f5a <pdsStoreItemTaskHandler+0xd6>
    8f82:	46c0      	nop			; (mov r8, r8)
    8f84:	20000481 	.word	0x20000481
    8f88:	20000480 	.word	0x20000480
    8f8c:	00008db1 	.word	0x00008db1
    8f90:	00009015 	.word	0x00009015
    8f94:	00008ca1 	.word	0x00008ca1
    8f98:	00017124 	.word	0x00017124
    8f9c:	0001716c 	.word	0x0001716c
    8fa0:	000170d4 	.word	0x000170d4
    8fa4:	00014d1d 	.word	0x00014d1d
    8fa8:	2000047c 	.word	0x2000047c
    8fac:	00008a9d 	.word	0x00008a9d
    8fb0:	00017098 	.word	0x00017098
    8fb4:	00017184 	.word	0x00017184
    8fb8:	00017194 	.word	0x00017194
    8fbc:	00008fc1 	.word	0x00008fc1

00008fc0 <pdsPostTask>:
\param[in] taskId - id of a task
******************************************************************************/

void pdsPostTask(PdsTaskId_t taskId)
{
  pendingTasks |= (1U << taskId);
    8fc0:	4a03      	ldr	r2, [pc, #12]	; (8fd0 <pdsPostTask+0x10>)
    8fc2:	2301      	movs	r3, #1
    8fc4:	4083      	lsls	r3, r0
    8fc6:	7811      	ldrb	r1, [r2, #0]
    8fc8:	430b      	orrs	r3, r1
    8fca:	7013      	strb	r3, [r2, #0]
//  SYS_PostTask(PDS_TASK_ID);
}
    8fcc:	4770      	bx	lr
    8fce:	46c0      	nop			; (mov r8, r8)
    8fd0:	20000482 	.word	0x20000482

00008fd4 <PDS_TaskHandler>:

/******************************************************************************
\brief General PDS task handler
******************************************************************************/
void PDS_TaskHandler(void)
{
    8fd4:	b570      	push	{r4, r5, r6, lr}
  if (pendingTasks)
    8fd6:	4b0d      	ldr	r3, [pc, #52]	; (900c <PDS_TaskHandler+0x38>)
    8fd8:	781d      	ldrb	r5, [r3, #0]
    8fda:	2d00      	cmp	r5, #0
    8fdc:	d012      	beq.n	9004 <PDS_TaskHandler+0x30>
  {
    uint8_t taskId = 0U;

    while (!(pendingTasks & (1U << taskId)))
    8fde:	0028      	movs	r0, r5
    8fe0:	07eb      	lsls	r3, r5, #31
    8fe2:	d410      	bmi.n	9006 <PDS_TaskHandler+0x32>
    8fe4:	2300      	movs	r3, #0
    8fe6:	2401      	movs	r4, #1
      taskId++;
    8fe8:	3301      	adds	r3, #1
    8fea:	b2db      	uxtb	r3, r3
    while (!(pendingTasks & (1U << taskId)))
    8fec:	0019      	movs	r1, r3
    8fee:	0002      	movs	r2, r0
    8ff0:	40da      	lsrs	r2, r3
    8ff2:	4214      	tst	r4, r2
    8ff4:	d0f8      	beq.n	8fe8 <PDS_TaskHandler+0x14>

    pendingTasks ^= (1U << taskId);
    8ff6:	2301      	movs	r3, #1
    8ff8:	408b      	lsls	r3, r1
    8ffa:	405d      	eors	r5, r3
    8ffc:	4b03      	ldr	r3, [pc, #12]	; (900c <PDS_TaskHandler+0x38>)
    8ffe:	701d      	strb	r5, [r3, #0]
    pdsTaskHandlers[taskId]();
    9000:	4b03      	ldr	r3, [pc, #12]	; (9010 <PDS_TaskHandler+0x3c>)
    9002:	4798      	blx	r3
   
  }
}
    9004:	bd70      	pop	{r4, r5, r6, pc}
    while (!(pendingTasks & (1U << taskId)))
    9006:	2100      	movs	r1, #0
    9008:	e7f5      	b.n	8ff6 <PDS_TaskHandler+0x22>
    900a:	46c0      	nop			; (mov r8, r8)
    900c:	20000482 	.word	0x20000482
    9010:	00008e85 	.word	0x00008e85

00009014 <pdsGetItemDescr>:
\param[in] itemDescrToGet    - pointer to item descriptor to be loaded;

returns true if descriptor is found out for the given item ID, false - otherwise
******************************************************************************/
bool pdsGetItemDescr(S_Nv_ItemId_t itemId, ItemIdToMemoryMapping_t *itemDescrToGet )
{
    9014:	b5f0      	push	{r4, r5, r6, r7, lr}
    9016:	b087      	sub	sp, #28
    9018:	9101      	str	r1, [sp, #4]
  /* Calculate raw data size */
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
  {
    ItemIdToMemoryMapping_t itemDescr;

    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    901a:	aa02      	add	r2, sp, #8
    901c:	4b10      	ldr	r3, [pc, #64]	; (9060 <pdsGetItemDescr+0x4c>)
    901e:	0011      	movs	r1, r2
    9020:	cb70      	ldmia	r3!, {r4, r5, r6}
    9022:	c170      	stmia	r1!, {r4, r5, r6}
    9024:	681b      	ldr	r3, [r3, #0]
    9026:	600b      	str	r3, [r1, #0]

    if(itemDescr.itemId == itemId)
    9028:	8813      	ldrh	r3, [r2, #0]
    902a:	4283      	cmp	r3, r0
    902c:	d011      	beq.n	9052 <pdsGetItemDescr+0x3e>
    {
      memcpy(itemDescrToGet, &itemDescr, sizeof(ItemIdToMemoryMapping_t));
      return true;
    }
    itemDescrPtr++;
    902e:	4b0d      	ldr	r3, [pc, #52]	; (9064 <pdsGetItemDescr+0x50>)
    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    9030:	aa02      	add	r2, sp, #8
    9032:	0011      	movs	r1, r2
    9034:	001c      	movs	r4, r3
    9036:	cce0      	ldmia	r4!, {r5, r6, r7}
    9038:	c1e0      	stmia	r1!, {r5, r6, r7}
    903a:	6824      	ldr	r4, [r4, #0]
    903c:	600c      	str	r4, [r1, #0]
    if(itemDescr.itemId == itemId)
    903e:	8811      	ldrh	r1, [r2, #0]
    9040:	4281      	cmp	r1, r0
    9042:	d006      	beq.n	9052 <pdsGetItemDescr+0x3e>
    itemDescrPtr++;
    9044:	3310      	adds	r3, #16
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
    9046:	4908      	ldr	r1, [pc, #32]	; (9068 <pdsGetItemDescr+0x54>)
    9048:	428b      	cmp	r3, r1
    904a:	d1f2      	bne.n	9032 <pdsGetItemDescr+0x1e>

  }
  return false;
    904c:	2000      	movs	r0, #0
}
    904e:	b007      	add	sp, #28
    9050:	bdf0      	pop	{r4, r5, r6, r7, pc}
      memcpy(itemDescrToGet, &itemDescr, sizeof(ItemIdToMemoryMapping_t));
    9052:	2210      	movs	r2, #16
    9054:	a902      	add	r1, sp, #8
    9056:	9801      	ldr	r0, [sp, #4]
    9058:	4b04      	ldr	r3, [pc, #16]	; (906c <pdsGetItemDescr+0x58>)
    905a:	4798      	blx	r3
      return true;
    905c:	2001      	movs	r0, #1
    905e:	e7f6      	b.n	904e <pdsGetItemDescr+0x3a>
    9060:	00004400 	.word	0x00004400
    9064:	00004410 	.word	0x00004410
    9068:	00004470 	.word	0x00004470
    906c:	00014ddf 	.word	0x00014ddf

00009070 <pdsGetDirDescr>:
\param[in] dirDescrToGet    - pointer to dir descriptor to be loaded;

returns true if descriptor is found out for the given dir ID, false - otherwise
******************************************************************************/
bool pdsGetDirDescr(S_Nv_ItemId_t itemId, PDS_DirDescr_t *dirDescrToGet )
{
    9070:	b570      	push	{r4, r5, r6, lr}
    9072:	b082      	sub	sp, #8
    9074:	000c      	movs	r4, r1
  /* Calculate raw data size */
  for (uint8_t fileIdx = 0; fileIdx < PDS_DIRECTORIES_AMOUNT; fileIdx++)
  {
    PDS_DirDescr_t dirDescr;

    memcpy(&dirDescr, (void const *)dirDescrPtr, sizeof(PDS_DirDescr_t));
    9076:	466b      	mov	r3, sp
    9078:	4a08      	ldr	r2, [pc, #32]	; (909c <pdsGetDirDescr+0x2c>)
    907a:	4669      	mov	r1, sp
    907c:	ca60      	ldmia	r2!, {r5, r6}
    907e:	c160      	stmia	r1!, {r5, r6}
    if(dirDescr.memoryId == itemId)
    9080:	88da      	ldrh	r2, [r3, #6]
      memcpy(dirDescrToGet, &dirDescr, sizeof(PDS_DirDescr_t));
      return true;
    }
    dirDescrPtr++;
  }
  return false;
    9082:	2300      	movs	r3, #0
    if(dirDescr.memoryId == itemId)
    9084:	4282      	cmp	r2, r0
    9086:	d002      	beq.n	908e <pdsGetDirDescr+0x1e>
}
    9088:	0018      	movs	r0, r3
    908a:	b002      	add	sp, #8
    908c:	bd70      	pop	{r4, r5, r6, pc}
      memcpy(dirDescrToGet, &dirDescr, sizeof(PDS_DirDescr_t));
    908e:	2208      	movs	r2, #8
    9090:	4669      	mov	r1, sp
    9092:	0020      	movs	r0, r4
    9094:	4b02      	ldr	r3, [pc, #8]	; (90a0 <pdsGetDirDescr+0x30>)
    9096:	4798      	blx	r3
      return true;
    9098:	2301      	movs	r3, #1
    909a:	e7f5      	b.n	9088 <pdsGetDirDescr+0x18>
    909c:	00004400 	.word	0x00004400
    90a0:	00014ddf 	.word	0x00014ddf

000090a4 <MiMAC_SetAltAddress>:
 *      None
 *
 *****************************************************************************************/

bool MiMAC_SetAltAddress( uint8_t *Address,  uint8_t *PanId)
{
    90a4:	b510      	push	{r4, lr}
	myNetworkAddress.v[0] = Address[0];
    90a6:	7802      	ldrb	r2, [r0, #0]
    90a8:	4b08      	ldr	r3, [pc, #32]	; (90cc <MiMAC_SetAltAddress+0x28>)
    90aa:	701a      	strb	r2, [r3, #0]
	myNetworkAddress.v[1] = Address[1];
    90ac:	7842      	ldrb	r2, [r0, #1]
    90ae:	705a      	strb	r2, [r3, #1]
	MAC_PANID.v[0] = PanId[0];
    90b0:	780a      	ldrb	r2, [r1, #0]
    90b2:	4c07      	ldr	r4, [pc, #28]	; (90d0 <MiMAC_SetAltAddress+0x2c>)
    90b4:	7022      	strb	r2, [r4, #0]
	MAC_PANID.v[1] = PanId[1];
    90b6:	784a      	ldrb	r2, [r1, #1]
    90b8:	7062      	strb	r2, [r4, #1]
	PHY_SetShortAddr(myNetworkAddress.Val);
    90ba:	8818      	ldrh	r0, [r3, #0]
    90bc:	4b05      	ldr	r3, [pc, #20]	; (90d4 <MiMAC_SetAltAddress+0x30>)
    90be:	4798      	blx	r3
	PHY_SetPanId(MAC_PANID.Val);
    90c0:	8820      	ldrh	r0, [r4, #0]
    90c2:	4b05      	ldr	r3, [pc, #20]	; (90d8 <MiMAC_SetAltAddress+0x34>)
    90c4:	4798      	blx	r3
	return true;
}
    90c6:	2001      	movs	r0, #1
    90c8:	bd10      	pop	{r4, pc}
    90ca:	46c0      	nop			; (mov r8, r8)
    90cc:	2000227c 	.word	0x2000227c
    90d0:	200022f0 	.word	0x200022f0
    90d4:	0000a34d 	.word	0x0000a34d
    90d8:	0000a339 	.word	0x0000a339

000090dc <mic_generator>:

#if defined (ENABLE_SECURITY)
uint8_t addr[8] = {0xda , 0x98 , 0x22 , 0xfe , 0xff , 0xa3 , 0x04 , 0x00};
void mic_generator (uint8_t *Payloadinfo, uint8_t len , uint8_t frame_control ,  API_UINT32_UNION FrameCounter ,  uint8_t *SourceIEEEAddress)
{
    90dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    90de:	46c6      	mov	lr, r8
    90e0:	b500      	push	{lr}
    90e2:	b0c6      	sub	sp, #280	; 0x118
    90e4:	0006      	movs	r6, r0
    90e6:	000c      	movs	r4, r1
    90e8:	469c      	mov	ip, r3
    90ea:	994c      	ldr	r1, [sp, #304]	; 0x130
	uint16_t i ;										
	uint8_t j , iterations  , copy_packet1[255] , cbc_header_with_padding[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = len/16;
    90ec:	0925      	lsrs	r5, r4, #4
	if (len % 16 != 0) iterations++;
    90ee:	0723      	lsls	r3, r4, #28
    90f0:	d000      	beq.n	90f4 <mic_generator+0x18>
    90f2:	3501      	adds	r5, #1
	InitVect_in[0] = 0x49;//frame_control;
    90f4:	2049      	movs	r0, #73	; 0x49
    90f6:	4b40      	ldr	r3, [pc, #256]	; (91f8 <mic_generator+0x11c>)
    90f8:	7018      	strb	r0, [r3, #0]
	cbc_header_with_padding[0] = 0x00;  // l(a)
    90fa:	2300      	movs	r3, #0
    90fc:	a802      	add	r0, sp, #8
    90fe:	7003      	strb	r3, [r0, #0]
	cbc_header_with_padding[1] = 0x0d;  // l(a)Header Length
    9100:	330d      	adds	r3, #13
    9102:	7043      	strb	r3, [r0, #1]
	cbc_header_with_padding[2] = frame_control;  //frame_control;  //byte 1
    9104:	7082      	strb	r2, [r0, #2]
    9106:	2200      	movs	r2, #0
	for (i=0;i<8;i++)
	{
		InitVect_in[i+1] =  SourceIEEEAddress[i];
    9108:	4b3b      	ldr	r3, [pc, #236]	; (91f8 <mic_generator+0x11c>)
    910a:	5c8f      	ldrb	r7, [r1, r2]
    910c:	18d0      	adds	r0, r2, r3
    910e:	7047      	strb	r7, [r0, #1]
		cbc_header_with_padding[i+7] = SourceIEEEAddress[i];
    9110:	0010      	movs	r0, r2
    9112:	af02      	add	r7, sp, #8
    9114:	46b8      	mov	r8, r7
    9116:	4440      	add	r0, r8
    9118:	5c8f      	ldrb	r7, [r1, r2]
    911a:	71c7      	strb	r7, [r0, #7]
    911c:	3201      	adds	r2, #1
	for (i=0;i<8;i++)
    911e:	2a08      	cmp	r2, #8
    9120:	d1f3      	bne.n	910a <mic_generator+0x2e>
	}
	for (i=0;i<4;i++)
	{
		InitVect_in[i+9] = FrameCounter.v[i];
    9122:	4663      	mov	r3, ip
    9124:	466a      	mov	r2, sp
    9126:	71d3      	strb	r3, [r2, #7]
    9128:	79d3      	ldrb	r3, [r2, #7]
    912a:	4833      	ldr	r0, [pc, #204]	; (91f8 <mic_generator+0x11c>)
    912c:	7243      	strb	r3, [r0, #9]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    912e:	4642      	mov	r2, r8
    9130:	70d3      	strb	r3, [r2, #3]
		InitVect_in[i+9] = FrameCounter.v[i];
    9132:	4663      	mov	r3, ip
    9134:	041b      	lsls	r3, r3, #16
    9136:	0e1b      	lsrs	r3, r3, #24
    9138:	7283      	strb	r3, [r0, #10]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    913a:	7113      	strb	r3, [r2, #4]
		InitVect_in[i+9] = FrameCounter.v[i];
    913c:	4663      	mov	r3, ip
    913e:	021b      	lsls	r3, r3, #8
    9140:	0e1b      	lsrs	r3, r3, #24
    9142:	72c3      	strb	r3, [r0, #11]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    9144:	7153      	strb	r3, [r2, #5]
		InitVect_in[i+9] = FrameCounter.v[i];
    9146:	4663      	mov	r3, ip
    9148:	0e1b      	lsrs	r3, r3, #24
    914a:	7303      	strb	r3, [r0, #12]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    914c:	7193      	strb	r3, [r2, #6]
	}
	//cbc_header_with_padding[14] = 0x00;  // Padding
	cbc_header_with_padding[15] = 0x00;   // Padding
    914e:	2300      	movs	r3, #0
    9150:	73d3      	strb	r3, [r2, #15]
	InitVect_in[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    9152:	2204      	movs	r2, #4
    9154:	7342      	strb	r2, [r0, #13]
	InitVect_in[14] = 0x00; // 15 th byte padded to zero
    9156:	7383      	strb	r3, [r0, #14]
	InitVect_in[15] = len; // For MIC calculation All preceding blocks will be incremented by 1
    9158:	73c4      	strb	r4, [r0, #15]
	PHY_EncryptReq(&InitVect_in[0], (uint8_t *)mySecurityKey);
    915a:	4928      	ldr	r1, [pc, #160]	; (91fc <mic_generator+0x120>)
    915c:	4b28      	ldr	r3, [pc, #160]	; (9200 <mic_generator+0x124>)
    915e:	4798      	blx	r3
    9160:	2300      	movs	r3, #0
	for (i=0;i<16;i++)
	{
		copy_packet1[i] = cbc_header_with_padding[i];
    9162:	a906      	add	r1, sp, #24
    9164:	aa02      	add	r2, sp, #8
    9166:	5c9a      	ldrb	r2, [r3, r2]
    9168:	545a      	strb	r2, [r3, r1]
    916a:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    916c:	2b10      	cmp	r3, #16
    916e:	d1f9      	bne.n	9164 <mic_generator+0x88>
	}
	// Copy the Payload and Do the padding
	for (i=16;i<len+16;i++)
    9170:	0027      	movs	r7, r4
    9172:	3710      	adds	r7, #16
    9174:	2f10      	cmp	r7, #16
    9176:	dd0a      	ble.n	918e <mic_generator+0xb2>
    9178:	2010      	movs	r0, #16
	{
		copy_packet1[i]	= Payloadinfo[i-16];  // Copying the Payload
    917a:	a906      	add	r1, sp, #24
    917c:	18f2      	adds	r2, r6, r3
    917e:	3a10      	subs	r2, #16
    9180:	7812      	ldrb	r2, [r2, #0]
    9182:	540a      	strb	r2, [r1, r0]
	for (i=16;i<len+16;i++)
    9184:	3301      	adds	r3, #1
    9186:	b29b      	uxth	r3, r3
    9188:	0018      	movs	r0, r3
    918a:	42bb      	cmp	r3, r7
    918c:	dbf6      	blt.n	917c <mic_generator+0xa0>
	}
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
    918e:	0023      	movs	r3, r4
    9190:	3310      	adds	r3, #16
    9192:	001a      	movs	r2, r3
    9194:	3501      	adds	r5, #1
    9196:	0129      	lsls	r1, r5, #4
    9198:	428b      	cmp	r3, r1
    919a:	da07      	bge.n	91ac <mic_generator+0xd0>
	{
		copy_packet1[i] = 0; // Padding
    919c:	ac06      	add	r4, sp, #24
    919e:	2000      	movs	r0, #0
    91a0:	54a0      	strb	r0, [r4, r2]
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
    91a2:	3301      	adds	r3, #1
    91a4:	b29b      	uxth	r3, r3
    91a6:	001a      	movs	r2, r3
    91a8:	428b      	cmp	r3, r1
    91aa:	dbf9      	blt.n	91a0 <mic_generator+0xc4>
	}
	for (i=0;i<iterations+1;i++)
    91ac:	2200      	movs	r2, #0
    91ae:	2700      	movs	r7, #0
    91b0:	2d00      	cmp	r5, #0
    91b2:	dd15      	ble.n	91e0 <mic_generator+0x104>
	{
		for (j=0;j<16;j++)
		{
			InitVect_in[j]	= InitVect_in[j] ^ copy_packet1[j+(i*16)];
    91b4:	4e10      	ldr	r6, [pc, #64]	; (91f8 <mic_generator+0x11c>)
    91b6:	0112      	lsls	r2, r2, #4
    91b8:	2300      	movs	r3, #0
    91ba:	a906      	add	r1, sp, #24
    91bc:	188c      	adds	r4, r1, r2
    91be:	1999      	adds	r1, r3, r6
    91c0:	5ce2      	ldrb	r2, [r4, r3]
    91c2:	7808      	ldrb	r0, [r1, #0]
    91c4:	4042      	eors	r2, r0
    91c6:	700a      	strb	r2, [r1, #0]
    91c8:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    91ca:	2b10      	cmp	r3, #16
    91cc:	d1f7      	bne.n	91be <mic_generator+0xe2>
		}
		PHY_EncryptReq(&InitVect_in[0], (uint8_t *)mySecurityKey);
    91ce:	490b      	ldr	r1, [pc, #44]	; (91fc <mic_generator+0x120>)
    91d0:	4809      	ldr	r0, [pc, #36]	; (91f8 <mic_generator+0x11c>)
    91d2:	4b0b      	ldr	r3, [pc, #44]	; (9200 <mic_generator+0x124>)
    91d4:	4798      	blx	r3
	for (i=0;i<iterations+1;i++)
    91d6:	3701      	adds	r7, #1
    91d8:	b2bf      	uxth	r7, r7
    91da:	003a      	movs	r2, r7
    91dc:	42af      	cmp	r7, r5
    91de:	dbea      	blt.n	91b6 <mic_generator+0xda>
    91e0:	2300      	movs	r3, #0
	}
	for (i=0;i<16;i++)
	{
		CBC_mic[i] = InitVect_in[i];
    91e2:	4808      	ldr	r0, [pc, #32]	; (9204 <mic_generator+0x128>)
    91e4:	4904      	ldr	r1, [pc, #16]	; (91f8 <mic_generator+0x11c>)
    91e6:	5cca      	ldrb	r2, [r1, r3]
    91e8:	54c2      	strb	r2, [r0, r3]
    91ea:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    91ec:	2b10      	cmp	r3, #16
    91ee:	d1fa      	bne.n	91e6 <mic_generator+0x10a>
	}

}
    91f0:	b046      	add	sp, #280	; 0x118
    91f2:	bc04      	pop	{r2}
    91f4:	4690      	mov	r8, r2
    91f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    91f8:	2000228c 	.word	0x2000228c
    91fc:	000171b0 	.word	0x000171b0
    9200:	0000a465 	.word	0x0000a465
    9204:	200022d0 	.word	0x200022d0

00009208 <DataEncrypt>:
 *
 *****************************************************************************************/

bool DataEncrypt(uint8_t *Payloadinfo, uint8_t *Payload_len, API_UINT32_UNION FrameCounter,
uint8_t FrameControl)
{
    9208:	b5f0      	push	{r4, r5, r6, r7, lr}
    920a:	46de      	mov	lr, fp
    920c:	4657      	mov	r7, sl
    920e:	464e      	mov	r6, r9
    9210:	4645      	mov	r5, r8
    9212:	b5e0      	push	{r5, r6, r7, lr}
    9214:	b08d      	sub	sp, #52	; 0x34
    9216:	4680      	mov	r8, r0
    9218:	000e      	movs	r6, r1
    921a:	0014      	movs	r4, r2
    921c:	001a      	movs	r2, r3
	uint16_t i ;
	uint8_t iterations , block[16] , j , CTR_Nonce_and_Counter[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = *Payload_len/16;
    921e:	7809      	ldrb	r1, [r1, #0]
    9220:	090d      	lsrs	r5, r1, #4
	if (*Payload_len % 16 != 0) iterations++;
    9222:	070b      	lsls	r3, r1, #28
    9224:	d000      	beq.n	9228 <DataEncrypt+0x20>
    9226:	3501      	adds	r5, #1

	mic_generator(&Payloadinfo[0] , *Payload_len, FrameControl  , FrameCounter ,  MACInitParams.PAddress);
    9228:	4b37      	ldr	r3, [pc, #220]	; (9308 <DataEncrypt+0x100>)
    922a:	685b      	ldr	r3, [r3, #4]
    922c:	9300      	str	r3, [sp, #0]
    922e:	0023      	movs	r3, r4
    9230:	4640      	mov	r0, r8
    9232:	4f36      	ldr	r7, [pc, #216]	; (930c <DataEncrypt+0x104>)
    9234:	47b8      	blx	r7

	for (i=*Payload_len;i<iterations *16 ; i++ )
    9236:	7831      	ldrb	r1, [r6, #0]
    9238:	b28b      	uxth	r3, r1
    923a:	002e      	movs	r6, r5
    923c:	012d      	lsls	r5, r5, #4
    923e:	42a9      	cmp	r1, r5
    9240:	da07      	bge.n	9252 <DataEncrypt+0x4a>
	{
		Payloadinfo[i] = 0; // Padding
    9242:	2100      	movs	r1, #0
    9244:	4642      	mov	r2, r8
    9246:	54d1      	strb	r1, [r2, r3]
	for (i=*Payload_len;i<iterations *16 ; i++ )
    9248:	3301      	adds	r3, #1
    924a:	b29b      	uxth	r3, r3
    924c:	42ab      	cmp	r3, r5
    924e:	dbfa      	blt.n	9246 <DataEncrypt+0x3e>
    9250:	4690      	mov	r8, r2
	}
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    9252:	2201      	movs	r2, #1
    9254:	ab04      	add	r3, sp, #16
    9256:	701a      	strb	r2, [r3, #0]
	for (i=0;i<8;i++)
	{
		CTR_Nonce_and_Counter[i+1] = MACInitParams.PAddress[i];
    9258:	4b2b      	ldr	r3, [pc, #172]	; (9308 <DataEncrypt+0x100>)
    925a:	6858      	ldr	r0, [r3, #4]
    925c:	2300      	movs	r3, #0
    925e:	aa04      	add	r2, sp, #16
    9260:	18d2      	adds	r2, r2, r3
    9262:	5cc1      	ldrb	r1, [r0, r3]
    9264:	7051      	strb	r1, [r2, #1]
    9266:	3301      	adds	r3, #1
	for (i=0;i<8;i++)
    9268:	2b08      	cmp	r3, #8
    926a:	d1f8      	bne.n	925e <DataEncrypt+0x56>
	}
	for (i=0;i<4;i++)
	{
		CTR_Nonce_and_Counter[i+9] = FrameCounter.v[i];
    926c:	ab04      	add	r3, sp, #16
    926e:	725c      	strb	r4, [r3, #9]
    9270:	0a22      	lsrs	r2, r4, #8
    9272:	729a      	strb	r2, [r3, #10]
    9274:	0c22      	lsrs	r2, r4, #16
    9276:	72da      	strb	r2, [r3, #11]
    9278:	0e24      	lsrs	r4, r4, #24
    927a:	731c      	strb	r4, [r3, #12]
	}
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    927c:	2204      	movs	r2, #4
    927e:	735a      	strb	r2, [r3, #13]
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    9280:	2200      	movs	r2, #0
    9282:	739a      	strb	r2, [r3, #14]
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
    9284:	73da      	strb	r2, [r3, #15]

	for (i=0;i<iterations+1;i++)
    9286:	1c73      	adds	r3, r6, #1
    9288:	4699      	mov	r9, r3
    928a:	2300      	movs	r3, #0
    928c:	469b      	mov	fp, r3
    928e:	9303      	str	r3, [sp, #12]
    9290:	464b      	mov	r3, r9
    9292:	2b00      	cmp	r3, #0
    9294:	dd2f      	ble.n	92f6 <DataEncrypt+0xee>
	{
		for (j=0;j<16;j++)
		{
			block[j] = CTR_Nonce_and_Counter[j];
    9296:	ac08      	add	r4, sp, #32
    9298:	ad04      	add	r5, sp, #16
		}
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    929a:	4b1d      	ldr	r3, [pc, #116]	; (9310 <DataEncrypt+0x108>)
    929c:	469a      	mov	sl, r3
		for (j=0;j<16;j++)
		{
			if (CTR_Nonce_and_Counter[15] == 0)
			{
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    929e:	4e1d      	ldr	r6, [pc, #116]	; (9314 <DataEncrypt+0x10c>)
    92a0:	e017      	b.n	92d2 <DataEncrypt+0xca>
			}
			else
			{
				Payloadinfo[j+(i-1)*16] = block[j] ^ Payloadinfo[j+(i-1)*16];
    92a2:	5d1a      	ldrb	r2, [r3, r4]
    92a4:	5ccf      	ldrb	r7, [r1, r3]
    92a6:	407a      	eors	r2, r7
    92a8:	54ca      	strb	r2, [r1, r3]
    92aa:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    92ac:	2b10      	cmp	r3, #16
    92ae:	d007      	beq.n	92c0 <DataEncrypt+0xb8>
			if (CTR_Nonce_and_Counter[15] == 0)
    92b0:	2800      	cmp	r0, #0
    92b2:	d1f6      	bne.n	92a2 <DataEncrypt+0x9a>
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    92b4:	5d1a      	ldrb	r2, [r3, r4]
    92b6:	4667      	mov	r7, ip
    92b8:	5cff      	ldrb	r7, [r7, r3]
    92ba:	407a      	eors	r2, r7
    92bc:	54f2      	strb	r2, [r6, r3]
    92be:	e7f4      	b.n	92aa <DataEncrypt+0xa2>
			}
		}
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next operation
    92c0:	3001      	adds	r0, #1
    92c2:	73e8      	strb	r0, [r5, #15]
	for (i=0;i<iterations+1;i++)
    92c4:	9f03      	ldr	r7, [sp, #12]
    92c6:	3701      	adds	r7, #1
    92c8:	b2bb      	uxth	r3, r7
    92ca:	9303      	str	r3, [sp, #12]
    92cc:	469b      	mov	fp, r3
    92ce:	454b      	cmp	r3, r9
    92d0:	da11      	bge.n	92f6 <DataEncrypt+0xee>
		CTR_Nonce_and_Counter[i+1] = MACInitParams.PAddress[i];
    92d2:	2300      	movs	r3, #0
			block[j] = CTR_Nonce_and_Counter[j];
    92d4:	5d5a      	ldrb	r2, [r3, r5]
    92d6:	551a      	strb	r2, [r3, r4]
    92d8:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    92da:	2b10      	cmp	r3, #16
    92dc:	d1fa      	bne.n	92d4 <DataEncrypt+0xcc>
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    92de:	490e      	ldr	r1, [pc, #56]	; (9318 <DataEncrypt+0x110>)
    92e0:	0020      	movs	r0, r4
    92e2:	47d0      	blx	sl
			if (CTR_Nonce_and_Counter[15] == 0)
    92e4:	7be8      	ldrb	r0, [r5, #15]
				Payloadinfo[j+(i-1)*16] = block[j] ^ Payloadinfo[j+(i-1)*16];
    92e6:	4659      	mov	r1, fp
    92e8:	3901      	subs	r1, #1
    92ea:	0109      	lsls	r1, r1, #4
    92ec:	2300      	movs	r3, #0
    92ee:	4441      	add	r1, r8
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    92f0:	4a0a      	ldr	r2, [pc, #40]	; (931c <DataEncrypt+0x114>)
    92f2:	4694      	mov	ip, r2
    92f4:	e7dc      	b.n	92b0 <DataEncrypt+0xa8>
	}
	return true;

}
    92f6:	2001      	movs	r0, #1
    92f8:	b00d      	add	sp, #52	; 0x34
    92fa:	bc3c      	pop	{r2, r3, r4, r5}
    92fc:	4690      	mov	r8, r2
    92fe:	4699      	mov	r9, r3
    9300:	46a2      	mov	sl, r4
    9302:	46ab      	mov	fp, r5
    9304:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9306:	46c0      	nop			; (mov r8, r8)
    9308:	20002284 	.word	0x20002284
    930c:	000090dd 	.word	0x000090dd
    9310:	0000a465 	.word	0x0000a465
    9314:	200022b8 	.word	0x200022b8
    9318:	000171b0 	.word	0x000171b0
    931c:	200022d0 	.word	0x200022d0

00009320 <validate_mic>:
// Validates the Received mic with the mic computed from data packet decryption.
bool validate_mic(void)
{
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1])
    9320:	4b08      	ldr	r3, [pc, #32]	; (9344 <validate_mic+0x24>)
    9322:	781a      	ldrb	r2, [r3, #0]
    9324:	4b08      	ldr	r3, [pc, #32]	; (9348 <validate_mic+0x28>)
    9326:	781b      	ldrb	r3, [r3, #0]
	{
		return false;
    9328:	2000      	movs	r0, #0
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1])
    932a:	429a      	cmp	r2, r3
    932c:	d000      	beq.n	9330 <validate_mic+0x10>
	}
	else
	{
		return true;
	}
}
    932e:	4770      	bx	lr
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1])
    9330:	4b04      	ldr	r3, [pc, #16]	; (9344 <validate_mic+0x24>)
    9332:	7858      	ldrb	r0, [r3, #1]
    9334:	4b04      	ldr	r3, [pc, #16]	; (9348 <validate_mic+0x28>)
    9336:	785b      	ldrb	r3, [r3, #1]
    9338:	1ac0      	subs	r0, r0, r3
    933a:	4243      	negs	r3, r0
    933c:	4158      	adcs	r0, r3
    933e:	b2c0      	uxtb	r0, r0
    9340:	e7f5      	b.n	932e <validate_mic+0xe>
    9342:	46c0      	nop			; (mov r8, r8)
    9344:	200022b8 	.word	0x200022b8
    9348:	200022e0 	.word	0x200022e0

0000934c <DataDecrypt>:
 *      None
 *
 *****************************************************************************************/
bool DataDecrypt(uint8_t *Payload, uint8_t *PayloadLen, uint8_t *SourceIEEEAddress,
API_UINT32_UNION FrameCounter, uint8_t FrameControl)
{
    934c:	b5f0      	push	{r4, r5, r6, r7, lr}
    934e:	46de      	mov	lr, fp
    9350:	4657      	mov	r7, sl
    9352:	464e      	mov	r6, r9
    9354:	4645      	mov	r5, r8
    9356:	b5e0      	push	{r5, r6, r7, lr}
    9358:	b091      	sub	sp, #68	; 0x44
    935a:	4681      	mov	r9, r0
    935c:	9106      	str	r1, [sp, #24]
    935e:	9204      	str	r2, [sp, #16]
    9360:	9305      	str	r3, [sp, #20]
    9362:	ab1a      	add	r3, sp, #104	; 0x68
    9364:	781b      	ldrb	r3, [r3, #0]
    9366:	9307      	str	r3, [sp, #28]
	uint16_t i ;
	uint8_t iterations , block[16] , j , CTR_Nonce_and_Counter[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = *PayloadLen/16;
    9368:	7809      	ldrb	r1, [r1, #0]
    936a:	090a      	lsrs	r2, r1, #4
	if (*PayloadLen % 16 != 0) iterations++;
    936c:	070b      	lsls	r3, r1, #28
    936e:	d000      	beq.n	9372 <DataDecrypt+0x26>
    9370:	3201      	adds	r2, #1

	//mic_generator(&Payloadinfo[0] , *Payload_len);

	for (i=*PayloadLen;i<iterations *16 ; i++ )
    9372:	b28b      	uxth	r3, r1
    9374:	0010      	movs	r0, r2
    9376:	0112      	lsls	r2, r2, #4
    9378:	4291      	cmp	r1, r2
    937a:	da07      	bge.n	938c <DataDecrypt+0x40>
	{
		Payload[i] = 0; // Padding
    937c:	2100      	movs	r1, #0
    937e:	464c      	mov	r4, r9
    9380:	54e1      	strb	r1, [r4, r3]
	for (i=*PayloadLen;i<iterations *16 ; i++ )
    9382:	3301      	adds	r3, #1
    9384:	b29b      	uxth	r3, r3
    9386:	4293      	cmp	r3, r2
    9388:	dbfa      	blt.n	9380 <DataDecrypt+0x34>
    938a:	46a1      	mov	r9, r4
	}
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    938c:	2201      	movs	r2, #1
    938e:	ab08      	add	r3, sp, #32
    9390:	701a      	strb	r2, [r3, #0]
    9392:	2300      	movs	r3, #0
	for (i=0;i<8;i++)
	{
		CTR_Nonce_and_Counter[i+1] = SourceIEEEAddress[i];
    9394:	9c04      	ldr	r4, [sp, #16]
    9396:	aa08      	add	r2, sp, #32
    9398:	18d2      	adds	r2, r2, r3
    939a:	5ce1      	ldrb	r1, [r4, r3]
    939c:	7051      	strb	r1, [r2, #1]
    939e:	3301      	adds	r3, #1
	for (i=0;i<8;i++)
    93a0:	2b08      	cmp	r3, #8
    93a2:	d1f8      	bne.n	9396 <DataDecrypt+0x4a>
	}
	for (i=0;i<4;i++)
	{
		CTR_Nonce_and_Counter[i+9] = FrameCounter.v[i];
    93a4:	ab08      	add	r3, sp, #32
    93a6:	9905      	ldr	r1, [sp, #20]
    93a8:	7259      	strb	r1, [r3, #9]
    93aa:	0a0a      	lsrs	r2, r1, #8
    93ac:	729a      	strb	r2, [r3, #10]
    93ae:	0c0a      	lsrs	r2, r1, #16
    93b0:	72da      	strb	r2, [r3, #11]
    93b2:	0e0a      	lsrs	r2, r1, #24
    93b4:	731a      	strb	r2, [r3, #12]
	}
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode
    93b6:	2204      	movs	r2, #4
    93b8:	735a      	strb	r2, [r3, #13]
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    93ba:	2200      	movs	r2, #0
    93bc:	739a      	strb	r2, [r3, #14]
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
    93be:	73da      	strb	r2, [r3, #15]


	for (i=0;i<iterations+1;i++)
    93c0:	1c43      	adds	r3, r0, #1
    93c2:	469a      	mov	sl, r3
    93c4:	2500      	movs	r5, #0
    93c6:	2300      	movs	r3, #0
    93c8:	4698      	mov	r8, r3
    93ca:	4653      	mov	r3, sl
    93cc:	2b00      	cmp	r3, #0
    93ce:	dd2e      	ble.n	942e <DataDecrypt+0xe2>
	{
		for (j=0;j<16;j++)
		{
			block[j] = CTR_Nonce_and_Counter[j];
    93d0:	ac0c      	add	r4, sp, #48	; 0x30
    93d2:	ae08      	add	r6, sp, #32
		}
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    93d4:	4b26      	ldr	r3, [pc, #152]	; (9470 <DataDecrypt+0x124>)
    93d6:	469b      	mov	fp, r3
		for (j=0;j<16;j++)
		{
			if (CTR_Nonce_and_Counter[15] == 0)
			{
				CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    93d8:	4f26      	ldr	r7, [pc, #152]	; (9474 <DataDecrypt+0x128>)
    93da:	4643      	mov	r3, r8
    93dc:	9303      	str	r3, [sp, #12]
    93de:	46a8      	mov	r8, r5
    93e0:	e014      	b.n	940c <DataDecrypt+0xc0>
			}
			else
			{
				Payload[j+(i-1)*16] = block[j] ^ Payload[j+(i-1)*16];
    93e2:	5d1a      	ldrb	r2, [r3, r4]
    93e4:	5ce9      	ldrb	r1, [r5, r3]
    93e6:	404a      	eors	r2, r1
    93e8:	54ea      	strb	r2, [r5, r3]
    93ea:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    93ec:	2b10      	cmp	r3, #16
    93ee:	d004      	beq.n	93fa <DataDecrypt+0xae>
			if (CTR_Nonce_and_Counter[15] == 0)
    93f0:	2800      	cmp	r0, #0
    93f2:	d1f6      	bne.n	93e2 <DataDecrypt+0x96>
				CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    93f4:	5d1a      	ldrb	r2, [r3, r4]
    93f6:	54fa      	strb	r2, [r7, r3]
    93f8:	e7f7      	b.n	93ea <DataDecrypt+0x9e>
			}
		}
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next opration
    93fa:	3001      	adds	r0, #1
    93fc:	73f0      	strb	r0, [r6, #15]
	for (i=0;i<iterations+1;i++)
    93fe:	9d03      	ldr	r5, [sp, #12]
    9400:	3501      	adds	r5, #1
    9402:	b2ab      	uxth	r3, r5
    9404:	9303      	str	r3, [sp, #12]
    9406:	4698      	mov	r8, r3
    9408:	4553      	cmp	r3, sl
    940a:	da10      	bge.n	942e <DataDecrypt+0xe2>
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    940c:	2300      	movs	r3, #0
			block[j] = CTR_Nonce_and_Counter[j];
    940e:	5d9a      	ldrb	r2, [r3, r6]
    9410:	551a      	strb	r2, [r3, r4]
    9412:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    9414:	2b10      	cmp	r3, #16
    9416:	d1fa      	bne.n	940e <DataDecrypt+0xc2>
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    9418:	4917      	ldr	r1, [pc, #92]	; (9478 <DataDecrypt+0x12c>)
    941a:	0020      	movs	r0, r4
    941c:	47d8      	blx	fp
			if (CTR_Nonce_and_Counter[15] == 0)
    941e:	7bf0      	ldrb	r0, [r6, #15]
				Payload[j+(i-1)*16] = block[j] ^ Payload[j+(i-1)*16];
    9420:	4642      	mov	r2, r8
    9422:	3a01      	subs	r2, #1
    9424:	0112      	lsls	r2, r2, #4
    9426:	2300      	movs	r3, #0
    9428:	444a      	add	r2, r9
    942a:	0015      	movs	r5, r2
    942c:	e7e0      	b.n	93f0 <DataDecrypt+0xa4>
	}
	*PayloadLen = *PayloadLen-4;
    942e:	9b06      	ldr	r3, [sp, #24]
    9430:	7819      	ldrb	r1, [r3, #0]
    9432:	3904      	subs	r1, #4
    9434:	b2c9      	uxtb	r1, r1
    9436:	7019      	strb	r1, [r3, #0]
	mic_generator(&Payload[0] , *PayloadLen , FrameControl  , FrameCounter , SourceIEEEAddress);
    9438:	9b04      	ldr	r3, [sp, #16]
    943a:	9300      	str	r3, [sp, #0]
    943c:	9b05      	ldr	r3, [sp, #20]
    943e:	9a07      	ldr	r2, [sp, #28]
    9440:	4648      	mov	r0, r9
    9442:	4c0e      	ldr	r4, [pc, #56]	; (947c <DataDecrypt+0x130>)
    9444:	47a0      	blx	r4
    9446:	2300      	movs	r3, #0
	for (i=0;i<16;i++)
	{
		final_mic_value[i] = CTR_mic[i] ^ CBC_mic[i];
    9448:	4d0d      	ldr	r5, [pc, #52]	; (9480 <DataDecrypt+0x134>)
    944a:	4c0a      	ldr	r4, [pc, #40]	; (9474 <DataDecrypt+0x128>)
    944c:	480d      	ldr	r0, [pc, #52]	; (9484 <DataDecrypt+0x138>)
    944e:	5ce2      	ldrb	r2, [r4, r3]
    9450:	5cc1      	ldrb	r1, [r0, r3]
    9452:	404a      	eors	r2, r1
    9454:	54ea      	strb	r2, [r5, r3]
    9456:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    9458:	2b10      	cmp	r3, #16
    945a:	d1f8      	bne.n	944e <DataDecrypt+0x102>
	}
	return validate_mic();
    945c:	4b0a      	ldr	r3, [pc, #40]	; (9488 <DataDecrypt+0x13c>)
    945e:	4798      	blx	r3

}
    9460:	b011      	add	sp, #68	; 0x44
    9462:	bc3c      	pop	{r2, r3, r4, r5}
    9464:	4690      	mov	r8, r2
    9466:	4699      	mov	r9, r3
    9468:	46a2      	mov	sl, r4
    946a:	46ab      	mov	fp, r5
    946c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    946e:	46c0      	nop			; (mov r8, r8)
    9470:	0000a465 	.word	0x0000a465
    9474:	200022a8 	.word	0x200022a8
    9478:	000171b0 	.word	0x000171b0
    947c:	000090dd 	.word	0x000090dd
    9480:	200022b8 	.word	0x200022b8
    9484:	200022d0 	.word	0x200022d0
    9488:	00009321 	.word	0x00009321

0000948c <MiMAC_Set>:
     * Remarks:
     *      None
     *
     *****************************************************************************************/
bool MiMAC_Set(mac_set_params_t id, uint8_t *value)
{
    948c:	b510      	push	{r4, lr}
    switch(id)
    948e:	2800      	cmp	r0, #0
    9490:	d109      	bne.n	94a6 <MiMAC_Set+0x1a>
    {
      case MAC_CHANNEL:
      {
         if(*value > LAST_CHANNEL_NUM) //26 // TODO: this check is necessary here? as we may connect a sub-gig or a 2.4gig?
    9492:	780b      	ldrb	r3, [r1, #0]
    9494:	2b19      	cmp	r3, #25
    9496:	d807      	bhi.n	94a8 <MiMAC_Set+0x1c>
         {
           return false;
         }
          MACCurrentChannel = *value;
    9498:	4a04      	ldr	r2, [pc, #16]	; (94ac <MiMAC_Set+0x20>)
    949a:	7013      	strb	r3, [r2, #0]
          PHY_SetChannel(MACCurrentChannel);
    949c:	0018      	movs	r0, r3
    949e:	4b04      	ldr	r3, [pc, #16]	; (94b0 <MiMAC_Set+0x24>)
    94a0:	4798      	blx	r3
          return true;
    94a2:	2001      	movs	r0, #1
    94a4:	e000      	b.n	94a8 <MiMAC_Set+0x1c>
      break;

     default:
     break;
    }
    return false;
    94a6:	2000      	movs	r0, #0
}
    94a8:	bd10      	pop	{r4, pc}
    94aa:	46c0      	nop			; (mov r8, r8)
    94ac:	200022f2 	.word	0x200022f2
    94b0:	0000a3b1 	.word	0x0000a3b1

000094b4 <MiMAC_Init>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_Init(MACINIT_PARAM initValue)
{
    94b4:	b530      	push	{r4, r5, lr}
    94b6:	b083      	sub	sp, #12
    94b8:	466c      	mov	r4, sp
    94ba:	9000      	str	r0, [sp, #0]
    94bc:	9101      	str	r1, [sp, #4]
	uint8_t i;

	PHY_Init();
    94be:	4b10      	ldr	r3, [pc, #64]	; (9500 <MiMAC_Init+0x4c>)
    94c0:	4798      	blx	r3
	MACInitParams = initValue;
    94c2:	4d10      	ldr	r5, [pc, #64]	; (9504 <MiMAC_Init+0x50>)
    94c4:	002b      	movs	r3, r5
    94c6:	cc06      	ldmia	r4!, {r1, r2}
    94c8:	c306      	stmia	r3!, {r1, r2}
	uint16_t x =  PHY_RandomReq();
    94ca:	4b0f      	ldr	r3, [pc, #60]	; (9508 <MiMAC_Init+0x54>)
    94cc:	4798      	blx	r3
    94ce:	0004      	movs	r4, r0
	// Set RF mode
	PHY_SetRxState(true);
    94d0:	2001      	movs	r0, #1
    94d2:	4b0e      	ldr	r3, [pc, #56]	; (950c <MiMAC_Init+0x58>)
    94d4:	4798      	blx	r3
	IEEESeqNum =   x & 0xff;
    94d6:	4b0e      	ldr	r3, [pc, #56]	; (9510 <MiMAC_Init+0x5c>)
    94d8:	701c      	strb	r4, [r3, #0]

	// Set Node Address
	PHY_SetIEEEAddr(MACInitParams.PAddress);
    94da:	6868      	ldr	r0, [r5, #4]
    94dc:	4b0d      	ldr	r3, [pc, #52]	; (9514 <MiMAC_Init+0x60>)
    94de:	4798      	blx	r3

	for (i = 0; i < BANK_SIZE; i++)
	{
		RxBuffer[i].PayloadLen = 0;
    94e0:	4b0d      	ldr	r3, [pc, #52]	; (9518 <MiMAC_Init+0x64>)
    94e2:	2200      	movs	r2, #0
    94e4:	701a      	strb	r2, [r3, #0]
    94e6:	2102      	movs	r1, #2
    94e8:	31ff      	adds	r1, #255	; 0xff
    94ea:	545a      	strb	r2, [r3, r1]
    94ec:	490b      	ldr	r1, [pc, #44]	; (951c <MiMAC_Init+0x68>)
    94ee:	545a      	strb	r2, [r3, r1]
    94f0:	490b      	ldr	r1, [pc, #44]	; (9520 <MiMAC_Init+0x6c>)
    94f2:	545a      	strb	r2, [r3, r1]
				OutgoingFrameCounter.Val = 0;
				PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
				OutgoingFrameCounter.Val = 1;
			}
		#else
			OutgoingFrameCounter.Val = 1;
    94f4:	3201      	adds	r2, #1
    94f6:	4b0b      	ldr	r3, [pc, #44]	; (9524 <MiMAC_Init+0x70>)
    94f8:	601a      	str	r2, [r3, #0]
		#endif
	#endif

	return true;
}
    94fa:	2001      	movs	r0, #1
    94fc:	b003      	add	sp, #12
    94fe:	bd30      	pop	{r4, r5, pc}
    9500:	0000a2f9 	.word	0x0000a2f9
    9504:	20002284 	.word	0x20002284
    9508:	0000a44d 	.word	0x0000a44d
    950c:	0000a32d 	.word	0x0000a32d
    9510:	20002179 	.word	0x20002179
    9514:	0000a471 	.word	0x0000a471
    9518:	200023fc 	.word	0x200023fc
    951c:	00000202 	.word	0x00000202
    9520:	00000303 	.word	0x00000303
    9524:	200022cc 	.word	0x200022cc

00009528 <MiMAC_SendPacket>:

bool MiMAC_SendPacket( MAC_TRANS_PARAM transParam,
         uint8_t *MACPayload,
         uint8_t MACPayloadLen, uint8_t msghandle,
         DataConf_callback_t ConfCallback)
{
    9528:	b5f0      	push	{r4, r5, r6, r7, lr}
    952a:	46de      	mov	lr, fp
    952c:	4657      	mov	r7, sl
    952e:	464e      	mov	r6, r9
    9530:	4645      	mov	r5, r8
    9532:	b5e0      	push	{r5, r6, r7, lr}
    9534:	b087      	sub	sp, #28
    9536:	af03      	add	r7, sp, #12
    9538:	1c04      	adds	r4, r0, #0
    953a:	9003      	str	r0, [sp, #12]
    953c:	0008      	movs	r0, r1
    953e:	9104      	str	r1, [sp, #16]
    9540:	0015      	movs	r5, r2
    9542:	0a2d      	lsrs	r5, r5, #8
    9544:	9205      	str	r2, [sp, #20]
    9546:	9300      	str	r3, [sp, #0]
    9548:	ab11      	add	r3, sp, #68	; 0x44
    954a:	781b      	ldrb	r3, [r3, #0]
    954c:	469a      	mov	sl, r3
    954e:	b2e4      	uxtb	r4, r4
    9550:	06a6      	lsls	r6, r4, #26
    9552:	0ff6      	lsrs	r6, r6, #31
    9554:	9002      	str	r0, [sp, #8]
    9556:	b2d3      	uxtb	r3, r2
    9558:	469c      	mov	ip, r3
    955a:	b2ed      	uxtb	r5, r5
    uint8_t headerLength;
    uint8_t loc = 0;
    uint8_t i = 0;

	uint8_t frameControl = 0;
	dataConfAvailable = false;
    955c:	2200      	movs	r2, #0
    955e:	4bc4      	ldr	r3, [pc, #784]	; (9870 <MiMAC_SendPacket+0x348>)
    9560:	701a      	strb	r2, [r3, #0]
	#ifndef TARGET_SMALL
		bool IntraPAN;
	#endif
	
	MACdatatransParam = transParam;
    9562:	4bc4      	ldr	r3, [pc, #784]	; (9874 <MiMAC_SendPacket+0x34c>)
    9564:	cf07      	ldmia	r7!, {r0, r1, r2}
    9566:	c307      	stmia	r3!, {r0, r1, r2}

    if (transParam.flags.bits.broadcast)
    9568:	0763      	lsls	r3, r4, #29
    956a:	d501      	bpl.n	9570 <MiMAC_SendPacket+0x48>
    {
        transParam.altDestAddr = true;
    956c:	2301      	movs	r3, #1
    956e:	469c      	mov	ip, r3
    }

    if (transParam.flags.bits.secEn)
    9570:	2308      	movs	r3, #8
    9572:	4023      	ands	r3, r4
    9574:	001a      	movs	r2, r3
    {
        transParam.altSrcAddr = false;
    9576:	4253      	negs	r3, r2
    9578:	4153      	adcs	r3, r2
    957a:	425b      	negs	r3, r3
    957c:	401d      	ands	r5, r3
    }

    // set the frame control in variable i
    if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND)
    957e:	2303      	movs	r3, #3
    9580:	4023      	ands	r3, r4
    9582:	2b01      	cmp	r3, #1
    9584:	d04d      	beq.n	9622 <MiMAC_SendPacket+0xfa>
    {
        frameControl = 0x03;
    } else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA)
    {
        frameControl = 0x01;
    9586:	2201      	movs	r2, #1
    9588:	4691      	mov	r9, r2
    } else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA)
    958a:	2b00      	cmp	r3, #0
    958c:	d004      	beq.n	9598 <MiMAC_SendPacket+0x70>
    }
	else if (transParam.flags.bits.packetType == PACKET_TYPE_ACK)
    {
        frameControl = 0x02;
    958e:	1e9a      	subs	r2, r3, #2
    9590:	4251      	negs	r1, r2
    9592:	4151      	adcs	r1, r2
    9594:	004a      	lsls	r2, r1, #1
    9596:	4691      	mov	r9, r2
    }
    // decide the header length for different addressing mode
#ifndef TARGET_SMALL
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    9598:	aa03      	add	r2, sp, #12
    959a:	8952      	ldrh	r2, [r2, #10]
    959c:	48b6      	ldr	r0, [pc, #728]	; (9878 <MiMAC_SendPacket+0x350>)
    959e:	8800      	ldrh	r0, [r0, #0]
    95a0:	4290      	cmp	r0, r2
    95a2:	d041      	beq.n	9628 <MiMAC_SendPacket+0x100>
    }
#ifndef TARGET_SMALL
    else
    {
        headerLength = 7;
        IntraPAN = false;
    95a4:	2200      	movs	r2, #0
    95a6:	4693      	mov	fp, r2
        headerLength = 7;
    95a8:	3207      	adds	r2, #7
    }
#endif

    if (transParam.altDestAddr)
    95aa:	46e0      	mov	r8, ip
    {
        headerLength += 2;
    } else
    {
        headerLength += 8;
    95ac:	0017      	movs	r7, r2
    95ae:	3708      	adds	r7, #8
    if (transParam.altDestAddr)
    95b0:	4661      	mov	r1, ip
    95b2:	2900      	cmp	r1, #0
    95b4:	d000      	beq.n	95b8 <MiMAC_SendPacket+0x90>
        headerLength += 2;
    95b6:	1c97      	adds	r7, r2, #2
    }

    if (transParam.altSrcAddr)
    95b8:	2d00      	cmp	r5, #0
    95ba:	d044      	beq.n	9646 <MiMAC_SendPacket+0x11e>
    {
        headerLength += 2;
    95bc:	3702      	adds	r7, #2
    95be:	b2fa      	uxtb	r2, r7
    95c0:	9201      	str	r2, [sp, #4]
    } else
    {
        headerLength += 8;
    }

    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false)
    95c2:	2224      	movs	r2, #36	; 0x24
    95c4:	4014      	ands	r4, r2
    95c6:	2c20      	cmp	r4, #32
    95c8:	d041      	beq.n	964e <MiMAC_SendPacket+0x126>
    {
        frameControl |= 0x20;
    }

    // use PACKET_TYPE_RESERVE to represent beacon. Fixed format for beacon packet
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    95ca:	2b03      	cmp	r3, #3
    95cc:	d044      	beq.n	9658 <MiMAC_SendPacket+0x130>
        IntraPAN = false;
#endif
        transParam.altSrcAddr = true;
        transParam.flags.bits.ackReq = false;
    }
	if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND) 
    95ce:	aa03      	add	r2, sp, #12
    95d0:	0171      	lsls	r1, r6, #5
    95d2:	7813      	ldrb	r3, [r2, #0]
    95d4:	2020      	movs	r0, #32
    95d6:	4383      	bics	r3, r0
    95d8:	430b      	orrs	r3, r1
    95da:	7013      	strb	r3, [r2, #0]
    95dc:	2203      	movs	r2, #3
    95de:	4013      	ands	r3, r2
    95e0:	2b01      	cmp	r3, #1
    95e2:	d041      	beq.n	9668 <MiMAC_SendPacket+0x140>
    {
        transParam.flags.bits.ackReq = false;
    }

#ifdef ENABLE_SECURITY
    if (transParam.flags.bits.secEn)
    95e4:	ab03      	add	r3, sp, #12
    95e6:	0172      	lsls	r2, r6, #5
    95e8:	781c      	ldrb	r4, [r3, #0]
    95ea:	2120      	movs	r1, #32
    95ec:	438c      	bics	r4, r1
    95ee:	4314      	orrs	r4, r2
    95f0:	701c      	strb	r4, [r3, #0]
    95f2:	b2e4      	uxtb	r4, r4
    95f4:	0723      	lsls	r3, r4, #28
    95f6:	d439      	bmi.n	966c <MiMAC_SendPacket+0x144>
		// 4 byte mic and 5 byte outgoing frame counter
		packet[loc++] = MACPayloadLen+headerLength+9;
    } else
#endif
    {
		packet[loc++] = MACPayloadLen+headerLength;
    95f8:	ab10      	add	r3, sp, #64	; 0x40
    95fa:	781b      	ldrb	r3, [r3, #0]
    95fc:	9a01      	ldr	r2, [sp, #4]
    95fe:	18d7      	adds	r7, r2, r3
    9600:	4b9e      	ldr	r3, [pc, #632]	; (987c <MiMAC_SendPacket+0x354>)
    9602:	701f      	strb	r7, [r3, #0]
    }

    // set frame control LSB
	packet[loc++] = frameControl;
    9604:	4b9d      	ldr	r3, [pc, #628]	; (987c <MiMAC_SendPacket+0x354>)
    9606:	464a      	mov	r2, r9
    9608:	705a      	strb	r2, [r3, #1]

    // set frame control MSB
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    960a:	43e3      	mvns	r3, r4
    960c:	079b      	lsls	r3, r3, #30
    960e:	d040      	beq.n	9692 <MiMAC_SendPacket+0x16a>
		packet[loc++] = 0x80;
        // sequence number
		packet[loc++] = IEEESeqNum++;
    } else
    {
        if (transParam.altDestAddr && transParam.altSrcAddr)
    9610:	4643      	mov	r3, r8
    9612:	2b00      	cmp	r3, #0
    9614:	d05f      	beq.n	96d6 <MiMAC_SendPacket+0x1ae>
    9616:	2d00      	cmp	r5, #0
    9618:	d045      	beq.n	96a6 <MiMAC_SendPacket+0x17e>
        {
			packet[loc++] = 0x88;
    961a:	2288      	movs	r2, #136	; 0x88
    961c:	4b97      	ldr	r3, [pc, #604]	; (987c <MiMAC_SendPacket+0x354>)
    961e:	709a      	strb	r2, [r3, #2]
    9620:	e044      	b.n	96ac <MiMAC_SendPacket+0x184>
        frameControl = 0x03;
    9622:	2203      	movs	r2, #3
    9624:	4691      	mov	r9, r2
    9626:	e7b7      	b.n	9598 <MiMAC_SendPacket+0x70>
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    9628:	4895      	ldr	r0, [pc, #596]	; (9880 <MiMAC_SendPacket+0x358>)
    962a:	4282      	cmp	r2, r0
    962c:	d007      	beq.n	963e <MiMAC_SendPacket+0x116>
        frameControl |= 0x40;
    962e:	2240      	movs	r2, #64	; 0x40
    9630:	4649      	mov	r1, r9
    9632:	4311      	orrs	r1, r2
    9634:	4689      	mov	r9, r1
        IntraPAN = true;
    9636:	3a3f      	subs	r2, #63	; 0x3f
    9638:	4693      	mov	fp, r2
        headerLength = 5;
    963a:	3204      	adds	r2, #4
        IntraPAN = true;
    963c:	e7b5      	b.n	95aa <MiMAC_SendPacket+0x82>
        IntraPAN = false;
    963e:	2200      	movs	r2, #0
    9640:	4693      	mov	fp, r2
        headerLength = 7;
    9642:	3207      	adds	r2, #7
    9644:	e7b1      	b.n	95aa <MiMAC_SendPacket+0x82>
        headerLength += 8;
    9646:	3708      	adds	r7, #8
    9648:	b2fa      	uxtb	r2, r7
    964a:	9201      	str	r2, [sp, #4]
    964c:	e7b9      	b.n	95c2 <MiMAC_SendPacket+0x9a>
        frameControl |= 0x20;
    964e:	3a04      	subs	r2, #4
    9650:	4649      	mov	r1, r9
    9652:	4311      	orrs	r1, r2
    9654:	4689      	mov	r9, r1
    9656:	e7b8      	b.n	95ca <MiMAC_SendPacket+0xa2>
        transParam.altSrcAddr = true;
    9658:	2501      	movs	r5, #1
        transParam.flags.bits.ackReq = false;
    965a:	2600      	movs	r6, #0
        IntraPAN = false;
    965c:	2300      	movs	r3, #0
    965e:	469b      	mov	fp, r3
        frameControl = 0x00;
    9660:	4699      	mov	r9, r3
        headerLength = 7;
    9662:	3307      	adds	r3, #7
    9664:	9301      	str	r3, [sp, #4]
    9666:	e7b2      	b.n	95ce <MiMAC_SendPacket+0xa6>
        transParam.flags.bits.ackReq = false;
    9668:	2600      	movs	r6, #0
    966a:	e7bb      	b.n	95e4 <MiMAC_SendPacket+0xbc>
        frameControl |= 0x08;
    966c:	2308      	movs	r3, #8
    966e:	464a      	mov	r2, r9
    9670:	431a      	orrs	r2, r3
    9672:	4691      	mov	r9, r2
		DataEncrypt(MACPayload, &MACPayloadLen, OutgoingFrameCounter, frameControl);
    9674:	4b83      	ldr	r3, [pc, #524]	; (9884 <MiMAC_SendPacket+0x35c>)
    9676:	681a      	ldr	r2, [r3, #0]
    9678:	464b      	mov	r3, r9
    967a:	a910      	add	r1, sp, #64	; 0x40
    967c:	9800      	ldr	r0, [sp, #0]
    967e:	4f82      	ldr	r7, [pc, #520]	; (9888 <MiMAC_SendPacket+0x360>)
    9680:	47b8      	blx	r7
		packet[loc++] = MACPayloadLen+headerLength+9;
    9682:	ab10      	add	r3, sp, #64	; 0x40
    9684:	781b      	ldrb	r3, [r3, #0]
    9686:	3309      	adds	r3, #9
    9688:	9a01      	ldr	r2, [sp, #4]
    968a:	18d7      	adds	r7, r2, r3
    968c:	4b7b      	ldr	r3, [pc, #492]	; (987c <MiMAC_SendPacket+0x354>)
    968e:	701f      	strb	r7, [r3, #0]
    9690:	e7b8      	b.n	9604 <MiMAC_SendPacket+0xdc>
		packet[loc++] = 0x80;
    9692:	4b7a      	ldr	r3, [pc, #488]	; (987c <MiMAC_SendPacket+0x354>)
    9694:	2280      	movs	r2, #128	; 0x80
    9696:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    9698:	497c      	ldr	r1, [pc, #496]	; (988c <MiMAC_SendPacket+0x364>)
    969a:	780a      	ldrb	r2, [r1, #0]
    969c:	1c50      	adds	r0, r2, #1
    969e:	7008      	strb	r0, [r1, #0]
    96a0:	70da      	strb	r2, [r3, #3]
    96a2:	2204      	movs	r2, #4
    96a4:	e03e      	b.n	9724 <MiMAC_SendPacket+0x1fc>

        } else if (transParam.altDestAddr && transParam.altSrcAddr == 0)
        {
			packet[loc++] = 0xC8;
    96a6:	22c8      	movs	r2, #200	; 0xc8
    96a8:	4b74      	ldr	r3, [pc, #464]	; (987c <MiMAC_SendPacket+0x354>)
    96aa:	709a      	strb	r2, [r3, #2]
        {
			packet[loc++] = 0xCC;
        }

        // sequence number
		packet[loc++] = IEEESeqNum++;
    96ac:	4b77      	ldr	r3, [pc, #476]	; (988c <MiMAC_SendPacket+0x364>)
    96ae:	781a      	ldrb	r2, [r3, #0]
    96b0:	1c51      	adds	r1, r2, #1
    96b2:	7019      	strb	r1, [r3, #0]
    96b4:	4b71      	ldr	r3, [pc, #452]	; (987c <MiMAC_SendPacket+0x354>)
    96b6:	70da      	strb	r2, [r3, #3]

        // destination PANID
		packet[loc++] = transParam.DestPANID.v[0];
    96b8:	aa03      	add	r2, sp, #12
    96ba:	7a91      	ldrb	r1, [r2, #10]
    96bc:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    96be:	7ad2      	ldrb	r2, [r2, #11]
    96c0:	715a      	strb	r2, [r3, #5]

        // destination address
        if (transParam.flags.bits.broadcast)
    96c2:	0763      	lsls	r3, r4, #29
    96c4:	d429      	bmi.n	971a <MiMAC_SendPacket+0x1f2>
			packet[loc++] = 0xFF;
        } else
        {
            if (transParam.altDestAddr)
            {
				packet[loc++] = transParam.DestAddress[0];
    96c6:	9902      	ldr	r1, [sp, #8]
    96c8:	780a      	ldrb	r2, [r1, #0]
    96ca:	4b6c      	ldr	r3, [pc, #432]	; (987c <MiMAC_SendPacket+0x354>)
    96cc:	719a      	strb	r2, [r3, #6]
				packet[loc++] = transParam.DestAddress[1];
    96ce:	784a      	ldrb	r2, [r1, #1]
    96d0:	71da      	strb	r2, [r3, #7]
    96d2:	2208      	movs	r2, #8
    96d4:	e026      	b.n	9724 <MiMAC_SendPacket+0x1fc>
        } else if (transParam.altDestAddr == 0 && transParam.altSrcAddr == 1)
    96d6:	2d00      	cmp	r5, #0
    96d8:	d00f      	beq.n	96fa <MiMAC_SendPacket+0x1d2>
			packet[loc++] = 0x8C;
    96da:	4b68      	ldr	r3, [pc, #416]	; (987c <MiMAC_SendPacket+0x354>)
    96dc:	228c      	movs	r2, #140	; 0x8c
    96de:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    96e0:	496a      	ldr	r1, [pc, #424]	; (988c <MiMAC_SendPacket+0x364>)
    96e2:	780a      	ldrb	r2, [r1, #0]
    96e4:	1c50      	adds	r0, r2, #1
    96e6:	7008      	strb	r0, [r1, #0]
    96e8:	70da      	strb	r2, [r3, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    96ea:	aa03      	add	r2, sp, #12
    96ec:	7a91      	ldrb	r1, [r2, #10]
    96ee:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    96f0:	7ad2      	ldrb	r2, [r2, #11]
    96f2:	715a      	strb	r2, [r3, #5]
        if (transParam.flags.bits.broadcast)
    96f4:	0763      	lsls	r3, r4, #29
    96f6:	d410      	bmi.n	971a <MiMAC_SendPacket+0x1f2>
    96f8:	e099      	b.n	982e <MiMAC_SendPacket+0x306>
			packet[loc++] = 0xCC;
    96fa:	4b60      	ldr	r3, [pc, #384]	; (987c <MiMAC_SendPacket+0x354>)
    96fc:	22cc      	movs	r2, #204	; 0xcc
    96fe:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    9700:	4962      	ldr	r1, [pc, #392]	; (988c <MiMAC_SendPacket+0x364>)
    9702:	780a      	ldrb	r2, [r1, #0]
    9704:	1c50      	adds	r0, r2, #1
    9706:	7008      	strb	r0, [r1, #0]
    9708:	70da      	strb	r2, [r3, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    970a:	aa03      	add	r2, sp, #12
    970c:	7a91      	ldrb	r1, [r2, #10]
    970e:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    9710:	7ad2      	ldrb	r2, [r2, #11]
    9712:	715a      	strb	r2, [r3, #5]
        if (transParam.flags.bits.broadcast)
    9714:	0763      	lsls	r3, r4, #29
    9716:	d400      	bmi.n	971a <MiMAC_SendPacket+0x1f2>
    9718:	e085      	b.n	9826 <MiMAC_SendPacket+0x2fe>
			packet[loc++] = 0xFF;
    971a:	4b58      	ldr	r3, [pc, #352]	; (987c <MiMAC_SendPacket+0x354>)
    971c:	22ff      	movs	r2, #255	; 0xff
    971e:	719a      	strb	r2, [r3, #6]
			packet[loc++] = 0xFF;
    9720:	71da      	strb	r2, [r3, #7]
    9722:	3af7      	subs	r2, #247	; 0xf7
                }
            }
        }
    }
	
	if(transParam.flags.bits.ackReq)
    9724:	a903      	add	r1, sp, #12
    9726:	0170      	lsls	r0, r6, #5
    9728:	780b      	ldrb	r3, [r1, #0]
    972a:	2420      	movs	r4, #32
    972c:	43a3      	bics	r3, r4
    972e:	4303      	orrs	r3, r0
    9730:	700b      	strb	r3, [r1, #0]
    9732:	069b      	lsls	r3, r3, #26
    9734:	d400      	bmi.n	9738 <MiMAC_SendPacket+0x210>
    9736:	e085      	b.n	9844 <MiMAC_SendPacket+0x31c>
	{
	 	AckSeqNum = IEEESeqNum-1;
    9738:	4b54      	ldr	r3, [pc, #336]	; (988c <MiMAC_SendPacket+0x364>)
    973a:	781b      	ldrb	r3, [r3, #0]
    973c:	3b01      	subs	r3, #1
    973e:	4954      	ldr	r1, [pc, #336]	; (9890 <MiMAC_SendPacket+0x368>)
    9740:	700b      	strb	r3, [r1, #0]
		 AckReqData = 1;
    9742:	2101      	movs	r1, #1
    9744:	4b53      	ldr	r3, [pc, #332]	; (9894 <MiMAC_SendPacket+0x36c>)
    9746:	7019      	strb	r1, [r3, #0]
	{
		AckReqData = 0;
	}
#ifndef TARGET_SMALL
    // source PANID if necessary
    if (IntraPAN == false)
    9748:	465b      	mov	r3, fp
    974a:	2b00      	cmp	r3, #0
    974c:	d109      	bne.n	9762 <MiMAC_SendPacket+0x23a>
    {
		packet[loc++] = MAC_PANID.v[0];
    974e:	1c53      	adds	r3, r2, #1
    9750:	b2db      	uxtb	r3, r3
    9752:	494a      	ldr	r1, [pc, #296]	; (987c <MiMAC_SendPacket+0x354>)
    9754:	4848      	ldr	r0, [pc, #288]	; (9878 <MiMAC_SendPacket+0x350>)
    9756:	7804      	ldrb	r4, [r0, #0]
    9758:	548c      	strb	r4, [r1, r2]
		packet[loc++] = MAC_PANID.v[1];
    975a:	3202      	adds	r2, #2
    975c:	b2d2      	uxtb	r2, r2
    975e:	7840      	ldrb	r0, [r0, #1]
    9760:	54c8      	strb	r0, [r1, r3]
    }
#endif

    // source address
    if (transParam.altSrcAddr)
    9762:	2d00      	cmp	r5, #0
    9764:	d100      	bne.n	9768 <MiMAC_SendPacket+0x240>
    9766:	e071      	b.n	984c <MiMAC_SendPacket+0x324>
    {
		packet[loc++] = myNetworkAddress.v[0];
    9768:	4944      	ldr	r1, [pc, #272]	; (987c <MiMAC_SendPacket+0x354>)
    976a:	484b      	ldr	r0, [pc, #300]	; (9898 <MiMAC_SendPacket+0x370>)
    976c:	7803      	ldrb	r3, [r0, #0]
    976e:	548b      	strb	r3, [r1, r2]
		packet[loc++] = myNetworkAddress.v[1];
    9770:	1c93      	adds	r3, r2, #2
    9772:	b2db      	uxtb	r3, r3
		packet[loc++] = myNetworkAddress.v[0];
    9774:	3201      	adds	r2, #1
		packet[loc++] = myNetworkAddress.v[1];
    9776:	b2d2      	uxtb	r2, r2
    9778:	7840      	ldrb	r0, [r0, #1]
    977a:	5488      	strb	r0, [r1, r2]
        {
			packet[loc++] = MACInitParams.PAddress[i];
        }
    }
#ifdef ENABLE_SECURITY
if (transParam.flags.bits.secEn)
    977c:	aa03      	add	r2, sp, #12
    977e:	0171      	lsls	r1, r6, #5
    9780:	7816      	ldrb	r6, [r2, #0]
    9782:	2020      	movs	r0, #32
    9784:	4386      	bics	r6, r0
    9786:	430e      	orrs	r6, r1
    9788:	7016      	strb	r6, [r2, #0]
    978a:	0732      	lsls	r2, r6, #28
    978c:	d515      	bpl.n	97ba <MiMAC_SendPacket+0x292>
    978e:	0019      	movs	r1, r3
    9790:	2200      	movs	r2, #0
{
	// fill the additional security aux header
	for (i = 0; i < 4; i++)
	{
		packet[loc++] = OutgoingFrameCounter.v[i];
    9792:	4e3a      	ldr	r6, [pc, #232]	; (987c <MiMAC_SendPacket+0x354>)
    9794:	4d3b      	ldr	r5, [pc, #236]	; (9884 <MiMAC_SendPacket+0x35c>)
    9796:	1c48      	adds	r0, r1, #1
    9798:	5cac      	ldrb	r4, [r5, r2]
    979a:	5474      	strb	r4, [r6, r1]
    979c:	3201      	adds	r2, #1
    979e:	b2c1      	uxtb	r1, r0
	for (i = 0; i < 4; i++)
    97a0:	2a04      	cmp	r2, #4
    97a2:	d1f8      	bne.n	9796 <MiMAC_SendPacket+0x26e>
    97a4:	1d1a      	adds	r2, r3, #4
    97a6:	b2d2      	uxtb	r2, r2
	}
	OutgoingFrameCounter.Val++;
    97a8:	4836      	ldr	r0, [pc, #216]	; (9884 <MiMAC_SendPacket+0x35c>)
    97aa:	6801      	ldr	r1, [r0, #0]
    97ac:	3101      	adds	r1, #1
    97ae:	6001      	str	r1, [r0, #0]
	{
		PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
	}
	#endif
	//copy myKeySequenceNumber
	packet[loc++] = myKeySequenceNumber;
    97b0:	3305      	adds	r3, #5
    97b2:	b2db      	uxtb	r3, r3
    97b4:	2000      	movs	r0, #0
    97b6:	4931      	ldr	r1, [pc, #196]	; (987c <MiMAC_SendPacket+0x354>)
    97b8:	5488      	strb	r0, [r1, r2]
    {
		packet[loc++] = MACPayload[i];
    }
#else
    // write the payload
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    97ba:	aa10      	add	r2, sp, #64	; 0x40
    97bc:	7816      	ldrb	r6, [r2, #0]
    97be:	2e00      	cmp	r6, #0
    97c0:	d053      	beq.n	986a <MiMAC_SendPacket+0x342>
    97c2:	9a00      	ldr	r2, [sp, #0]
    97c4:	18f1      	adds	r1, r6, r3
    97c6:	b2c9      	uxtb	r1, r1
    {
	    packet[loc++] = MACPayload[i];
    97c8:	4d2c      	ldr	r5, [pc, #176]	; (987c <MiMAC_SendPacket+0x354>)
    97ca:	1c58      	adds	r0, r3, #1
    97cc:	7814      	ldrb	r4, [r2, #0]
    97ce:	54ec      	strb	r4, [r5, r3]
    97d0:	3201      	adds	r2, #1
    97d2:	b2c3      	uxtb	r3, r0
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    97d4:	428b      	cmp	r3, r1
    97d6:	d1f8      	bne.n	97ca <MiMAC_SendPacket+0x2a2>
    }
	packet[loc++] = final_mic_value[0];
    97d8:	4828      	ldr	r0, [pc, #160]	; (987c <MiMAC_SendPacket+0x354>)
    97da:	4b30      	ldr	r3, [pc, #192]	; (989c <MiMAC_SendPacket+0x374>)
    97dc:	781a      	ldrb	r2, [r3, #0]
    97de:	5442      	strb	r2, [r0, r1]
    97e0:	1c4a      	adds	r2, r1, #1
	packet[loc++] = final_mic_value[1];
    97e2:	b2d2      	uxtb	r2, r2
    97e4:	785c      	ldrb	r4, [r3, #1]
    97e6:	5484      	strb	r4, [r0, r2]
    97e8:	1c8a      	adds	r2, r1, #2
	packet[loc++] = final_mic_value[2];
    97ea:	b2d2      	uxtb	r2, r2
    97ec:	789c      	ldrb	r4, [r3, #2]
    97ee:	5484      	strb	r4, [r0, r2]
    97f0:	3103      	adds	r1, #3
	packet[loc++] = final_mic_value[3];
    97f2:	b2c9      	uxtb	r1, r1
    97f4:	78db      	ldrb	r3, [r3, #3]
    97f6:	5443      	strb	r3, [r0, r1]
    } else
    {
        i = 0x01;
    }

    dataPointer = MACPayload;
    97f8:	4b29      	ldr	r3, [pc, #164]	; (98a0 <MiMAC_SendPacket+0x378>)
    97fa:	9a00      	ldr	r2, [sp, #0]
    97fc:	601a      	str	r2, [r3, #0]
	dataConfCallback = ConfCallback;
    97fe:	4b29      	ldr	r3, [pc, #164]	; (98a4 <MiMAC_SendPacket+0x37c>)
    9800:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9802:	601a      	str	r2, [r3, #0]
    dataHandle = msghandle;
    9804:	4b28      	ldr	r3, [pc, #160]	; (98a8 <MiMAC_SendPacket+0x380>)
    9806:	4652      	mov	r2, sl
    9808:	701a      	strb	r2, [r3, #0]
	MACdataPayloadLen = MACPayloadLen;
    980a:	4b28      	ldr	r3, [pc, #160]	; (98ac <MiMAC_SendPacket+0x384>)
    980c:	701e      	strb	r6, [r3, #0]
	//DataRetryCount = 0;

    // Now Trigger the Transmission of packet
    return PHY_DataReq(packet);					
    980e:	4b28      	ldr	r3, [pc, #160]	; (98b0 <MiMAC_SendPacket+0x388>)
    9810:	4798      	blx	r3
    9812:	1e43      	subs	r3, r0, #1
    9814:	4198      	sbcs	r0, r3
    9816:	b2c0      	uxtb	r0, r0
}
    9818:	b007      	add	sp, #28
    981a:	bc3c      	pop	{r2, r3, r4, r5}
    981c:	4690      	mov	r8, r2
    981e:	4699      	mov	r9, r3
    9820:	46a2      	mov	sl, r4
    9822:	46ab      	mov	fp, r5
    9824:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (transParam.altDestAddr)
    9826:	4643      	mov	r3, r8
    9828:	2b00      	cmp	r3, #0
    982a:	d000      	beq.n	982e <MiMAC_SendPacket+0x306>
    982c:	e74b      	b.n	96c6 <MiMAC_SendPacket+0x19e>
        transParam.flags.bits.ackReq = false;
    982e:	2300      	movs	r3, #0
					packet[loc++] = transParam.DestAddress[i];
    9830:	4812      	ldr	r0, [pc, #72]	; (987c <MiMAC_SendPacket+0x354>)
    9832:	9c02      	ldr	r4, [sp, #8]
    9834:	5ce1      	ldrb	r1, [r4, r3]
    9836:	181a      	adds	r2, r3, r0
    9838:	7191      	strb	r1, [r2, #6]
    983a:	3301      	adds	r3, #1
                for (i = 0; i < 8; i++)
    983c:	2b08      	cmp	r3, #8
    983e:	d1f9      	bne.n	9834 <MiMAC_SendPacket+0x30c>
					packet[loc++] = transParam.DestAddress[i];
    9840:	220e      	movs	r2, #14
    9842:	e76f      	b.n	9724 <MiMAC_SendPacket+0x1fc>
		AckReqData = 0;
    9844:	2100      	movs	r1, #0
    9846:	4b13      	ldr	r3, [pc, #76]	; (9894 <MiMAC_SendPacket+0x36c>)
    9848:	7019      	strb	r1, [r3, #0]
    984a:	e77d      	b.n	9748 <MiMAC_SendPacket+0x220>
			packet[loc++] = MACInitParams.PAddress[i];
    984c:	4b19      	ldr	r3, [pc, #100]	; (98b4 <MiMAC_SendPacket+0x38c>)
    984e:	6859      	ldr	r1, [r3, #4]
    9850:	0014      	movs	r4, r2
    9852:	3408      	adds	r4, #8
    9854:	b2e4      	uxtb	r4, r4
    9856:	4d09      	ldr	r5, [pc, #36]	; (987c <MiMAC_SendPacket+0x354>)
    9858:	1c53      	adds	r3, r2, #1
    985a:	b2db      	uxtb	r3, r3
    985c:	7808      	ldrb	r0, [r1, #0]
    985e:	54a8      	strb	r0, [r5, r2]
    9860:	3101      	adds	r1, #1
    9862:	001a      	movs	r2, r3
        for (i = 0; i < 8; i++)
    9864:	429c      	cmp	r4, r3
    9866:	d1f7      	bne.n	9858 <MiMAC_SendPacket+0x330>
    9868:	e788      	b.n	977c <MiMAC_SendPacket+0x254>
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    986a:	0019      	movs	r1, r3
    986c:	e7b4      	b.n	97d8 <MiMAC_SendPacket+0x2b0>
    986e:	46c0      	nop			; (mov r8, r8)
    9870:	20000486 	.word	0x20000486
    9874:	2000229c 	.word	0x2000229c
    9878:	200022f0 	.word	0x200022f0
    987c:	2000217c 	.word	0x2000217c
    9880:	0000ffff 	.word	0x0000ffff
    9884:	200022cc 	.word	0x200022cc
    9888:	00009209 	.word	0x00009209
    988c:	20002179 	.word	0x20002179
    9890:	20002178 	.word	0x20002178
    9894:	20000483 	.word	0x20000483
    9898:	2000227c 	.word	0x2000227c
    989c:	200022b8 	.word	0x200022b8
    98a0:	20000490 	.word	0x20000490
    98a4:	20000488 	.word	0x20000488
    98a8:	2000048c 	.word	0x2000048c
    98ac:	20000485 	.word	0x20000485
    98b0:	0000a3dd 	.word	0x0000a3dd
    98b4:	20002284 	.word	0x20002284

000098b8 <MiMAC_DiscardPacket>:
 *
 *****************************************************************************************/
void MiMAC_DiscardPacket(void)
{
	//re-enable buffer for next packets
	if (BankIndex < BANK_SIZE)
    98b8:	4b04      	ldr	r3, [pc, #16]	; (98cc <MiMAC_DiscardPacket+0x14>)
    98ba:	781b      	ldrb	r3, [r3, #0]
    98bc:	2b03      	cmp	r3, #3
    98be:	d804      	bhi.n	98ca <MiMAC_DiscardPacket+0x12>
	{
		RxBuffer[BankIndex].PayloadLen = 0;
    98c0:	021a      	lsls	r2, r3, #8
    98c2:	18d3      	adds	r3, r2, r3
    98c4:	2100      	movs	r1, #0
    98c6:	4a02      	ldr	r2, [pc, #8]	; (98d0 <MiMAC_DiscardPacket+0x18>)
    98c8:	5499      	strb	r1, [r3, r2]
	}
}
    98ca:	4770      	bx	lr
    98cc:	2000001b 	.word	0x2000001b
    98d0:	200023fc 	.word	0x200023fc

000098d4 <PHY_DataConf>:
 *      None
 *
 *****************************************************************************************/
void PHY_DataConf(uint8_t status)
{
	DataRetryCount = 0;
    98d4:	2200      	movs	r2, #0
    98d6:	4b04      	ldr	r3, [pc, #16]	; (98e8 <PHY_DataConf+0x14>)
    98d8:	701a      	strb	r2, [r3, #0]
	dataStatus = (miwi_status_t)status;
    98da:	4b04      	ldr	r3, [pc, #16]	; (98ec <PHY_DataConf+0x18>)
    98dc:	7018      	strb	r0, [r3, #0]
	dataConfAvailable = true;
    98de:	3201      	adds	r2, #1
    98e0:	4b03      	ldr	r3, [pc, #12]	; (98f0 <PHY_DataConf+0x1c>)
    98e2:	701a      	strb	r2, [r3, #0]
}
    98e4:	4770      	bx	lr
    98e6:	46c0      	nop			; (mov r8, r8)
    98e8:	20000484 	.word	0x20000484
    98ec:	200022c8 	.word	0x200022c8
    98f0:	20000486 	.word	0x20000486

000098f4 <MiMAC_RetryPacket>:
{
    98f4:	b510      	push	{r4, lr}
	DataRetryCount++;
    98f6:	4a0b      	ldr	r2, [pc, #44]	; (9924 <MiMAC_RetryPacket+0x30>)
    98f8:	7813      	ldrb	r3, [r2, #0]
    98fa:	3301      	adds	r3, #1
    98fc:	b2db      	uxtb	r3, r3
    98fe:	7013      	strb	r3, [r2, #0]
	if (DataRetryCount < DATA_RETRY_ATTEMPT)
    9900:	2b02      	cmp	r3, #2
    9902:	d904      	bls.n	990e <MiMAC_RetryPacket+0x1a>
		PHY_DataConf(NO_ACK); // No Ack response
    9904:	2003      	movs	r0, #3
    9906:	4b08      	ldr	r3, [pc, #32]	; (9928 <MiMAC_RetryPacket+0x34>)
    9908:	4798      	blx	r3
	bool status = false;
    990a:	2000      	movs	r0, #0
}
    990c:	bd10      	pop	{r4, pc}
		AckReqData = 1;
    990e:	2201      	movs	r2, #1
    9910:	4b06      	ldr	r3, [pc, #24]	; (992c <MiMAC_RetryPacket+0x38>)
    9912:	701a      	strb	r2, [r3, #0]
		status = PHY_DataReq(packet);
    9914:	4806      	ldr	r0, [pc, #24]	; (9930 <MiMAC_RetryPacket+0x3c>)
    9916:	4b07      	ldr	r3, [pc, #28]	; (9934 <MiMAC_RetryPacket+0x40>)
    9918:	4798      	blx	r3
    991a:	1e43      	subs	r3, r0, #1
    991c:	4198      	sbcs	r0, r3
    991e:	b2c0      	uxtb	r0, r0
    9920:	e7f4      	b.n	990c <MiMAC_RetryPacket+0x18>
    9922:	46c0      	nop			; (mov r8, r8)
    9924:	20000484 	.word	0x20000484
    9928:	000098d5 	.word	0x000098d5
    992c:	20000483 	.word	0x20000483
    9930:	2000217c 	.word	0x2000217c
    9934:	0000a3dd 	.word	0x0000a3dd

00009938 <MiMAC_ReceivedPacket>:
{
    9938:	b5f0      	push	{r4, r5, r6, r7, lr}
    993a:	46c6      	mov	lr, r8
    993c:	b500      	push	{lr}
    993e:	b088      	sub	sp, #32
	BankIndex = 0xFF;
    9940:	22ff      	movs	r2, #255	; 0xff
    9942:	4bcc      	ldr	r3, [pc, #816]	; (9c74 <MiMAC_ReceivedPacket+0x33c>)
    9944:	701a      	strb	r2, [r3, #0]
		if (RxBuffer[i].PayloadLen > 0)
    9946:	4bcc      	ldr	r3, [pc, #816]	; (9c78 <MiMAC_ReceivedPacket+0x340>)
    9948:	781b      	ldrb	r3, [r3, #0]
    994a:	2b00      	cmp	r3, #0
    994c:	d000      	beq.n	9950 <MiMAC_ReceivedPacket+0x18>
    994e:	e353      	b.n	9ff8 <MiMAC_ReceivedPacket+0x6c0>
    9950:	2302      	movs	r3, #2
    9952:	33ff      	adds	r3, #255	; 0xff
    9954:	4ac8      	ldr	r2, [pc, #800]	; (9c78 <MiMAC_ReceivedPacket+0x340>)
    9956:	5cd3      	ldrb	r3, [r2, r3]
    9958:	2b00      	cmp	r3, #0
    995a:	d10e      	bne.n	997a <MiMAC_ReceivedPacket+0x42>
    995c:	4bc7      	ldr	r3, [pc, #796]	; (9c7c <MiMAC_ReceivedPacket+0x344>)
    995e:	5cd3      	ldrb	r3, [r2, r3]
    9960:	2b00      	cmp	r3, #0
    9962:	d140      	bne.n	99e6 <MiMAC_ReceivedPacket+0xae>
    9964:	4bc6      	ldr	r3, [pc, #792]	; (9c80 <MiMAC_ReceivedPacket+0x348>)
    9966:	5cd3      	ldrb	r3, [r2, r3]
	return false;
    9968:	2400      	movs	r4, #0
	for (i = 0; i < BANK_SIZE; i++)
    996a:	2203      	movs	r2, #3
		if (RxBuffer[i].PayloadLen > 0)
    996c:	2b00      	cmp	r3, #0
    996e:	d105      	bne.n	997c <MiMAC_ReceivedPacket+0x44>
}
    9970:	0020      	movs	r0, r4
    9972:	b008      	add	sp, #32
    9974:	bc04      	pop	{r2}
    9976:	4690      	mov	r8, r2
    9978:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < BANK_SIZE; i++)
    997a:	2201      	movs	r2, #1
			BankIndex = i;
    997c:	4bbd      	ldr	r3, [pc, #756]	; (9c74 <MiMAC_ReceivedPacket+0x33c>)
    997e:	701a      	strb	r2, [r3, #0]
	return false;
    9980:	2400      	movs	r4, #0
	if (BankIndex < BANK_SIZE)
    9982:	2a03      	cmp	r2, #3
    9984:	d8f4      	bhi.n	9970 <MiMAC_ReceivedPacket+0x38>
		if ((RxBuffer[BankIndex].Payload[0] & 0x40) == 0)
    9986:	0010      	movs	r0, r2
    9988:	0211      	lsls	r1, r2, #8
    998a:	1889      	adds	r1, r1, r2
    998c:	4bba      	ldr	r3, [pc, #744]	; (9c78 <MiMAC_ReceivedPacket+0x340>)
    998e:	185b      	adds	r3, r3, r1
    9990:	789d      	ldrb	r5, [r3, #2]
    9992:	2440      	movs	r4, #64	; 0x40
    9994:	4025      	ands	r5, r4
		MACRxPacket.flags.Val = 0;
    9996:	49bb      	ldr	r1, [pc, #748]	; (9c84 <MiMAC_ReceivedPacket+0x34c>)
    9998:	2400      	movs	r4, #0
    999a:	700c      	strb	r4, [r1, #0]
		MACRxPacket.altSourceAddress = false;
    999c:	73cc      	strb	r4, [r1, #15]
		addrMode = RxBuffer[BankIndex].Payload[1] & 0xCC;
    999e:	78db      	ldrb	r3, [r3, #3]
    99a0:	2133      	movs	r1, #51	; 0x33
    99a2:	438b      	bics	r3, r1
		switch (addrMode)
    99a4:	b2d9      	uxtb	r1, r3
    99a6:	2988      	cmp	r1, #136	; 0x88
    99a8:	d100      	bne.n	99ac <MiMAC_ReceivedPacket+0x74>
    99aa:	e12e      	b.n	9c0a <MiMAC_ReceivedPacket+0x2d2>
    99ac:	d91d      	bls.n	99ea <MiMAC_ReceivedPacket+0xb2>
    99ae:	b2d9      	uxtb	r1, r3
    99b0:	29c8      	cmp	r1, #200	; 0xc8
    99b2:	d06f      	beq.n	9a94 <MiMAC_ReceivedPacket+0x15c>
    99b4:	29cc      	cmp	r1, #204	; 0xcc
    99b6:	d100      	bne.n	99ba <MiMAC_ReceivedPacket+0x82>
    99b8:	e0b9      	b.n	9b2e <MiMAC_ReceivedPacket+0x1f6>
    99ba:	298c      	cmp	r1, #140	; 0x8c
    99bc:	d100      	bne.n	99c0 <MiMAC_ReceivedPacket+0x88>
    99be:	e1aa      	b.n	9d16 <MiMAC_ReceivedPacket+0x3de>
			MiMAC_DiscardPacket();
    99c0:	4bb1      	ldr	r3, [pc, #708]	; (9c88 <MiMAC_ReceivedPacket+0x350>)
    99c2:	4798      	blx	r3
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    99c4:	4bab      	ldr	r3, [pc, #684]	; (9c74 <MiMAC_ReceivedPacket+0x33c>)
    99c6:	781a      	ldrb	r2, [r3, #0]
    99c8:	0213      	lsls	r3, r2, #8
    99ca:	189a      	adds	r2, r3, r2
    99cc:	4baa      	ldr	r3, [pc, #680]	; (9c78 <MiMAC_ReceivedPacket+0x340>)
    99ce:	189b      	adds	r3, r3, r2
    99d0:	789b      	ldrb	r3, [r3, #2]
			return false;
    99d2:	2400      	movs	r4, #0
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    99d4:	069b      	lsls	r3, r3, #26
    99d6:	d5cb      	bpl.n	9970 <MiMAC_ReceivedPacket+0x38>
				MiRadioReceiveParam.action = RECEIVE_START;					
    99d8:	a807      	add	r0, sp, #28
    99da:	2300      	movs	r3, #0
    99dc:	7003      	strb	r3, [r0, #0]
				MiRadioReceiveParam.rxWindowSize = 0;
    99de:	8043      	strh	r3, [r0, #2]
				RADIO_Receive(&MiRadioReceiveParam);
    99e0:	4baa      	ldr	r3, [pc, #680]	; (9c8c <MiMAC_ReceivedPacket+0x354>)
    99e2:	4798      	blx	r3
    99e4:	e7c4      	b.n	9970 <MiMAC_ReceivedPacket+0x38>
	for (i = 0; i < BANK_SIZE; i++)
    99e6:	2202      	movs	r2, #2
    99e8:	e7c8      	b.n	997c <MiMAC_ReceivedPacket+0x44>
		switch (addrMode)
    99ea:	2b08      	cmp	r3, #8
    99ec:	d100      	bne.n	99f0 <MiMAC_ReceivedPacket+0xb8>
    99ee:	e1e1      	b.n	9db4 <MiMAC_ReceivedPacket+0x47c>
    99f0:	2980      	cmp	r1, #128	; 0x80
    99f2:	d1e5      	bne.n	99c0 <MiMAC_ReceivedPacket+0x88>
				MACRxPacket.flags.bits.broadcast = 1;
    99f4:	4ba3      	ldr	r3, [pc, #652]	; (9c84 <MiMAC_ReceivedPacket+0x34c>)
    99f6:	7819      	ldrb	r1, [r3, #0]
    99f8:	2404      	movs	r4, #4
    99fa:	4321      	orrs	r1, r4
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    99fc:	2480      	movs	r4, #128	; 0x80
    99fe:	4264      	negs	r4, r4
    9a00:	4321      	orrs	r1, r4
    9a02:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    9a04:	2101      	movs	r1, #1
    9a06:	73d9      	strb	r1, [r3, #15]
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    9a08:	4c9b      	ldr	r4, [pc, #620]	; (9c78 <MiMAC_ReceivedPacket+0x340>)
    9a0a:	0211      	lsls	r1, r2, #8
    9a0c:	1888      	adds	r0, r1, r2
    9a0e:	1821      	adds	r1, r4, r0
    9a10:	794d      	ldrb	r5, [r1, #5]
    9a12:	741d      	strb	r5, [r3, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    9a14:	7989      	ldrb	r1, [r1, #6]
    9a16:	7459      	strb	r1, [r3, #17]
    9a18:	0211      	lsls	r1, r2, #8
    9a1a:	188a      	adds	r2, r1, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
    9a1c:	1dd1      	adds	r1, r2, #7
    9a1e:	1909      	adds	r1, r1, r4
    9a20:	6059      	str	r1, [r3, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 11;
    9a22:	5d01      	ldrb	r1, [r0, r4]
    9a24:	390b      	subs	r1, #11
    9a26:	7319      	strb	r1, [r3, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    9a28:	3209      	adds	r2, #9
    9a2a:	1912      	adds	r2, r2, r4
    9a2c:	609a      	str	r2, [r3, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    9a2e:	4b91      	ldr	r3, [pc, #580]	; (9c74 <MiMAC_ReceivedPacket+0x33c>)
    9a30:	781a      	ldrb	r2, [r3, #0]
    9a32:	0213      	lsls	r3, r2, #8
    9a34:	189a      	adds	r2, r3, r2
    9a36:	4b90      	ldr	r3, [pc, #576]	; (9c78 <MiMAC_ReceivedPacket+0x340>)
    9a38:	189b      	adds	r3, r3, r2
    9a3a:	789b      	ldrb	r3, [r3, #2]
    9a3c:	071b      	lsls	r3, r3, #28
    9a3e:	d500      	bpl.n	9a42 <MiMAC_ReceivedPacket+0x10a>
    9a40:	e1d9      	b.n	9df6 <MiMAC_ReceivedPacket+0x4be>
		switch (RxBuffer[BankIndex].Payload[0] & 0x07) // check frame type
    9a42:	4b8c      	ldr	r3, [pc, #560]	; (9c74 <MiMAC_ReceivedPacket+0x33c>)
    9a44:	7818      	ldrb	r0, [r3, #0]
    9a46:	0202      	lsls	r2, r0, #8
    9a48:	1812      	adds	r2, r2, r0
    9a4a:	4b8b      	ldr	r3, [pc, #556]	; (9c78 <MiMAC_ReceivedPacket+0x340>)
    9a4c:	189b      	adds	r3, r3, r2
    9a4e:	7899      	ldrb	r1, [r3, #2]
    9a50:	2307      	movs	r3, #7
    9a52:	400b      	ands	r3, r1
    9a54:	2b01      	cmp	r3, #1
    9a56:	d100      	bne.n	9a5a <MiMAC_ReceivedPacket+0x122>
    9a58:	e24d      	b.n	9ef6 <MiMAC_ReceivedPacket+0x5be>
    9a5a:	2b00      	cmp	r3, #0
    9a5c:	d100      	bne.n	9a60 <MiMAC_ReceivedPacket+0x128>
    9a5e:	e282      	b.n	9f66 <MiMAC_ReceivedPacket+0x62e>
    9a60:	2b02      	cmp	r3, #2
    9a62:	d100      	bne.n	9a66 <MiMAC_ReceivedPacket+0x12e>
    9a64:	e285      	b.n	9f72 <MiMAC_ReceivedPacket+0x63a>
    9a66:	2b03      	cmp	r3, #3
    9a68:	d100      	bne.n	9a6c <MiMAC_ReceivedPacket+0x134>
    9a6a:	e274      	b.n	9f56 <MiMAC_ReceivedPacket+0x61e>
			MiMAC_DiscardPacket();
    9a6c:	4b86      	ldr	r3, [pc, #536]	; (9c88 <MiMAC_ReceivedPacket+0x350>)
    9a6e:	4798      	blx	r3
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9a70:	4b80      	ldr	r3, [pc, #512]	; (9c74 <MiMAC_ReceivedPacket+0x33c>)
    9a72:	781a      	ldrb	r2, [r3, #0]
    9a74:	0213      	lsls	r3, r2, #8
    9a76:	189a      	adds	r2, r3, r2
    9a78:	4b7f      	ldr	r3, [pc, #508]	; (9c78 <MiMAC_ReceivedPacket+0x340>)
    9a7a:	189b      	adds	r3, r3, r2
    9a7c:	789b      	ldrb	r3, [r3, #2]
			return false;
    9a7e:	2400      	movs	r4, #0
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9a80:	069b      	lsls	r3, r3, #26
    9a82:	d400      	bmi.n	9a86 <MiMAC_ReceivedPacket+0x14e>
    9a84:	e774      	b.n	9970 <MiMAC_ReceivedPacket+0x38>
				MiRadioReceiveParam.action = RECEIVE_START;	
    9a86:	a807      	add	r0, sp, #28
    9a88:	2300      	movs	r3, #0
    9a8a:	7003      	strb	r3, [r0, #0]
				MiRadioReceiveParam.rxWindowSize = 0;
    9a8c:	8043      	strh	r3, [r0, #2]
				RADIO_Receive(&MiRadioReceiveParam);
    9a8e:	4b7f      	ldr	r3, [pc, #508]	; (9c8c <MiMAC_ReceivedPacket+0x354>)
    9a90:	4798      	blx	r3
    9a92:	e76d      	b.n	9970 <MiMAC_ReceivedPacket+0x38>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    9a94:	0211      	lsls	r1, r2, #8
    9a96:	1889      	adds	r1, r1, r2
    9a98:	4b77      	ldr	r3, [pc, #476]	; (9c78 <MiMAC_ReceivedPacket+0x340>)
    9a9a:	185b      	adds	r3, r3, r1
    9a9c:	79dc      	ldrb	r4, [r3, #7]
    9a9e:	2cff      	cmp	r4, #255	; 0xff
    9aa0:	d01e      	beq.n	9ae0 <MiMAC_ReceivedPacket+0x1a8>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    9aa2:	4978      	ldr	r1, [pc, #480]	; (9c84 <MiMAC_ReceivedPacket+0x34c>)
    9aa4:	780e      	ldrb	r6, [r1, #0]
    9aa6:	2380      	movs	r3, #128	; 0x80
    9aa8:	425b      	negs	r3, r3
    9aaa:	4333      	orrs	r3, r6
    9aac:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    9aae:	2d00      	cmp	r5, #0
    9ab0:	d000      	beq.n	9ab4 <MiMAC_ReceivedPacket+0x17c>
    9ab2:	e27c      	b.n	9fae <MiMAC_ReceivedPacket+0x676>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    9ab4:	4973      	ldr	r1, [pc, #460]	; (9c84 <MiMAC_ReceivedPacket+0x34c>)
    9ab6:	4c70      	ldr	r4, [pc, #448]	; (9c78 <MiMAC_ReceivedPacket+0x340>)
    9ab8:	0203      	lsls	r3, r0, #8
    9aba:	1818      	adds	r0, r3, r0
    9abc:	1823      	adds	r3, r4, r0
    9abe:	7a5d      	ldrb	r5, [r3, #9]
    9ac0:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    9ac2:	7a9b      	ldrb	r3, [r3, #10]
    9ac4:	744b      	strb	r3, [r1, #17]
    9ac6:	0213      	lsls	r3, r2, #8
    9ac8:	189a      	adds	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    9aca:	0013      	movs	r3, r2
    9acc:	330b      	adds	r3, #11
    9ace:	191b      	adds	r3, r3, r4
    9ad0:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    9ad2:	5d03      	ldrb	r3, [r0, r4]
    9ad4:	3b15      	subs	r3, #21
    9ad6:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    9ad8:	3213      	adds	r2, #19
    9ada:	1912      	adds	r2, r2, r4
    9adc:	608a      	str	r2, [r1, #8]
    9ade:	e043      	b.n	9b68 <MiMAC_ReceivedPacket+0x230>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    9ae0:	0211      	lsls	r1, r2, #8
    9ae2:	1889      	adds	r1, r1, r2
    9ae4:	4b64      	ldr	r3, [pc, #400]	; (9c78 <MiMAC_ReceivedPacket+0x340>)
    9ae6:	185b      	adds	r3, r3, r1
    9ae8:	7a1b      	ldrb	r3, [r3, #8]
    9aea:	2bff      	cmp	r3, #255	; 0xff
    9aec:	d1d9      	bne.n	9aa2 <MiMAC_ReceivedPacket+0x16a>
				MACRxPacket.flags.bits.broadcast = 1;
    9aee:	4965      	ldr	r1, [pc, #404]	; (9c84 <MiMAC_ReceivedPacket+0x34c>)
    9af0:	780b      	ldrb	r3, [r1, #0]
    9af2:	2404      	movs	r4, #4
    9af4:	4323      	orrs	r3, r4
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    9af6:	2480      	movs	r4, #128	; 0x80
    9af8:	4264      	negs	r4, r4
    9afa:	4323      	orrs	r3, r4
    9afc:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    9afe:	2d00      	cmp	r5, #0
    9b00:	d000      	beq.n	9b04 <MiMAC_ReceivedPacket+0x1cc>
    9b02:	e263      	b.n	9fcc <MiMAC_ReceivedPacket+0x694>
    9b04:	e7d6      	b.n	9ab4 <MiMAC_ReceivedPacket+0x17c>
					MiMAC_DiscardPacket();
    9b06:	4b60      	ldr	r3, [pc, #384]	; (9c88 <MiMAC_ReceivedPacket+0x350>)
    9b08:	4798      	blx	r3
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9b0a:	4b5a      	ldr	r3, [pc, #360]	; (9c74 <MiMAC_ReceivedPacket+0x33c>)
    9b0c:	781a      	ldrb	r2, [r3, #0]
    9b0e:	0213      	lsls	r3, r2, #8
    9b10:	189a      	adds	r2, r3, r2
    9b12:	4b59      	ldr	r3, [pc, #356]	; (9c78 <MiMAC_ReceivedPacket+0x340>)
    9b14:	189b      	adds	r3, r3, r2
    9b16:	789b      	ldrb	r3, [r3, #2]
					return false;
    9b18:	2400      	movs	r4, #0
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9b1a:	069b      	lsls	r3, r3, #26
    9b1c:	d400      	bmi.n	9b20 <MiMAC_ReceivedPacket+0x1e8>
    9b1e:	e727      	b.n	9970 <MiMAC_ReceivedPacket+0x38>
						MiRadioReceiveParam.action = RECEIVE_START;					
    9b20:	a807      	add	r0, sp, #28
    9b22:	2300      	movs	r3, #0
    9b24:	7003      	strb	r3, [r0, #0]
						MiRadioReceiveParam.rxWindowSize = 0;
    9b26:	8043      	strh	r3, [r0, #2]
						RADIO_Receive(&MiRadioReceiveParam);
    9b28:	4b58      	ldr	r3, [pc, #352]	; (9c8c <MiMAC_ReceivedPacket+0x354>)
    9b2a:	4798      	blx	r3
    9b2c:	e720      	b.n	9970 <MiMAC_ReceivedPacket+0x38>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    9b2e:	4955      	ldr	r1, [pc, #340]	; (9c84 <MiMAC_ReceivedPacket+0x34c>)
    9b30:	780c      	ldrb	r4, [r1, #0]
    9b32:	2380      	movs	r3, #128	; 0x80
    9b34:	425b      	negs	r3, r3
    9b36:	4323      	orrs	r3, r4
    9b38:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    9b3a:	2d00      	cmp	r5, #0
    9b3c:	d132      	bne.n	9ba4 <MiMAC_ReceivedPacket+0x26c>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[13];
    9b3e:	4951      	ldr	r1, [pc, #324]	; (9c84 <MiMAC_ReceivedPacket+0x34c>)
    9b40:	4c4d      	ldr	r4, [pc, #308]	; (9c78 <MiMAC_ReceivedPacket+0x340>)
    9b42:	0213      	lsls	r3, r2, #8
    9b44:	1898      	adds	r0, r3, r2
    9b46:	1823      	adds	r3, r4, r0
    9b48:	7bdd      	ldrb	r5, [r3, #15]
    9b4a:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[14];
    9b4c:	7c1b      	ldrb	r3, [r3, #16]
    9b4e:	744b      	strb	r3, [r1, #17]
    9b50:	0213      	lsls	r3, r2, #8
    9b52:	189a      	adds	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
    9b54:	0013      	movs	r3, r2
    9b56:	3311      	adds	r3, #17
    9b58:	191b      	adds	r3, r3, r4
    9b5a:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 27;
    9b5c:	5d03      	ldrb	r3, [r0, r4]
    9b5e:	3b1b      	subs	r3, #27
    9b60:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
    9b62:	3219      	adds	r2, #25
    9b64:	1912      	adds	r2, r2, r4
    9b66:	608a      	str	r2, [r1, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    9b68:	4b42      	ldr	r3, [pc, #264]	; (9c74 <MiMAC_ReceivedPacket+0x33c>)
    9b6a:	781a      	ldrb	r2, [r3, #0]
    9b6c:	0213      	lsls	r3, r2, #8
    9b6e:	189a      	adds	r2, r3, r2
    9b70:	4b41      	ldr	r3, [pc, #260]	; (9c78 <MiMAC_ReceivedPacket+0x340>)
    9b72:	189b      	adds	r3, r3, r2
    9b74:	789b      	ldrb	r3, [r3, #2]
    9b76:	071b      	lsls	r3, r3, #28
    9b78:	d400      	bmi.n	9b7c <MiMAC_ReceivedPacket+0x244>
    9b7a:	e762      	b.n	9a42 <MiMAC_ReceivedPacket+0x10a>
			FrameCounter.v[0] = MACRxPacket.Payload[0];
    9b7c:	4b41      	ldr	r3, [pc, #260]	; (9c84 <MiMAC_ReceivedPacket+0x34c>)
    9b7e:	689b      	ldr	r3, [r3, #8]
			FrameCounter.v[1] = MACRxPacket.Payload[1];
    9b80:	785e      	ldrb	r6, [r3, #1]
    9b82:	0236      	lsls	r6, r6, #8
    9b84:	781a      	ldrb	r2, [r3, #0]
    9b86:	4316      	orrs	r6, r2
			FrameCounter.v[2] = MACRxPacket.Payload[2];
    9b88:	789a      	ldrb	r2, [r3, #2]
    9b8a:	0412      	lsls	r2, r2, #16
    9b8c:	4940      	ldr	r1, [pc, #256]	; (9c90 <MiMAC_ReceivedPacket+0x358>)
    9b8e:	400e      	ands	r6, r1
    9b90:	4316      	orrs	r6, r2
			FrameCounter.v[3] = MACRxPacket.Payload[3];
    9b92:	78db      	ldrb	r3, [r3, #3]
    9b94:	061b      	lsls	r3, r3, #24
    9b96:	0236      	lsls	r6, r6, #8
    9b98:	0a36      	lsrs	r6, r6, #8
    9b9a:	431e      	orrs	r6, r3
    9b9c:	4f3d      	ldr	r7, [pc, #244]	; (9c94 <MiMAC_ReceivedPacket+0x35c>)
    9b9e:	2400      	movs	r4, #0
				if ((ConnectionTable[i].status.bits.isValid) &&
    9ba0:	46b8      	mov	r8, r7
    9ba2:	e140      	b.n	9e26 <MiMAC_ReceivedPacket+0x4ee>
				if(!(isSameAddress((uint8_t *)&DevIEEEaddr, &RxBuffer[BankIndex].Payload[5])))
    9ba4:	0211      	lsls	r1, r2, #8
    9ba6:	1889      	adds	r1, r1, r2
    9ba8:	3107      	adds	r1, #7
    9baa:	4a33      	ldr	r2, [pc, #204]	; (9c78 <MiMAC_ReceivedPacket+0x340>)
    9bac:	1889      	adds	r1, r1, r2
    9bae:	483a      	ldr	r0, [pc, #232]	; (9c98 <MiMAC_ReceivedPacket+0x360>)
    9bb0:	4b3a      	ldr	r3, [pc, #232]	; (9c9c <MiMAC_ReceivedPacket+0x364>)
    9bb2:	4798      	blx	r3
    9bb4:	1e04      	subs	r4, r0, #0
    9bb6:	d015      	beq.n	9be4 <MiMAC_ReceivedPacket+0x2ac>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    9bb8:	4b2e      	ldr	r3, [pc, #184]	; (9c74 <MiMAC_ReceivedPacket+0x33c>)
    9bba:	7818      	ldrb	r0, [r3, #0]
    9bbc:	4a31      	ldr	r2, [pc, #196]	; (9c84 <MiMAC_ReceivedPacket+0x34c>)
    9bbe:	492e      	ldr	r1, [pc, #184]	; (9c78 <MiMAC_ReceivedPacket+0x340>)
    9bc0:	0203      	lsls	r3, r0, #8
    9bc2:	181b      	adds	r3, r3, r0
    9bc4:	18c8      	adds	r0, r1, r3
    9bc6:	7944      	ldrb	r4, [r0, #5]
    9bc8:	7414      	strb	r4, [r2, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    9bca:	7980      	ldrb	r0, [r0, #6]
    9bcc:	7450      	strb	r0, [r2, #17]
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    9bce:	0018      	movs	r0, r3
    9bd0:	300f      	adds	r0, #15
    9bd2:	1840      	adds	r0, r0, r1
    9bd4:	6050      	str	r0, [r2, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 25;
    9bd6:	5c58      	ldrb	r0, [r3, r1]
    9bd8:	3819      	subs	r0, #25
    9bda:	7310      	strb	r0, [r2, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
    9bdc:	3317      	adds	r3, #23
    9bde:	185b      	adds	r3, r3, r1
    9be0:	6093      	str	r3, [r2, #8]
    9be2:	e7c1      	b.n	9b68 <MiMAC_ReceivedPacket+0x230>
					MiMAC_DiscardPacket();
    9be4:	4b28      	ldr	r3, [pc, #160]	; (9c88 <MiMAC_ReceivedPacket+0x350>)
    9be6:	4798      	blx	r3
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9be8:	4b22      	ldr	r3, [pc, #136]	; (9c74 <MiMAC_ReceivedPacket+0x33c>)
    9bea:	781a      	ldrb	r2, [r3, #0]
    9bec:	0213      	lsls	r3, r2, #8
    9bee:	189a      	adds	r2, r3, r2
    9bf0:	4b21      	ldr	r3, [pc, #132]	; (9c78 <MiMAC_ReceivedPacket+0x340>)
    9bf2:	189b      	adds	r3, r3, r2
    9bf4:	789b      	ldrb	r3, [r3, #2]
    9bf6:	069b      	lsls	r3, r3, #26
    9bf8:	d400      	bmi.n	9bfc <MiMAC_ReceivedPacket+0x2c4>
    9bfa:	e6b9      	b.n	9970 <MiMAC_ReceivedPacket+0x38>
						MiRadioReceiveParam.action = RECEIVE_START;					
    9bfc:	a807      	add	r0, sp, #28
    9bfe:	2300      	movs	r3, #0
    9c00:	7003      	strb	r3, [r0, #0]
						MiRadioReceiveParam.rxWindowSize = 0;
    9c02:	8043      	strh	r3, [r0, #2]
						RADIO_Receive(&MiRadioReceiveParam);
    9c04:	4b21      	ldr	r3, [pc, #132]	; (9c8c <MiMAC_ReceivedPacket+0x354>)
    9c06:	4798      	blx	r3
    9c08:	e6b2      	b.n	9970 <MiMAC_ReceivedPacket+0x38>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    9c0a:	0211      	lsls	r1, r2, #8
    9c0c:	1889      	adds	r1, r1, r2
    9c0e:	4b1a      	ldr	r3, [pc, #104]	; (9c78 <MiMAC_ReceivedPacket+0x340>)
    9c10:	185b      	adds	r3, r3, r1
    9c12:	79dc      	ldrb	r4, [r3, #7]
    9c14:	2cff      	cmp	r4, #255	; 0xff
    9c16:	d01f      	beq.n	9c58 <MiMAC_ReceivedPacket+0x320>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    9c18:	4b1a      	ldr	r3, [pc, #104]	; (9c84 <MiMAC_ReceivedPacket+0x34c>)
    9c1a:	781e      	ldrb	r6, [r3, #0]
    9c1c:	2180      	movs	r1, #128	; 0x80
    9c1e:	4249      	negs	r1, r1
    9c20:	4331      	orrs	r1, r6
    9c22:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    9c24:	2101      	movs	r1, #1
    9c26:	73d9      	strb	r1, [r3, #15]
				if (bIntraPAN == false)
    9c28:	2d00      	cmp	r5, #0
    9c2a:	d139      	bne.n	9ca0 <MiMAC_ReceivedPacket+0x368>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    9c2c:	0019      	movs	r1, r3
    9c2e:	4c12      	ldr	r4, [pc, #72]	; (9c78 <MiMAC_ReceivedPacket+0x340>)
    9c30:	0203      	lsls	r3, r0, #8
    9c32:	1818      	adds	r0, r3, r0
    9c34:	1823      	adds	r3, r4, r0
    9c36:	7a5d      	ldrb	r5, [r3, #9]
    9c38:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    9c3a:	7a9b      	ldrb	r3, [r3, #10]
    9c3c:	744b      	strb	r3, [r1, #17]
    9c3e:	0213      	lsls	r3, r2, #8
    9c40:	189a      	adds	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    9c42:	0013      	movs	r3, r2
    9c44:	330b      	adds	r3, #11
    9c46:	191b      	adds	r3, r3, r4
    9c48:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 15;
    9c4a:	5d03      	ldrb	r3, [r0, r4]
    9c4c:	3b0f      	subs	r3, #15
    9c4e:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[11]);
    9c50:	320d      	adds	r2, #13
    9c52:	1912      	adds	r2, r2, r4
    9c54:	608a      	str	r2, [r1, #8]
    9c56:	e6ea      	b.n	9a2e <MiMAC_ReceivedPacket+0xf6>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    9c58:	0211      	lsls	r1, r2, #8
    9c5a:	1889      	adds	r1, r1, r2
    9c5c:	4b06      	ldr	r3, [pc, #24]	; (9c78 <MiMAC_ReceivedPacket+0x340>)
    9c5e:	185b      	adds	r3, r3, r1
    9c60:	7a1b      	ldrb	r3, [r3, #8]
    9c62:	2bff      	cmp	r3, #255	; 0xff
    9c64:	d1d8      	bne.n	9c18 <MiMAC_ReceivedPacket+0x2e0>
					MACRxPacket.flags.bits.broadcast = 1;
    9c66:	4907      	ldr	r1, [pc, #28]	; (9c84 <MiMAC_ReceivedPacket+0x34c>)
    9c68:	780b      	ldrb	r3, [r1, #0]
    9c6a:	2604      	movs	r6, #4
    9c6c:	4333      	orrs	r3, r6
    9c6e:	700b      	strb	r3, [r1, #0]
    9c70:	e7d2      	b.n	9c18 <MiMAC_ReceivedPacket+0x2e0>
    9c72:	46c0      	nop			; (mov r8, r8)
    9c74:	2000001b 	.word	0x2000001b
    9c78:	200023fc 	.word	0x200023fc
    9c7c:	00000202 	.word	0x00000202
    9c80:	00000303 	.word	0x00000303
    9c84:	20002844 	.word	0x20002844
    9c88:	000098b9 	.word	0x000098b9
    9c8c:	0000e755 	.word	0x0000e755
    9c90:	ff00ffff 	.word	0xff00ffff
    9c94:	2000280c 	.word	0x2000280c
    9c98:	200023f4 	.word	0x200023f4
    9c9c:	0000a6c9 	.word	0x0000a6c9
					if (!(((RxBuffer[BankIndex].Payload[5] == 0xFF) & (RxBuffer[BankIndex].Payload[6] == 0xFF)) ||((RxBuffer[BankIndex].Payload[5] == DevShortAddress[0]) & (RxBuffer[BankIndex].Payload[6] == DevShortAddress[1]))) )
    9ca0:	0201      	lsls	r1, r0, #8
    9ca2:	1809      	adds	r1, r1, r0
    9ca4:	4bd6      	ldr	r3, [pc, #856]	; (a000 <MiMAC_ReceivedPacket+0x6c8>)
    9ca6:	185b      	adds	r3, r3, r1
    9ca8:	7a1b      	ldrb	r3, [r3, #8]
    9caa:	2cff      	cmp	r4, #255	; 0xff
    9cac:	d117      	bne.n	9cde <MiMAC_ReceivedPacket+0x3a6>
    9cae:	2bff      	cmp	r3, #255	; 0xff
    9cb0:	d115      	bne.n	9cde <MiMAC_ReceivedPacket+0x3a6>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    9cb2:	49d4      	ldr	r1, [pc, #848]	; (a004 <MiMAC_ReceivedPacket+0x6cc>)
    9cb4:	4cd2      	ldr	r4, [pc, #840]	; (a000 <MiMAC_ReceivedPacket+0x6c8>)
    9cb6:	0203      	lsls	r3, r0, #8
    9cb8:	1818      	adds	r0, r3, r0
    9cba:	1823      	adds	r3, r4, r0
    9cbc:	795d      	ldrb	r5, [r3, #5]
    9cbe:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    9cc0:	799b      	ldrb	r3, [r3, #6]
    9cc2:	744b      	strb	r3, [r1, #17]
    9cc4:	0213      	lsls	r3, r2, #8
    9cc6:	189a      	adds	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    9cc8:	0013      	movs	r3, r2
    9cca:	3309      	adds	r3, #9
    9ccc:	191b      	adds	r3, r3, r4
    9cce:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 13;
    9cd0:	5d03      	ldrb	r3, [r0, r4]
    9cd2:	3b0d      	subs	r3, #13
    9cd4:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
    9cd6:	320b      	adds	r2, #11
    9cd8:	1912      	adds	r2, r2, r4
    9cda:	608a      	str	r2, [r1, #8]
    9cdc:	e6a7      	b.n	9a2e <MiMAC_ReceivedPacket+0xf6>
					if (!(((RxBuffer[BankIndex].Payload[5] == 0xFF) & (RxBuffer[BankIndex].Payload[6] == 0xFF)) ||((RxBuffer[BankIndex].Payload[5] == DevShortAddress[0]) & (RxBuffer[BankIndex].Payload[6] == DevShortAddress[1]))) )
    9cde:	49ca      	ldr	r1, [pc, #808]	; (a008 <MiMAC_ReceivedPacket+0x6d0>)
    9ce0:	7809      	ldrb	r1, [r1, #0]
    9ce2:	42a1      	cmp	r1, r4
    9ce4:	d103      	bne.n	9cee <MiMAC_ReceivedPacket+0x3b6>
    9ce6:	49c8      	ldr	r1, [pc, #800]	; (a008 <MiMAC_ReceivedPacket+0x6d0>)
    9ce8:	7849      	ldrb	r1, [r1, #1]
    9cea:	4299      	cmp	r1, r3
    9cec:	d0e1      	beq.n	9cb2 <MiMAC_ReceivedPacket+0x37a>
						MiMAC_DiscardPacket();
    9cee:	4bc7      	ldr	r3, [pc, #796]	; (a00c <MiMAC_ReceivedPacket+0x6d4>)
    9cf0:	4798      	blx	r3
						if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9cf2:	4bc7      	ldr	r3, [pc, #796]	; (a010 <MiMAC_ReceivedPacket+0x6d8>)
    9cf4:	781a      	ldrb	r2, [r3, #0]
    9cf6:	0213      	lsls	r3, r2, #8
    9cf8:	189a      	adds	r2, r3, r2
    9cfa:	4bc1      	ldr	r3, [pc, #772]	; (a000 <MiMAC_ReceivedPacket+0x6c8>)
    9cfc:	189b      	adds	r3, r3, r2
    9cfe:	789b      	ldrb	r3, [r3, #2]
						return false;
    9d00:	2400      	movs	r4, #0
						if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9d02:	069b      	lsls	r3, r3, #26
    9d04:	d400      	bmi.n	9d08 <MiMAC_ReceivedPacket+0x3d0>
    9d06:	e633      	b.n	9970 <MiMAC_ReceivedPacket+0x38>
							MiRadioReceiveParam.action = RECEIVE_START;	
    9d08:	a807      	add	r0, sp, #28
    9d0a:	2300      	movs	r3, #0
    9d0c:	7003      	strb	r3, [r0, #0]
							MiRadioReceiveParam.rxWindowSize = 0;
    9d0e:	8043      	strh	r3, [r0, #2]
							RADIO_Receive(&MiRadioReceiveParam);
    9d10:	4bc0      	ldr	r3, [pc, #768]	; (a014 <MiMAC_ReceivedPacket+0x6dc>)
    9d12:	4798      	blx	r3
    9d14:	e62c      	b.n	9970 <MiMAC_ReceivedPacket+0x38>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    9d16:	4bbb      	ldr	r3, [pc, #748]	; (a004 <MiMAC_ReceivedPacket+0x6cc>)
    9d18:	781c      	ldrb	r4, [r3, #0]
    9d1a:	2180      	movs	r1, #128	; 0x80
    9d1c:	4249      	negs	r1, r1
    9d1e:	4321      	orrs	r1, r4
    9d20:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    9d22:	2101      	movs	r1, #1
    9d24:	73d9      	strb	r1, [r3, #15]
				if (bIntraPAN) // check if it is intraPAN
    9d26:	2d00      	cmp	r5, #0
    9d28:	d115      	bne.n	9d56 <MiMAC_ReceivedPacket+0x41e>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[12];
    9d2a:	49b6      	ldr	r1, [pc, #728]	; (a004 <MiMAC_ReceivedPacket+0x6cc>)
    9d2c:	4cb4      	ldr	r4, [pc, #720]	; (a000 <MiMAC_ReceivedPacket+0x6c8>)
    9d2e:	0213      	lsls	r3, r2, #8
    9d30:	1898      	adds	r0, r3, r2
    9d32:	1823      	adds	r3, r4, r0
    9d34:	7b9d      	ldrb	r5, [r3, #14]
    9d36:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[13];
    9d38:	7bdb      	ldrb	r3, [r3, #15]
    9d3a:	744b      	strb	r3, [r1, #17]
    9d3c:	0213      	lsls	r3, r2, #8
    9d3e:	189a      	adds	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
    9d40:	0013      	movs	r3, r2
    9d42:	3310      	adds	r3, #16
    9d44:	191b      	adds	r3, r3, r4
    9d46:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    9d48:	5d03      	ldrb	r3, [r0, r4]
    9d4a:	3b15      	subs	r3, #21
    9d4c:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    9d4e:	3213      	adds	r2, #19
    9d50:	1912      	adds	r2, r2, r4
    9d52:	608a      	str	r2, [r1, #8]
    9d54:	e66b      	b.n	9a2e <MiMAC_ReceivedPacket+0xf6>
					if(!(isSameAddress((uint8_t *)&DevIEEEaddr, &RxBuffer[BankIndex].Payload[5])))
    9d56:	0211      	lsls	r1, r2, #8
    9d58:	1889      	adds	r1, r1, r2
    9d5a:	3107      	adds	r1, #7
    9d5c:	4aa8      	ldr	r2, [pc, #672]	; (a000 <MiMAC_ReceivedPacket+0x6c8>)
    9d5e:	1889      	adds	r1, r1, r2
    9d60:	48ad      	ldr	r0, [pc, #692]	; (a018 <MiMAC_ReceivedPacket+0x6e0>)
    9d62:	4bae      	ldr	r3, [pc, #696]	; (a01c <MiMAC_ReceivedPacket+0x6e4>)
    9d64:	4798      	blx	r3
    9d66:	1e04      	subs	r4, r0, #0
    9d68:	d011      	beq.n	9d8e <MiMAC_ReceivedPacket+0x456>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    9d6a:	4ba9      	ldr	r3, [pc, #676]	; (a010 <MiMAC_ReceivedPacket+0x6d8>)
    9d6c:	7818      	ldrb	r0, [r3, #0]
    9d6e:	4aa5      	ldr	r2, [pc, #660]	; (a004 <MiMAC_ReceivedPacket+0x6cc>)
    9d70:	49a3      	ldr	r1, [pc, #652]	; (a000 <MiMAC_ReceivedPacket+0x6c8>)
    9d72:	0203      	lsls	r3, r0, #8
    9d74:	181b      	adds	r3, r3, r0
    9d76:	18c8      	adds	r0, r1, r3
    9d78:	7944      	ldrb	r4, [r0, #5]
    9d7a:	7414      	strb	r4, [r2, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    9d7c:	7980      	ldrb	r0, [r0, #6]
    9d7e:	7450      	strb	r0, [r2, #17]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    9d80:	5c58      	ldrb	r0, [r3, r1]
    9d82:	3813      	subs	r0, #19
    9d84:	7310      	strb	r0, [r2, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    9d86:	3311      	adds	r3, #17
    9d88:	185b      	adds	r3, r3, r1
    9d8a:	6093      	str	r3, [r2, #8]
    9d8c:	e64f      	b.n	9a2e <MiMAC_ReceivedPacket+0xf6>
						MiMAC_DiscardPacket();
    9d8e:	4b9f      	ldr	r3, [pc, #636]	; (a00c <MiMAC_ReceivedPacket+0x6d4>)
    9d90:	4798      	blx	r3
						if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9d92:	4b9f      	ldr	r3, [pc, #636]	; (a010 <MiMAC_ReceivedPacket+0x6d8>)
    9d94:	781a      	ldrb	r2, [r3, #0]
    9d96:	0213      	lsls	r3, r2, #8
    9d98:	189a      	adds	r2, r3, r2
    9d9a:	4b99      	ldr	r3, [pc, #612]	; (a000 <MiMAC_ReceivedPacket+0x6c8>)
    9d9c:	189b      	adds	r3, r3, r2
    9d9e:	789b      	ldrb	r3, [r3, #2]
    9da0:	069b      	lsls	r3, r3, #26
    9da2:	d400      	bmi.n	9da6 <MiMAC_ReceivedPacket+0x46e>
    9da4:	e5e4      	b.n	9970 <MiMAC_ReceivedPacket+0x38>
							MiRadioReceiveParam.action = RECEIVE_START;	
    9da6:	a807      	add	r0, sp, #28
    9da8:	2300      	movs	r3, #0
    9daa:	7003      	strb	r3, [r0, #0]
							MiRadioReceiveParam.rxWindowSize = 0;
    9dac:	8043      	strh	r3, [r0, #2]
							RADIO_Receive(&MiRadioReceiveParam);
    9dae:	4b99      	ldr	r3, [pc, #612]	; (a014 <MiMAC_ReceivedPacket+0x6dc>)
    9db0:	4798      	blx	r3
    9db2:	e5dd      	b.n	9970 <MiMAC_ReceivedPacket+0x38>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    9db4:	0211      	lsls	r1, r2, #8
    9db6:	1889      	adds	r1, r1, r2
    9db8:	4b91      	ldr	r3, [pc, #580]	; (a000 <MiMAC_ReceivedPacket+0x6c8>)
    9dba:	185b      	adds	r3, r3, r1
    9dbc:	79db      	ldrb	r3, [r3, #7]
    9dbe:	2bff      	cmp	r3, #255	; 0xff
    9dc0:	d00c      	beq.n	9ddc <MiMAC_ReceivedPacket+0x4a4>
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 10;
    9dc2:	4990      	ldr	r1, [pc, #576]	; (a004 <MiMAC_ReceivedPacket+0x6cc>)
    9dc4:	4c8e      	ldr	r4, [pc, #568]	; (a000 <MiMAC_ReceivedPacket+0x6c8>)
    9dc6:	0203      	lsls	r3, r0, #8
    9dc8:	1818      	adds	r0, r3, r0
    9dca:	5d03      	ldrb	r3, [r0, r4]
    9dcc:	3b0a      	subs	r3, #10
    9dce:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    9dd0:	0213      	lsls	r3, r2, #8
    9dd2:	189a      	adds	r2, r3, r2
    9dd4:	3209      	adds	r2, #9
    9dd6:	1912      	adds	r2, r2, r4
    9dd8:	608a      	str	r2, [r1, #8]
			break;
    9dda:	e628      	b.n	9a2e <MiMAC_ReceivedPacket+0xf6>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    9ddc:	0211      	lsls	r1, r2, #8
    9dde:	1889      	adds	r1, r1, r2
    9de0:	4b87      	ldr	r3, [pc, #540]	; (a000 <MiMAC_ReceivedPacket+0x6c8>)
    9de2:	185b      	adds	r3, r3, r1
    9de4:	7a1b      	ldrb	r3, [r3, #8]
    9de6:	2bff      	cmp	r3, #255	; 0xff
    9de8:	d1eb      	bne.n	9dc2 <MiMAC_ReceivedPacket+0x48a>
					MACRxPacket.flags.bits.broadcast = 1;
    9dea:	4986      	ldr	r1, [pc, #536]	; (a004 <MiMAC_ReceivedPacket+0x6cc>)
    9dec:	780b      	ldrb	r3, [r1, #0]
    9dee:	2404      	movs	r4, #4
    9df0:	4323      	orrs	r3, r4
    9df2:	700b      	strb	r3, [r1, #0]
    9df4:	e7e5      	b.n	9dc2 <MiMAC_ReceivedPacket+0x48a>
				MiMAC_DiscardPacket();
    9df6:	4b85      	ldr	r3, [pc, #532]	; (a00c <MiMAC_ReceivedPacket+0x6d4>)
    9df8:	4798      	blx	r3
				if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9dfa:	4b85      	ldr	r3, [pc, #532]	; (a010 <MiMAC_ReceivedPacket+0x6d8>)
    9dfc:	781a      	ldrb	r2, [r3, #0]
    9dfe:	0213      	lsls	r3, r2, #8
    9e00:	189a      	adds	r2, r3, r2
    9e02:	4b7f      	ldr	r3, [pc, #508]	; (a000 <MiMAC_ReceivedPacket+0x6c8>)
    9e04:	189b      	adds	r3, r3, r2
    9e06:	789b      	ldrb	r3, [r3, #2]
    9e08:	069b      	lsls	r3, r3, #26
    9e0a:	d401      	bmi.n	9e10 <MiMAC_ReceivedPacket+0x4d8>
				return false;
    9e0c:	2400      	movs	r4, #0
    9e0e:	e5af      	b.n	9970 <MiMAC_ReceivedPacket+0x38>
					MiRadioReceiveParam.action = RECEIVE_START;					
    9e10:	a807      	add	r0, sp, #28
    9e12:	2300      	movs	r3, #0
    9e14:	7003      	strb	r3, [r0, #0]
					MiRadioReceiveParam.rxWindowSize = 0;
    9e16:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&MiRadioReceiveParam);
    9e18:	4b7e      	ldr	r3, [pc, #504]	; (a014 <MiMAC_ReceivedPacket+0x6dc>)
    9e1a:	4798      	blx	r3
    9e1c:	e7f6      	b.n	9e0c <MiMAC_ReceivedPacket+0x4d4>
    9e1e:	3401      	adds	r4, #1
    9e20:	370a      	adds	r7, #10
			for (i = 0; i < CONNECTION_SIZE; i++)
    9e22:	2c05      	cmp	r4, #5
    9e24:	d01a      	beq.n	9e5c <MiMAC_ReceivedPacket+0x524>
    9e26:	b2e5      	uxtb	r5, r4
				if ((ConnectionTable[i].status.bits.isValid) &&
    9e28:	00a3      	lsls	r3, r4, #2
    9e2a:	191b      	adds	r3, r3, r4
    9e2c:	005b      	lsls	r3, r3, #1
    9e2e:	4443      	add	r3, r8
    9e30:	7a1b      	ldrb	r3, [r3, #8]
    9e32:	09db      	lsrs	r3, r3, #7
    9e34:	d0f3      	beq.n	9e1e <MiMAC_ReceivedPacket+0x4e6>
				isSameAddress(ConnectionTable[i].Address, MACRxPacket.SourceAddress))
    9e36:	4b73      	ldr	r3, [pc, #460]	; (a004 <MiMAC_ReceivedPacket+0x6cc>)
    9e38:	6859      	ldr	r1, [r3, #4]
    9e3a:	0038      	movs	r0, r7
    9e3c:	4b77      	ldr	r3, [pc, #476]	; (a01c <MiMAC_ReceivedPacket+0x6e4>)
    9e3e:	4798      	blx	r3
				if ((ConnectionTable[i].status.bits.isValid) &&
    9e40:	2800      	cmp	r0, #0
    9e42:	d0ec      	beq.n	9e1e <MiMAC_ReceivedPacket+0x4e6>
			if (i < CONNECTION_SIZE)
    9e44:	2d04      	cmp	r5, #4
    9e46:	d809      	bhi.n	9e5c <MiMAC_ReceivedPacket+0x524>
				if (IncomingFrameCounter[i].Val > FrameCounter.Val)
    9e48:	23ff      	movs	r3, #255	; 0xff
    9e4a:	401c      	ands	r4, r3
    9e4c:	00a2      	lsls	r2, r4, #2
    9e4e:	4b74      	ldr	r3, [pc, #464]	; (a020 <MiMAC_ReceivedPacket+0x6e8>)
    9e50:	58d3      	ldr	r3, [r2, r3]
    9e52:	42b3      	cmp	r3, r6
    9e54:	d82b      	bhi.n	9eae <MiMAC_ReceivedPacket+0x576>
					IncomingFrameCounter[i].Val = FrameCounter.Val;
    9e56:	00a4      	lsls	r4, r4, #2
    9e58:	4b71      	ldr	r3, [pc, #452]	; (a020 <MiMAC_ReceivedPacket+0x6e8>)
    9e5a:	50e6      	str	r6, [r4, r3]
			MACRxPacket.PayloadLen -= 5;  // used to 5 for frame counter now -4 also added for MIC integrity
    9e5c:	4969      	ldr	r1, [pc, #420]	; (a004 <MiMAC_ReceivedPacket+0x6cc>)
    9e5e:	7b0b      	ldrb	r3, [r1, #12]
    9e60:	3b05      	subs	r3, #5
    9e62:	b2db      	uxtb	r3, r3
    9e64:	730b      	strb	r3, [r1, #12]
			received_mic_values[0] = MACRxPacket.Payload[MACRxPacket.PayloadLen+1];
    9e66:	6888      	ldr	r0, [r1, #8]
    9e68:	18c3      	adds	r3, r0, r3
    9e6a:	785c      	ldrb	r4, [r3, #1]
    9e6c:	4a6d      	ldr	r2, [pc, #436]	; (a024 <MiMAC_ReceivedPacket+0x6ec>)
    9e6e:	7014      	strb	r4, [r2, #0]
			received_mic_values[1] = MACRxPacket.Payload[MACRxPacket.PayloadLen+2];
    9e70:	789c      	ldrb	r4, [r3, #2]
    9e72:	7054      	strb	r4, [r2, #1]
			received_mic_values[2] = MACRxPacket.Payload[MACRxPacket.PayloadLen+3];
    9e74:	78dc      	ldrb	r4, [r3, #3]
    9e76:	7094      	strb	r4, [r2, #2]
			received_mic_values[3] = MACRxPacket.Payload[MACRxPacket.PayloadLen+4];
    9e78:	791b      	ldrb	r3, [r3, #4]
    9e7a:	70d3      	strb	r3, [r2, #3]
			if (false == DataDecrypt(&(MACRxPacket.Payload[5]), &(MACRxPacket.PayloadLen), MACRxPacket.SourceAddress, FrameCounter, RxBuffer[BankIndex].Payload[0]))
    9e7c:	684a      	ldr	r2, [r1, #4]
    9e7e:	310c      	adds	r1, #12
    9e80:	3005      	adds	r0, #5
    9e82:	4b63      	ldr	r3, [pc, #396]	; (a010 <MiMAC_ReceivedPacket+0x6d8>)
    9e84:	781c      	ldrb	r4, [r3, #0]
    9e86:	0223      	lsls	r3, r4, #8
    9e88:	191c      	adds	r4, r3, r4
    9e8a:	4b5d      	ldr	r3, [pc, #372]	; (a000 <MiMAC_ReceivedPacket+0x6c8>)
    9e8c:	191b      	adds	r3, r3, r4
    9e8e:	789b      	ldrb	r3, [r3, #2]
    9e90:	9300      	str	r3, [sp, #0]
    9e92:	0033      	movs	r3, r6
    9e94:	4c64      	ldr	r4, [pc, #400]	; (a028 <MiMAC_ReceivedPacket+0x6f0>)
    9e96:	47a0      	blx	r4
    9e98:	2800      	cmp	r0, #0
    9e9a:	d01a      	beq.n	9ed2 <MiMAC_ReceivedPacket+0x59a>
			MACRxPacket.Payload = &(MACRxPacket.Payload[5]);
    9e9c:	4b59      	ldr	r3, [pc, #356]	; (a004 <MiMAC_ReceivedPacket+0x6cc>)
    9e9e:	689a      	ldr	r2, [r3, #8]
    9ea0:	3205      	adds	r2, #5
    9ea2:	609a      	str	r2, [r3, #8]
			MACRxPacket.flags.bits.secEn = 1;
    9ea4:	781a      	ldrb	r2, [r3, #0]
    9ea6:	2108      	movs	r1, #8
    9ea8:	430a      	orrs	r2, r1
    9eaa:	701a      	strb	r2, [r3, #0]
    9eac:	e5c9      	b.n	9a42 <MiMAC_ReceivedPacket+0x10a>
					MiMAC_DiscardPacket();
    9eae:	4b57      	ldr	r3, [pc, #348]	; (a00c <MiMAC_ReceivedPacket+0x6d4>)
    9eb0:	4798      	blx	r3
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9eb2:	4b57      	ldr	r3, [pc, #348]	; (a010 <MiMAC_ReceivedPacket+0x6d8>)
    9eb4:	781a      	ldrb	r2, [r3, #0]
    9eb6:	0213      	lsls	r3, r2, #8
    9eb8:	189a      	adds	r2, r3, r2
    9eba:	4b51      	ldr	r3, [pc, #324]	; (a000 <MiMAC_ReceivedPacket+0x6c8>)
    9ebc:	189b      	adds	r3, r3, r2
    9ebe:	789b      	ldrb	r3, [r3, #2]
    9ec0:	069b      	lsls	r3, r3, #26
    9ec2:	d5a3      	bpl.n	9e0c <MiMAC_ReceivedPacket+0x4d4>
						MiRadioReceiveParam.action = RECEIVE_START;					
    9ec4:	a807      	add	r0, sp, #28
    9ec6:	2300      	movs	r3, #0
    9ec8:	7003      	strb	r3, [r0, #0]
						MiRadioReceiveParam.rxWindowSize = 0;
    9eca:	8043      	strh	r3, [r0, #2]
						RADIO_Receive(&MiRadioReceiveParam);
    9ecc:	4b51      	ldr	r3, [pc, #324]	; (a014 <MiMAC_ReceivedPacket+0x6dc>)
    9ece:	4798      	blx	r3
    9ed0:	e79c      	b.n	9e0c <MiMAC_ReceivedPacket+0x4d4>
				MiMAC_DiscardPacket();
    9ed2:	4b4e      	ldr	r3, [pc, #312]	; (a00c <MiMAC_ReceivedPacket+0x6d4>)
    9ed4:	4798      	blx	r3
				if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9ed6:	4b4e      	ldr	r3, [pc, #312]	; (a010 <MiMAC_ReceivedPacket+0x6d8>)
    9ed8:	781a      	ldrb	r2, [r3, #0]
    9eda:	0213      	lsls	r3, r2, #8
    9edc:	189a      	adds	r2, r3, r2
    9ede:	4b48      	ldr	r3, [pc, #288]	; (a000 <MiMAC_ReceivedPacket+0x6c8>)
    9ee0:	189b      	adds	r3, r3, r2
    9ee2:	789b      	ldrb	r3, [r3, #2]
    9ee4:	069b      	lsls	r3, r3, #26
    9ee6:	d591      	bpl.n	9e0c <MiMAC_ReceivedPacket+0x4d4>
					MiRadioReceiveParam.action = RECEIVE_START;					
    9ee8:	a807      	add	r0, sp, #28
    9eea:	2300      	movs	r3, #0
    9eec:	7003      	strb	r3, [r0, #0]
					MiRadioReceiveParam.rxWindowSize = 0;
    9eee:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&MiRadioReceiveParam);
    9ef0:	4b48      	ldr	r3, [pc, #288]	; (a014 <MiMAC_ReceivedPacket+0x6dc>)
    9ef2:	4798      	blx	r3
    9ef4:	e78a      	b.n	9e0c <MiMAC_ReceivedPacket+0x4d4>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_DATA;
    9ef6:	4a43      	ldr	r2, [pc, #268]	; (a004 <MiMAC_ReceivedPacket+0x6cc>)
    9ef8:	7813      	ldrb	r3, [r2, #0]
    9efa:	2403      	movs	r4, #3
    9efc:	43a3      	bics	r3, r4
    9efe:	7013      	strb	r3, [r2, #0]
		MACRxPacket.LQIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 2];
    9f00:	4c40      	ldr	r4, [pc, #256]	; (a004 <MiMAC_ReceivedPacket+0x6cc>)
    9f02:	4b3f      	ldr	r3, [pc, #252]	; (a000 <MiMAC_ReceivedPacket+0x6c8>)
    9f04:	0202      	lsls	r2, r0, #8
    9f06:	1812      	adds	r2, r2, r0
    9f08:	5cd5      	ldrb	r5, [r2, r3]
    9f0a:	189b      	adds	r3, r3, r2
    9f0c:	5d5a      	ldrb	r2, [r3, r5]
    9f0e:	73a2      	strb	r2, [r4, #14]
		MACRxPacket.RSSIValue = RxBuffer[BankIndex].radioRSSI;				
    9f10:	785b      	ldrb	r3, [r3, #1]
    9f12:	7363      	strb	r3, [r4, #13]
		return true;
    9f14:	2401      	movs	r4, #1
		if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9f16:	068b      	lsls	r3, r1, #26
    9f18:	d400      	bmi.n	9f1c <MiMAC_ReceivedPacket+0x5e4>
    9f1a:	e529      	b.n	9970 <MiMAC_ReceivedPacket+0x38>
			    tParamAck.flags.Val = 0;
    9f1c:	aa04      	add	r2, sp, #16
    9f1e:	2400      	movs	r4, #0
			    tParamAck.altSrcAddr = 0;
    9f20:	7254      	strb	r4, [r2, #9]
			    tParamAck.altDestAddr = false;
    9f22:	7214      	strb	r4, [r2, #8]
 			    tParamAck.flags.bits.sourcePrsnt = 1;
    9f24:	233e      	movs	r3, #62	; 0x3e
    9f26:	425b      	negs	r3, r3
    9f28:	7013      	strb	r3, [r2, #0]
			    tParamAck.DestAddress = MACRxPacket.SourceAddress;
    9f2a:	4b36      	ldr	r3, [pc, #216]	; (a004 <MiMAC_ReceivedPacket+0x6cc>)
    9f2c:	6859      	ldr	r1, [r3, #4]
    9f2e:	9105      	str	r1, [sp, #20]
			    tParamAck.DestPANID.Val = MACRxPacket.SourcePANID.Val;
    9f30:	8a1b      	ldrh	r3, [r3, #16]
    9f32:	8153      	strh	r3, [r2, #10]
			AckBuffer[0] = RxBuffer[BankIndex].Payload[2];	
    9f34:	4b3d      	ldr	r3, [pc, #244]	; (a02c <MiMAC_ReceivedPacket+0x6f4>)
    9f36:	0205      	lsls	r5, r0, #8
    9f38:	182d      	adds	r5, r5, r0
    9f3a:	4831      	ldr	r0, [pc, #196]	; (a000 <MiMAC_ReceivedPacket+0x6c8>)
    9f3c:	1940      	adds	r0, r0, r5
    9f3e:	7900      	ldrb	r0, [r0, #4]
    9f40:	7018      	strb	r0, [r3, #0]
			MiMAC_SendPacket(tParamAck, AckBuffer, 1, 0, NULL);
    9f42:	9402      	str	r4, [sp, #8]
    9f44:	9401      	str	r4, [sp, #4]
    9f46:	2001      	movs	r0, #1
    9f48:	9000      	str	r0, [sp, #0]
    9f4a:	9804      	ldr	r0, [sp, #16]
    9f4c:	9a06      	ldr	r2, [sp, #24]
    9f4e:	4c38      	ldr	r4, [pc, #224]	; (a030 <MiMAC_ReceivedPacket+0x6f8>)
    9f50:	47a0      	blx	r4
		return true;
    9f52:	2401      	movs	r4, #1
    9f54:	e50c      	b.n	9970 <MiMAC_ReceivedPacket+0x38>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_COMMAND;
    9f56:	4a2b      	ldr	r2, [pc, #172]	; (a004 <MiMAC_ReceivedPacket+0x6cc>)
    9f58:	7813      	ldrb	r3, [r2, #0]
    9f5a:	2403      	movs	r4, #3
    9f5c:	43a3      	bics	r3, r4
    9f5e:	2401      	movs	r4, #1
    9f60:	4323      	orrs	r3, r4
    9f62:	7013      	strb	r3, [r2, #0]
			break;
    9f64:	e7cc      	b.n	9f00 <MiMAC_ReceivedPacket+0x5c8>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_RESERVE;
    9f66:	4a27      	ldr	r2, [pc, #156]	; (a004 <MiMAC_ReceivedPacket+0x6cc>)
    9f68:	7813      	ldrb	r3, [r2, #0]
    9f6a:	2403      	movs	r4, #3
    9f6c:	4323      	orrs	r3, r4
    9f6e:	7013      	strb	r3, [r2, #0]
			break;
    9f70:	e7c6      	b.n	9f00 <MiMAC_ReceivedPacket+0x5c8>
				MACRxPacket.flags.bits.packetType = PACKET_TYPE_ACK;
    9f72:	4a24      	ldr	r2, [pc, #144]	; (a004 <MiMAC_ReceivedPacket+0x6cc>)
    9f74:	7813      	ldrb	r3, [r2, #0]
    9f76:	2103      	movs	r1, #3
    9f78:	438b      	bics	r3, r1
    9f7a:	2102      	movs	r1, #2
    9f7c:	430b      	orrs	r3, r1
    9f7e:	7013      	strb	r3, [r2, #0]
				if((AckSeqNum == *(MACRxPacket.Payload))&& (AckReqData))
    9f80:	6893      	ldr	r3, [r2, #8]
    9f82:	781a      	ldrb	r2, [r3, #0]
    9f84:	4b2b      	ldr	r3, [pc, #172]	; (a034 <MiMAC_ReceivedPacket+0x6fc>)
    9f86:	781b      	ldrb	r3, [r3, #0]
    9f88:	429a      	cmp	r2, r3
    9f8a:	d003      	beq.n	9f94 <MiMAC_ReceivedPacket+0x65c>
				MiMAC_DiscardPacket();
    9f8c:	4b1f      	ldr	r3, [pc, #124]	; (a00c <MiMAC_ReceivedPacket+0x6d4>)
    9f8e:	4798      	blx	r3
				return false;
    9f90:	2400      	movs	r4, #0
    9f92:	e4ed      	b.n	9970 <MiMAC_ReceivedPacket+0x38>
				if((AckSeqNum == *(MACRxPacket.Payload))&& (AckReqData))
    9f94:	4b28      	ldr	r3, [pc, #160]	; (a038 <MiMAC_ReceivedPacket+0x700>)
    9f96:	781b      	ldrb	r3, [r3, #0]
    9f98:	2b00      	cmp	r3, #0
    9f9a:	d0f7      	beq.n	9f8c <MiMAC_ReceivedPacket+0x654>
					DataTxAckTimer.Val = 0;
    9f9c:	2400      	movs	r4, #0
    9f9e:	4b27      	ldr	r3, [pc, #156]	; (a03c <MiMAC_ReceivedPacket+0x704>)
    9fa0:	601c      	str	r4, [r3, #0]
					PHY_DataConf(SUCCESS); 
    9fa2:	2000      	movs	r0, #0
    9fa4:	4b26      	ldr	r3, [pc, #152]	; (a040 <MiMAC_ReceivedPacket+0x708>)
    9fa6:	4798      	blx	r3
					AckReqData = 0;
    9fa8:	4b23      	ldr	r3, [pc, #140]	; (a038 <MiMAC_ReceivedPacket+0x700>)
    9faa:	701c      	strb	r4, [r3, #0]
    9fac:	e7ee      	b.n	9f8c <MiMAC_ReceivedPacket+0x654>
				if (!(((RxBuffer[BankIndex].Payload[5] == 0xFF) & (RxBuffer[BankIndex].Payload[6] == 0xFF)) ||((RxBuffer[BankIndex].Payload[5] == DevShortAddress[0]) & (RxBuffer[BankIndex].Payload[6] == DevShortAddress[1]))) )
    9fae:	0201      	lsls	r1, r0, #8
    9fb0:	1809      	adds	r1, r1, r0
    9fb2:	4b13      	ldr	r3, [pc, #76]	; (a000 <MiMAC_ReceivedPacket+0x6c8>)
    9fb4:	185b      	adds	r3, r3, r1
    9fb6:	4914      	ldr	r1, [pc, #80]	; (a008 <MiMAC_ReceivedPacket+0x6d0>)
    9fb8:	7849      	ldrb	r1, [r1, #1]
    9fba:	7a1b      	ldrb	r3, [r3, #8]
    9fbc:	4299      	cmp	r1, r3
    9fbe:	d000      	beq.n	9fc2 <MiMAC_ReceivedPacket+0x68a>
    9fc0:	e5a1      	b.n	9b06 <MiMAC_ReceivedPacket+0x1ce>
    9fc2:	4b11      	ldr	r3, [pc, #68]	; (a008 <MiMAC_ReceivedPacket+0x6d0>)
    9fc4:	781b      	ldrb	r3, [r3, #0]
    9fc6:	42a3      	cmp	r3, r4
    9fc8:	d000      	beq.n	9fcc <MiMAC_ReceivedPacket+0x694>
    9fca:	e59c      	b.n	9b06 <MiMAC_ReceivedPacket+0x1ce>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    9fcc:	490d      	ldr	r1, [pc, #52]	; (a004 <MiMAC_ReceivedPacket+0x6cc>)
    9fce:	4c0c      	ldr	r4, [pc, #48]	; (a000 <MiMAC_ReceivedPacket+0x6c8>)
    9fd0:	0203      	lsls	r3, r0, #8
    9fd2:	1818      	adds	r0, r3, r0
    9fd4:	1823      	adds	r3, r4, r0
    9fd6:	795d      	ldrb	r5, [r3, #5]
    9fd8:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    9fda:	799b      	ldrb	r3, [r3, #6]
    9fdc:	744b      	strb	r3, [r1, #17]
    9fde:	0213      	lsls	r3, r2, #8
    9fe0:	189a      	adds	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    9fe2:	0013      	movs	r3, r2
    9fe4:	3309      	adds	r3, #9
    9fe6:	191b      	adds	r3, r3, r4
    9fe8:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    9fea:	5d03      	ldrb	r3, [r0, r4]
    9fec:	3b13      	subs	r3, #19
    9fee:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    9ff0:	3211      	adds	r2, #17
    9ff2:	1912      	adds	r2, r2, r4
    9ff4:	608a      	str	r2, [r1, #8]
    9ff6:	e5b7      	b.n	9b68 <MiMAC_ReceivedPacket+0x230>
			BankIndex = i;
    9ff8:	2200      	movs	r2, #0
    9ffa:	4b05      	ldr	r3, [pc, #20]	; (a010 <MiMAC_ReceivedPacket+0x6d8>)
    9ffc:	701a      	strb	r2, [r3, #0]
    9ffe:	e4c2      	b.n	9986 <MiMAC_ReceivedPacket+0x4e>
    a000:	200023fc 	.word	0x200023fc
    a004:	20002844 	.word	0x20002844
    a008:	20002804 	.word	0x20002804
    a00c:	000098b9 	.word	0x000098b9
    a010:	2000001b 	.word	0x2000001b
    a014:	0000e755 	.word	0x0000e755
    a018:	200023f4 	.word	0x200023f4
    a01c:	0000a6c9 	.word	0x0000a6c9
    a020:	20002868 	.word	0x20002868
    a024:	200022e0 	.word	0x200022e0
    a028:	0000934d 	.word	0x0000934d
    a02c:	200022e4 	.word	0x200022e4
    a030:	00009529 	.word	0x00009529
    a034:	20002178 	.word	0x20002178
    a038:	20000483 	.word	0x20000483
    a03c:	20002b04 	.word	0x20002b04
    a040:	000098d5 	.word	0x000098d5

0000a044 <MiMAC_Task>:

void MiMAC_Task(void)
{
    a044:	b510      	push	{r4, lr}
  PHY_TaskHandler();
    a046:	4b0b      	ldr	r3, [pc, #44]	; (a074 <MiMAC_Task+0x30>)
    a048:	4798      	blx	r3
  if(dataConfCallback && dataConfAvailable)
    a04a:	4b0b      	ldr	r3, [pc, #44]	; (a078 <MiMAC_Task+0x34>)
    a04c:	681b      	ldr	r3, [r3, #0]
    a04e:	2b00      	cmp	r3, #0
    a050:	d003      	beq.n	a05a <MiMAC_Task+0x16>
    a052:	4a0a      	ldr	r2, [pc, #40]	; (a07c <MiMAC_Task+0x38>)
    a054:	7812      	ldrb	r2, [r2, #0]
    a056:	2a00      	cmp	r2, #0
    a058:	d100      	bne.n	a05c <MiMAC_Task+0x18>
  {
	  dataConfAvailable = false;
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
  }
}
    a05a:	bd10      	pop	{r4, pc}
	  dataConfAvailable = false;
    a05c:	2100      	movs	r1, #0
    a05e:	4a07      	ldr	r2, [pc, #28]	; (a07c <MiMAC_Task+0x38>)
    a060:	7011      	strb	r1, [r2, #0]
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
    a062:	4a07      	ldr	r2, [pc, #28]	; (a080 <MiMAC_Task+0x3c>)
    a064:	6812      	ldr	r2, [r2, #0]
    a066:	4907      	ldr	r1, [pc, #28]	; (a084 <MiMAC_Task+0x40>)
    a068:	7809      	ldrb	r1, [r1, #0]
    a06a:	4807      	ldr	r0, [pc, #28]	; (a088 <MiMAC_Task+0x44>)
    a06c:	7800      	ldrb	r0, [r0, #0]
    a06e:	4798      	blx	r3
}
    a070:	e7f3      	b.n	a05a <MiMAC_Task+0x16>
    a072:	46c0      	nop			; (mov r8, r8)
    a074:	0000a485 	.word	0x0000a485
    a078:	20000488 	.word	0x20000488
    a07c:	20000486 	.word	0x20000486
    a080:	20000490 	.word	0x20000490
    a084:	200022c8 	.word	0x200022c8
    a088:	2000048c 	.word	0x2000048c

0000a08c <phySetChannel>:
}

/*************************************************************************//**
*****************************************************************************/
static void phySetChannel(void)
{
    a08c:	b500      	push	{lr}
    a08e:	b083      	sub	sp, #12
	uint32_t frequncy_set;
	if(phyChannel) // Based on channel we need to set frequency 
    a090:	4b2f      	ldr	r3, [pc, #188]	; (a150 <phySetChannel+0xc4>)
    a092:	781b      	ldrb	r3, [r3, #0]
    a094:	2b00      	cmp	r3, #0
    a096:	d007      	beq.n	a0a8 <phySetChannel+0x1c>
	{
		switch(phyChannel)
    a098:	2b19      	cmp	r3, #25
    a09a:	d856      	bhi.n	a14a <phySetChannel+0xbe>
    a09c:	009b      	lsls	r3, r3, #2
    a09e:	4a2d      	ldr	r2, [pc, #180]	; (a154 <phySetChannel+0xc8>)
    a0a0:	58d3      	ldr	r3, [r2, r3]
    a0a2:	469f      	mov	pc, r3
				//break;
			//case 8:
				//frequncy_set = FREQ_786000KHZ;
				//break;
			case 0:
				frequncy_set = FREQ_862000KHZ;
    a0a4:	4b2c      	ldr	r3, [pc, #176]	; (a158 <phySetChannel+0xcc>)
    a0a6:	9301      	str	r3, [sp, #4]
				break;				
																									
		}
	}
		
	if(RADIO_SetAttr(CHANNEL_FREQUENCY,(void *)&frequncy_set) == 0)  
    a0a8:	a901      	add	r1, sp, #4
    a0aa:	2001      	movs	r0, #1
    a0ac:	4b2b      	ldr	r3, [pc, #172]	; (a15c <phySetChannel+0xd0>)
    a0ae:	4798      	blx	r3
	{
	}
}
    a0b0:	b003      	add	sp, #12
    a0b2:	bd00      	pop	{pc}
				frequncy_set = FREQ_863000KHZ;
    a0b4:	4b2a      	ldr	r3, [pc, #168]	; (a160 <phySetChannel+0xd4>)
    a0b6:	9301      	str	r3, [sp, #4]
				break;
    a0b8:	e7f6      	b.n	a0a8 <phySetChannel+0x1c>
				frequncy_set = FREQ_865000KHZ;
    a0ba:	4b2a      	ldr	r3, [pc, #168]	; (a164 <phySetChannel+0xd8>)
    a0bc:	9301      	str	r3, [sp, #4]
				break;
    a0be:	e7f3      	b.n	a0a8 <phySetChannel+0x1c>
				frequncy_set = FREQ_866550KHZ;
    a0c0:	4b29      	ldr	r3, [pc, #164]	; (a168 <phySetChannel+0xdc>)
    a0c2:	9301      	str	r3, [sp, #4]
				break;
    a0c4:	e7f0      	b.n	a0a8 <phySetChannel+0x1c>
				frequncy_set = FREQ_867000KHZ;
    a0c6:	4b29      	ldr	r3, [pc, #164]	; (a16c <phySetChannel+0xe0>)
    a0c8:	9301      	str	r3, [sp, #4]
				break;			
    a0ca:	e7ed      	b.n	a0a8 <phySetChannel+0x1c>
				frequncy_set = FREQ_868100KHZ;
    a0cc:	4b28      	ldr	r3, [pc, #160]	; (a170 <phySetChannel+0xe4>)
    a0ce:	9301      	str	r3, [sp, #4]
				break;
    a0d0:	e7ea      	b.n	a0a8 <phySetChannel+0x1c>
				frequncy_set = FREQ_869525KHZ;
    a0d2:	4b28      	ldr	r3, [pc, #160]	; (a174 <phySetChannel+0xe8>)
    a0d4:	9301      	str	r3, [sp, #4]
				break;			
    a0d6:	e7e7      	b.n	a0a8 <phySetChannel+0x1c>
				frequncy_set = FREQ_870000KHZ;
    a0d8:	4b27      	ldr	r3, [pc, #156]	; (a178 <phySetChannel+0xec>)
    a0da:	9301      	str	r3, [sp, #4]
				break;
    a0dc:	e7e4      	b.n	a0a8 <phySetChannel+0x1c>
				frequncy_set = FREQ_902300KHZ;
    a0de:	4b27      	ldr	r3, [pc, #156]	; (a17c <phySetChannel+0xf0>)
    a0e0:	9301      	str	r3, [sp, #4]
				break;
    a0e2:	e7e1      	b.n	a0a8 <phySetChannel+0x1c>
				frequncy_set = FREQ_903000KHZ;
    a0e4:	4b26      	ldr	r3, [pc, #152]	; (a180 <phySetChannel+0xf4>)
    a0e6:	9301      	str	r3, [sp, #4]
				break;
    a0e8:	e7de      	b.n	a0a8 <phySetChannel+0x1c>
				frequncy_set = FREQ_915000KHZ;
    a0ea:	4b26      	ldr	r3, [pc, #152]	; (a184 <phySetChannel+0xf8>)
    a0ec:	9301      	str	r3, [sp, #4]
				break;
    a0ee:	e7db      	b.n	a0a8 <phySetChannel+0x1c>
				frequncy_set = FREQ_915200KHZ;
    a0f0:	4b25      	ldr	r3, [pc, #148]	; (a188 <phySetChannel+0xfc>)
    a0f2:	9301      	str	r3, [sp, #4]
				break;
    a0f4:	e7d8      	b.n	a0a8 <phySetChannel+0x1c>
				frequncy_set = FREQ_915900KHZ;
    a0f6:	4b25      	ldr	r3, [pc, #148]	; (a18c <phySetChannel+0x100>)
    a0f8:	9301      	str	r3, [sp, #4]
				break;
    a0fa:	e7d5      	b.n	a0a8 <phySetChannel+0x1c>
				frequncy_set = FREQ_920000KHZ;
    a0fc:	4b24      	ldr	r3, [pc, #144]	; (a190 <phySetChannel+0x104>)
    a0fe:	9301      	str	r3, [sp, #4]
				break;
    a100:	e7d2      	b.n	a0a8 <phySetChannel+0x1c>
				frequncy_set = FREQ_920900KHZ;
    a102:	4b24      	ldr	r3, [pc, #144]	; (a194 <phySetChannel+0x108>)
    a104:	9301      	str	r3, [sp, #4]
				break;
    a106:	e7cf      	b.n	a0a8 <phySetChannel+0x1c>
				frequncy_set = FREQ_921900KHZ;
    a108:	4b23      	ldr	r3, [pc, #140]	; (a198 <phySetChannel+0x10c>)
    a10a:	9301      	str	r3, [sp, #4]
				break;
    a10c:	e7cc      	b.n	a0a8 <phySetChannel+0x1c>
				frequncy_set = FREQ_922000KHZ;
    a10e:	4b23      	ldr	r3, [pc, #140]	; (a19c <phySetChannel+0x110>)
    a110:	9301      	str	r3, [sp, #4]
				break;
    a112:	e7c9      	b.n	a0a8 <phySetChannel+0x1c>
				frequncy_set = FREQ_922100KHZ;
    a114:	4b22      	ldr	r3, [pc, #136]	; (a1a0 <phySetChannel+0x114>)
    a116:	9301      	str	r3, [sp, #4]
				break;
    a118:	e7c6      	b.n	a0a8 <phySetChannel+0x1c>
				frequncy_set = FREQ_923000KHZ;
    a11a:	4b22      	ldr	r3, [pc, #136]	; (a1a4 <phySetChannel+0x118>)
    a11c:	9301      	str	r3, [sp, #4]
				break;
    a11e:	e7c3      	b.n	a0a8 <phySetChannel+0x1c>
				frequncy_set = FREQ_923200KHZ;
    a120:	4b21      	ldr	r3, [pc, #132]	; (a1a8 <phySetChannel+0x11c>)
    a122:	9301      	str	r3, [sp, #4]
				break;
    a124:	e7c0      	b.n	a0a8 <phySetChannel+0x1c>
				frequncy_set = FREQ_923300KHZ;
    a126:	4b21      	ldr	r3, [pc, #132]	; (a1ac <phySetChannel+0x120>)
    a128:	9301      	str	r3, [sp, #4]
				break;
    a12a:	e7bd      	b.n	a0a8 <phySetChannel+0x1c>
				frequncy_set = FREQ_925000KHZ;
    a12c:	4b20      	ldr	r3, [pc, #128]	; (a1b0 <phySetChannel+0x124>)
    a12e:	9301      	str	r3, [sp, #4]
				break;		
    a130:	e7ba      	b.n	a0a8 <phySetChannel+0x1c>
				frequncy_set = FREQ_927500KHZ;
    a132:	4b20      	ldr	r3, [pc, #128]	; (a1b4 <phySetChannel+0x128>)
    a134:	9301      	str	r3, [sp, #4]
				break;
    a136:	e7b7      	b.n	a0a8 <phySetChannel+0x1c>
				frequncy_set = FREQ_928000KHZ;
    a138:	4b1f      	ldr	r3, [pc, #124]	; (a1b8 <phySetChannel+0x12c>)
    a13a:	9301      	str	r3, [sp, #4]
				break;
    a13c:	e7b4      	b.n	a0a8 <phySetChannel+0x1c>
				frequncy_set = FREQ_928500KHZ;
    a13e:	4b1f      	ldr	r3, [pc, #124]	; (a1bc <phySetChannel+0x130>)
    a140:	9301      	str	r3, [sp, #4]
				break;
    a142:	e7b1      	b.n	a0a8 <phySetChannel+0x1c>
				frequncy_set = FREQ_1020000KHZ;
    a144:	4b1e      	ldr	r3, [pc, #120]	; (a1c0 <phySetChannel+0x134>)
    a146:	9301      	str	r3, [sp, #4]
				break;
    a148:	e7ae      	b.n	a0a8 <phySetChannel+0x1c>
				frequncy_set = FREQ_868100KHZ;
    a14a:	4b09      	ldr	r3, [pc, #36]	; (a170 <phySetChannel+0xe4>)
    a14c:	9301      	str	r3, [sp, #4]
				break;				
    a14e:	e7ab      	b.n	a0a8 <phySetChannel+0x1c>
    a150:	20000494 	.word	0x20000494
    a154:	000171c0 	.word	0x000171c0
    a158:	33611380 	.word	0x33611380
    a15c:	0000d531 	.word	0x0000d531
    a160:	337055c0 	.word	0x337055c0
    a164:	338eda40 	.word	0x338eda40
    a168:	33a680f0 	.word	0x33a680f0
    a16c:	33ad5ec0 	.word	0x33ad5ec0
    a170:	33be27a0 	.word	0x33be27a0
    a174:	33d3e608 	.word	0x33d3e608
    a178:	33db2580 	.word	0x33db2580
    a17c:	35c80160 	.word	0x35c80160
    a180:	35d2afc0 	.word	0x35d2afc0
    a184:	3689cac0 	.word	0x3689cac0
    a188:	368cd800 	.word	0x368cd800
    a18c:	36978660 	.word	0x36978660
    a190:	36d61600 	.word	0x36d61600
    a194:	36e3d1a0 	.word	0x36e3d1a0
    a198:	36f313e0 	.word	0x36f313e0
    a19c:	36f49a80 	.word	0x36f49a80
    a1a0:	36f62120 	.word	0x36f62120
    a1a4:	3703dcc0 	.word	0x3703dcc0
    a1a8:	3706ea00 	.word	0x3706ea00
    a1ac:	370870a0 	.word	0x370870a0
    a1b0:	37226140 	.word	0x37226140
    a1b4:	374886e0 	.word	0x374886e0
    a1b8:	37502800 	.word	0x37502800
    a1bc:	3757c920 	.word	0x3757c920
    a1c0:	3ccbf700 	.word	0x3ccbf700

0000a1c4 <radioCallback>:
{
    a1c4:	b570      	push	{r4, r5, r6, lr}
    a1c6:	b082      	sub	sp, #8
    a1c8:	0004      	movs	r4, r0
    a1ca:	000d      	movs	r5, r1
	callbackBackup = callback;
    a1cc:	4b3e      	ldr	r3, [pc, #248]	; (a2c8 <radioCallback+0x104>)
    a1ce:	7018      	strb	r0, [r3, #0]
	int16_t rssi_readVal=0;
    a1d0:	466b      	mov	r3, sp
    a1d2:	1c98      	adds	r0, r3, #2
    a1d4:	2300      	movs	r3, #0
    a1d6:	8003      	strh	r3, [r0, #0]
	Radio_ReadRssi(&rssi_readVal);
    a1d8:	4b3c      	ldr	r3, [pc, #240]	; (a2cc <radioCallback+0x108>)
    a1da:	4798      	blx	r3
	switch (callback)
    a1dc:	2c10      	cmp	r4, #16
    a1de:	d853      	bhi.n	a288 <radioCallback+0xc4>
    a1e0:	00a4      	lsls	r4, r4, #2
    a1e2:	4b3b      	ldr	r3, [pc, #236]	; (a2d0 <radioCallback+0x10c>)
    a1e4:	591b      	ldr	r3, [r3, r4]
    a1e6:	469f      	mov	pc, r3
					if (RxBuffer[i].PayloadLen == 0)
    a1e8:	4b3a      	ldr	r3, [pc, #232]	; (a2d4 <radioCallback+0x110>)
    a1ea:	781a      	ldrb	r2, [r3, #0]
    a1ec:	2a00      	cmp	r2, #0
    a1ee:	d00e      	beq.n	a20e <radioCallback+0x4a>
    a1f0:	2302      	movs	r3, #2
    a1f2:	33ff      	adds	r3, #255	; 0xff
    a1f4:	4a37      	ldr	r2, [pc, #220]	; (a2d4 <radioCallback+0x110>)
    a1f6:	5cd3      	ldrb	r3, [r2, r3]
    a1f8:	2b00      	cmp	r3, #0
    a1fa:	d04e      	beq.n	a29a <radioCallback+0xd6>
    a1fc:	4b36      	ldr	r3, [pc, #216]	; (a2d8 <radioCallback+0x114>)
    a1fe:	5cd3      	ldrb	r3, [r2, r3]
    a200:	2b00      	cmp	r3, #0
    a202:	d04c      	beq.n	a29e <radioCallback+0xda>
    a204:	4b35      	ldr	r3, [pc, #212]	; (a2dc <radioCallback+0x118>)
    a206:	5cd3      	ldrb	r3, [r2, r3]
	uint8_t i,RxBank=0xFF;
    a208:	22ff      	movs	r2, #255	; 0xff
					if (RxBuffer[i].PayloadLen == 0)
    a20a:	2b00      	cmp	r3, #0
    a20c:	d043      	beq.n	a296 <radioCallback+0xd2>
				RxBuffer[RxBank].PayloadLen = callbackRx->RX.bufferLength;
    a20e:	0016      	movs	r6, r2
    a210:	7a2c      	ldrb	r4, [r5, #8]
    a212:	0213      	lsls	r3, r2, #8
    a214:	189a      	adds	r2, r3, r2
    a216:	4b2f      	ldr	r3, [pc, #188]	; (a2d4 <radioCallback+0x110>)
    a218:	54d4      	strb	r4, [r2, r3]
				if (RxBuffer[RxBank].PayloadLen < (RX_PACKET_SIZE - 4))			
    a21a:	2cfa      	cmp	r4, #250	; 0xfa
    a21c:	d80d      	bhi.n	a23a <radioCallback+0x76>
    a21e:	2300      	movs	r3, #0
						RxBuffer[RxBank].Payload[i] = callbackRx->RX.buffer[i];
    a220:	0232      	lsls	r2, r6, #8
    a222:	1992      	adds	r2, r2, r6
    a224:	482b      	ldr	r0, [pc, #172]	; (a2d4 <radioCallback+0x110>)
    a226:	1880      	adds	r0, r0, r2
    a228:	686a      	ldr	r2, [r5, #4]
    a22a:	5cd1      	ldrb	r1, [r2, r3]
    a22c:	18c2      	adds	r2, r0, r3
    a22e:	7091      	strb	r1, [r2, #2]
					for (i = 0; i <= callbackRx->RX.bufferLength; i++)
    a230:	3301      	adds	r3, #1
    a232:	b2db      	uxtb	r3, r3
    a234:	7a2a      	ldrb	r2, [r5, #8]
    a236:	429a      	cmp	r2, r3
    a238:	d2f6      	bcs.n	a228 <radioCallback+0x64>
				RxBuffer[RxBank].PayloadLen +=4;
    a23a:	4b26      	ldr	r3, [pc, #152]	; (a2d4 <radioCallback+0x110>)
    a23c:	0232      	lsls	r2, r6, #8
    a23e:	1992      	adds	r2, r2, r6
    a240:	3404      	adds	r4, #4
    a242:	54d4      	strb	r4, [r2, r3]
				rssi_readVal = radioConfiguration.packetRSSI;
    a244:	2156      	movs	r1, #86	; 0x56
    a246:	4826      	ldr	r0, [pc, #152]	; (a2e0 <radioCallback+0x11c>)
    a248:	5641      	ldrsb	r1, [r0, r1]
    a24a:	4668      	mov	r0, sp
    a24c:	8041      	strh	r1, [r0, #2]
				RxBuffer[RxBank].radioRSSI = rssi_readVal;						
    a24e:	189b      	adds	r3, r3, r2
    a250:	7059      	strb	r1, [r3, #1]
				if(RxBuffer[RxBank].Payload[0] & 0x20)
    a252:	789b      	ldrb	r3, [r3, #2]
    a254:	069b      	lsls	r3, r3, #26
    a256:	d524      	bpl.n	a2a2 <radioCallback+0xde>
					RadioReceiveParam.action = RECEIVE_STOP;					
    a258:	a801      	add	r0, sp, #4
    a25a:	2301      	movs	r3, #1
    a25c:	7003      	strb	r3, [r0, #0]
					RadioReceiveParam.rxWindowSize = 0;
    a25e:	2300      	movs	r3, #0
    a260:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&RadioReceiveParam);
    a262:	4b20      	ldr	r3, [pc, #128]	; (a2e4 <radioCallback+0x120>)
    a264:	4798      	blx	r3
    a266:	e00f      	b.n	a288 <radioCallback+0xc4>
			if((!AckReqData)||(callbackRx->status != ERR_NONE))
    a268:	4b1f      	ldr	r3, [pc, #124]	; (a2e8 <radioCallback+0x124>)
    a26a:	781b      	ldrb	r3, [r3, #0]
    a26c:	2b00      	cmp	r3, #0
    a26e:	d002      	beq.n	a276 <radioCallback+0xb2>
    a270:	782b      	ldrb	r3, [r5, #0]
    a272:	2b00      	cmp	r3, #0
    a274:	d00a      	beq.n	a28c <radioCallback+0xc8>
				PHY_DataConf(callbackRx->status); // Need to convert LoRa status to MiWi status
    a276:	7828      	ldrb	r0, [r5, #0]
    a278:	4b1c      	ldr	r3, [pc, #112]	; (a2ec <radioCallback+0x128>)
    a27a:	4798      	blx	r3
			RadioReceiveParam.action = RECEIVE_START;
    a27c:	a801      	add	r0, sp, #4
    a27e:	2300      	movs	r3, #0
    a280:	7003      	strb	r3, [r0, #0]
			RadioReceiveParam.rxWindowSize = 0;
    a282:	8043      	strh	r3, [r0, #2]
			RADIO_Receive(&RadioReceiveParam);
    a284:	4b17      	ldr	r3, [pc, #92]	; (a2e4 <radioCallback+0x120>)
    a286:	4798      	blx	r3
}
    a288:	b002      	add	sp, #8
    a28a:	bd70      	pop	{r4, r5, r6, pc}
				DataTxAckTimer.Val = MiWi_TickGet();
    a28c:	4b18      	ldr	r3, [pc, #96]	; (a2f0 <radioCallback+0x12c>)
    a28e:	4798      	blx	r3
    a290:	4b18      	ldr	r3, [pc, #96]	; (a2f4 <radioCallback+0x130>)
    a292:	6018      	str	r0, [r3, #0]
    a294:	e7f2      	b.n	a27c <radioCallback+0xb8>
				for (i = 0; i < BANK_SIZE; i++)
    a296:	3afc      	subs	r2, #252	; 0xfc
    a298:	e7b9      	b.n	a20e <radioCallback+0x4a>
    a29a:	2201      	movs	r2, #1
    a29c:	e7b7      	b.n	a20e <radioCallback+0x4a>
    a29e:	2202      	movs	r2, #2
    a2a0:	e7b5      	b.n	a20e <radioCallback+0x4a>
					RadioReceiveParam.action = RECEIVE_START;
    a2a2:	a801      	add	r0, sp, #4
    a2a4:	2300      	movs	r3, #0
    a2a6:	7003      	strb	r3, [r0, #0]
					RadioReceiveParam.rxWindowSize = 0;
    a2a8:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&RadioReceiveParam);	
    a2aa:	4b0e      	ldr	r3, [pc, #56]	; (a2e4 <radioCallback+0x120>)
    a2ac:	4798      	blx	r3
    a2ae:	e7eb      	b.n	a288 <radioCallback+0xc4>
				RadioReceiveParam.action = RECEIVE_START;
    a2b0:	ac01      	add	r4, sp, #4
    a2b2:	2300      	movs	r3, #0
    a2b4:	7023      	strb	r3, [r4, #0]
				RadioReceiveParam.rxWindowSize = 0;
    a2b6:	8063      	strh	r3, [r4, #2]
				PHY_DataConf(FAILURE);											
    a2b8:	2001      	movs	r0, #1
    a2ba:	4b0c      	ldr	r3, [pc, #48]	; (a2ec <radioCallback+0x128>)
    a2bc:	4798      	blx	r3
				RADIO_Receive(&RadioReceiveParam);
    a2be:	0020      	movs	r0, r4
    a2c0:	4b08      	ldr	r3, [pc, #32]	; (a2e4 <radioCallback+0x120>)
    a2c2:	4798      	blx	r3
}
    a2c4:	e7e0      	b.n	a288 <radioCallback+0xc4>
    a2c6:	46c0      	nop			; (mov r8, r8)
    a2c8:	200023f3 	.word	0x200023f3
    a2cc:	0000cf11 	.word	0x0000cf11
    a2d0:	00017228 	.word	0x00017228
    a2d4:	200023fc 	.word	0x200023fc
    a2d8:	00000202 	.word	0x00000202
    a2dc:	00000303 	.word	0x00000303
    a2e0:	20002cf4 	.word	0x20002cf4
    a2e4:	0000e755 	.word	0x0000e755
    a2e8:	20000483 	.word	0x20000483
    a2ec:	000098d5 	.word	0x000098d5
    a2f0:	0000bae5 	.word	0x0000bae5
    a2f4:	20002b04 	.word	0x20002b04

0000a2f8 <PHY_Init>:
{
    a2f8:	b510      	push	{r4, lr}
    HAL_RadioInit();
    a2fa:	4b06      	ldr	r3, [pc, #24]	; (a314 <PHY_Init+0x1c>)
    a2fc:	4798      	blx	r3
    AESInit();	
    a2fe:	4b06      	ldr	r3, [pc, #24]	; (a318 <PHY_Init+0x20>)
    a300:	4798      	blx	r3
	RADIO_Init();
    a302:	4b06      	ldr	r3, [pc, #24]	; (a31c <PHY_Init+0x24>)
    a304:	4798      	blx	r3
	RADIO_SetAttr(RADIO_CALLBACK, (void *)&radioCallback);
    a306:	4906      	ldr	r1, [pc, #24]	; (a320 <PHY_Init+0x28>)
    a308:	201a      	movs	r0, #26
    a30a:	4b06      	ldr	r3, [pc, #24]	; (a324 <PHY_Init+0x2c>)
    a30c:	4798      	blx	r3
   RADIO_InitDefaultAttributes();				
    a30e:	4b06      	ldr	r3, [pc, #24]	; (a328 <PHY_Init+0x30>)
    a310:	4798      	blx	r3
}
    a312:	bd10      	pop	{r4, pc}
    a314:	0000be99 	.word	0x0000be99
    a318:	0000c3fd 	.word	0x0000c3fd
    a31c:	0000d74d 	.word	0x0000d74d
    a320:	0000a1c5 	.word	0x0000a1c5
    a324:	0000d531 	.word	0x0000d531
    a328:	0000e561 	.word	0x0000e561

0000a32c <PHY_SetRxState>:
{
    a32c:	b510      	push	{r4, lr}

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
	RADIO_RxHandler();
    a32e:	4b01      	ldr	r3, [pc, #4]	; (a334 <PHY_SetRxState+0x8>)
    a330:	4798      	blx	r3
}
    a332:	bd10      	pop	{r4, pc}
    a334:	0000e095 	.word	0x0000e095

0000a338 <PHY_SetPanId>:
{
    a338:	b082      	sub	sp, #8
	DevPanId[0]=d[0];
    a33a:	b2c2      	uxtb	r2, r0
    a33c:	4b02      	ldr	r3, [pc, #8]	; (a348 <PHY_SetPanId+0x10>)
    a33e:	701a      	strb	r2, [r3, #0]
	DevPanId[1]=d[1];
    a340:	0a00      	lsrs	r0, r0, #8
    a342:	7058      	strb	r0, [r3, #1]
}
    a344:	b002      	add	sp, #8
    a346:	4770      	bx	lr
    a348:	20002800 	.word	0x20002800

0000a34c <PHY_SetShortAddr>:
{
    a34c:	b082      	sub	sp, #8
	DevShortAddress[0]=d[0];
    a34e:	b2c2      	uxtb	r2, r0
    a350:	4b02      	ldr	r3, [pc, #8]	; (a35c <PHY_SetShortAddr+0x10>)
    a352:	701a      	strb	r2, [r3, #0]
	DevShortAddress[1]=d[1];
    a354:	0a00      	lsrs	r0, r0, #8
    a356:	7058      	strb	r0, [r3, #1]
}
    a358:	b002      	add	sp, #8
    a35a:	4770      	bx	lr
    a35c:	20002804 	.word	0x20002804

0000a360 <PHY_Wakeup>:
{
    a360:	b510      	push	{r4, lr}
	if (PHY_STATE_SLEEP == phyState)
    a362:	4b0c      	ldr	r3, [pc, #48]	; (a394 <PHY_Wakeup+0x34>)
    a364:	781b      	ldrb	r3, [r3, #0]
    a366:	2b02      	cmp	r3, #2
    a368:	d000      	beq.n	a36c <PHY_Wakeup+0xc>
}
    a36a:	bd10      	pop	{r4, pc}
		HAL_TCXOPowerOn();
    a36c:	4b0a      	ldr	r3, [pc, #40]	; (a398 <PHY_Wakeup+0x38>)
    a36e:	4798      	blx	r3
		HAL_RadioInit();
    a370:	4b0a      	ldr	r3, [pc, #40]	; (a39c <PHY_Wakeup+0x3c>)
    a372:	4798      	blx	r3
		RADIO_Reset();
    a374:	4b0a      	ldr	r3, [pc, #40]	; (a3a0 <PHY_Wakeup+0x40>)
    a376:	4798      	blx	r3
		Radio_WriteMode(MODE_STANDBY, radioConfiguration.modulation, 0);
    a378:	2334      	movs	r3, #52	; 0x34
    a37a:	4a0a      	ldr	r2, [pc, #40]	; (a3a4 <PHY_Wakeup+0x44>)
    a37c:	5cd1      	ldrb	r1, [r2, r3]
    a37e:	2200      	movs	r2, #0
    a380:	2001      	movs	r0, #1
    a382:	4b09      	ldr	r3, [pc, #36]	; (a3a8 <PHY_Wakeup+0x48>)
    a384:	4798      	blx	r3
	RADIO_RxHandler();
    a386:	4b09      	ldr	r3, [pc, #36]	; (a3ac <PHY_Wakeup+0x4c>)
    a388:	4798      	blx	r3
	 	phyState = PHY_STATE_IDLE;
    a38a:	2201      	movs	r2, #1
    a38c:	4b01      	ldr	r3, [pc, #4]	; (a394 <PHY_Wakeup+0x34>)
    a38e:	701a      	strb	r2, [r3, #0]
}
    a390:	e7eb      	b.n	a36a <PHY_Wakeup+0xa>
    a392:	46c0      	nop			; (mov r8, r8)
    a394:	20000495 	.word	0x20000495
    a398:	0000c1c1 	.word	0x0000c1c1
    a39c:	0000be99 	.word	0x0000be99
    a3a0:	0000c051 	.word	0x0000c051
    a3a4:	20002cf4 	.word	0x20002cf4
    a3a8:	0000cd4d 	.word	0x0000cd4d
    a3ac:	0000e095 	.word	0x0000e095

0000a3b0 <PHY_SetChannel>:
{
    a3b0:	b510      	push	{r4, lr}
	phyChannel = channel;
    a3b2:	4b06      	ldr	r3, [pc, #24]	; (a3cc <PHY_SetChannel+0x1c>)
    a3b4:	7018      	strb	r0, [r3, #0]
	if (PHY_STATE_SLEEP == phyState)
    a3b6:	4b06      	ldr	r3, [pc, #24]	; (a3d0 <PHY_SetChannel+0x20>)
    a3b8:	781b      	ldrb	r3, [r3, #0]
    a3ba:	2b02      	cmp	r3, #2
    a3bc:	d002      	beq.n	a3c4 <PHY_SetChannel+0x14>
	phySetChannel();
    a3be:	4b05      	ldr	r3, [pc, #20]	; (a3d4 <PHY_SetChannel+0x24>)
    a3c0:	4798      	blx	r3
}
    a3c2:	bd10      	pop	{r4, pc}
		PHY_Wakeup();
    a3c4:	4b04      	ldr	r3, [pc, #16]	; (a3d8 <PHY_SetChannel+0x28>)
    a3c6:	4798      	blx	r3
    a3c8:	e7f9      	b.n	a3be <PHY_SetChannel+0xe>
    a3ca:	46c0      	nop			; (mov r8, r8)
    a3cc:	20000494 	.word	0x20000494
    a3d0:	20000495 	.word	0x20000495
    a3d4:	0000a08d 	.word	0x0000a08d
    a3d8:	0000a361 	.word	0x0000a361

0000a3dc <PHY_DataReq>:
{
    a3dc:	b500      	push	{lr}
    a3de:	b085      	sub	sp, #20
		RadioTransmitParam.bufferLen = data[0];
    a3e0:	7803      	ldrb	r3, [r0, #0]
    a3e2:	aa02      	add	r2, sp, #8
    a3e4:	7013      	strb	r3, [r2, #0]
		for (count = 0; count < data[0]; count++)
    a3e6:	2b00      	cmp	r3, #0
    a3e8:	d009      	beq.n	a3fe <PHY_DataReq+0x22>
    a3ea:	2300      	movs	r3, #0
			DataRequestBuffer[count] = data[1+count];
    a3ec:	4912      	ldr	r1, [pc, #72]	; (a438 <PHY_DataReq+0x5c>)
    a3ee:	18c2      	adds	r2, r0, r3
    a3f0:	7852      	ldrb	r2, [r2, #1]
    a3f2:	54ca      	strb	r2, [r1, r3]
		for (count = 0; count < data[0]; count++)
    a3f4:	3301      	adds	r3, #1
    a3f6:	b2db      	uxtb	r3, r3
    a3f8:	7802      	ldrb	r2, [r0, #0]
    a3fa:	429a      	cmp	r2, r3
    a3fc:	d8f7      	bhi.n	a3ee <PHY_DataReq+0x12>
		RadioTransmitParam.bufferPtr = (uint8_t *)&DataRequestBuffer;
    a3fe:	4b0e      	ldr	r3, [pc, #56]	; (a438 <PHY_DataReq+0x5c>)
    a400:	9303      	str	r3, [sp, #12]
		RadioSetState(RADIO_STATE_IDLE);
    a402:	2001      	movs	r0, #1
    a404:	4b0d      	ldr	r3, [pc, #52]	; (a43c <PHY_DataReq+0x60>)
    a406:	4798      	blx	r3
		phySetChannel();
    a408:	4b0d      	ldr	r3, [pc, #52]	; (a440 <PHY_DataReq+0x64>)
    a40a:	4798      	blx	r3
		localRadioLBTParams.lbtScanPeriod = 15;
    a40c:	230f      	movs	r3, #15
    a40e:	466a      	mov	r2, sp
    a410:	8013      	strh	r3, [r2, #0]
		localRadioLBTParams.lbtThreshold = 255;
    a412:	33f0      	adds	r3, #240	; 0xf0
    a414:	8053      	strh	r3, [r2, #2]
		localRadioLBTParams.lbtNumOfSamples = 5;
    a416:	3bfa      	subs	r3, #250	; 0xfa
    a418:	7113      	strb	r3, [r2, #4]
		localRadioLBTParams.lbtTransmitOn = 1;
    a41a:	3b04      	subs	r3, #4
    a41c:	7153      	strb	r3, [r2, #5]
		status = RADIO_SetAttr(RADIO_LBT_PARAMS, &localRadioLBTParams);
    a41e:	4669      	mov	r1, sp
    a420:	201d      	movs	r0, #29
    a422:	4b08      	ldr	r3, [pc, #32]	; (a444 <PHY_DataReq+0x68>)
    a424:	4798      	blx	r3
		status = RADIO_Transmit (&RadioTransmitParam);
    a426:	a802      	add	r0, sp, #8
    a428:	4b07      	ldr	r3, [pc, #28]	; (a448 <PHY_DataReq+0x6c>)
    a42a:	4798      	blx	r3
		return (!status);							
    a42c:	4243      	negs	r3, r0
    a42e:	4158      	adcs	r0, r3
    a430:	b2c0      	uxtb	r0, r0
}
    a432:	b005      	add	sp, #20
    a434:	bd00      	pop	{pc}
    a436:	46c0      	nop			; (mov r8, r8)
    a438:	200022f4 	.word	0x200022f4
    a43c:	0000de59 	.word	0x0000de59
    a440:	0000a08d 	.word	0x0000a08d
    a444:	0000d531 	.word	0x0000d531
    a448:	0000de81 	.word	0x0000de81

0000a44c <PHY_RandomReq>:
{
    a44c:	b510      	push	{r4, lr}
	rnd = RADIO_ReadRandom();
    a44e:	4b03      	ldr	r3, [pc, #12]	; (a45c <PHY_RandomReq+0x10>)
    a450:	4798      	blx	r3
    a452:	0004      	movs	r4, r0
	RADIO_RxHandler();
    a454:	4b02      	ldr	r3, [pc, #8]	; (a460 <PHY_RandomReq+0x14>)
    a456:	4798      	blx	r3
}
    a458:	0020      	movs	r0, r4
    a45a:	bd10      	pop	{r4, pc}
    a45c:	0000ce81 	.word	0x0000ce81
    a460:	0000e095 	.word	0x0000e095

0000a464 <PHY_EncryptReq>:
{	
    a464:	b510      	push	{r4, lr}
	AESEncode(text,key);
    a466:	4b01      	ldr	r3, [pc, #4]	; (a46c <PHY_EncryptReq+0x8>)
    a468:	4798      	blx	r3
}
    a46a:	bd10      	pop	{r4, pc}
    a46c:	0000c321 	.word	0x0000c321

0000a470 <PHY_SetIEEEAddr>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_SetIEEEAddr(uint8_t *ieee_addr)
{
    a470:	2300      	movs	r3, #0
	uint8_t *ptr_to_reg = ieee_addr;

	for (uint8_t i = 0; i < 8; i++)
	{
		DevIEEEaddr[i] = ptr_to_reg[i];
    a472:	4903      	ldr	r1, [pc, #12]	; (a480 <PHY_SetIEEEAddr+0x10>)
    a474:	5cc2      	ldrb	r2, [r0, r3]
    a476:	54ca      	strb	r2, [r1, r3]
    a478:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < 8; i++)
    a47a:	2b08      	cmp	r3, #8
    a47c:	d1fa      	bne.n	a474 <PHY_SetIEEEAddr+0x4>
	}
}
    a47e:	4770      	bx	lr
    a480:	200023f4 	.word	0x200023f4

0000a484 <PHY_TaskHandler>:
    if (PHY_STATE_SLEEP == phyState)
    {
        return;
    }
	// Handled in DIO interrupts 
}
    a484:	4770      	bx	lr
    a486:	Address 0x0000a486 is out of bounds.


0000a488 <CommandConfCallback>:

bool CheckForData(void);

/************************ FUNCTIONS ********************************/
void CommandConfCallback(uint8_t msgConfHandle, miwi_status_t status, uint8_t* msgPointer)
{
    a488:	b510      	push	{r4, lr}
	#if defined (ENABLE_CONSOLE)
		//printf("\r\n  Command Conf : Handle %d & Status %02X  ",msgConfHandle , status );
	#endif
    MiMem_Free(msgPointer);
    a48a:	0010      	movs	r0, r2
    a48c:	4b01      	ldr	r3, [pc, #4]	; (a494 <CommandConfCallback+0xc>)
    a48e:	4798      	blx	r3
}
    a490:	bd10      	pop	{r4, pc}
    a492:	46c0      	nop			; (mov r8, r8)
    a494:	0000b961 	.word	0x0000b961

0000a498 <Total_Connections>:
{
    a498:	2200      	movs	r2, #0
    uint8_t count=0 , i;
    a49a:	2000      	movs	r0, #0
        if (ConnectionTable[i].status.bits.isValid)
    a49c:	4907      	ldr	r1, [pc, #28]	; (a4bc <Total_Connections+0x24>)
    a49e:	e002      	b.n	a4a6 <Total_Connections+0xe>
    a4a0:	3201      	adds	r2, #1
    for (i=0;i<CONNECTION_SIZE;i++)
    a4a2:	2a05      	cmp	r2, #5
    a4a4:	d009      	beq.n	a4ba <Total_Connections+0x22>
        if (ConnectionTable[i].status.bits.isValid)
    a4a6:	0093      	lsls	r3, r2, #2
    a4a8:	189b      	adds	r3, r3, r2
    a4aa:	005b      	lsls	r3, r3, #1
    a4ac:	18cb      	adds	r3, r1, r3
    a4ae:	7a1b      	ldrb	r3, [r3, #8]
    a4b0:	09db      	lsrs	r3, r3, #7
    a4b2:	d0f5      	beq.n	a4a0 <Total_Connections+0x8>
            count++;
    a4b4:	3001      	adds	r0, #1
    a4b6:	b2c0      	uxtb	r0, r0
    a4b8:	e7f2      	b.n	a4a0 <Total_Connections+0x8>
}
    a4ba:	4770      	bx	lr
    a4bc:	2000280c 	.word	0x2000280c

0000a4c0 <IndirectPacket>:
							INPUT uint8_t* msgPtr,
							INPUT uint8_t msghandle,
							INPUT bool ackReq,
                            DataConf_callback_t ConfCallback)
    #endif                            
    { 
    a4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a4c2:	46de      	mov	lr, fp
    a4c4:	4657      	mov	r7, sl
    a4c6:	464e      	mov	r6, r9
    a4c8:	4645      	mov	r5, r8
    a4ca:	b5e0      	push	{r5, r6, r7, lr}
    a4cc:	b083      	sub	sp, #12
    a4ce:	466c      	mov	r4, sp
    a4d0:	8061      	strh	r1, [r4, #2]
    a4d2:	ac0c      	add	r4, sp, #48	; 0x30
    a4d4:	7827      	ldrb	r7, [r4, #0]
    a4d6:	ac0d      	add	r4, sp, #52	; 0x34
    a4d8:	7826      	ldrb	r6, [r4, #0]
    a4da:	ac0f      	add	r4, sp, #60	; 0x3c
    a4dc:	7825      	ldrb	r5, [r4, #0]
    a4de:	ac10      	add	r4, sp, #64	; 0x40
    a4e0:	7821      	ldrb	r1, [r4, #0]
    a4e2:	4688      	mov	r8, r1
        uint8_t i;
        
        #ifndef ENABLE_BROADCAST
            if( Broadcast )
    a4e4:	2800      	cmp	r0, #0
    a4e6:	d000      	beq.n	a4ea <IndirectPacket+0x2a>
    a4e8:	e07e      	b.n	a5e8 <IndirectPacket+0x128>

        // loop through the available indirect message buffer and locate
        // the empty message slot
        for(i = 0; i < INDIRECT_MESSAGE_SIZE; i++)
        {
            if( indirectMessages[i].flags.bits.isValid == 0 )
    a4ea:	4c40      	ldr	r4, [pc, #256]	; (a5ec <IndirectPacket+0x12c>)
    a4ec:	7ba4      	ldrb	r4, [r4, #14]
    a4ee:	07e1      	lsls	r1, r4, #31
    a4f0:	d400      	bmi.n	a4f4 <IndirectPacket+0x34>
    a4f2:	e077      	b.n	a5e4 <IndirectPacket+0x124>
    a4f4:	2491      	movs	r4, #145	; 0x91
    a4f6:	0064      	lsls	r4, r4, #1
    a4f8:	493c      	ldr	r1, [pc, #240]	; (a5ec <IndirectPacket+0x12c>)
    a4fa:	5d0c      	ldrb	r4, [r1, r4]
    a4fc:	07e1      	lsls	r1, r4, #31
    a4fe:	d506      	bpl.n	a50e <IndirectPacket+0x4e>
				indirectMessages[i].TickStart.Val = MiWi_TickGet();
                return true;
            }
        }
        return false;
    }
    a500:	b003      	add	sp, #12
    a502:	bc3c      	pop	{r2, r3, r4, r5}
    a504:	4690      	mov	r8, r2
    a506:	4699      	mov	r9, r3
    a508:	46a2      	mov	sl, r4
    a50a:	46ab      	mov	fp, r5
    a50c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( indirectMessages[i].flags.bits.isValid == 0 )
    a50e:	2401      	movs	r4, #1
                indirectMessages[i].flags.bits.isValid          = true;
    a510:	208a      	movs	r0, #138	; 0x8a
    a512:	0040      	lsls	r0, r0, #1
    a514:	4360      	muls	r0, r4
    a516:	4935      	ldr	r1, [pc, #212]	; (a5ec <IndirectPacket+0x12c>)
    a518:	468c      	mov	ip, r1
    a51a:	4484      	add	ip, r0
    a51c:	2108      	movs	r1, #8
    a51e:	4461      	add	r1, ip
    a520:	4689      	mov	r9, r1
    a522:	7989      	ldrb	r1, [r1, #6]
    a524:	2001      	movs	r0, #1
    a526:	4301      	orrs	r1, r0
    a528:	468a      	mov	sl, r1
                indirectMessages[i].flags.bits.isCommand        = isCommand;
    a52a:	2001      	movs	r0, #1
    a52c:	4003      	ands	r3, r0
    a52e:	0099      	lsls	r1, r3, #2
    a530:	9101      	str	r1, [sp, #4]
    a532:	21fd      	movs	r1, #253	; 0xfd
    a534:	468b      	mov	fp, r1
    a536:	4651      	mov	r1, sl
    a538:	465b      	mov	r3, fp
    a53a:	4019      	ands	r1, r3
    a53c:	3bf9      	subs	r3, #249	; 0xf9
    a53e:	4399      	bics	r1, r3
                indirectMessages[i].flags.bits.isSecured        = SecurityEnabled;
    a540:	4007      	ands	r7, r0
    a542:	00ff      	lsls	r7, r7, #3
    a544:	000b      	movs	r3, r1
    a546:	9901      	ldr	r1, [sp, #4]
    a548:	4319      	orrs	r1, r3
    a54a:	000b      	movs	r3, r1
    a54c:	2108      	movs	r1, #8
    a54e:	438b      	bics	r3, r1
				indirectMessages[i].flags.bits.ackReq           = ackReq;
    a550:	4641      	mov	r1, r8
    a552:	4008      	ands	r0, r1
    a554:	0101      	lsls	r1, r0, #4
    a556:	433b      	orrs	r3, r7
    a558:	0018      	movs	r0, r3
    a55a:	2310      	movs	r3, #16
    a55c:	4398      	bics	r0, r3
    a55e:	4308      	orrs	r0, r1
    a560:	464b      	mov	r3, r9
    a562:	7198      	strb	r0, [r3, #6]
                    indirectMessages[i].DestPANID.Val           = DestinationPANID.Val;
    a564:	4663      	mov	r3, ip
    a566:	4669      	mov	r1, sp
    a568:	8849      	ldrh	r1, [r1, #2]
    a56a:	8099      	strh	r1, [r3, #4]
                if( DestinationAddress != NULL )
    a56c:	2a00      	cmp	r2, #0
    a56e:	d00d      	beq.n	a58c <IndirectPacket+0xcc>
    a570:	0013      	movs	r3, r2
    a572:	218a      	movs	r1, #138	; 0x8a
    a574:	0049      	lsls	r1, r1, #1
    a576:	4361      	muls	r1, r4
    a578:	3106      	adds	r1, #6
    a57a:	481c      	ldr	r0, [pc, #112]	; (a5ec <IndirectPacket+0x12c>)
    a57c:	1809      	adds	r1, r1, r0
    a57e:	3208      	adds	r2, #8
                        indirectMessages[i].DestAddress.DestLongAddress[j] = DestinationAddress[j];
    a580:	7818      	ldrb	r0, [r3, #0]
    a582:	7008      	strb	r0, [r1, #0]
    a584:	3301      	adds	r3, #1
    a586:	3101      	adds	r1, #1
                    for(j = 0; j < MY_ADDRESS_LENGTH; j++)
    a588:	4293      	cmp	r3, r2
    a58a:	d1f9      	bne.n	a580 <IndirectPacket+0xc0>
                indirectMessages[i].PayLoadSize = msgLen;
    a58c:	228a      	movs	r2, #138	; 0x8a
    a58e:	0052      	lsls	r2, r2, #1
    a590:	4362      	muls	r2, r4
    a592:	4b16      	ldr	r3, [pc, #88]	; (a5ec <IndirectPacket+0x12c>)
    a594:	189b      	adds	r3, r3, r2
    a596:	73de      	strb	r6, [r3, #15]
                for(j = 0; j < msgLen; j++)
    a598:	2e00      	cmp	r6, #0
    a59a:	d011      	beq.n	a5c0 <IndirectPacket+0x100>
    a59c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a59e:	228a      	movs	r2, #138	; 0x8a
    a5a0:	0052      	lsls	r2, r2, #1
    a5a2:	4362      	muls	r2, r4
    a5a4:	3210      	adds	r2, #16
    a5a6:	4911      	ldr	r1, [pc, #68]	; (a5ec <IndirectPacket+0x12c>)
    a5a8:	1852      	adds	r2, r2, r1
    a5aa:	3e01      	subs	r6, #1
    a5ac:	b2f0      	uxtb	r0, r6
    a5ae:	3001      	adds	r0, #1
    a5b0:	469c      	mov	ip, r3
    a5b2:	4460      	add	r0, ip
                    indirectMessages[i].PayLoad[j] = msgPtr[j];
    a5b4:	7819      	ldrb	r1, [r3, #0]
    a5b6:	7011      	strb	r1, [r2, #0]
    a5b8:	3301      	adds	r3, #1
    a5ba:	3201      	adds	r2, #1
                for(j = 0; j < msgLen; j++)
    a5bc:	4283      	cmp	r3, r0
    a5be:	d1f9      	bne.n	a5b4 <IndirectPacket+0xf4>
                indirectMessages[i].indirectDataHandle = msghandle;
    a5c0:	4e0a      	ldr	r6, [pc, #40]	; (a5ec <IndirectPacket+0x12c>)
    a5c2:	238a      	movs	r3, #138	; 0x8a
    a5c4:	005b      	lsls	r3, r3, #1
    a5c6:	435c      	muls	r4, r3
    a5c8:	1933      	adds	r3, r6, r4
    a5ca:	001a      	movs	r2, r3
    a5cc:	3210      	adds	r2, #16
    a5ce:	32ff      	adds	r2, #255	; 0xff
    a5d0:	7015      	strb	r5, [r2, #0]
				indirectMessages[i].indirectConfCallback = ConfCallback;
    a5d2:	3311      	adds	r3, #17
    a5d4:	33ff      	adds	r3, #255	; 0xff
    a5d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    a5d8:	601a      	str	r2, [r3, #0]
				indirectMessages[i].TickStart.Val = MiWi_TickGet();
    a5da:	4b05      	ldr	r3, [pc, #20]	; (a5f0 <IndirectPacket+0x130>)
    a5dc:	4798      	blx	r3
    a5de:	51a0      	str	r0, [r4, r6]
                return true;
    a5e0:	2001      	movs	r0, #1
    a5e2:	e78d      	b.n	a500 <IndirectPacket+0x40>
            if( indirectMessages[i].flags.bits.isValid == 0 )
    a5e4:	2400      	movs	r4, #0
    a5e6:	e793      	b.n	a510 <IndirectPacket+0x50>
                return false;
    a5e8:	2000      	movs	r0, #0
    a5ea:	e789      	b.n	a500 <IndirectPacket+0x40>
    a5ec:	20002884 	.word	0x20002884
    a5f0:	0000bae5 	.word	0x0000bae5

0000a5f4 <SendPacket>:
                    INPUT uint8_t* msgPtr,
                    INPUT uint8_t msghandle,
					INPUT bool ackReq,
                    INPUT DataConf_callback_t ConfCallback)
#endif                                        
{ 
    a5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a5f6:	46ce      	mov	lr, r9
    a5f8:	4647      	mov	r7, r8
    a5fa:	b580      	push	{r7, lr}
    a5fc:	b08b      	sub	sp, #44	; 0x2c
    a5fe:	0005      	movs	r5, r0
    a600:	468c      	mov	ip, r1
    a602:	9205      	str	r2, [sp, #20]
    a604:	a812      	add	r0, sp, #72	; 0x48
    a606:	7800      	ldrb	r0, [r0, #0]
    a608:	ac13      	add	r4, sp, #76	; 0x4c
    a60a:	7826      	ldrb	r6, [r4, #0]
    a60c:	ac15      	add	r4, sp, #84	; 0x54
    a60e:	7827      	ldrb	r7, [r4, #0]
    a610:	ac16      	add	r4, sp, #88	; 0x58
    a612:	7822      	ldrb	r2, [r4, #0]
    MAC_TRANS_PARAM tParam;
    bool status;

    tParam.flags.Val = 0;
    a614:	2400      	movs	r4, #0
    a616:	46a0      	mov	r8, r4
    a618:	ac07      	add	r4, sp, #28
    a61a:	4641      	mov	r1, r8
    a61c:	7021      	strb	r1, [r4, #0]
    //tParam.flags.bits.packetType = (isCommand) ? PACKET_TYPE_COMMAND : PACKET_TYPE_DATA;
	if(isCommand)
    a61e:	2b00      	cmp	r3, #0
    a620:	d043      	beq.n	a6aa <SendPacket+0xb6>
		tParam.flags.bits.packetType = PACKET_TYPE_COMMAND;
    a622:	0023      	movs	r3, r4
    a624:	b2cc      	uxtb	r4, r1
    a626:	2103      	movs	r1, #3
    a628:	438c      	bics	r4, r1
    a62a:	2101      	movs	r1, #1
    a62c:	4688      	mov	r8, r1
    a62e:	4641      	mov	r1, r8
    a630:	430c      	orrs	r4, r1
    a632:	701c      	strb	r4, [r3, #0]
	else
		tParam.flags.bits.packetType = PACKET_TYPE_DATA;
   // tParam.flags.bits.ackReq = (Broadcast) ? 0 : ackReq;
   if(Broadcast)
    a634:	2d00      	cmp	r5, #0
    a636:	d13e      	bne.n	a6b6 <SendPacket+0xc2>
   {
	tParam.flags.bits.ackReq = 0;
   }
   else
   {
	   tParam.flags.bits.ackReq = ackReq;
    a638:	ac07      	add	r4, sp, #28
    a63a:	2301      	movs	r3, #1
    a63c:	4013      	ands	r3, r2
    a63e:	015a      	lsls	r2, r3, #5
    a640:	7823      	ldrb	r3, [r4, #0]
    a642:	2120      	movs	r1, #32
    a644:	438b      	bics	r3, r1
    a646:	4313      	orrs	r3, r2
    a648:	7023      	strb	r3, [r4, #0]
   }
    tParam.flags.bits.broadcast = Broadcast;
    a64a:	ac07      	add	r4, sp, #28
    a64c:	2201      	movs	r2, #1
    a64e:	0013      	movs	r3, r2
    a650:	402b      	ands	r3, r5
    a652:	009b      	lsls	r3, r3, #2
    a654:	4698      	mov	r8, r3
    a656:	7823      	ldrb	r3, [r4, #0]
    a658:	2104      	movs	r1, #4
    a65a:	438b      	bics	r3, r1
    tParam.flags.bits.secEn = SecurityEnabled;
    a65c:	4010      	ands	r0, r2
    a65e:	00c0      	lsls	r0, r0, #3
    a660:	4641      	mov	r1, r8
    a662:	430b      	orrs	r3, r1
    a664:	2108      	movs	r1, #8
    a666:	438b      	bics	r3, r1
    #if defined(IEEE_802_15_4)
        tParam.altSrcAddr = 0;
    a668:	2100      	movs	r1, #0
    a66a:	7261      	strb	r1, [r4, #9]
        tParam.altDestAddr = (Broadcast) ? true : false;
    a66c:	7225      	strb	r5, [r4, #8]
    #endif
    
    #if defined(INFER_DEST_ADDRESS)
        tParam.flags.bits.destPrsnt = 0;
    #else
        tParam.flags.bits.destPrsnt = (Broadcast) ? 0:1;
    a66e:	2101      	movs	r1, #1
    a670:	4688      	mov	r8, r1
    a672:	4641      	mov	r1, r8
    a674:	404d      	eors	r5, r1
    a676:	4015      	ands	r5, r2
    a678:	01ad      	lsls	r5, r5, #6
    a67a:	4318      	orrs	r0, r3
    a67c:	2340      	movs	r3, #64	; 0x40
    a67e:	4398      	bics	r0, r3
        else
        {
            tParam.flags.bits.sourcePrsnt = 0;
        }
    #else
        tParam.flags.bits.sourcePrsnt = 1;
    a680:	4328      	orrs	r0, r5
    a682:	3bc0      	subs	r3, #192	; 0xc0
    a684:	4318      	orrs	r0, r3
    a686:	7020      	strb	r0, [r4, #0]
    #endif
    
    tParam.DestAddress = DestinationAddress;

    #if defined(IEEE_802_15_4)
        tParam.DestPANID.Val = DestinationPANID.Val;
    a688:	4663      	mov	r3, ip
    a68a:	8163      	strh	r3, [r4, #10]
    #endif

    status = MiMAC_SendPacket(tParam, msgPtr, msgLen, msghandle, ConfCallback);
    a68c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a68e:	9302      	str	r3, [sp, #8]
    a690:	9701      	str	r7, [sp, #4]
    a692:	9600      	str	r6, [sp, #0]
    a694:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a696:	9807      	ldr	r0, [sp, #28]
    a698:	9905      	ldr	r1, [sp, #20]
    a69a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a69c:	4c09      	ldr	r4, [pc, #36]	; (a6c4 <SendPacket+0xd0>)
    a69e:	47a0      	blx	r4
    
    return status;
}
    a6a0:	b00b      	add	sp, #44	; 0x2c
    a6a2:	bc0c      	pop	{r2, r3}
    a6a4:	4690      	mov	r8, r2
    a6a6:	4699      	mov	r9, r3
    a6a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tParam.flags.bits.packetType = PACKET_TYPE_DATA;
    a6aa:	ab07      	add	r3, sp, #28
    a6ac:	781c      	ldrb	r4, [r3, #0]
    a6ae:	2103      	movs	r1, #3
    a6b0:	438c      	bics	r4, r1
    a6b2:	701c      	strb	r4, [r3, #0]
    a6b4:	e7be      	b.n	a634 <SendPacket+0x40>
	tParam.flags.bits.ackReq = 0;
    a6b6:	ac07      	add	r4, sp, #28
    a6b8:	7823      	ldrb	r3, [r4, #0]
    a6ba:	2220      	movs	r2, #32
    a6bc:	4393      	bics	r3, r2
    a6be:	7023      	strb	r3, [r4, #0]
    a6c0:	e7c3      	b.n	a64a <SendPacket+0x56>
    a6c2:	46c0      	nop			; (mov r8, r8)
    a6c4:	00009529 	.word	0x00009529

0000a6c8 <isSameAddress>:
 *
 * Side Effects:    
 *
 ********************************************************************/
bool    isSameAddress(INPUT uint8_t *Address1, INPUT uint8_t *Address2)
{
    a6c8:	b510      	push	{r4, lr}
    uint8_t i;
    
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    {
        if( Address1[i] != Address2[i] )
    a6ca:	7802      	ldrb	r2, [r0, #0]
    a6cc:	780b      	ldrb	r3, [r1, #0]
    a6ce:	429a      	cmp	r2, r3
    a6d0:	d109      	bne.n	a6e6 <isSameAddress+0x1e>
    a6d2:	2301      	movs	r3, #1
    a6d4:	5cc4      	ldrb	r4, [r0, r3]
    a6d6:	5cca      	ldrb	r2, [r1, r3]
    a6d8:	4294      	cmp	r4, r2
    a6da:	d106      	bne.n	a6ea <isSameAddress+0x22>
    a6dc:	3301      	adds	r3, #1
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    a6de:	2b08      	cmp	r3, #8
    a6e0:	d1f8      	bne.n	a6d4 <isSameAddress+0xc>
        {
            return false;
        }
    }
    return true;
    a6e2:	2001      	movs	r0, #1
}
    a6e4:	bd10      	pop	{r4, pc}
            return false;
    a6e6:	2000      	movs	r0, #0
    a6e8:	e7fc      	b.n	a6e4 <isSameAddress+0x1c>
    a6ea:	2000      	movs	r0, #0
    a6ec:	e7fa      	b.n	a6e4 <isSameAddress+0x1c>
    a6ee:	Address 0x0000a6ee is out of bounds.


0000a6f0 <MiApp_SendData>:
   {
    a6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a6f2:	46de      	mov	lr, fp
    a6f4:	4657      	mov	r7, sl
    a6f6:	464e      	mov	r6, r9
    a6f8:	b5c0      	push	{r6, r7, lr}
    a6fa:	b088      	sub	sp, #32
    a6fc:	9107      	str	r1, [sp, #28]
    a6fe:	0017      	movs	r7, r2
    a700:	4699      	mov	r9, r3
    a702:	ab10      	add	r3, sp, #64	; 0x40
    a704:	781b      	ldrb	r3, [r3, #0]
    a706:	469a      	mov	sl, r3
    a708:	ab11      	add	r3, sp, #68	; 0x44
    a70a:	781b      	ldrb	r3, [r3, #0]
    a70c:	469b      	mov	fp, r3
		if(addr_len == 2 && (DestinationAddress16 == 0xFFFF))
    a70e:	2802      	cmp	r0, #2
    a710:	d003      	beq.n	a71a <MiApp_SendData+0x2a>
    a712:	4d3e      	ldr	r5, [pc, #248]	; (a80c <MiApp_SendData+0x11c>)
    a714:	2400      	movs	r4, #0
            if( ConnectionTable[i].status.bits.isValid && (ConnectionTable[i].status.bits.RXOnWhenIdle == 0) &&
    a716:	002e      	movs	r6, r5
    a718:	e036      	b.n	a788 <MiApp_SendData+0x98>
		uint16_t DestinationAddress16 = ((addr[1] << 8) + addr[0]);	
    a71a:	784a      	ldrb	r2, [r1, #1]
    a71c:	0212      	lsls	r2, r2, #8
    a71e:	780b      	ldrb	r3, [r1, #0]
    a720:	189b      	adds	r3, r3, r2
		if(addr_len == 2 && (DestinationAddress16 == 0xFFFF))
    a722:	b29b      	uxth	r3, r3
    a724:	4a3a      	ldr	r2, [pc, #232]	; (a810 <MiApp_SendData+0x120>)
    a726:	4293      	cmp	r3, r2
    a728:	d1f3      	bne.n	a712 <MiApp_SendData+0x22>
    a72a:	2100      	movs	r1, #0
				    if( ConnectionTable[i].status.bits.isValid && ConnectionTable[i].status.bits.RXOnWhenIdle == 0 )
    a72c:	4837      	ldr	r0, [pc, #220]	; (a80c <MiApp_SendData+0x11c>)
    a72e:	0002      	movs	r2, r0
    a730:	e002      	b.n	a738 <MiApp_SendData+0x48>
    a732:	3101      	adds	r1, #1
			    for(i = 0; i < CONNECTION_SIZE; i++)
    a734:	2905      	cmp	r1, #5
    a736:	d021      	beq.n	a77c <MiApp_SendData+0x8c>
				    if( ConnectionTable[i].status.bits.isValid && ConnectionTable[i].status.bits.RXOnWhenIdle == 0 )
    a738:	008b      	lsls	r3, r1, #2
    a73a:	185b      	adds	r3, r3, r1
    a73c:	005b      	lsls	r3, r3, #1
    a73e:	18c3      	adds	r3, r0, r3
    a740:	7a1b      	ldrb	r3, [r3, #8]
    a742:	09db      	lsrs	r3, r3, #7
    a744:	d0f5      	beq.n	a732 <MiApp_SendData+0x42>
    a746:	008b      	lsls	r3, r1, #2
    a748:	185b      	adds	r3, r3, r1
    a74a:	005b      	lsls	r3, r3, #1
    a74c:	18d3      	adds	r3, r2, r3
    a74e:	7a1b      	ldrb	r3, [r3, #8]
    a750:	07db      	lsls	r3, r3, #31
    a752:	d4ee      	bmi.n	a732 <MiApp_SendData+0x42>
					    IndirectPacket(true, myPANID, NULL, false, true, msglen, msgpointer, msghandle, ackReq, ConfCallback);
    a754:	4b2f      	ldr	r3, [pc, #188]	; (a814 <MiApp_SendData+0x124>)
    a756:	8819      	ldrh	r1, [r3, #0]
    a758:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a75a:	9305      	str	r3, [sp, #20]
    a75c:	465b      	mov	r3, fp
    a75e:	9304      	str	r3, [sp, #16]
    a760:	4653      	mov	r3, sl
    a762:	9303      	str	r3, [sp, #12]
    a764:	464b      	mov	r3, r9
    a766:	9302      	str	r3, [sp, #8]
    a768:	9701      	str	r7, [sp, #4]
    a76a:	2301      	movs	r3, #1
    a76c:	9300      	str	r3, [sp, #0]
    a76e:	2300      	movs	r3, #0
    a770:	2200      	movs	r2, #0
    a772:	2001      	movs	r0, #1
    a774:	4c28      	ldr	r4, [pc, #160]	; (a818 <MiApp_SendData+0x128>)
    a776:	47a0      	blx	r4
			broadcast = true;
    a778:	2001      	movs	r0, #1
					    break;
    a77a:	e02f      	b.n	a7dc <MiApp_SendData+0xec>
			broadcast = true;
    a77c:	2001      	movs	r0, #1
    a77e:	e02d      	b.n	a7dc <MiApp_SendData+0xec>
    a780:	3401      	adds	r4, #1
    a782:	350a      	adds	r5, #10
        for(i = 0; i < CONNECTION_SIZE; i++)
    a784:	2c05      	cmp	r4, #5
    a786:	d028      	beq.n	a7da <MiApp_SendData+0xea>
            if( ConnectionTable[i].status.bits.isValid && (ConnectionTable[i].status.bits.RXOnWhenIdle == 0) &&
    a788:	00a3      	lsls	r3, r4, #2
    a78a:	191b      	adds	r3, r3, r4
    a78c:	005b      	lsls	r3, r3, #1
    a78e:	18f3      	adds	r3, r6, r3
    a790:	7a1b      	ldrb	r3, [r3, #8]
    a792:	09db      	lsrs	r3, r3, #7
    a794:	d0f4      	beq.n	a780 <MiApp_SendData+0x90>
    a796:	00a3      	lsls	r3, r4, #2
    a798:	191b      	adds	r3, r3, r4
    a79a:	005b      	lsls	r3, r3, #1
    a79c:	4a1b      	ldr	r2, [pc, #108]	; (a80c <MiApp_SendData+0x11c>)
    a79e:	4694      	mov	ip, r2
    a7a0:	4463      	add	r3, ip
    a7a2:	7a1b      	ldrb	r3, [r3, #8]
    a7a4:	07db      	lsls	r3, r3, #31
    a7a6:	d4eb      	bmi.n	a780 <MiApp_SendData+0x90>
                isSameAddress(addr, ConnectionTable[i].Address) )
    a7a8:	0029      	movs	r1, r5
    a7aa:	9807      	ldr	r0, [sp, #28]
    a7ac:	4b1b      	ldr	r3, [pc, #108]	; (a81c <MiApp_SendData+0x12c>)
    a7ae:	4798      	blx	r3
            if( ConnectionTable[i].status.bits.isValid && (ConnectionTable[i].status.bits.RXOnWhenIdle == 0) &&
    a7b0:	2800      	cmp	r0, #0
    a7b2:	d0e5      	beq.n	a780 <MiApp_SendData+0x90>
                    return IndirectPacket(broadcast, myPANID, addr, false, true, msglen,
    a7b4:	4b17      	ldr	r3, [pc, #92]	; (a814 <MiApp_SendData+0x124>)
    a7b6:	8819      	ldrh	r1, [r3, #0]
    a7b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a7ba:	9305      	str	r3, [sp, #20]
    a7bc:	465b      	mov	r3, fp
    a7be:	9304      	str	r3, [sp, #16]
    a7c0:	4653      	mov	r3, sl
    a7c2:	9303      	str	r3, [sp, #12]
    a7c4:	464b      	mov	r3, r9
    a7c6:	9302      	str	r3, [sp, #8]
    a7c8:	9701      	str	r7, [sp, #4]
    a7ca:	2301      	movs	r3, #1
    a7cc:	9300      	str	r3, [sp, #0]
    a7ce:	2300      	movs	r3, #0
    a7d0:	9a07      	ldr	r2, [sp, #28]
    a7d2:	2000      	movs	r0, #0
    a7d4:	4c10      	ldr	r4, [pc, #64]	; (a818 <MiApp_SendData+0x128>)
    a7d6:	47a0      	blx	r4
    a7d8:	e011      	b.n	a7fe <MiApp_SendData+0x10e>
	    bool broadcast = false;
    a7da:	2000      	movs	r0, #0
        return SendPacket(broadcast, myPANID, addr, false, true, msglen,
    a7dc:	4b0d      	ldr	r3, [pc, #52]	; (a814 <MiApp_SendData+0x124>)
    a7de:	8819      	ldrh	r1, [r3, #0]
    a7e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a7e2:	9305      	str	r3, [sp, #20]
    a7e4:	465b      	mov	r3, fp
    a7e6:	9304      	str	r3, [sp, #16]
    a7e8:	4653      	mov	r3, sl
    a7ea:	9303      	str	r3, [sp, #12]
    a7ec:	464b      	mov	r3, r9
    a7ee:	9302      	str	r3, [sp, #8]
    a7f0:	9701      	str	r7, [sp, #4]
    a7f2:	2301      	movs	r3, #1
    a7f4:	9300      	str	r3, [sp, #0]
    a7f6:	2300      	movs	r3, #0
    a7f8:	9a07      	ldr	r2, [sp, #28]
    a7fa:	4c09      	ldr	r4, [pc, #36]	; (a820 <MiApp_SendData+0x130>)
    a7fc:	47a0      	blx	r4
}
    a7fe:	b008      	add	sp, #32
    a800:	bc1c      	pop	{r2, r3, r4}
    a802:	4691      	mov	r9, r2
    a804:	469a      	mov	sl, r3
    a806:	46a3      	mov	fp, r4
    a808:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a80a:	46c0      	nop			; (mov r8, r8)
    a80c:	2000280c 	.word	0x2000280c
    a810:	0000ffff 	.word	0x0000ffff
    a814:	2000285c 	.word	0x2000285c
    a818:	0000a4c1 	.word	0x0000a4c1
    a81c:	0000a6c9 	.word	0x0000a6c9
    a820:	0000a5f5 	.word	0x0000a5f5

0000a824 <MiApp_Set>:


#endif

bool MiApp_Set(miwi_params_t id, uint8_t *value)
{
    a824:	b510      	push	{r4, lr}
    a826:	000c      	movs	r4, r1
    switch(id)
    a828:	2800      	cmp	r0, #0
    a82a:	d001      	beq.n	a830 <MiApp_Set+0xc>
     break;

     default:
     break;
   }
    return false;
    a82c:	2000      	movs	r0, #0
}
    a82e:	bd10      	pop	{r4, pc}
        if( MiMAC_Set(MAC_CHANNEL, value))
    a830:	4b03      	ldr	r3, [pc, #12]	; (a840 <MiApp_Set+0x1c>)
    a832:	4798      	blx	r3
    a834:	2800      	cmp	r0, #0
    a836:	d0fa      	beq.n	a82e <MiApp_Set+0xa>
          currentChannel = *value;
    a838:	7822      	ldrb	r2, [r4, #0]
    a83a:	4b02      	ldr	r3, [pc, #8]	; (a844 <MiApp_Set+0x20>)
    a83c:	701a      	strb	r2, [r3, #0]
          return true;
    a83e:	e7f6      	b.n	a82e <MiApp_Set+0xa>
    a840:	0000948d 	.word	0x0000948d
    a844:	2000001d 	.word	0x2000001d

0000a848 <MiApp_ProtocolInit>:
{
    a848:	b500      	push	{lr}
    a84a:	b085      	sub	sp, #20
    P2PStatus.Val = 0;
    a84c:	2300      	movs	r3, #0
    a84e:	4a1d      	ldr	r2, [pc, #116]	; (a8c4 <MiApp_ProtocolInit+0x7c>)
    a850:	7013      	strb	r3, [r2, #0]
            indirectMessages[i].flags.Val = 0;
    a852:	4a1d      	ldr	r2, [pc, #116]	; (a8c8 <MiApp_ProtocolInit+0x80>)
    a854:	7393      	strb	r3, [r2, #14]
    a856:	2191      	movs	r1, #145	; 0x91
    a858:	0049      	lsls	r1, r1, #1
    a85a:	5453      	strb	r3, [r2, r1]
            IncomingFrameCounter[i].Val = 0;
    a85c:	4a1b      	ldr	r2, [pc, #108]	; (a8cc <MiApp_ProtocolInit+0x84>)
    a85e:	6013      	str	r3, [r2, #0]
    a860:	6053      	str	r3, [r2, #4]
    a862:	6093      	str	r3, [r2, #8]
    a864:	60d3      	str	r3, [r2, #12]
    a866:	6113      	str	r3, [r2, #16]
            myPANID.Val = MY_PAN_ID; 
    a868:	4a19      	ldr	r2, [pc, #100]	; (a8d0 <MiApp_ProtocolInit+0x88>)
    a86a:	4b1a      	ldr	r3, [pc, #104]	; (a8d4 <MiApp_ProtocolInit+0x8c>)
    a86c:	801a      	strh	r2, [r3, #0]
    initValue.PAddress = myLongAddress;
    a86e:	a902      	add	r1, sp, #8
    initValue.actionFlags.bits.CCAEnable = 1;
    a870:	780b      	ldrb	r3, [r1, #0]
    a872:	2202      	movs	r2, #2
    a874:	4313      	orrs	r3, r2
    initValue.actionFlags.bits.PAddrLength = MY_ADDRESS_LENGTH;
    a876:	2287      	movs	r2, #135	; 0x87
    a878:	4013      	ands	r3, r2
    a87a:	2240      	movs	r2, #64	; 0x40
    a87c:	4313      	orrs	r3, r2
    initValue.actionFlags.bits.RepeaterMode = 0;
    a87e:	22c3      	movs	r2, #195	; 0xc3
    a880:	4013      	ands	r3, r2
    a882:	3ac2      	subs	r2, #194	; 0xc2
    a884:	4393      	bics	r3, r2
    a886:	700b      	strb	r3, [r1, #0]
    MiMAC_Init(initValue);
    a888:	9802      	ldr	r0, [sp, #8]
    a88a:	4913      	ldr	r1, [pc, #76]	; (a8d8 <MiApp_ProtocolInit+0x90>)
    a88c:	4b13      	ldr	r3, [pc, #76]	; (a8dc <MiApp_ProtocolInit+0x94>)
    a88e:	4798      	blx	r3
    if (currentChannel != 0xFF)
    a890:	4b13      	ldr	r3, [pc, #76]	; (a8e0 <MiApp_ProtocolInit+0x98>)
    a892:	781b      	ldrb	r3, [r3, #0]
    a894:	2bff      	cmp	r3, #255	; 0xff
    a896:	d003      	beq.n	a8a0 <MiApp_ProtocolInit+0x58>
	    MiApp_Set(CHANNEL, &currentChannel);
    a898:	4911      	ldr	r1, [pc, #68]	; (a8e0 <MiApp_ProtocolInit+0x98>)
    a89a:	2000      	movs	r0, #0
    a89c:	4b11      	ldr	r3, [pc, #68]	; (a8e4 <MiApp_ProtocolInit+0x9c>)
    a89e:	4798      	blx	r3
            uint16_t tmp = 0xFFFF;
    a8a0:	466b      	mov	r3, sp
    a8a2:	1d98      	adds	r0, r3, #6
    a8a4:	2301      	movs	r3, #1
    a8a6:	425b      	negs	r3, r3
    a8a8:	8003      	strh	r3, [r0, #0]
            MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    a8aa:	490a      	ldr	r1, [pc, #40]	; (a8d4 <MiApp_ProtocolInit+0x8c>)
    a8ac:	4b0e      	ldr	r3, [pc, #56]	; (a8e8 <MiApp_ProtocolInit+0xa0>)
    a8ae:	4798      	blx	r3
    P2PCapacityInfo |= (ConnMode << 4);
    a8b0:	4b0e      	ldr	r3, [pc, #56]	; (a8ec <MiApp_ProtocolInit+0xa4>)
    a8b2:	781b      	ldrb	r3, [r3, #0]
    a8b4:	011b      	lsls	r3, r3, #4
    a8b6:	2209      	movs	r2, #9
    a8b8:	4313      	orrs	r3, r2
    a8ba:	4a0d      	ldr	r2, [pc, #52]	; (a8f0 <MiApp_ProtocolInit+0xa8>)
    a8bc:	7013      	strb	r3, [r2, #0]
}
    a8be:	2000      	movs	r0, #0
    a8c0:	b005      	add	sp, #20
    a8c2:	bd00      	pop	{pc}
    a8c4:	20002880 	.word	0x20002880
    a8c8:	20002884 	.word	0x20002884
    a8cc:	20002868 	.word	0x20002868
    a8d0:	00001234 	.word	0x00001234
    a8d4:	2000285c 	.word	0x2000285c
    a8d8:	20000020 	.word	0x20000020
    a8dc:	000094b5 	.word	0x000094b5
    a8e0:	2000001d 	.word	0x2000001d
    a8e4:	0000a825 	.word	0x0000a825
    a8e8:	000090a5 	.word	0x000090a5
    a8ec:	2000001c 	.word	0x2000001c
    a8f0:	20002859 	.word	0x20002859

0000a8f4 <MiApp_StartConnection>:
    {
    a8f4:	b530      	push	{r4, r5, lr}
    a8f6:	b083      	sub	sp, #12
    a8f8:	0014      	movs	r4, r2
    a8fa:	001d      	movs	r5, r3
        switch(Mode)
    a8fc:	2801      	cmp	r0, #1
    a8fe:	d032      	beq.n	a966 <MiApp_StartConnection+0x72>
    a900:	2800      	cmp	r0, #0
    a902:	d005      	beq.n	a910 <MiApp_StartConnection+0x1c>
    a904:	2802      	cmp	r0, #2
    a906:	d032      	beq.n	a96e <MiApp_StartConnection+0x7a>
        ConfCallback(FAILURE);
    a908:	2001      	movs	r0, #1
    a90a:	4798      	blx	r3
        return false;
    a90c:	2000      	movs	r0, #0
    a90e:	e028      	b.n	a962 <MiApp_StartConnection+0x6e>
                uint8_t channel = 0;
    a910:	2200      	movs	r2, #0
    a912:	466b      	mov	r3, sp
    a914:	715a      	strb	r2, [r3, #5]
                        myPANID.Val = MY_PAN_ID;
    a916:	4918      	ldr	r1, [pc, #96]	; (a978 <MiApp_StartConnection+0x84>)
    a918:	4b18      	ldr	r3, [pc, #96]	; (a97c <MiApp_StartConnection+0x88>)
    a91a:	800b      	strh	r3, [r1, #0]
                        uint16_t tmp = 0xFFFF;
    a91c:	466b      	mov	r3, sp
    a91e:	1d98      	adds	r0, r3, #6
    a920:	2301      	movs	r3, #1
    a922:	425b      	negs	r3, r3
    a924:	8003      	strh	r3, [r0, #0]
                        MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    a926:	4b16      	ldr	r3, [pc, #88]	; (a980 <MiApp_StartConnection+0x8c>)
    a928:	4798      	blx	r3
				while (!(index & ChannelMap))
    a92a:	07e3      	lsls	r3, r4, #31
    a92c:	d40a      	bmi.n	a944 <MiApp_StartConnection+0x50>
    a92e:	466b      	mov	r3, sp
    a930:	3305      	adds	r3, #5
    a932:	781b      	ldrb	r3, [r3, #0]
    a934:	2201      	movs	r2, #1
				index = index << 1;
    a936:	0052      	lsls	r2, r2, #1
				++channel;
    a938:	3301      	adds	r3, #1
    a93a:	b2db      	uxtb	r3, r3
				while (!(index & ChannelMap))
    a93c:	4222      	tst	r2, r4
    a93e:	d0fa      	beq.n	a936 <MiApp_StartConnection+0x42>
    a940:	466a      	mov	r2, sp
    a942:	7153      	strb	r3, [r2, #5]
				MiApp_Set(CHANNEL, &channel);
    a944:	466b      	mov	r3, sp
    a946:	1d59      	adds	r1, r3, #5
    a948:	2000      	movs	r0, #0
    a94a:	4b0e      	ldr	r3, [pc, #56]	; (a984 <MiApp_StartConnection+0x90>)
    a94c:	4798      	blx	r3
                tick1.Val = MiWi_TickGet();
    a94e:	4c0e      	ldr	r4, [pc, #56]	; (a988 <MiApp_StartConnection+0x94>)
    a950:	47a0      	blx	r4
    a952:	4b0e      	ldr	r3, [pc, #56]	; (a98c <MiApp_StartConnection+0x98>)
    a954:	6018      	str	r0, [r3, #0]
                tick4.Val = MiWi_TickGet();
    a956:	47a0      	blx	r4
    a958:	4b0d      	ldr	r3, [pc, #52]	; (a990 <MiApp_StartConnection+0x9c>)
    a95a:	6018      	str	r0, [r3, #0]
				ConfCallback(SUCCESS);
    a95c:	2000      	movs	r0, #0
    a95e:	47a8      	blx	r5
                return true;
    a960:	2001      	movs	r0, #1
    }
    a962:	b003      	add	sp, #12
    a964:	bd30      	pop	{r4, r5, pc}
                    ConfCallback(FAILURE);
    a966:	2001      	movs	r0, #1
    a968:	4798      	blx	r3
                    return false;
    a96a:	2000      	movs	r0, #0
    a96c:	e7f9      	b.n	a962 <MiApp_StartConnection+0x6e>
                ConfCallback(FAILURE);
    a96e:	2001      	movs	r0, #1
    a970:	4798      	blx	r3
                return false;
    a972:	2000      	movs	r0, #0
    a974:	e7f5      	b.n	a962 <MiApp_StartConnection+0x6e>
    a976:	46c0      	nop			; (mov r8, r8)
    a978:	2000285c 	.word	0x2000285c
    a97c:	00001234 	.word	0x00001234
    a980:	000090a5 	.word	0x000090a5
    a984:	0000a825 	.word	0x0000a825
    a988:	0000bae5 	.word	0x0000bae5
    a98c:	20002aac 	.word	0x20002aac
    a990:	20002840 	.word	0x20002840

0000a994 <DumpConnection>:
     * Side Effects:    The content of the connection pointed by the index 
     *                  of the P2P Connection Entry will be printed out
     *
     ********************************************************************/
    void DumpConnection(INPUT uint8_t index)
    {
    a994:	b5f0      	push	{r4, r5, r6, r7, lr}
    a996:	46d6      	mov	lr, sl
    a998:	4647      	mov	r7, r8
    a99a:	b580      	push	{r7, lr}
    a99c:	b083      	sub	sp, #12
    a99e:	0005      	movs	r5, r0
#if defined (ENABLE_CONSOLE)		
        uint8_t i, j;
        
        if( index > CONNECTION_SIZE )
    a9a0:	2805      	cmp	r0, #5
    a9a2:	d811      	bhi.n	a9c8 <DumpConnection+0x34>
            #endif
            printf("  Channel: ");
            printf("%d",currentChannel);
        }
            
        if( index < CONNECTION_SIZE )
    a9a4:	2d04      	cmp	r5, #4
    a9a6:	d85e      	bhi.n	aa66 <DumpConnection+0xd2>
        {
            printf("\r\nConnection \tPeerLongAddress \tPeerInfo \tRxOnStatus1\r\n");  
    a9a8:	4851      	ldr	r0, [pc, #324]	; (aaf0 <DumpConnection+0x15c>)
    a9aa:	4b52      	ldr	r3, [pc, #328]	; (aaf4 <DumpConnection+0x160>)
    a9ac:	4798      	blx	r3
            if( ConnectionTable[index].status.bits.isValid )
    a9ae:	00ab      	lsls	r3, r5, #2
    a9b0:	195b      	adds	r3, r3, r5
    a9b2:	005b      	lsls	r3, r3, #1
    a9b4:	4a50      	ldr	r2, [pc, #320]	; (aaf8 <DumpConnection+0x164>)
    a9b6:	18d3      	adds	r3, r2, r3
    a9b8:	7a1b      	ldrb	r3, [r3, #8]
    a9ba:	09db      	lsrs	r3, r3, #7
    a9bc:	d123      	bne.n	aa06 <DumpConnection+0x72>
					
                }  
            }
        }
#endif // #if defined (ENABLE_CONSOLE)		
    }
    a9be:	b003      	add	sp, #12
    a9c0:	bc0c      	pop	{r2, r3}
    a9c2:	4690      	mov	r8, r2
    a9c4:	469a      	mov	sl, r3
    a9c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            printf("\r\n\r\nMy Address: 0x");
    a9c8:	484c      	ldr	r0, [pc, #304]	; (aafc <DumpConnection+0x168>)
    a9ca:	4b4d      	ldr	r3, [pc, #308]	; (ab00 <DumpConnection+0x16c>)
    a9cc:	4798      	blx	r3
    a9ce:	4c4d      	ldr	r4, [pc, #308]	; (ab04 <DumpConnection+0x170>)
    a9d0:	0026      	movs	r6, r4
    a9d2:	3e08      	subs	r6, #8
				printf("%02x",myLongAddress[MY_ADDRESS_LENGTH-1-i]);
    a9d4:	4f4a      	ldr	r7, [pc, #296]	; (ab00 <DumpConnection+0x16c>)
    a9d6:	79e1      	ldrb	r1, [r4, #7]
    a9d8:	484b      	ldr	r0, [pc, #300]	; (ab08 <DumpConnection+0x174>)
    a9da:	47b8      	blx	r7
    a9dc:	3c01      	subs	r4, #1
            for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    a9de:	42b4      	cmp	r4, r6
    a9e0:	d1f9      	bne.n	a9d6 <DumpConnection+0x42>
                printf("  PANID: 0x");
    a9e2:	484a      	ldr	r0, [pc, #296]	; (ab0c <DumpConnection+0x178>)
    a9e4:	4c46      	ldr	r4, [pc, #280]	; (ab00 <DumpConnection+0x16c>)
    a9e6:	47a0      	blx	r4
                printf("%x",myPANID.v[1]);
    a9e8:	4f49      	ldr	r7, [pc, #292]	; (ab10 <DumpConnection+0x17c>)
    a9ea:	7879      	ldrb	r1, [r7, #1]
    a9ec:	4e49      	ldr	r6, [pc, #292]	; (ab14 <DumpConnection+0x180>)
    a9ee:	0030      	movs	r0, r6
    a9f0:	47a0      	blx	r4
                printf("%x",myPANID.v[0]);
    a9f2:	7839      	ldrb	r1, [r7, #0]
    a9f4:	0030      	movs	r0, r6
    a9f6:	47a0      	blx	r4
            printf("  Channel: ");
    a9f8:	4847      	ldr	r0, [pc, #284]	; (ab18 <DumpConnection+0x184>)
    a9fa:	47a0      	blx	r4
            printf("%d",currentChannel);
    a9fc:	4b47      	ldr	r3, [pc, #284]	; (ab1c <DumpConnection+0x188>)
    a9fe:	7819      	ldrb	r1, [r3, #0]
    aa00:	4847      	ldr	r0, [pc, #284]	; (ab20 <DumpConnection+0x18c>)
    aa02:	47a0      	blx	r4
    aa04:	e7ce      	b.n	a9a4 <DumpConnection+0x10>
                printf("%02x",index);
    aa06:	0029      	movs	r1, r5
    aa08:	483f      	ldr	r0, [pc, #252]	; (ab08 <DumpConnection+0x174>)
    aa0a:	4c3d      	ldr	r4, [pc, #244]	; (ab00 <DumpConnection+0x16c>)
    aa0c:	47a0      	blx	r4
                printf("\t\t\t");
    aa0e:	4845      	ldr	r0, [pc, #276]	; (ab24 <DumpConnection+0x190>)
    aa10:	47a0      	blx	r4
    aa12:	00ae      	lsls	r6, r5, #2
    aa14:	1976      	adds	r6, r6, r5
    aa16:	0076      	lsls	r6, r6, #1
    aa18:	1df4      	adds	r4, r6, #7
    aa1a:	4b37      	ldr	r3, [pc, #220]	; (aaf8 <DumpConnection+0x164>)
    aa1c:	18e4      	adds	r4, r4, r3
    aa1e:	3e01      	subs	r6, #1
    aa20:	18f6      	adds	r6, r6, r3
                        printf("%02x", ConnectionTable[index].Address[MY_ADDRESS_LENGTH-1-i] );
    aa22:	4f37      	ldr	r7, [pc, #220]	; (ab00 <DumpConnection+0x16c>)
    aa24:	7821      	ldrb	r1, [r4, #0]
    aa26:	4838      	ldr	r0, [pc, #224]	; (ab08 <DumpConnection+0x174>)
    aa28:	47b8      	blx	r7
    aa2a:	3c01      	subs	r4, #1
                for(i = 0; i < 8; i++)
    aa2c:	42b4      	cmp	r4, r6
    aa2e:	d1f9      	bne.n	aa24 <DumpConnection+0x90>
                printf("/t");
    aa30:	483d      	ldr	r0, [pc, #244]	; (ab28 <DumpConnection+0x194>)
    aa32:	4f33      	ldr	r7, [pc, #204]	; (ab00 <DumpConnection+0x16c>)
    aa34:	47b8      	blx	r7
                        printf("%02x", ConnectionTable[index].PeerInfo[i] );
    aa36:	4e30      	ldr	r6, [pc, #192]	; (aaf8 <DumpConnection+0x164>)
    aa38:	00ac      	lsls	r4, r5, #2
    aa3a:	1963      	adds	r3, r4, r5
    aa3c:	005b      	lsls	r3, r3, #1
    aa3e:	18f3      	adds	r3, r6, r3
    aa40:	7a59      	ldrb	r1, [r3, #9]
    aa42:	4831      	ldr	r0, [pc, #196]	; (ab08 <DumpConnection+0x174>)
    aa44:	47b8      	blx	r7
				printf("\t");
    aa46:	2009      	movs	r0, #9
    aa48:	4b38      	ldr	r3, [pc, #224]	; (ab2c <DumpConnection+0x198>)
    aa4a:	4698      	mov	r8, r3
    aa4c:	4798      	blx	r3
				printf("\t");
    aa4e:	2009      	movs	r0, #9
    aa50:	47c0      	blx	r8
				printf("%d", ConnectionTable[index].status.Val );
    aa52:	1964      	adds	r4, r4, r5
    aa54:	0064      	lsls	r4, r4, #1
    aa56:	1934      	adds	r4, r6, r4
    aa58:	7a21      	ldrb	r1, [r4, #8]
    aa5a:	4831      	ldr	r0, [pc, #196]	; (ab20 <DumpConnection+0x18c>)
    aa5c:	47b8      	blx	r7
                printf("\r\n");
    aa5e:	4834      	ldr	r0, [pc, #208]	; (ab30 <DumpConnection+0x19c>)
    aa60:	4b24      	ldr	r3, [pc, #144]	; (aaf4 <DumpConnection+0x160>)
    aa62:	4798      	blx	r3
    aa64:	e7ab      	b.n	a9be <DumpConnection+0x2a>
            printf("\r\n\r\nConnection     PeerLongAddress     PeerInfo\tRxOnStatus\r\n");  
    aa66:	4833      	ldr	r0, [pc, #204]	; (ab34 <DumpConnection+0x1a0>)
    aa68:	4b22      	ldr	r3, [pc, #136]	; (aaf4 <DumpConnection+0x160>)
    aa6a:	4798      	blx	r3
    aa6c:	4b32      	ldr	r3, [pc, #200]	; (ab38 <DumpConnection+0x1a4>)
    aa6e:	4698      	mov	r8, r3
    aa70:	2500      	movs	r5, #0
                if( ConnectionTable[i].status.bits.isValid )
    aa72:	4b21      	ldr	r3, [pc, #132]	; (aaf8 <DumpConnection+0x164>)
    aa74:	469a      	mov	sl, r3
    aa76:	e020      	b.n	aaba <DumpConnection+0x126>
                    printf("    ");
    aa78:	4830      	ldr	r0, [pc, #192]	; (ab3c <DumpConnection+0x1a8>)
    aa7a:	4e21      	ldr	r6, [pc, #132]	; (ab00 <DumpConnection+0x16c>)
    aa7c:	47b0      	blx	r6
                            printf("%02x", ConnectionTable[i].PeerInfo[j] );
    aa7e:	4643      	mov	r3, r8
    aa80:	7899      	ldrb	r1, [r3, #2]
    aa82:	4821      	ldr	r0, [pc, #132]	; (ab08 <DumpConnection+0x174>)
    aa84:	47b0      	blx	r6
					printf("\t");
    aa86:	2009      	movs	r0, #9
    aa88:	4c28      	ldr	r4, [pc, #160]	; (ab2c <DumpConnection+0x198>)
    aa8a:	47a0      	blx	r4
					printf("\t");
    aa8c:	2009      	movs	r0, #9
    aa8e:	47a0      	blx	r4
					printf("%02x", ConnectionTable[i].status.bits.RXOnWhenIdle );					
    aa90:	9a01      	ldr	r2, [sp, #4]
    aa92:	0093      	lsls	r3, r2, #2
    aa94:	189f      	adds	r7, r3, r2
    aa96:	007f      	lsls	r7, r7, #1
    aa98:	4b17      	ldr	r3, [pc, #92]	; (aaf8 <DumpConnection+0x164>)
    aa9a:	19df      	adds	r7, r3, r7
    aa9c:	7a39      	ldrb	r1, [r7, #8]
    aa9e:	07c9      	lsls	r1, r1, #31
    aaa0:	0fc9      	lsrs	r1, r1, #31
    aaa2:	4819      	ldr	r0, [pc, #100]	; (ab08 <DumpConnection+0x174>)
    aaa4:	47b0      	blx	r6
                    printf("\r\n");
    aaa6:	4822      	ldr	r0, [pc, #136]	; (ab30 <DumpConnection+0x19c>)
    aaa8:	4b12      	ldr	r3, [pc, #72]	; (aaf4 <DumpConnection+0x160>)
    aaaa:	4798      	blx	r3
    aaac:	3501      	adds	r5, #1
    aaae:	230a      	movs	r3, #10
    aab0:	469c      	mov	ip, r3
    aab2:	44e0      	add	r8, ip
            for(i = 0; i < CONNECTION_SIZE; i++)
    aab4:	2d05      	cmp	r5, #5
    aab6:	d100      	bne.n	aaba <DumpConnection+0x126>
    aab8:	e781      	b.n	a9be <DumpConnection+0x2a>
                if( ConnectionTable[i].status.bits.isValid )
    aaba:	9501      	str	r5, [sp, #4]
    aabc:	00ab      	lsls	r3, r5, #2
    aabe:	195b      	adds	r3, r3, r5
    aac0:	005b      	lsls	r3, r3, #1
    aac2:	4453      	add	r3, sl
    aac4:	7a1b      	ldrb	r3, [r3, #8]
    aac6:	09db      	lsrs	r3, r3, #7
    aac8:	d0f0      	beq.n	aaac <DumpConnection+0x118>
                    printf("%02x",i);
    aaca:	0029      	movs	r1, r5
    aacc:	480e      	ldr	r0, [pc, #56]	; (ab08 <DumpConnection+0x174>)
    aace:	4b0c      	ldr	r3, [pc, #48]	; (ab00 <DumpConnection+0x16c>)
    aad0:	4798      	blx	r3
                    printf("             ");
    aad2:	481b      	ldr	r0, [pc, #108]	; (ab40 <DumpConnection+0x1ac>)
    aad4:	4b0a      	ldr	r3, [pc, #40]	; (ab00 <DumpConnection+0x16c>)
    aad6:	4798      	blx	r3
    aad8:	4647      	mov	r7, r8
    aada:	3f08      	subs	r7, #8
    aadc:	4644      	mov	r4, r8
                            printf("%02x", ConnectionTable[i].Address[MY_ADDRESS_LENGTH-1-j] );
    aade:	4e08      	ldr	r6, [pc, #32]	; (ab00 <DumpConnection+0x16c>)
    aae0:	7821      	ldrb	r1, [r4, #0]
    aae2:	4809      	ldr	r0, [pc, #36]	; (ab08 <DumpConnection+0x174>)
    aae4:	47b0      	blx	r6
    aae6:	3c01      	subs	r4, #1
                    for(j = 0; j < 8; j++)
    aae8:	42bc      	cmp	r4, r7
    aaea:	d1f9      	bne.n	aae0 <DumpConnection+0x14c>
    aaec:	e7c4      	b.n	aa78 <DumpConnection+0xe4>
    aaee:	46c0      	nop			; (mov r8, r8)
    aaf0:	00017298 	.word	0x00017298
    aaf4:	000154b5 	.word	0x000154b5
    aaf8:	2000280c 	.word	0x2000280c
    aafc:	0001726c 	.word	0x0001726c
    ab00:	00015399 	.word	0x00015399
    ab04:	20000020 	.word	0x20000020
    ab08:	00016c08 	.word	0x00016c08
    ab0c:	00017280 	.word	0x00017280
    ab10:	2000285c 	.word	0x2000285c
    ab14:	00016c18 	.word	0x00016c18
    ab18:	0001728c 	.word	0x0001728c
    ab1c:	2000001d 	.word	0x2000001d
    ab20:	00016970 	.word	0x00016970
    ab24:	000172d0 	.word	0x000172d0
    ab28:	000172d4 	.word	0x000172d4
    ab2c:	000153cd 	.word	0x000153cd
    ab30:	000172cc 	.word	0x000172cc
    ab34:	000172d8 	.word	0x000172d8
    ab38:	20002813 	.word	0x20002813
    ab3c:	00017324 	.word	0x00017324
    ab40:	00017314 	.word	0x00017314

0000ab44 <AddConnection>:
     *                  connection operation ends if an entry is added 
     *                  successfully
     *
     ********************************************************************/
    uint8_t AddConnection(void)
    {
    ab44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ab46:	46d6      	mov	lr, sl
    ab48:	464f      	mov	r7, r9
    ab4a:	b580      	push	{r7, lr}
        {
            // check if the entry is valid
            if( ConnectionTable[i].status.bits.isValid )
            {
                // check if the entry address matches source address of current received packet
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    ab4c:	4b39      	ldr	r3, [pc, #228]	; (ac34 <AddConnection+0xf0>)
    ab4e:	685e      	ldr	r6, [r3, #4]
    ab50:	4d39      	ldr	r5, [pc, #228]	; (ac38 <AddConnection+0xf4>)
    ab52:	2400      	movs	r4, #0
        uint8_t connectionSlot = 0xFF;
    ab54:	27ff      	movs	r7, #255	; 0xff
            if( ConnectionTable[i].status.bits.isValid )
    ab56:	46a9      	mov	r9, r5
    ab58:	e005      	b.n	ab66 <AddConnection+0x22>
                    connectionSlot = i;
                    status = STATUS_EXISTS;
                    break;
                }
            }
            else if( connectionSlot == 0xFF )
    ab5a:	2fff      	cmp	r7, #255	; 0xff
    ab5c:	d015      	beq.n	ab8a <AddConnection+0x46>
    ab5e:	3401      	adds	r4, #1
    ab60:	350a      	adds	r5, #10
        for(i = 0; i < CONNECTION_SIZE; i++)
    ab62:	2c05      	cmp	r4, #5
    ab64:	d013      	beq.n	ab8e <AddConnection+0x4a>
    ab66:	b2e3      	uxtb	r3, r4
    ab68:	469a      	mov	sl, r3
            if( ConnectionTable[i].status.bits.isValid )
    ab6a:	00a3      	lsls	r3, r4, #2
    ab6c:	191b      	adds	r3, r3, r4
    ab6e:	005b      	lsls	r3, r3, #1
    ab70:	444b      	add	r3, r9
    ab72:	7a1b      	ldrb	r3, [r3, #8]
    ab74:	09db      	lsrs	r3, r3, #7
    ab76:	d0f0      	beq.n	ab5a <AddConnection+0x16>
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    ab78:	0029      	movs	r1, r5
    ab7a:	0030      	movs	r0, r6
    ab7c:	4b2f      	ldr	r3, [pc, #188]	; (ac3c <AddConnection+0xf8>)
    ab7e:	4798      	blx	r3
    ab80:	2800      	cmp	r0, #0
    ab82:	d0ec      	beq.n	ab5e <AddConnection+0x1a>
    ab84:	4657      	mov	r7, sl
                    status = STATUS_EXISTS;
    ab86:	2401      	movs	r4, #1
    ab88:	e002      	b.n	ab90 <AddConnection+0x4c>
            else if( connectionSlot == 0xFF )
    ab8a:	4657      	mov	r7, sl
    ab8c:	e7e7      	b.n	ab5e <AddConnection+0x1a>
        uint8_t status = STATUS_SUCCESS;
    ab8e:	2400      	movs	r4, #0
                // store the first empty slot
                connectionSlot = i;
            }  
        }
            
        if( connectionSlot == 0xFF )
    ab90:	2fff      	cmp	r7, #255	; 0xff
    ab92:	d049      	beq.n	ac28 <AddConnection+0xe4>
        {
            return STATUS_NOT_ENOUGH_SPACE;
        }
        else 
        {
            if( ConnMode >= ENABLE_PREV_CONN )
    ab94:	4b2a      	ldr	r3, [pc, #168]	; (ac40 <AddConnection+0xfc>)
    ab96:	781b      	ldrb	r3, [r3, #0]
    ab98:	2b00      	cmp	r3, #0
    ab9a:	d146      	bne.n	ac2a <AddConnection+0xe6>
            {
                return status;
            }
            MyindexinPC = connectionSlot;    
    ab9c:	4b29      	ldr	r3, [pc, #164]	; (ac44 <AddConnection+0x100>)
    ab9e:	701f      	strb	r7, [r3, #0]
    aba0:	00b9      	lsls	r1, r7, #2
    aba2:	19c9      	adds	r1, r1, r7
    aba4:	0049      	lsls	r1, r1, #1
    aba6:	4b24      	ldr	r3, [pc, #144]	; (ac38 <AddConnection+0xf4>)
    aba8:	18c9      	adds	r1, r1, r3
    abaa:	2300      	movs	r3, #0
            // store the source address
            for(i = 0; i < 8; i++)
            {
                ConnectionTable[connectionSlot].Address[i] = rxMessage.SourceAddress[i];
    abac:	0038      	movs	r0, r7
    abae:	5cf2      	ldrb	r2, [r6, r3]
    abb0:	54ca      	strb	r2, [r1, r3]
    abb2:	3301      	adds	r3, #1
            for(i = 0; i < 8; i++)
    abb4:	2b08      	cmp	r3, #8
    abb6:	d1fa      	bne.n	abae <AddConnection+0x6a>
            }
			ConnectionTable[connectionSlot].status.bits.isValid = 1;
    abb8:	0083      	lsls	r3, r0, #2
    abba:	181b      	adds	r3, r3, r0
    abbc:	005b      	lsls	r3, r3, #1
    abbe:	4a1e      	ldr	r2, [pc, #120]	; (ac38 <AddConnection+0xf4>)
    abc0:	18d3      	adds	r3, r2, r3
    abc2:	7a19      	ldrb	r1, [r3, #8]
    abc4:	2280      	movs	r2, #128	; 0x80
    abc6:	4252      	negs	r2, r2
    abc8:	430a      	orrs	r2, r1
    abca:	721a      	strb	r2, [r3, #8]
			if(rxMessage.Payload[2] & 0x01)
    abcc:	4b19      	ldr	r3, [pc, #100]	; (ac34 <AddConnection+0xf0>)
    abce:	689b      	ldr	r3, [r3, #8]
    abd0:	789a      	ldrb	r2, [r3, #2]
    abd2:	07d2      	lsls	r2, r2, #31
    abd4:	d51e      	bpl.n	ac14 <AddConnection+0xd0>
				{
					ConnectionTable[connectionSlot].status.bits.RXOnWhenIdle = 1;
    abd6:	0082      	lsls	r2, r0, #2
    abd8:	1812      	adds	r2, r2, r0
    abda:	0052      	lsls	r2, r2, #1
    abdc:	4916      	ldr	r1, [pc, #88]	; (ac38 <AddConnection+0xf4>)
    abde:	188a      	adds	r2, r1, r2
    abe0:	7a11      	ldrb	r1, [r2, #8]
    abe2:	2501      	movs	r5, #1
    abe4:	4329      	orrs	r1, r5
    abe6:	7211      	strb	r1, [r2, #8]
            //ConnectionTable[connectionSlot].status.Val = temp;
            // store possible additional connection payload
            #if ADDITIONAL_NODE_ID_SIZE > 0
                for(i = 0; i < ADDITIONAL_NODE_ID_SIZE; i++)
                {
                    ConnectionTable[connectionSlot].PeerInfo[i] = rxMessage.Payload[3+i];
    abe8:	78d9      	ldrb	r1, [r3, #3]
    abea:	0082      	lsls	r2, r0, #2
    abec:	1810      	adds	r0, r2, r0
    abee:	0043      	lsls	r3, r0, #1
    abf0:	4811      	ldr	r0, [pc, #68]	; (ac38 <AddConnection+0xf4>)
    abf2:	18c0      	adds	r0, r0, r3
    abf4:	7241      	strb	r1, [r0, #9]
                }
            #endif
    
            #ifdef ENABLE_SECURITY
                // if security is enabled, clear the incoming frame control
                IncomingFrameCounter[connectionSlot].Val = 0;
    abf6:	2100      	movs	r1, #0
    abf8:	4b13      	ldr	r3, [pc, #76]	; (ac48 <AddConnection+0x104>)
    abfa:	50d1      	str	r1, [r2, r3]
            #endif
            LatestConnection = connectionSlot;
    abfc:	4b13      	ldr	r3, [pc, #76]	; (ac4c <AddConnection+0x108>)
    abfe:	701f      	strb	r7, [r3, #0]
            P2PStatus.bits.SearchConnection = 0;   
    ac00:	4a13      	ldr	r2, [pc, #76]	; (ac50 <AddConnection+0x10c>)
    ac02:	7813      	ldrb	r3, [r2, #0]
    ac04:	3110      	adds	r1, #16
    ac06:	438b      	bics	r3, r1
    ac08:	7013      	strb	r3, [r2, #0]
        }
        conn_size = Total_Connections();
    ac0a:	4b12      	ldr	r3, [pc, #72]	; (ac54 <AddConnection+0x110>)
    ac0c:	4798      	blx	r3
    ac0e:	4b12      	ldr	r3, [pc, #72]	; (ac58 <AddConnection+0x114>)
    ac10:	7018      	strb	r0, [r3, #0]
    #if defined (ENABLE_NETWORK_FREEZER)
		PDS_Store(PDS_EDC_ID);
    #endif

        return status;
    ac12:	e00a      	b.n	ac2a <AddConnection+0xe6>
					ConnectionTable[connectionSlot].status.bits.RXOnWhenIdle = 0;
    ac14:	0082      	lsls	r2, r0, #2
    ac16:	1812      	adds	r2, r2, r0
    ac18:	0052      	lsls	r2, r2, #1
    ac1a:	4907      	ldr	r1, [pc, #28]	; (ac38 <AddConnection+0xf4>)
    ac1c:	188a      	adds	r2, r1, r2
    ac1e:	7a11      	ldrb	r1, [r2, #8]
    ac20:	2501      	movs	r5, #1
    ac22:	43a9      	bics	r1, r5
    ac24:	7211      	strb	r1, [r2, #8]
    ac26:	e7df      	b.n	abe8 <AddConnection+0xa4>
            return STATUS_NOT_ENOUGH_SPACE;
    ac28:	24f1      	movs	r4, #241	; 0xf1
    }
    ac2a:	0020      	movs	r0, r4
    ac2c:	bc0c      	pop	{r2, r3}
    ac2e:	4691      	mov	r9, r2
    ac30:	469a      	mov	sl, r3
    ac32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ac34:	20002af0 	.word	0x20002af0
    ac38:	2000280c 	.word	0x2000280c
    ac3c:	0000a6c9 	.word	0x0000a6c9
    ac40:	2000001c 	.word	0x2000001c
    ac44:	2000287c 	.word	0x2000287c
    ac48:	20002868 	.word	0x20002868
    ac4c:	20002808 	.word	0x20002808
    ac50:	20002880 	.word	0x20002880
    ac54:	0000a499 	.word	0x0000a499
    ac58:	20002865 	.word	0x20002865

0000ac5c <MiApp_ConnectionMode>:
 *      None
 *
 *****************************************************************************************/ 
void MiApp_ConnectionMode(INPUT uint8_t Mode)
{
    if( Mode > 3 )
    ac5c:	2803      	cmp	r0, #3
    ac5e:	d808      	bhi.n	ac72 <MiApp_ConnectionMode+0x16>
    {
        return;
    }
    ConnMode = Mode;
    ac60:	4b04      	ldr	r3, [pc, #16]	; (ac74 <MiApp_ConnectionMode+0x18>)
    ac62:	7018      	strb	r0, [r3, #0]
    P2PCapacityInfo = (P2PCapacityInfo & 0x0F) | (ConnMode << 4);
    ac64:	4a04      	ldr	r2, [pc, #16]	; (ac78 <MiApp_ConnectionMode+0x1c>)
    ac66:	7811      	ldrb	r1, [r2, #0]
    ac68:	230f      	movs	r3, #15
    ac6a:	400b      	ands	r3, r1
    ac6c:	0100      	lsls	r0, r0, #4
    ac6e:	4318      	orrs	r0, r3
    ac70:	7010      	strb	r0, [r2, #0]
    
    #if defined(ENABLE_NETWORK_FREEZER)
		PDS_Store(PDS_CONNECTION_MODE_ID);
    #endif
}
    ac72:	4770      	bx	lr
    ac74:	2000001c 	.word	0x2000001c
    ac78:	20002859 	.word	0x20002859

0000ac7c <MiApp_SubscribeDataIndicationCallback>:
 *      None
 *
 *****************************************************************************************/      
bool  MiApp_SubscribeDataIndicationCallback(PacketIndCallback_t callback)
{
    if (NULL != callback)
    ac7c:	2800      	cmp	r0, #0
    ac7e:	d003      	beq.n	ac88 <MiApp_SubscribeDataIndicationCallback+0xc>
    {
        pktRxcallback = callback;
    ac80:	4b02      	ldr	r3, [pc, #8]	; (ac8c <MiApp_SubscribeDataIndicationCallback+0x10>)
    ac82:	6018      	str	r0, [r3, #0]
        return true;
    ac84:	2001      	movs	r0, #1
    }
    return false;
}
    ac86:	4770      	bx	lr
    return false;
    ac88:	2000      	movs	r0, #0
    ac8a:	e7fc      	b.n	ac86 <MiApp_SubscribeDataIndicationCallback+0xa>
    ac8c:	2000049c 	.word	0x2000049c

0000ac90 <calculate_ToA>:
	}
}
#endif

uint16_t calculate_ToA(uint8_t payload_length)
{
    ac90:	b5f0      	push	{r4, r5, r6, r7, lr}
    ac92:	46c6      	mov	lr, r8
    ac94:	b500      	push	{lr}
    ac96:	b086      	sub	sp, #24
	   Rev.7 - May 2020 */
	
	/* Tested only with EU868 channel plan SF = 7 to 12 , BW = 125 kHz */
	 
	    //LoRa Modem Settings
	    uint8_t spreadFactor = 0;
    ac98:	ab04      	add	r3, sp, #16
    ac9a:	1dde      	adds	r6, r3, #7
    ac9c:	2300      	movs	r3, #0
    ac9e:	7033      	strb	r3, [r6, #0]
	    uint8_t bandWidth = 125;
	    uint8_t codingRate = 0;
    aca0:	aa04      	add	r2, sp, #16
    aca2:	1d97      	adds	r7, r2, #6
    aca4:	7193      	strb	r3, [r2, #6]
	    bool ldro = false;   //LowDataRateOptimize
	    
	    //Packet Configuration
	    uint8_t payloadLength = 0;  
	    uint16_t programmedPreambleLength = 0;
    aca6:	ad05      	add	r5, sp, #20
    aca8:	802b      	strh	r3, [r5, #0]
	    bool implicitHeaderMode = 0; //Implicit or Explicit header
	    bool crcEnable = 0; //CRC
    acaa:	3303      	adds	r3, #3
    acac:	4694      	mov	ip, r2
    acae:	4463      	add	r3, ip
    acb0:	4698      	mov	r8, r3
    acb2:	2300      	movs	r3, #0
    acb4:	4642      	mov	r2, r8
    acb6:	7013      	strb	r3, [r2, #0]
		if(payload_length > 255)
		{
			payload_length = 255;
		}
	    
	    RADIO_GetAttr(SPREADING_FACTOR,(void *)&spreadFactor);
    acb8:	0031      	movs	r1, r6
    acba:	2016      	movs	r0, #22
    acbc:	4c37      	ldr	r4, [pc, #220]	; (ad9c <calculate_ToA+0x10c>)
    acbe:	47a0      	blx	r4
	    RADIO_GetAttr(PREAMBLE_LEN,(void *)&programmedPreambleLength);
    acc0:	0029      	movs	r1, r5
    acc2:	2003      	movs	r0, #3
    acc4:	47a0      	blx	r4
	    RADIO_GetAttr(CRC_ON,(void *)&crcEnable);
    acc6:	4641      	mov	r1, r8
    acc8:	2014      	movs	r0, #20
    acca:	47a0      	blx	r4
	    RADIO_GetAttr(ERROR_CODING_RATE,(void *)&codingRate);
    accc:	0039      	movs	r1, r7
    acce:	200b      	movs	r0, #11
    acd0:	47a0      	blx	r4


	    symbolRate = (bandWidth * 1000) /  ((float)(1 << spreadFactor));
    acd2:	7836      	ldrb	r6, [r6, #0]
    acd4:	2001      	movs	r0, #1
    acd6:	40b0      	lsls	r0, r6
    acd8:	4b31      	ldr	r3, [pc, #196]	; (ada0 <calculate_ToA+0x110>)
    acda:	4798      	blx	r3
    acdc:	1c01      	adds	r1, r0, #0
    acde:	4c31      	ldr	r4, [pc, #196]	; (ada4 <calculate_ToA+0x114>)
    ace0:	4831      	ldr	r0, [pc, #196]	; (ada8 <calculate_ToA+0x118>)
    ace2:	47a0      	blx	r4
    ace4:	1c01      	adds	r1, r0, #0
	    symbolTime = 1000 / (symbolRate);
    ace6:	4831      	ldr	r0, [pc, #196]	; (adac <calculate_ToA+0x11c>)
    ace8:	47a0      	blx	r4
    acea:	1c04      	adds	r4, r0, #0
	    preambleDuration = (programmedPreambleLength + 4.25) * symbolTime;
    acec:	8828      	ldrh	r0, [r5, #0]
    acee:	4b30      	ldr	r3, [pc, #192]	; (adb0 <calculate_ToA+0x120>)
    acf0:	4798      	blx	r3
    acf2:	2200      	movs	r2, #0
    acf4:	4b2f      	ldr	r3, [pc, #188]	; (adb4 <calculate_ToA+0x124>)
    acf6:	4d30      	ldr	r5, [pc, #192]	; (adb8 <calculate_ToA+0x128>)
    acf8:	47a8      	blx	r5
    acfa:	9000      	str	r0, [sp, #0]
    acfc:	9101      	str	r1, [sp, #4]
    acfe:	1c20      	adds	r0, r4, #0
    ad00:	4b2e      	ldr	r3, [pc, #184]	; (adbc <calculate_ToA+0x12c>)
    ad02:	4798      	blx	r3
    ad04:	0002      	movs	r2, r0
    ad06:	000b      	movs	r3, r1
    ad08:	9800      	ldr	r0, [sp, #0]
    ad0a:	9901      	ldr	r1, [sp, #4]
    ad0c:	4d2c      	ldr	r5, [pc, #176]	; (adc0 <calculate_ToA+0x130>)
    ad0e:	47a8      	blx	r5
    ad10:	4b2c      	ldr	r3, [pc, #176]	; (adc4 <calculate_ToA+0x134>)
    ad12:	4798      	blx	r3
    ad14:	9000      	str	r0, [sp, #0]

	    if ( ((spreadFactor == 12) && ((bandWidth == 125) || (bandWidth == 250))) || ((spreadFactor == 11) && (bandWidth == 125)))
    ad16:	2e0c      	cmp	r6, #12
    ad18:	d03b      	beq.n	ad92 <calculate_ToA+0x102>
    ad1a:	0033      	movs	r3, r6
    ad1c:	3b0b      	subs	r3, #11
    ad1e:	425a      	negs	r2, r3
    ad20:	4153      	adcs	r3, r2
    ad22:	b2db      	uxtb	r3, r3
	    {
		    ldro = false;
	    }
	    
	    ceilValueNumerator = (8 * payloadLength - 4 * spreadFactor + 28 + 16 * crcEnable - 20 * implicitHeaderMode);
	    ceilValueDenominator= (4 * (spreadFactor - 2 * ldro));
    ad24:	005b      	lsls	r3, r3, #1
    ad26:	1af3      	subs	r3, r6, r3
    ad28:	009b      	lsls	r3, r3, #2
	    ceilValue = (ceilValueNumerator + ceilValueDenominator - 1.0) / ceilValueDenominator;
    ad2a:	b2df      	uxtb	r7, r3
	    ceilValueNumerator = (8 * payloadLength - 4 * spreadFactor + 28 + 16 * crcEnable - 20 * implicitHeaderMode);
    ad2c:	ab04      	add	r3, sp, #16
    ad2e:	78d8      	ldrb	r0, [r3, #3]
    ad30:	0080      	lsls	r0, r0, #2
    ad32:	1b80      	subs	r0, r0, r6
    ad34:	3007      	adds	r0, #7
    ad36:	0080      	lsls	r0, r0, #2
	    ceilValue = (ceilValueNumerator + ceilValueDenominator - 1.0) / ceilValueDenominator;
    ad38:	b280      	uxth	r0, r0
    ad3a:	19c0      	adds	r0, r0, r7
    ad3c:	4d1c      	ldr	r5, [pc, #112]	; (adb0 <calculate_ToA+0x120>)
    ad3e:	47a8      	blx	r5
    ad40:	2200      	movs	r2, #0
    ad42:	4b21      	ldr	r3, [pc, #132]	; (adc8 <calculate_ToA+0x138>)
    ad44:	4e21      	ldr	r6, [pc, #132]	; (adcc <calculate_ToA+0x13c>)
    ad46:	47b0      	blx	r6
    ad48:	9002      	str	r0, [sp, #8]
    ad4a:	9103      	str	r1, [sp, #12]
    ad4c:	0038      	movs	r0, r7
    ad4e:	47a8      	blx	r5
    ad50:	0002      	movs	r2, r0
    ad52:	000b      	movs	r3, r1
    ad54:	9802      	ldr	r0, [sp, #8]
    ad56:	9903      	ldr	r1, [sp, #12]
    ad58:	4e1d      	ldr	r6, [pc, #116]	; (add0 <calculate_ToA+0x140>)
    ad5a:	47b0      	blx	r6
    ad5c:	4b1d      	ldr	r3, [pc, #116]	; (add4 <calculate_ToA+0x144>)
    ad5e:	4798      	blx	r3
	    
	    if ((ceilValue * (codingRate + 4)) > 0)
    ad60:	b282      	uxth	r2, r0
    ad62:	ab04      	add	r3, sp, #16
    ad64:	7998      	ldrb	r0, [r3, #6]
    ad66:	3004      	adds	r0, #4
    ad68:	4350      	muls	r0, r2
    ad6a:	2800      	cmp	r0, #0
    ad6c:	dd13      	ble.n	ad96 <calculate_ToA+0x106>
	    {
		    maxCeilValue = ceilValue * (codingRate + 4);
    ad6e:	4b0c      	ldr	r3, [pc, #48]	; (ada0 <calculate_ToA+0x110>)
    ad70:	4798      	blx	r3
	    else
	    {
		    maxCeilValue = 0;
	    }

	    numberOfPayloadSymbols = 8 + maxCeilValue;
    ad72:	4e19      	ldr	r6, [pc, #100]	; (add8 <calculate_ToA+0x148>)
    ad74:	2182      	movs	r1, #130	; 0x82
    ad76:	05c9      	lsls	r1, r1, #23
    ad78:	47b0      	blx	r6
	    payloadDuration = numberOfPayloadSymbols * symbolTime;
    ad7a:	1c21      	adds	r1, r4, #0
    ad7c:	4b17      	ldr	r3, [pc, #92]	; (addc <calculate_ToA+0x14c>)
    ad7e:	4798      	blx	r3
		
	    totalTimeOnAir = preambleDuration + payloadDuration;
    ad80:	9900      	ldr	r1, [sp, #0]
    ad82:	47b0      	blx	r6
		
		return ((uint16_t)totalTimeOnAir) ;
    ad84:	4b16      	ldr	r3, [pc, #88]	; (ade0 <calculate_ToA+0x150>)
    ad86:	4798      	blx	r3
    ad88:	b280      	uxth	r0, r0
    ad8a:	b006      	add	sp, #24
    ad8c:	bc04      	pop	{r2}
    ad8e:	4690      	mov	r8, r2
    ad90:	bdf0      	pop	{r4, r5, r6, r7, pc}
		    ldro =  true;
    ad92:	2301      	movs	r3, #1
    ad94:	e7c6      	b.n	ad24 <calculate_ToA+0x94>
		    maxCeilValue = 0;
    ad96:	2000      	movs	r0, #0
    ad98:	e7eb      	b.n	ad72 <calculate_ToA+0xe2>
    ad9a:	46c0      	nop			; (mov r8, r8)
    ad9c:	0000d445 	.word	0x0000d445
    ada0:	00012e59 	.word	0x00012e59
    ada4:	000124c1 	.word	0x000124c1
    ada8:	47f42400 	.word	0x47f42400
    adac:	447a0000 	.word	0x447a0000
    adb0:	000147a1 	.word	0x000147a1
    adb4:	40110000 	.word	0x40110000
    adb8:	00012f85 	.word	0x00012f85
    adbc:	00014895 	.word	0x00014895
    adc0:	00013c0d 	.word	0x00013c0d
    adc4:	00014939 	.word	0x00014939
    adc8:	3ff00000 	.word	0x3ff00000
    adcc:	0001410d 	.word	0x0001410d
    add0:	000135a5 	.word	0x000135a5
    add4:	00011fa1 	.word	0x00011fa1
    add8:	0001219d 	.word	0x0001219d
    addc:	000128a1 	.word	0x000128a1
    ade0:	00011f71 	.word	0x00011f71

0000ade4 <P2PTasks>:
{
    ade4:	b5f0      	push	{r4, r5, r6, r7, lr}
    ade6:	46de      	mov	lr, fp
    ade8:	4657      	mov	r7, sl
    adea:	464e      	mov	r6, r9
    adec:	4645      	mov	r5, r8
    adee:	b5e0      	push	{r5, r6, r7, lr}
    adf0:	b08b      	sub	sp, #44	; 0x2c
    MiMAC_Task();
    adf2:	4bb6      	ldr	r3, [pc, #728]	; (b0cc <P2PTasks+0x2e8>)
    adf4:	4798      	blx	r3
            if( indirectMessages[i].flags.bits.isValid )
    adf6:	4bb6      	ldr	r3, [pc, #728]	; (b0d0 <P2PTasks+0x2ec>)
    adf8:	7b9b      	ldrb	r3, [r3, #14]
    adfa:	07db      	lsls	r3, r3, #31
    adfc:	d423      	bmi.n	ae46 <P2PTasks+0x62>
    adfe:	2391      	movs	r3, #145	; 0x91
    ae00:	005b      	lsls	r3, r3, #1
    ae02:	4ab3      	ldr	r2, [pc, #716]	; (b0d0 <P2PTasks+0x2ec>)
    ae04:	5cd3      	ldrb	r3, [r2, r3]
    ae06:	07db      	lsls	r3, r3, #31
    ae08:	d434      	bmi.n	ae74 <P2PTasks+0x90>
	ack_timeout_variable = calculate_ToA(PACKETLEN_ACK);
    ae0a:	2016      	movs	r0, #22
    ae0c:	4bb1      	ldr	r3, [pc, #708]	; (b0d4 <P2PTasks+0x2f0>)
    ae0e:	4798      	blx	r3
	ack_timeout_variable = (ack_timeout_variable + TOTAL_ACK_PROCESSING_DELAY) * 1000;
    ae10:	23fa      	movs	r3, #250	; 0xfa
    ae12:	009b      	lsls	r3, r3, #2
    ae14:	4358      	muls	r0, r3
    ae16:	4bb0      	ldr	r3, [pc, #704]	; (b0d8 <P2PTasks+0x2f4>)
    ae18:	469c      	mov	ip, r3
    ae1a:	4460      	add	r0, ip
    ae1c:	4baf      	ldr	r3, [pc, #700]	; (b0dc <P2PTasks+0x2f8>)
    ae1e:	6018      	str	r0, [r3, #0]
	if((AckReqData) && (DataTxAckTimer.Val)) // AckReqData
    ae20:	4baf      	ldr	r3, [pc, #700]	; (b0e0 <P2PTasks+0x2fc>)
    ae22:	781b      	ldrb	r3, [r3, #0]
    ae24:	2b00      	cmp	r3, #0
    ae26:	d003      	beq.n	ae30 <P2PTasks+0x4c>
    ae28:	4bae      	ldr	r3, [pc, #696]	; (b0e4 <P2PTasks+0x300>)
    ae2a:	681b      	ldr	r3, [r3, #0]
    ae2c:	2b00      	cmp	r3, #0
    ae2e:	d13b      	bne.n	aea8 <P2PTasks+0xc4>
    if( P2PStatus.bits.RxHasUserData == 0 && MiMAC_ReceivedPacket() )
    ae30:	4bad      	ldr	r3, [pc, #692]	; (b0e8 <P2PTasks+0x304>)
    ae32:	781b      	ldrb	r3, [r3, #0]
    ae34:	071b      	lsls	r3, r3, #28
    ae36:	d54c      	bpl.n	aed2 <P2PTasks+0xee>
}
    ae38:	b00b      	add	sp, #44	; 0x2c
    ae3a:	bc3c      	pop	{r2, r3, r4, r5}
    ae3c:	4690      	mov	r8, r2
    ae3e:	4699      	mov	r9, r3
    ae40:	46a2      	mov	sl, r4
    ae42:	46ab      	mov	fp, r5
    ae44:	bdf0      	pop	{r4, r5, r6, r7, pc}
                tmpTick.Val = MiWi_TickGet();
    ae46:	4ba9      	ldr	r3, [pc, #676]	; (b0ec <P2PTasks+0x308>)
    ae48:	4798      	blx	r3
                if( MiWi_TickGetDiff(tmpTick, indirectMessages[i].TickStart) > INDIRECT_MESSAGE_TIMEOUT )
    ae4a:	4ba1      	ldr	r3, [pc, #644]	; (b0d0 <P2PTasks+0x2ec>)
    ae4c:	6819      	ldr	r1, [r3, #0]
    ae4e:	4ba8      	ldr	r3, [pc, #672]	; (b0f0 <P2PTasks+0x30c>)
    ae50:	4798      	blx	r3
    ae52:	4ba8      	ldr	r3, [pc, #672]	; (b0f4 <P2PTasks+0x310>)
    ae54:	4298      	cmp	r0, r3
    ae56:	d9d2      	bls.n	adfe <P2PTasks+0x1a>
                    indirectMessages[i].flags.Val = 0x00;   
    ae58:	4b9d      	ldr	r3, [pc, #628]	; (b0d0 <P2PTasks+0x2ec>)
    ae5a:	2200      	movs	r2, #0
    ae5c:	739a      	strb	r2, [r3, #14]
                    indirectMessages[i].indirectConfCallback(indirectMessages[i].indirectDataHandle, TRANSACTION_EXPIRED, indirectMessages[i].PayLoad);
    ae5e:	001a      	movs	r2, r3
    ae60:	3210      	adds	r2, #16
    ae62:	2110      	movs	r1, #16
    ae64:	31ff      	adds	r1, #255	; 0xff
    ae66:	5c58      	ldrb	r0, [r3, r1]
    ae68:	3101      	adds	r1, #1
    ae6a:	585b      	ldr	r3, [r3, r1]
    ae6c:	390c      	subs	r1, #12
    ae6e:	39ff      	subs	r1, #255	; 0xff
    ae70:	4798      	blx	r3
    ae72:	e7c4      	b.n	adfe <P2PTasks+0x1a>
                tmpTick.Val = MiWi_TickGet();
    ae74:	4b9d      	ldr	r3, [pc, #628]	; (b0ec <P2PTasks+0x308>)
    ae76:	4798      	blx	r3
                if( MiWi_TickGetDiff(tmpTick, indirectMessages[i].TickStart) > INDIRECT_MESSAGE_TIMEOUT )
    ae78:	238a      	movs	r3, #138	; 0x8a
    ae7a:	005b      	lsls	r3, r3, #1
    ae7c:	4a94      	ldr	r2, [pc, #592]	; (b0d0 <P2PTasks+0x2ec>)
    ae7e:	58d1      	ldr	r1, [r2, r3]
    ae80:	4b9b      	ldr	r3, [pc, #620]	; (b0f0 <P2PTasks+0x30c>)
    ae82:	4798      	blx	r3
    ae84:	4b9b      	ldr	r3, [pc, #620]	; (b0f4 <P2PTasks+0x310>)
    ae86:	4298      	cmp	r0, r3
    ae88:	d9bf      	bls.n	ae0a <P2PTasks+0x26>
                    indirectMessages[i].flags.Val = 0x00;   
    ae8a:	4b91      	ldr	r3, [pc, #580]	; (b0d0 <P2PTasks+0x2ec>)
    ae8c:	2100      	movs	r1, #0
    ae8e:	2291      	movs	r2, #145	; 0x91
    ae90:	0052      	lsls	r2, r2, #1
    ae92:	5499      	strb	r1, [r3, r2]
                    indirectMessages[i].indirectConfCallback(indirectMessages[i].indirectDataHandle, TRANSACTION_EXPIRED, indirectMessages[i].PayLoad);
    ae94:	001a      	movs	r2, r3
    ae96:	3225      	adds	r2, #37	; 0x25
    ae98:	32ff      	adds	r2, #255	; 0xff
    ae9a:	4997      	ldr	r1, [pc, #604]	; (b0f8 <P2PTasks+0x314>)
    ae9c:	5c58      	ldrb	r0, [r3, r1]
    ae9e:	3101      	adds	r1, #1
    aea0:	585b      	ldr	r3, [r3, r1]
    aea2:	2105      	movs	r1, #5
    aea4:	4798      	blx	r3
    aea6:	e7b0      	b.n	ae0a <P2PTasks+0x26>
		tmpTick.Val = MiWi_TickGet();
    aea8:	4b90      	ldr	r3, [pc, #576]	; (b0ec <P2PTasks+0x308>)
    aeaa:	4798      	blx	r3
		if( MiWi_TickGetDiff(tmpTick, DataTxAckTimer) > ((ack_timeout_variable) * ACK_TIMEOUT_INTERVAL) )
    aeac:	4b8d      	ldr	r3, [pc, #564]	; (b0e4 <P2PTasks+0x300>)
    aeae:	6819      	ldr	r1, [r3, #0]
    aeb0:	4b8f      	ldr	r3, [pc, #572]	; (b0f0 <P2PTasks+0x30c>)
    aeb2:	4798      	blx	r3
    aeb4:	4b89      	ldr	r3, [pc, #548]	; (b0dc <P2PTasks+0x2f8>)
    aeb6:	681b      	ldr	r3, [r3, #0]
    aeb8:	4298      	cmp	r0, r3
    aeba:	d9b9      	bls.n	ae30 <P2PTasks+0x4c>
			DataTxAckTimer.Val =0;
    aebc:	2300      	movs	r3, #0
    aebe:	4a89      	ldr	r2, [pc, #548]	; (b0e4 <P2PTasks+0x300>)
    aec0:	6013      	str	r3, [r2, #0]
			AckReqData = 0;
    aec2:	4a87      	ldr	r2, [pc, #540]	; (b0e0 <P2PTasks+0x2fc>)
    aec4:	7013      	strb	r3, [r2, #0]
			MiMAC_RetryPacket();
    aec6:	4b8d      	ldr	r3, [pc, #564]	; (b0fc <P2PTasks+0x318>)
    aec8:	4798      	blx	r3
			printf("\r\n Ack Timeout\r\n");
    aeca:	488d      	ldr	r0, [pc, #564]	; (b100 <P2PTasks+0x31c>)
    aecc:	4b8d      	ldr	r3, [pc, #564]	; (b104 <P2PTasks+0x320>)
    aece:	4798      	blx	r3
    aed0:	e7ae      	b.n	ae30 <P2PTasks+0x4c>
    if( P2PStatus.bits.RxHasUserData == 0 && MiMAC_ReceivedPacket() )
    aed2:	4b8d      	ldr	r3, [pc, #564]	; (b108 <P2PTasks+0x324>)
    aed4:	4798      	blx	r3
    aed6:	2800      	cmp	r0, #0
    aed8:	d0ae      	beq.n	ae38 <P2PTasks+0x54>
        FW_Stat = false;  // Used for SW_Generated ACK T PAN CO
    aeda:	2200      	movs	r2, #0
    aedc:	4b8b      	ldr	r3, [pc, #556]	; (b10c <P2PTasks+0x328>)
    aede:	701a      	strb	r2, [r3, #0]
            temp_bit = MACRxPacket.flags.bits.broadcast;
    aee0:	4b8b      	ldr	r3, [pc, #556]	; (b110 <P2PTasks+0x32c>)
    aee2:	7819      	ldrb	r1, [r3, #0]
    aee4:	074b      	lsls	r3, r1, #29
    aee6:	0fdb      	lsrs	r3, r3, #31
    aee8:	4a8a      	ldr	r2, [pc, #552]	; (b114 <P2PTasks+0x330>)
    aeea:	7013      	strb	r3, [r2, #0]
            rxMessage.flags.bits.broadcast = temp_bit;
    aeec:	2203      	movs	r2, #3
        rxMessage.flags.bits.secEn = MACRxPacket.flags.bits.secEn;
    aeee:	08cc      	lsrs	r4, r1, #3
    aef0:	2001      	movs	r0, #1
    aef2:	4004      	ands	r4, r0
    aef4:	00e4      	lsls	r4, r4, #3
    aef6:	4013      	ands	r3, r2
        rxMessage.flags.bits.command = (MACRxPacket.flags.bits.packetType == PACKET_TYPE_COMMAND) ? 1:0;
    aef8:	400a      	ands	r2, r1
    aefa:	3a01      	subs	r2, #1
    aefc:	4255      	negs	r5, r2
    aefe:	416a      	adcs	r2, r5
    af00:	4002      	ands	r2, r0
    af02:	0152      	lsls	r2, r2, #5
    af04:	4323      	orrs	r3, r4
        rxMessage.flags.bits.srcPrsnt = MACRxPacket.flags.bits.sourcePrsnt;
    af06:	09cc      	lsrs	r4, r1, #7
    af08:	4020      	ands	r0, r4
    af0a:	0180      	lsls	r0, r0, #6
    af0c:	4313      	orrs	r3, r2
    af0e:	4303      	orrs	r3, r0
    af10:	4a81      	ldr	r2, [pc, #516]	; (b118 <P2PTasks+0x334>)
    af12:	7013      	strb	r3, [r2, #0]
        if( MACRxPacket.flags.bits.sourcePrsnt )
    af14:	b249      	sxtb	r1, r1
    af16:	2900      	cmp	r1, #0
    af18:	db36      	blt.n	af88 <P2PTasks+0x1a4>
            rxMessage.SourcePANID.Val = MACRxPacket.SourcePANID.Val;
    af1a:	4a7d      	ldr	r2, [pc, #500]	; (b110 <P2PTasks+0x32c>)
    af1c:	8a17      	ldrh	r7, [r2, #16]
    af1e:	4b7e      	ldr	r3, [pc, #504]	; (b118 <P2PTasks+0x334>)
    af20:	805f      	strh	r7, [r3, #2]
        rxMessage.PayloadSize = MACRxPacket.PayloadLen;
    af22:	7b11      	ldrb	r1, [r2, #12]
    af24:	7319      	strb	r1, [r3, #12]
        rxMessage.Payload = MACRxPacket.Payload;
    af26:	6895      	ldr	r5, [r2, #8]
    af28:	609d      	str	r5, [r3, #8]
            rxMessage.PacketLQI = MACRxPacket.LQIValue;
    af2a:	7b90      	ldrb	r0, [r2, #14]
    af2c:	4680      	mov	r8, r0
    af2e:	7398      	strb	r0, [r3, #14]
            rxMessage.PacketRSSI = MACRxPacket.RSSIValue;
    af30:	7b52      	ldrb	r2, [r2, #13]
    af32:	4691      	mov	r9, r2
    af34:	735a      	strb	r2, [r3, #13]
        if( rxMessage.flags.bits.command )
    af36:	781b      	ldrb	r3, [r3, #0]
    af38:	069b      	lsls	r3, r3, #26
    af3a:	d400      	bmi.n	af3e <P2PTasks+0x15a>
    af3c:	e277      	b.n	b42e <P2PTasks+0x64a>
            switch( rxMessage.Payload[0] )
    af3e:	782b      	ldrb	r3, [r5, #0]
    af40:	b2da      	uxtb	r2, r3
    af42:	2a83      	cmp	r2, #131	; 0x83
    af44:	d100      	bne.n	af48 <P2PTasks+0x164>
    af46:	e210      	b.n	b36a <P2PTasks+0x586>
    af48:	d923      	bls.n	af92 <P2PTasks+0x1ae>
    af4a:	b2da      	uxtb	r2, r3
    af4c:	2a91      	cmp	r2, #145	; 0x91
    af4e:	d100      	bne.n	af52 <P2PTasks+0x16e>
    af50:	e174      	b.n	b23c <P2PTasks+0x458>
    af52:	d935      	bls.n	afc0 <P2PTasks+0x1dc>
    af54:	b2da      	uxtb	r2, r3
    af56:	2a92      	cmp	r2, #146	; 0x92
    af58:	d100      	bne.n	af5c <P2PTasks+0x178>
    af5a:	e1e1      	b.n	b320 <P2PTasks+0x53c>
    af5c:	2a97      	cmp	r2, #151	; 0x97
    af5e:	d11f      	bne.n	afa0 <P2PTasks+0x1bc>
                            if( P2PStatus.bits.Resync )
    af60:	4b61      	ldr	r3, [pc, #388]	; (b0e8 <P2PTasks+0x304>)
    af62:	781b      	ldrb	r3, [r3, #0]
    af64:	069b      	lsls	r3, r3, #26
    af66:	d500      	bpl.n	af6a <P2PTasks+0x186>
    af68:	e198      	b.n	b29c <P2PTasks+0x4b8>
                                    for(; i < ActiveScanResultIndex; i++)
    af6a:	4b6c      	ldr	r3, [pc, #432]	; (b11c <P2PTasks+0x338>)
    af6c:	781b      	ldrb	r3, [r3, #0]
    af6e:	469a      	mov	sl, r3
    af70:	2b00      	cmp	r3, #0
    af72:	d100      	bne.n	af76 <P2PTasks+0x192>
    af74:	e1af      	b.n	b2d6 <P2PTasks+0x4f2>
                                        if( (ActiveScanResults[i].Channel == currentChannel) &&
    af76:	4b6a      	ldr	r3, [pc, #424]	; (b120 <P2PTasks+0x33c>)
    af78:	781b      	ldrb	r3, [r3, #0]
    af7a:	469b      	mov	fp, r3
                                            isSameAddress(ActiveScanResults[i].Address, rxMessage.SourceAddress)
    af7c:	4b66      	ldr	r3, [pc, #408]	; (b118 <P2PTasks+0x334>)
    af7e:	685b      	ldr	r3, [r3, #4]
    af80:	9306      	str	r3, [sp, #24]
    af82:	4e68      	ldr	r6, [pc, #416]	; (b124 <P2PTasks+0x340>)
    af84:	2400      	movs	r4, #0
    af86:	e196      	b.n	b2b6 <P2PTasks+0x4d2>
            rxMessage.SourceAddress = MACRxPacket.SourceAddress;
    af88:	4b61      	ldr	r3, [pc, #388]	; (b110 <P2PTasks+0x32c>)
    af8a:	685a      	ldr	r2, [r3, #4]
    af8c:	4b62      	ldr	r3, [pc, #392]	; (b118 <P2PTasks+0x334>)
    af8e:	605a      	str	r2, [r3, #4]
    af90:	e7c3      	b.n	af1a <P2PTasks+0x136>
            switch( rxMessage.Payload[0] )
    af92:	2a81      	cmp	r2, #129	; 0x81
    af94:	d023      	beq.n	afde <P2PTasks+0x1fa>
    af96:	d900      	bls.n	af9a <P2PTasks+0x1b6>
    af98:	e118      	b.n	b1cc <P2PTasks+0x3e8>
    af9a:	2b04      	cmp	r3, #4
    af9c:	d100      	bne.n	afa0 <P2PTasks+0x1bc>
    af9e:	e1e4      	b.n	b36a <P2PTasks+0x586>
                    P2PStatus.bits.RxHasUserData = 1;
    afa0:	4c51      	ldr	r4, [pc, #324]	; (b0e8 <P2PTasks+0x304>)
    afa2:	7823      	ldrb	r3, [r4, #0]
    afa4:	2208      	movs	r2, #8
    afa6:	4313      	orrs	r3, r2
    afa8:	7023      	strb	r3, [r4, #0]
					pktRxcallback(&rxMessage);
    afaa:	4b5f      	ldr	r3, [pc, #380]	; (b128 <P2PTasks+0x344>)
    afac:	681b      	ldr	r3, [r3, #0]
    afae:	485a      	ldr	r0, [pc, #360]	; (b118 <P2PTasks+0x334>)
    afb0:	4798      	blx	r3
					P2PStatus.bits.RxHasUserData = 0;
    afb2:	7823      	ldrb	r3, [r4, #0]
    afb4:	2208      	movs	r2, #8
    afb6:	4393      	bics	r3, r2
    afb8:	7023      	strb	r3, [r4, #0]
					MiMAC_DiscardPacket();
    afba:	4b5c      	ldr	r3, [pc, #368]	; (b12c <P2PTasks+0x348>)
    afbc:	4798      	blx	r3
                    break;
    afbe:	e245      	b.n	b44c <P2PTasks+0x668>
            switch( rxMessage.Payload[0] )
    afc0:	2a87      	cmp	r2, #135	; 0x87
    afc2:	d1ed      	bne.n	afa0 <P2PTasks+0x1bc>
                        if(ConnMode > ENABLE_ACTIVE_SCAN_RSP)
    afc4:	4b5a      	ldr	r3, [pc, #360]	; (b130 <P2PTasks+0x34c>)
    afc6:	781b      	ldrb	r3, [r3, #0]
    afc8:	2b02      	cmp	r3, #2
    afca:	d87b      	bhi.n	b0c4 <P2PTasks+0x2e0>
                            if( currentChannel != rxMessage.Payload[1] )
    afcc:	786a      	ldrb	r2, [r5, #1]
    afce:	4b54      	ldr	r3, [pc, #336]	; (b120 <P2PTasks+0x33c>)
    afd0:	781b      	ldrb	r3, [r3, #0]
    afd2:	429a      	cmp	r2, r3
    afd4:	d100      	bne.n	afd8 <P2PTasks+0x1f4>
    afd6:	e0c7      	b.n	b168 <P2PTasks+0x384>
                                MiMAC_DiscardPacket();
    afd8:	4b54      	ldr	r3, [pc, #336]	; (b12c <P2PTasks+0x348>)
    afda:	4798      	blx	r3
                                break;
    afdc:	e236      	b.n	b44c <P2PTasks+0x668>
                                if( currentChannel != rxMessage.Payload[1] )
    afde:	786a      	ldrb	r2, [r5, #1]
    afe0:	4b4f      	ldr	r3, [pc, #316]	; (b120 <P2PTasks+0x33c>)
    afe2:	781b      	ldrb	r3, [r3, #0]
    afe4:	429a      	cmp	r2, r3
    afe6:	d002      	beq.n	afee <P2PTasks+0x20a>
                                    MiMAC_DiscardPacket();
    afe8:	4b50      	ldr	r3, [pc, #320]	; (b12c <P2PTasks+0x348>)
    afea:	4798      	blx	r3
                                    break;
    afec:	e22e      	b.n	b44c <P2PTasks+0x668>
                                if( ConnMode == DISABLE_ALL_CONN )
    afee:	4b50      	ldr	r3, [pc, #320]	; (b130 <P2PTasks+0x34c>)
    aff0:	781b      	ldrb	r3, [r3, #0]
    aff2:	2b03      	cmp	r3, #3
    aff4:	d047      	beq.n	b086 <P2PTasks+0x2a2>
                                    if( rxMessage.SourcePANID.Val != 0xFFFF &&
    aff6:	4b4f      	ldr	r3, [pc, #316]	; (b134 <P2PTasks+0x350>)
    aff8:	429f      	cmp	r7, r3
    affa:	d006      	beq.n	b00a <P2PTasks+0x226>
                                        rxMessage.SourcePANID.Val != myPANID.Val &&
    affc:	4b4e      	ldr	r3, [pc, #312]	; (b138 <P2PTasks+0x354>)
                                    if( rxMessage.SourcePANID.Val != 0xFFFF &&
    affe:	881b      	ldrh	r3, [r3, #0]
    b000:	42bb      	cmp	r3, r7
    b002:	d002      	beq.n	b00a <P2PTasks+0x226>
                                        rxMessage.SourcePANID.Val != myPANID.Val &&
    b004:	2902      	cmp	r1, #2
    b006:	d900      	bls.n	b00a <P2PTasks+0x226>
    b008:	e235      	b.n	b476 <P2PTasks+0x692>
                                    status = AddConnection();
    b00a:	4b4c      	ldr	r3, [pc, #304]	; (b13c <P2PTasks+0x358>)
    b00c:	4798      	blx	r3
    b00e:	0005      	movs	r5, r0
                                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    b010:	4b47      	ldr	r3, [pc, #284]	; (b130 <P2PTasks+0x34c>)
    b012:	781b      	ldrb	r3, [r3, #0]
    b014:	2b01      	cmp	r3, #1
    b016:	d039      	beq.n	b08c <P2PTasks+0x2a8>
                                dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(TX_BUFFER_SIZE));
    b018:	20e0      	movs	r0, #224	; 0xe0
    b01a:	4b49      	ldr	r3, [pc, #292]	; (b140 <P2PTasks+0x35c>)
    b01c:	4798      	blx	r3
    b01e:	1e04      	subs	r4, r0, #0
                                if (NULL == dataPtr)
    b020:	d100      	bne.n	b024 <P2PTasks+0x240>
    b022:	e709      	b.n	ae38 <P2PTasks+0x54>
                                dataPtr[dataLen++] = CMD_P2P_CONNECTION_RESPONSE;
    b024:	2391      	movs	r3, #145	; 0x91
    b026:	7003      	strb	r3, [r0, #0]
                                dataPtr[dataLen++] = status;
    b028:	7045      	strb	r5, [r0, #1]
    b02a:	2602      	movs	r6, #2
                                if( status == STATUS_SUCCESS ||
    b02c:	2d01      	cmp	r5, #1
    b02e:	d93d      	bls.n	b0ac <P2PTasks+0x2c8>
                                MiMAC_DiscardPacket();
    b030:	4b3e      	ldr	r3, [pc, #248]	; (b12c <P2PTasks+0x348>)
    b032:	4798      	blx	r3
                                i = PHY_RandomReq();
    b034:	4b43      	ldr	r3, [pc, #268]	; (b144 <P2PTasks+0x360>)
    b036:	4798      	blx	r3
    b038:	b2c5      	uxtb	r5, r0
                                delay_s(i % (CONNECTION_INTERVAL-1));
    b03a:	2103      	movs	r1, #3
    b03c:	0028      	movs	r0, r5
    b03e:	4b42      	ldr	r3, [pc, #264]	; (b148 <P2PTasks+0x364>)
    b040:	4798      	blx	r3
    b042:	b2c9      	uxtb	r1, r1
    b044:	2900      	cmp	r1, #0
    b046:	d039      	beq.n	b0bc <P2PTasks+0x2d8>
    b048:	20fa      	movs	r0, #250	; 0xfa
    b04a:	0080      	lsls	r0, r0, #2
    b04c:	4368      	muls	r0, r5
    b04e:	2103      	movs	r1, #3
    b050:	4b3e      	ldr	r3, [pc, #248]	; (b14c <P2PTasks+0x368>)
    b052:	4798      	blx	r3
    b054:	0008      	movs	r0, r1
    b056:	4b3e      	ldr	r3, [pc, #248]	; (b150 <P2PTasks+0x36c>)
    b058:	4798      	blx	r3
                                        SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn, 
    b05a:	4b2f      	ldr	r3, [pc, #188]	; (b118 <P2PTasks+0x334>)
    b05c:	685a      	ldr	r2, [r3, #4]
    b05e:	8859      	ldrh	r1, [r3, #2]
    b060:	483c      	ldr	r0, [pc, #240]	; (b154 <P2PTasks+0x370>)
    b062:	9005      	str	r0, [sp, #20]
    b064:	2001      	movs	r0, #1
    b066:	9004      	str	r0, [sp, #16]
    b068:	2000      	movs	r0, #0
    b06a:	9003      	str	r0, [sp, #12]
    b06c:	9402      	str	r4, [sp, #8]
    b06e:	9601      	str	r6, [sp, #4]
    b070:	781b      	ldrb	r3, [r3, #0]
    b072:	071b      	lsls	r3, r3, #28
    b074:	0fdb      	lsrs	r3, r3, #31
    b076:	9300      	str	r3, [sp, #0]
    b078:	2301      	movs	r3, #1
    b07a:	4c37      	ldr	r4, [pc, #220]	; (b158 <P2PTasks+0x374>)
    b07c:	47a0      	blx	r4
								delay_ms (100);
    b07e:	2064      	movs	r0, #100	; 0x64
    b080:	4b33      	ldr	r3, [pc, #204]	; (b150 <P2PTasks+0x36c>)
    b082:	4798      	blx	r3
                        break; 
    b084:	e1e2      	b.n	b44c <P2PTasks+0x668>
                                    MiMAC_DiscardPacket();
    b086:	4b29      	ldr	r3, [pc, #164]	; (b12c <P2PTasks+0x348>)
    b088:	4798      	blx	r3
                                    break;
    b08a:	e1df      	b.n	b44c <P2PTasks+0x668>
                                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    b08c:	3801      	subs	r0, #1
    b08e:	b2c0      	uxtb	r0, r0
    b090:	2801      	cmp	r0, #1
    b092:	d9c1      	bls.n	b018 <P2PTasks+0x234>
                                dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(TX_BUFFER_SIZE));
    b094:	20e0      	movs	r0, #224	; 0xe0
    b096:	4b2a      	ldr	r3, [pc, #168]	; (b140 <P2PTasks+0x35c>)
    b098:	4798      	blx	r3
    b09a:	1e04      	subs	r4, r0, #0
                                if (NULL == dataPtr)
    b09c:	d100      	bne.n	b0a0 <P2PTasks+0x2bc>
    b09e:	e6cb      	b.n	ae38 <P2PTasks+0x54>
                                dataPtr[dataLen++] = CMD_P2P_CONNECTION_RESPONSE;
    b0a0:	2391      	movs	r3, #145	; 0x91
    b0a2:	7023      	strb	r3, [r4, #0]
                                dataPtr[dataLen++] = status;
    b0a4:	3362      	adds	r3, #98	; 0x62
    b0a6:	7063      	strb	r3, [r4, #1]
    b0a8:	2602      	movs	r6, #2
    b0aa:	e7c1      	b.n	b030 <P2PTasks+0x24c>
                                    dataPtr[dataLen++] = P2PCapacityInfo;
    b0ac:	4b2b      	ldr	r3, [pc, #172]	; (b15c <P2PTasks+0x378>)
    b0ae:	781b      	ldrb	r3, [r3, #0]
    b0b0:	7083      	strb	r3, [r0, #2]
                                            dataPtr[dataLen++] = AdditionalNodeID[i];
    b0b2:	4b2b      	ldr	r3, [pc, #172]	; (b160 <P2PTasks+0x37c>)
    b0b4:	781b      	ldrb	r3, [r3, #0]
    b0b6:	70c3      	strb	r3, [r0, #3]
    b0b8:	3602      	adds	r6, #2
    b0ba:	e7b9      	b.n	b030 <P2PTasks+0x24c>
                                delay_s(i % (CONNECTION_INTERVAL-1));
    b0bc:	2001      	movs	r0, #1
    b0be:	4b29      	ldr	r3, [pc, #164]	; (b164 <P2PTasks+0x380>)
    b0c0:	4798      	blx	r3
    b0c2:	e7ca      	b.n	b05a <P2PTasks+0x276>
                                MiMAC_DiscardPacket();
    b0c4:	4b19      	ldr	r3, [pc, #100]	; (b12c <P2PTasks+0x348>)
    b0c6:	4798      	blx	r3
                                break;
    b0c8:	e1c0      	b.n	b44c <P2PTasks+0x668>
    b0ca:	46c0      	nop			; (mov r8, r8)
    b0cc:	0000a045 	.word	0x0000a045
    b0d0:	20002884 	.word	0x20002884
    b0d4:	0000ac91 	.word	0x0000ac91
    b0d8:	000c8708 	.word	0x000c8708
    b0dc:	20000498 	.word	0x20000498
    b0e0:	20000483 	.word	0x20000483
    b0e4:	20002b04 	.word	0x20002b04
    b0e8:	20002880 	.word	0x20002880
    b0ec:	0000bae5 	.word	0x0000bae5
    b0f0:	0000bb45 	.word	0x0000bb45
    b0f4:	016e3600 	.word	0x016e3600
    b0f8:	00000223 	.word	0x00000223
    b0fc:	000098f5 	.word	0x000098f5
    b100:	0001733c 	.word	0x0001733c
    b104:	000154b5 	.word	0x000154b5
    b108:	00009939 	.word	0x00009939
    b10c:	20002866 	.word	0x20002866
    b110:	20002844 	.word	0x20002844
    b114:	20002864 	.word	0x20002864
    b118:	20002af0 	.word	0x20002af0
    b11c:	20002b00 	.word	0x20002b00
    b120:	2000001d 	.word	0x2000001d
    b124:	20002ab0 	.word	0x20002ab0
    b128:	2000049c 	.word	0x2000049c
    b12c:	000098b9 	.word	0x000098b9
    b130:	2000001c 	.word	0x2000001c
    b134:	0000ffff 	.word	0x0000ffff
    b138:	2000285c 	.word	0x2000285c
    b13c:	0000ab45 	.word	0x0000ab45
    b140:	0000b8a5 	.word	0x0000b8a5
    b144:	0000a44d 	.word	0x0000a44d
    b148:	00011c89 	.word	0x00011c89
    b14c:	00011e5d 	.word	0x00011e5d
    b150:	0000471d 	.word	0x0000471d
    b154:	0000a489 	.word	0x0000a489
    b158:	0000a5f5 	.word	0x0000a5f5
    b15c:	20002859 	.word	0x20002859
    b160:	20000018 	.word	0x20000018
    b164:	000046f1 	.word	0x000046f1
                            dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_ACTIVE_SCAN_RESPONSE));
    b168:	2010      	movs	r0, #16
    b16a:	4bc6      	ldr	r3, [pc, #792]	; (b484 <P2PTasks+0x6a0>)
    b16c:	4798      	blx	r3
    b16e:	1e04      	subs	r4, r0, #0
                            if (NULL == dataPtr)
    b170:	d100      	bne.n	b174 <P2PTasks+0x390>
    b172:	e661      	b.n	ae38 <P2PTasks+0x54>
                            dataPtr[dataLen++] = CMD_P2P_ACTIVE_SCAN_RESPONSE;
    b174:	2397      	movs	r3, #151	; 0x97
    b176:	7003      	strb	r3, [r0, #0]
                            dataPtr[dataLen++] = P2PCapacityInfo;
    b178:	4bc3      	ldr	r3, [pc, #780]	; (b488 <P2PTasks+0x6a4>)
    b17a:	781b      	ldrb	r3, [r3, #0]
    b17c:	7043      	strb	r3, [r0, #1]
                                    dataPtr[dataLen++] = (AdditionalNodeID[i]);
    b17e:	4bc3      	ldr	r3, [pc, #780]	; (b48c <P2PTasks+0x6a8>)
    b180:	781b      	ldrb	r3, [r3, #0]
    b182:	7083      	strb	r3, [r0, #2]
                            MiMAC_DiscardPacket();
    b184:	4bc2      	ldr	r3, [pc, #776]	; (b490 <P2PTasks+0x6ac>)
    b186:	4798      	blx	r3
							i = PHY_RandomReq();
    b188:	4bc2      	ldr	r3, [pc, #776]	; (b494 <P2PTasks+0x6b0>)
    b18a:	4798      	blx	r3
							delay_ms(i*100);
    b18c:	b2c3      	uxtb	r3, r0
    b18e:	2064      	movs	r0, #100	; 0x64
    b190:	4358      	muls	r0, r3
    b192:	2800      	cmp	r0, #0
    b194:	d016      	beq.n	b1c4 <P2PTasks+0x3e0>
    b196:	4bc0      	ldr	r3, [pc, #768]	; (b498 <P2PTasks+0x6b4>)
    b198:	4798      	blx	r3
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn, 
    b19a:	4bc0      	ldr	r3, [pc, #768]	; (b49c <P2PTasks+0x6b8>)
    b19c:	685a      	ldr	r2, [r3, #4]
    b19e:	8859      	ldrh	r1, [r3, #2]
    b1a0:	48bf      	ldr	r0, [pc, #764]	; (b4a0 <P2PTasks+0x6bc>)
    b1a2:	9005      	str	r0, [sp, #20]
    b1a4:	2001      	movs	r0, #1
    b1a6:	9004      	str	r0, [sp, #16]
    b1a8:	2000      	movs	r0, #0
    b1aa:	9003      	str	r0, [sp, #12]
    b1ac:	9402      	str	r4, [sp, #8]
    b1ae:	3003      	adds	r0, #3
    b1b0:	9001      	str	r0, [sp, #4]
    b1b2:	781b      	ldrb	r3, [r3, #0]
    b1b4:	071b      	lsls	r3, r3, #28
    b1b6:	0fdb      	lsrs	r3, r3, #31
    b1b8:	9300      	str	r3, [sp, #0]
    b1ba:	2301      	movs	r3, #1
    b1bc:	2000      	movs	r0, #0
    b1be:	4cb9      	ldr	r4, [pc, #740]	; (b4a4 <P2PTasks+0x6c0>)
    b1c0:	47a0      	blx	r4
                        break;
    b1c2:	e143      	b.n	b44c <P2PTasks+0x668>
							delay_ms(i*100);
    b1c4:	2001      	movs	r0, #1
    b1c6:	4bb8      	ldr	r3, [pc, #736]	; (b4a8 <P2PTasks+0x6c4>)
    b1c8:	4798      	blx	r3
    b1ca:	e7e6      	b.n	b19a <P2PTasks+0x3b6>
                            dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_CONNECTION_REMOVAL_RESPONSE));
    b1cc:	2010      	movs	r0, #16
    b1ce:	4bad      	ldr	r3, [pc, #692]	; (b484 <P2PTasks+0x6a0>)
    b1d0:	4798      	blx	r3
    b1d2:	4680      	mov	r8, r0
                            if (NULL == dataPtr)
    b1d4:	2800      	cmp	r0, #0
    b1d6:	d100      	bne.n	b1da <P2PTasks+0x3f6>
    b1d8:	e62e      	b.n	ae38 <P2PTasks+0x54>
                            dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_RESPONSE;
    b1da:	2392      	movs	r3, #146	; 0x92
    b1dc:	7003      	strb	r3, [r0, #0]
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    b1de:	4baf      	ldr	r3, [pc, #700]	; (b49c <P2PTasks+0x6b8>)
    b1e0:	685b      	ldr	r3, [r3, #4]
    b1e2:	9307      	str	r3, [sp, #28]
    b1e4:	4eb1      	ldr	r6, [pc, #708]	; (b4ac <P2PTasks+0x6c8>)
    b1e6:	2700      	movs	r7, #0
                            for(i = 0; i < CONNECTION_SIZE; i++)
    b1e8:	2400      	movs	r4, #0
                                if( ConnectionTable[i].status.bits.isValid )
    b1ea:	0035      	movs	r5, r6
    b1ec:	e006      	b.n	b1fc <P2PTasks+0x418>
                            for(i = 0; i < CONNECTION_SIZE; i++)
    b1ee:	3401      	adds	r4, #1
    b1f0:	b2e4      	uxtb	r4, r4
    b1f2:	3701      	adds	r7, #1
    b1f4:	360a      	adds	r6, #10
    b1f6:	2c05      	cmp	r4, #5
    b1f8:	d100      	bne.n	b1fc <P2PTasks+0x418>
    b1fa:	e179      	b.n	b4f0 <P2PTasks+0x70c>
                                if( ConnectionTable[i].status.bits.isValid )
    b1fc:	9706      	str	r7, [sp, #24]
    b1fe:	00bb      	lsls	r3, r7, #2
    b200:	19db      	adds	r3, r3, r7
    b202:	005b      	lsls	r3, r3, #1
    b204:	18eb      	adds	r3, r5, r3
    b206:	7a1b      	ldrb	r3, [r3, #8]
    b208:	09db      	lsrs	r3, r3, #7
    b20a:	d0f0      	beq.n	b1ee <P2PTasks+0x40a>
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    b20c:	0031      	movs	r1, r6
    b20e:	9807      	ldr	r0, [sp, #28]
    b210:	4ba7      	ldr	r3, [pc, #668]	; (b4b0 <P2PTasks+0x6cc>)
    b212:	4798      	blx	r3
    b214:	2800      	cmp	r0, #0
    b216:	d0ea      	beq.n	b1ee <P2PTasks+0x40a>
                                        ConnectionTable[i].status.Val = 0;
    b218:	9a06      	ldr	r2, [sp, #24]
    b21a:	0093      	lsls	r3, r2, #2
    b21c:	189d      	adds	r5, r3, r2
    b21e:	006d      	lsls	r5, r5, #1
    b220:	4ba2      	ldr	r3, [pc, #648]	; (b4ac <P2PTasks+0x6c8>)
    b222:	195d      	adds	r5, r3, r5
    b224:	2300      	movs	r3, #0
    b226:	722b      	strb	r3, [r5, #8]
                                        dataPtr[dataLen++] = STATUS_SUCCESS;
    b228:	4642      	mov	r2, r8
    b22a:	7053      	strb	r3, [r2, #1]
                            MiMAC_DiscardPacket();
    b22c:	4b98      	ldr	r3, [pc, #608]	; (b490 <P2PTasks+0x6ac>)
    b22e:	4798      	blx	r3
                            if( i == CONNECTION_SIZE ) 
    b230:	2c05      	cmp	r4, #5
    b232:	d001      	beq.n	b238 <P2PTasks+0x454>
                                        dataPtr[dataLen++] = STATUS_SUCCESS;
    b234:	2402      	movs	r4, #2
    b236:	e162      	b.n	b4fe <P2PTasks+0x71a>
    b238:	2302      	movs	r3, #2
    b23a:	e15c      	b.n	b4f6 <P2PTasks+0x712>
                            switch( rxMessage.Payload[1] )
    b23c:	786b      	ldrb	r3, [r5, #1]
    b23e:	2b00      	cmp	r3, #0
    b240:	d014      	beq.n	b26c <P2PTasks+0x488>
    b242:	2b01      	cmp	r3, #1
    b244:	d10f      	bne.n	b266 <P2PTasks+0x482>
                                    if (EstConfCallback)
    b246:	4b9b      	ldr	r3, [pc, #620]	; (b4b4 <P2PTasks+0x6d0>)
    b248:	681b      	ldr	r3, [r3, #0]
    b24a:	2b00      	cmp	r3, #0
    b24c:	d004      	beq.n	b258 <P2PTasks+0x474>
                                        EstConfCallback(ALREADY_EXISTS);
    b24e:	2006      	movs	r0, #6
    b250:	4798      	blx	r3
                                        EstConfCallback = NULL;
    b252:	2200      	movs	r2, #0
    b254:	4b97      	ldr	r3, [pc, #604]	; (b4b4 <P2PTasks+0x6d0>)
    b256:	601a      	str	r2, [r3, #0]
                                        if( myPANID.Val == 0xFFFF )
    b258:	4b97      	ldr	r3, [pc, #604]	; (b4b8 <P2PTasks+0x6d4>)
    b25a:	881a      	ldrh	r2, [r3, #0]
    b25c:	4b97      	ldr	r3, [pc, #604]	; (b4bc <P2PTasks+0x6d8>)
    b25e:	429a      	cmp	r2, r3
    b260:	d00e      	beq.n	b280 <P2PTasks+0x49c>
                                    AddConnection();
    b262:	4b97      	ldr	r3, [pc, #604]	; (b4c0 <P2PTasks+0x6dc>)
    b264:	4798      	blx	r3
                        MiMAC_DiscardPacket();
    b266:	4b8a      	ldr	r3, [pc, #552]	; (b490 <P2PTasks+0x6ac>)
    b268:	4798      	blx	r3
                        break; 
    b26a:	e0ef      	b.n	b44c <P2PTasks+0x668>
                                    if (EstConfCallback)
    b26c:	4b91      	ldr	r3, [pc, #580]	; (b4b4 <P2PTasks+0x6d0>)
    b26e:	681b      	ldr	r3, [r3, #0]
    b270:	2b00      	cmp	r3, #0
    b272:	d0f1      	beq.n	b258 <P2PTasks+0x474>
                                        EstConfCallback(SUCCESS);
    b274:	2000      	movs	r0, #0
    b276:	4798      	blx	r3
                                        EstConfCallback = NULL;
    b278:	2200      	movs	r2, #0
    b27a:	4b8e      	ldr	r3, [pc, #568]	; (b4b4 <P2PTasks+0x6d0>)
    b27c:	601a      	str	r2, [r3, #0]
    b27e:	e7eb      	b.n	b258 <P2PTasks+0x474>
                                            myPANID.Val = rxMessage.SourcePANID.Val;
    b280:	498d      	ldr	r1, [pc, #564]	; (b4b8 <P2PTasks+0x6d4>)
    b282:	4b86      	ldr	r3, [pc, #536]	; (b49c <P2PTasks+0x6b8>)
    b284:	885b      	ldrh	r3, [r3, #2]
    b286:	800b      	strh	r3, [r1, #0]
                                                uint16_t tmp = 0xFFFF;
    b288:	201e      	movs	r0, #30
    b28a:	ab02      	add	r3, sp, #8
    b28c:	469c      	mov	ip, r3
    b28e:	4460      	add	r0, ip
    b290:	2301      	movs	r3, #1
    b292:	425b      	negs	r3, r3
    b294:	8003      	strh	r3, [r0, #0]
                                                MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    b296:	4b8b      	ldr	r3, [pc, #556]	; (b4c4 <P2PTasks+0x6e0>)
    b298:	4798      	blx	r3
    b29a:	e7e2      	b.n	b262 <P2PTasks+0x47e>
                                P2PStatus.bits.Resync = 0;   
    b29c:	4a8a      	ldr	r2, [pc, #552]	; (b4c8 <P2PTasks+0x6e4>)
    b29e:	7813      	ldrb	r3, [r2, #0]
    b2a0:	2120      	movs	r1, #32
    b2a2:	438b      	bics	r3, r1
    b2a4:	7013      	strb	r3, [r2, #0]
                            MiMAC_DiscardPacket(); 
    b2a6:	4b7a      	ldr	r3, [pc, #488]	; (b490 <P2PTasks+0x6ac>)
    b2a8:	4798      	blx	r3
                        break;                
    b2aa:	e0cf      	b.n	b44c <P2PTasks+0x668>
                                    for(; i < ActiveScanResultIndex; i++)
    b2ac:	3401      	adds	r4, #1
    b2ae:	b2e4      	uxtb	r4, r4
    b2b0:	3610      	adds	r6, #16
    b2b2:	4554      	cmp	r4, sl
    b2b4:	d00d      	beq.n	b2d2 <P2PTasks+0x4ee>
                                        if( (ActiveScanResults[i].Channel == currentChannel) &&
    b2b6:	7833      	ldrb	r3, [r6, #0]
    b2b8:	455b      	cmp	r3, fp
    b2ba:	d1f7      	bne.n	b2ac <P2PTasks+0x4c8>
    b2bc:	8973      	ldrh	r3, [r6, #10]
    b2be:	42bb      	cmp	r3, r7
    b2c0:	d1f4      	bne.n	b2ac <P2PTasks+0x4c8>
                                            isSameAddress(ActiveScanResults[i].Address, rxMessage.SourceAddress)
    b2c2:	1c70      	adds	r0, r6, #1
    b2c4:	9906      	ldr	r1, [sp, #24]
    b2c6:	4b7a      	ldr	r3, [pc, #488]	; (b4b0 <P2PTasks+0x6cc>)
    b2c8:	4798      	blx	r3
                                            (ActiveScanResults[i].PANID.Val == rxMessage.SourcePANID.Val) &&
    b2ca:	2800      	cmp	r0, #0
    b2cc:	d0ee      	beq.n	b2ac <P2PTasks+0x4c8>
                                    if( i == ActiveScanResultIndex && (i < ACTIVE_SCAN_RESULT_SIZE))
    b2ce:	45a2      	cmp	sl, r4
    b2d0:	d1e9      	bne.n	b2a6 <P2PTasks+0x4c2>
    b2d2:	2c03      	cmp	r4, #3
    b2d4:	d8e7      	bhi.n	b2a6 <P2PTasks+0x4c2>
                                        ActiveScanResults[ActiveScanResultIndex].Channel = currentChannel;
    b2d6:	497d      	ldr	r1, [pc, #500]	; (b4cc <P2PTasks+0x6e8>)
    b2d8:	4653      	mov	r3, sl
    b2da:	011b      	lsls	r3, r3, #4
    b2dc:	4a7c      	ldr	r2, [pc, #496]	; (b4d0 <P2PTasks+0x6ec>)
    b2de:	7812      	ldrb	r2, [r2, #0]
    b2e0:	545a      	strb	r2, [r3, r1]
                                        ActiveScanResults[ActiveScanResultIndex].RSSIValue = rxMessage.PacketRSSI;
    b2e2:	18ca      	adds	r2, r1, r3
    b2e4:	4648      	mov	r0, r9
    b2e6:	7310      	strb	r0, [r2, #12]
                                        ActiveScanResults[ActiveScanResultIndex].LQIValue = rxMessage.PacketLQI;
    b2e8:	4640      	mov	r0, r8
    b2ea:	7350      	strb	r0, [r2, #13]
                                            ActiveScanResults[ActiveScanResultIndex].PANID.Val = rxMessage.SourcePANID.Val;
    b2ec:	8157      	strh	r7, [r2, #10]
                                            ActiveScanResults[ActiveScanResultIndex].Address[i] = rxMessage.SourceAddress[i];
    b2ee:	4a6b      	ldr	r2, [pc, #428]	; (b49c <P2PTasks+0x6b8>)
    b2f0:	6852      	ldr	r2, [r2, #4]
    b2f2:	3301      	adds	r3, #1
    b2f4:	185b      	adds	r3, r3, r1
    b2f6:	0010      	movs	r0, r2
    b2f8:	3008      	adds	r0, #8
    b2fa:	7811      	ldrb	r1, [r2, #0]
    b2fc:	7019      	strb	r1, [r3, #0]
    b2fe:	3201      	adds	r2, #1
    b300:	3301      	adds	r3, #1
                                        for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    b302:	4290      	cmp	r0, r2
    b304:	d1f9      	bne.n	b2fa <P2PTasks+0x516>
                                        ActiveScanResults[ActiveScanResultIndex].Capability.Val = rxMessage.Payload[1];
    b306:	786a      	ldrb	r2, [r5, #1]
    b308:	4653      	mov	r3, sl
    b30a:	0119      	lsls	r1, r3, #4
    b30c:	4b6f      	ldr	r3, [pc, #444]	; (b4cc <P2PTasks+0x6e8>)
    b30e:	185b      	adds	r3, r3, r1
    b310:	739a      	strb	r2, [r3, #14]
                                                ActiveScanResults[ActiveScanResultIndex].PeerInfo[i] = rxMessage.Payload[2+i];
    b312:	78aa      	ldrb	r2, [r5, #2]
    b314:	73da      	strb	r2, [r3, #15]
                                        ActiveScanResultIndex++;
    b316:	4653      	mov	r3, sl
    b318:	3301      	adds	r3, #1
    b31a:	4a6e      	ldr	r2, [pc, #440]	; (b4d4 <P2PTasks+0x6f0>)
    b31c:	7013      	strb	r3, [r2, #0]
    b31e:	e7c2      	b.n	b2a6 <P2PTasks+0x4c2>
                            if( rxMessage.Payload[1] == STATUS_SUCCESS )
    b320:	786b      	ldrb	r3, [r5, #1]
    b322:	2b00      	cmp	r3, #0
    b324:	d11e      	bne.n	b364 <P2PTasks+0x580>
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    b326:	4b5d      	ldr	r3, [pc, #372]	; (b49c <P2PTasks+0x6b8>)
    b328:	685b      	ldr	r3, [r3, #4]
    b32a:	9306      	str	r3, [sp, #24]
    b32c:	4e5f      	ldr	r6, [pc, #380]	; (b4ac <P2PTasks+0x6c8>)
    b32e:	2700      	movs	r7, #0
                                    if( ConnectionTable[i].status.bits.isValid )
    b330:	0035      	movs	r5, r6
    b332:	e003      	b.n	b33c <P2PTasks+0x558>
    b334:	3701      	adds	r7, #1
    b336:	360a      	adds	r6, #10
                                for(i = 0; i < CONNECTION_SIZE; i++)
    b338:	2f05      	cmp	r7, #5
    b33a:	d013      	beq.n	b364 <P2PTasks+0x580>
                                    if( ConnectionTable[i].status.bits.isValid )
    b33c:	00bb      	lsls	r3, r7, #2
    b33e:	19db      	adds	r3, r3, r7
    b340:	005b      	lsls	r3, r3, #1
    b342:	18eb      	adds	r3, r5, r3
    b344:	7a1b      	ldrb	r3, [r3, #8]
    b346:	09db      	lsrs	r3, r3, #7
    b348:	d0f4      	beq.n	b334 <P2PTasks+0x550>
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    b34a:	0031      	movs	r1, r6
    b34c:	9806      	ldr	r0, [sp, #24]
    b34e:	4b58      	ldr	r3, [pc, #352]	; (b4b0 <P2PTasks+0x6cc>)
    b350:	4798      	blx	r3
    b352:	2800      	cmp	r0, #0
    b354:	d0ee      	beq.n	b334 <P2PTasks+0x550>
                                            ConnectionTable[i].status.Val = 0;
    b356:	00bb      	lsls	r3, r7, #2
    b358:	19dc      	adds	r4, r3, r7
    b35a:	0064      	lsls	r4, r4, #1
    b35c:	4b53      	ldr	r3, [pc, #332]	; (b4ac <P2PTasks+0x6c8>)
    b35e:	191c      	adds	r4, r3, r4
    b360:	2300      	movs	r3, #0
    b362:	7223      	strb	r3, [r4, #8]
                        MiMAC_DiscardPacket();
    b364:	4b4a      	ldr	r3, [pc, #296]	; (b490 <P2PTasks+0x6ac>)
    b366:	4798      	blx	r3
                        break;
    b368:	e070      	b.n	b44c <P2PTasks+0x668>
                            dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_TIME_SYNC_DATA_PACKET));
    b36a:	20e0      	movs	r0, #224	; 0xe0
    b36c:	4b45      	ldr	r3, [pc, #276]	; (b484 <P2PTasks+0x6a0>)
    b36e:	4798      	blx	r3
    b370:	1e04      	subs	r4, r0, #0
                            if (NULL == dataPtr)
    b372:	d100      	bne.n	b376 <P2PTasks+0x592>
    b374:	e560      	b.n	ae38 <P2PTasks+0x54>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    b376:	4b49      	ldr	r3, [pc, #292]	; (b49c <P2PTasks+0x6b8>)
    b378:	685d      	ldr	r5, [r3, #4]
                                if( indirectMessages[i].flags.bits.isValid )
    b37a:	4b57      	ldr	r3, [pc, #348]	; (b4d8 <P2PTasks+0x6f4>)
    b37c:	7b9b      	ldrb	r3, [r3, #14]
    b37e:	07db      	lsls	r3, r3, #31
    b380:	d505      	bpl.n	b38e <P2PTasks+0x5aa>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    b382:	0029      	movs	r1, r5
    b384:	4855      	ldr	r0, [pc, #340]	; (b4dc <P2PTasks+0x6f8>)
    b386:	4b4a      	ldr	r3, [pc, #296]	; (b4b0 <P2PTasks+0x6cc>)
    b388:	4798      	blx	r3
    b38a:	2800      	cmp	r0, #0
    b38c:	d14c      	bne.n	b428 <P2PTasks+0x644>
                                if( indirectMessages[i].flags.bits.isValid )
    b38e:	2391      	movs	r3, #145	; 0x91
    b390:	005b      	lsls	r3, r3, #1
    b392:	4a51      	ldr	r2, [pc, #324]	; (b4d8 <P2PTasks+0x6f4>)
    b394:	5cd3      	ldrb	r3, [r2, r3]
    b396:	07db      	lsls	r3, r3, #31
    b398:	d505      	bpl.n	b3a6 <P2PTasks+0x5c2>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    b39a:	0029      	movs	r1, r5
    b39c:	4850      	ldr	r0, [pc, #320]	; (b4e0 <P2PTasks+0x6fc>)
    b39e:	4b44      	ldr	r3, [pc, #272]	; (b4b0 <P2PTasks+0x6cc>)
    b3a0:	4798      	blx	r3
    b3a2:	2800      	cmp	r0, #0
    b3a4:	d110      	bne.n	b3c8 <P2PTasks+0x5e4>
                                        SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, isCommand, false, 
    b3a6:	4b3d      	ldr	r3, [pc, #244]	; (b49c <P2PTasks+0x6b8>)
    b3a8:	8859      	ldrh	r1, [r3, #2]
    b3aa:	4b4e      	ldr	r3, [pc, #312]	; (b4e4 <P2PTasks+0x700>)
    b3ac:	9305      	str	r3, [sp, #20]
    b3ae:	2300      	movs	r3, #0
    b3b0:	9304      	str	r3, [sp, #16]
    b3b2:	9303      	str	r3, [sp, #12]
    b3b4:	9402      	str	r4, [sp, #8]
    b3b6:	9301      	str	r3, [sp, #4]
    b3b8:	9300      	str	r3, [sp, #0]
    b3ba:	002a      	movs	r2, r5
    b3bc:	2000      	movs	r0, #0
    b3be:	4c39      	ldr	r4, [pc, #228]	; (b4a4 <P2PTasks+0x6c0>)
    b3c0:	47a0      	blx	r4
                            MiMAC_DiscardPacket();
    b3c2:	4b33      	ldr	r3, [pc, #204]	; (b490 <P2PTasks+0x6ac>)
    b3c4:	4798      	blx	r3
                        break;
    b3c6:	e041      	b.n	b44c <P2PTasks+0x668>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    b3c8:	4a45      	ldr	r2, [pc, #276]	; (b4e0 <P2PTasks+0x6fc>)
                                if( indirectMessages[i].flags.bits.isValid )
    b3ca:	2001      	movs	r0, #1
                                        for(j = 0; j < indirectMessages[i].PayLoadSize; j++)
    b3cc:	218a      	movs	r1, #138	; 0x8a
    b3ce:	0049      	lsls	r1, r1, #1
    b3d0:	4341      	muls	r1, r0
    b3d2:	4b41      	ldr	r3, [pc, #260]	; (b4d8 <P2PTasks+0x6f4>)
    b3d4:	185b      	adds	r3, r3, r1
    b3d6:	7bdb      	ldrb	r3, [r3, #15]
    b3d8:	2b00      	cmp	r3, #0
    b3da:	d00e      	beq.n	b3fa <P2PTasks+0x616>
    b3dc:	2600      	movs	r6, #0
                                            dataPtr[dataLen++] =indirectMessages[i].PayLoad[j];
    b3de:	000b      	movs	r3, r1
    b3e0:	493d      	ldr	r1, [pc, #244]	; (b4d8 <P2PTasks+0x6f4>)
    b3e2:	18c9      	adds	r1, r1, r3
                                        for(j = 0; j < indirectMessages[i].PayLoadSize; j++)
    b3e4:	000f      	movs	r7, r1
    b3e6:	370f      	adds	r7, #15
                                            dataPtr[dataLen++] =indirectMessages[i].PayLoad[j];
    b3e8:	1c73      	adds	r3, r6, #1
    b3ea:	b2db      	uxtb	r3, r3
    b3ec:	198d      	adds	r5, r1, r6
    b3ee:	7c2d      	ldrb	r5, [r5, #16]
    b3f0:	55a5      	strb	r5, [r4, r6]
    b3f2:	001e      	movs	r6, r3
                                        for(j = 0; j < indirectMessages[i].PayLoadSize; j++)
    b3f4:	783d      	ldrb	r5, [r7, #0]
    b3f6:	429d      	cmp	r5, r3
    b3f8:	d8f6      	bhi.n	b3e8 <P2PTasks+0x604>
                                            SendPacket(false, indirectMessages[i].DestPANID, indirectMessages[i].DestAddress.DestLongAddress, isCommand, (bool)indirectMessages[i].flags.bits.isSecured,
    b3fa:	258a      	movs	r5, #138	; 0x8a
    b3fc:	006d      	lsls	r5, r5, #1
    b3fe:	4368      	muls	r0, r5
    b400:	4d35      	ldr	r5, [pc, #212]	; (b4d8 <P2PTasks+0x6f4>)
    b402:	182d      	adds	r5, r5, r0
    b404:	88a9      	ldrh	r1, [r5, #4]
    b406:	4837      	ldr	r0, [pc, #220]	; (b4e4 <P2PTasks+0x700>)
    b408:	9005      	str	r0, [sp, #20]
    b40a:	2600      	movs	r6, #0
    b40c:	9604      	str	r6, [sp, #16]
    b40e:	9603      	str	r6, [sp, #12]
    b410:	9402      	str	r4, [sp, #8]
    b412:	9301      	str	r3, [sp, #4]
    b414:	7bab      	ldrb	r3, [r5, #14]
    b416:	071b      	lsls	r3, r3, #28
    b418:	0fdb      	lsrs	r3, r3, #31
    b41a:	9300      	str	r3, [sp, #0]
    b41c:	2300      	movs	r3, #0
    b41e:	2000      	movs	r0, #0
    b420:	4c20      	ldr	r4, [pc, #128]	; (b4a4 <P2PTasks+0x6c0>)
    b422:	47a0      	blx	r4
                                        indirectMessages[i].flags.Val = 0;   
    b424:	73ae      	strb	r6, [r5, #14]
                                        goto END_OF_SENDING_INDIRECT_MESSAGE;    
    b426:	e7cc      	b.n	b3c2 <P2PTasks+0x5de>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    b428:	4a2c      	ldr	r2, [pc, #176]	; (b4dc <P2PTasks+0x6f8>)
                                if( indirectMessages[i].flags.bits.isValid )
    b42a:	2000      	movs	r0, #0
    b42c:	e7ce      	b.n	b3cc <P2PTasks+0x5e8>
            P2PStatus.bits.RxHasUserData = 1;
    b42e:	4c26      	ldr	r4, [pc, #152]	; (b4c8 <P2PTasks+0x6e4>)
    b430:	7823      	ldrb	r3, [r4, #0]
    b432:	2208      	movs	r2, #8
    b434:	4313      	orrs	r3, r2
    b436:	7023      	strb	r3, [r4, #0]
			pktRxcallback(&rxMessage);
    b438:	4b2b      	ldr	r3, [pc, #172]	; (b4e8 <P2PTasks+0x704>)
    b43a:	681b      	ldr	r3, [r3, #0]
    b43c:	4817      	ldr	r0, [pc, #92]	; (b49c <P2PTasks+0x6b8>)
    b43e:	4798      	blx	r3
			P2PStatus.bits.RxHasUserData = 0;
    b440:	7823      	ldrb	r3, [r4, #0]
    b442:	2208      	movs	r2, #8
    b444:	4393      	bics	r3, r2
    b446:	7023      	strb	r3, [r4, #0]
			MiMAC_DiscardPacket();
    b448:	4b11      	ldr	r3, [pc, #68]	; (b490 <P2PTasks+0x6ac>)
    b44a:	4798      	blx	r3
        if( rxMessage.PayloadSize == 0  || P2PStatus.bits.SearchConnection || P2PStatus.bits.Resync )
    b44c:	4b13      	ldr	r3, [pc, #76]	; (b49c <P2PTasks+0x6b8>)
    b44e:	7b1b      	ldrb	r3, [r3, #12]
    b450:	2b00      	cmp	r3, #0
    b452:	d008      	beq.n	b466 <P2PTasks+0x682>
    b454:	4b1c      	ldr	r3, [pc, #112]	; (b4c8 <P2PTasks+0x6e4>)
    b456:	781b      	ldrb	r3, [r3, #0]
    b458:	06db      	lsls	r3, r3, #27
    b45a:	d404      	bmi.n	b466 <P2PTasks+0x682>
    b45c:	4b1a      	ldr	r3, [pc, #104]	; (b4c8 <P2PTasks+0x6e4>)
    b45e:	781b      	ldrb	r3, [r3, #0]
    b460:	069b      	lsls	r3, r3, #26
    b462:	d400      	bmi.n	b466 <P2PTasks+0x682>
    b464:	e4e8      	b.n	ae38 <P2PTasks+0x54>
            P2PStatus.bits.RxHasUserData = 0;
    b466:	4a18      	ldr	r2, [pc, #96]	; (b4c8 <P2PTasks+0x6e4>)
    b468:	7813      	ldrb	r3, [r2, #0]
    b46a:	2108      	movs	r1, #8
    b46c:	438b      	bics	r3, r1
    b46e:	7013      	strb	r3, [r2, #0]
            MiMAC_DiscardPacket();
    b470:	4b07      	ldr	r3, [pc, #28]	; (b490 <P2PTasks+0x6ac>)
    b472:	4798      	blx	r3
    b474:	e4e0      	b.n	ae38 <P2PTasks+0x54>
                                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    b476:	4b1d      	ldr	r3, [pc, #116]	; (b4ec <P2PTasks+0x708>)
    b478:	781b      	ldrb	r3, [r3, #0]
    b47a:	2b01      	cmp	r3, #1
    b47c:	d100      	bne.n	b480 <P2PTasks+0x69c>
    b47e:	e609      	b.n	b094 <P2PTasks+0x2b0>
                                        status = STATUS_NOT_SAME_PAN;
    b480:	25f2      	movs	r5, #242	; 0xf2
    b482:	e5c9      	b.n	b018 <P2PTasks+0x234>
    b484:	0000b8a5 	.word	0x0000b8a5
    b488:	20002859 	.word	0x20002859
    b48c:	20000018 	.word	0x20000018
    b490:	000098b9 	.word	0x000098b9
    b494:	0000a44d 	.word	0x0000a44d
    b498:	0000471d 	.word	0x0000471d
    b49c:	20002af0 	.word	0x20002af0
    b4a0:	0000a489 	.word	0x0000a489
    b4a4:	0000a5f5 	.word	0x0000a5f5
    b4a8:	000046f1 	.word	0x000046f1
    b4ac:	2000280c 	.word	0x2000280c
    b4b0:	0000a6c9 	.word	0x0000a6c9
    b4b4:	20002860 	.word	0x20002860
    b4b8:	2000285c 	.word	0x2000285c
    b4bc:	0000ffff 	.word	0x0000ffff
    b4c0:	0000ab45 	.word	0x0000ab45
    b4c4:	000090a5 	.word	0x000090a5
    b4c8:	20002880 	.word	0x20002880
    b4cc:	20002ab0 	.word	0x20002ab0
    b4d0:	2000001d 	.word	0x2000001d
    b4d4:	20002b00 	.word	0x20002b00
    b4d8:	20002884 	.word	0x20002884
    b4dc:	2000288a 	.word	0x2000288a
    b4e0:	2000299e 	.word	0x2000299e
    b4e4:	000075c5 	.word	0x000075c5
    b4e8:	2000049c 	.word	0x2000049c
    b4ec:	2000001c 	.word	0x2000001c
                            MiMAC_DiscardPacket();
    b4f0:	4b0d      	ldr	r3, [pc, #52]	; (b528 <P2PTasks+0x744>)
    b4f2:	4798      	blx	r3
                            dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_RESPONSE;
    b4f4:	2301      	movs	r3, #1
                                dataPtr[dataLen++] = STATUS_ENTRY_NOT_EXIST;
    b4f6:	1c5c      	adds	r4, r3, #1
    b4f8:	22f0      	movs	r2, #240	; 0xf0
    b4fa:	4641      	mov	r1, r8
    b4fc:	54ca      	strb	r2, [r1, r3]
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn, 
    b4fe:	4b0b      	ldr	r3, [pc, #44]	; (b52c <P2PTasks+0x748>)
    b500:	685a      	ldr	r2, [r3, #4]
    b502:	8859      	ldrh	r1, [r3, #2]
    b504:	480a      	ldr	r0, [pc, #40]	; (b530 <P2PTasks+0x74c>)
    b506:	9005      	str	r0, [sp, #20]
    b508:	2001      	movs	r0, #1
    b50a:	9004      	str	r0, [sp, #16]
    b50c:	2000      	movs	r0, #0
    b50e:	9003      	str	r0, [sp, #12]
    b510:	4640      	mov	r0, r8
    b512:	9002      	str	r0, [sp, #8]
    b514:	9401      	str	r4, [sp, #4]
    b516:	781b      	ldrb	r3, [r3, #0]
    b518:	071b      	lsls	r3, r3, #28
    b51a:	0fdb      	lsrs	r3, r3, #31
    b51c:	9300      	str	r3, [sp, #0]
    b51e:	2301      	movs	r3, #1
    b520:	2000      	movs	r0, #0
    b522:	4c04      	ldr	r4, [pc, #16]	; (b534 <P2PTasks+0x750>)
    b524:	47a0      	blx	r4
                            break;
    b526:	e791      	b.n	b44c <P2PTasks+0x668>
    b528:	000098b9 	.word	0x000098b9
    b52c:	20002af0 	.word	0x20002af0
    b530:	0000a489 	.word	0x0000a489
    b534:	0000a5f5 	.word	0x0000a5f5

0000b538 <MiApp_EstablishConnection>:
    {
    b538:	b5f0      	push	{r4, r5, r6, r7, lr}
    b53a:	46de      	mov	lr, fp
    b53c:	4657      	mov	r7, sl
    b53e:	464e      	mov	r6, r9
    b540:	4645      	mov	r5, r8
    b542:	b5e0      	push	{r5, r6, r7, lr}
    b544:	b08b      	sub	sp, #44	; 0x2c
    b546:	0016      	movs	r6, r2
    b548:	231f      	movs	r3, #31
    b54a:	aa02      	add	r2, sp, #8
    b54c:	4694      	mov	ip, r2
    b54e:	4463      	add	r3, ip
    b550:	7018      	strb	r0, [r3, #0]
        uint8_t    tmpConnectionMode = ConnMode;
    b552:	4c61      	ldr	r4, [pc, #388]	; (b6d8 <MiApp_EstablishConnection+0x1a0>)
    b554:	7823      	ldrb	r3, [r4, #0]
    b556:	9308      	str	r3, [sp, #32]
        tick1.Val = MiWi_TickGet();
    b558:	4d60      	ldr	r5, [pc, #384]	; (b6dc <MiApp_EstablishConnection+0x1a4>)
    b55a:	47a8      	blx	r5
    b55c:	4b60      	ldr	r3, [pc, #384]	; (b6e0 <MiApp_EstablishConnection+0x1a8>)
    b55e:	6018      	str	r0, [r3, #0]
        t1.Val = MiWi_TickGet();
    b560:	47a8      	blx	r5
        t1.Val -= (ONE_SECOND);
    b562:	4b60      	ldr	r3, [pc, #384]	; (b6e4 <MiApp_EstablishConnection+0x1ac>)
    b564:	18c5      	adds	r5, r0, r3
        ConnMode = ENABLE_ALL_CONN;
    b566:	2300      	movs	r3, #0
    b568:	7023      	strb	r3, [r4, #0]
        P2PStatus.bits.SearchConnection = 1;
    b56a:	4a5f      	ldr	r2, [pc, #380]	; (b6e8 <MiApp_EstablishConnection+0x1b0>)
    b56c:	7813      	ldrb	r3, [r2, #0]
    b56e:	2110      	movs	r1, #16
    b570:	430b      	orrs	r3, r1
    b572:	7013      	strb	r3, [r2, #0]
        EstConfCallback = ConfCallback;
    b574:	4b5d      	ldr	r3, [pc, #372]	; (b6ec <MiApp_EstablishConnection+0x1b4>)
    b576:	9a14      	ldr	r2, [sp, #80]	; 0x50
    b578:	601a      	str	r2, [r3, #0]
        uint8_t    connectionInterval = 0;
    b57a:	2400      	movs	r4, #0
        uint8_t    retry = CONNECTION_RETRY_TIMES;
    b57c:	2703      	movs	r7, #3
        while( P2PStatus.bits.SearchConnection )
    b57e:	4b5a      	ldr	r3, [pc, #360]	; (b6e8 <MiApp_EstablishConnection+0x1b0>)
    b580:	4699      	mov	r9, r3
            t2.Val = MiWi_TickGet();
    b582:	4b56      	ldr	r3, [pc, #344]	; (b6dc <MiApp_EstablishConnection+0x1a4>)
    b584:	4698      	mov	r8, r3
    b586:	002b      	movs	r3, r5
    b588:	003d      	movs	r5, r7
    b58a:	001f      	movs	r7, r3
        while( P2PStatus.bits.SearchConnection )
    b58c:	e08c      	b.n	b6a8 <MiApp_EstablishConnection+0x170>
                if( retry-- == 0 )
    b58e:	1e6b      	subs	r3, r5, #1
    b590:	b2db      	uxtb	r3, r3
    b592:	9307      	str	r3, [sp, #28]
    b594:	2d00      	cmp	r5, #0
    b596:	d02d      	beq.n	b5f4 <MiApp_EstablishConnection+0xbc>
                MiApp_Set(CHANNEL, &Channel);
    b598:	211f      	movs	r1, #31
    b59a:	ab02      	add	r3, sp, #8
    b59c:	469c      	mov	ip, r3
    b59e:	4461      	add	r1, ip
    b5a0:	2000      	movs	r0, #0
    b5a2:	4b53      	ldr	r3, [pc, #332]	; (b6f0 <MiApp_EstablishConnection+0x1b8>)
    b5a4:	4798      	blx	r3
                dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_CONNECTION_REQUEST));
    b5a6:	2010      	movs	r0, #16
    b5a8:	4b52      	ldr	r3, [pc, #328]	; (b6f4 <MiApp_EstablishConnection+0x1bc>)
    b5aa:	4798      	blx	r3
    b5ac:	1e07      	subs	r7, r0, #0
                if (NULL == dataPtr)
    b5ae:	d045      	beq.n	b63c <MiApp_EstablishConnection+0x104>
                dataPtr[dataLen++] = CMD_P2P_CONNECTION_REQUEST;
    b5b0:	2381      	movs	r3, #129	; 0x81
    b5b2:	7003      	strb	r3, [r0, #0]
                dataPtr[dataLen++] = currentChannel;
    b5b4:	4b50      	ldr	r3, [pc, #320]	; (b6f8 <MiApp_EstablishConnection+0x1c0>)
    b5b6:	781b      	ldrb	r3, [r3, #0]
    b5b8:	7043      	strb	r3, [r0, #1]
                dataPtr[dataLen++] = P2PCapacityInfo;
    b5ba:	4b50      	ldr	r3, [pc, #320]	; (b6fc <MiApp_EstablishConnection+0x1c4>)
    b5bc:	781b      	ldrb	r3, [r3, #0]
    b5be:	7083      	strb	r3, [r0, #2]
                            dataPtr[dataLen++] = AdditionalNodeID[i];
    b5c0:	4b4f      	ldr	r3, [pc, #316]	; (b700 <MiApp_EstablishConnection+0x1c8>)
    b5c2:	781b      	ldrb	r3, [r3, #0]
    b5c4:	70c3      	strb	r3, [r0, #3]
                        uint16_t DestinationAddress16 = ((addr[1] << 8) + addr[0]);	
    b5c6:	7872      	ldrb	r2, [r6, #1]
    b5c8:	0212      	lsls	r2, r2, #8
    b5ca:	7833      	ldrb	r3, [r6, #0]
    b5cc:	189b      	adds	r3, r3, r2
                        if( DestinationAddress16 == 0xFFFF )
    b5ce:	b29b      	uxth	r3, r3
    b5d0:	4a4c      	ldr	r2, [pc, #304]	; (b704 <MiApp_EstablishConnection+0x1cc>)
    b5d2:	4293      	cmp	r3, r2
    b5d4:	d015      	beq.n	b602 <MiApp_EstablishConnection+0xca>
							MiApp_Set(CHANNEL, &Channel);
    b5d6:	211f      	movs	r1, #31
    b5d8:	ab02      	add	r3, sp, #8
    b5da:	469c      	mov	ip, r3
    b5dc:	4461      	add	r1, ip
    b5de:	2000      	movs	r0, #0
    b5e0:	4b43      	ldr	r3, [pc, #268]	; (b6f0 <MiApp_EstablishConnection+0x1b8>)
    b5e2:	4798      	blx	r3
								  if (addr[j] != ActiveScanResults[i].Address[j])
    b5e4:	7833      	ldrb	r3, [r6, #0]
    b5e6:	469b      	mov	fp, r3
    b5e8:	4b47      	ldr	r3, [pc, #284]	; (b708 <MiApp_EstablishConnection+0x1d0>)
    b5ea:	0035      	movs	r5, r6
    b5ec:	3508      	adds	r5, #8
    b5ee:	46bc      	mov	ip, r7
    b5f0:	001f      	movs	r7, r3
    b5f2:	e030      	b.n	b656 <MiApp_EstablishConnection+0x11e>
                    P2PStatus.bits.SearchConnection = 0;
    b5f4:	4a3c      	ldr	r2, [pc, #240]	; (b6e8 <MiApp_EstablishConnection+0x1b0>)
    b5f6:	7813      	ldrb	r3, [r2, #0]
    b5f8:	2110      	movs	r1, #16
    b5fa:	438b      	bics	r3, r1
    b5fc:	7013      	strb	r3, [r2, #0]
                    return 0xFF;
    b5fe:	24ff      	movs	r4, #255	; 0xff
    b600:	e01c      	b.n	b63c <MiApp_EstablishConnection+0x104>
                            SendPacket(true, myPANID, NULL, true, false, dataLen, dataPtr,0, true, CommandConfCallback);
    b602:	4b42      	ldr	r3, [pc, #264]	; (b70c <MiApp_EstablishConnection+0x1d4>)
    b604:	8819      	ldrh	r1, [r3, #0]
    b606:	4b42      	ldr	r3, [pc, #264]	; (b710 <MiApp_EstablishConnection+0x1d8>)
    b608:	9305      	str	r3, [sp, #20]
    b60a:	2301      	movs	r3, #1
    b60c:	9304      	str	r3, [sp, #16]
    b60e:	2300      	movs	r3, #0
    b610:	9303      	str	r3, [sp, #12]
    b612:	9002      	str	r0, [sp, #8]
    b614:	2204      	movs	r2, #4
    b616:	9201      	str	r2, [sp, #4]
    b618:	9300      	str	r3, [sp, #0]
    b61a:	3301      	adds	r3, #1
    b61c:	2200      	movs	r2, #0
    b61e:	2001      	movs	r0, #1
    b620:	4c3c      	ldr	r4, [pc, #240]	; (b714 <MiApp_EstablishConnection+0x1dc>)
    b622:	47a0      	blx	r4
                t1.Val = t2.Val;
    b624:	9f06      	ldr	r7, [sp, #24]
                if( retry-- == 0 )
    b626:	9d07      	ldr	r5, [sp, #28]
                connectionInterval = CONNECTION_INTERVAL-1;
    b628:	2403      	movs	r4, #3
    b62a:	e039      	b.n	b6a0 <MiApp_EstablishConnection+0x168>
        ConnMode = tmpConnectionMode;
    b62c:	4b2a      	ldr	r3, [pc, #168]	; (b6d8 <MiApp_EstablishConnection+0x1a0>)
    b62e:	466a      	mov	r2, sp
    b630:	2120      	movs	r1, #32
    b632:	1852      	adds	r2, r2, r1
    b634:	7812      	ldrb	r2, [r2, #0]
    b636:	701a      	strb	r2, [r3, #0]
        return LatestConnection;
    b638:	4b37      	ldr	r3, [pc, #220]	; (b718 <MiApp_EstablishConnection+0x1e0>)
    b63a:	781c      	ldrb	r4, [r3, #0]
    }
    b63c:	0020      	movs	r0, r4
    b63e:	b00b      	add	sp, #44	; 0x2c
    b640:	bc3c      	pop	{r2, r3, r4, r5}
    b642:	4690      	mov	r8, r2
    b644:	4699      	mov	r9, r3
    b646:	46a2      	mov	sl, r4
    b648:	46ab      	mov	fp, r5
    b64a:	bdf0      	pop	{r4, r5, r6, r7, pc}
							for(i = 0; i < ACTIVE_SCAN_RESULT_SIZE; i++)
    b64c:	3401      	adds	r4, #1
    b64e:	b2e4      	uxtb	r4, r4
    b650:	3710      	adds	r7, #16
    b652:	2c04      	cmp	r4, #4
    b654:	d03b      	beq.n	b6ce <MiApp_EstablishConnection+0x196>
								  if (addr[j] != ActiveScanResults[i].Address[j])
    b656:	787b      	ldrb	r3, [r7, #1]
    b658:	455b      	cmp	r3, fp
    b65a:	d1f7      	bne.n	b64c <MiApp_EstablishConnection+0x114>
    b65c:	1c73      	adds	r3, r6, #1
    b65e:	1cba      	adds	r2, r7, #2
    b660:	7818      	ldrb	r0, [r3, #0]
    b662:	7811      	ldrb	r1, [r2, #0]
    b664:	4288      	cmp	r0, r1
    b666:	d1f1      	bne.n	b64c <MiApp_EstablishConnection+0x114>
    b668:	3301      	adds	r3, #1
    b66a:	3201      	adds	r2, #1
								for(j = 0; j < MY_ADDRESS_LENGTH; j++)
    b66c:	42ab      	cmp	r3, r5
    b66e:	d1f7      	bne.n	b660 <MiApp_EstablishConnection+0x128>
    b670:	4667      	mov	r7, ip
								SendPacket(false, ActiveScanResults[i].PANID, ActiveScanResults[i].Address, true, false, 
    b672:	0124      	lsls	r4, r4, #4
    b674:	1c62      	adds	r2, r4, #1
    b676:	4b24      	ldr	r3, [pc, #144]	; (b708 <MiApp_EstablishConnection+0x1d0>)
    b678:	18d2      	adds	r2, r2, r3
    b67a:	191b      	adds	r3, r3, r4
    b67c:	8959      	ldrh	r1, [r3, #10]
    b67e:	4b24      	ldr	r3, [pc, #144]	; (b710 <MiApp_EstablishConnection+0x1d8>)
    b680:	9305      	str	r3, [sp, #20]
    b682:	2301      	movs	r3, #1
    b684:	9304      	str	r3, [sp, #16]
    b686:	2300      	movs	r3, #0
    b688:	9303      	str	r3, [sp, #12]
    b68a:	9702      	str	r7, [sp, #8]
    b68c:	2004      	movs	r0, #4
    b68e:	9001      	str	r0, [sp, #4]
    b690:	9300      	str	r3, [sp, #0]
    b692:	3301      	adds	r3, #1
    b694:	2000      	movs	r0, #0
    b696:	4c1f      	ldr	r4, [pc, #124]	; (b714 <MiApp_EstablishConnection+0x1dc>)
    b698:	47a0      	blx	r4
                t1.Val = t2.Val;
    b69a:	9f06      	ldr	r7, [sp, #24]
                if( retry-- == 0 )
    b69c:	9d07      	ldr	r5, [sp, #28]
                connectionInterval = CONNECTION_INTERVAL-1;
    b69e:	2403      	movs	r4, #3
            P2PTasks();
    b6a0:	4b1e      	ldr	r3, [pc, #120]	; (b71c <MiApp_EstablishConnection+0x1e4>)
    b6a2:	4798      	blx	r3
			SYSTEM_RunTasks();
    b6a4:	4b1e      	ldr	r3, [pc, #120]	; (b720 <MiApp_EstablishConnection+0x1e8>)
    b6a6:	4798      	blx	r3
        while( P2PStatus.bits.SearchConnection )
    b6a8:	464b      	mov	r3, r9
    b6aa:	781b      	ldrb	r3, [r3, #0]
    b6ac:	06db      	lsls	r3, r3, #27
    b6ae:	d5bd      	bpl.n	b62c <MiApp_EstablishConnection+0xf4>
            t2.Val = MiWi_TickGet();
    b6b0:	47c0      	blx	r8
            if( MiWi_TickGetDiff(t2, t1) > (ONE_SECOND) )
    b6b2:	0039      	movs	r1, r7
    b6b4:	9006      	str	r0, [sp, #24]
    b6b6:	4b1b      	ldr	r3, [pc, #108]	; (b724 <MiApp_EstablishConnection+0x1ec>)
    b6b8:	4798      	blx	r3
    b6ba:	4b1b      	ldr	r3, [pc, #108]	; (b728 <MiApp_EstablishConnection+0x1f0>)
    b6bc:	4298      	cmp	r0, r3
    b6be:	d9ef      	bls.n	b6a0 <MiApp_EstablishConnection+0x168>
                if( connectionInterval-- > 0 )
    b6c0:	2c00      	cmp	r4, #0
    b6c2:	d100      	bne.n	b6c6 <MiApp_EstablishConnection+0x18e>
    b6c4:	e763      	b.n	b58e <MiApp_EstablishConnection+0x56>
    b6c6:	3c01      	subs	r4, #1
    b6c8:	b2e4      	uxtb	r4, r4
                t1.Val = t2.Val;
    b6ca:	9f06      	ldr	r7, [sp, #24]
    b6cc:	e7ec      	b.n	b6a8 <MiApp_EstablishConnection+0x170>
    b6ce:	9f06      	ldr	r7, [sp, #24]
                if( retry-- == 0 )
    b6d0:	9d07      	ldr	r5, [sp, #28]
                connectionInterval = CONNECTION_INTERVAL-1;
    b6d2:	3c01      	subs	r4, #1
    b6d4:	e7e4      	b.n	b6a0 <MiApp_EstablishConnection+0x168>
    b6d6:	46c0      	nop			; (mov r8, r8)
    b6d8:	2000001c 	.word	0x2000001c
    b6dc:	0000bae5 	.word	0x0000bae5
    b6e0:	20002aac 	.word	0x20002aac
    b6e4:	fff0bdc0 	.word	0xfff0bdc0
    b6e8:	20002880 	.word	0x20002880
    b6ec:	20002860 	.word	0x20002860
    b6f0:	0000a825 	.word	0x0000a825
    b6f4:	0000b8a5 	.word	0x0000b8a5
    b6f8:	2000001d 	.word	0x2000001d
    b6fc:	20002859 	.word	0x20002859
    b700:	20000018 	.word	0x20000018
    b704:	0000ffff 	.word	0x0000ffff
    b708:	20002ab0 	.word	0x20002ab0
    b70c:	2000285c 	.word	0x2000285c
    b710:	0000a489 	.word	0x0000a489
    b714:	0000a5f5 	.word	0x0000a5f5
    b718:	20002808 	.word	0x20002808
    b71c:	0000ade5 	.word	0x0000ade5
    b720:	0000ccbd 	.word	0x0000ccbd
    b724:	0000bb45 	.word	0x0000bb45
    b728:	000f4240 	.word	0x000f4240

0000b72c <MiApp_SearchConnection>:
    {
    b72c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b72e:	46d6      	mov	lr, sl
    b730:	464f      	mov	r7, r9
    b732:	4646      	mov	r6, r8
    b734:	b5c0      	push	{r6, r7, lr}
    b736:	b08a      	sub	sp, #40	; 0x28
    b738:	4690      	mov	r8, r2
        uint8_t backupChannel = currentChannel;
    b73a:	4b3d      	ldr	r3, [pc, #244]	; (b830 <MiApp_SearchConnection+0x104>)
    b73c:	781a      	ldrb	r2, [r3, #0]
    b73e:	231e      	movs	r3, #30
    b740:	ac02      	add	r4, sp, #8
    b742:	46a4      	mov	ip, r4
    b744:	4463      	add	r3, ip
    b746:	701a      	strb	r2, [r3, #0]
            ActiveScanResults[i].Channel = 0xFF;
    b748:	4b3a      	ldr	r3, [pc, #232]	; (b834 <MiApp_SearchConnection+0x108>)
    b74a:	22ff      	movs	r2, #255	; 0xff
    b74c:	701a      	strb	r2, [r3, #0]
    b74e:	741a      	strb	r2, [r3, #16]
    b750:	2420      	movs	r4, #32
    b752:	551a      	strb	r2, [r3, r4]
    b754:	3410      	adds	r4, #16
    b756:	551a      	strb	r2, [r3, r4]
        ActiveScanResultIndex = 0;
    b758:	2300      	movs	r3, #0
    b75a:	4a37      	ldr	r2, [pc, #220]	; (b838 <MiApp_SearchConnection+0x10c>)
    b75c:	7013      	strb	r3, [r2, #0]
        i = 0;
    b75e:	221f      	movs	r2, #31
    b760:	4462      	add	r2, ip
    b762:	7013      	strb	r3, [r2, #0]
		scan_symbols =   ABASESUPERFRAMEDURATION *((1<<scan_duration) + 1);
    b764:	3301      	adds	r3, #1
    b766:	4083      	lsls	r3, r0
    b768:	3301      	adds	r3, #1
    b76a:	011d      	lsls	r5, r3, #4
    b76c:	1aeb      	subs	r3, r5, r3
    b76e:	019b      	lsls	r3, r3, #6
		return SYMBOLS_TO_TICKS(scan_symbols);
    b770:	25fa      	movs	r5, #250	; 0xfa
    b772:	00ad      	lsls	r5, r5, #2
    b774:	435d      	muls	r5, r3
    b776:	2300      	movs	r3, #0
            if( ChannelMap & FULL_CHANNEL_MAP & (channelMask << i) )
    b778:	2603      	movs	r6, #3
    b77a:	400e      	ands	r6, r1
    b77c:	46b2      	mov	sl, r6
                printf("\r\nScan Channel ");
    b77e:	4a2f      	ldr	r2, [pc, #188]	; (b83c <MiApp_SearchConnection+0x110>)
    b780:	4691      	mov	r9, r2
    b782:	e009      	b.n	b798 <MiApp_SearchConnection+0x6c>
            i++;
    b784:	221f      	movs	r2, #31
    b786:	ab02      	add	r3, sp, #8
    b788:	469c      	mov	ip, r3
    b78a:	4462      	add	r2, ip
    b78c:	7813      	ldrb	r3, [r2, #0]
    b78e:	3301      	adds	r3, #1
    b790:	b2db      	uxtb	r3, r3
    b792:	7013      	strb	r3, [r2, #0]
        while( i < 32 )
    b794:	2b1f      	cmp	r3, #31
    b796:	d83b      	bhi.n	b810 <MiApp_SearchConnection+0xe4>
            if( ChannelMap & FULL_CHANNEL_MAP & (channelMask << i) )
    b798:	2201      	movs	r2, #1
    b79a:	409a      	lsls	r2, r3
    b79c:	4653      	mov	r3, sl
    b79e:	421a      	tst	r2, r3
    b7a0:	d0f0      	beq.n	b784 <MiApp_SearchConnection+0x58>
                printf("\r\nScan Channel ");
    b7a2:	4827      	ldr	r0, [pc, #156]	; (b840 <MiApp_SearchConnection+0x114>)
    b7a4:	47c8      	blx	r9
                printf("%d",i);
    b7a6:	241f      	movs	r4, #31
    b7a8:	ab02      	add	r3, sp, #8
    b7aa:	469c      	mov	ip, r3
    b7ac:	4464      	add	r4, ip
    b7ae:	7821      	ldrb	r1, [r4, #0]
    b7b0:	4824      	ldr	r0, [pc, #144]	; (b844 <MiApp_SearchConnection+0x118>)
    b7b2:	47c8      	blx	r9
                MiApp_Set(CHANNEL, &i);
    b7b4:	0021      	movs	r1, r4
    b7b6:	2000      	movs	r0, #0
    b7b8:	4b23      	ldr	r3, [pc, #140]	; (b848 <MiApp_SearchConnection+0x11c>)
    b7ba:	4798      	blx	r3
                dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_ACTIVE_SCAN_REQUEST));
    b7bc:	2010      	movs	r0, #16
    b7be:	4b23      	ldr	r3, [pc, #140]	; (b84c <MiApp_SearchConnection+0x120>)
    b7c0:	4798      	blx	r3
                if (NULL == dataPtr)
    b7c2:	2800      	cmp	r0, #0
    b7c4:	d02e      	beq.n	b824 <MiApp_SearchConnection+0xf8>
                dataPtr[dataLen++] = CMD_P2P_ACTIVE_SCAN_REQUEST;
    b7c6:	2387      	movs	r3, #135	; 0x87
    b7c8:	7003      	strb	r3, [r0, #0]
                dataPtr[dataLen++] = currentChannel;
    b7ca:	4b19      	ldr	r3, [pc, #100]	; (b830 <MiApp_SearchConnection+0x104>)
    b7cc:	781b      	ldrb	r3, [r3, #0]
    b7ce:	7043      	strb	r3, [r0, #1]
                    SendPacket(true, tmpPANID, NULL, true, false, dataLen, dataPtr,0, true, CommandConfCallback);
    b7d0:	4b1f      	ldr	r3, [pc, #124]	; (b850 <MiApp_SearchConnection+0x124>)
    b7d2:	9305      	str	r3, [sp, #20]
    b7d4:	2301      	movs	r3, #1
    b7d6:	9304      	str	r3, [sp, #16]
    b7d8:	2300      	movs	r3, #0
    b7da:	9303      	str	r3, [sp, #12]
    b7dc:	9002      	str	r0, [sp, #8]
    b7de:	2202      	movs	r2, #2
    b7e0:	9201      	str	r2, [sp, #4]
    b7e2:	9300      	str	r3, [sp, #0]
    b7e4:	3301      	adds	r3, #1
    b7e6:	2200      	movs	r2, #0
    b7e8:	2101      	movs	r1, #1
    b7ea:	4249      	negs	r1, r1
    b7ec:	2001      	movs	r0, #1
    b7ee:	4c19      	ldr	r4, [pc, #100]	; (b854 <MiApp_SearchConnection+0x128>)
    b7f0:	47a0      	blx	r4
                t1.Val = MiWi_TickGet();
    b7f2:	4b19      	ldr	r3, [pc, #100]	; (b858 <MiApp_SearchConnection+0x12c>)
    b7f4:	4798      	blx	r3
    b7f6:	9007      	str	r0, [sp, #28]
                    P2PTasks();
    b7f8:	4e18      	ldr	r6, [pc, #96]	; (b85c <MiApp_SearchConnection+0x130>)
					SYSTEM_RunTasks();			
    b7fa:	4f19      	ldr	r7, [pc, #100]	; (b860 <MiApp_SearchConnection+0x134>)
                    t2.Val = MiWi_TickGet();
    b7fc:	4c16      	ldr	r4, [pc, #88]	; (b858 <MiApp_SearchConnection+0x12c>)
                    P2PTasks();
    b7fe:	47b0      	blx	r6
					SYSTEM_RunTasks();			
    b800:	47b8      	blx	r7
                    t2.Val = MiWi_TickGet();
    b802:	47a0      	blx	r4
                    if( MiWi_TickGetDiff(t2, t1) > ((uint32_t)(miwi_scan_duration_ticks(ScanDuration))) )
    b804:	9907      	ldr	r1, [sp, #28]
    b806:	4b17      	ldr	r3, [pc, #92]	; (b864 <MiApp_SearchConnection+0x138>)
    b808:	4798      	blx	r3
    b80a:	42a8      	cmp	r0, r5
    b80c:	d9f7      	bls.n	b7fe <MiApp_SearchConnection+0xd2>
    b80e:	e7b9      	b.n	b784 <MiApp_SearchConnection+0x58>
        MiApp_Set(CHANNEL, &backupChannel);
    b810:	211e      	movs	r1, #30
    b812:	4461      	add	r1, ip
    b814:	2000      	movs	r0, #0
    b816:	4b0c      	ldr	r3, [pc, #48]	; (b848 <MiApp_SearchConnection+0x11c>)
    b818:	4798      	blx	r3
        ConfCallback(ActiveScanResultIndex, (uint8_t*)ActiveScanResults);
    b81a:	4c07      	ldr	r4, [pc, #28]	; (b838 <MiApp_SearchConnection+0x10c>)
    b81c:	7820      	ldrb	r0, [r4, #0]
    b81e:	4905      	ldr	r1, [pc, #20]	; (b834 <MiApp_SearchConnection+0x108>)
    b820:	47c0      	blx	r8
        return ActiveScanResultIndex;
    b822:	7820      	ldrb	r0, [r4, #0]
    }   
    b824:	b00a      	add	sp, #40	; 0x28
    b826:	bc1c      	pop	{r2, r3, r4}
    b828:	4690      	mov	r8, r2
    b82a:	4699      	mov	r9, r3
    b82c:	46a2      	mov	sl, r4
    b82e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b830:	2000001d 	.word	0x2000001d
    b834:	20002ab0 	.word	0x20002ab0
    b838:	20002b00 	.word	0x20002b00
    b83c:	00015399 	.word	0x00015399
    b840:	0001732c 	.word	0x0001732c
    b844:	00016970 	.word	0x00016970
    b848:	0000a825 	.word	0x0000a825
    b84c:	0000b8a5 	.word	0x0000b8a5
    b850:	0000a489 	.word	0x0000a489
    b854:	0000a5f5 	.word	0x0000a5f5
    b858:	0000bae5 	.word	0x0000bae5
    b85c:	0000ade5 	.word	0x0000ade5
    b860:	0000ccbd 	.word	0x0000ccbd
    b864:	0000bb45 	.word	0x0000bb45

0000b868 <MiMem_Init>:
* Output:		    none
*
* Overview:		    This function will initialize the Mimem buffers
********************************************************************/
void MiMem_Init(void)
{
    b868:	b510      	push	{r4, lr}
	size_t startAddress =  ALIGN((size_t)heapMem);
    b86a:	4a0b      	ldr	r2, [pc, #44]	; (b898 <MiMem_Init+0x30>)
    b86c:	1e50      	subs	r0, r2, #1
    b86e:	2403      	movs	r4, #3
    b870:	43a0      	bics	r0, r4
    b872:	1d01      	adds	r1, r0, #4

	/*Aligned heap is the base */
	base = (Block_t*) startAddress;
    b874:	4b09      	ldr	r3, [pc, #36]	; (b89c <MiMem_Init+0x34>)
    b876:	6019      	str	r1, [r3, #0]
	base->size = totalFreeBytesRemaining = HEAP_SIZE - (startAddress - (size_t)heapMem);
    b878:	4253      	negs	r3, r2
    b87a:	43a3      	bics	r3, r4
    b87c:	24c0      	movs	r4, #192	; 0xc0
    b87e:	0164      	lsls	r4, r4, #5
    b880:	46a4      	mov	ip, r4
    b882:	4462      	add	r2, ip
    b884:	189b      	adds	r3, r3, r2
    b886:	4a06      	ldr	r2, [pc, #24]	; (b8a0 <MiMem_Init+0x38>)
    b888:	6013      	str	r3, [r2, #0]
    b88a:	60c3      	str	r3, [r0, #12]
	base->free = true;
    b88c:	2301      	movs	r3, #1
    b88e:	7403      	strb	r3, [r0, #16]
	base->next = NULL;
    b890:	2300      	movs	r3, #0
    b892:	6043      	str	r3, [r0, #4]
	base->prev = NULL;
    b894:	6083      	str	r3, [r0, #8]
}
    b896:	bd10      	pop	{r4, pc}
    b898:	200004a4 	.word	0x200004a4
    b89c:	200004a0 	.word	0x200004a0
    b8a0:	20001ca4 	.word	0x20001ca4

0000b8a4 <MiMem_Alloc>:
*  or returns NULL if no memory available
*
* Note:			    none
********************************************************************/
uint8_t* MiMem_Alloc(uint8_t size)
{
    b8a4:	b570      	push	{r4, r5, r6, lr}
    b8a6:	0005      	movs	r5, r0
	size_t requestedSize = 0U;
	void* requestedMemPtr = NULL;

	/* Initialize the Heap */
	if (!base)
    b8a8:	4b29      	ldr	r3, [pc, #164]	; (b950 <MiMem_Alloc+0xac>)
    b8aa:	681b      	ldr	r3, [r3, #0]
    b8ac:	2b00      	cmp	r3, #0
    b8ae:	d012      	beq.n	b8d6 <MiMem_Alloc+0x32>
	{
		MiMem_Init();
	}
	/* if requested size is of non zero */
	if (size)
    b8b0:	2d00      	cmp	r5, #0
    b8b2:	d047      	beq.n	b944 <MiMem_Alloc+0xa0>
	{
		requestedSize =  size + blockMetaDataSize;
		requestedSize = ALIGN(requestedSize);
    b8b4:	0029      	movs	r1, r5
    b8b6:	310f      	adds	r1, #15
    b8b8:	2303      	movs	r3, #3
    b8ba:	4399      	bics	r1, r3
    b8bc:	3104      	adds	r1, #4
		if (requestedSize <= totalFreeBytesRemaining)
    b8be:	4b25      	ldr	r3, [pc, #148]	; (b954 <MiMem_Alloc+0xb0>)
    b8c0:	6818      	ldr	r0, [r3, #0]
    b8c2:	4281      	cmp	r1, r0
    b8c4:	d840      	bhi.n	b948 <MiMem_Alloc+0xa4>
		{
			size_t receivedSize = (size_t)~0U;
			Block_t *requestedBlock = NULL;
			Block_t *blockPtr = base;
    b8c6:	4b22      	ldr	r3, [pc, #136]	; (b950 <MiMem_Alloc+0xac>)
    b8c8:	681b      	ldr	r3, [r3, #0]

			/* Find best fit free Block */
			while (blockPtr)
    b8ca:	2b00      	cmp	r3, #0
    b8cc:	d03e      	beq.n	b94c <MiMem_Alloc+0xa8>
    b8ce:	2600      	movs	r6, #0
    b8d0:	2401      	movs	r4, #1
    b8d2:	4264      	negs	r4, r4
    b8d4:	e005      	b.n	b8e2 <MiMem_Alloc+0x3e>
		MiMem_Init();
    b8d6:	4b20      	ldr	r3, [pc, #128]	; (b958 <MiMem_Alloc+0xb4>)
    b8d8:	4798      	blx	r3
    b8da:	e7e9      	b.n	b8b0 <MiMem_Alloc+0xc>
				if ((blockPtr->free) && (blockPtr->size >= requestedSize) && (blockPtr->size < receivedSize))
				{
					receivedSize = blockPtr->size;
					requestedBlock = blockPtr;
				}
				blockPtr = blockPtr->next;
    b8dc:	681b      	ldr	r3, [r3, #0]
			while (blockPtr)
    b8de:	2b00      	cmp	r3, #0
    b8e0:	d00a      	beq.n	b8f8 <MiMem_Alloc+0x54>
				if ((blockPtr->free) && (blockPtr->size >= requestedSize) && (blockPtr->size < receivedSize))
    b8e2:	7b1a      	ldrb	r2, [r3, #12]
    b8e4:	2a00      	cmp	r2, #0
    b8e6:	d0f9      	beq.n	b8dc <MiMem_Alloc+0x38>
    b8e8:	689a      	ldr	r2, [r3, #8]
    b8ea:	4291      	cmp	r1, r2
    b8ec:	d8f6      	bhi.n	b8dc <MiMem_Alloc+0x38>
    b8ee:	42a2      	cmp	r2, r4
    b8f0:	d2f4      	bcs.n	b8dc <MiMem_Alloc+0x38>
    b8f2:	001e      	movs	r6, r3
					receivedSize = blockPtr->size;
    b8f4:	0014      	movs	r4, r2
    b8f6:	e7f1      	b.n	b8dc <MiMem_Alloc+0x38>
    b8f8:	2400      	movs	r4, #0
			}

			if (requestedBlock)
    b8fa:	2e00      	cmp	r6, #0
    b8fc:	d012      	beq.n	b924 <MiMem_Alloc+0x80>
			{
				if ((requestedBlock->size - requestedSize) > HEAP_MINIMUM_BLOCK_SIZE)
    b8fe:	68b3      	ldr	r3, [r6, #8]
    b900:	1a5b      	subs	r3, r3, r1
    b902:	2b14      	cmp	r3, #20
    b904:	d810      	bhi.n	b928 <MiMem_Alloc+0x84>
				splitBlock (requestedBlock, requestedSize);
				requestedBlock->free = false;
    b906:	2300      	movs	r3, #0
    b908:	7333      	strb	r3, [r6, #12]
				totalFreeBytesRemaining -= requestedBlock->size;
    b90a:	68b3      	ldr	r3, [r6, #8]
    b90c:	1ac0      	subs	r0, r0, r3
    b90e:	4b11      	ldr	r3, [pc, #68]	; (b954 <MiMem_Alloc+0xb0>)
    b910:	6018      	str	r0, [r3, #0]
				requestedMemPtr = ( void* )(((uint8_t*)requestedBlock) + blockMetaDataSize);
    b912:	0034      	movs	r4, r6
    b914:	3410      	adds	r4, #16
			}
		}
	}
	if (NULL != requestedMemPtr)
    b916:	2c00      	cmp	r4, #0
    b918:	d004      	beq.n	b924 <MiMem_Alloc+0x80>
	{
		memset(requestedMemPtr, 0, size);
    b91a:	002a      	movs	r2, r5
    b91c:	2100      	movs	r1, #0
    b91e:	0020      	movs	r0, r4
    b920:	4b0e      	ldr	r3, [pc, #56]	; (b95c <MiMem_Alloc+0xb8>)
    b922:	4798      	blx	r3
	}
	return requestedMemPtr;
}
    b924:	0020      	movs	r0, r4
    b926:	bd70      	pop	{r4, r5, r6, pc}
  \param[in] size size of the memory chunk requested
  \return None.
 ******************************************************************************/
static void splitBlock(Block_t* blockTobeSplitted, size_t size)
{
	uint8_t* ptr = (uint8_t*)blockTobeSplitted + size;
    b928:	1872      	adds	r2, r6, r1
	Block_t* newBlock = (Block_t*)ptr;

	newBlock->size = blockTobeSplitted->size - size;
    b92a:	6093      	str	r3, [r2, #8]

	if (blockTobeSplitted->next)
    b92c:	6833      	ldr	r3, [r6, #0]
    b92e:	2b00      	cmp	r3, #0
    b930:	d000      	beq.n	b934 <MiMem_Alloc+0x90>
		blockTobeSplitted->next->prev = newBlock;
    b932:	605a      	str	r2, [r3, #4]

	newBlock->next = blockTobeSplitted->next;
    b934:	6833      	ldr	r3, [r6, #0]
    b936:	6013      	str	r3, [r2, #0]
	newBlock->prev = blockTobeSplitted;
    b938:	6056      	str	r6, [r2, #4]
	newBlock->free = true;
    b93a:	2301      	movs	r3, #1
    b93c:	7313      	strb	r3, [r2, #12]

	blockTobeSplitted->next = newBlock;
    b93e:	6032      	str	r2, [r6, #0]
	blockTobeSplitted->size = size;
    b940:	60b1      	str	r1, [r6, #8]
    b942:	e7e0      	b.n	b906 <MiMem_Alloc+0x62>
    b944:	2400      	movs	r4, #0
    b946:	e7ed      	b.n	b924 <MiMem_Alloc+0x80>
    b948:	2400      	movs	r4, #0
    b94a:	e7eb      	b.n	b924 <MiMem_Alloc+0x80>
			while (blockPtr)
    b94c:	2400      	movs	r4, #0
    b94e:	e7e9      	b.n	b924 <MiMem_Alloc+0x80>
    b950:	200004a0 	.word	0x200004a0
    b954:	20001ca4 	.word	0x20001ca4
    b958:	0000b869 	.word	0x0000b869
    b95c:	00014df1 	.word	0x00014df1

0000b960 <MiMem_Free>:
	Block_t* blockPtr = base;
    b960:	4b1c      	ldr	r3, [pc, #112]	; (b9d4 <MiMem_Free+0x74>)
    b962:	681b      	ldr	r3, [r3, #0]
	Block_t* freeBlockPtr = (Block_t*)((uint8_t*)ptr - (uint8_t*)blockMetaDataSize);
    b964:	3810      	subs	r0, #16
	for(; ((blockPtr != NULL) && (blockPtr != freeBlockPtr)); blockPtr = blockPtr->next);
    b966:	2b00      	cmp	r3, #0
    b968:	d030      	beq.n	b9cc <MiMem_Free+0x6c>
    b96a:	4283      	cmp	r3, r0
    b96c:	d02f      	beq.n	b9ce <MiMem_Free+0x6e>
    b96e:	681b      	ldr	r3, [r3, #0]
    b970:	2b00      	cmp	r3, #0
    b972:	d02b      	beq.n	b9cc <MiMem_Free+0x6c>
    b974:	4298      	cmp	r0, r3
    b976:	d1fa      	bne.n	b96e <MiMem_Free+0xe>
		blockPtr->free = true;
    b978:	2301      	movs	r3, #1
    b97a:	7303      	strb	r3, [r0, #12]
		totalFreeBytesRemaining += blockPtr->size;
    b97c:	6881      	ldr	r1, [r0, #8]
    b97e:	4a16      	ldr	r2, [pc, #88]	; (b9d8 <MiMem_Free+0x78>)
    b980:	6813      	ldr	r3, [r2, #0]
    b982:	185b      	adds	r3, r3, r1
    b984:	6013      	str	r3, [r2, #0]
		if (blockPtr->prev && blockPtr->prev->free)
    b986:	6843      	ldr	r3, [r0, #4]
    b988:	2b00      	cmp	r3, #0
    b98a:	d00f      	beq.n	b9ac <MiMem_Free+0x4c>
    b98c:	7b1a      	ldrb	r2, [r3, #12]
    b98e:	2a00      	cmp	r2, #0
    b990:	d00c      	beq.n	b9ac <MiMem_Free+0x4c>
			blockPtr->prev->size += blockPtr->size;
    b992:	689a      	ldr	r2, [r3, #8]
    b994:	4694      	mov	ip, r2
    b996:	4461      	add	r1, ip
    b998:	6099      	str	r1, [r3, #8]
			if (blockPtr->next)
    b99a:	6803      	ldr	r3, [r0, #0]
    b99c:	2b00      	cmp	r3, #0
    b99e:	d001      	beq.n	b9a4 <MiMem_Free+0x44>
			blockPtr->next->prev = blockPtr->prev;
    b9a0:	6842      	ldr	r2, [r0, #4]
    b9a2:	605a      	str	r2, [r3, #4]
			blockPtr->prev->next = blockPtr->next;
    b9a4:	6843      	ldr	r3, [r0, #4]
    b9a6:	6802      	ldr	r2, [r0, #0]
    b9a8:	601a      	str	r2, [r3, #0]
			blockPtr = blockPtr->prev;
    b9aa:	6840      	ldr	r0, [r0, #4]
		if (blockPtr->next && blockPtr->next->free)
    b9ac:	6803      	ldr	r3, [r0, #0]
    b9ae:	2b00      	cmp	r3, #0
    b9b0:	d00c      	beq.n	b9cc <MiMem_Free+0x6c>
    b9b2:	7b1a      	ldrb	r2, [r3, #12]
    b9b4:	2a00      	cmp	r2, #0
    b9b6:	d009      	beq.n	b9cc <MiMem_Free+0x6c>
			blockPtr->size += blockPtr->next->size ;
    b9b8:	6882      	ldr	r2, [r0, #8]
    b9ba:	6899      	ldr	r1, [r3, #8]
    b9bc:	468c      	mov	ip, r1
    b9be:	4462      	add	r2, ip
    b9c0:	6082      	str	r2, [r0, #8]
			blockPtr->next = blockPtr->next->next;
    b9c2:	681b      	ldr	r3, [r3, #0]
    b9c4:	6003      	str	r3, [r0, #0]
			if (blockPtr->next)
    b9c6:	2b00      	cmp	r3, #0
    b9c8:	d000      	beq.n	b9cc <MiMem_Free+0x6c>
			blockPtr->next->prev = blockPtr;
    b9ca:	6058      	str	r0, [r3, #4]
}
    b9cc:	4770      	bx	lr
	Block_t* blockPtr = base;
    b9ce:	0018      	movs	r0, r3
    b9d0:	e7d2      	b.n	b978 <MiMem_Free+0x18>
    b9d2:	46c0      	nop			; (mov r8, r8)
    b9d4:	200004a0 	.word	0x200004a0
    b9d8:	20001ca4 	.word	0x20001ca4

0000b9dc <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    b9dc:	b530      	push	{r4, r5, lr}
	if (timers) {
    b9de:	4b14      	ldr	r3, [pc, #80]	; (ba30 <placeTimer+0x54>)
    b9e0:	681d      	ldr	r5, [r3, #0]
    b9e2:	2d00      	cmp	r5, #0
    b9e4:	d01c      	beq.n	ba20 <placeTimer+0x44>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    b9e6:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    b9e8:	6869      	ldr	r1, [r5, #4]
    b9ea:	428a      	cmp	r2, r1
    b9ec:	d309      	bcc.n	ba02 <placeTimer+0x26>
    b9ee:	002c      	movs	r4, r5
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    b9f0:	1a52      	subs	r2, r2, r1
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    b9f2:	6823      	ldr	r3, [r4, #0]
    b9f4:	2b00      	cmp	r3, #0
    b9f6:	d008      	beq.n	ba0a <placeTimer+0x2e>
			if (timeout < t->timeout) {
    b9f8:	6859      	ldr	r1, [r3, #4]
    b9fa:	4291      	cmp	r1, r2
    b9fc:	d803      	bhi.n	ba06 <placeTimer+0x2a>
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    b9fe:	001c      	movs	r4, r3
    ba00:	e7f6      	b.n	b9f0 <placeTimer+0x14>
    ba02:	002b      	movs	r3, r5
		SYS_Timer_t *prev = NULL;
    ba04:	2400      	movs	r4, #0
				t->timeout -= timeout;
    ba06:	1a89      	subs	r1, r1, r2
    ba08:	6059      	str	r1, [r3, #4]
			}

			prev = t;
		}

		timer->timeout = timeout;
    ba0a:	6042      	str	r2, [r0, #4]

		if (prev) {
    ba0c:	2c00      	cmp	r4, #0
    ba0e:	d003      	beq.n	ba18 <placeTimer+0x3c>
			timer->next = prev->next;
    ba10:	6823      	ldr	r3, [r4, #0]
    ba12:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    ba14:	6020      	str	r0, [r4, #0]
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    ba16:	bd30      	pop	{r4, r5, pc}
			timer->next = timers;
    ba18:	6005      	str	r5, [r0, #0]
			timers = timer;
    ba1a:	4b05      	ldr	r3, [pc, #20]	; (ba30 <placeTimer+0x54>)
    ba1c:	6018      	str	r0, [r3, #0]
    ba1e:	e7fa      	b.n	ba16 <placeTimer+0x3a>
		timer->next = NULL;
    ba20:	2300      	movs	r3, #0
    ba22:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    ba24:	6883      	ldr	r3, [r0, #8]
    ba26:	6043      	str	r3, [r0, #4]
		timers = timer;
    ba28:	4b01      	ldr	r3, [pc, #4]	; (ba30 <placeTimer+0x54>)
    ba2a:	6018      	str	r0, [r3, #0]
}
    ba2c:	e7f3      	b.n	ba16 <placeTimer+0x3a>
    ba2e:	46c0      	nop			; (mov r8, r8)
    ba30:	20001ca8 	.word	0x20001ca8

0000ba34 <SYS_HwOverflow_Cb>:
}

//static void SYS_HwOverflow_Cb(void)
void SYS_HwOverflow_Cb(void)
{
	timerExtension1++;
    ba34:	4a06      	ldr	r2, [pc, #24]	; (ba50 <SYS_HwOverflow_Cb+0x1c>)
    ba36:	7813      	ldrb	r3, [r2, #0]
    ba38:	3301      	adds	r3, #1
    ba3a:	b2db      	uxtb	r3, r3
    ba3c:	7013      	strb	r3, [r2, #0]
	if(timerExtension1 == 0)
    ba3e:	7813      	ldrb	r3, [r2, #0]
    ba40:	2b00      	cmp	r3, #0
    ba42:	d104      	bne.n	ba4e <SYS_HwOverflow_Cb+0x1a>
	{
		timerExtension2++;
    ba44:	4a03      	ldr	r2, [pc, #12]	; (ba54 <SYS_HwOverflow_Cb+0x20>)
    ba46:	7813      	ldrb	r3, [r2, #0]
    ba48:	3301      	adds	r3, #1
    ba4a:	b2db      	uxtb	r3, r3
    ba4c:	7013      	strb	r3, [r2, #0]
	}
}
    ba4e:	4770      	bx	lr
    ba50:	20002b09 	.word	0x20002b09
    ba54:	20002b0a 	.word	0x20002b0a

0000ba58 <SYS_TimerStop>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    ba58:	4b0e      	ldr	r3, [pc, #56]	; (ba94 <SYS_TimerStop+0x3c>)
    ba5a:	681a      	ldr	r2, [r3, #0]
    ba5c:	2a00      	cmp	r2, #0
    ba5e:	d014      	beq.n	ba8a <SYS_TimerStop+0x32>
		if (t == timer) {
    ba60:	4282      	cmp	r2, r0
    ba62:	d013      	beq.n	ba8c <SYS_TimerStop+0x34>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    ba64:	6813      	ldr	r3, [r2, #0]
    ba66:	2b00      	cmp	r3, #0
    ba68:	d00f      	beq.n	ba8a <SYS_TimerStop+0x32>
		if (t == timer) {
    ba6a:	4298      	cmp	r0, r3
    ba6c:	d001      	beq.n	ba72 <SYS_TimerStop+0x1a>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    ba6e:	001a      	movs	r2, r3
    ba70:	e7f8      	b.n	ba64 <SYS_TimerStop+0xc>
			if (prev) {
    ba72:	2a00      	cmp	r2, #0
    ba74:	d00a      	beq.n	ba8c <SYS_TimerStop+0x34>
				prev->next = t->next;
    ba76:	6803      	ldr	r3, [r0, #0]
    ba78:	6013      	str	r3, [r2, #0]
			if (t->next) {
    ba7a:	6803      	ldr	r3, [r0, #0]
    ba7c:	2b00      	cmp	r3, #0
    ba7e:	d004      	beq.n	ba8a <SYS_TimerStop+0x32>
				t->next->timeout += timer->timeout;
    ba80:	6842      	ldr	r2, [r0, #4]
    ba82:	6859      	ldr	r1, [r3, #4]
    ba84:	468c      	mov	ip, r1
    ba86:	4462      	add	r2, ip
    ba88:	605a      	str	r2, [r3, #4]
}
    ba8a:	4770      	bx	lr
				timers = t->next;
    ba8c:	4b01      	ldr	r3, [pc, #4]	; (ba94 <SYS_TimerStop+0x3c>)
    ba8e:	6802      	ldr	r2, [r0, #0]
    ba90:	601a      	str	r2, [r3, #0]
    ba92:	e7f2      	b.n	ba7a <SYS_TimerStop+0x22>
    ba94:	20001ca8 	.word	0x20001ca8

0000ba98 <SYS_TimerStarted>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    ba98:	4b09      	ldr	r3, [pc, #36]	; (bac0 <SYS_TimerStarted+0x28>)
    ba9a:	681b      	ldr	r3, [r3, #0]
    ba9c:	2b00      	cmp	r3, #0
    ba9e:	d00a      	beq.n	bab6 <SYS_TimerStarted+0x1e>
		if (t == timer) {
    baa0:	4283      	cmp	r3, r0
    baa2:	d00a      	beq.n	baba <SYS_TimerStarted+0x22>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    baa4:	681b      	ldr	r3, [r3, #0]
    baa6:	2b00      	cmp	r3, #0
    baa8:	d003      	beq.n	bab2 <SYS_TimerStarted+0x1a>
		if (t == timer) {
    baaa:	4298      	cmp	r0, r3
    baac:	d1fa      	bne.n	baa4 <SYS_TimerStarted+0xc>
			return true;
    baae:	2001      	movs	r0, #1
    bab0:	e000      	b.n	bab4 <SYS_TimerStarted+0x1c>
	return false;
    bab2:	2000      	movs	r0, #0
}
    bab4:	4770      	bx	lr
	return false;
    bab6:	2000      	movs	r0, #0
    bab8:	e7fc      	b.n	bab4 <SYS_TimerStarted+0x1c>
			return true;
    baba:	2001      	movs	r0, #1
    babc:	e7fa      	b.n	bab4 <SYS_TimerStarted+0x1c>
    babe:	46c0      	nop			; (mov r8, r8)
    bac0:	20001ca8 	.word	0x20001ca8

0000bac4 <SYS_TimerStart>:
{
    bac4:	b510      	push	{r4, lr}
    bac6:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    bac8:	4b04      	ldr	r3, [pc, #16]	; (badc <SYS_TimerStart+0x18>)
    baca:	4798      	blx	r3
    bacc:	2800      	cmp	r0, #0
    bace:	d000      	beq.n	bad2 <SYS_TimerStart+0xe>
}
    bad0:	bd10      	pop	{r4, pc}
		placeTimer(timer);
    bad2:	0020      	movs	r0, r4
    bad4:	4b02      	ldr	r3, [pc, #8]	; (bae0 <SYS_TimerStart+0x1c>)
    bad6:	4798      	blx	r3
}
    bad8:	e7fa      	b.n	bad0 <SYS_TimerStart+0xc>
    bada:	46c0      	nop			; (mov r8, r8)
    badc:	0000ba99 	.word	0x0000ba99
    bae0:	0000b9dd 	.word	0x0000b9dd

0000bae4 <MiWi_TickGet>:
{
    bae4:	b570      	push	{r4, r5, r6, lr}
	uint8_t current_timerExtension1 = timerExtension1;
    bae6:	4e11      	ldr	r6, [pc, #68]	; (bb2c <MiWi_TickGet+0x48>)
    bae8:	7835      	ldrb	r5, [r6, #0]
    baea:	b2ed      	uxtb	r5, r5
	tmr_disable_ovf_interrupt();
    baec:	4b10      	ldr	r3, [pc, #64]	; (bb30 <MiWi_TickGet+0x4c>)
    baee:	4798      	blx	r3
	currentTime.word.w0 = common_tc_read_count();
    baf0:	4b10      	ldr	r3, [pc, #64]	; (bb34 <MiWi_TickGet+0x50>)
    baf2:	4798      	blx	r3
    baf4:	0004      	movs	r4, r0
	tmr_enable_ovf_interrupt();
    baf6:	4b10      	ldr	r3, [pc, #64]	; (bb38 <MiWi_TickGet+0x54>)
    baf8:	4798      	blx	r3
  __ASM volatile ("nop");
    bafa:	46c0      	nop			; (mov r8, r8)
	if (current_timerExtension1 != timerExtension1)
    bafc:	7833      	ldrb	r3, [r6, #0]
    bafe:	b2db      	uxtb	r3, r3
    bb00:	429d      	cmp	r5, r3
    bb02:	d004      	beq.n	bb0e <MiWi_TickGet+0x2a>
		currentTime.word.w0 = common_tc_read_count();
    bb04:	4b0b      	ldr	r3, [pc, #44]	; (bb34 <MiWi_TickGet+0x50>)
    bb06:	4798      	blx	r3
    bb08:	0c24      	lsrs	r4, r4, #16
    bb0a:	0424      	lsls	r4, r4, #16
    bb0c:	4304      	orrs	r4, r0
    currentTime.byte.b2 = timerExtension1;
    bb0e:	4b07      	ldr	r3, [pc, #28]	; (bb2c <MiWi_TickGet+0x48>)
    bb10:	781b      	ldrb	r3, [r3, #0]
    bb12:	041b      	lsls	r3, r3, #16
    bb14:	4809      	ldr	r0, [pc, #36]	; (bb3c <MiWi_TickGet+0x58>)
    bb16:	4004      	ands	r4, r0
    bb18:	431c      	orrs	r4, r3
    currentTime.byte.b3 = timerExtension2;
    bb1a:	4b09      	ldr	r3, [pc, #36]	; (bb40 <MiWi_TickGet+0x5c>)
    bb1c:	781b      	ldrb	r3, [r3, #0]
    bb1e:	061b      	lsls	r3, r3, #24
    bb20:	0224      	lsls	r4, r4, #8
    bb22:	0a24      	lsrs	r4, r4, #8
    bb24:	431c      	orrs	r4, r3
}
    bb26:	0020      	movs	r0, r4
    bb28:	bd70      	pop	{r4, r5, r6, pc}
    bb2a:	46c0      	nop			; (mov r8, r8)
    bb2c:	20002b09 	.word	0x20002b09
    bb30:	0000d001 	.word	0x0000d001
    bb34:	000119d9 	.word	0x000119d9
    bb38:	0000d015 	.word	0x0000d015
    bb3c:	ff00ffff 	.word	0xff00ffff
    bb40:	20002b0a 	.word	0x20002b0a

0000bb44 <MiWi_TickGetDiff>:
	if (current_tick.Val > previous_tick.Val)
    bb44:	4288      	cmp	r0, r1
    bb46:	d802      	bhi.n	bb4e <MiWi_TickGetDiff+0xa>
		ret_val = (0xFFFFFFFF - previous_tick.Val) + current_tick.Val;
    bb48:	3801      	subs	r0, #1
    bb4a:	1a40      	subs	r0, r0, r1
}
    bb4c:	4770      	bx	lr
		ret_val = current_tick.Val - previous_tick.Val;
    bb4e:	1a40      	subs	r0, r0, r1
    bb50:	e7fc      	b.n	bb4c <MiWi_TickGetDiff+0x8>
    bb52:	Address 0x0000bb52 is out of bounds.


0000bb54 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    bb54:	b570      	push	{r4, r5, r6, lr}
    bb56:	b082      	sub	sp, #8
    bb58:	0005      	movs	r5, r0
    bb5a:	000e      	movs	r6, r1
	uint16_t temp = 0;
    bb5c:	2200      	movs	r2, #0
    bb5e:	466b      	mov	r3, sp
    bb60:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    bb62:	4c06      	ldr	r4, [pc, #24]	; (bb7c <usart_serial_getchar+0x28>)
    bb64:	466b      	mov	r3, sp
    bb66:	1d99      	adds	r1, r3, #6
    bb68:	0028      	movs	r0, r5
    bb6a:	47a0      	blx	r4
    bb6c:	2800      	cmp	r0, #0
    bb6e:	d1f9      	bne.n	bb64 <usart_serial_getchar+0x10>

	*c = temp;
    bb70:	466b      	mov	r3, sp
    bb72:	3306      	adds	r3, #6
    bb74:	881b      	ldrh	r3, [r3, #0]
    bb76:	7033      	strb	r3, [r6, #0]
}
    bb78:	b002      	add	sp, #8
    bb7a:	bd70      	pop	{r4, r5, r6, pc}
    bb7c:	000060b9 	.word	0x000060b9

0000bb80 <usart_serial_putchar>:
{
    bb80:	b570      	push	{r4, r5, r6, lr}
    bb82:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    bb84:	b28c      	uxth	r4, r1
    bb86:	4e03      	ldr	r6, [pc, #12]	; (bb94 <usart_serial_putchar+0x14>)
    bb88:	0021      	movs	r1, r4
    bb8a:	0028      	movs	r0, r5
    bb8c:	47b0      	blx	r6
    bb8e:	2800      	cmp	r0, #0
    bb90:	d1fa      	bne.n	bb88 <usart_serial_putchar+0x8>
}
    bb92:	bd70      	pop	{r4, r5, r6, pc}
    bb94:	0000608d 	.word	0x0000608d

0000bb98 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35 || (WLR089)
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    bb98:	b510      	push	{r4, lr}
    bb9a:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    bb9c:	466b      	mov	r3, sp
    bb9e:	1ddc      	adds	r4, r3, #7
    bba0:	2201      	movs	r2, #1
    bba2:	0021      	movs	r1, r4
    bba4:	480f      	ldr	r0, [pc, #60]	; (bbe4 <USART_HOST_ISR_VECT+0x4c>)
    bba6:	4b10      	ldr	r3, [pc, #64]	; (bbe8 <USART_HOST_ISR_VECT+0x50>)
    bba8:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    bbaa:	b672      	cpsid	i
  __ASM volatile ("dmb");
    bbac:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    bbb0:	2200      	movs	r2, #0
    bbb2:	4b0e      	ldr	r3, [pc, #56]	; (bbec <USART_HOST_ISR_VECT+0x54>)
    bbb4:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    bbb6:	4b0e      	ldr	r3, [pc, #56]	; (bbf0 <USART_HOST_ISR_VECT+0x58>)
    bbb8:	781b      	ldrb	r3, [r3, #0]
    bbba:	7821      	ldrb	r1, [r4, #0]
    bbbc:	4a0d      	ldr	r2, [pc, #52]	; (bbf4 <USART_HOST_ISR_VECT+0x5c>)
    bbbe:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    bbc0:	2b7f      	cmp	r3, #127	; 0x7f
    bbc2:	d00a      	beq.n	bbda <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    bbc4:	3301      	adds	r3, #1
    bbc6:	4a0a      	ldr	r2, [pc, #40]	; (bbf0 <USART_HOST_ISR_VECT+0x58>)
    bbc8:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    bbca:	2201      	movs	r2, #1
    bbcc:	4b07      	ldr	r3, [pc, #28]	; (bbec <USART_HOST_ISR_VECT+0x54>)
    bbce:	701a      	strb	r2, [r3, #0]
    bbd0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    bbd4:	b662      	cpsie	i
}
    bbd6:	b002      	add	sp, #8
    bbd8:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    bbda:	2200      	movs	r2, #0
    bbdc:	4b04      	ldr	r3, [pc, #16]	; (bbf0 <USART_HOST_ISR_VECT+0x58>)
    bbde:	701a      	strb	r2, [r3, #0]
    bbe0:	e7f3      	b.n	bbca <USART_HOST_ISR_VECT+0x32>
    bbe2:	46c0      	nop			; (mov r8, r8)
    bbe4:	20001cac 	.word	0x20001cac
    bbe8:	000061e9 	.word	0x000061e9
    bbec:	20000014 	.word	0x20000014
    bbf0:	20001d60 	.word	0x20001d60
    bbf4:	20001ce0 	.word	0x20001ce0

0000bbf8 <sio2host_init>:
{
    bbf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    bbfa:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    bbfc:	2380      	movs	r3, #128	; 0x80
    bbfe:	05db      	lsls	r3, r3, #23
    bc00:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    bc02:	2300      	movs	r3, #0
    bc04:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    bc06:	22ff      	movs	r2, #255	; 0xff
    bc08:	4669      	mov	r1, sp
    bc0a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    bc0c:	2200      	movs	r2, #0
    bc0e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    bc10:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    bc12:	2401      	movs	r4, #1
    bc14:	2124      	movs	r1, #36	; 0x24
    bc16:	4668      	mov	r0, sp
    bc18:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    bc1a:	3101      	adds	r1, #1
    bc1c:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    bc1e:	3101      	adds	r1, #1
    bc20:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    bc22:	3101      	adds	r1, #1
    bc24:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    bc26:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    bc28:	3105      	adds	r1, #5
    bc2a:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    bc2c:	3101      	adds	r1, #1
    bc2e:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    bc30:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    bc32:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    bc34:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    bc36:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    bc38:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    bc3a:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    bc3c:	2313      	movs	r3, #19
    bc3e:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    bc40:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    bc42:	2380      	movs	r3, #128	; 0x80
    bc44:	035b      	lsls	r3, r3, #13
    bc46:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    bc48:	4b2f      	ldr	r3, [pc, #188]	; (bd08 <sio2host_init+0x110>)
    bc4a:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    bc4c:	4b2f      	ldr	r3, [pc, #188]	; (bd0c <sio2host_init+0x114>)
    bc4e:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    bc50:	2301      	movs	r3, #1
    bc52:	425b      	negs	r3, r3
    bc54:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    bc56:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    bc58:	23e1      	movs	r3, #225	; 0xe1
    bc5a:	025b      	lsls	r3, r3, #9
    bc5c:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    bc5e:	4d2c      	ldr	r5, [pc, #176]	; (bd10 <sio2host_init+0x118>)
    bc60:	4b2c      	ldr	r3, [pc, #176]	; (bd14 <sio2host_init+0x11c>)
    bc62:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    bc64:	4a2c      	ldr	r2, [pc, #176]	; (bd18 <sio2host_init+0x120>)
    bc66:	4b2d      	ldr	r3, [pc, #180]	; (bd1c <sio2host_init+0x124>)
    bc68:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    bc6a:	4a2d      	ldr	r2, [pc, #180]	; (bd20 <sio2host_init+0x128>)
    bc6c:	4b2d      	ldr	r3, [pc, #180]	; (bd24 <sio2host_init+0x12c>)
    bc6e:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    bc70:	466a      	mov	r2, sp
    bc72:	2184      	movs	r1, #132	; 0x84
    bc74:	05c9      	lsls	r1, r1, #23
    bc76:	0028      	movs	r0, r5
    bc78:	4b2b      	ldr	r3, [pc, #172]	; (bd28 <sio2host_init+0x130>)
    bc7a:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    bc7c:	4f2b      	ldr	r7, [pc, #172]	; (bd2c <sio2host_init+0x134>)
    bc7e:	683b      	ldr	r3, [r7, #0]
    bc80:	6898      	ldr	r0, [r3, #8]
    bc82:	2100      	movs	r1, #0
    bc84:	4e2a      	ldr	r6, [pc, #168]	; (bd30 <sio2host_init+0x138>)
    bc86:	47b0      	blx	r6
	setbuf(stdin, NULL);
    bc88:	683b      	ldr	r3, [r7, #0]
    bc8a:	6858      	ldr	r0, [r3, #4]
    bc8c:	2100      	movs	r1, #0
    bc8e:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    bc90:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    bc92:	0030      	movs	r0, r6
    bc94:	4b27      	ldr	r3, [pc, #156]	; (bd34 <sio2host_init+0x13c>)
    bc96:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    bc98:	231f      	movs	r3, #31
    bc9a:	4018      	ands	r0, r3
    bc9c:	4084      	lsls	r4, r0
    bc9e:	4b26      	ldr	r3, [pc, #152]	; (bd38 <sio2host_init+0x140>)
    bca0:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    bca2:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    bca4:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    bca6:	2b00      	cmp	r3, #0
    bca8:	d1fc      	bne.n	bca4 <sio2host_init+0xac>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    bcaa:	6833      	ldr	r3, [r6, #0]
    bcac:	2202      	movs	r2, #2
    bcae:	4313      	orrs	r3, r2
    bcb0:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    bcb2:	4b17      	ldr	r3, [pc, #92]	; (bd10 <sio2host_init+0x118>)
    bcb4:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    bcb6:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    bcb8:	2a00      	cmp	r2, #0
    bcba:	d1fc      	bne.n	bcb6 <sio2host_init+0xbe>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    bcbc:	6859      	ldr	r1, [r3, #4]
    bcbe:	2280      	movs	r2, #128	; 0x80
    bcc0:	0252      	lsls	r2, r2, #9
    bcc2:	430a      	orrs	r2, r1
    bcc4:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    bcc6:	2101      	movs	r1, #1
    bcc8:	4a11      	ldr	r2, [pc, #68]	; (bd10 <sio2host_init+0x118>)
    bcca:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    bccc:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    bcce:	2a00      	cmp	r2, #0
    bcd0:	d1fc      	bne.n	bccc <sio2host_init+0xd4>
	return (usart_hw->SYNCBUSY.reg);
    bcd2:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    bcd4:	2a00      	cmp	r2, #0
    bcd6:	d1fc      	bne.n	bcd2 <sio2host_init+0xda>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    bcd8:	6859      	ldr	r1, [r3, #4]
    bcda:	2280      	movs	r2, #128	; 0x80
    bcdc:	0292      	lsls	r2, r2, #10
    bcde:	430a      	orrs	r2, r1
    bce0:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    bce2:	2101      	movs	r1, #1
    bce4:	4a0a      	ldr	r2, [pc, #40]	; (bd10 <sio2host_init+0x118>)
    bce6:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    bce8:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    bcea:	2a00      	cmp	r2, #0
    bcec:	d1fc      	bne.n	bce8 <sio2host_init+0xf0>
	USART_HOST_RX_ISR_ENABLE();
    bcee:	4913      	ldr	r1, [pc, #76]	; (bd3c <sio2host_init+0x144>)
    bcf0:	2000      	movs	r0, #0
    bcf2:	4b13      	ldr	r3, [pc, #76]	; (bd40 <sio2host_init+0x148>)
    bcf4:	4798      	blx	r3
    bcf6:	2204      	movs	r2, #4
    bcf8:	2384      	movs	r3, #132	; 0x84
    bcfa:	05db      	lsls	r3, r3, #23
    bcfc:	759a      	strb	r2, [r3, #22]
    bcfe:	32fc      	adds	r2, #252	; 0xfc
    bd00:	4b0d      	ldr	r3, [pc, #52]	; (bd38 <sio2host_init+0x140>)
    bd02:	601a      	str	r2, [r3, #0]
}
    bd04:	b011      	add	sp, #68	; 0x44
    bd06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bd08:	00040003 	.word	0x00040003
    bd0c:	00050003 	.word	0x00050003
    bd10:	20001cac 	.word	0x20001cac
    bd14:	20002124 	.word	0x20002124
    bd18:	0000bb81 	.word	0x0000bb81
    bd1c:	20002120 	.word	0x20002120
    bd20:	0000bb55 	.word	0x0000bb55
    bd24:	2000211c 	.word	0x2000211c
    bd28:	00005d21 	.word	0x00005d21
    bd2c:	20000028 	.word	0x20000028
    bd30:	0001559d 	.word	0x0001559d
    bd34:	0000564d 	.word	0x0000564d
    bd38:	e000e100 	.word	0xe000e100
    bd3c:	0000bb99 	.word	0x0000bb99
    bd40:	00005611 	.word	0x00005611

0000bd44 <sio2host_tx>:
{
    bd44:	b5f0      	push	{r4, r5, r6, r7, lr}
    bd46:	b083      	sub	sp, #12
    bd48:	0006      	movs	r6, r0
    bd4a:	9101      	str	r1, [sp, #4]
	return usart_write_buffer_wait(module, tx_data, length);
    bd4c:	466b      	mov	r3, sp
    bd4e:	889d      	ldrh	r5, [r3, #4]
    bd50:	4c05      	ldr	r4, [pc, #20]	; (bd68 <sio2host_tx+0x24>)
    bd52:	4f06      	ldr	r7, [pc, #24]	; (bd6c <sio2host_tx+0x28>)
    bd54:	002a      	movs	r2, r5
    bd56:	0031      	movs	r1, r6
    bd58:	0020      	movs	r0, r4
    bd5a:	47b8      	blx	r7
	} while (status != STATUS_OK);
    bd5c:	2800      	cmp	r0, #0
    bd5e:	d1f9      	bne.n	bd54 <sio2host_tx+0x10>
}
    bd60:	9801      	ldr	r0, [sp, #4]
    bd62:	b003      	add	sp, #12
    bd64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bd66:	46c0      	nop			; (mov r8, r8)
    bd68:	20001cac 	.word	0x20001cac
    bd6c:	00006129 	.word	0x00006129

0000bd70 <sio2host_putchar>:
{
    bd70:	b500      	push	{lr}
    bd72:	b083      	sub	sp, #12
    bd74:	466b      	mov	r3, sp
    bd76:	71d8      	strb	r0, [r3, #7]
    bd78:	3307      	adds	r3, #7
	sio2host_tx(&ch, 1);
    bd7a:	2101      	movs	r1, #1
    bd7c:	0018      	movs	r0, r3
    bd7e:	4b02      	ldr	r3, [pc, #8]	; (bd88 <sio2host_putchar+0x18>)
    bd80:	4798      	blx	r3
}
    bd82:	b003      	add	sp, #12
    bd84:	bd00      	pop	{pc}
    bd86:	46c0      	nop			; (mov r8, r8)
    bd88:	0000bd45 	.word	0x0000bd45

0000bd8c <HAL_SPISend>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    bd8c:	4b13      	ldr	r3, [pc, #76]	; (bddc <HAL_SPISend+0x50>)
    bd8e:	681b      	ldr	r3, [r3, #0]
static uint8_t HAL_SPISend(uint8_t data)
{
	uint16_t read_val = 0;
	
	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master));
    bd90:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    bd92:	7e1a      	ldrb	r2, [r3, #24]
    bd94:	420a      	tst	r2, r1
    bd96:	d0fc      	beq.n	bd92 <HAL_SPISend+0x6>
    bd98:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    bd9a:	07d2      	lsls	r2, r2, #31
    bd9c:	d500      	bpl.n	bda0 <HAL_SPISend+0x14>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    bd9e:	6298      	str	r0, [r3, #40]	; 0x28
	spi_write(&master, data);
	while (!spi_is_write_complete(&master));
    bda0:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    bda2:	7e1a      	ldrb	r2, [r3, #24]
    bda4:	420a      	tst	r2, r1
    bda6:	d0fc      	beq.n	bda2 <HAL_SPISend+0x16>
	
	while (!spi_is_ready_to_read(&master));
    bda8:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    bdaa:	7e1a      	ldrb	r2, [r3, #24]
    bdac:	420a      	tst	r2, r1
    bdae:	d0fc      	beq.n	bdaa <HAL_SPISend+0x1e>
    bdb0:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t read_val = 0;
    bdb2:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
    bdb4:	0752      	lsls	r2, r2, #29
    bdb6:	d50a      	bpl.n	bdce <HAL_SPISend+0x42>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    bdb8:	8b5a      	ldrh	r2, [r3, #26]
    bdba:	0752      	lsls	r2, r2, #29
    bdbc:	d501      	bpl.n	bdc2 <HAL_SPISend+0x36>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    bdbe:	2204      	movs	r2, #4
    bdc0:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    bdc2:	4a06      	ldr	r2, [pc, #24]	; (bddc <HAL_SPISend+0x50>)
    bdc4:	7992      	ldrb	r2, [r2, #6]
    bdc6:	2a01      	cmp	r2, #1
    bdc8:	d003      	beq.n	bdd2 <HAL_SPISend+0x46>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    bdca:	6a98      	ldr	r0, [r3, #40]	; 0x28
    bdcc:	b2c0      	uxtb	r0, r0
	spi_read(&master, &read_val);
	
	return ((uint8_t)read_val);
    bdce:	b2c0      	uxtb	r0, r0
}
    bdd0:	4770      	bx	lr
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    bdd2:	6a98      	ldr	r0, [r3, #40]	; 0x28
    bdd4:	05c0      	lsls	r0, r0, #23
    bdd6:	0dc0      	lsrs	r0, r0, #23
    bdd8:	e7f9      	b.n	bdce <HAL_SPISend+0x42>
    bdda:	46c0      	nop			; (mov r8, r8)
    bddc:	20001d70 	.word	0x20001d70

0000bde0 <HAL_ResetPinMakeOutput>:
{
    bde0:	b500      	push	{lr}
    bde2:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    bde4:	a901      	add	r1, sp, #4
    bde6:	2301      	movs	r3, #1
    bde8:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    bdea:	2200      	movs	r2, #0
    bdec:	708a      	strb	r2, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    bdee:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    bdf0:	202f      	movs	r0, #47	; 0x2f
    bdf2:	4b02      	ldr	r3, [pc, #8]	; (bdfc <HAL_ResetPinMakeOutput+0x1c>)
    bdf4:	4798      	blx	r3
}
    bdf6:	b003      	add	sp, #12
    bdf8:	bd00      	pop	{pc}
    bdfa:	46c0      	nop			; (mov r8, r8)
    bdfc:	00005155 	.word	0x00005155

0000be00 <HAL_RadioDIO2Callback>:
{
    be00:	b510      	push	{r4, lr}
  if (interruptHandlerDio2)
    be02:	4b05      	ldr	r3, [pc, #20]	; (be18 <HAL_RadioDIO2Callback+0x18>)
    be04:	681b      	ldr	r3, [r3, #0]
    be06:	2b00      	cmp	r3, #0
    be08:	d004      	beq.n	be14 <HAL_RadioDIO2Callback+0x14>
	PMM_Wakeup();
    be0a:	4b04      	ldr	r3, [pc, #16]	; (be1c <HAL_RadioDIO2Callback+0x1c>)
    be0c:	4798      	blx	r3
    interruptHandlerDio2();
    be0e:	4b02      	ldr	r3, [pc, #8]	; (be18 <HAL_RadioDIO2Callback+0x18>)
    be10:	681b      	ldr	r3, [r3, #0]
    be12:	4798      	blx	r3
}
    be14:	bd10      	pop	{r4, pc}
    be16:	46c0      	nop			; (mov r8, r8)
    be18:	20001d6c 	.word	0x20001d6c
    be1c:	0000c249 	.word	0x0000c249

0000be20 <HAL_RadioDIO1Callback>:
{
    be20:	b510      	push	{r4, lr}
  if (interruptHandlerDio1)
    be22:	4b05      	ldr	r3, [pc, #20]	; (be38 <HAL_RadioDIO1Callback+0x18>)
    be24:	681b      	ldr	r3, [r3, #0]
    be26:	2b00      	cmp	r3, #0
    be28:	d004      	beq.n	be34 <HAL_RadioDIO1Callback+0x14>
	PMM_Wakeup();
    be2a:	4b04      	ldr	r3, [pc, #16]	; (be3c <HAL_RadioDIO1Callback+0x1c>)
    be2c:	4798      	blx	r3
    interruptHandlerDio1();
    be2e:	4b02      	ldr	r3, [pc, #8]	; (be38 <HAL_RadioDIO1Callback+0x18>)
    be30:	681b      	ldr	r3, [r3, #0]
    be32:	4798      	blx	r3
}
    be34:	bd10      	pop	{r4, pc}
    be36:	46c0      	nop			; (mov r8, r8)
    be38:	20001d68 	.word	0x20001d68
    be3c:	0000c249 	.word	0x0000c249

0000be40 <HAL_RadioDIO0Callback>:
{
    be40:	b510      	push	{r4, lr}
  if (interruptHandlerDio0)
    be42:	4b05      	ldr	r3, [pc, #20]	; (be58 <HAL_RadioDIO0Callback+0x18>)
    be44:	681b      	ldr	r3, [r3, #0]
    be46:	2b00      	cmp	r3, #0
    be48:	d004      	beq.n	be54 <HAL_RadioDIO0Callback+0x14>
	PMM_Wakeup();
    be4a:	4b04      	ldr	r3, [pc, #16]	; (be5c <HAL_RadioDIO0Callback+0x1c>)
    be4c:	4798      	blx	r3
    interruptHandlerDio0();
    be4e:	4b02      	ldr	r3, [pc, #8]	; (be58 <HAL_RadioDIO0Callback+0x18>)
    be50:	681b      	ldr	r3, [r3, #0]
    be52:	4798      	blx	r3
}
    be54:	bd10      	pop	{r4, pc}
    be56:	46c0      	nop			; (mov r8, r8)
    be58:	20001d64 	.word	0x20001d64
    be5c:	0000c249 	.word	0x0000c249

0000be60 <HAL_SPICSAssert>:
{
    be60:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, true);
    be62:	2201      	movs	r2, #1
    be64:	4902      	ldr	r1, [pc, #8]	; (be70 <HAL_SPICSAssert+0x10>)
    be66:	4803      	ldr	r0, [pc, #12]	; (be74 <HAL_SPICSAssert+0x14>)
    be68:	4b03      	ldr	r3, [pc, #12]	; (be78 <HAL_SPICSAssert+0x18>)
    be6a:	4798      	blx	r3
}
    be6c:	bd10      	pop	{r4, pc}
    be6e:	46c0      	nop			; (mov r8, r8)
    be70:	20002b0c 	.word	0x20002b0c
    be74:	20001d70 	.word	0x20001d70
    be78:	00005a29 	.word	0x00005a29

0000be7c <HAL_SPICSDeassert>:
{
    be7c:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, false);
    be7e:	2200      	movs	r2, #0
    be80:	4902      	ldr	r1, [pc, #8]	; (be8c <HAL_SPICSDeassert+0x10>)
    be82:	4803      	ldr	r0, [pc, #12]	; (be90 <HAL_SPICSDeassert+0x14>)
    be84:	4b03      	ldr	r3, [pc, #12]	; (be94 <HAL_SPICSDeassert+0x18>)
    be86:	4798      	blx	r3
}
    be88:	bd10      	pop	{r4, pc}
    be8a:	46c0      	nop			; (mov r8, r8)
    be8c:	20002b0c 	.word	0x20002b0c
    be90:	20001d70 	.word	0x20001d70
    be94:	00005a29 	.word	0x00005a29

0000be98 <HAL_RadioInit>:
{
    be98:	b5f0      	push	{r4, r5, r6, r7, lr}
    be9a:	46d6      	mov	lr, sl
    be9c:	464f      	mov	r7, r9
    be9e:	4646      	mov	r6, r8
    bea0:	b5c0      	push	{r6, r7, lr}
    bea2:	b090      	sub	sp, #64	; 0x40
	config->input_pull = PORT_PIN_PULL_UP;
    bea4:	ac01      	add	r4, sp, #4
    bea6:	2601      	movs	r6, #1
    bea8:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    beaa:	2500      	movs	r5, #0
    beac:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    beae:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(SX_RF_SPI_SCK, &pin_conf);
    beb0:	0021      	movs	r1, r4
    beb2:	2052      	movs	r0, #82	; 0x52
    beb4:	4f52      	ldr	r7, [pc, #328]	; (c000 <HAL_RadioInit+0x168>)
    beb6:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_MOSI, &pin_conf);
    beb8:	0021      	movs	r1, r4
    beba:	203e      	movs	r0, #62	; 0x3e
    bebc:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_CS, &pin_conf);
    bebe:	0021      	movs	r1, r4
    bec0:	203f      	movs	r0, #63	; 0x3f
    bec2:	47b8      	blx	r7
	port_pin_set_config(SX_RF_RESET_PIN, &pin_conf);
    bec4:	0021      	movs	r1, r4
    bec6:	202f      	movs	r0, #47	; 0x2f
    bec8:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    beca:	2280      	movs	r2, #128	; 0x80
    becc:	02d2      	lsls	r2, r2, #11
    bece:	4b4d      	ldr	r3, [pc, #308]	; (c004 <HAL_RadioInit+0x16c>)
    bed0:	619a      	str	r2, [r3, #24]
    bed2:	4b4d      	ldr	r3, [pc, #308]	; (c008 <HAL_RadioInit+0x170>)
    bed4:	2280      	movs	r2, #128	; 0x80
    bed6:	05d2      	lsls	r2, r2, #23
    bed8:	619a      	str	r2, [r3, #24]
    beda:	2280      	movs	r2, #128	; 0x80
    bedc:	0612      	lsls	r2, r2, #24
    bede:	619a      	str	r2, [r3, #24]
    bee0:	2280      	movs	r2, #128	; 0x80
    bee2:	0212      	lsls	r2, r2, #8
    bee4:	619a      	str	r2, [r3, #24]
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    bee6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(SX_RF_SPI_MISO, &pin_conf);
    bee8:	0021      	movs	r1, r4
    beea:	2053      	movs	r0, #83	; 0x53
    beec:	47b8      	blx	r7
	extint_chan_get_config_defaults(&config_extint_chan);
    beee:	ac02      	add	r4, sp, #8
    bef0:	0020      	movs	r0, r4
    bef2:	4b46      	ldr	r3, [pc, #280]	; (c00c <HAL_RadioInit+0x174>)
    bef4:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO0_EIC_PIN;
    bef6:	2330      	movs	r3, #48	; 0x30
    bef8:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO0_EIC_MUX;
    befa:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    befc:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    befe:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO0_EIC_LINE, &config_extint_chan);
    bf00:	0021      	movs	r1, r4
    bf02:	2000      	movs	r0, #0
    bf04:	4b42      	ldr	r3, [pc, #264]	; (c010 <HAL_RadioInit+0x178>)
    bf06:	469a      	mov	sl, r3
    bf08:	4798      	blx	r3
	extint_register_callback(HAL_RadioDIO0Callback,DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    bf0a:	2200      	movs	r2, #0
    bf0c:	2100      	movs	r1, #0
    bf0e:	4841      	ldr	r0, [pc, #260]	; (c014 <HAL_RadioInit+0x17c>)
    bf10:	4b41      	ldr	r3, [pc, #260]	; (c018 <HAL_RadioInit+0x180>)
    bf12:	4699      	mov	r9, r3
    bf14:	4798      	blx	r3
	extint_chan_enable_callback(DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    bf16:	2100      	movs	r1, #0
    bf18:	2000      	movs	r0, #0
    bf1a:	4b40      	ldr	r3, [pc, #256]	; (c01c <HAL_RadioInit+0x184>)
    bf1c:	4698      	mov	r8, r3
    bf1e:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO1_EIC_PIN;
    bf20:	230b      	movs	r3, #11
    bf22:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO1_EIC_MUX;
    bf24:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    bf26:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    bf28:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO1_EIC_LINE, &config_extint_chan);
    bf2a:	0021      	movs	r1, r4
    bf2c:	200b      	movs	r0, #11
    bf2e:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO1Callback,DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    bf30:	2200      	movs	r2, #0
    bf32:	210b      	movs	r1, #11
    bf34:	483a      	ldr	r0, [pc, #232]	; (c020 <HAL_RadioInit+0x188>)
    bf36:	47c8      	blx	r9
	extint_chan_enable_callback(DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    bf38:	2100      	movs	r1, #0
    bf3a:	200b      	movs	r0, #11
    bf3c:	47c0      	blx	r8
	config_extint_chan.gpio_pin           = DIO2_EIC_PIN;
    bf3e:	230c      	movs	r3, #12
    bf40:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO2_EIC_MUX;
    bf42:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    bf44:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    bf46:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO2_EIC_LINE, &config_extint_chan);
    bf48:	0021      	movs	r1, r4
    bf4a:	200c      	movs	r0, #12
    bf4c:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO2Callback,DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    bf4e:	2200      	movs	r2, #0
    bf50:	210c      	movs	r1, #12
    bf52:	4834      	ldr	r0, [pc, #208]	; (c024 <HAL_RadioInit+0x18c>)
    bf54:	47c8      	blx	r9
	extint_chan_enable_callback(DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    bf56:	2100      	movs	r1, #0
    bf58:	200c      	movs	r0, #12
    bf5a:	47c0      	blx	r8
	slave->ss_pin          = config->ss_pin;
    bf5c:	4b32      	ldr	r3, [pc, #200]	; (c028 <HAL_RadioInit+0x190>)
    bf5e:	4698      	mov	r8, r3
    bf60:	233f      	movs	r3, #63	; 0x3f
    bf62:	4642      	mov	r2, r8
    bf64:	7013      	strb	r3, [r2, #0]
	slave->address_enabled = config->address_enabled;
    bf66:	7055      	strb	r5, [r2, #1]
	slave->address         = config->address;
    bf68:	7095      	strb	r5, [r2, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    bf6a:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    bf6c:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    bf6e:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    bf70:	0021      	movs	r1, r4
    bf72:	203f      	movs	r0, #63	; 0x3f
    bf74:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
    bf76:	4643      	mov	r3, r8
    bf78:	781a      	ldrb	r2, [r3, #0]
	if (port_index < PORT_INST_NUM) {
    bf7a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    bf7c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    bf7e:	2900      	cmp	r1, #0
    bf80:	d104      	bne.n	bf8c <HAL_RadioInit+0xf4>
		return &(ports[port_index]->Group[group_index]);
    bf82:	0953      	lsrs	r3, r2, #5
    bf84:	01db      	lsls	r3, r3, #7
    bf86:	4929      	ldr	r1, [pc, #164]	; (c02c <HAL_RadioInit+0x194>)
    bf88:	468c      	mov	ip, r1
    bf8a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    bf8c:	211f      	movs	r1, #31
    bf8e:	4011      	ands	r1, r2
    bf90:	2201      	movs	r2, #1
    bf92:	0010      	movs	r0, r2
    bf94:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    bf96:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    bf98:	ac02      	add	r4, sp, #8
    bf9a:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    bf9c:	2300      	movs	r3, #0
    bf9e:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    bfa0:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    bfa2:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    bfa4:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    bfa6:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    bfa8:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    bfaa:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    bfac:	3223      	adds	r2, #35	; 0x23
    bfae:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    bfb0:	3a18      	subs	r2, #24
    bfb2:	2100      	movs	r1, #0
    bfb4:	a808      	add	r0, sp, #32
    bfb6:	4b1e      	ldr	r3, [pc, #120]	; (c030 <HAL_RadioInit+0x198>)
    bfb8:	4798      	blx	r3
	config_spi_master.mode_specific.master.baudrate = SX_RF_SPI_BAUDRATE;
    bfba:	4b1e      	ldr	r3, [pc, #120]	; (c034 <HAL_RadioInit+0x19c>)
    bfbc:	61a3      	str	r3, [r4, #24]
	config_spi_master.mux_setting = SX_RF_SPI_SERCOM_MUX_SETTING;
    bfbe:	2380      	movs	r3, #128	; 0x80
    bfc0:	025b      	lsls	r3, r3, #9
    bfc2:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = SX_RF_SPI_SERCOM_PINMUX_PAD0;
    bfc4:	4b1c      	ldr	r3, [pc, #112]	; (c038 <HAL_RadioInit+0x1a0>)
    bfc6:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    bfc8:	2301      	movs	r3, #1
    bfca:	425b      	negs	r3, r3
    bfcc:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = SX_RF_SPI_SERCOM_PINMUX_PAD2;
    bfce:	4b1b      	ldr	r3, [pc, #108]	; (c03c <HAL_RadioInit+0x1a4>)
    bfd0:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = SX_RF_SPI_SERCOM_PINMUX_PAD3;
    bfd2:	4b1b      	ldr	r3, [pc, #108]	; (c040 <HAL_RadioInit+0x1a8>)
    bfd4:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, SX_RF_SPI, &config_spi_master);	
    bfd6:	4d1b      	ldr	r5, [pc, #108]	; (c044 <HAL_RadioInit+0x1ac>)
    bfd8:	0022      	movs	r2, r4
    bfda:	491b      	ldr	r1, [pc, #108]	; (c048 <HAL_RadioInit+0x1b0>)
    bfdc:	0028      	movs	r0, r5
    bfde:	4b1b      	ldr	r3, [pc, #108]	; (c04c <HAL_RadioInit+0x1b4>)
    bfe0:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    bfe2:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    bfe4:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    bfe6:	2b00      	cmp	r3, #0
    bfe8:	d1fc      	bne.n	bfe4 <HAL_RadioInit+0x14c>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    bfea:	6813      	ldr	r3, [r2, #0]
    bfec:	2102      	movs	r1, #2
    bfee:	430b      	orrs	r3, r1
    bff0:	6013      	str	r3, [r2, #0]
}
    bff2:	b010      	add	sp, #64	; 0x40
    bff4:	bc1c      	pop	{r2, r3, r4}
    bff6:	4690      	mov	r8, r2
    bff8:	4699      	mov	r9, r3
    bffa:	46a2      	mov	sl, r4
    bffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bffe:	46c0      	nop			; (mov r8, r8)
    c000:	00005155 	.word	0x00005155
    c004:	40002900 	.word	0x40002900
    c008:	40002880 	.word	0x40002880
    c00c:	00004ea1 	.word	0x00004ea1
    c010:	00004eb5 	.word	0x00004eb5
    c014:	0000be41 	.word	0x0000be41
    c018:	00004d61 	.word	0x00004d61
    c01c:	00004d8d 	.word	0x00004d8d
    c020:	0000be21 	.word	0x0000be21
    c024:	0000be01 	.word	0x0000be01
    c028:	20002b0c 	.word	0x20002b0c
    c02c:	40002800 	.word	0x40002800
    c030:	00014df1 	.word	0x00014df1
    c034:	001e8480 	.word	0x001e8480
    c038:	00530005 	.word	0x00530005
    c03c:	003e0005 	.word	0x003e0005
    c040:	00520005 	.word	0x00520005
    c044:	20001d70 	.word	0x20001d70
    c048:	42001000 	.word	0x42001000
    c04c:	000056dd 	.word	0x000056dd

0000c050 <RADIO_Reset>:
{
    c050:	b570      	push	{r4, r5, r6, lr}
    c052:	b082      	sub	sp, #8
	HAL_ResetPinMakeOutput();
    c054:	4c0a      	ldr	r4, [pc, #40]	; (c080 <RADIO_Reset+0x30>)
    c056:	47a0      	blx	r4
		port_base->OUTCLR.reg = pin_mask;
    c058:	4d0a      	ldr	r5, [pc, #40]	; (c084 <RADIO_Reset+0x34>)
    c05a:	2680      	movs	r6, #128	; 0x80
    c05c:	0236      	lsls	r6, r6, #8
    c05e:	616e      	str	r6, [r5, #20]
	SystemBlockingWaitMs(1);
    c060:	2001      	movs	r0, #1
    c062:	4b09      	ldr	r3, [pc, #36]	; (c088 <RADIO_Reset+0x38>)
    c064:	4798      	blx	r3
	config->direction  = PORT_PIN_DIR_INPUT;
    c066:	a901      	add	r1, sp, #4
    c068:	2300      	movs	r3, #0
    c06a:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    c06c:	2201      	movs	r2, #1
    c06e:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    c070:	708b      	strb	r3, [r1, #2]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    c072:	202f      	movs	r0, #47	; 0x2f
    c074:	4b05      	ldr	r3, [pc, #20]	; (c08c <RADIO_Reset+0x3c>)
    c076:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    c078:	61ae      	str	r6, [r5, #24]
	HAL_ResetPinMakeOutput();
    c07a:	47a0      	blx	r4
}
    c07c:	b002      	add	sp, #8
    c07e:	bd70      	pop	{r4, r5, r6, pc}
    c080:	0000bde1 	.word	0x0000bde1
    c084:	40002880 	.word	0x40002880
    c088:	0000c215 	.word	0x0000c215
    c08c:	00005155 	.word	0x00005155

0000c090 <RADIO_RegisterWrite>:
{
    c090:	b570      	push	{r4, r5, r6, lr}
    c092:	0004      	movs	r4, r0
    c094:	000d      	movs	r5, r1
	HAL_SPICSAssert();
    c096:	4b05      	ldr	r3, [pc, #20]	; (c0ac <RADIO_RegisterWrite+0x1c>)
    c098:	4798      	blx	r3
	HAL_SPISend(REG_WRITE_CMD | reg);
    c09a:	2080      	movs	r0, #128	; 0x80
    c09c:	4320      	orrs	r0, r4
    c09e:	4c04      	ldr	r4, [pc, #16]	; (c0b0 <RADIO_RegisterWrite+0x20>)
    c0a0:	47a0      	blx	r4
	HAL_SPISend(value);
    c0a2:	0028      	movs	r0, r5
    c0a4:	47a0      	blx	r4
	HAL_SPICSDeassert();
    c0a6:	4b03      	ldr	r3, [pc, #12]	; (c0b4 <RADIO_RegisterWrite+0x24>)
    c0a8:	4798      	blx	r3
}
    c0aa:	bd70      	pop	{r4, r5, r6, pc}
    c0ac:	0000be61 	.word	0x0000be61
    c0b0:	0000bd8d 	.word	0x0000bd8d
    c0b4:	0000be7d 	.word	0x0000be7d

0000c0b8 <RADIO_RegisterRead>:
{
    c0b8:	b510      	push	{r4, lr}
    c0ba:	0004      	movs	r4, r0
	HAL_SPICSAssert();
    c0bc:	4b06      	ldr	r3, [pc, #24]	; (c0d8 <RADIO_RegisterRead+0x20>)
    c0be:	4798      	blx	r3
	HAL_SPISend(reg);
    c0c0:	207f      	movs	r0, #127	; 0x7f
    c0c2:	4020      	ands	r0, r4
    c0c4:	4c05      	ldr	r4, [pc, #20]	; (c0dc <RADIO_RegisterRead+0x24>)
    c0c6:	47a0      	blx	r4
	readValue = HAL_SPISend(0xFF);
    c0c8:	20ff      	movs	r0, #255	; 0xff
    c0ca:	47a0      	blx	r4
    c0cc:	0004      	movs	r4, r0
	HAL_SPICSDeassert();
    c0ce:	4b04      	ldr	r3, [pc, #16]	; (c0e0 <RADIO_RegisterRead+0x28>)
    c0d0:	4798      	blx	r3
}
    c0d2:	0020      	movs	r0, r4
    c0d4:	bd10      	pop	{r4, pc}
    c0d6:	46c0      	nop			; (mov r8, r8)
    c0d8:	0000be61 	.word	0x0000be61
    c0dc:	0000bd8d 	.word	0x0000bd8d
    c0e0:	0000be7d 	.word	0x0000be7d

0000c0e4 <RADIO_FrameWrite>:
{
    c0e4:	b570      	push	{r4, r5, r6, lr}
    c0e6:	0004      	movs	r4, r0
    c0e8:	000e      	movs	r6, r1
    c0ea:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    c0ec:	4b0a      	ldr	r3, [pc, #40]	; (c118 <RADIO_FrameWrite+0x34>)
    c0ee:	4798      	blx	r3
    HAL_SPISend(REG_WRITE_CMD | offset);
    c0f0:	2080      	movs	r0, #128	; 0x80
    c0f2:	4320      	orrs	r0, r4
    c0f4:	4b09      	ldr	r3, [pc, #36]	; (c11c <RADIO_FrameWrite+0x38>)
    c0f6:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    c0f8:	2d00      	cmp	r5, #0
    c0fa:	d00a      	beq.n	c112 <RADIO_FrameWrite+0x2e>
    c0fc:	0034      	movs	r4, r6
    c0fe:	3d01      	subs	r5, #1
    c100:	b2ed      	uxtb	r5, r5
    c102:	3501      	adds	r5, #1
    c104:	1975      	adds	r5, r6, r5
	    HAL_SPISend(buffer[i]);
    c106:	4e05      	ldr	r6, [pc, #20]	; (c11c <RADIO_FrameWrite+0x38>)
    c108:	7820      	ldrb	r0, [r4, #0]
    c10a:	47b0      	blx	r6
    c10c:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    c10e:	42ac      	cmp	r4, r5
    c110:	d1fa      	bne.n	c108 <RADIO_FrameWrite+0x24>
    HAL_SPICSDeassert();
    c112:	4b03      	ldr	r3, [pc, #12]	; (c120 <RADIO_FrameWrite+0x3c>)
    c114:	4798      	blx	r3
}
    c116:	bd70      	pop	{r4, r5, r6, pc}
    c118:	0000be61 	.word	0x0000be61
    c11c:	0000bd8d 	.word	0x0000bd8d
    c120:	0000be7d 	.word	0x0000be7d

0000c124 <RADIO_FrameRead>:
{
    c124:	b570      	push	{r4, r5, r6, lr}
    c126:	0004      	movs	r4, r0
    c128:	000e      	movs	r6, r1
    c12a:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    c12c:	4b0a      	ldr	r3, [pc, #40]	; (c158 <RADIO_FrameRead+0x34>)
    c12e:	4798      	blx	r3
    HAL_SPISend(offset);
    c130:	0020      	movs	r0, r4
    c132:	4b0a      	ldr	r3, [pc, #40]	; (c15c <RADIO_FrameRead+0x38>)
    c134:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    c136:	2d00      	cmp	r5, #0
    c138:	d00b      	beq.n	c152 <RADIO_FrameRead+0x2e>
    c13a:	0034      	movs	r4, r6
    c13c:	3d01      	subs	r5, #1
    c13e:	b2ed      	uxtb	r5, r5
    c140:	3501      	adds	r5, #1
    c142:	1975      	adds	r5, r6, r5
	    buffer[i] = HAL_SPISend(0xFF);
    c144:	4e05      	ldr	r6, [pc, #20]	; (c15c <RADIO_FrameRead+0x38>)
    c146:	20ff      	movs	r0, #255	; 0xff
    c148:	47b0      	blx	r6
    c14a:	7020      	strb	r0, [r4, #0]
    c14c:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    c14e:	42ac      	cmp	r4, r5
    c150:	d1f9      	bne.n	c146 <RADIO_FrameRead+0x22>
    HAL_SPICSDeassert();
    c152:	4b03      	ldr	r3, [pc, #12]	; (c160 <RADIO_FrameRead+0x3c>)
    c154:	4798      	blx	r3
}
    c156:	bd70      	pop	{r4, r5, r6, pc}
    c158:	0000be61 	.word	0x0000be61
    c15c:	0000bd8d 	.word	0x0000bd8d
    c160:	0000be7d 	.word	0x0000be7d

0000c164 <HAL_RegisterDioInterruptHandler>:
 * \param[in] dioPin  - DIO pin
 * \param[in] handler - function to be called upon given DIO interrupt
 */
void HAL_RegisterDioInterruptHandler(uint8_t dioPin, DioInterruptHandler_t handler)
{
  switch (dioPin)
    c164:	2802      	cmp	r0, #2
    c166:	d007      	beq.n	c178 <HAL_RegisterDioInterruptHandler+0x14>
    c168:	2804      	cmp	r0, #4
    c16a:	d008      	beq.n	c17e <HAL_RegisterDioInterruptHandler+0x1a>
    c16c:	2801      	cmp	r0, #1
    c16e:	d000      	beq.n	c172 <HAL_RegisterDioInterruptHandler+0xe>
#endif

    default:
      break;
  }
}
    c170:	4770      	bx	lr
      interruptHandlerDio0 = handler;
    c172:	4b04      	ldr	r3, [pc, #16]	; (c184 <HAL_RegisterDioInterruptHandler+0x20>)
    c174:	6019      	str	r1, [r3, #0]
      break;
    c176:	e7fb      	b.n	c170 <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio1 = handler;
    c178:	4b03      	ldr	r3, [pc, #12]	; (c188 <HAL_RegisterDioInterruptHandler+0x24>)
    c17a:	6019      	str	r1, [r3, #0]
      break;
    c17c:	e7f8      	b.n	c170 <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio2 = handler;
    c17e:	4b03      	ldr	r3, [pc, #12]	; (c18c <HAL_RegisterDioInterruptHandler+0x28>)
    c180:	6019      	str	r1, [r3, #0]
}
    c182:	e7f5      	b.n	c170 <HAL_RegisterDioInterruptHandler+0xc>
    c184:	20001d64 	.word	0x20001d64
    c188:	20001d68 	.word	0x20001d68
    c18c:	20001d6c 	.word	0x20001d6c

0000c190 <HAL_EnableRFCtrl>:

void HAL_EnableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
   if (RFCtrl1 == RFO_HF)
    c190:	2801      	cmp	r0, #1
    c192:	d000      	beq.n	c196 <HAL_EnableRFCtrl+0x6>
   {
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_ACTIVE);		
   }
#endif	
}
    c194:	4770      	bx	lr
    c196:	2280      	movs	r2, #128	; 0x80
    c198:	0192      	lsls	r2, r2, #6
    c19a:	4b01      	ldr	r3, [pc, #4]	; (c1a0 <HAL_EnableRFCtrl+0x10>)
    c19c:	619a      	str	r2, [r3, #24]
    c19e:	e7f9      	b.n	c194 <HAL_EnableRFCtrl+0x4>
    c1a0:	40002800 	.word	0x40002800

0000c1a4 <HAL_DisableRFCtrl>:

void HAL_DisableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
	if (RFCtrl1 == RFO_HF)
    c1a4:	2801      	cmp	r0, #1
    c1a6:	d000      	beq.n	c1aa <HAL_DisableRFCtrl+0x6>
	{
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
	}
#endif	
}
    c1a8:	4770      	bx	lr
		port_base->OUTCLR.reg = pin_mask;
    c1aa:	2280      	movs	r2, #128	; 0x80
    c1ac:	0192      	lsls	r2, r2, #6
    c1ae:	4b01      	ldr	r3, [pc, #4]	; (c1b4 <HAL_DisableRFCtrl+0x10>)
    c1b0:	615a      	str	r2, [r3, #20]
    c1b2:	e7f9      	b.n	c1a8 <HAL_DisableRFCtrl+0x4>
    c1b4:	40002800 	.word	0x40002800

0000c1b8 <HAL_GetRadioClkStabilizationDelay>:
 * \param[out] Time value in ms
 */
uint8_t HAL_GetRadioClkStabilizationDelay(void)
{
	return RADIO_CLK_STABILITATION_DELAY;
}
    c1b8:	2002      	movs	r0, #2
    c1ba:	4770      	bx	lr

0000c1bc <HAL_GetRadioClkSrc>:
 * \param[out] Type of clock source TCXO or XTAL
 */
RadioClockSources_t HAL_GetRadioClkSrc(void)
{
	return RADIO_CLK_SRC;
}
    c1bc:	2000      	movs	r0, #0
    c1be:	4770      	bx	lr

0000c1c0 <HAL_TCXOPowerOn>:
 *
 * \param[in] None
 * \param[out] None
 */
void HAL_TCXOPowerOn(void)
{
    c1c0:	b510      	push	{r4, lr}
		port_base->OUTSET.reg = pin_mask;
    c1c2:	2280      	movs	r2, #128	; 0x80
    c1c4:	0092      	lsls	r2, r2, #2
    c1c6:	4b03      	ldr	r3, [pc, #12]	; (c1d4 <HAL_TCXOPowerOn+0x14>)
    c1c8:	619a      	str	r2, [r3, #24]
#ifdef TCXO_ENABLE
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_ACTIVE);
	delay_ms(RADIO_CLK_STABILITATION_DELAY);
    c1ca:	2002      	movs	r0, #2
    c1cc:	4b02      	ldr	r3, [pc, #8]	; (c1d8 <HAL_TCXOPowerOn+0x18>)
    c1ce:	4798      	blx	r3
#endif
}
    c1d0:	bd10      	pop	{r4, pc}
    c1d2:	46c0      	nop			; (mov r8, r8)
    c1d4:	40002800 	.word	0x40002800
    c1d8:	0000471d 	.word	0x0000471d

0000c1dc <HAL_TCXOPowerOff>:
		port_base->OUTCLR.reg = pin_mask;
    c1dc:	2280      	movs	r2, #128	; 0x80
    c1de:	0092      	lsls	r2, r2, #2
    c1e0:	4b01      	ldr	r3, [pc, #4]	; (c1e8 <HAL_TCXOPowerOff+0xc>)
    c1e2:	615a      	str	r2, [r3, #20]
void HAL_TCXOPowerOff(void)
{
#ifdef TCXO_ENABLE
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
}
    c1e4:	4770      	bx	lr
    c1e6:	46c0      	nop			; (mov r8, r8)
    c1e8:	40002800 	.word	0x40002800

0000c1ec <SleepTimerGetElapsedTime>:
/**
* \brief Calculate the Elapsed Time from the previous call of this function
* \retval Elapsed time in ticks
*/
uint32_t SleepTimerGetElapsedTime(void)
{
    c1ec:	b510      	push	{r4, lr}
	return rtc_count_get_count(&rtc);
    c1ee:	4802      	ldr	r0, [pc, #8]	; (c1f8 <SleepTimerGetElapsedTime+0xc>)
    c1f0:	4b02      	ldr	r3, [pc, #8]	; (c1fc <SleepTimerGetElapsedTime+0x10>)
    c1f2:	4798      	blx	r3
}
    c1f4:	bd10      	pop	{r4, pc}
    c1f6:	46c0      	nop			; (mov r8, r8)
    c1f8:	20002b10 	.word	0x20002b10
    c1fc:	00005185 	.word	0x00005185

0000c200 <SleepTimerStop>:

/**
* \brief Stop the sleep timer
*/
void SleepTimerStop(void)
{
    c200:	b510      	push	{r4, lr}
	rtc_count_disable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    c202:	2108      	movs	r1, #8
    c204:	4801      	ldr	r0, [pc, #4]	; (c20c <SleepTimerStop+0xc>)
    c206:	4b02      	ldr	r3, [pc, #8]	; (c210 <SleepTimerStop+0x10>)
    c208:	4798      	blx	r3
}
    c20a:	bd10      	pop	{r4, pc}
    c20c:	20002b10 	.word	0x20002b10
    c210:	000051b1 	.word	0x000051b1

0000c214 <SystemBlockingWaitMs>:
 * waiting with the MCU in sleep.
 * Find out how long it takes the MCU to go to and wake up from sleep to see if
 * it makes sense to go to sleep at all 
 */
void SystemBlockingWaitMs(uint32_t ms)
{
    c214:	b510      	push	{r4, lr}
#ifndef UT
    delay_ms(ms);
    c216:	2800      	cmp	r0, #0
    c218:	d103      	bne.n	c222 <SystemBlockingWaitMs+0xe>
    c21a:	2001      	movs	r0, #1
    c21c:	4b02      	ldr	r3, [pc, #8]	; (c228 <SystemBlockingWaitMs+0x14>)
    c21e:	4798      	blx	r3
#endif
}
    c220:	bd10      	pop	{r4, pc}
    delay_ms(ms);
    c222:	4b02      	ldr	r3, [pc, #8]	; (c22c <SystemBlockingWaitMs+0x18>)
    c224:	4798      	blx	r3
    c226:	e7fb      	b.n	c220 <SystemBlockingWaitMs+0xc>
    c228:	000046f1 	.word	0x000046f1
    c22c:	0000471d 	.word	0x0000471d

0000c230 <system_enter_critical_section>:
{

}

void system_enter_critical_section(void)
{
    c230:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
    c232:	4b01      	ldr	r3, [pc, #4]	; (c238 <system_enter_critical_section+0x8>)
    c234:	4798      	blx	r3
#ifndef UT
	system_interrupt_enter_critical_section();
#endif
}
    c236:	bd10      	pop	{r4, pc}
    c238:	00004aa5 	.word	0x00004aa5

0000c23c <system_leave_critical_section>:

void system_leave_critical_section(void)
{
    c23c:	b510      	push	{r4, lr}
	cpu_irq_leave_critical();
    c23e:	4b01      	ldr	r3, [pc, #4]	; (c244 <system_leave_critical_section+0x8>)
    c240:	4798      	blx	r3
#ifndef UT
	system_interrupt_leave_critical_section();
#endif
}
    c242:	bd10      	pop	{r4, pc}
    c244:	00004ae5 	.word	0x00004ae5

0000c248 <PMM_Wakeup>:

/**
* \brief Wakeup from sleep
*/
void PMM_Wakeup(void)
{
    c248:	b570      	push	{r4, r5, r6, lr}
    uint64_t sleptTimeUs = 0;

    if (PMM_STATE_SLEEP == pmmState)
    c24a:	4b16      	ldr	r3, [pc, #88]	; (c2a4 <PMM_Wakeup+0x5c>)
    c24c:	781b      	ldrb	r3, [r3, #0]
    c24e:	2b01      	cmp	r3, #1
    c250:	d000      	beq.n	c254 <PMM_Wakeup+0xc>
        {
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
            sleepReq = NULL;
        }
    }
}
    c252:	bd70      	pop	{r4, r5, r6, pc}
		pmmState = PMM_STATE_ACTIVE;
    c254:	2200      	movs	r2, #0
    c256:	4b13      	ldr	r3, [pc, #76]	; (c2a4 <PMM_Wakeup+0x5c>)
    c258:	701a      	strb	r2, [r3, #0]
        sleptTimeUs = SLEEP_TICKS_TO_US(SleepTimerGetElapsedTime());
    c25a:	4b13      	ldr	r3, [pc, #76]	; (c2a8 <PMM_Wakeup+0x60>)
    c25c:	4798      	blx	r3
    c25e:	4b13      	ldr	r3, [pc, #76]	; (c2ac <PMM_Wakeup+0x64>)
    c260:	4798      	blx	r3
    c262:	4913      	ldr	r1, [pc, #76]	; (c2b0 <PMM_Wakeup+0x68>)
    c264:	4b13      	ldr	r3, [pc, #76]	; (c2b4 <PMM_Wakeup+0x6c>)
    c266:	4798      	blx	r3
    c268:	4b13      	ldr	r3, [pc, #76]	; (c2b8 <PMM_Wakeup+0x70>)
    c26a:	4798      	blx	r3
    c26c:	0004      	movs	r4, r0
    c26e:	000d      	movs	r5, r1
        SleepTimerStop();
    c270:	4b12      	ldr	r3, [pc, #72]	; (c2bc <PMM_Wakeup+0x74>)
    c272:	4798      	blx	r3
        SystemTimerSync(sleptTimeUs);
    c274:	0020      	movs	r0, r4
    c276:	0029      	movs	r1, r5
    c278:	4b11      	ldr	r3, [pc, #68]	; (c2c0 <PMM_Wakeup+0x78>)
    c27a:	4798      	blx	r3
        if (sleepReq && sleepReq->pmmWakeupCallback)
    c27c:	4b11      	ldr	r3, [pc, #68]	; (c2c4 <PMM_Wakeup+0x7c>)
    c27e:	681b      	ldr	r3, [r3, #0]
    c280:	2b00      	cmp	r3, #0
    c282:	d0e6      	beq.n	c252 <PMM_Wakeup+0xa>
    c284:	689e      	ldr	r6, [r3, #8]
    c286:	2e00      	cmp	r6, #0
    c288:	d0e3      	beq.n	c252 <PMM_Wakeup+0xa>
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
    c28a:	22fa      	movs	r2, #250	; 0xfa
    c28c:	0092      	lsls	r2, r2, #2
    c28e:	2300      	movs	r3, #0
    c290:	0020      	movs	r0, r4
    c292:	0029      	movs	r1, r5
    c294:	4c0c      	ldr	r4, [pc, #48]	; (c2c8 <PMM_Wakeup+0x80>)
    c296:	47a0      	blx	r4
    c298:	47b0      	blx	r6
            sleepReq = NULL;
    c29a:	2200      	movs	r2, #0
    c29c:	4b09      	ldr	r3, [pc, #36]	; (c2c4 <PMM_Wakeup+0x7c>)
    c29e:	601a      	str	r2, [r3, #0]
}
    c2a0:	e7d7      	b.n	c252 <PMM_Wakeup+0xa>
    c2a2:	46c0      	nop			; (mov r8, r8)
    c2a4:	20001d7c 	.word	0x20001d7c
    c2a8:	0000c1ed 	.word	0x0000c1ed
    c2ac:	00012ef9 	.word	0x00012ef9
    c2b0:	41f423d7 	.word	0x41f423d7
    c2b4:	000128a1 	.word	0x000128a1
    c2b8:	00011fdd 	.word	0x00011fdd
    c2bc:	0000c201 	.word	0x0000c201
    c2c0:	0000cbe5 	.word	0x0000cbe5
    c2c4:	20001d80 	.word	0x20001d80
    c2c8:	00011edd 	.word	0x00011edd

0000c2cc <LORAREG_GetAttr>:
 * \param[out] Result of the GET operation
 * \retval LORAWAN_SUCCESS : If GET is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_GetAttr(LorawanRegionalAttributes_t attrType, void *attrInput, void *attrOutput)
{
    c2cc:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    c2ce:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    c2d0:	2836      	cmp	r0, #54	; 0x36
    c2d2:	d901      	bls.n	c2d8 <LORAREG_GetAttr+0xc>
	{
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
	}

	return result;
}
    c2d4:	0018      	movs	r0, r3
    c2d6:	bd10      	pop	{r4, pc}
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
    c2d8:	0084      	lsls	r4, r0, #2
    c2da:	4b02      	ldr	r3, [pc, #8]	; (c2e4 <LORAREG_GetAttr+0x18>)
    c2dc:	58e3      	ldr	r3, [r4, r3]
    c2de:	4798      	blx	r3
    c2e0:	0003      	movs	r3, r0
    c2e2:	e7f7      	b.n	c2d4 <LORAREG_GetAttr+0x8>
    c2e4:	20001d84 	.word	0x20001d84

0000c2e8 <LORAREG_ValidateAttr>:
 * \param[in] attrInput Input used to validate the attribute value
 * \retval LORAWAN_SUCCESS : If Validate is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_ValidateAttr(LorawanRegionalAttributes_t attrType, void *attrInput)
{
    c2e8:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    c2ea:	230a      	movs	r3, #10
	
	if(attrType < REG_NUM_ATTRIBUTES)
    c2ec:	2836      	cmp	r0, #54	; 0x36
    c2ee:	d901      	bls.n	c2f4 <LORAREG_ValidateAttr+0xc>
	{
	    result = pValidateAttr[attrType](attrType, attrInput);		
	}

	return result;
}
    c2f0:	0018      	movs	r0, r3
    c2f2:	bd10      	pop	{r4, pc}
	    result = pValidateAttr[attrType](attrType, attrInput);		
    c2f4:	0082      	lsls	r2, r0, #2
    c2f6:	4b02      	ldr	r3, [pc, #8]	; (c300 <LORAREG_ValidateAttr+0x18>)
    c2f8:	58d3      	ldr	r3, [r2, r3]
    c2fa:	4798      	blx	r3
    c2fc:	0003      	movs	r3, r0
    c2fe:	e7f7      	b.n	c2f0 <LORAREG_ValidateAttr+0x8>
    c300:	20001f3c 	.word	0x20001f3c

0000c304 <LORAREG_SetAttr>:
 * \param[in] attrInput Input used to update the attribute value
 * \retval LORAWAN_SUCCESS : If Update is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_SetAttr(LorawanRegionalAttributes_t attrType, void *attrInput)
{
    c304:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    c306:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    c308:	2836      	cmp	r0, #54	; 0x36
    c30a:	d901      	bls.n	c310 <LORAREG_SetAttr+0xc>
	{
	    result = pSetAttr[attrType](attrType, attrInput);		
	}

	return result;
}
    c30c:	0018      	movs	r0, r3
    c30e:	bd10      	pop	{r4, pc}
	    result = pSetAttr[attrType](attrType, attrInput);		
    c310:	0082      	lsls	r2, r0, #2
    c312:	4b02      	ldr	r3, [pc, #8]	; (c31c <LORAREG_SetAttr+0x18>)
    c314:	58d3      	ldr	r3, [r2, r3]
    c316:	4798      	blx	r3
    c318:	0003      	movs	r3, r0
    c31a:	e7f7      	b.n	c30c <LORAREG_SetAttr+0x8>
    c31c:	20001e60 	.word	0x20001e60

0000c320 <AESEncode>:
 * \brief Encrypts the given block of data
 * \param[in,out] block Block of input data to be encrypted
 * \param[in] key Cryptographic key to be used in AES encryption
 */
void AESEncode(unsigned char* block, unsigned char* masterKey)
{
    c320:	b5f0      	push	{r4, r5, r6, r7, lr}
    c322:	b083      	sub	sp, #12
    c324:	0004      	movs	r4, r0
    c326:	000e      	movs	r6, r1
#ifndef UT	
	
	/* Configure the AES. */
	g_aes_cfg.encrypt_mode = AES_ENCRYPTION;
    c328:	4a2b      	ldr	r2, [pc, #172]	; (c3d8 <AESEncode+0xb8>)
    c32a:	2101      	movs	r1, #1
    c32c:	7011      	strb	r1, [r2, #0]
	g_aes_cfg.key_size = AES_KEY_SIZE_128;
    c32e:	2300      	movs	r3, #0
    c330:	7053      	strb	r3, [r2, #1]
	g_aes_cfg.start_mode = AES_AUTO_START;
    c332:	7091      	strb	r1, [r2, #2]
	g_aes_cfg.opmode = AES_ECB_MODE;
    c334:	70d3      	strb	r3, [r2, #3]
	g_aes_cfg.cfb_size = AES_CFB_SIZE_128;
    c336:	7113      	strb	r3, [r2, #4]
	g_aes_cfg.lod = false;
    c338:	7213      	strb	r3, [r2, #8]
	aes_set_config(&aes_instance,AES, &g_aes_cfg);
    c33a:	4928      	ldr	r1, [pc, #160]	; (c3dc <AESEncode+0xbc>)
    c33c:	4828      	ldr	r0, [pc, #160]	; (c3e0 <AESEncode+0xc0>)
    c33e:	4b29      	ldr	r3, [pc, #164]	; (c3e4 <AESEncode+0xc4>)
    c340:	4798      	blx	r3
    c342:	2100      	movs	r1, #0
		uint8_t u8[4];
	}long_addr;
	uint8_t index;
	for (index = 0; index < 4; index++)
	{
		long_addr.u8[index] = *data++;
    c344:	ad01      	add	r5, sp, #4
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(masterKey+(i*(sizeof(uint32_t))));
    c346:	4f28      	ldr	r7, [pc, #160]	; (c3e8 <AESEncode+0xc8>)
    c348:	1870      	adds	r0, r6, r1
    c34a:	2300      	movs	r3, #0
    c34c:	5cc2      	ldrb	r2, [r0, r3]
    c34e:	555a      	strb	r2, [r3, r5]
    c350:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    c352:	2b04      	cmp	r3, #4
    c354:	d1fa      	bne.n	c34c <AESEncode+0x2c>
    c356:	9b01      	ldr	r3, [sp, #4]
    c358:	51cb      	str	r3, [r1, r7]
    c35a:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    c35c:	2910      	cmp	r1, #16
    c35e:	d1f3      	bne.n	c348 <AESEncode+0x28>
	}
	
	/* Set the cryptographic key. */
	aes_write_key(&aes_instance, io_data);
    c360:	4d1f      	ldr	r5, [pc, #124]	; (c3e0 <AESEncode+0xc0>)
    c362:	4921      	ldr	r1, [pc, #132]	; (c3e8 <AESEncode+0xc8>)
    c364:	0028      	movs	r0, r5
    c366:	4b21      	ldr	r3, [pc, #132]	; (c3ec <AESEncode+0xcc>)
    c368:	4798      	blx	r3
 */
static inline void aes_set_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg |= AES_CTRLB_NEWMSG;
    c36a:	682a      	ldr	r2, [r5, #0]
    c36c:	7913      	ldrb	r3, [r2, #4]
    c36e:	2102      	movs	r1, #2
    c370:	430b      	orrs	r3, r1
    c372:	7113      	strb	r3, [r2, #4]
    c374:	2100      	movs	r1, #0
		long_addr.u8[index] = *data++;
    c376:	ad01      	add	r5, sp, #4
	
	aes_set_new_message(&aes_instance);
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(block+(i*(sizeof(uint32_t))));			
    c378:	4e1b      	ldr	r6, [pc, #108]	; (c3e8 <AESEncode+0xc8>)
    c37a:	1860      	adds	r0, r4, r1
    c37c:	2300      	movs	r3, #0
    c37e:	5cc2      	ldrb	r2, [r0, r3]
    c380:	555a      	strb	r2, [r3, r5]
    c382:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    c384:	2b04      	cmp	r3, #4
    c386:	d1fa      	bne.n	c37e <AESEncode+0x5e>
    c388:	9b01      	ldr	r3, [sp, #4]
    c38a:	518b      	str	r3, [r1, r6]
    c38c:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    c38e:	2910      	cmp	r1, #16
    c390:	d1f3      	bne.n	c37a <AESEncode+0x5a>
	}
		
	/* Write the data to be ciphered to the input data registers. */
	aes_write_input_data(&aes_instance, io_data);
    c392:	4d13      	ldr	r5, [pc, #76]	; (c3e0 <AESEncode+0xc0>)
    c394:	4914      	ldr	r1, [pc, #80]	; (c3e8 <AESEncode+0xc8>)
    c396:	0028      	movs	r0, r5
    c398:	4b15      	ldr	r3, [pc, #84]	; (c3f0 <AESEncode+0xd0>)
    c39a:	4798      	blx	r3
 */
static inline void aes_clear_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg &= ~AES_CTRLB_NEWMSG;
    c39c:	682d      	ldr	r5, [r5, #0]
    c39e:	792b      	ldrb	r3, [r5, #4]
    c3a0:	2202      	movs	r2, #2
    c3a2:	4393      	bics	r3, r2
    c3a4:	712b      	strb	r3, [r5, #4]
	Assert(module->hw);

	uint32_t int_flags = module->hw->INTFLAG.reg;
	uint32_t status_flags = 0;

	if (int_flags & AES_INTFLAG_ENCCMP) {
    c3a6:	2101      	movs	r1, #1
		status_flags |= AES_ENCRYPTION_COMPLETE;
	}

	if (int_flags & AES_INTFLAG_GFMCMP) {
    c3a8:	2002      	movs	r0, #2
    c3aa:	e001      	b.n	c3b0 <AESEncode+0x90>
	aes_clear_new_message(&aes_instance);
	/* Wait for the end of the encryption process. */
	while (!(aes_get_status(&aes_instance) & AES_ENCRYPTION_COMPLETE)) {
    c3ac:	4211      	tst	r1, r2
    c3ae:	d107      	bne.n	c3c0 <AESEncode+0xa0>
	uint32_t int_flags = module->hw->INTFLAG.reg;
    c3b0:	79eb      	ldrb	r3, [r5, #7]
    c3b2:	b2db      	uxtb	r3, r3
	if (int_flags & AES_INTFLAG_ENCCMP) {
    c3b4:	000a      	movs	r2, r1
    c3b6:	401a      	ands	r2, r3
	if (int_flags & AES_INTFLAG_GFMCMP) {
    c3b8:	4218      	tst	r0, r3
    c3ba:	d0f7      	beq.n	c3ac <AESEncode+0x8c>
		status_flags |= AES_GF_MULTI_COMPLETE;
    c3bc:	4302      	orrs	r2, r0
    c3be:	e7f5      	b.n	c3ac <AESEncode+0x8c>
	}
	aes_read_output_data(&aes_instance,io_data);
    c3c0:	4d09      	ldr	r5, [pc, #36]	; (c3e8 <AESEncode+0xc8>)
    c3c2:	0029      	movs	r1, r5
    c3c4:	4806      	ldr	r0, [pc, #24]	; (c3e0 <AESEncode+0xc0>)
    c3c6:	4b0b      	ldr	r3, [pc, #44]	; (c3f4 <AESEncode+0xd4>)
    c3c8:	4798      	blx	r3
	
	memcpy(block,io_data,BLOCKSIZE);
    c3ca:	2210      	movs	r2, #16
    c3cc:	0029      	movs	r1, r5
    c3ce:	0020      	movs	r0, r4
    c3d0:	4b09      	ldr	r3, [pc, #36]	; (c3f8 <AESEncode+0xd8>)
    c3d2:	4798      	blx	r3
#endif	
}
    c3d4:	b003      	add	sp, #12
    c3d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c3d8:	20002b48 	.word	0x20002b48
    c3dc:	42003400 	.word	0x42003400
    c3e0:	20002b54 	.word	0x20002b54
    c3e4:	00004bbd 	.word	0x00004bbd
    c3e8:	20002018 	.word	0x20002018
    c3ec:	00004c51 	.word	0x00004c51
    c3f0:	00004c85 	.word	0x00004c85
    c3f4:	00004cd5 	.word	0x00004cd5
    c3f8:	00014ddf 	.word	0x00014ddf

0000c3fc <AESInit>:

/**
 * \brief Initializes the AES Engine.
 */
void AESInit(void)
{
    c3fc:	b570      	push	{r4, r5, r6, lr}
#ifndef UT	
	//! [setup_config]
	aes_get_config_defaults(&g_aes_cfg);
    c3fe:	4d07      	ldr	r5, [pc, #28]	; (c41c <AESInit+0x20>)
    c400:	0028      	movs	r0, r5
    c402:	4b07      	ldr	r3, [pc, #28]	; (c420 <AESInit+0x24>)
    c404:	4798      	blx	r3
	//! [setup_config]

	//! [setup_config_defaults]
	aes_init(&aes_instance,AES, &g_aes_cfg);
    c406:	4c07      	ldr	r4, [pc, #28]	; (c424 <AESInit+0x28>)
    c408:	002a      	movs	r2, r5
    c40a:	4907      	ldr	r1, [pc, #28]	; (c428 <AESInit+0x2c>)
    c40c:	0020      	movs	r0, r4
    c40e:	4b07      	ldr	r3, [pc, #28]	; (c42c <AESInit+0x30>)
    c410:	4798      	blx	r3
	//! [setup_config_defaults]
	//! [module_enable]
	aes_enable(&aes_instance);
    c412:	0020      	movs	r0, r4
    c414:	4b06      	ldr	r3, [pc, #24]	; (c430 <AESInit+0x34>)
    c416:	4798      	blx	r3
#endif	
}
    c418:	bd70      	pop	{r4, r5, r6, pc}
    c41a:	46c0      	nop			; (mov r8, r8)
    c41c:	20002b48 	.word	0x20002b48
    c420:	00004b81 	.word	0x00004b81
    c424:	20002b54 	.word	0x20002b54
    c428:	42003400 	.word	0x42003400
    c42c:	00004c31 	.word	0x00004c31
    c430:	00004b9b 	.word	0x00004b9b

0000c434 <hwTimerExpiryCallback>:
	SYS_HwOverflow_Cb();	 
}

/* ISR to handle CC0 interrupt from TC0 */
static void hwTimerExpiryCallback(void)
{
    c434:	b510      	push	{r4, lr}
    if (0 < runningTimers)
    c436:	4b06      	ldr	r3, [pc, #24]	; (c450 <hwTimerExpiryCallback+0x1c>)
    c438:	781b      	ldrb	r3, [r3, #0]
    c43a:	2b00      	cmp	r3, #0
    c43c:	d100      	bne.n	c440 <hwTimerExpiryCallback+0xc>
    {
        isTimerTriggered = true;
        SYSTEM_PostTask(TIMER_TASK_ID);
    }
}
    c43e:	bd10      	pop	{r4, pc}
        isTimerTriggered = true;
    c440:	2201      	movs	r2, #1
    c442:	4b04      	ldr	r3, [pc, #16]	; (c454 <hwTimerExpiryCallback+0x20>)
    c444:	701a      	strb	r2, [r3, #0]
        SYSTEM_PostTask(TIMER_TASK_ID);
    c446:	2001      	movs	r0, #1
    c448:	4b03      	ldr	r3, [pc, #12]	; (c458 <hwTimerExpiryCallback+0x24>)
    c44a:	4798      	blx	r3
}
    c44c:	e7f7      	b.n	c43e <hwTimerExpiryCallback+0xa>
    c44e:	46c0      	nop			; (mov r8, r8)
    c450:	20002038 	.word	0x20002038
    c454:	20002cee 	.word	0x20002cee
    c458:	0000cd29 	.word	0x0000cd29

0000c45c <hwTimerOverflowCallback>:
{
    c45c:	b510      	push	{r4, lr}
    c45e:	b082      	sub	sp, #8
    uint16_t temp = sysTime;
    c460:	4925      	ldr	r1, [pc, #148]	; (c4f8 <hwTimerOverflowCallback+0x9c>)
    c462:	880a      	ldrh	r2, [r1, #0]
    c464:	b292      	uxth	r2, r2
    if (++sysTime < temp)
    c466:	880b      	ldrh	r3, [r1, #0]
    c468:	3301      	adds	r3, #1
    c46a:	b29b      	uxth	r3, r3
    c46c:	800b      	strh	r3, [r1, #0]
    c46e:	429a      	cmp	r2, r3
    c470:	d903      	bls.n	c47a <hwTimerOverflowCallback+0x1e>
        sysTimeOvf++;
    c472:	4a22      	ldr	r2, [pc, #136]	; (c4fc <hwTimerOverflowCallback+0xa0>)
    c474:	6813      	ldr	r3, [r2, #0]
    c476:	3301      	adds	r3, #1
    c478:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    c47a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    c47e:	425a      	negs	r2, r3
    c480:	4153      	adcs	r3, r2
    c482:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    c484:	b672      	cpsid	i
    c486:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    c48a:	2200      	movs	r2, #0
    c48c:	4b1c      	ldr	r3, [pc, #112]	; (c500 <hwTimerOverflowCallback+0xa4>)
    c48e:	701a      	strb	r2, [r3, #0]
	return flags;
    c490:	9c01      	ldr	r4, [sp, #4]
{
    uint32_t tmo32;
    uint16_t tmoHigh16, tmoLow16;
    uint8_t flags = cpu_irq_save();

    if (SWTIMER_INVALID != runningTimerQueueHead && !swTimers[runningTimerQueueHead].loaded)
    c492:	4b1c      	ldr	r3, [pc, #112]	; (c504 <hwTimerOverflowCallback+0xa8>)
    c494:	681b      	ldr	r3, [r3, #0]
    c496:	2bff      	cmp	r3, #255	; 0xff
    c498:	d00d      	beq.n	c4b6 <hwTimerOverflowCallback+0x5a>
    c49a:	0119      	lsls	r1, r3, #4
    c49c:	4a1a      	ldr	r2, [pc, #104]	; (c508 <hwTimerOverflowCallback+0xac>)
    c49e:	1852      	adds	r2, r2, r1
    c4a0:	7b52      	ldrb	r2, [r2, #13]
    c4a2:	2a00      	cmp	r2, #0
    c4a4:	d107      	bne.n	c4b6 <hwTimerOverflowCallback+0x5a>
    {
        tmo32 = swTimers[runningTimerQueueHead].absoluteExpiryTime;
    c4a6:	4a18      	ldr	r2, [pc, #96]	; (c508 <hwTimerOverflowCallback+0xac>)
    c4a8:	5888      	ldr	r0, [r1, r2]
        tmoHigh16 = (uint16_t)(tmo32 >> SWTIMER_SYSTIME_SHIFTMASK);

        if (tmoHigh16 == sysTime)
    c4aa:	4b13      	ldr	r3, [pc, #76]	; (c4f8 <hwTimerOverflowCallback+0x9c>)
    c4ac:	881b      	ldrh	r3, [r3, #0]
    c4ae:	b29b      	uxth	r3, r3
    c4b0:	0c02      	lsrs	r2, r0, #16
    c4b2:	429a      	cmp	r2, r3
    c4b4:	d00c      	beq.n	c4d0 <hwTimerOverflowCallback+0x74>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    c4b6:	23ff      	movs	r3, #255	; 0xff
    c4b8:	4223      	tst	r3, r4
    c4ba:	d005      	beq.n	c4c8 <hwTimerOverflowCallback+0x6c>
		cpu_irq_enable();
    c4bc:	2201      	movs	r2, #1
    c4be:	4b10      	ldr	r3, [pc, #64]	; (c500 <hwTimerOverflowCallback+0xa4>)
    c4c0:	701a      	strb	r2, [r3, #0]
    c4c2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c4c6:	b662      	cpsie	i
	SYS_HwOverflow_Cb();	 
    c4c8:	4b10      	ldr	r3, [pc, #64]	; (c50c <hwTimerOverflowCallback+0xb0>)
    c4ca:	4798      	blx	r3
}
    c4cc:	b002      	add	sp, #8
    c4ce:	bd10      	pop	{r4, pc}
        {
            tmoLow16 = (uint16_t)(tmo32 & SWTIMER_HWTIME_MASK);
    c4d0:	b280      	uxth	r0, r0
            if (SWTIMER_MIN_TIMEOUT < tmoLow16)
    c4d2:	28ff      	cmp	r0, #255	; 0xff
    c4d4:	d909      	bls.n	c4ea <hwTimerOverflowCallback+0x8e>
            {
                common_tc_delay(tmoLow16);
    c4d6:	4b0e      	ldr	r3, [pc, #56]	; (c510 <hwTimerOverflowCallback+0xb4>)
    c4d8:	4798      	blx	r3
                swTimers[runningTimerQueueHead].loaded = true;
    c4da:	4b0a      	ldr	r3, [pc, #40]	; (c504 <hwTimerOverflowCallback+0xa8>)
    c4dc:	681a      	ldr	r2, [r3, #0]
    c4de:	0112      	lsls	r2, r2, #4
    c4e0:	4b09      	ldr	r3, [pc, #36]	; (c508 <hwTimerOverflowCallback+0xac>)
    c4e2:	189b      	adds	r3, r3, r2
    c4e4:	2201      	movs	r2, #1
    c4e6:	735a      	strb	r2, [r3, #13]
    c4e8:	e7e5      	b.n	c4b6 <hwTimerOverflowCallback+0x5a>
            }
            else
            {
                isTimerTriggered = true;
    c4ea:	2201      	movs	r2, #1
    c4ec:	4b09      	ldr	r3, [pc, #36]	; (c514 <hwTimerOverflowCallback+0xb8>)
    c4ee:	701a      	strb	r2, [r3, #0]
                SYSTEM_PostTask(TIMER_TASK_ID);
    c4f0:	2001      	movs	r0, #1
    c4f2:	4b09      	ldr	r3, [pc, #36]	; (c518 <hwTimerOverflowCallback+0xbc>)
    c4f4:	4798      	blx	r3
    c4f6:	e7de      	b.n	c4b6 <hwTimerOverflowCallback+0x5a>
    c4f8:	20002cec 	.word	0x20002cec
    c4fc:	20002cf0 	.word	0x20002cf0
    c500:	20000014 	.word	0x20000014
    c504:	20002034 	.word	0x20002034
    c508:	20002b5c 	.word	0x20002b5c
    c50c:	0000ba35 	.word	0x0000ba35
    c510:	00011a4d 	.word	0x00011a4d
    c514:	20002cee 	.word	0x20002cee
    c518:	0000cd29 	.word	0x0000cd29

0000c51c <loadHwTimer>:
{
    c51c:	b570      	push	{r4, r5, r6, lr}
    c51e:	0004      	movs	r4, r0
    if (SWTIMER_INVALID != timerId)
    c520:	28ff      	cmp	r0, #255	; 0xff
    c522:	d030      	beq.n	c586 <loadHwTimer+0x6a>
    time |= ((uint64_t) sysTimeOvf) << 32;
    c524:	4b19      	ldr	r3, [pc, #100]	; (c58c <loadHwTimer+0x70>)
    c526:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    c528:	4b19      	ldr	r3, [pc, #100]	; (c590 <loadHwTimer+0x74>)
    c52a:	881d      	ldrh	r5, [r3, #0]
    c52c:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    c52e:	4b19      	ldr	r3, [pc, #100]	; (c594 <loadHwTimer+0x78>)
    c530:	4798      	blx	r3
        uint32_t expiryTime = swTimers[timerId].absoluteExpiryTime;
    c532:	0123      	lsls	r3, r4, #4
    time |= (uint64_t) common_tc_read_count();
    c534:	4328      	orrs	r0, r5
    return ((t2 - t1) < INT32_MAX);
    c536:	4a18      	ldr	r2, [pc, #96]	; (c598 <loadHwTimer+0x7c>)
    c538:	589b      	ldr	r3, [r3, r2]
    c53a:	1a18      	subs	r0, r3, r0
        if (swtimerCompareTime(now, expiryTime))
    c53c:	4b17      	ldr	r3, [pc, #92]	; (c59c <loadHwTimer+0x80>)
    c53e:	4298      	cmp	r0, r3
    c540:	d81a      	bhi.n	c578 <loadHwTimer+0x5c>
            if (!swTimers[timerId].loaded)
    c542:	0122      	lsls	r2, r4, #4
    c544:	4b14      	ldr	r3, [pc, #80]	; (c598 <loadHwTimer+0x7c>)
    c546:	189b      	adds	r3, r3, r2
    c548:	7b5b      	ldrb	r3, [r3, #13]
    c54a:	2b00      	cmp	r3, #0
    c54c:	d11d      	bne.n	c58a <loadHwTimer+0x6e>
                if (SWTIMER_MIN_TIMEOUT >= timeDiff)
    c54e:	28ff      	cmp	r0, #255	; 0xff
    c550:	d90b      	bls.n	c56a <loadHwTimer+0x4e>
                else  if ((uint32_t)TIMER_PERIOD >= timeDiff)
    c552:	4b13      	ldr	r3, [pc, #76]	; (c5a0 <loadHwTimer+0x84>)
    c554:	4298      	cmp	r0, r3
    c556:	d818      	bhi.n	c58a <loadHwTimer+0x6e>
                    common_tc_delay((uint16_t)timeDiff);
    c558:	b280      	uxth	r0, r0
    c55a:	4b12      	ldr	r3, [pc, #72]	; (c5a4 <loadHwTimer+0x88>)
    c55c:	4798      	blx	r3
                    swTimers[timerId].loaded = true;
    c55e:	0124      	lsls	r4, r4, #4
    c560:	4b0d      	ldr	r3, [pc, #52]	; (c598 <loadHwTimer+0x7c>)
    c562:	191c      	adds	r4, r3, r4
    c564:	2301      	movs	r3, #1
    c566:	7363      	strb	r3, [r4, #13]
    c568:	e00f      	b.n	c58a <loadHwTimer+0x6e>
                    isTimerTriggered = true;
    c56a:	2201      	movs	r2, #1
    c56c:	4b0e      	ldr	r3, [pc, #56]	; (c5a8 <loadHwTimer+0x8c>)
    c56e:	701a      	strb	r2, [r3, #0]
                    SYSTEM_PostTask(TIMER_TASK_ID);
    c570:	2001      	movs	r0, #1
    c572:	4b0e      	ldr	r3, [pc, #56]	; (c5ac <loadHwTimer+0x90>)
    c574:	4798      	blx	r3
    c576:	e008      	b.n	c58a <loadHwTimer+0x6e>
            isTimerTriggered = true;
    c578:	2201      	movs	r2, #1
    c57a:	4b0b      	ldr	r3, [pc, #44]	; (c5a8 <loadHwTimer+0x8c>)
    c57c:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    c57e:	2001      	movs	r0, #1
    c580:	4b0a      	ldr	r3, [pc, #40]	; (c5ac <loadHwTimer+0x90>)
    c582:	4798      	blx	r3
    c584:	e001      	b.n	c58a <loadHwTimer+0x6e>
        common_tc_compare_stop();
    c586:	4b0a      	ldr	r3, [pc, #40]	; (c5b0 <loadHwTimer+0x94>)
    c588:	4798      	blx	r3
}
    c58a:	bd70      	pop	{r4, r5, r6, pc}
    c58c:	20002cf0 	.word	0x20002cf0
    c590:	20002cec 	.word	0x20002cec
    c594:	000119d9 	.word	0x000119d9
    c598:	20002b5c 	.word	0x20002b5c
    c59c:	7ffffffe 	.word	0x7ffffffe
    c5a0:	0000ffff 	.word	0x0000ffff
    c5a4:	00011a4d 	.word	0x00011a4d
    c5a8:	20002cee 	.word	0x20002cee
    c5ac:	0000cd29 	.word	0x0000cd29
    c5b0:	00011a25 	.word	0x00011a25

0000c5b4 <swtimerInternalHandler>:

/**************************************************************************//**
\brief Internal handler for the timer trigger
******************************************************************************/
static void swtimerInternalHandler(void)
{
    c5b4:	b510      	push	{r4, lr}
    if (isTimerTriggered)
    c5b6:	4b1d      	ldr	r3, [pc, #116]	; (c62c <swtimerInternalHandler+0x78>)
    c5b8:	781b      	ldrb	r3, [r3, #0]
    c5ba:	2b00      	cmp	r3, #0
    c5bc:	d027      	beq.n	c60e <swtimerInternalHandler+0x5a>
    {
        isTimerTriggered = false;
    c5be:	2200      	movs	r2, #0
    c5c0:	4b1a      	ldr	r3, [pc, #104]	; (c62c <swtimerInternalHandler+0x78>)
    c5c2:	701a      	strb	r2, [r3, #0]

        if (0 < runningTimers)
    c5c4:	4b1a      	ldr	r3, [pc, #104]	; (c630 <swtimerInternalHandler+0x7c>)
    c5c6:	781b      	ldrb	r3, [r3, #0]
    c5c8:	2b00      	cmp	r3, #0
    c5ca:	d020      	beq.n	c60e <swtimerInternalHandler+0x5a>
        { /* Holds the number of running timers */
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    c5cc:	4b19      	ldr	r3, [pc, #100]	; (c634 <swtimerInternalHandler+0x80>)
    c5ce:	681b      	ldr	r3, [r3, #0]
    c5d0:	2bff      	cmp	r3, #255	; 0xff
    c5d2:	d01d      	beq.n	c610 <swtimerInternalHandler+0x5c>
                expiredTimerQueueHead = runningTimerQueueHead;
                expiredTimerQueueTail = runningTimerQueueHead;
            }
            else
            { /* there were already some timers expired before this one */
                swTimers[expiredTimerQueueTail].nextTimer = runningTimerQueueHead;
    c5d4:	4b18      	ldr	r3, [pc, #96]	; (c638 <swtimerInternalHandler+0x84>)
    c5d6:	6818      	ldr	r0, [r3, #0]
    c5d8:	4918      	ldr	r1, [pc, #96]	; (c63c <swtimerInternalHandler+0x88>)
    c5da:	680b      	ldr	r3, [r1, #0]
    c5dc:	011a      	lsls	r2, r3, #4
    c5de:	4b18      	ldr	r3, [pc, #96]	; (c640 <swtimerInternalHandler+0x8c>)
    c5e0:	189b      	adds	r3, r3, r2
    c5e2:	7318      	strb	r0, [r3, #12]
                expiredTimerQueueTail = runningTimerQueueHead;
    c5e4:	6008      	str	r0, [r1, #0]
            }

            runningTimerQueueHead = swTimers[runningTimerQueueHead].nextTimer;
    c5e6:	4a16      	ldr	r2, [pc, #88]	; (c640 <swtimerInternalHandler+0x8c>)
    c5e8:	4913      	ldr	r1, [pc, #76]	; (c638 <swtimerInternalHandler+0x84>)
    c5ea:	680b      	ldr	r3, [r1, #0]
    c5ec:	011b      	lsls	r3, r3, #4
    c5ee:	18d3      	adds	r3, r2, r3
    c5f0:	7b18      	ldrb	r0, [r3, #12]
    c5f2:	6008      	str	r0, [r1, #0]

            swTimers[expiredTimerQueueTail].nextTimer = SWTIMER_INVALID;
    c5f4:	4b11      	ldr	r3, [pc, #68]	; (c63c <swtimerInternalHandler+0x88>)
    c5f6:	681b      	ldr	r3, [r3, #0]
    c5f8:	011b      	lsls	r3, r3, #4
    c5fa:	18d2      	adds	r2, r2, r3
    c5fc:	23ff      	movs	r3, #255	; 0xff
    c5fe:	7313      	strb	r3, [r2, #12]

            if ((--runningTimers) > 0)
    c600:	4a0b      	ldr	r2, [pc, #44]	; (c630 <swtimerInternalHandler+0x7c>)
    c602:	7813      	ldrb	r3, [r2, #0]
    c604:	3b01      	subs	r3, #1
    c606:	b2db      	uxtb	r3, r3
    c608:	7013      	strb	r3, [r2, #0]
    c60a:	2b00      	cmp	r3, #0
    c60c:	d10b      	bne.n	c626 <swtimerInternalHandler+0x72>
            { /* keep the ball rolling! load the next head timer from the queue */
                loadHwTimer(runningTimerQueueHead);
            }
        }
    }
}
    c60e:	bd10      	pop	{r4, pc}
                (expiredTimerQueueTail == SWTIMER_INVALID))
    c610:	4b0a      	ldr	r3, [pc, #40]	; (c63c <swtimerInternalHandler+0x88>)
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    c612:	681b      	ldr	r3, [r3, #0]
    c614:	2bff      	cmp	r3, #255	; 0xff
    c616:	d1dd      	bne.n	c5d4 <swtimerInternalHandler+0x20>
                expiredTimerQueueHead = runningTimerQueueHead;
    c618:	4b07      	ldr	r3, [pc, #28]	; (c638 <swtimerInternalHandler+0x84>)
    c61a:	681b      	ldr	r3, [r3, #0]
    c61c:	4a05      	ldr	r2, [pc, #20]	; (c634 <swtimerInternalHandler+0x80>)
    c61e:	6013      	str	r3, [r2, #0]
                expiredTimerQueueTail = runningTimerQueueHead;
    c620:	4a06      	ldr	r2, [pc, #24]	; (c63c <swtimerInternalHandler+0x88>)
    c622:	6013      	str	r3, [r2, #0]
    c624:	e7df      	b.n	c5e6 <swtimerInternalHandler+0x32>
                loadHwTimer(runningTimerQueueHead);
    c626:	4b07      	ldr	r3, [pc, #28]	; (c644 <swtimerInternalHandler+0x90>)
    c628:	4798      	blx	r3
}
    c62a:	e7f0      	b.n	c60e <swtimerInternalHandler+0x5a>
    c62c:	20002cee 	.word	0x20002cee
    c630:	20002038 	.word	0x20002038
    c634:	2000202c 	.word	0x2000202c
    c638:	20002034 	.word	0x20002034
    c63c:	20002030 	.word	0x20002030
    c640:	20002b5c 	.word	0x20002b5c
    c644:	0000c51d 	.word	0x0000c51d

0000c648 <SwTimerReset>:
    /*
    * Initialize the timer resources like timer arrays queues, timer registers
    */
    uint8_t index;

    runningTimers = 0u;
    c648:	2300      	movs	r3, #0
    c64a:	4a0d      	ldr	r2, [pc, #52]	; (c680 <SwTimerReset+0x38>)
    c64c:	7013      	strb	r3, [r2, #0]
    isTimerTriggered = false;
    c64e:	4a0d      	ldr	r2, [pc, #52]	; (c684 <SwTimerReset+0x3c>)
    c650:	7013      	strb	r3, [r2, #0]

    runningTimerQueueHead = SWTIMER_INVALID;
    c652:	33ff      	adds	r3, #255	; 0xff
    c654:	4a0c      	ldr	r2, [pc, #48]	; (c688 <SwTimerReset+0x40>)
    c656:	6013      	str	r3, [r2, #0]
    expiredTimerQueueHead = SWTIMER_INVALID;
    c658:	4a0c      	ldr	r2, [pc, #48]	; (c68c <SwTimerReset+0x44>)
    c65a:	6013      	str	r3, [r2, #0]
    expiredTimerQueueTail = SWTIMER_INVALID;
    c65c:	4a0c      	ldr	r2, [pc, #48]	; (c690 <SwTimerReset+0x48>)
    c65e:	6013      	str	r3, [r2, #0]
    c660:	4b0c      	ldr	r3, [pc, #48]	; (c694 <SwTimerReset+0x4c>)
    c662:	0018      	movs	r0, r3
    c664:	3091      	adds	r0, #145	; 0x91
    c666:	30ff      	adds	r0, #255	; 0xff

    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    {
        swTimers[index].nextTimer = SWTIMER_INVALID;
    c668:	21ff      	movs	r1, #255	; 0xff
        swTimers[index].timerCb = NULL;
    c66a:	2200      	movs	r2, #0
        swTimers[index].nextTimer = SWTIMER_INVALID;
    c66c:	7219      	strb	r1, [r3, #8]
        swTimers[index].timerCb = NULL;
    c66e:	601a      	str	r2, [r3, #0]
    c670:	3310      	adds	r3, #16
    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    c672:	4283      	cmp	r3, r0
    c674:	d1fa      	bne.n	c66c <SwTimerReset+0x24>
    }

    allocatedTimerId = 0u;
    c676:	2200      	movs	r2, #0
    c678:	4b07      	ldr	r3, [pc, #28]	; (c698 <SwTimerReset+0x50>)
    c67a:	701a      	strb	r2, [r3, #0]
}
    c67c:	4770      	bx	lr
    c67e:	46c0      	nop			; (mov r8, r8)
    c680:	20002038 	.word	0x20002038
    c684:	20002cee 	.word	0x20002cee
    c688:	20002034 	.word	0x20002034
    c68c:	2000202c 	.word	0x2000202c
    c690:	20002030 	.word	0x20002030
    c694:	20002b60 	.word	0x20002b60
    c698:	20002028 	.word	0x20002028

0000c69c <SystemTimerInit>:

/**************************************************************************//**
\brief Initializes the Software Timer module
******************************************************************************/
void SystemTimerInit(void)
{
    c69c:	b510      	push	{r4, lr}
    SwTimerReset();
    c69e:	4b08      	ldr	r3, [pc, #32]	; (c6c0 <SystemTimerInit+0x24>)
    c6a0:	4798      	blx	r3

    /* initialize system time parameters */
    sysTimeOvf = sysTime = 0u;
    c6a2:	2300      	movs	r3, #0
    c6a4:	4a07      	ldr	r2, [pc, #28]	; (c6c4 <SystemTimerInit+0x28>)
    c6a6:	8013      	strh	r3, [r2, #0]
    c6a8:	4a07      	ldr	r2, [pc, #28]	; (c6c8 <SystemTimerInit+0x2c>)
    c6aa:	6013      	str	r3, [r2, #0]

    common_tc_init();
    c6ac:	4b07      	ldr	r3, [pc, #28]	; (c6cc <SystemTimerInit+0x30>)
    c6ae:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    c6b0:	4807      	ldr	r0, [pc, #28]	; (c6d0 <SystemTimerInit+0x34>)
    c6b2:	4b08      	ldr	r3, [pc, #32]	; (c6d4 <SystemTimerInit+0x38>)
    c6b4:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    c6b6:	4808      	ldr	r0, [pc, #32]	; (c6d8 <SystemTimerInit+0x3c>)
    c6b8:	4b08      	ldr	r3, [pc, #32]	; (c6dc <SystemTimerInit+0x40>)
    c6ba:	4798      	blx	r3
}
    c6bc:	bd10      	pop	{r4, pc}
    c6be:	46c0      	nop			; (mov r8, r8)
    c6c0:	0000c649 	.word	0x0000c649
    c6c4:	20002cec 	.word	0x20002cec
    c6c8:	20002cf0 	.word	0x20002cf0
    c6cc:	00011ab9 	.word	0x00011ab9
    c6d0:	0000c45d 	.word	0x0000c45d
    c6d4:	00011b3d 	.word	0x00011b3d
    c6d8:	0000c435 	.word	0x0000c435
    c6dc:	00011b49 	.word	0x00011b49

0000c6e0 <SwTimerGetTime>:
/**************************************************************************//**
\brief Get current system time.
\return Returns current system time in microseconds
******************************************************************************/
uint64_t SwTimerGetTime(void)
{
    c6e0:	b570      	push	{r4, r5, r6, lr}
    time |= ((uint64_t) sysTimeOvf) << 32;
    c6e2:	4b05      	ldr	r3, [pc, #20]	; (c6f8 <SwTimerGetTime+0x18>)
    c6e4:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    c6e6:	4b05      	ldr	r3, [pc, #20]	; (c6fc <SwTimerGetTime+0x1c>)
    c6e8:	881d      	ldrh	r5, [r3, #0]
    c6ea:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    c6ec:	4b04      	ldr	r3, [pc, #16]	; (c700 <SwTimerGetTime+0x20>)
    c6ee:	4798      	blx	r3
    c6f0:	4328      	orrs	r0, r5
    return gettime();
}
    c6f2:	0021      	movs	r1, r4
    c6f4:	bd70      	pop	{r4, r5, r6, pc}
    c6f6:	46c0      	nop			; (mov r8, r8)
    c6f8:	20002cf0 	.word	0x20002cf0
    c6fc:	20002cec 	.word	0x20002cec
    c700:	000119d9 	.word	0x000119d9

0000c704 <SwTimerCreate>:

\return LORAWAN_SUCCESS if new timerId is allocated
        LORAWAN_RESOURCE_UNAVAILABLE if there is no more timerId to allocate
******************************************************************************/
StackRetStatus_t SwTimerCreate(uint8_t *timerId)
{
    c704:	b510      	push	{r4, lr}
    c706:	0004      	movs	r4, r0
    StackRetStatus_t retVal = LORAWAN_SUCCESS;

    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    c708:	4b08      	ldr	r3, [pc, #32]	; (c72c <SwTimerCreate+0x28>)
    c70a:	781b      	ldrb	r3, [r3, #0]
        * If you reach this spot it means the TOTAL_NUMBER_OF_SW_TIMERS
        * is #defined to a lower value than the number of timers that have
        * been SwTimerCreate()
        */
        SYS_ASSERT_FATAL(ASSERT_HAL_TIMERID_EXHAUSTED);
        retVal = LORAWAN_RESOURCE_UNAVAILABLE;
    c70c:	2014      	movs	r0, #20
    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    c70e:	2b18      	cmp	r3, #24
    c710:	d900      	bls.n	c714 <SwTimerCreate+0x10>
    }

    return retVal;
}
    c712:	bd10      	pop	{r4, pc}
        ATOMIC_SECTION_ENTER
    c714:	4b06      	ldr	r3, [pc, #24]	; (c730 <SwTimerCreate+0x2c>)
    c716:	4798      	blx	r3
        *timerId = allocatedTimerId;
    c718:	4a04      	ldr	r2, [pc, #16]	; (c72c <SwTimerCreate+0x28>)
    c71a:	7813      	ldrb	r3, [r2, #0]
    c71c:	7023      	strb	r3, [r4, #0]
        allocatedTimerId++;
    c71e:	3301      	adds	r3, #1
    c720:	7013      	strb	r3, [r2, #0]
        ATOMIC_SECTION_EXIT
    c722:	4b04      	ldr	r3, [pc, #16]	; (c734 <SwTimerCreate+0x30>)
    c724:	4798      	blx	r3
    StackRetStatus_t retVal = LORAWAN_SUCCESS;
    c726:	2008      	movs	r0, #8
    c728:	e7f3      	b.n	c712 <SwTimerCreate+0xe>
    c72a:	46c0      	nop			; (mov r8, r8)
    c72c:	20002028 	.word	0x20002028
    c730:	0000c231 	.word	0x0000c231
    c734:	0000c23d 	.word	0x0000c23d

0000c738 <SwTimerStart>:
        LORAWAN_INVALID_REQUEST if \timerId is already running
        LORAWAN_SUCCESS if \timerId is successfully queued for running
******************************************************************************/
StackRetStatus_t SwTimerStart(uint8_t timerId, uint32_t timerCount,
    SwTimeoutType_t timeoutType, void *timerCb, void *paramCb)
{
    c738:	b5f0      	push	{r4, r5, r6, r7, lr}
    c73a:	46d6      	mov	lr, sl
    c73c:	464f      	mov	r7, r9
    c73e:	4646      	mov	r6, r8
    c740:	b5c0      	push	{r6, r7, lr}
    c742:	b084      	sub	sp, #16
    c744:	0007      	movs	r7, r0
    c746:	000d      	movs	r5, r1
    c748:	0016      	movs	r6, r2
    c74a:	001c      	movs	r4, r3
    uint32_t pointInTime;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    c74c:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    c74e:	2f18      	cmp	r7, #24
    c750:	d809      	bhi.n	c766 <SwTimerStart+0x2e>
    c752:	2b00      	cmp	r3, #0
    c754:	d100      	bne.n	c758 <SwTimerStart+0x20>
    c756:	e08c      	b.n	c872 <SwTimerStart+0x13a>
    }

    if (NULL != swTimers[timerId].timerCb)
    c758:	013a      	lsls	r2, r7, #4
    c75a:	4b52      	ldr	r3, [pc, #328]	; (c8a4 <SwTimerStart+0x16c>)
    c75c:	189b      	adds	r3, r3, r2
    c75e:	685b      	ldr	r3, [r3, #4]
        /*
        * Timer is already running if the callback function of the
        * corresponding timer index in the timer array is not NULL.
        */
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_REQUEST;
    c760:	300b      	adds	r0, #11
    if (NULL != swTimers[timerId].timerCb)
    c762:	2b00      	cmp	r3, #0
    c764:	d005      	beq.n	c772 <SwTimerStart+0x3a>
        }
    }

    swtimerStartAbsoluteTimer(timerId, pointInTime, timerCb, paramCb);
    return LORAWAN_SUCCESS;
}
    c766:	b004      	add	sp, #16
    c768:	bc1c      	pop	{r2, r3, r4}
    c76a:	4690      	mov	r8, r2
    c76c:	4699      	mov	r9, r3
    c76e:	46a2      	mov	sl, r4
    c770:	bdf0      	pop	{r4, r5, r6, r7, pc}
    time |= ((uint64_t) sysTimeOvf) << 32;
    c772:	4b4d      	ldr	r3, [pc, #308]	; (c8a8 <SwTimerStart+0x170>)
    c774:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    c776:	4b4d      	ldr	r3, [pc, #308]	; (c8ac <SwTimerStart+0x174>)
    c778:	8818      	ldrh	r0, [r3, #0]
    c77a:	0403      	lsls	r3, r0, #16
    c77c:	4698      	mov	r8, r3
    time |= (uint64_t) common_tc_read_count();
    c77e:	4b4c      	ldr	r3, [pc, #304]	; (c8b0 <SwTimerStart+0x178>)
    c780:	4798      	blx	r3
    c782:	4643      	mov	r3, r8
    c784:	4303      	orrs	r3, r0
    switch (timeoutType)
    c786:	2e00      	cmp	r6, #0
    c788:	d003      	beq.n	c792 <SwTimerStart+0x5a>
    c78a:	2e01      	cmp	r6, #1
    c78c:	d038      	beq.n	c800 <SwTimerStart+0xc8>
            return LORAWAN_INVALID_PARAMETER;
    c78e:	200a      	movs	r0, #10
    c790:	e7e9      	b.n	c766 <SwTimerStart+0x2e>
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    c792:	4948      	ldr	r1, [pc, #288]	; (c8b4 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    c794:	200a      	movs	r0, #10
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    c796:	002a      	movs	r2, r5
    c798:	3aff      	subs	r2, #255	; 0xff
            pointInTime = ADD_TIME(timerCount, now);
    c79a:	18ed      	adds	r5, r5, r3
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    c79c:	428a      	cmp	r2, r1
    c79e:	d8e2      	bhi.n	c766 <SwTimerStart+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    c7a0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    c7a4:	425a      	negs	r2, r3
    c7a6:	4153      	adcs	r3, r2
    c7a8:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    c7aa:	b672      	cpsid	i
    c7ac:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    c7b0:	2600      	movs	r6, #0
    c7b2:	4b41      	ldr	r3, [pc, #260]	; (c8b8 <SwTimerStart+0x180>)
    c7b4:	701e      	strb	r6, [r3, #0]
	return flags;
    c7b6:	9b03      	ldr	r3, [sp, #12]
    c7b8:	4699      	mov	r9, r3
    swtimerInternalHandler();
    c7ba:	4b40      	ldr	r3, [pc, #256]	; (c8bc <SwTimerStart+0x184>)
    c7bc:	4798      	blx	r3
    swTimers[timerId].absoluteExpiryTime = pointInTime;
    c7be:	4b39      	ldr	r3, [pc, #228]	; (c8a4 <SwTimerStart+0x16c>)
    c7c0:	013a      	lsls	r2, r7, #4
    c7c2:	50d5      	str	r5, [r2, r3]
    swTimers[timerId].timerCb = (void (*)(void*))handlerCb;
    c7c4:	189b      	adds	r3, r3, r2
    c7c6:	605c      	str	r4, [r3, #4]
    swTimers[timerId].paramCb = parameter;
    c7c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c7ca:	609a      	str	r2, [r3, #8]
    swTimers[timerId].loaded = false;
    c7cc:	735e      	strb	r6, [r3, #13]
    runningTimers++;
    c7ce:	4a3c      	ldr	r2, [pc, #240]	; (c8c0 <SwTimerStart+0x188>)
    c7d0:	7813      	ldrb	r3, [r2, #0]
    c7d2:	3301      	adds	r3, #1
    c7d4:	b2db      	uxtb	r3, r3
    c7d6:	7013      	strb	r3, [r2, #0]
    if (SWTIMER_INVALID == runningTimerQueueHead)
    c7d8:	4b3a      	ldr	r3, [pc, #232]	; (c8c4 <SwTimerStart+0x18c>)
    c7da:	681b      	ldr	r3, [r3, #0]
    c7dc:	469a      	mov	sl, r3
    c7de:	2bff      	cmp	r3, #255	; 0xff
    c7e0:	d016      	beq.n	c810 <SwTimerStart+0xd8>
        uint8_t currIndex = runningTimerQueueHead;
    c7e2:	466a      	mov	r2, sp
    c7e4:	7013      	strb	r3, [r2, #0]
    c7e6:	7812      	ldrb	r2, [r2, #0]
        for (index = 0; index < runningTimers; index++)
    c7e8:	4b35      	ldr	r3, [pc, #212]	; (c8c0 <SwTimerStart+0x188>)
    c7ea:	781b      	ldrb	r3, [r3, #0]
    c7ec:	2b00      	cmp	r3, #0
    c7ee:	d042      	beq.n	c876 <SwTimerStart+0x13e>
    c7f0:	9200      	str	r2, [sp, #0]
    c7f2:	2300      	movs	r3, #0
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    c7f4:	492b      	ldr	r1, [pc, #172]	; (c8a4 <SwTimerStart+0x16c>)
    c7f6:	4688      	mov	r8, r1
    c7f8:	4833      	ldr	r0, [pc, #204]	; (c8c8 <SwTimerStart+0x190>)
                    currIndex = swTimers[currIndex].nextTimer;
    c7fa:	468c      	mov	ip, r1
        for (index = 0; index < runningTimers; index++)
    c7fc:	4c30      	ldr	r4, [pc, #192]	; (c8c0 <SwTimerStart+0x188>)
    c7fe:	e02a      	b.n	c856 <SwTimerStart+0x11e>
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    c800:	0028      	movs	r0, r5
    c802:	38ff      	subs	r0, #255	; 0xff
    c804:	1ac3      	subs	r3, r0, r3
    c806:	4a2b      	ldr	r2, [pc, #172]	; (c8b4 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    c808:	200a      	movs	r0, #10
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    c80a:	4293      	cmp	r3, r2
    c80c:	d9c8      	bls.n	c7a0 <SwTimerStart+0x68>
    c80e:	e7aa      	b.n	c766 <SwTimerStart+0x2e>
        runningTimerQueueHead = timerId;
    c810:	4b2c      	ldr	r3, [pc, #176]	; (c8c4 <SwTimerStart+0x18c>)
    c812:	601f      	str	r7, [r3, #0]
        loadHwTimer(runningTimerQueueHead);
    c814:	0038      	movs	r0, r7
    c816:	4b2d      	ldr	r3, [pc, #180]	; (c8cc <SwTimerStart+0x194>)
    c818:	4798      	blx	r3
    c81a:	e036      	b.n	c88a <SwTimerStart+0x152>
                    swTimers[timerId].nextTimer = currIndex;
    c81c:	4b21      	ldr	r3, [pc, #132]	; (c8a4 <SwTimerStart+0x16c>)
    c81e:	013c      	lsls	r4, r7, #4
    c820:	191c      	adds	r4, r3, r4
    c822:	7322      	strb	r2, [r4, #12]
                    swTimers[currIndex].loaded = false;
    c824:	9901      	ldr	r1, [sp, #4]
    c826:	0109      	lsls	r1, r1, #4
    c828:	1859      	adds	r1, r3, r1
    c82a:	2300      	movs	r3, #0
    c82c:	734b      	strb	r3, [r1, #13]
                    if (runningTimerQueueHead == currIndex)
    c82e:	4592      	cmp	sl, r2
    c830:	d005      	beq.n	c83e <SwTimerStart+0x106>
                        swTimers[prevIndex].nextTimer = timerId;
    c832:	9b00      	ldr	r3, [sp, #0]
    c834:	0118      	lsls	r0, r3, #4
    c836:	4b1b      	ldr	r3, [pc, #108]	; (c8a4 <SwTimerStart+0x16c>)
    c838:	1818      	adds	r0, r3, r0
    c83a:	7307      	strb	r7, [r0, #12]
    c83c:	e025      	b.n	c88a <SwTimerStart+0x152>
                        runningTimerQueueHead = timerId;
    c83e:	4b21      	ldr	r3, [pc, #132]	; (c8c4 <SwTimerStart+0x18c>)
    c840:	601f      	str	r7, [r3, #0]
                        loadHwTimer(runningTimerQueueHead);
    c842:	0038      	movs	r0, r7
    c844:	4b21      	ldr	r3, [pc, #132]	; (c8cc <SwTimerStart+0x194>)
    c846:	4798      	blx	r3
    c848:	e01f      	b.n	c88a <SwTimerStart+0x152>
        for (index = 0; index < runningTimers; index++)
    c84a:	3301      	adds	r3, #1
    c84c:	b2db      	uxtb	r3, r3
    c84e:	7821      	ldrb	r1, [r4, #0]
    c850:	b2c9      	uxtb	r1, r1
    c852:	428b      	cmp	r3, r1
    c854:	d210      	bcs.n	c878 <SwTimerStart+0x140>
            if (SWTIMER_INVALID != currIndex)
    c856:	2aff      	cmp	r2, #255	; 0xff
    c858:	d0f7      	beq.n	c84a <SwTimerStart+0x112>
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    c85a:	9201      	str	r2, [sp, #4]
    c85c:	0111      	lsls	r1, r2, #4
    return ((t2 - t1) < INT32_MAX);
    c85e:	4646      	mov	r6, r8
    c860:	5989      	ldr	r1, [r1, r6]
    c862:	1a69      	subs	r1, r5, r1
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    c864:	4281      	cmp	r1, r0
    c866:	d8d9      	bhi.n	c81c <SwTimerStart+0xe4>
                    currIndex = swTimers[currIndex].nextTimer;
    c868:	0111      	lsls	r1, r2, #4
    c86a:	4461      	add	r1, ip
    c86c:	9200      	str	r2, [sp, #0]
    c86e:	7b0a      	ldrb	r2, [r1, #12]
    c870:	e7eb      	b.n	c84a <SwTimerStart+0x112>
        return LORAWAN_INVALID_PARAMETER;
    c872:	200a      	movs	r0, #10
    c874:	e777      	b.n	c766 <SwTimerStart+0x2e>
        uint8_t prevIndex = runningTimerQueueHead;
    c876:	9200      	str	r2, [sp, #0]
            swTimers[prevIndex].nextTimer = timerId;
    c878:	4b0a      	ldr	r3, [pc, #40]	; (c8a4 <SwTimerStart+0x16c>)
    c87a:	9a00      	ldr	r2, [sp, #0]
    c87c:	0110      	lsls	r0, r2, #4
    c87e:	1818      	adds	r0, r3, r0
    c880:	7307      	strb	r7, [r0, #12]
            swTimers[timerId].nextTimer = SWTIMER_INVALID;
    c882:	013f      	lsls	r7, r7, #4
    c884:	19df      	adds	r7, r3, r7
    c886:	23ff      	movs	r3, #255	; 0xff
    c888:	733b      	strb	r3, [r7, #12]
	if (cpu_irq_is_enabled_flags(flags))
    c88a:	23ff      	movs	r3, #255	; 0xff
    return LORAWAN_SUCCESS;
    c88c:	2008      	movs	r0, #8
    c88e:	464a      	mov	r2, r9
    c890:	4213      	tst	r3, r2
    c892:	d100      	bne.n	c896 <SwTimerStart+0x15e>
    c894:	e767      	b.n	c766 <SwTimerStart+0x2e>
		cpu_irq_enable();
    c896:	2201      	movs	r2, #1
    c898:	4b07      	ldr	r3, [pc, #28]	; (c8b8 <SwTimerStart+0x180>)
    c89a:	701a      	strb	r2, [r3, #0]
    c89c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c8a0:	b662      	cpsie	i
    c8a2:	e760      	b.n	c766 <SwTimerStart+0x2e>
    c8a4:	20002b5c 	.word	0x20002b5c
    c8a8:	20002cf0 	.word	0x20002cf0
    c8ac:	20002cec 	.word	0x20002cec
    c8b0:	000119d9 	.word	0x000119d9
    c8b4:	7fffff00 	.word	0x7fffff00
    c8b8:	20000014 	.word	0x20000014
    c8bc:	0000c5b5 	.word	0x0000c5b5
    c8c0:	20002038 	.word	0x20002038
    c8c4:	20002034 	.word	0x20002034
    c8c8:	7ffffffe 	.word	0x7ffffffe
    c8cc:	0000c51d 	.word	0x0000c51d

0000c8d0 <SwTimerIsRunning>:
\param[in] timerId Timer ID to be checked for running
\return True if the timer is running else False
******************************************************************************/
bool SwTimerIsRunning(uint8_t timerId)
{
    if (NULL == swTimers[timerId].timerCb)
    c8d0:	0103      	lsls	r3, r0, #4
    c8d2:	4803      	ldr	r0, [pc, #12]	; (c8e0 <SwTimerIsRunning+0x10>)
    c8d4:	18c0      	adds	r0, r0, r3
    c8d6:	6840      	ldr	r0, [r0, #4]
    c8d8:	1e43      	subs	r3, r0, #1
    c8da:	4198      	sbcs	r0, r3
    c8dc:	b2c0      	uxtb	r0, r0
    {
        return false;
    }

    return true;
}
    c8de:	4770      	bx	lr
    c8e0:	20002b5c 	.word	0x20002b5c

0000c8e4 <SwTimerReadValue>:
\brief Returns the remaining timeout for the given timerId
\param[in] timerId Timer ID to get the remaining time
\return Remaining time until expiry in microseconds
******************************************************************************/
uint32_t SwTimerReadValue(uint8_t timerId)
{
    c8e4:	b570      	push	{r4, r5, r6, lr}
    c8e6:	0005      	movs	r5, r0
    time |= ((uint64_t) sysTimeOvf) << 32;
    c8e8:	4b09      	ldr	r3, [pc, #36]	; (c910 <SwTimerReadValue+0x2c>)
    c8ea:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    c8ec:	4b09      	ldr	r3, [pc, #36]	; (c914 <SwTimerReadValue+0x30>)
    c8ee:	881e      	ldrh	r6, [r3, #0]
    c8f0:	0436      	lsls	r6, r6, #16
    time |= (uint64_t) common_tc_read_count();
    c8f2:	4b09      	ldr	r3, [pc, #36]	; (c918 <SwTimerReadValue+0x34>)
    c8f4:	4798      	blx	r3
    c8f6:	4306      	orrs	r6, r0
    uint32_t tv = 0u;
    uint64_t t1 = gettime();
    uint64_t t2 = (uint64_t)swTimers[timerId].absoluteExpiryTime;
    c8f8:	012d      	lsls	r5, r5, #4
    c8fa:	4b08      	ldr	r3, [pc, #32]	; (c91c <SwTimerReadValue+0x38>)
    c8fc:	58e8      	ldr	r0, [r5, r3]
    c8fe:	0002      	movs	r2, r0

    if (t2 > t1)
    c900:	2c00      	cmp	r4, #0
    c902:	d102      	bne.n	c90a <SwTimerReadValue+0x26>
    {
        tv = (uint32_t)(t2 - t1);
    c904:	1b80      	subs	r0, r0, r6
    if (t2 > t1)
    c906:	42b2      	cmp	r2, r6
    c908:	d800      	bhi.n	c90c <SwTimerReadValue+0x28>
    uint32_t tv = 0u;
    c90a:	2000      	movs	r0, #0
    }

    return tv;
}
    c90c:	bd70      	pop	{r4, r5, r6, pc}
    c90e:	46c0      	nop			; (mov r8, r8)
    c910:	20002cf0 	.word	0x20002cf0
    c914:	20002cec 	.word	0x20002cec
    c918:	000119d9 	.word	0x000119d9
    c91c:	20002b5c 	.word	0x20002b5c

0000c920 <SwTimerNextExpiryDuration>:
/**************************************************************************//**
\brief Returns the duration until the next timer expiry
\return Returns the duration until the next timeout in microseconds
******************************************************************************/
uint32_t SwTimerNextExpiryDuration(void)
{
    c920:	b510      	push	{r4, lr}
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;

    if (SWTIMER_INVALID != runningTimerQueueHead)
    c922:	4b05      	ldr	r3, [pc, #20]	; (c938 <SwTimerNextExpiryDuration+0x18>)
    c924:	6818      	ldr	r0, [r3, #0]
    c926:	28ff      	cmp	r0, #255	; 0xff
    c928:	d102      	bne.n	c930 <SwTimerNextExpiryDuration+0x10>
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;
    c92a:	2001      	movs	r0, #1
    c92c:	4240      	negs	r0, r0
    {
        duration = SwTimerReadValue(runningTimerQueueHead);
    }

    return duration;
}
    c92e:	bd10      	pop	{r4, pc}
        duration = SwTimerReadValue(runningTimerQueueHead);
    c930:	b2c0      	uxtb	r0, r0
    c932:	4b02      	ldr	r3, [pc, #8]	; (c93c <SwTimerNextExpiryDuration+0x1c>)
    c934:	4798      	blx	r3
    c936:	e7fa      	b.n	c92e <SwTimerNextExpiryDuration+0xe>
    c938:	20002034 	.word	0x20002034
    c93c:	0000c8e5 	.word	0x0000c8e5

0000c940 <SwTimersExecute>:

/**************************************************************************//**
\brief Handles Queues and Callbacks for Expired Timers
******************************************************************************/
void SwTimersExecute(void)
{
    c940:	b5f0      	push	{r4, r5, r6, r7, lr}
    c942:	46de      	mov	lr, fp
    c944:	4657      	mov	r7, sl
    c946:	464e      	mov	r6, r9
    c948:	4645      	mov	r5, r8
    c94a:	b5e0      	push	{r5, r6, r7, lr}
    c94c:	b083      	sub	sp, #12
    time |= ((uint64_t) sysTimeOvf) << 32;
    c94e:	4b2f      	ldr	r3, [pc, #188]	; (ca0c <SwTimersExecute+0xcc>)
    c950:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    c952:	4b2f      	ldr	r3, [pc, #188]	; (ca10 <SwTimersExecute+0xd0>)
    c954:	881b      	ldrh	r3, [r3, #0]
    time |= (uint64_t) common_tc_read_count();
    c956:	4b2f      	ldr	r3, [pc, #188]	; (ca14 <SwTimersExecute+0xd4>)
    c958:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    c95a:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    c95e:	4253      	negs	r3, r2
    c960:	4153      	adcs	r3, r2
    c962:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    c964:	b672      	cpsid	i
    c966:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    c96a:	2200      	movs	r2, #0
    c96c:	4b2a      	ldr	r3, [pc, #168]	; (ca18 <SwTimersExecute+0xd8>)
    c96e:	701a      	strb	r2, [r3, #0]
	return flags;
    c970:	9c00      	ldr	r4, [sp, #0]
    uint64_t now = gettime();

    uint8_t flags = cpu_irq_save();
    swtimerInternalHandler();
    c972:	4b2a      	ldr	r3, [pc, #168]	; (ca1c <SwTimersExecute+0xdc>)
    c974:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    c976:	23ff      	movs	r3, #255	; 0xff
    c978:	4223      	tst	r3, r4
    c97a:	d005      	beq.n	c988 <SwTimersExecute+0x48>
		cpu_irq_enable();
    c97c:	2201      	movs	r2, #1
    c97e:	4b26      	ldr	r3, [pc, #152]	; (ca18 <SwTimersExecute+0xd8>)
    c980:	701a      	strb	r2, [r3, #0]
    c982:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c986:	b662      	cpsie	i
	cpu_irq_disable();
    c988:	4b23      	ldr	r3, [pc, #140]	; (ca18 <SwTimersExecute+0xd8>)
    c98a:	469a      	mov	sl, r3
        /* Expired timer if any will be processed here */
        while (SWTIMER_INVALID != expiredTimerQueueHead)
        {
            flags = cpu_irq_save();

            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    c98c:	4c24      	ldr	r4, [pc, #144]	; (ca20 <SwTimersExecute+0xe0>)
    c98e:	4b25      	ldr	r3, [pc, #148]	; (ca24 <SwTimersExecute+0xe4>)
    c990:	4699      	mov	r9, r3
    c992:	2200      	movs	r2, #0

            /*
            * The expired timer's structure elements are updated
            * and the timer is taken out of expired timer queue
            */
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    c994:	20ff      	movs	r0, #255	; 0xff
            */
            expiredTimerQueueHead = nextExpiredTimer;

            if (SWTIMER_INVALID == expiredTimerQueueHead)
            {
                expiredTimerQueueTail = SWTIMER_INVALID;
    c996:	4b24      	ldr	r3, [pc, #144]	; (ca28 <SwTimersExecute+0xe8>)
    c998:	4698      	mov	r8, r3
		cpu_irq_enable();
    c99a:	4b1f      	ldr	r3, [pc, #124]	; (ca18 <SwTimersExecute+0xd8>)
    c99c:	469c      	mov	ip, r3
    c99e:	e004      	b.n	c9aa <SwTimersExecute+0x6a>
    c9a0:	4643      	mov	r3, r8
    c9a2:	6018      	str	r0, [r3, #0]
    c9a4:	e01e      	b.n	c9e4 <SwTimersExecute+0xa4>
            }

            cpu_irq_restore(flags);

            if (NULL != callback)
    c9a6:	2e00      	cmp	r6, #0
    c9a8:	d125      	bne.n	c9f6 <SwTimersExecute+0xb6>
        while (SWTIMER_INVALID != expiredTimerQueueHead)
    c9aa:	4b1d      	ldr	r3, [pc, #116]	; (ca20 <SwTimersExecute+0xe0>)
    c9ac:	681b      	ldr	r3, [r3, #0]
    c9ae:	2bff      	cmp	r3, #255	; 0xff
    c9b0:	d024      	beq.n	c9fc <SwTimersExecute+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    c9b2:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    c9b6:	424b      	negs	r3, r1
    c9b8:	414b      	adcs	r3, r1
    c9ba:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    c9bc:	b672      	cpsid	i
    c9be:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    c9c2:	4653      	mov	r3, sl
    c9c4:	701a      	strb	r2, [r3, #0]
	return flags;
    c9c6:	9f01      	ldr	r7, [sp, #4]
            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    c9c8:	6823      	ldr	r3, [r4, #0]
    c9ca:	011b      	lsls	r3, r3, #4
    c9cc:	444b      	add	r3, r9
    c9ce:	7b19      	ldrb	r1, [r3, #12]
            callback = (SwTimerCallbackFunc_t)swTimers[expiredTimerQueueHead].timerCb;
    c9d0:	685e      	ldr	r6, [r3, #4]
            cbParam = swTimers[expiredTimerQueueHead].paramCb;
    c9d2:	689d      	ldr	r5, [r3, #8]
    c9d4:	46ab      	mov	fp, r5
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    c9d6:	7318      	strb	r0, [r3, #12]
            swTimers[expiredTimerQueueHead].timerCb = NULL;
    c9d8:	605a      	str	r2, [r3, #4]
            swTimers[expiredTimerQueueHead].paramCb = NULL;
    c9da:	609a      	str	r2, [r3, #8]
            swTimers[expiredTimerQueueHead].loaded = false;
    c9dc:	735a      	strb	r2, [r3, #13]
            expiredTimerQueueHead = nextExpiredTimer;
    c9de:	6021      	str	r1, [r4, #0]
            if (SWTIMER_INVALID == expiredTimerQueueHead)
    c9e0:	29ff      	cmp	r1, #255	; 0xff
    c9e2:	d0dd      	beq.n	c9a0 <SwTimersExecute+0x60>
	if (cpu_irq_is_enabled_flags(flags))
    c9e4:	4238      	tst	r0, r7
    c9e6:	d0de      	beq.n	c9a6 <SwTimersExecute+0x66>
		cpu_irq_enable();
    c9e8:	2301      	movs	r3, #1
    c9ea:	4661      	mov	r1, ip
    c9ec:	700b      	strb	r3, [r1, #0]
    c9ee:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c9f2:	b662      	cpsie	i
    c9f4:	e7d7      	b.n	c9a6 <SwTimersExecute+0x66>
            {
                /* Callback function is called */
                callback(cbParam);
    c9f6:	4658      	mov	r0, fp
    c9f8:	47b0      	blx	r6
    c9fa:	e7ca      	b.n	c992 <SwTimersExecute+0x52>
                (void)now;
            }
        }
    }
}
    c9fc:	b003      	add	sp, #12
    c9fe:	bc3c      	pop	{r2, r3, r4, r5}
    ca00:	4690      	mov	r8, r2
    ca02:	4699      	mov	r9, r3
    ca04:	46a2      	mov	sl, r4
    ca06:	46ab      	mov	fp, r5
    ca08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ca0a:	46c0      	nop			; (mov r8, r8)
    ca0c:	20002cf0 	.word	0x20002cf0
    ca10:	20002cec 	.word	0x20002cec
    ca14:	000119d9 	.word	0x000119d9
    ca18:	20000014 	.word	0x20000014
    ca1c:	0000c5b5 	.word	0x0000c5b5
    ca20:	2000202c 	.word	0x2000202c
    ca24:	20002b5c 	.word	0x20002b5c
    ca28:	20002030 	.word	0x20002030

0000ca2c <TIMER_TaskHandler>:
{
    ca2c:	b510      	push	{r4, lr}
    SwTimersExecute();
    ca2e:	4b02      	ldr	r3, [pc, #8]	; (ca38 <TIMER_TaskHandler+0xc>)
    ca30:	4798      	blx	r3
}
    ca32:	2000      	movs	r0, #0
    ca34:	bd10      	pop	{r4, pc}
    ca36:	46c0      	nop			; (mov r8, r8)
    ca38:	0000c941 	.word	0x0000c941

0000ca3c <SwTimerStop>:
        LORAWAN_INVALID_PARAMETER if timerId is not valid
        LORAWAN_INVALID_REQUEST if timerId was not started before
        LORAWAN_SUCCESS if it is successfully stopped
******************************************************************************/
StackRetStatus_t SwTimerStop(uint8_t timerId)
{
    ca3c:	b570      	push	{r4, r5, r6, lr}
    ca3e:	b082      	sub	sp, #8
    ca40:	0004      	movs	r4, r0
    uint8_t prevIndex;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    ca42:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    ca44:	2c18      	cmp	r4, #24
    ca46:	d901      	bls.n	ca4c <SwTimerStop+0x10>
        return LORAWAN_SUCCESS;
    }

    SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
    return LORAWAN_INVALID_REQUEST;
}
    ca48:	b002      	add	sp, #8
    ca4a:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    ca4c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    ca50:	425a      	negs	r2, r3
    ca52:	4153      	adcs	r3, r2
    ca54:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    ca56:	b672      	cpsid	i
    ca58:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    ca5c:	2200      	movs	r2, #0
    ca5e:	4b47      	ldr	r3, [pc, #284]	; (cb7c <SwTimerStop+0x140>)
    ca60:	701a      	strb	r2, [r3, #0]
	return flags;
    ca62:	9d01      	ldr	r5, [sp, #4]
    swtimerInternalHandler();
    ca64:	4b46      	ldr	r3, [pc, #280]	; (cb80 <SwTimerStop+0x144>)
    ca66:	4798      	blx	r3
    if (runningTimers > 0)
    ca68:	4b46      	ldr	r3, [pc, #280]	; (cb84 <SwTimerStop+0x148>)
    ca6a:	781b      	ldrb	r3, [r3, #0]
    ca6c:	2b00      	cmp	r3, #0
    ca6e:	d040      	beq.n	caf2 <SwTimerStop+0xb6>
        uint8_t timer_count = runningTimers;
    ca70:	4b44      	ldr	r3, [pc, #272]	; (cb84 <SwTimerStop+0x148>)
    ca72:	781b      	ldrb	r3, [r3, #0]
    ca74:	b2db      	uxtb	r3, r3
        prevIndex = currIndex = runningTimerQueueHead;
    ca76:	4a44      	ldr	r2, [pc, #272]	; (cb88 <SwTimerStop+0x14c>)
    ca78:	6816      	ldr	r6, [r2, #0]
    ca7a:	b2f1      	uxtb	r1, r6
        while (timer_count > 0)
    ca7c:	2b00      	cmp	r3, #0
    ca7e:	d038      	beq.n	caf2 <SwTimerStop+0xb6>
            if (timerId == currIndex)
    ca80:	428c      	cmp	r4, r1
    ca82:	d00b      	beq.n	ca9c <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    ca84:	4841      	ldr	r0, [pc, #260]	; (cb8c <SwTimerStop+0x150>)
    ca86:	010a      	lsls	r2, r1, #4
    ca88:	1882      	adds	r2, r0, r2
    ca8a:	7b12      	ldrb	r2, [r2, #12]
            timer_count--;
    ca8c:	3b01      	subs	r3, #1
    ca8e:	b2db      	uxtb	r3, r3
        while (timer_count > 0)
    ca90:	2b00      	cmp	r3, #0
    ca92:	d02e      	beq.n	caf2 <SwTimerStop+0xb6>
            if (timerId == currIndex)
    ca94:	4294      	cmp	r4, r2
    ca96:	d001      	beq.n	ca9c <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    ca98:	0011      	movs	r1, r2
    ca9a:	e7f4      	b.n	ca86 <SwTimerStop+0x4a>
                if (timerId == runningTimerQueueHead)
    ca9c:	42a6      	cmp	r6, r4
    ca9e:	d01d      	beq.n	cadc <SwTimerStop+0xa0>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    caa0:	4b3a      	ldr	r3, [pc, #232]	; (cb8c <SwTimerStop+0x150>)
    caa2:	0122      	lsls	r2, r4, #4
    caa4:	189a      	adds	r2, r3, r2
    caa6:	7b12      	ldrb	r2, [r2, #12]
    caa8:	0109      	lsls	r1, r1, #4
    caaa:	1859      	adds	r1, r3, r1
    caac:	730a      	strb	r2, [r1, #12]
                swTimers[timerId].nextTimer  = SWTIMER_INVALID;
    caae:	0122      	lsls	r2, r4, #4
    cab0:	4b36      	ldr	r3, [pc, #216]	; (cb8c <SwTimerStop+0x150>)
    cab2:	189b      	adds	r3, r3, r2
    cab4:	22ff      	movs	r2, #255	; 0xff
    cab6:	731a      	strb	r2, [r3, #12]
            runningTimers--;
    cab8:	4a32      	ldr	r2, [pc, #200]	; (cb84 <SwTimerStop+0x148>)
    caba:	7813      	ldrb	r3, [r2, #0]
    cabc:	3b01      	subs	r3, #1
    cabe:	b2db      	uxtb	r3, r3
    cac0:	7013      	strb	r3, [r2, #0]
        swTimers[timerId].timerCb = NULL;
    cac2:	0124      	lsls	r4, r4, #4
    cac4:	4b31      	ldr	r3, [pc, #196]	; (cb8c <SwTimerStop+0x150>)
    cac6:	191c      	adds	r4, r3, r4
    cac8:	2300      	movs	r3, #0
    caca:	6063      	str	r3, [r4, #4]
        swTimers[timerId].paramCb = NULL;
    cacc:	60a3      	str	r3, [r4, #8]
        swTimers[timerId].loaded = false;
    cace:	7363      	strb	r3, [r4, #13]
	if (cpu_irq_is_enabled_flags(flags))
    cad0:	33ff      	adds	r3, #255	; 0xff
        return LORAWAN_SUCCESS;
    cad2:	2008      	movs	r0, #8
    cad4:	422b      	tst	r3, r5
    cad6:	d0b7      	beq.n	ca48 <SwTimerStop+0xc>
    cad8:	2301      	movs	r3, #1
    cada:	e040      	b.n	cb5e <SwTimerStop+0x122>
                    common_tc_compare_stop();
    cadc:	4b2c      	ldr	r3, [pc, #176]	; (cb90 <SwTimerStop+0x154>)
    cade:	4798      	blx	r3
                    runningTimerQueueHead = swTimers[timerId].nextTimer;
    cae0:	0122      	lsls	r2, r4, #4
    cae2:	4b2a      	ldr	r3, [pc, #168]	; (cb8c <SwTimerStop+0x150>)
    cae4:	189b      	adds	r3, r3, r2
    cae6:	7b18      	ldrb	r0, [r3, #12]
    cae8:	4b27      	ldr	r3, [pc, #156]	; (cb88 <SwTimerStop+0x14c>)
    caea:	6018      	str	r0, [r3, #0]
                    loadHwTimer(runningTimerQueueHead);
    caec:	4b29      	ldr	r3, [pc, #164]	; (cb94 <SwTimerStop+0x158>)
    caee:	4798      	blx	r3
    caf0:	e7dd      	b.n	caae <SwTimerStop+0x72>
        prevIndex = currIndex = expiredTimerQueueHead;
    caf2:	4b29      	ldr	r3, [pc, #164]	; (cb98 <SwTimerStop+0x15c>)
    caf4:	6818      	ldr	r0, [r3, #0]
    caf6:	b2c2      	uxtb	r2, r0
        while (SWTIMER_INVALID != currIndex)
    caf8:	2aff      	cmp	r2, #255	; 0xff
    cafa:	d02c      	beq.n	cb56 <SwTimerStop+0x11a>
            if (timerId == currIndex)
    cafc:	4294      	cmp	r4, r2
    cafe:	d009      	beq.n	cb14 <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    cb00:	4922      	ldr	r1, [pc, #136]	; (cb8c <SwTimerStop+0x150>)
    cb02:	0113      	lsls	r3, r2, #4
    cb04:	18cb      	adds	r3, r1, r3
    cb06:	7b1b      	ldrb	r3, [r3, #12]
        while (SWTIMER_INVALID != currIndex)
    cb08:	2bff      	cmp	r3, #255	; 0xff
    cb0a:	d024      	beq.n	cb56 <SwTimerStop+0x11a>
            if (timerId == currIndex)
    cb0c:	429c      	cmp	r4, r3
    cb0e:	d001      	beq.n	cb14 <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    cb10:	001a      	movs	r2, r3
    cb12:	e7f6      	b.n	cb02 <SwTimerStop+0xc6>
                if (timerId == expiredTimerQueueHead)
    cb14:	42a0      	cmp	r0, r4
    cb16:	d00d      	beq.n	cb34 <SwTimerStop+0xf8>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    cb18:	4b1c      	ldr	r3, [pc, #112]	; (cb8c <SwTimerStop+0x150>)
    cb1a:	0121      	lsls	r1, r4, #4
    cb1c:	1859      	adds	r1, r3, r1
    cb1e:	7b09      	ldrb	r1, [r1, #12]
    cb20:	0110      	lsls	r0, r2, #4
    cb22:	181b      	adds	r3, r3, r0
    cb24:	7319      	strb	r1, [r3, #12]
                    if (timerId == expiredTimerQueueTail)
    cb26:	4b1d      	ldr	r3, [pc, #116]	; (cb9c <SwTimerStop+0x160>)
    cb28:	681b      	ldr	r3, [r3, #0]
    cb2a:	429c      	cmp	r4, r3
    cb2c:	d1c9      	bne.n	cac2 <SwTimerStop+0x86>
                        expiredTimerQueueTail = prevIndex;
    cb2e:	4b1b      	ldr	r3, [pc, #108]	; (cb9c <SwTimerStop+0x160>)
    cb30:	601a      	str	r2, [r3, #0]
    cb32:	e7c6      	b.n	cac2 <SwTimerStop+0x86>
                    if (expiredTimerQueueHead == expiredTimerQueueTail)
    cb34:	4b19      	ldr	r3, [pc, #100]	; (cb9c <SwTimerStop+0x160>)
    cb36:	681b      	ldr	r3, [r3, #0]
    cb38:	4298      	cmp	r0, r3
    cb3a:	d006      	beq.n	cb4a <SwTimerStop+0x10e>
                        expiredTimerQueueHead = swTimers[expiredTimerQueueHead].nextTimer;
    cb3c:	0100      	lsls	r0, r0, #4
    cb3e:	4b13      	ldr	r3, [pc, #76]	; (cb8c <SwTimerStop+0x150>)
    cb40:	1818      	adds	r0, r3, r0
    cb42:	7b02      	ldrb	r2, [r0, #12]
    cb44:	4b14      	ldr	r3, [pc, #80]	; (cb98 <SwTimerStop+0x15c>)
    cb46:	601a      	str	r2, [r3, #0]
    cb48:	e7bb      	b.n	cac2 <SwTimerStop+0x86>
                        expiredTimerQueueHead = expiredTimerQueueTail = SWTIMER_INVALID;
    cb4a:	23ff      	movs	r3, #255	; 0xff
    cb4c:	4a13      	ldr	r2, [pc, #76]	; (cb9c <SwTimerStop+0x160>)
    cb4e:	6013      	str	r3, [r2, #0]
    cb50:	4a11      	ldr	r2, [pc, #68]	; (cb98 <SwTimerStop+0x15c>)
    cb52:	6013      	str	r3, [r2, #0]
    cb54:	e7b5      	b.n	cac2 <SwTimerStop+0x86>
    cb56:	23ff      	movs	r3, #255	; 0xff
    cb58:	422b      	tst	r3, r5
    cb5a:	d00a      	beq.n	cb72 <SwTimerStop+0x136>
    cb5c:	2300      	movs	r3, #0
		cpu_irq_enable();
    cb5e:	2101      	movs	r1, #1
    cb60:	4a06      	ldr	r2, [pc, #24]	; (cb7c <SwTimerStop+0x140>)
    cb62:	7011      	strb	r1, [r2, #0]
    cb64:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    cb68:	b662      	cpsie	i
    if (timerStopReqStatus)
    cb6a:	2b00      	cmp	r3, #0
    cb6c:	d103      	bne.n	cb76 <SwTimerStop+0x13a>
    return LORAWAN_INVALID_REQUEST;
    cb6e:	2015      	movs	r0, #21
    cb70:	e76a      	b.n	ca48 <SwTimerStop+0xc>
    cb72:	2015      	movs	r0, #21
    cb74:	e768      	b.n	ca48 <SwTimerStop+0xc>
        return LORAWAN_SUCCESS;
    cb76:	2008      	movs	r0, #8
    cb78:	e766      	b.n	ca48 <SwTimerStop+0xc>
    cb7a:	46c0      	nop			; (mov r8, r8)
    cb7c:	20000014 	.word	0x20000014
    cb80:	0000c5b5 	.word	0x0000c5b5
    cb84:	20002038 	.word	0x20002038
    cb88:	20002034 	.word	0x20002034
    cb8c:	20002b5c 	.word	0x20002b5c
    cb90:	00011a25 	.word	0x00011a25
    cb94:	0000c51d 	.word	0x0000c51d
    cb98:	2000202c 	.word	0x2000202c
    cb9c:	20002030 	.word	0x20002030

0000cba0 <SwTimerRunRemainingTime>:
{
    cba0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cba2:	b083      	sub	sp, #12
    cba4:	0005      	movs	r5, r0
    void * timerCb = (void*)(swTimers[runningTimerQueueHead].timerCb);
    cba6:	4b0b      	ldr	r3, [pc, #44]	; (cbd4 <SwTimerRunRemainingTime+0x34>)
    cba8:	681c      	ldr	r4, [r3, #0]
    cbaa:	0122      	lsls	r2, r4, #4
    cbac:	4b0a      	ldr	r3, [pc, #40]	; (cbd8 <SwTimerRunRemainingTime+0x38>)
    cbae:	189b      	adds	r3, r3, r2
    cbb0:	685e      	ldr	r6, [r3, #4]
    void *paramCb = swTimers[runningTimerQueueHead].paramCb;
    cbb2:	689f      	ldr	r7, [r3, #8]
    uint8_t timerId = runningTimerQueueHead;
    cbb4:	b2e4      	uxtb	r4, r4
    if (LORAWAN_SUCCESS == SwTimerStop(runningTimerQueueHead))
    cbb6:	0020      	movs	r0, r4
    cbb8:	4b08      	ldr	r3, [pc, #32]	; (cbdc <SwTimerRunRemainingTime+0x3c>)
    cbba:	4798      	blx	r3
    cbbc:	2808      	cmp	r0, #8
    cbbe:	d001      	beq.n	cbc4 <SwTimerRunRemainingTime+0x24>
}
    cbc0:	b003      	add	sp, #12
    cbc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        SwTimerStart(timerId, offset, SW_TIMEOUT_RELATIVE, timerCb, paramCb);
    cbc4:	9700      	str	r7, [sp, #0]
    cbc6:	0033      	movs	r3, r6
    cbc8:	2200      	movs	r2, #0
    cbca:	0029      	movs	r1, r5
    cbcc:	0020      	movs	r0, r4
    cbce:	4c04      	ldr	r4, [pc, #16]	; (cbe0 <SwTimerRunRemainingTime+0x40>)
    cbd0:	47a0      	blx	r4
}
    cbd2:	e7f5      	b.n	cbc0 <SwTimerRunRemainingTime+0x20>
    cbd4:	20002034 	.word	0x20002034
    cbd8:	20002b5c 	.word	0x20002b5c
    cbdc:	0000ca3d 	.word	0x0000ca3d
    cbe0:	0000c739 	.word	0x0000c739

0000cbe4 <SystemTimerSync>:
/**************************************************************************//**
\brief Resumes the software timer by offseting it with given time
\param[in] timeToSync Amount of duration to offset from known system time
******************************************************************************/
void SystemTimerSync(uint64_t timeToSync)
{
    cbe4:	b570      	push	{r4, r5, r6, lr}
    uint8_t timerId;
    uint16_t adjustOffset;

    sysTimeLastKnown += timeToSync;
    cbe6:	4b22      	ldr	r3, [pc, #136]	; (cc70 <SystemTimerSync+0x8c>)
    cbe8:	681c      	ldr	r4, [r3, #0]
    cbea:	685d      	ldr	r5, [r3, #4]
    cbec:	1900      	adds	r0, r0, r4
    cbee:	4169      	adcs	r1, r5
    cbf0:	6018      	str	r0, [r3, #0]
    cbf2:	6059      	str	r1, [r3, #4]

    /* 1. Update system time */
    sysTimeOvf = (uint32_t) (sysTimeLastKnown >> 32);
    cbf4:	4b1f      	ldr	r3, [pc, #124]	; (cc74 <SystemTimerSync+0x90>)
    cbf6:	6019      	str	r1, [r3, #0]
    sysTime = (uint16_t) ((sysTimeLastKnown >> SWTIMER_SYSTIME_SHIFTMASK) & 0xffff);
    cbf8:	0c02      	lsrs	r2, r0, #16
    cbfa:	4b1f      	ldr	r3, [pc, #124]	; (cc78 <SystemTimerSync+0x94>)
    cbfc:	801a      	strh	r2, [r3, #0]

    /* 2. Adjust expiration of running timers */
    adjustOffset = (uint16_t) sysTimeLastKnown;
    cbfe:	b280      	uxth	r0, r0
    timerId = runningTimerQueueHead;
    cc00:	4b1e      	ldr	r3, [pc, #120]	; (cc7c <SystemTimerSync+0x98>)
    cc02:	781b      	ldrb	r3, [r3, #0]
    for (uint8_t index = 0; index < runningTimers; index++)
    cc04:	4a1e      	ldr	r2, [pc, #120]	; (cc80 <SystemTimerSync+0x9c>)
    cc06:	7812      	ldrb	r2, [r2, #0]
    cc08:	2a00      	cmp	r2, #0
    cc0a:	d012      	beq.n	cc32 <SystemTimerSync+0x4e>
    cc0c:	2200      	movs	r2, #0
    {
        if (SWTIMER_INVALID != timerId)
        {
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    cc0e:	4c1d      	ldr	r4, [pc, #116]	; (cc84 <SystemTimerSync+0xa0>)
    for (uint8_t index = 0; index < runningTimers; index++)
    cc10:	4d1b      	ldr	r5, [pc, #108]	; (cc80 <SystemTimerSync+0x9c>)
    cc12:	e005      	b.n	cc20 <SystemTimerSync+0x3c>
    cc14:	3201      	adds	r2, #1
    cc16:	b2d2      	uxtb	r2, r2
    cc18:	7829      	ldrb	r1, [r5, #0]
    cc1a:	b2c9      	uxtb	r1, r1
    cc1c:	4291      	cmp	r1, r2
    cc1e:	d908      	bls.n	cc32 <SystemTimerSync+0x4e>
        if (SWTIMER_INVALID != timerId)
    cc20:	2bff      	cmp	r3, #255	; 0xff
    cc22:	d0f7      	beq.n	cc14 <SystemTimerSync+0x30>
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    cc24:	011b      	lsls	r3, r3, #4
    cc26:	5919      	ldr	r1, [r3, r4]
    cc28:	1a09      	subs	r1, r1, r0
    cc2a:	5119      	str	r1, [r3, r4]
            timerId = swTimers[timerId].nextTimer;
    cc2c:	18e3      	adds	r3, r4, r3
    cc2e:	7b1b      	ldrb	r3, [r3, #12]
    cc30:	e7f0      	b.n	cc14 <SystemTimerSync+0x30>
        }
    }

    /* 3. Start hardware timer */
    common_tc_init();
    cc32:	4b15      	ldr	r3, [pc, #84]	; (cc88 <SystemTimerSync+0xa4>)
    cc34:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    cc36:	4815      	ldr	r0, [pc, #84]	; (cc8c <SystemTimerSync+0xa8>)
    cc38:	4b15      	ldr	r3, [pc, #84]	; (cc90 <SystemTimerSync+0xac>)
    cc3a:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    cc3c:	4815      	ldr	r0, [pc, #84]	; (cc94 <SystemTimerSync+0xb0>)
    cc3e:	4b16      	ldr	r3, [pc, #88]	; (cc98 <SystemTimerSync+0xb4>)
    cc40:	4798      	blx	r3

    /* 4. Resume timer queue operations */
    if (runningTimers && (SWTIMER_INVALID != runningTimerQueueHead))
    cc42:	4b0f      	ldr	r3, [pc, #60]	; (cc80 <SystemTimerSync+0x9c>)
    cc44:	781b      	ldrb	r3, [r3, #0]
    cc46:	2b00      	cmp	r3, #0
    cc48:	d009      	beq.n	cc5e <SystemTimerSync+0x7a>
    cc4a:	4b0c      	ldr	r3, [pc, #48]	; (cc7c <SystemTimerSync+0x98>)
    cc4c:	681b      	ldr	r3, [r3, #0]
    cc4e:	2bff      	cmp	r3, #255	; 0xff
    cc50:	d005      	beq.n	cc5e <SystemTimerSync+0x7a>
    {
        uint32_t remainingTime = SwTimerNextExpiryDuration();
    cc52:	4b12      	ldr	r3, [pc, #72]	; (cc9c <SystemTimerSync+0xb8>)
    cc54:	4798      	blx	r3

        if (SWTIMER_MIN_TIMEOUT > remainingTime)
    cc56:	28fe      	cmp	r0, #254	; 0xfe
    cc58:	d902      	bls.n	cc60 <SystemTimerSync+0x7c>
        else
        {
            /*
            * There is some time left in head timer, so restart it.
            */
            SwTimerRunRemainingTime(remainingTime);
    cc5a:	4b11      	ldr	r3, [pc, #68]	; (cca0 <SystemTimerSync+0xbc>)
    cc5c:	4798      	blx	r3
        }
    }
}
    cc5e:	bd70      	pop	{r4, r5, r6, pc}
            isTimerTriggered = true;
    cc60:	2201      	movs	r2, #1
    cc62:	4b10      	ldr	r3, [pc, #64]	; (cca4 <SystemTimerSync+0xc0>)
    cc64:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    cc66:	2001      	movs	r0, #1
    cc68:	4b0f      	ldr	r3, [pc, #60]	; (cca8 <SystemTimerSync+0xc4>)
    cc6a:	4798      	blx	r3
    cc6c:	e7f7      	b.n	cc5e <SystemTimerSync+0x7a>
    cc6e:	46c0      	nop			; (mov r8, r8)
    cc70:	20002040 	.word	0x20002040
    cc74:	20002cf0 	.word	0x20002cf0
    cc78:	20002cec 	.word	0x20002cec
    cc7c:	20002034 	.word	0x20002034
    cc80:	20002038 	.word	0x20002038
    cc84:	20002b5c 	.word	0x20002b5c
    cc88:	00011ab9 	.word	0x00011ab9
    cc8c:	0000c45d 	.word	0x0000c45d
    cc90:	00011b3d 	.word	0x00011b3d
    cc94:	0000c435 	.word	0x0000c435
    cc98:	00011b49 	.word	0x00011b49
    cc9c:	0000c921 	.word	0x0000c921
    cca0:	0000cba1 	.word	0x0000cba1
    cca4:	20002cee 	.word	0x20002cee
    cca8:	0000cd29 	.word	0x0000cd29

0000ccac <Stack_Init>:
/**************************************************************************//**
\brief Initializes the system. This is the first stack function to be called
       by the application in the main() function.
******************************************************************************/
void Stack_Init(void)
{
    ccac:	b510      	push	{r4, lr}
	
	/* LORAWAN_Init() should have been called form here, 
	   but parser application has a round-about way to call it now */
 
	/* Post application task to initiate the execution from there */
	SYSTEM_PostTask(APP_TASK_ID);
    ccae:	2010      	movs	r0, #16
    ccb0:	4b01      	ldr	r3, [pc, #4]	; (ccb8 <Stack_Init+0xc>)
    ccb2:	4798      	blx	r3
}
    ccb4:	bd10      	pop	{r4, pc}
    ccb6:	46c0      	nop			; (mov r8, r8)
    ccb8:	0000cd29 	.word	0x0000cd29

0000ccbc <SYSTEM_RunTasks>:
/************************************************************************/
/*********************************************************************//**
\brief System tasks execution entry point
*************************************************************************/
void SYSTEM_RunTasks(void)
{
    ccbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((1 << SYSTEM_TASK_ID_COUNT) > sysTaskFlag)
    ccbe:	4b16      	ldr	r3, [pc, #88]	; (cd18 <SYSTEM_RunTasks+0x5c>)
    ccc0:	881b      	ldrh	r3, [r3, #0]
    ccc2:	b29b      	uxth	r3, r3
    ccc4:	2b1f      	cmp	r3, #31
    ccc6:	d922      	bls.n	cd0e <SYSTEM_RunTasks+0x52>
    ccc8:	e7fe      	b.n	ccc8 <SYSTEM_RunTasks+0xc>
    { /* Only valid task bits are set */
        while (sysTaskFlag)
        { /* One or more task are pending to execute */
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
            {
                if ((1 << taskId) & sysTaskFlag)
    ccca:	2500      	movs	r5, #0
                    /*
                    * Reset the task bit since it is to be executed now.
                    * It is done inside atomic section to avoid any interrupt context
                    * corrupting the bits.
                    */
                    ATOMIC_SECTION_ENTER
    cccc:	4b13      	ldr	r3, [pc, #76]	; (cd1c <SYSTEM_RunTasks+0x60>)
    ccce:	4798      	blx	r3
                    sysTaskFlag &= ~(1 << taskId);
    ccd0:	4911      	ldr	r1, [pc, #68]	; (cd18 <SYSTEM_RunTasks+0x5c>)
    ccd2:	880b      	ldrh	r3, [r1, #0]
    ccd4:	2201      	movs	r2, #1
    ccd6:	40aa      	lsls	r2, r5
    ccd8:	4393      	bics	r3, r2
    ccda:	800b      	strh	r3, [r1, #0]
                    ATOMIC_SECTION_EXIT
    ccdc:	4b10      	ldr	r3, [pc, #64]	; (cd20 <SYSTEM_RunTasks+0x64>)
    ccde:	4798      	blx	r3

                    /* Return value is not used now, can be used later */
                    taskHandlers[taskId]();
    cce0:	00ad      	lsls	r5, r5, #2
    cce2:	4b10      	ldr	r3, [pc, #64]	; (cd24 <SYSTEM_RunTasks+0x68>)
    cce4:	58eb      	ldr	r3, [r5, r3]
    cce6:	4798      	blx	r3
                if ((1 << taskId) & sysTaskFlag)
    cce8:	2101      	movs	r1, #1
        while (sysTaskFlag)
    ccea:	883b      	ldrh	r3, [r7, #0]
    ccec:	b29b      	uxth	r3, r3
    ccee:	2b00      	cmp	r3, #0
    ccf0:	d011      	beq.n	cd16 <SYSTEM_RunTasks+0x5a>
                if ((1 << taskId) & sysTaskFlag)
    ccf2:	8823      	ldrh	r3, [r4, #0]
    ccf4:	420b      	tst	r3, r1
    ccf6:	d1e8      	bne.n	ccca <SYSTEM_RunTasks+0xe>
    ccf8:	2201      	movs	r2, #1
    ccfa:	8833      	ldrh	r3, [r6, #0]
    ccfc:	b29b      	uxth	r3, r3
    ccfe:	0015      	movs	r5, r2
    cd00:	4113      	asrs	r3, r2
    cd02:	4219      	tst	r1, r3
    cd04:	d1e2      	bne.n	cccc <SYSTEM_RunTasks+0x10>
    cd06:	3201      	adds	r2, #1
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
    cd08:	2a05      	cmp	r2, #5
    cd0a:	d1f6      	bne.n	ccfa <SYSTEM_RunTasks+0x3e>
    cd0c:	e7ed      	b.n	ccea <SYSTEM_RunTasks+0x2e>
        while (sysTaskFlag)
    cd0e:	4f02      	ldr	r7, [pc, #8]	; (cd18 <SYSTEM_RunTasks+0x5c>)
                if ((1 << taskId) & sysTaskFlag)
    cd10:	003c      	movs	r4, r7
    cd12:	003e      	movs	r6, r7
    cd14:	e7e8      	b.n	cce8 <SYSTEM_RunTasks+0x2c>
        * Can happen only due to corruption, so halt
        * TODO : replace this with assert implementation
        */
        while(1);
    }
}
    cd16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cd18:	20002048 	.word	0x20002048
    cd1c:	0000c231 	.word	0x0000c231
    cd20:	0000c23d 	.word	0x0000c23d
    cd24:	0001734c 	.word	0x0001734c

0000cd28 <SYSTEM_PostTask>:

\param[in] task - ID of the posted task.
*************************************************************************/

void SYSTEM_PostTask(SYSTEM_Task_t task)
{
    cd28:	b510      	push	{r4, lr}
    cd2a:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    cd2c:	4b04      	ldr	r3, [pc, #16]	; (cd40 <SYSTEM_PostTask+0x18>)
    cd2e:	4798      	blx	r3
    sysTaskFlag |= task;
    cd30:	4b04      	ldr	r3, [pc, #16]	; (cd44 <SYSTEM_PostTask+0x1c>)
    cd32:	8818      	ldrh	r0, [r3, #0]
    cd34:	4320      	orrs	r0, r4
    cd36:	8018      	strh	r0, [r3, #0]
    ATOMIC_SECTION_EXIT
    cd38:	4b03      	ldr	r3, [pc, #12]	; (cd48 <SYSTEM_PostTask+0x20>)
    cd3a:	4798      	blx	r3
}
    cd3c:	bd10      	pop	{r4, pc}
    cd3e:	46c0      	nop			; (mov r8, r8)
    cd40:	0000c231 	.word	0x0000c231
    cd44:	20002048 	.word	0x20002048
    cd48:	0000c23d 	.word	0x0000c23d

0000cd4c <Radio_WriteMode>:
\param newModulation	- Sets the modulation.
\param blocking			- Sets if its blocking call or not.
\return					- none.
*************************************************************************/
void Radio_WriteMode(RadioMode_t newMode, RadioModulation_t newModulation, uint8_t blocking)
{
    cd4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd4e:	46d6      	mov	lr, sl
    cd50:	464f      	mov	r7, r9
    cd52:	b580      	push	{r7, lr}
    cd54:	b083      	sub	sp, #12
    cd56:	9201      	str	r2, [sp, #4]
    uint8_t opMode;
    uint8_t dioMapping;
    RadioModulation_t currentModulation;
    RadioMode_t currentMode;

    if ((MODULATION_FSK == newModulation) &&
    cd58:	2900      	cmp	r1, #0
    cd5a:	d102      	bne.n	cd62 <Radio_WriteMode+0x16>
    cd5c:	1f83      	subs	r3, r0, #6
    cd5e:	2b01      	cmp	r3, #1
    cd60:	d92a      	bls.n	cdb8 <Radio_WriteMode+0x6c>
        // Unavailable modes for FSK. Just return.
        return;
    }

    // Sanity enforcement on parameters
    newMode &= 0x07;
    cd62:	2307      	movs	r3, #7
    cd64:	4699      	mov	r9, r3
    cd66:	001c      	movs	r4, r3
    cd68:	4004      	ands	r4, r0
    newModulation &= 0x01;
    cd6a:	2601      	movs	r6, #1
    cd6c:	400e      	ands	r6, r1

    opMode = RADIO_RegisterRead(REG_OPMODE);
    cd6e:	2001      	movs	r0, #1
    cd70:	4b2b      	ldr	r3, [pc, #172]	; (ce20 <Radio_WriteMode+0xd4>)
    cd72:	4798      	blx	r3
    cd74:	0005      	movs	r5, r0
    cd76:	0007      	movs	r7, r0

    if ((opMode & 0x80) != 0)
    cd78:	b243      	sxtb	r3, r0
    cd7a:	469a      	mov	sl, r3
    else
    {
        currentModulation = MODULATION_FSK;
    }

    currentMode = opMode & 0x07;
    cd7c:	464b      	mov	r3, r9
    cd7e:	4003      	ands	r3, r0

    // If we need to change modulation, we need to do this in sleep mode.
    // Otherwise, we can go straight to changing the current mode to newMode.
    if (newModulation != currentModulation)
    cd80:	4652      	mov	r2, sl
    cd82:	0fd2      	lsrs	r2, r2, #31
    cd84:	4296      	cmp	r6, r2
    cd86:	d00a      	beq.n	cd9e <Radio_WriteMode+0x52>
    {
        // Go to sleep
        if (MODE_SLEEP != currentMode)
    cd88:	2b00      	cmp	r3, #0
    cd8a:	d11a      	bne.n	cdc2 <Radio_WriteMode+0x76>
            // Clear mode bits, effectively going to sleep
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
            currentMode = MODE_SLEEP;
        }
        // Change modulation
        if (MODULATION_FSK == newModulation)
    cd8c:	2e00      	cmp	r6, #0
    cd8e:	d11e      	bne.n	cdce <Radio_WriteMode+0x82>
        {
            // Clear MSB and sleep bits to make it stay in sleep
            opMode = opMode & (~0x87);
    cd90:	2778      	movs	r7, #120	; 0x78
    cd92:	402f      	ands	r7, r5
        else
        {
            // LoRa mode. Set MSB and clear sleep bits to make it stay in sleep
            opMode = 0x80 | (opMode & (~0x87));
        }
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    cd94:	0039      	movs	r1, r7
    cd96:	2001      	movs	r0, #1
    cd98:	4b22      	ldr	r3, [pc, #136]	; (ce24 <Radio_WriteMode+0xd8>)
    cd9a:	4798      	blx	r3
    cd9c:	2300      	movs	r3, #0

    // From here on currentModulation is no longer current, we will use
    // newModulation instead as it reflects the chip configuration.
    // opMode reflects the actual configuration of the chip.

    if (newMode != currentMode)
    cd9e:	42a3      	cmp	r3, r4
    cda0:	d00a      	beq.n	cdb8 <Radio_WriteMode+0x6c>
    {
        // If we need to block until the mode switch is ready, configure the
        // DIO5 pin to relay this information.
        if ((MODE_SLEEP != newMode) && (1 == blocking))
    cda2:	2c00      	cmp	r4, #0
    cda4:	d030      	beq.n	ce08 <Radio_WriteMode+0xbc>
    cda6:	9b01      	ldr	r3, [sp, #4]
    cda8:	2b01      	cmp	r3, #1
    cdaa:	d016      	beq.n	cdda <Radio_WriteMode+0x8e>
            }
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
        }

        // Do the actual mode switch.
        opMode &= ~0x07;                // Clear old mode bits
    cdac:	21f8      	movs	r1, #248	; 0xf8
    cdae:	4039      	ands	r1, r7
        opMode |= newMode;              // Set new mode bits
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    cdb0:	4321      	orrs	r1, r4
    cdb2:	2001      	movs	r0, #1
    cdb4:	4b1b      	ldr	r3, [pc, #108]	; (ce24 <Radio_WriteMode+0xd8>)
    cdb6:	4798      	blx	r3
                SystemBlockingWaitMs(1);
            }
        }
    }
#endif
}
    cdb8:	b003      	add	sp, #12
    cdba:	bc0c      	pop	{r2, r3}
    cdbc:	4691      	mov	r9, r2
    cdbe:	469a      	mov	sl, r3
    cdc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
    cdc2:	21f8      	movs	r1, #248	; 0xf8
    cdc4:	4001      	ands	r1, r0
    cdc6:	2001      	movs	r0, #1
    cdc8:	4b16      	ldr	r3, [pc, #88]	; (ce24 <Radio_WriteMode+0xd8>)
    cdca:	4798      	blx	r3
    cdcc:	e7de      	b.n	cd8c <Radio_WriteMode+0x40>
            opMode = 0x80 | (opMode & (~0x87));
    cdce:	2778      	movs	r7, #120	; 0x78
    cdd0:	4653      	mov	r3, sl
    cdd2:	401f      	ands	r7, r3
    cdd4:	2180      	movs	r1, #128	; 0x80
    cdd6:	430f      	orrs	r7, r1
    cdd8:	e7dc      	b.n	cd94 <Radio_WriteMode+0x48>
            dioMapping = RADIO_RegisterRead(REG_DIOMAPPING2);
    cdda:	2041      	movs	r0, #65	; 0x41
    cddc:	4b10      	ldr	r3, [pc, #64]	; (ce20 <Radio_WriteMode+0xd4>)
    cdde:	4798      	blx	r3
            if (MODULATION_FSK == newModulation)
    cde0:	2e00      	cmp	r6, #0
    cde2:	d10e      	bne.n	ce02 <Radio_WriteMode+0xb6>
                dioMapping |= 0x30;     // DIO5 = 11 means ModeReady in FSK mode
    cde4:	2130      	movs	r1, #48	; 0x30
    cde6:	4301      	orrs	r1, r0
    cde8:	b2c9      	uxtb	r1, r1
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
    cdea:	2041      	movs	r0, #65	; 0x41
    cdec:	4d0d      	ldr	r5, [pc, #52]	; (ce24 <Radio_WriteMode+0xd8>)
    cdee:	47a8      	blx	r5
        opMode &= ~0x07;                // Clear old mode bits
    cdf0:	21f8      	movs	r1, #248	; 0xf8
    cdf2:	4039      	ands	r1, r7
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    cdf4:	4321      	orrs	r1, r4
    cdf6:	2001      	movs	r0, #1
    cdf8:	47a8      	blx	r5
			   delay_ms(1);
    cdfa:	2001      	movs	r0, #1
    cdfc:	4b0a      	ldr	r3, [pc, #40]	; (ce28 <Radio_WriteMode+0xdc>)
    cdfe:	4798      	blx	r3
    ce00:	e7da      	b.n	cdb8 <Radio_WriteMode+0x6c>
                dioMapping &= ~0x30;    // DIO5 = 00 means ModeReady in LoRa mode
    ce02:	21cf      	movs	r1, #207	; 0xcf
    ce04:	4001      	ands	r1, r0
    ce06:	e7f0      	b.n	cdea <Radio_WriteMode+0x9e>
        opMode &= ~0x07;                // Clear old mode bits
    ce08:	21f8      	movs	r1, #248	; 0xf8
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    ce0a:	4039      	ands	r1, r7
    ce0c:	2001      	movs	r0, #1
    ce0e:	4b05      	ldr	r3, [pc, #20]	; (ce24 <Radio_WriteMode+0xd8>)
    ce10:	4798      	blx	r3
        if (1 == blocking)
    ce12:	9b01      	ldr	r3, [sp, #4]
    ce14:	2b01      	cmp	r3, #1
    ce16:	d1cf      	bne.n	cdb8 <Radio_WriteMode+0x6c>
                SystemBlockingWaitMs(1);
    ce18:	2001      	movs	r0, #1
    ce1a:	4b04      	ldr	r3, [pc, #16]	; (ce2c <Radio_WriteMode+0xe0>)
    ce1c:	4798      	blx	r3
    ce1e:	e7cb      	b.n	cdb8 <Radio_WriteMode+0x6c>
    ce20:	0000c0b9 	.word	0x0000c0b9
    ce24:	0000c091 	.word	0x0000c091
    ce28:	0000471d 	.word	0x0000471d
    ce2c:	0000c215 	.word	0x0000c215

0000ce30 <RADIO_FHSSChangeChannel>:

\param		- none	
\return		- none.
*************************************************************************/
void RADIO_FHSSChangeChannel(void)
{
    ce30:	b500      	push	{lr}
    ce32:	b083      	sub	sp, #12
    uint32_t freq;
    RADIO_RegisterRead(REG_LORA_IRQFLAGS);
    ce34:	2012      	movs	r0, #18
    ce36:	4b0d      	ldr	r3, [pc, #52]	; (ce6c <RADIO_FHSSChangeChannel+0x3c>)
    ce38:	4798      	blx	r3

    if (radioConfiguration.frequencyHopPeriod)
    ce3a:	4b0d      	ldr	r3, [pc, #52]	; (ce70 <RADIO_FHSSChangeChannel+0x40>)
    ce3c:	8adb      	ldrh	r3, [r3, #22]
    ce3e:	2b00      	cmp	r3, #0
    ce40:	d007      	beq.n	ce52 <RADIO_FHSSChangeChannel+0x22>
    {
        if ((radioConfiguration.radioCallback) &&
    ce42:	4b0b      	ldr	r3, [pc, #44]	; (ce70 <RADIO_FHSSChangeChannel+0x40>)
    ce44:	691b      	ldr	r3, [r3, #16]
    ce46:	2b00      	cmp	r3, #0
    ce48:	d003      	beq.n	ce52 <RADIO_FHSSChangeChannel+0x22>
            (1 == radioCallbackMask.BitMask.radioFhssfreqCallback))
    ce4a:	4a0a      	ldr	r2, [pc, #40]	; (ce74 <RADIO_FHSSChangeChannel+0x44>)
    ce4c:	7812      	ldrb	r2, [r2, #0]
        if ((radioConfiguration.radioCallback) &&
    ce4e:	0692      	lsls	r2, r2, #26
    ce50:	d405      	bmi.n	ce5e <RADIO_FHSSChangeChannel+0x2e>
            Radio_WriteFrequency(freq);
        }
    }

    // Clear FHSSChangeChannel interrupt
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 1 << SHIFT1);
    ce52:	2102      	movs	r1, #2
    ce54:	2012      	movs	r0, #18
    ce56:	4b08      	ldr	r3, [pc, #32]	; (ce78 <RADIO_FHSSChangeChannel+0x48>)
    ce58:	4798      	blx	r3
}
    ce5a:	b003      	add	sp, #12
    ce5c:	bd00      	pop	{pc}
            radioConfiguration.radioCallback(RADIO_FHSS_NEXT_FREQ_CALLBACK, (void *)&freq);
    ce5e:	a901      	add	r1, sp, #4
    ce60:	2020      	movs	r0, #32
    ce62:	4798      	blx	r3
            Radio_WriteFrequency(freq);
    ce64:	9801      	ldr	r0, [sp, #4]
    ce66:	4b05      	ldr	r3, [pc, #20]	; (ce7c <RADIO_FHSSChangeChannel+0x4c>)
    ce68:	4798      	blx	r3
    ce6a:	e7f2      	b.n	ce52 <RADIO_FHSSChangeChannel+0x22>
    ce6c:	0000c0b9 	.word	0x0000c0b9
    ce70:	20002cf4 	.word	0x20002cf4
    ce74:	20002eb2 	.word	0x20002eb2
    ce78:	0000c091 	.word	0x0000c091
    ce7c:	0000d7a5 	.word	0x0000d7a5

0000ce80 <RADIO_ReadRandom>:

\param		- none	
\return		- returns the random number generated.
*************************************************************************/
uint16_t RADIO_ReadRandom(void)
{
    ce80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    uint16_t retVal;
    retVal = 0;
	
	// Turn on the RF switch.
	Radio_EnableRfControl(RADIO_RFCTRL_RX); 
    ce82:	2000      	movs	r0, #0
    ce84:	4b1a      	ldr	r3, [pc, #104]	; (cef0 <RADIO_ReadRandom+0x70>)
    ce86:	4798      	blx	r3
	// Enabling Radio Clock
	Radio_SetClockInput();
    ce88:	4b1a      	ldr	r3, [pc, #104]	; (cef4 <RADIO_ReadRandom+0x74>)
    ce8a:	4798      	blx	r3
	
    // Mask all interrupts, do many measurements of RSSI
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    ce8c:	2201      	movs	r2, #1
    ce8e:	2101      	movs	r1, #1
    ce90:	2000      	movs	r0, #0
    ce92:	4c19      	ldr	r4, [pc, #100]	; (cef8 <RADIO_ReadRandom+0x78>)
    ce94:	47a0      	blx	r4
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0xFF);
    ce96:	21ff      	movs	r1, #255	; 0xff
    ce98:	2011      	movs	r0, #17
    ce9a:	4b18      	ldr	r3, [pc, #96]	; (cefc <RADIO_ReadRandom+0x7c>)
    ce9c:	4798      	blx	r3
    Radio_WriteMode(MODE_RXCONT, MODULATION_LORA, 1);
    ce9e:	2201      	movs	r2, #1
    cea0:	2101      	movs	r1, #1
    cea2:	2005      	movs	r0, #5
    cea4:	47a0      	blx	r4
    cea6:	2410      	movs	r4, #16
    retVal = 0;
    cea8:	2500      	movs	r5, #0
    for (i = 0; i < 16; i++)
    {
        SystemBlockingWaitMs(1);
    ceaa:	4f15      	ldr	r7, [pc, #84]	; (cf00 <RADIO_ReadRandom+0x80>)
        retVal <<= SHIFT1;
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    ceac:	4e15      	ldr	r6, [pc, #84]	; (cf04 <RADIO_ReadRandom+0x84>)
        SystemBlockingWaitMs(1);
    ceae:	2001      	movs	r0, #1
    ceb0:	47b8      	blx	r7
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    ceb2:	202c      	movs	r0, #44	; 0x2c
    ceb4:	47b0      	blx	r6
    ceb6:	2301      	movs	r3, #1
    ceb8:	4018      	ands	r0, r3
        retVal <<= SHIFT1;
    ceba:	006d      	lsls	r5, r5, #1
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    cebc:	4305      	orrs	r5, r0
    cebe:	b2ad      	uxth	r5, r5
    cec0:	3c01      	subs	r4, #1
    cec2:	b2e4      	uxtb	r4, r4
    for (i = 0; i < 16; i++)
    cec4:	2c00      	cmp	r4, #0
    cec6:	d1f2      	bne.n	ceae <RADIO_ReadRandom+0x2e>
    }
	
	// Turning off the RF switch now.
	Radio_DisableRfControl(RADIO_RFCTRL_RX);
    cec8:	2000      	movs	r0, #0
    ceca:	4b0f      	ldr	r3, [pc, #60]	; (cf08 <RADIO_ReadRandom+0x88>)
    cecc:	4798      	blx	r3
	
    // Return radio to sleep
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    cece:	2201      	movs	r2, #1
    ced0:	2101      	movs	r1, #1
    ced2:	2000      	movs	r0, #0
    ced4:	4b08      	ldr	r3, [pc, #32]	; (cef8 <RADIO_ReadRandom+0x78>)
    ced6:	4798      	blx	r3
    // Clear interrupts in case any have been generated
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 0xFF);
    ced8:	21ff      	movs	r1, #255	; 0xff
    ceda:	2012      	movs	r0, #18
    cedc:	4c07      	ldr	r4, [pc, #28]	; (cefc <RADIO_ReadRandom+0x7c>)
    cede:	47a0      	blx	r4
    // Unmask all interrupts
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0x00);
    cee0:	2100      	movs	r1, #0
    cee2:	2011      	movs	r0, #17
    cee4:	47a0      	blx	r4
	// Disabling Radio Clock save power
	Radio_ResetClockInput();
    cee6:	4b09      	ldr	r3, [pc, #36]	; (cf0c <RADIO_ReadRandom+0x8c>)
    cee8:	4798      	blx	r3
	
    return retVal;
}
    ceea:	0028      	movs	r0, r5
    ceec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ceee:	46c0      	nop			; (mov r8, r8)
    cef0:	0000e061 	.word	0x0000e061
    cef4:	0000e511 	.word	0x0000e511
    cef8:	0000cd4d 	.word	0x0000cd4d
    cefc:	0000c091 	.word	0x0000c091
    cf00:	0000c215 	.word	0x0000c215
    cf04:	0000c0b9 	.word	0x0000c0b9
    cf08:	0000e189 	.word	0x0000e189
    cf0c:	0000e545 	.word	0x0000e545

0000cf10 <Radio_ReadRssi>:

\param rssi	- The RSSI measured in the channel.
\return		- ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t Radio_ReadRssi(int16_t *rssi)
{
    cf10:	b510      	push	{r4, lr}
    cf12:	0004      	movs	r4, r0
	if (MODULATION_LORA == radioConfiguration.modulation)
    cf14:	2334      	movs	r3, #52	; 0x34
    cf16:	4a11      	ldr	r2, [pc, #68]	; (cf5c <Radio_ReadRssi+0x4c>)
    cf18:	5cd3      	ldrb	r3, [r2, r3]
    cf1a:	2b01      	cmp	r3, #1
    cf1c:	d003      	beq.n	cf26 <Radio_ReadRssi+0x16>
		*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
#endif // UT
	}
	else
	{
		return ERR_UNSUPPORTED_ATTR;
    cf1e:	2006      	movs	r0, #6
	else if (MODULATION_FSK == radioConfiguration.modulation)
    cf20:	2b00      	cmp	r3, #0
    cf22:	d012      	beq.n	cf4a <Radio_ReadRssi+0x3a>
	}
	return ERR_NONE;
}
    cf24:	bd10      	pop	{r4, pc}
		if (radioConfiguration.frequency >= HF_FREQ_HZ)
    cf26:	4b0e      	ldr	r3, [pc, #56]	; (cf60 <Radio_ReadRssi+0x50>)
    cf28:	6812      	ldr	r2, [r2, #0]
    cf2a:	429a      	cmp	r2, r3
    cf2c:	d906      	bls.n	cf3c <Radio_ReadRssi+0x2c>
			*rssi = RSSI_HF_OFFSET + RADIO_RegisterRead(REG_LORA_PKTRSSIVALUE);
    cf2e:	201a      	movs	r0, #26
    cf30:	4b0c      	ldr	r3, [pc, #48]	; (cf64 <Radio_ReadRssi+0x54>)
    cf32:	4798      	blx	r3
    cf34:	389d      	subs	r0, #157	; 0x9d
    cf36:	8020      	strh	r0, [r4, #0]
	return ERR_NONE;
    cf38:	2000      	movs	r0, #0
    cf3a:	e7f3      	b.n	cf24 <Radio_ReadRssi+0x14>
			*rssi = RSSI_LF_OFFSET + RADIO_RegisterRead(REG_LORA_PKTRSSIVALUE);
    cf3c:	201a      	movs	r0, #26
    cf3e:	4b09      	ldr	r3, [pc, #36]	; (cf64 <Radio_ReadRssi+0x54>)
    cf40:	4798      	blx	r3
    cf42:	38a4      	subs	r0, #164	; 0xa4
    cf44:	8020      	strh	r0, [r4, #0]
	return ERR_NONE;
    cf46:	2000      	movs	r0, #0
    cf48:	e7ec      	b.n	cf24 <Radio_ReadRssi+0x14>
		*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
    cf4a:	300b      	adds	r0, #11
    cf4c:	4b05      	ldr	r3, [pc, #20]	; (cf64 <Radio_ReadRssi+0x54>)
    cf4e:	4798      	blx	r3
    cf50:	0840      	lsrs	r0, r0, #1
    cf52:	b2c3      	uxtb	r3, r0
    cf54:	425b      	negs	r3, r3
    cf56:	8023      	strh	r3, [r4, #0]
	return ERR_NONE;
    cf58:	2000      	movs	r0, #0
    cf5a:	e7e3      	b.n	cf24 <Radio_ReadRssi+0x14>
    cf5c:	20002cf4 	.word	0x20002cf4
    cf60:	3361137f 	.word	0x3361137f
    cf64:	0000c0b9 	.word	0x0000c0b9

0000cf68 <Radio_ReadFSKRssi>:

\param rssi	- The RSSI measured in the channel.
\return		- ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t Radio_ReadFSKRssi(int16_t *rssi)
{	
    cf68:	b510      	push	{r4, lr}
    cf6a:	0004      	movs	r4, r0
#ifdef UT
	*rssi = testRssi;
#else // UT
	*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
    cf6c:	2011      	movs	r0, #17
    cf6e:	4b04      	ldr	r3, [pc, #16]	; (cf80 <Radio_ReadFSKRssi+0x18>)
    cf70:	4798      	blx	r3
    cf72:	0840      	lsrs	r0, r0, #1
    cf74:	b2c0      	uxtb	r0, r0
    cf76:	4240      	negs	r0, r0
    cf78:	8020      	strh	r0, [r4, #0]
#endif // UT
	
	return ERR_NONE;
}
    cf7a:	2000      	movs	r0, #0
    cf7c:	bd10      	pop	{r4, pc}
    cf7e:	46c0      	nop			; (mov r8, r8)
    cf80:	0000c0b9 	.word	0x0000c0b9

0000cf84 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    cf84:	b510      	push	{r4, lr}
	tmr_cca_callback();
    cf86:	4b01      	ldr	r3, [pc, #4]	; (cf8c <tc_cca_callback+0x8>)
    cf88:	4798      	blx	r3
}
    cf8a:	bd10      	pop	{r4, pc}
    cf8c:	00011b21 	.word	0x00011b21

0000cf90 <tc_ovf_callback>:
{
    cf90:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    cf92:	4b01      	ldr	r3, [pc, #4]	; (cf98 <tc_ovf_callback+0x8>)
    cf94:	4798      	blx	r3
}
    cf96:	bd10      	pop	{r4, pc}
    cf98:	00011ad9 	.word	0x00011ad9

0000cf9c <tmr_read_count>:
{
    cf9c:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    cf9e:	4802      	ldr	r0, [pc, #8]	; (cfa8 <tmr_read_count+0xc>)
    cfa0:	4b02      	ldr	r3, [pc, #8]	; (cfac <tmr_read_count+0x10>)
    cfa2:	4798      	blx	r3
    cfa4:	b280      	uxth	r0, r0
}
    cfa6:	bd10      	pop	{r4, pc}
    cfa8:	20002d84 	.word	0x20002d84
    cfac:	00006f99 	.word	0x00006f99

0000cfb0 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    cfb0:	4b03      	ldr	r3, [pc, #12]	; (cfc0 <tmr_disable_cc_interrupt+0x10>)
    cfb2:	2110      	movs	r1, #16
    cfb4:	681a      	ldr	r2, [r3, #0]
    cfb6:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    cfb8:	7e5a      	ldrb	r2, [r3, #25]
    cfba:	438a      	bics	r2, r1
    cfbc:	765a      	strb	r2, [r3, #25]
}
    cfbe:	4770      	bx	lr
    cfc0:	20002d84 	.word	0x20002d84

0000cfc4 <tmr_enable_cc_interrupt>:
{
    cfc4:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    cfc6:	4c0a      	ldr	r4, [pc, #40]	; (cff0 <tmr_enable_cc_interrupt+0x2c>)
    cfc8:	6820      	ldr	r0, [r4, #0]
    cfca:	4b0a      	ldr	r3, [pc, #40]	; (cff4 <tmr_enable_cc_interrupt+0x30>)
    cfcc:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    cfce:	4b0a      	ldr	r3, [pc, #40]	; (cff8 <tmr_enable_cc_interrupt+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    cfd0:	5c1b      	ldrb	r3, [r3, r0]
    cfd2:	221f      	movs	r2, #31
    cfd4:	401a      	ands	r2, r3
    cfd6:	2301      	movs	r3, #1
    cfd8:	4093      	lsls	r3, r2
    cfda:	4a08      	ldr	r2, [pc, #32]	; (cffc <tmr_enable_cc_interrupt+0x38>)
    cfdc:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    cfde:	7e63      	ldrb	r3, [r4, #25]
    cfe0:	2210      	movs	r2, #16
    cfe2:	4313      	orrs	r3, r2
    cfe4:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    cfe6:	6823      	ldr	r3, [r4, #0]
    cfe8:	2210      	movs	r2, #16
    cfea:	725a      	strb	r2, [r3, #9]
}
    cfec:	bd10      	pop	{r4, pc}
    cfee:	46c0      	nop			; (mov r8, r8)
    cff0:	20002d84 	.word	0x20002d84
    cff4:	00006c6d 	.word	0x00006c6d
    cff8:	00017360 	.word	0x00017360
    cffc:	e000e100 	.word	0xe000e100

0000d000 <tmr_disable_ovf_interrupt>:
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(2);
		module->enable_callback_mask &= ~TC_INTFLAG_MC(2);
	}
	else {
		module->hw->COUNT8.INTENCLR.reg = (1 << callback_type);
    d000:	4b03      	ldr	r3, [pc, #12]	; (d010 <tmr_disable_ovf_interrupt+0x10>)
    d002:	2101      	movs	r1, #1
    d004:	681a      	ldr	r2, [r3, #0]
    d006:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~(1 << callback_type);
    d008:	7e5a      	ldrb	r2, [r3, #25]
    d00a:	438a      	bics	r2, r1
    d00c:	765a      	strb	r2, [r3, #25]
}
    d00e:	4770      	bx	lr
    d010:	20002d84 	.word	0x20002d84

0000d014 <tmr_enable_ovf_interrupt>:
{
    d014:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    d016:	4c0a      	ldr	r4, [pc, #40]	; (d040 <tmr_enable_ovf_interrupt+0x2c>)
    d018:	6820      	ldr	r0, [r4, #0]
    d01a:	4b0a      	ldr	r3, [pc, #40]	; (d044 <tmr_enable_ovf_interrupt+0x30>)
    d01c:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    d01e:	4b0a      	ldr	r3, [pc, #40]	; (d048 <tmr_enable_ovf_interrupt+0x34>)
    d020:	5c1a      	ldrb	r2, [r3, r0]
    d022:	231f      	movs	r3, #31
    d024:	4013      	ands	r3, r2
    d026:	2201      	movs	r2, #1
    d028:	0011      	movs	r1, r2
    d02a:	4099      	lsls	r1, r3
    d02c:	4b07      	ldr	r3, [pc, #28]	; (d04c <tmr_enable_ovf_interrupt+0x38>)
    d02e:	6019      	str	r1, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    d030:	7e63      	ldrb	r3, [r4, #25]
    d032:	2101      	movs	r1, #1
    d034:	430b      	orrs	r3, r1
    d036:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    d038:	6823      	ldr	r3, [r4, #0]
    d03a:	725a      	strb	r2, [r3, #9]
}
    d03c:	bd10      	pop	{r4, pc}
    d03e:	46c0      	nop			; (mov r8, r8)
    d040:	20002d84 	.word	0x20002d84
    d044:	00006c6d 	.word	0x00006c6d
    d048:	00017360 	.word	0x00017360
    d04c:	e000e100 	.word	0xe000e100

0000d050 <tmr_write_cmpreg>:
{
    d050:	b510      	push	{r4, lr}
    d052:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    d054:	2100      	movs	r1, #0
    d056:	4802      	ldr	r0, [pc, #8]	; (d060 <tmr_write_cmpreg+0x10>)
    d058:	4b02      	ldr	r3, [pc, #8]	; (d064 <tmr_write_cmpreg+0x14>)
    d05a:	4798      	blx	r3
}
    d05c:	bd10      	pop	{r4, pc}
    d05e:	46c0      	nop			; (mov r8, r8)
    d060:	20002d84 	.word	0x20002d84
    d064:	00006fe1 	.word	0x00006fe1

0000d068 <save_cpu_interrupt>:
{
    d068:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    d06a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d06e:	425a      	negs	r2, r3
    d070:	4153      	adcs	r3, r2
    d072:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    d074:	b672      	cpsid	i
    d076:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d07a:	2200      	movs	r2, #0
    d07c:	4b02      	ldr	r3, [pc, #8]	; (d088 <save_cpu_interrupt+0x20>)
    d07e:	701a      	strb	r2, [r3, #0]
	return flags;
    d080:	9801      	ldr	r0, [sp, #4]
	return cpu_irq_save();
    d082:	b2c0      	uxtb	r0, r0
}
    d084:	b002      	add	sp, #8
    d086:	4770      	bx	lr
    d088:	20000014 	.word	0x20000014

0000d08c <restore_cpu_interrupt>:
	if (cpu_irq_is_enabled_flags(flags))
    d08c:	2800      	cmp	r0, #0
    d08e:	d005      	beq.n	d09c <restore_cpu_interrupt+0x10>
		cpu_irq_enable();
    d090:	2201      	movs	r2, #1
    d092:	4b03      	ldr	r3, [pc, #12]	; (d0a0 <restore_cpu_interrupt+0x14>)
    d094:	701a      	strb	r2, [r3, #0]
    d096:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d09a:	b662      	cpsie	i
}
    d09c:	4770      	bx	lr
    d09e:	46c0      	nop			; (mov r8, r8)
    d0a0:	20000014 	.word	0x20000014

0000d0a4 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    d0a4:	b570      	push	{r4, r5, r6, lr}
	config->clock_source               = GCLK_GENERATOR_0;
    d0a6:	4a33      	ldr	r2, [pc, #204]	; (d174 <tmr_init+0xd0>)
    d0a8:	2100      	movs	r1, #0
    d0aa:	2300      	movs	r3, #0
    d0ac:	7011      	strb	r1, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    d0ae:	70d1      	strb	r1, [r2, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    d0b0:	2000      	movs	r0, #0
    d0b2:	8091      	strh	r1, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    d0b4:	7190      	strb	r0, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    d0b6:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
    d0b8:	7053      	strb	r3, [r2, #1]
	config->on_demand                  = false;
    d0ba:	7093      	strb	r3, [r2, #2]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    d0bc:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    d0be:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    d0c0:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    d0c2:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    d0c4:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    d0c6:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    d0c8:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    d0ca:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    d0cc:	6151      	str	r1, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    d0ce:	6191      	str	r1, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    d0d0:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    d0d2:	6211      	str	r1, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    d0d4:	6251      	str	r1, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    d0d6:	8511      	strh	r1, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    d0d8:	8591      	strh	r1, [r2, #44]	; 0x2c
	config->double_buffering_enabled = false;
    d0da:	2334      	movs	r3, #52	; 0x34
    d0dc:	54d0      	strb	r0, [r2, r3]
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    d0de:	3b35      	subs	r3, #53	; 0x35
    d0e0:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    d0e2:	4c25      	ldr	r4, [pc, #148]	; (d178 <tmr_init+0xd4>)
    d0e4:	4925      	ldr	r1, [pc, #148]	; (d17c <tmr_init+0xd8>)
    d0e6:	0020      	movs	r0, r4
    d0e8:	4b25      	ldr	r3, [pc, #148]	; (d180 <tmr_init+0xdc>)
    d0ea:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    d0ec:	2200      	movs	r2, #0
    d0ee:	4925      	ldr	r1, [pc, #148]	; (d184 <tmr_init+0xe0>)
    d0f0:	0020      	movs	r0, r4
    d0f2:	4d25      	ldr	r5, [pc, #148]	; (d188 <tmr_init+0xe4>)
    d0f4:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    d0f6:	2202      	movs	r2, #2
    d0f8:	4924      	ldr	r1, [pc, #144]	; (d18c <tmr_init+0xe8>)
    d0fa:	0020      	movs	r0, r4
    d0fc:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    d0fe:	6820      	ldr	r0, [r4, #0]
    d100:	4b23      	ldr	r3, [pc, #140]	; (d190 <tmr_init+0xec>)
    d102:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    d104:	4b23      	ldr	r3, [pc, #140]	; (d194 <tmr_init+0xf0>)
    d106:	5c1a      	ldrb	r2, [r3, r0]
    d108:	231f      	movs	r3, #31
    d10a:	4013      	ands	r3, r2
    d10c:	2101      	movs	r1, #1
    d10e:	000a      	movs	r2, r1
    d110:	409a      	lsls	r2, r3
    d112:	4b21      	ldr	r3, [pc, #132]	; (d198 <tmr_init+0xf4>)
    d114:	601a      	str	r2, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    d116:	7e63      	ldrb	r3, [r4, #25]
    d118:	2201      	movs	r2, #1
    d11a:	4313      	orrs	r3, r2
    d11c:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    d11e:	6822      	ldr	r2, [r4, #0]
    d120:	7251      	strb	r1, [r2, #9]
	return (tc_module->SYNCBUSY.reg);
    d122:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    d124:	2b00      	cmp	r3, #0
    d126:	d1fc      	bne.n	d122 <tmr_init+0x7e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    d128:	6813      	ldr	r3, [r2, #0]
    d12a:	2102      	movs	r1, #2
    d12c:	430b      	orrs	r3, r1
    d12e:	6013      	str	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;	
    d130:	2000      	movs	r0, #0
    d132:	4b1a      	ldr	r3, [pc, #104]	; (d19c <tmr_init+0xf8>)
    d134:	4798      	blx	r3
    d136:	4d1a      	ldr	r5, [pc, #104]	; (d1a0 <tmr_init+0xfc>)
    d138:	47a8      	blx	r5
    d13a:	491a      	ldr	r1, [pc, #104]	; (d1a4 <tmr_init+0x100>)
    d13c:	4b1a      	ldr	r3, [pc, #104]	; (d1a8 <tmr_init+0x104>)
    d13e:	4798      	blx	r3
    d140:	1c04      	adds	r4, r0, #0
	#endif
	
	if ((timer_multiplier - (uint32_t)timer_multiplier) >= 0.5f)
    d142:	4b1a      	ldr	r3, [pc, #104]	; (d1ac <tmr_init+0x108>)
    d144:	4798      	blx	r3
    d146:	47a8      	blx	r5
    d148:	1c01      	adds	r1, r0, #0
    d14a:	1c20      	adds	r0, r4, #0
    d14c:	4b18      	ldr	r3, [pc, #96]	; (d1b0 <tmr_init+0x10c>)
    d14e:	4798      	blx	r3
    d150:	21fc      	movs	r1, #252	; 0xfc
    d152:	0589      	lsls	r1, r1, #22
    d154:	4b17      	ldr	r3, [pc, #92]	; (d1b4 <tmr_init+0x110>)
    d156:	4798      	blx	r3
    d158:	2800      	cmp	r0, #0
    d15a:	d005      	beq.n	d168 <tmr_init+0xc4>
	{
		timer_multiplier += 1.0f;
    d15c:	21fe      	movs	r1, #254	; 0xfe
    d15e:	0589      	lsls	r1, r1, #22
    d160:	1c20      	adds	r0, r4, #0
    d162:	4b15      	ldr	r3, [pc, #84]	; (d1b8 <tmr_init+0x114>)
    d164:	4798      	blx	r3
    d166:	1c04      	adds	r4, r0, #0
	}
	
	return (uint8_t) timer_multiplier;
    d168:	1c20      	adds	r0, r4, #0
    d16a:	4b10      	ldr	r3, [pc, #64]	; (d1ac <tmr_init+0x108>)
    d16c:	4798      	blx	r3
    d16e:	b2c0      	uxtb	r0, r0
}
    d170:	bd70      	pop	{r4, r5, r6, pc}
    d172:	46c0      	nop			; (mov r8, r8)
    d174:	20002d4c 	.word	0x20002d4c
    d178:	20002d84 	.word	0x20002d84
    d17c:	42002000 	.word	0x42002000
    d180:	00006ca9 	.word	0x00006ca9
    d184:	0000cf91 	.word	0x0000cf91
    d188:	00006ba5 	.word	0x00006ba5
    d18c:	0000cf85 	.word	0x0000cf85
    d190:	00006c6d 	.word	0x00006c6d
    d194:	00017360 	.word	0x00017360
    d198:	e000e100 	.word	0xe000e100
    d19c:	0000696d 	.word	0x0000696d
    d1a0:	00012ef9 	.word	0x00012ef9
    d1a4:	49742400 	.word	0x49742400
    d1a8:	000124c1 	.word	0x000124c1
    d1ac:	00011f71 	.word	0x00011f71
    d1b0:	00012ae1 	.word	0x00012ae1
    d1b4:	00011ec9 	.word	0x00011ec9
    d1b8:	0001219d 	.word	0x0001219d

0000d1bc <LORAWAN_TxHandler>:
    d1bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    d1be:	b087      	sub	sp, #28
    d1c0:	466b      	mov	r3, sp
    d1c2:	2501      	movs	r5, #1
    d1c4:	4c30      	ldr	r4, [pc, #192]	; (d288 <LORAWAN_TxHandler+0xcc>)
    d1c6:	701d      	strb	r5, [r3, #0]
    d1c8:	0023      	movs	r3, r4
    d1ca:	466a      	mov	r2, sp
    d1cc:	33c1      	adds	r3, #193	; 0xc1
    d1ce:	781b      	ldrb	r3, [r3, #0]
    d1d0:	4669      	mov	r1, sp
    d1d2:	7053      	strb	r3, [r2, #1]
    d1d4:	0023      	movs	r3, r4
    d1d6:	33bf      	adds	r3, #191	; 0xbf
    d1d8:	781b      	ldrb	r3, [r3, #0]
    d1da:	202f      	movs	r0, #47	; 0x2f
    d1dc:	7093      	strb	r3, [r2, #2]
    d1de:	aa03      	add	r2, sp, #12
    d1e0:	4b2a      	ldr	r3, [pc, #168]	; (d28c <LORAWAN_TxHandler+0xd0>)
    d1e2:	4798      	blx	r3
    d1e4:	2808      	cmp	r0, #8
    d1e6:	d004      	beq.n	d1f2 <LORAWAN_TxHandler+0x36>
    d1e8:	4b29      	ldr	r3, [pc, #164]	; (d290 <LORAWAN_TxHandler+0xd4>)
    d1ea:	4798      	blx	r3
    d1ec:	2000      	movs	r0, #0
    d1ee:	b007      	add	sp, #28
    d1f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d1f2:	0023      	movs	r3, r4
    d1f4:	33d4      	adds	r3, #212	; 0xd4
    d1f6:	781b      	ldrb	r3, [r3, #0]
    d1f8:	ae01      	add	r6, sp, #4
    d1fa:	2b04      	cmp	r3, #4
    d1fc:	d103      	bne.n	d206 <LORAWAN_TxHandler+0x4a>
    d1fe:	0030      	movs	r0, r6
    d200:	4b24      	ldr	r3, [pc, #144]	; (d294 <LORAWAN_TxHandler+0xd8>)
    d202:	7035      	strb	r5, [r6, #0]
    d204:	4798      	blx	r3
    d206:	4b24      	ldr	r3, [pc, #144]	; (d298 <LORAWAN_TxHandler+0xdc>)
    d208:	9803      	ldr	r0, [sp, #12]
    d20a:	9904      	ldr	r1, [sp, #16]
    d20c:	9a05      	ldr	r2, [sp, #20]
    d20e:	4798      	blx	r3
    d210:	0023      	movs	r3, r4
    d212:	33dc      	adds	r3, #220	; 0xdc
    d214:	681d      	ldr	r5, [r3, #0]
    d216:	23df      	movs	r3, #223	; 0xdf
    d218:	4f20      	ldr	r7, [pc, #128]	; (d29c <LORAWAN_TxHandler+0xe0>)
    d21a:	005b      	lsls	r3, r3, #1
    d21c:	2d00      	cmp	r5, #0
    d21e:	d023      	beq.n	d268 <LORAWAN_TxHandler+0xac>
    d220:	2201      	movs	r2, #1
    d222:	54e2      	strb	r2, [r4, r3]
    d224:	7828      	ldrb	r0, [r5, #0]
    d226:	7a2b      	ldrb	r3, [r5, #8]
    d228:	1e42      	subs	r2, r0, #1
    d22a:	4190      	sbcs	r0, r2
    d22c:	7869      	ldrb	r1, [r5, #1]
    d22e:	686a      	ldr	r2, [r5, #4]
    d230:	b2c0      	uxtb	r0, r0
    d232:	47b8      	blx	r7
    d234:	0023      	movs	r3, r4
    d236:	33a6      	adds	r3, #166	; 0xa6
    d238:	881b      	ldrh	r3, [r3, #0]
    d23a:	0030      	movs	r0, r6
    d23c:	7033      	strb	r3, [r6, #0]
    d23e:	4b18      	ldr	r3, [pc, #96]	; (d2a0 <LORAWAN_TxHandler+0xe4>)
    d240:	6073      	str	r3, [r6, #4]
    d242:	4b18      	ldr	r3, [pc, #96]	; (d2a4 <LORAWAN_TxHandler+0xe8>)
    d244:	4798      	blx	r3
    d246:	2800      	cmp	r0, #0
    d248:	d114      	bne.n	d274 <LORAWAN_TxHandler+0xb8>
    d24a:	0021      	movs	r1, r4
    d24c:	220e      	movs	r2, #14
    d24e:	315c      	adds	r1, #92	; 0x5c
    d250:	780b      	ldrb	r3, [r1, #0]
    d252:	4393      	bics	r3, r2
    d254:	001a      	movs	r2, r3
    d256:	2302      	movs	r3, #2
    d258:	4313      	orrs	r3, r2
    d25a:	700b      	strb	r3, [r1, #0]
    d25c:	2208      	movs	r2, #8
    d25e:	346c      	adds	r4, #108	; 0x6c
    d260:	7823      	ldrb	r3, [r4, #0]
    d262:	4393      	bics	r3, r2
    d264:	7023      	strb	r3, [r4, #0]
    d266:	e7c1      	b.n	d1ec <LORAWAN_TxHandler+0x30>
    d268:	54e5      	strb	r5, [r4, r3]
    d26a:	002a      	movs	r2, r5
    d26c:	002b      	movs	r3, r5
    d26e:	0029      	movs	r1, r5
    d270:	0028      	movs	r0, r5
    d272:	e7de      	b.n	d232 <LORAWAN_TxHandler+0x76>
    d274:	0022      	movs	r2, r4
    d276:	2120      	movs	r1, #32
    d278:	326c      	adds	r2, #108	; 0x6c
    d27a:	7813      	ldrb	r3, [r2, #0]
    d27c:	438b      	bics	r3, r1
    d27e:	7013      	strb	r3, [r2, #0]
    d280:	4b03      	ldr	r3, [pc, #12]	; (d290 <LORAWAN_TxHandler+0xd4>)
    d282:	4798      	blx	r3
    d284:	e7ea      	b.n	d25c <LORAWAN_TxHandler+0xa0>
    d286:	46c0      	nop			; (mov r8, r8)
    d288:	20002fd8 	.word	0x20002fd8
    d28c:	0000c2cd 	.word	0x0000c2cd
    d290:	00010115 	.word	0x00010115
    d294:	0000e755 	.word	0x0000e755
    d298:	0000f9f1 	.word	0x0000f9f1
    d29c:	0000fe2d 	.word	0x0000fe2d
    d2a0:	200031a8 	.word	0x200031a8
    d2a4:	0000de81 	.word	0x0000de81

0000d2a8 <LORAWAN_JoinReqHandler>:
    d2a8:	b530      	push	{r4, r5, lr}
    d2aa:	b087      	sub	sp, #28
    d2ac:	466a      	mov	r2, sp
    d2ae:	2300      	movs	r3, #0
    d2b0:	4c2a      	ldr	r4, [pc, #168]	; (d35c <LORAWAN_JoinReqHandler+0xb4>)
    d2b2:	7013      	strb	r3, [r2, #0]
    d2b4:	0023      	movs	r3, r4
    d2b6:	33c1      	adds	r3, #193	; 0xc1
    d2b8:	781b      	ldrb	r3, [r3, #0]
    d2ba:	7053      	strb	r3, [r2, #1]
    d2bc:	0023      	movs	r3, r4
    d2be:	33bf      	adds	r3, #191	; 0xbf
    d2c0:	781b      	ldrb	r3, [r3, #0]
    d2c2:	7093      	strb	r3, [r2, #2]
    d2c4:	0023      	movs	r3, r4
    d2c6:	33f0      	adds	r3, #240	; 0xf0
    d2c8:	781b      	ldrb	r3, [r3, #0]
    d2ca:	069b      	lsls	r3, r3, #26
    d2cc:	d511      	bpl.n	d2f2 <LORAWAN_JoinReqHandler+0x4a>
    d2ce:	0023      	movs	r3, r4
    d2d0:	334f      	adds	r3, #79	; 0x4f
    d2d2:	781a      	ldrb	r2, [r3, #0]
    d2d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
    d2d6:	021b      	lsls	r3, r3, #8
    d2d8:	4313      	orrs	r3, r2
    d2da:	0022      	movs	r2, r4
    d2dc:	3253      	adds	r2, #83	; 0x53
    d2de:	7811      	ldrb	r1, [r2, #0]
    d2e0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    d2e2:	0212      	lsls	r2, r2, #8
    d2e4:	430a      	orrs	r2, r1
    d2e6:	4313      	orrs	r3, r2
    d2e8:	d103      	bne.n	d2f2 <LORAWAN_JoinReqHandler+0x4a>
    d2ea:	0023      	movs	r3, r4
    d2ec:	2201      	movs	r2, #1
    d2ee:	335b      	adds	r3, #91	; 0x5b
    d2f0:	701a      	strb	r2, [r3, #0]
    d2f2:	aa03      	add	r2, sp, #12
    d2f4:	4669      	mov	r1, sp
    d2f6:	202f      	movs	r0, #47	; 0x2f
    d2f8:	4b19      	ldr	r3, [pc, #100]	; (d360 <LORAWAN_JoinReqHandler+0xb8>)
    d2fa:	4798      	blx	r3
    d2fc:	2808      	cmp	r0, #8
    d2fe:	d004      	beq.n	d30a <LORAWAN_JoinReqHandler+0x62>
    d300:	4b18      	ldr	r3, [pc, #96]	; (d364 <LORAWAN_JoinReqHandler+0xbc>)
    d302:	4798      	blx	r3
    d304:	2000      	movs	r0, #0
    d306:	b007      	add	sp, #28
    d308:	bd30      	pop	{r4, r5, pc}
    d30a:	4b17      	ldr	r3, [pc, #92]	; (d368 <LORAWAN_JoinReqHandler+0xc0>)
    d30c:	9803      	ldr	r0, [sp, #12]
    d30e:	9904      	ldr	r1, [sp, #16]
    d310:	9a05      	ldr	r2, [sp, #20]
    d312:	4798      	blx	r3
    d314:	0023      	movs	r3, r4
    d316:	33d4      	adds	r3, #212	; 0xd4
    d318:	781b      	ldrb	r3, [r3, #0]
    d31a:	ad01      	add	r5, sp, #4
    d31c:	2b04      	cmp	r3, #4
    d31e:	d104      	bne.n	d32a <LORAWAN_JoinReqHandler+0x82>
    d320:	3b03      	subs	r3, #3
    d322:	702b      	strb	r3, [r5, #0]
    d324:	0028      	movs	r0, r5
    d326:	4b11      	ldr	r3, [pc, #68]	; (d36c <LORAWAN_JoinReqHandler+0xc4>)
    d328:	4798      	blx	r3
    d32a:	23df      	movs	r3, #223	; 0xdf
    d32c:	2200      	movs	r2, #0
    d32e:	005b      	lsls	r3, r3, #1
    d330:	54e2      	strb	r2, [r4, r3]
    d332:	4b0f      	ldr	r3, [pc, #60]	; (d370 <LORAWAN_JoinReqHandler+0xc8>)
    d334:	4798      	blx	r3
    d336:	4b0f      	ldr	r3, [pc, #60]	; (d374 <LORAWAN_JoinReqHandler+0xcc>)
    d338:	7028      	strb	r0, [r5, #0]
    d33a:	606b      	str	r3, [r5, #4]
    d33c:	0028      	movs	r0, r5
    d33e:	4b0e      	ldr	r3, [pc, #56]	; (d378 <LORAWAN_JoinReqHandler+0xd0>)
    d340:	4798      	blx	r3
    d342:	2800      	cmp	r0, #0
    d344:	d001      	beq.n	d34a <LORAWAN_JoinReqHandler+0xa2>
    d346:	201b      	movs	r0, #27
    d348:	e7da      	b.n	d300 <LORAWAN_JoinReqHandler+0x58>
    d34a:	220e      	movs	r2, #14
    d34c:	345c      	adds	r4, #92	; 0x5c
    d34e:	7823      	ldrb	r3, [r4, #0]
    d350:	4393      	bics	r3, r2
    d352:	001a      	movs	r2, r3
    d354:	2302      	movs	r3, #2
    d356:	4313      	orrs	r3, r2
    d358:	7023      	strb	r3, [r4, #0]
    d35a:	e7d3      	b.n	d304 <LORAWAN_JoinReqHandler+0x5c>
    d35c:	20002fd8 	.word	0x20002fd8
    d360:	0000c2cd 	.word	0x0000c2cd
    d364:	0000f531 	.word	0x0000f531
    d368:	0000f9f1 	.word	0x0000f9f1
    d36c:	0000e755 	.word	0x0000e755
    d370:	0000f8e1 	.word	0x0000f8e1
    d374:	20003198 	.word	0x20003198
    d378:	0000de81 	.word	0x0000de81

0000d37c <LORAWAN_RxHandler>:
    d37c:	b513      	push	{r0, r1, r4, lr}
    d37e:	4b0c      	ldr	r3, [pc, #48]	; (d3b0 <LORAWAN_RxHandler+0x34>)
    d380:	781b      	ldrb	r3, [r3, #0]
    d382:	2b08      	cmp	r3, #8
    d384:	d011      	beq.n	d3aa <LORAWAN_RxHandler+0x2e>
    d386:	2b10      	cmp	r3, #16
    d388:	d001      	beq.n	d38e <LORAWAN_RxHandler+0x12>
    d38a:	2b01      	cmp	r3, #1
    d38c:	d10b      	bne.n	d3a6 <LORAWAN_RxHandler+0x2a>
    d38e:	466b      	mov	r3, sp
    d390:	1c9c      	adds	r4, r3, #2
    d392:	0021      	movs	r1, r4
    d394:	a801      	add	r0, sp, #4
    d396:	4b07      	ldr	r3, [pc, #28]	; (d3b4 <LORAWAN_RxHandler+0x38>)
    d398:	4798      	blx	r3
    d39a:	9801      	ldr	r0, [sp, #4]
    d39c:	2800      	cmp	r0, #0
    d39e:	d002      	beq.n	d3a6 <LORAWAN_RxHandler+0x2a>
    d3a0:	7821      	ldrb	r1, [r4, #0]
    d3a2:	4b05      	ldr	r3, [pc, #20]	; (d3b8 <LORAWAN_RxHandler+0x3c>)
    d3a4:	4798      	blx	r3
    d3a6:	2000      	movs	r0, #0
    d3a8:	bd16      	pop	{r1, r2, r4, pc}
    d3aa:	4b04      	ldr	r3, [pc, #16]	; (d3bc <LORAWAN_RxHandler+0x40>)
    d3ac:	4798      	blx	r3
    d3ae:	e7fa      	b.n	d3a6 <LORAWAN_RxHandler+0x2a>
    d3b0:	200023f3 	.word	0x200023f3
    d3b4:	0000e04d 	.word	0x0000e04d
    d3b8:	000109b5 	.word	0x000109b5
    d3bc:	0001040d 	.word	0x0001040d

0000d3c0 <LORAWAN_PostTask>:
    d3c0:	b510      	push	{r4, lr}
    d3c2:	4b08      	ldr	r3, [pc, #32]	; (d3e4 <LORAWAN_PostTask+0x24>)
    d3c4:	0004      	movs	r4, r0
    d3c6:	4798      	blx	r3
    d3c8:	2201      	movs	r2, #1
    d3ca:	40a2      	lsls	r2, r4
    d3cc:	4906      	ldr	r1, [pc, #24]	; (d3e8 <LORAWAN_PostTask+0x28>)
    d3ce:	780b      	ldrb	r3, [r1, #0]
    d3d0:	4313      	orrs	r3, r2
    d3d2:	b2db      	uxtb	r3, r3
    d3d4:	700b      	strb	r3, [r1, #0]
    d3d6:	4b05      	ldr	r3, [pc, #20]	; (d3ec <LORAWAN_PostTask+0x2c>)
    d3d8:	4798      	blx	r3
    d3da:	2004      	movs	r0, #4
    d3dc:	4b04      	ldr	r3, [pc, #16]	; (d3f0 <LORAWAN_PostTask+0x30>)
    d3de:	4798      	blx	r3
    d3e0:	bd10      	pop	{r4, pc}
    d3e2:	46c0      	nop			; (mov r8, r8)
    d3e4:	0000c231 	.word	0x0000c231
    d3e8:	2000204a 	.word	0x2000204a
    d3ec:	0000c23d 	.word	0x0000c23d
    d3f0:	0000cd29 	.word	0x0000cd29

0000d3f4 <LORAWAN_TaskHandler>:
    d3f4:	b570      	push	{r4, r5, r6, lr}
    d3f6:	2601      	movs	r6, #1
    d3f8:	4d0e      	ldr	r5, [pc, #56]	; (d434 <LORAWAN_TaskHandler+0x40>)
    d3fa:	e015      	b.n	d428 <LORAWAN_TaskHandler+0x34>
    d3fc:	2400      	movs	r4, #0
    d3fe:	782b      	ldrb	r3, [r5, #0]
    d400:	4123      	asrs	r3, r4
    d402:	4233      	tst	r3, r6
    d404:	d00d      	beq.n	d422 <LORAWAN_TaskHandler+0x2e>
    d406:	4b0c      	ldr	r3, [pc, #48]	; (d438 <LORAWAN_TaskHandler+0x44>)
    d408:	4798      	blx	r3
    d40a:	0032      	movs	r2, r6
    d40c:	40a2      	lsls	r2, r4
    d40e:	782b      	ldrb	r3, [r5, #0]
    d410:	00a4      	lsls	r4, r4, #2
    d412:	4393      	bics	r3, r2
    d414:	702b      	strb	r3, [r5, #0]
    d416:	4b09      	ldr	r3, [pc, #36]	; (d43c <LORAWAN_TaskHandler+0x48>)
    d418:	4798      	blx	r3
    d41a:	4b09      	ldr	r3, [pc, #36]	; (d440 <LORAWAN_TaskHandler+0x4c>)
    d41c:	58e3      	ldr	r3, [r4, r3]
    d41e:	4798      	blx	r3
    d420:	e7ea      	b.n	d3f8 <LORAWAN_TaskHandler+0x4>
    d422:	3401      	adds	r4, #1
    d424:	2c03      	cmp	r4, #3
    d426:	d1ea      	bne.n	d3fe <LORAWAN_TaskHandler+0xa>
    d428:	7828      	ldrb	r0, [r5, #0]
    d42a:	b2c0      	uxtb	r0, r0
    d42c:	2800      	cmp	r0, #0
    d42e:	d1e5      	bne.n	d3fc <LORAWAN_TaskHandler+0x8>
    d430:	bd70      	pop	{r4, r5, r6, pc}
    d432:	46c0      	nop			; (mov r8, r8)
    d434:	2000204a 	.word	0x2000204a
    d438:	0000c231 	.word	0x0000c231
    d43c:	0000c23d 	.word	0x0000c23d
    d440:	00017368 	.word	0x00017368

0000d444 <RADIO_GetAttr>:
    d444:	b510      	push	{r4, lr}
    d446:	000b      	movs	r3, r1
    d448:	281f      	cmp	r0, #31
    d44a:	d900      	bls.n	d44e <RADIO_GetAttr+0xa>
    d44c:	e067      	b.n	d51e <RADIO_GetAttr+0xda>
    d44e:	f004 fb8b 	bl	11b68 <__gnu_thumb1_case_uqi>
    d452:	1410      	.short	0x1410
    d454:	66201c19 	.word	0x66201c19
    d458:	312e2a27 	.word	0x312e2a27
    d45c:	3d3a3734 	.word	0x3d3a3734
    d460:	46434054 	.word	0x46434054
    d464:	66245149 	.word	0x66245149
    d468:	66666659 	.word	0x66666659
    d46c:	5c666617 	.word	0x5c666617
    d470:	6360      	.short	0x6360
    d472:	4a2c      	ldr	r2, [pc, #176]	; (d524 <RADIO_GetAttr+0xe0>)
    d474:	7e12      	ldrb	r2, [r2, #24]
    d476:	701a      	strb	r2, [r3, #0]
    d478:	e002      	b.n	d480 <RADIO_GetAttr+0x3c>
    d47a:	4a2a      	ldr	r2, [pc, #168]	; (d524 <RADIO_GetAttr+0xe0>)
    d47c:	6812      	ldr	r2, [r2, #0]
    d47e:	601a      	str	r2, [r3, #0]
    d480:	2000      	movs	r0, #0
    d482:	bd10      	pop	{r4, pc}
    d484:	4a27      	ldr	r2, [pc, #156]	; (d524 <RADIO_GetAttr+0xe0>)
    d486:	6852      	ldr	r2, [r2, #4]
    d488:	e7f9      	b.n	d47e <RADIO_GetAttr+0x3a>
    d48a:	4a26      	ldr	r2, [pc, #152]	; (d524 <RADIO_GetAttr+0xe0>)
    d48c:	8a92      	ldrh	r2, [r2, #20]
    d48e:	801a      	strh	r2, [r3, #0]
    d490:	e7f6      	b.n	d480 <RADIO_GetAttr+0x3c>
    d492:	4a24      	ldr	r2, [pc, #144]	; (d524 <RADIO_GetAttr+0xe0>)
    d494:	3203      	adds	r2, #3
    d496:	7fd2      	ldrb	r2, [r2, #31]
    d498:	e7ed      	b.n	d476 <RADIO_GetAttr+0x32>
    d49a:	4a22      	ldr	r2, [pc, #136]	; (d524 <RADIO_GetAttr+0xe0>)
    d49c:	3204      	adds	r2, #4
    d49e:	e7fa      	b.n	d496 <RADIO_GetAttr+0x52>
    d4a0:	4a20      	ldr	r2, [pc, #128]	; (d524 <RADIO_GetAttr+0xe0>)
    d4a2:	3206      	adds	r2, #6
    d4a4:	e7f7      	b.n	d496 <RADIO_GetAttr+0x52>
    d4a6:	4a1f      	ldr	r2, [pc, #124]	; (d524 <RADIO_GetAttr+0xe0>)
    d4a8:	3236      	adds	r2, #54	; 0x36
    d4aa:	7812      	ldrb	r2, [r2, #0]
    d4ac:	e7e3      	b.n	d476 <RADIO_GetAttr+0x32>
    d4ae:	4a1d      	ldr	r2, [pc, #116]	; (d524 <RADIO_GetAttr+0xe0>)
    d4b0:	3205      	adds	r2, #5
    d4b2:	e7f0      	b.n	d496 <RADIO_GetAttr+0x52>
    d4b4:	4a1b      	ldr	r2, [pc, #108]	; (d524 <RADIO_GetAttr+0xe0>)
    d4b6:	3234      	adds	r2, #52	; 0x34
    d4b8:	e7f7      	b.n	d4aa <RADIO_GetAttr+0x66>
    d4ba:	4a1a      	ldr	r2, [pc, #104]	; (d524 <RADIO_GetAttr+0xe0>)
    d4bc:	8ad2      	ldrh	r2, [r2, #22]
    d4be:	e7e6      	b.n	d48e <RADIO_GetAttr+0x4a>
    d4c0:	4a18      	ldr	r2, [pc, #96]	; (d524 <RADIO_GetAttr+0xe0>)
    d4c2:	3233      	adds	r2, #51	; 0x33
    d4c4:	e7f1      	b.n	d4aa <RADIO_GetAttr+0x66>
    d4c6:	4a17      	ldr	r2, [pc, #92]	; (d524 <RADIO_GetAttr+0xe0>)
    d4c8:	68d2      	ldr	r2, [r2, #12]
    d4ca:	e7d8      	b.n	d47e <RADIO_GetAttr+0x3a>
    d4cc:	4a15      	ldr	r2, [pc, #84]	; (d524 <RADIO_GetAttr+0xe0>)
    d4ce:	6892      	ldr	r2, [r2, #8]
    d4d0:	e7d5      	b.n	d47e <RADIO_GetAttr+0x3a>
    d4d2:	4a14      	ldr	r2, [pc, #80]	; (d524 <RADIO_GetAttr+0xe0>)
    d4d4:	3237      	adds	r2, #55	; 0x37
    d4d6:	e7e8      	b.n	d4aa <RADIO_GetAttr+0x66>
    d4d8:	4a12      	ldr	r2, [pc, #72]	; (d524 <RADIO_GetAttr+0xe0>)
    d4da:	3238      	adds	r2, #56	; 0x38
    d4dc:	e7e5      	b.n	d4aa <RADIO_GetAttr+0x66>
    d4de:	4a11      	ldr	r2, [pc, #68]	; (d524 <RADIO_GetAttr+0xe0>)
    d4e0:	3239      	adds	r2, #57	; 0x39
    d4e2:	e7e2      	b.n	d4aa <RADIO_GetAttr+0x66>
    d4e4:	4a0f      	ldr	r2, [pc, #60]	; (d524 <RADIO_GetAttr+0xe0>)
    d4e6:	4910      	ldr	r1, [pc, #64]	; (d528 <RADIO_GetAttr+0xe4>)
    d4e8:	3202      	adds	r2, #2
    d4ea:	7fd2      	ldrb	r2, [r2, #31]
    d4ec:	0018      	movs	r0, r3
    d4ee:	4b0f      	ldr	r3, [pc, #60]	; (d52c <RADIO_GetAttr+0xe8>)
    d4f0:	4798      	blx	r3
    d4f2:	e7c5      	b.n	d480 <RADIO_GetAttr+0x3c>
    d4f4:	4a0b      	ldr	r2, [pc, #44]	; (d524 <RADIO_GetAttr+0xe0>)
    d4f6:	3202      	adds	r2, #2
    d4f8:	e7cd      	b.n	d496 <RADIO_GetAttr+0x52>
    d4fa:	4a0a      	ldr	r2, [pc, #40]	; (d524 <RADIO_GetAttr+0xe0>)
    d4fc:	3232      	adds	r2, #50	; 0x32
    d4fe:	7812      	ldrb	r2, [r2, #0]
    d500:	b252      	sxtb	r2, r2
    d502:	e7b8      	b.n	d476 <RADIO_GetAttr+0x32>
    d504:	4a07      	ldr	r2, [pc, #28]	; (d524 <RADIO_GetAttr+0xe0>)
    d506:	3235      	adds	r2, #53	; 0x35
    d508:	e7cf      	b.n	d4aa <RADIO_GetAttr+0x66>
    d50a:	4906      	ldr	r1, [pc, #24]	; (d524 <RADIO_GetAttr+0xe0>)
    d50c:	2206      	movs	r2, #6
    d50e:	313c      	adds	r1, #60	; 0x3c
    d510:	e7ec      	b.n	d4ec <RADIO_GetAttr+0xa8>
    d512:	4a04      	ldr	r2, [pc, #16]	; (d524 <RADIO_GetAttr+0xe0>)
    d514:	3254      	adds	r2, #84	; 0x54
    d516:	e7c8      	b.n	d4aa <RADIO_GetAttr+0x66>
    d518:	4a02      	ldr	r2, [pc, #8]	; (d524 <RADIO_GetAttr+0xe0>)
    d51a:	3256      	adds	r2, #86	; 0x56
    d51c:	e7ef      	b.n	d4fe <RADIO_GetAttr+0xba>
    d51e:	2005      	movs	r0, #5
    d520:	e7af      	b.n	d482 <RADIO_GetAttr+0x3e>
    d522:	46c0      	nop			; (mov r8, r8)
    d524:	20002cf4 	.word	0x20002cf4
    d528:	20002d0d 	.word	0x20002d0d
    d52c:	00014ddf 	.word	0x00014ddf

0000d530 <RADIO_SetAttr>:
    d530:	b5f0      	push	{r4, r5, r6, r7, lr}
    d532:	4b77      	ldr	r3, [pc, #476]	; (d710 <RADIO_SetAttr+0x1e0>)
    d534:	b085      	sub	sp, #20
    d536:	0006      	movs	r6, r0
    d538:	000d      	movs	r5, r1
    d53a:	4798      	blx	r3
    d53c:	2404      	movs	r4, #4
    d53e:	2801      	cmp	r0, #1
    d540:	d11a      	bne.n	d578 <RADIO_SetAttr+0x48>
    d542:	2e1d      	cmp	r6, #29
    d544:	d900      	bls.n	d548 <RADIO_SetAttr+0x18>
    d546:	e0e0      	b.n	d70a <RADIO_SetAttr+0x1da>
    d548:	0030      	movs	r0, r6
    d54a:	f004 fb0d 	bl	11b68 <__gnu_thumb1_case_uqi>
    d54e:	514d      	.short	0x514d
    d550:	de6d6965 	.word	0xde6d6965
    d554:	8f8b8179 	.word	0x8f8b8179
    d558:	a7a49b97 	.word	0xa7a49b97
    d55c:	bcb3abde 	.word	0xbcb3abde
    d560:	de72cdc5 	.word	0xde72cdc5
    d564:	dededed5 	.word	0xdededed5
    d568:	18dede0f 	.word	0x18dede0f
    d56c:	2403      	movs	r4, #3
    d56e:	2d00      	cmp	r5, #0
    d570:	d002      	beq.n	d578 <RADIO_SetAttr+0x48>
    d572:	4b68      	ldr	r3, [pc, #416]	; (d714 <RADIO_SetAttr+0x1e4>)
    d574:	611d      	str	r5, [r3, #16]
    d576:	2400      	movs	r4, #0
    d578:	0020      	movs	r0, r4
    d57a:	b005      	add	sp, #20
    d57c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d57e:	796e      	ldrb	r6, [r5, #5]
    d580:	2e00      	cmp	r6, #0
    d582:	d109      	bne.n	d598 <RADIO_SetAttr+0x68>
    d584:	4b63      	ldr	r3, [pc, #396]	; (d714 <RADIO_SetAttr+0x1e4>)
    d586:	001a      	movs	r2, r3
    d588:	649e      	str	r6, [r3, #72]	; 0x48
    d58a:	879e      	strh	r6, [r3, #60]	; 0x3c
    d58c:	87de      	strh	r6, [r3, #62]	; 0x3e
    d58e:	3240      	adds	r2, #64	; 0x40
    d590:	3341      	adds	r3, #65	; 0x41
    d592:	7016      	strb	r6, [r2, #0]
    d594:	701e      	strb	r6, [r3, #0]
    d596:	e7ee      	b.n	d576 <RADIO_SetAttr+0x46>
    d598:	882b      	ldrh	r3, [r5, #0]
    d59a:	2403      	movs	r4, #3
    d59c:	9301      	str	r3, [sp, #4]
    d59e:	2b00      	cmp	r3, #0
    d5a0:	d0ea      	beq.n	d578 <RADIO_SetAttr+0x48>
    d5a2:	792f      	ldrb	r7, [r5, #4]
    d5a4:	2f00      	cmp	r7, #0
    d5a6:	d0e7      	beq.n	d578 <RADIO_SetAttr+0x48>
    d5a8:	20fa      	movs	r0, #250	; 0xfa
    d5aa:	0080      	lsls	r0, r0, #2
    d5ac:	0039      	movs	r1, r7
    d5ae:	4358      	muls	r0, r3
    d5b0:	4b59      	ldr	r3, [pc, #356]	; (d718 <RADIO_SetAttr+0x1e8>)
    d5b2:	4798      	blx	r3
    d5b4:	4b59      	ldr	r3, [pc, #356]	; (d71c <RADIO_SetAttr+0x1ec>)
    d5b6:	4798      	blx	r3
    d5b8:	4959      	ldr	r1, [pc, #356]	; (d720 <RADIO_SetAttr+0x1f0>)
    d5ba:	9002      	str	r0, [sp, #8]
    d5bc:	4b59      	ldr	r3, [pc, #356]	; (d724 <RADIO_SetAttr+0x1f4>)
    d5be:	4798      	blx	r3
    d5c0:	9003      	str	r0, [sp, #12]
    d5c2:	2800      	cmp	r0, #0
    d5c4:	d1d8      	bne.n	d578 <RADIO_SetAttr+0x48>
    d5c6:	2302      	movs	r3, #2
    d5c8:	5eed      	ldrsh	r5, [r5, r3]
    d5ca:	9802      	ldr	r0, [sp, #8]
    d5cc:	4b56      	ldr	r3, [pc, #344]	; (d728 <RADIO_SetAttr+0x1f8>)
    d5ce:	4798      	blx	r3
    d5d0:	466b      	mov	r3, sp
    d5d2:	4c50      	ldr	r4, [pc, #320]	; (d714 <RADIO_SetAttr+0x1e4>)
    d5d4:	889b      	ldrh	r3, [r3, #4]
    d5d6:	64a0      	str	r0, [r4, #72]	; 0x48
    d5d8:	87a3      	strh	r3, [r4, #60]	; 0x3c
    d5da:	0023      	movs	r3, r4
    d5dc:	87e5      	strh	r5, [r4, #62]	; 0x3e
    d5de:	3340      	adds	r3, #64	; 0x40
    d5e0:	3441      	adds	r4, #65	; 0x41
    d5e2:	701f      	strb	r7, [r3, #0]
    d5e4:	7026      	strb	r6, [r4, #0]
    d5e6:	e7c6      	b.n	d576 <RADIO_SetAttr+0x46>
    d5e8:	782a      	ldrb	r2, [r5, #0]
    d5ea:	4b4a      	ldr	r3, [pc, #296]	; (d714 <RADIO_SetAttr+0x1e4>)
    d5ec:	761a      	strb	r2, [r3, #24]
    d5ee:	e7c2      	b.n	d576 <RADIO_SetAttr+0x46>
    d5f0:	4a4e      	ldr	r2, [pc, #312]	; (d72c <RADIO_SetAttr+0x1fc>)
    d5f2:	682b      	ldr	r3, [r5, #0]
    d5f4:	1899      	adds	r1, r3, r2
    d5f6:	4a4e      	ldr	r2, [pc, #312]	; (d730 <RADIO_SetAttr+0x200>)
    d5f8:	4291      	cmp	r1, r2
    d5fa:	d90a      	bls.n	d612 <RADIO_SetAttr+0xe2>
    d5fc:	4a4d      	ldr	r2, [pc, #308]	; (d734 <RADIO_SetAttr+0x204>)
    d5fe:	494e      	ldr	r1, [pc, #312]	; (d738 <RADIO_SetAttr+0x208>)
    d600:	189a      	adds	r2, r3, r2
    d602:	428a      	cmp	r2, r1
    d604:	d905      	bls.n	d612 <RADIO_SetAttr+0xe2>
    d606:	4a4d      	ldr	r2, [pc, #308]	; (d73c <RADIO_SetAttr+0x20c>)
    d608:	494d      	ldr	r1, [pc, #308]	; (d740 <RADIO_SetAttr+0x210>)
    d60a:	189a      	adds	r2, r3, r2
    d60c:	2405      	movs	r4, #5
    d60e:	428a      	cmp	r2, r1
    d610:	d8b2      	bhi.n	d578 <RADIO_SetAttr+0x48>
    d612:	4a40      	ldr	r2, [pc, #256]	; (d714 <RADIO_SetAttr+0x1e4>)
    d614:	6013      	str	r3, [r2, #0]
    d616:	e7ae      	b.n	d576 <RADIO_SetAttr+0x46>
    d618:	682a      	ldr	r2, [r5, #0]
    d61a:	4b3e      	ldr	r3, [pc, #248]	; (d714 <RADIO_SetAttr+0x1e4>)
    d61c:	605a      	str	r2, [r3, #4]
    d61e:	e7aa      	b.n	d576 <RADIO_SetAttr+0x46>
    d620:	882a      	ldrh	r2, [r5, #0]
    d622:	4b3c      	ldr	r3, [pc, #240]	; (d714 <RADIO_SetAttr+0x1e4>)
    d624:	829a      	strh	r2, [r3, #20]
    d626:	e7a6      	b.n	d576 <RADIO_SetAttr+0x46>
    d628:	4b3a      	ldr	r3, [pc, #232]	; (d714 <RADIO_SetAttr+0x1e4>)
    d62a:	782a      	ldrb	r2, [r5, #0]
    d62c:	3303      	adds	r3, #3
    d62e:	77da      	strb	r2, [r3, #31]
    d630:	e7a1      	b.n	d576 <RADIO_SetAttr+0x46>
    d632:	782a      	ldrb	r2, [r5, #0]
    d634:	2405      	movs	r4, #5
    d636:	2a01      	cmp	r2, #1
    d638:	d89e      	bhi.n	d578 <RADIO_SetAttr+0x48>
    d63a:	4b36      	ldr	r3, [pc, #216]	; (d714 <RADIO_SetAttr+0x1e4>)
    d63c:	3304      	adds	r3, #4
    d63e:	e7f6      	b.n	d62e <RADIO_SetAttr+0xfe>
    d640:	782a      	ldrb	r2, [r5, #0]
    d642:	2405      	movs	r4, #5
    d644:	2a01      	cmp	r2, #1
    d646:	d900      	bls.n	d64a <RADIO_SetAttr+0x11a>
    d648:	e796      	b.n	d578 <RADIO_SetAttr+0x48>
    d64a:	4b32      	ldr	r3, [pc, #200]	; (d714 <RADIO_SetAttr+0x1e4>)
    d64c:	3306      	adds	r3, #6
    d64e:	e7ee      	b.n	d62e <RADIO_SetAttr+0xfe>
    d650:	782a      	ldrb	r2, [r5, #0]
    d652:	2405      	movs	r4, #5
    d654:	1fd3      	subs	r3, r2, #7
    d656:	2b02      	cmp	r3, #2
    d658:	d900      	bls.n	d65c <RADIO_SetAttr+0x12c>
    d65a:	e78d      	b.n	d578 <RADIO_SetAttr+0x48>
    d65c:	4b2d      	ldr	r3, [pc, #180]	; (d714 <RADIO_SetAttr+0x1e4>)
    d65e:	3336      	adds	r3, #54	; 0x36
    d660:	701a      	strb	r2, [r3, #0]
    d662:	e788      	b.n	d576 <RADIO_SetAttr+0x46>
    d664:	4b2b      	ldr	r3, [pc, #172]	; (d714 <RADIO_SetAttr+0x1e4>)
    d666:	782a      	ldrb	r2, [r5, #0]
    d668:	3305      	adds	r3, #5
    d66a:	e7e0      	b.n	d62e <RADIO_SetAttr+0xfe>
    d66c:	782a      	ldrb	r2, [r5, #0]
    d66e:	2405      	movs	r4, #5
    d670:	2a01      	cmp	r2, #1
    d672:	d900      	bls.n	d676 <RADIO_SetAttr+0x146>
    d674:	e780      	b.n	d578 <RADIO_SetAttr+0x48>
    d676:	4b27      	ldr	r3, [pc, #156]	; (d714 <RADIO_SetAttr+0x1e4>)
    d678:	3334      	adds	r3, #52	; 0x34
    d67a:	e7f1      	b.n	d660 <RADIO_SetAttr+0x130>
    d67c:	882a      	ldrh	r2, [r5, #0]
    d67e:	4b25      	ldr	r3, [pc, #148]	; (d714 <RADIO_SetAttr+0x1e4>)
    d680:	82da      	strh	r2, [r3, #22]
    d682:	e778      	b.n	d576 <RADIO_SetAttr+0x46>
    d684:	782a      	ldrb	r2, [r5, #0]
    d686:	2405      	movs	r4, #5
    d688:	1e53      	subs	r3, r2, #1
    d68a:	2b03      	cmp	r3, #3
    d68c:	d900      	bls.n	d690 <RADIO_SetAttr+0x160>
    d68e:	e773      	b.n	d578 <RADIO_SetAttr+0x48>
    d690:	4b20      	ldr	r3, [pc, #128]	; (d714 <RADIO_SetAttr+0x1e4>)
    d692:	3333      	adds	r3, #51	; 0x33
    d694:	e7e4      	b.n	d660 <RADIO_SetAttr+0x130>
    d696:	4b1f      	ldr	r3, [pc, #124]	; (d714 <RADIO_SetAttr+0x1e4>)
    d698:	682a      	ldr	r2, [r5, #0]
    d69a:	60da      	str	r2, [r3, #12]
    d69c:	682a      	ldr	r2, [r5, #0]
    d69e:	4b1d      	ldr	r3, [pc, #116]	; (d714 <RADIO_SetAttr+0x1e4>)
    d6a0:	609a      	str	r2, [r3, #8]
    d6a2:	e768      	b.n	d576 <RADIO_SetAttr+0x46>
    d6a4:	782a      	ldrb	r2, [r5, #0]
    d6a6:	2405      	movs	r4, #5
    d6a8:	2a03      	cmp	r2, #3
    d6aa:	d900      	bls.n	d6ae <RADIO_SetAttr+0x17e>
    d6ac:	e764      	b.n	d578 <RADIO_SetAttr+0x48>
    d6ae:	4b19      	ldr	r3, [pc, #100]	; (d714 <RADIO_SetAttr+0x1e4>)
    d6b0:	3337      	adds	r3, #55	; 0x37
    d6b2:	e7d5      	b.n	d660 <RADIO_SetAttr+0x130>
    d6b4:	782a      	ldrb	r2, [r5, #0]
    d6b6:	2405      	movs	r4, #5
    d6b8:	1e53      	subs	r3, r2, #1
    d6ba:	2b16      	cmp	r3, #22
    d6bc:	d900      	bls.n	d6c0 <RADIO_SetAttr+0x190>
    d6be:	e75b      	b.n	d578 <RADIO_SetAttr+0x48>
    d6c0:	4b14      	ldr	r3, [pc, #80]	; (d714 <RADIO_SetAttr+0x1e4>)
    d6c2:	3338      	adds	r3, #56	; 0x38
    d6c4:	e7cc      	b.n	d660 <RADIO_SetAttr+0x130>
    d6c6:	782a      	ldrb	r2, [r5, #0]
    d6c8:	2405      	movs	r4, #5
    d6ca:	1e53      	subs	r3, r2, #1
    d6cc:	2b16      	cmp	r3, #22
    d6ce:	d900      	bls.n	d6d2 <RADIO_SetAttr+0x1a2>
    d6d0:	e752      	b.n	d578 <RADIO_SetAttr+0x48>
    d6d2:	4b10      	ldr	r3, [pc, #64]	; (d714 <RADIO_SetAttr+0x1e4>)
    d6d4:	3339      	adds	r3, #57	; 0x39
    d6d6:	e7c3      	b.n	d660 <RADIO_SetAttr+0x130>
    d6d8:	4b0e      	ldr	r3, [pc, #56]	; (d714 <RADIO_SetAttr+0x1e4>)
    d6da:	0029      	movs	r1, r5
    d6dc:	3302      	adds	r3, #2
    d6de:	7fda      	ldrb	r2, [r3, #31]
    d6e0:	4818      	ldr	r0, [pc, #96]	; (d744 <RADIO_SetAttr+0x214>)
    d6e2:	4b19      	ldr	r3, [pc, #100]	; (d748 <RADIO_SetAttr+0x218>)
    d6e4:	4798      	blx	r3
    d6e6:	e746      	b.n	d576 <RADIO_SetAttr+0x46>
    d6e8:	782b      	ldrb	r3, [r5, #0]
    d6ea:	1c1a      	adds	r2, r3, #0
    d6ec:	2b08      	cmp	r3, #8
    d6ee:	d900      	bls.n	d6f2 <RADIO_SetAttr+0x1c2>
    d6f0:	2208      	movs	r2, #8
    d6f2:	4b08      	ldr	r3, [pc, #32]	; (d714 <RADIO_SetAttr+0x1e4>)
    d6f4:	3302      	adds	r3, #2
    d6f6:	e79a      	b.n	d62e <RADIO_SetAttr+0xfe>
    d6f8:	2405      	movs	r4, #5
    d6fa:	782a      	ldrb	r2, [r5, #0]
    d6fc:	1fd3      	subs	r3, r2, #7
    d6fe:	42a3      	cmp	r3, r4
    d700:	d900      	bls.n	d704 <RADIO_SetAttr+0x1d4>
    d702:	e739      	b.n	d578 <RADIO_SetAttr+0x48>
    d704:	4b03      	ldr	r3, [pc, #12]	; (d714 <RADIO_SetAttr+0x1e4>)
    d706:	3335      	adds	r3, #53	; 0x35
    d708:	e7aa      	b.n	d660 <RADIO_SetAttr+0x130>
    d70a:	2405      	movs	r4, #5
    d70c:	e734      	b.n	d578 <RADIO_SetAttr+0x48>
    d70e:	46c0      	nop			; (mov r8, r8)
    d710:	0000de65 	.word	0x0000de65
    d714:	20002cf4 	.word	0x20002cf4
    d718:	00011c91 	.word	0x00011c91
    d71c:	00012e59 	.word	0x00012e59
    d720:	43fa0000 	.word	0x43fa0000
    d724:	00011e8d 	.word	0x00011e8d
    d728:	00011f71 	.word	0x00011f71
    d72c:	f7d58bc0 	.word	0xf7d58bc0
    d730:	0243d580 	.word	0x0243d580
    d734:	e78fe580 	.word	0xe78fe580
    d738:	06dac2c0 	.word	0x06dac2c0
    d73c:	cc9eec80 	.word	0xcc9eec80
    d740:	096ae380 	.word	0x096ae380
    d744:	20002d0d 	.word	0x20002d0d
    d748:	00014ddf 	.word	0x00014ddf

0000d74c <RADIO_Init>:
    d74c:	b510      	push	{r4, lr}
    d74e:	4b0c      	ldr	r3, [pc, #48]	; (d780 <RADIO_Init+0x34>)
    d750:	4798      	blx	r3
    d752:	4b0c      	ldr	r3, [pc, #48]	; (d784 <RADIO_Init+0x38>)
    d754:	201f      	movs	r0, #31
    d756:	4798      	blx	r3
    d758:	4c0b      	ldr	r4, [pc, #44]	; (d788 <RADIO_Init+0x3c>)
    d75a:	490c      	ldr	r1, [pc, #48]	; (d78c <RADIO_Init+0x40>)
    d75c:	2001      	movs	r0, #1
    d75e:	47a0      	blx	r4
    d760:	490b      	ldr	r1, [pc, #44]	; (d790 <RADIO_Init+0x44>)
    d762:	2002      	movs	r0, #2
    d764:	47a0      	blx	r4
    d766:	490b      	ldr	r1, [pc, #44]	; (d794 <RADIO_Init+0x48>)
    d768:	2004      	movs	r0, #4
    d76a:	47a0      	blx	r4
    d76c:	490a      	ldr	r1, [pc, #40]	; (d798 <RADIO_Init+0x4c>)
    d76e:	2008      	movs	r0, #8
    d770:	47a0      	blx	r4
    d772:	490a      	ldr	r1, [pc, #40]	; (d79c <RADIO_Init+0x50>)
    d774:	2010      	movs	r0, #16
    d776:	47a0      	blx	r4
    d778:	4909      	ldr	r1, [pc, #36]	; (d7a0 <RADIO_Init+0x54>)
    d77a:	2020      	movs	r0, #32
    d77c:	47a0      	blx	r4
    d77e:	bd10      	pop	{r4, pc}
    d780:	0000e561 	.word	0x0000e561
    d784:	0000de71 	.word	0x0000de71
    d788:	0000c165 	.word	0x0000c165
    d78c:	0000dbfd 	.word	0x0000dbfd
    d790:	0000dc75 	.word	0x0000dc75
    d794:	0000dce5 	.word	0x0000dce5
    d798:	0000dd35 	.word	0x0000dd35
    d79c:	0000dd5d 	.word	0x0000dd5d
    d7a0:	0000dd85 	.word	0x0000dd85

0000d7a4 <Radio_WriteFrequency>:
    d7a4:	b570      	push	{r4, r5, r6, lr}
    d7a6:	490d      	ldr	r1, [pc, #52]	; (d7dc <Radio_WriteFrequency+0x38>)
    d7a8:	4d0d      	ldr	r5, [pc, #52]	; (d7e0 <Radio_WriteFrequency+0x3c>)
    d7aa:	0006      	movs	r6, r0
    d7ac:	47a8      	blx	r5
    d7ae:	4b0d      	ldr	r3, [pc, #52]	; (d7e4 <Radio_WriteFrequency+0x40>)
    d7b0:	0004      	movs	r4, r0
    d7b2:	490a      	ldr	r1, [pc, #40]	; (d7dc <Radio_WriteFrequency+0x38>)
    d7b4:	0030      	movs	r0, r6
    d7b6:	4798      	blx	r3
    d7b8:	0208      	lsls	r0, r1, #8
    d7ba:	4908      	ldr	r1, [pc, #32]	; (d7dc <Radio_WriteFrequency+0x38>)
    d7bc:	47a8      	blx	r5
    d7be:	0224      	lsls	r4, r4, #8
    d7c0:	1904      	adds	r4, r0, r4
    d7c2:	0c21      	lsrs	r1, r4, #16
    d7c4:	4d08      	ldr	r5, [pc, #32]	; (d7e8 <Radio_WriteFrequency+0x44>)
    d7c6:	b2c9      	uxtb	r1, r1
    d7c8:	2006      	movs	r0, #6
    d7ca:	47a8      	blx	r5
    d7cc:	0a21      	lsrs	r1, r4, #8
    d7ce:	b2c9      	uxtb	r1, r1
    d7d0:	2007      	movs	r0, #7
    d7d2:	47a8      	blx	r5
    d7d4:	b2e1      	uxtb	r1, r4
    d7d6:	2008      	movs	r0, #8
    d7d8:	47a8      	blx	r5
    d7da:	bd70      	pop	{r4, r5, r6, pc}
    d7dc:	00003d09 	.word	0x00003d09
    d7e0:	00011b7d 	.word	0x00011b7d
    d7e4:	00011c89 	.word	0x00011c89
    d7e8:	0000c091 	.word	0x0000c091

0000d7ec <Radio_WriteConfiguration>:
    d7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    d7ee:	4cb0      	ldr	r4, [pc, #704]	; (dab0 <Radio_WriteConfiguration+0x2c4>)
    d7f0:	2200      	movs	r2, #0
    d7f2:	0023      	movs	r3, r4
    d7f4:	b085      	sub	sp, #20
    d7f6:	9002      	str	r0, [sp, #8]
    d7f8:	3334      	adds	r3, #52	; 0x34
    d7fa:	0010      	movs	r0, r2
    d7fc:	7819      	ldrb	r1, [r3, #0]
    d7fe:	4bad      	ldr	r3, [pc, #692]	; (dab4 <Radio_WriteConfiguration+0x2c8>)
    d800:	4798      	blx	r3
    d802:	4bad      	ldr	r3, [pc, #692]	; (dab8 <Radio_WriteConfiguration+0x2cc>)
    d804:	6820      	ldr	r0, [r4, #0]
    d806:	4798      	blx	r3
    d808:	1ce3      	adds	r3, r4, #3
    d80a:	1d62      	adds	r2, r4, #5
    d80c:	7fdb      	ldrb	r3, [r3, #31]
    d80e:	7fd2      	ldrb	r2, [r2, #31]
    d810:	b25b      	sxtb	r3, r3
    d812:	4eaa      	ldr	r6, [pc, #680]	; (dabc <Radio_WriteConfiguration+0x2d0>)
    d814:	4daa      	ldr	r5, [pc, #680]	; (dac0 <Radio_WriteConfiguration+0x2d4>)
    d816:	2a00      	cmp	r2, #0
    d818:	d000      	beq.n	d81c <Radio_WriteConfiguration+0x30>
    d81a:	e0fc      	b.n	da16 <Radio_WriteConfiguration+0x22a>
    d81c:	1c1f      	adds	r7, r3, #0
    d81e:	2b0f      	cmp	r3, #15
    d820:	dc00      	bgt.n	d824 <Radio_WriteConfiguration+0x38>
    d822:	e0ec      	b.n	d9fe <Radio_WriteConfiguration+0x212>
    d824:	270f      	movs	r7, #15
    d826:	b27b      	sxtb	r3, r7
    d828:	204d      	movs	r0, #77	; 0x4d
    d82a:	9301      	str	r3, [sp, #4]
    d82c:	47b0      	blx	r6
    d82e:	21f8      	movs	r1, #248	; 0xf8
    d830:	4008      	ands	r0, r1
    d832:	39f4      	subs	r1, #244	; 0xf4
    d834:	4301      	orrs	r1, r0
    d836:	204d      	movs	r0, #77	; 0x4d
    d838:	47a8      	blx	r5
    d83a:	b27b      	sxtb	r3, r7
    d83c:	2b00      	cmp	r3, #0
    d83e:	db00      	blt.n	d842 <Radio_WriteConfiguration+0x56>
    d840:	e0e4      	b.n	da0c <Radio_WriteConfiguration+0x220>
    d842:	3703      	adds	r7, #3
    d844:	b2f9      	uxtb	r1, r7
    d846:	2720      	movs	r7, #32
    d848:	4339      	orrs	r1, r7
    d84a:	2009      	movs	r0, #9
    d84c:	47a8      	blx	r5
    d84e:	0023      	movs	r3, r4
    d850:	3334      	adds	r3, #52	; 0x34
    d852:	781f      	ldrb	r7, [r3, #0]
    d854:	2f01      	cmp	r7, #1
    d856:	d000      	beq.n	d85a <Radio_WriteConfiguration+0x6e>
    d858:	e144      	b.n	dae4 <Radio_WriteConfiguration+0x2f8>
    d85a:	7e21      	ldrb	r1, [r4, #24]
    d85c:	2039      	movs	r0, #57	; 0x39
    d85e:	47a8      	blx	r5
    d860:	4b98      	ldr	r3, [pc, #608]	; (dac4 <Radio_WriteConfiguration+0x2d8>)
    d862:	201d      	movs	r0, #29
    d864:	7819      	ldrb	r1, [r3, #0]
    d866:	0023      	movs	r3, r4
    d868:	3333      	adds	r3, #51	; 0x33
    d86a:	781b      	ldrb	r3, [r3, #0]
    d86c:	0109      	lsls	r1, r1, #4
    d86e:	005b      	lsls	r3, r3, #1
    d870:	4319      	orrs	r1, r3
    d872:	1de3      	adds	r3, r4, #7
    d874:	7fdb      	ldrb	r3, [r3, #31]
    d876:	401f      	ands	r7, r3
    d878:	4339      	orrs	r1, r7
    d87a:	b2c9      	uxtb	r1, r1
    d87c:	47a8      	blx	r5
    d87e:	1d23      	adds	r3, r4, #4
    d880:	7fd9      	ldrb	r1, [r3, #31]
    d882:	2304      	movs	r3, #4
    d884:	0089      	lsls	r1, r1, #2
    d886:	4019      	ands	r1, r3
    d888:	0023      	movs	r3, r4
    d88a:	3335      	adds	r3, #53	; 0x35
    d88c:	781b      	ldrb	r3, [r3, #0]
    d88e:	201e      	movs	r0, #30
    d890:	011b      	lsls	r3, r3, #4
    d892:	4319      	orrs	r1, r3
    d894:	9b02      	ldr	r3, [sp, #8]
    d896:	059b      	lsls	r3, r3, #22
    d898:	0f9b      	lsrs	r3, r3, #30
    d89a:	4319      	orrs	r1, r3
    d89c:	b2c9      	uxtb	r1, r1
    d89e:	47a8      	blx	r5
    d8a0:	2300      	movs	r3, #0
    d8a2:	8ae1      	ldrh	r1, [r4, #22]
    d8a4:	4299      	cmp	r1, r3
    d8a6:	d011      	beq.n	d8cc <Radio_WriteConfiguration+0xe0>
    d8a8:	4a86      	ldr	r2, [pc, #536]	; (dac4 <Radio_WriteConfiguration+0x2d8>)
    d8aa:	7812      	ldrb	r2, [r2, #0]
    d8ac:	2a08      	cmp	r2, #8
    d8ae:	d100      	bne.n	d8b2 <Radio_WriteConfiguration+0xc6>
    d8b0:	e0e4      	b.n	da7c <Radio_WriteConfiguration+0x290>
    d8b2:	2a09      	cmp	r2, #9
    d8b4:	d100      	bne.n	d8b8 <Radio_WriteConfiguration+0xcc>
    d8b6:	e0e3      	b.n	da80 <Radio_WriteConfiguration+0x294>
    d8b8:	2a07      	cmp	r2, #7
    d8ba:	d000      	beq.n	d8be <Radio_WriteConfiguration+0xd2>
    d8bc:	e0e3      	b.n	da86 <Radio_WriteConfiguration+0x29a>
    d8be:	337d      	adds	r3, #125	; 0x7d
    d8c0:	4359      	muls	r1, r3
    d8c2:	0023      	movs	r3, r4
    d8c4:	3335      	adds	r3, #53	; 0x35
    d8c6:	781b      	ldrb	r3, [r3, #0]
    d8c8:	40d9      	lsrs	r1, r3
    d8ca:	000b      	movs	r3, r1
    d8cc:	b2d9      	uxtb	r1, r3
    d8ce:	2024      	movs	r0, #36	; 0x24
    d8d0:	4d7b      	ldr	r5, [pc, #492]	; (dac0 <Radio_WriteConfiguration+0x2d4>)
    d8d2:	47a8      	blx	r5
    d8d4:	466b      	mov	r3, sp
    d8d6:	201f      	movs	r0, #31
    d8d8:	7a19      	ldrb	r1, [r3, #8]
    d8da:	47a8      	blx	r5
    d8dc:	2026      	movs	r0, #38	; 0x26
    d8de:	47b0      	blx	r6
    d8e0:	0023      	movs	r3, r4
    d8e2:	3335      	adds	r3, #53	; 0x35
    d8e4:	781b      	ldrb	r3, [r3, #0]
    d8e6:	2b0c      	cmp	r3, #12
    d8e8:	d105      	bne.n	d8f6 <Radio_WriteConfiguration+0x10a>
    d8ea:	0023      	movs	r3, r4
    d8ec:	3336      	adds	r3, #54	; 0x36
    d8ee:	781b      	ldrb	r3, [r3, #0]
    d8f0:	3b07      	subs	r3, #7
    d8f2:	2b01      	cmp	r3, #1
    d8f4:	d906      	bls.n	d904 <Radio_WriteConfiguration+0x118>
    d8f6:	6b62      	ldr	r2, [r4, #52]	; 0x34
    d8f8:	4b73      	ldr	r3, [pc, #460]	; (dac8 <Radio_WriteConfiguration+0x2dc>)
    d8fa:	4013      	ands	r3, r2
    d8fc:	4a73      	ldr	r2, [pc, #460]	; (dacc <Radio_WriteConfiguration+0x2e0>)
    d8fe:	4293      	cmp	r3, r2
    d900:	d000      	beq.n	d904 <Radio_WriteConfiguration+0x118>
    d902:	e0c2      	b.n	da8a <Radio_WriteConfiguration+0x29e>
    d904:	2108      	movs	r1, #8
    d906:	4308      	orrs	r0, r1
    d908:	b2c0      	uxtb	r0, r0
    d90a:	2104      	movs	r1, #4
    d90c:	4301      	orrs	r1, r0
    d90e:	2026      	movs	r0, #38	; 0x26
    d910:	47a8      	blx	r5
    d912:	2031      	movs	r0, #49	; 0x31
    d914:	47b0      	blx	r6
    d916:	21f8      	movs	r1, #248	; 0xf8
    d918:	4008      	ands	r0, r1
    d91a:	39f5      	subs	r1, #245	; 0xf5
    d91c:	4301      	orrs	r1, r0
    d91e:	2031      	movs	r0, #49	; 0x31
    d920:	47a8      	blx	r5
    d922:	210a      	movs	r1, #10
    d924:	2037      	movs	r0, #55	; 0x37
    d926:	47a8      	blx	r5
    d928:	0023      	movs	r3, r4
    d92a:	3331      	adds	r3, #49	; 0x31
    d92c:	781b      	ldrb	r3, [r3, #0]
    d92e:	2b12      	cmp	r3, #18
    d930:	d11e      	bne.n	d970 <Radio_WriteConfiguration+0x184>
    d932:	0023      	movs	r3, r4
    d934:	3336      	adds	r3, #54	; 0x36
    d936:	781b      	ldrb	r3, [r3, #0]
    d938:	3b07      	subs	r3, #7
    d93a:	2b01      	cmp	r3, #1
    d93c:	d80b      	bhi.n	d956 <Radio_WriteConfiguration+0x16a>
    d93e:	2031      	movs	r0, #49	; 0x31
    d940:	47b0      	blx	r6
    d942:	217f      	movs	r1, #127	; 0x7f
    d944:	4001      	ands	r1, r0
    d946:	2031      	movs	r0, #49	; 0x31
    d948:	47a8      	blx	r5
    d94a:	2140      	movs	r1, #64	; 0x40
    d94c:	202f      	movs	r0, #47	; 0x2f
    d94e:	47a8      	blx	r5
    d950:	2100      	movs	r1, #0
    d952:	2030      	movs	r0, #48	; 0x30
    d954:	47a8      	blx	r5
    d956:	0023      	movs	r3, r4
    d958:	3336      	adds	r3, #54	; 0x36
    d95a:	781b      	ldrb	r3, [r3, #0]
    d95c:	2b09      	cmp	r3, #9
    d95e:	d107      	bne.n	d970 <Radio_WriteConfiguration+0x184>
    d960:	2031      	movs	r0, #49	; 0x31
    d962:	47b0      	blx	r6
    d964:	2180      	movs	r1, #128	; 0x80
    d966:	4249      	negs	r1, r1
    d968:	4301      	orrs	r1, r0
    d96a:	b2c9      	uxtb	r1, r1
    d96c:	2031      	movs	r0, #49	; 0x31
    d96e:	47a8      	blx	r5
    d970:	2033      	movs	r0, #51	; 0x33
    d972:	47b0      	blx	r6
    d974:	1da3      	adds	r3, r4, #6
    d976:	7fd9      	ldrb	r1, [r3, #31]
    d978:	2340      	movs	r3, #64	; 0x40
    d97a:	0189      	lsls	r1, r1, #6
    d97c:	4398      	bics	r0, r3
    d97e:	4019      	ands	r1, r3
    d980:	4301      	orrs	r1, r0
    d982:	b2c9      	uxtb	r1, r1
    d984:	2033      	movs	r0, #51	; 0x33
    d986:	47a8      	blx	r5
    d988:	8aa1      	ldrh	r1, [r4, #20]
    d98a:	2020      	movs	r0, #32
    d98c:	0a09      	lsrs	r1, r1, #8
    d98e:	47a8      	blx	r5
    d990:	7d21      	ldrb	r1, [r4, #20]
    d992:	2021      	movs	r0, #33	; 0x21
    d994:	47a8      	blx	r5
    d996:	2100      	movs	r1, #0
    d998:	200d      	movs	r0, #13
    d99a:	47a8      	blx	r5
    d99c:	2100      	movs	r1, #0
    d99e:	200e      	movs	r0, #14
    d9a0:	47a8      	blx	r5
    d9a2:	2100      	movs	r1, #0
    d9a4:	200f      	movs	r0, #15
    d9a6:	47a8      	blx	r5
    d9a8:	0023      	movs	r3, r4
    d9aa:	3331      	adds	r3, #49	; 0x31
    d9ac:	781b      	ldrb	r3, [r3, #0]
    d9ae:	2b12      	cmp	r3, #18
    d9b0:	d120      	bne.n	d9f4 <Radio_WriteConfiguration+0x208>
    d9b2:	0023      	movs	r3, r4
    d9b4:	3336      	adds	r3, #54	; 0x36
    d9b6:	781b      	ldrb	r3, [r3, #0]
    d9b8:	2b09      	cmp	r3, #9
    d9ba:	d000      	beq.n	d9be <Radio_WriteConfiguration+0x1d2>
    d9bc:	e072      	b.n	daa4 <Radio_WriteConfiguration+0x2b8>
    d9be:	4a44      	ldr	r2, [pc, #272]	; (dad0 <Radio_WriteConfiguration+0x2e4>)
    d9c0:	6823      	ldr	r3, [r4, #0]
    d9c2:	1899      	adds	r1, r3, r2
    d9c4:	4a43      	ldr	r2, [pc, #268]	; (dad4 <Radio_WriteConfiguration+0x2e8>)
    d9c6:	4291      	cmp	r1, r2
    d9c8:	d862      	bhi.n	da90 <Radio_WriteConfiguration+0x2a4>
    d9ca:	2102      	movs	r1, #2
    d9cc:	2036      	movs	r0, #54	; 0x36
    d9ce:	47a8      	blx	r5
    d9d0:	2164      	movs	r1, #100	; 0x64
    d9d2:	203a      	movs	r0, #58	; 0x3a
    d9d4:	47a8      	blx	r5
    d9d6:	0023      	movs	r3, r4
    d9d8:	3336      	adds	r3, #54	; 0x36
    d9da:	781b      	ldrb	r3, [r3, #0]
    d9dc:	2165      	movs	r1, #101	; 0x65
    d9de:	203a      	movs	r0, #58	; 0x3a
    d9e0:	2b09      	cmp	r3, #9
    d9e2:	d162      	bne.n	daaa <Radio_WriteConfiguration+0x2be>
    d9e4:	3406      	adds	r4, #6
    d9e6:	7fe3      	ldrb	r3, [r4, #31]
    d9e8:	2b01      	cmp	r3, #1
    d9ea:	d15e      	bne.n	daaa <Radio_WriteConfiguration+0x2be>
    d9ec:	47a8      	blx	r5
    d9ee:	2119      	movs	r1, #25
    d9f0:	203b      	movs	r0, #59	; 0x3b
    d9f2:	47a8      	blx	r5
    d9f4:	21ff      	movs	r1, #255	; 0xff
    d9f6:	2012      	movs	r0, #18
    d9f8:	47a8      	blx	r5
    d9fa:	b005      	add	sp, #20
    d9fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d9fe:	b25b      	sxtb	r3, r3
    da00:	3303      	adds	r3, #3
    da02:	db00      	blt.n	da06 <Radio_WriteConfiguration+0x21a>
    da04:	e70f      	b.n	d826 <Radio_WriteConfiguration+0x3a>
    da06:	4b34      	ldr	r3, [pc, #208]	; (dad8 <Radio_WriteConfiguration+0x2ec>)
    da08:	781f      	ldrb	r7, [r3, #0]
    da0a:	e70c      	b.n	d826 <Radio_WriteConfiguration+0x3a>
    da0c:	2170      	movs	r1, #112	; 0x70
    da0e:	9b01      	ldr	r3, [sp, #4]
    da10:	4319      	orrs	r1, r3
    da12:	b2c9      	uxtb	r1, r1
    da14:	e719      	b.n	d84a <Radio_WriteConfiguration+0x5e>
    da16:	2b01      	cmp	r3, #1
    da18:	dd07      	ble.n	da2a <Radio_WriteConfiguration+0x23e>
    da1a:	2714      	movs	r7, #20
    da1c:	2b13      	cmp	r3, #19
    da1e:	dc06      	bgt.n	da2e <Radio_WriteConfiguration+0x242>
    da20:	1c1f      	adds	r7, r3, #0
    da22:	2b11      	cmp	r3, #17
    da24:	dd02      	ble.n	da2c <Radio_WriteConfiguration+0x240>
    da26:	2711      	movs	r7, #17
    da28:	e000      	b.n	da2c <Radio_WriteConfiguration+0x240>
    da2a:	2702      	movs	r7, #2
    da2c:	b27f      	sxtb	r7, r7
    da2e:	200b      	movs	r0, #11
    da30:	47b0      	blx	r6
    da32:	9003      	str	r0, [sp, #12]
    da34:	204d      	movs	r0, #77	; 0x4d
    da36:	47b0      	blx	r6
    da38:	2307      	movs	r3, #7
    da3a:	4398      	bics	r0, r3
    da3c:	b2c1      	uxtb	r1, r0
    da3e:	2f14      	cmp	r7, #20
    da40:	d112      	bne.n	da68 <Radio_WriteConfiguration+0x27c>
    da42:	4319      	orrs	r1, r3
    da44:	9b03      	ldr	r3, [sp, #12]
    da46:	37cb      	adds	r7, #203	; 0xcb
    da48:	403b      	ands	r3, r7
    da4a:	001f      	movs	r7, r3
    da4c:	230f      	movs	r3, #15
    da4e:	9301      	str	r3, [sp, #4]
    da50:	204d      	movs	r0, #77	; 0x4d
    da52:	47a8      	blx	r5
    da54:	2180      	movs	r1, #128	; 0x80
    da56:	9b01      	ldr	r3, [sp, #4]
    da58:	4249      	negs	r1, r1
    da5a:	4319      	orrs	r1, r3
    da5c:	b2c9      	uxtb	r1, r1
    da5e:	2009      	movs	r0, #9
    da60:	47a8      	blx	r5
    da62:	0039      	movs	r1, r7
    da64:	200b      	movs	r0, #11
    da66:	e6f1      	b.n	d84c <Radio_WriteConfiguration+0x60>
    da68:	3f02      	subs	r7, #2
    da6a:	b27b      	sxtb	r3, r7
    da6c:	2720      	movs	r7, #32
    da6e:	2004      	movs	r0, #4
    da70:	9301      	str	r3, [sp, #4]
    da72:	9b03      	ldr	r3, [sp, #12]
    da74:	4301      	orrs	r1, r0
    da76:	431f      	orrs	r7, r3
    da78:	b2ff      	uxtb	r7, r7
    da7a:	e7e9      	b.n	da50 <Radio_WriteConfiguration+0x264>
    da7c:	23fa      	movs	r3, #250	; 0xfa
    da7e:	e71f      	b.n	d8c0 <Radio_WriteConfiguration+0xd4>
    da80:	23fa      	movs	r3, #250	; 0xfa
    da82:	005b      	lsls	r3, r3, #1
    da84:	e71c      	b.n	d8c0 <Radio_WriteConfiguration+0xd4>
    da86:	0019      	movs	r1, r3
    da88:	e71b      	b.n	d8c2 <Radio_WriteConfiguration+0xd6>
    da8a:	21f7      	movs	r1, #247	; 0xf7
    da8c:	4008      	ands	r0, r1
    da8e:	e73c      	b.n	d90a <Radio_WriteConfiguration+0x11e>
    da90:	4a12      	ldr	r2, [pc, #72]	; (dadc <Radio_WriteConfiguration+0x2f0>)
    da92:	189b      	adds	r3, r3, r2
    da94:	4a12      	ldr	r2, [pc, #72]	; (dae0 <Radio_WriteConfiguration+0x2f4>)
    da96:	4293      	cmp	r3, r2
    da98:	d804      	bhi.n	daa4 <Radio_WriteConfiguration+0x2b8>
    da9a:	2102      	movs	r1, #2
    da9c:	2036      	movs	r0, #54	; 0x36
    da9e:	47a8      	blx	r5
    daa0:	217f      	movs	r1, #127	; 0x7f
    daa2:	e796      	b.n	d9d2 <Radio_WriteConfiguration+0x1e6>
    daa4:	2103      	movs	r1, #3
    daa6:	2036      	movs	r0, #54	; 0x36
    daa8:	e794      	b.n	d9d4 <Radio_WriteConfiguration+0x1e8>
    daaa:	47a8      	blx	r5
    daac:	211d      	movs	r1, #29
    daae:	e79f      	b.n	d9f0 <Radio_WriteConfiguration+0x204>
    dab0:	20002cf4 	.word	0x20002cf4
    dab4:	0000cd4d 	.word	0x0000cd4d
    dab8:	0000d7a5 	.word	0x0000d7a5
    dabc:	0000c0b9 	.word	0x0000c0b9
    dac0:	0000c091 	.word	0x0000c091
    dac4:	20002d2a 	.word	0x20002d2a
    dac8:	00ffff00 	.word	0x00ffff00
    dacc:	00070b00 	.word	0x00070b00
    dad0:	cc9eec80 	.word	0xcc9eec80
    dad4:	096ae380 	.word	0x096ae380
    dad8:	00017374 	.word	0x00017374
    dadc:	e78fe580 	.word	0xe78fe580
    dae0:	06dac2c0 	.word	0x06dac2c0
    dae4:	6863      	ldr	r3, [r4, #4]
    dae6:	492c      	ldr	r1, [pc, #176]	; (db98 <Radio_WriteConfiguration+0x3ac>)
    dae8:	0218      	lsls	r0, r3, #8
    daea:	4b2c      	ldr	r3, [pc, #176]	; (db9c <Radio_WriteConfiguration+0x3b0>)
    daec:	4798      	blx	r3
    daee:	0007      	movs	r7, r0
    daf0:	0a01      	lsrs	r1, r0, #8
    daf2:	b2c9      	uxtb	r1, r1
    daf4:	2004      	movs	r0, #4
    daf6:	47a8      	blx	r5
    daf8:	b2f9      	uxtb	r1, r7
    dafa:	2005      	movs	r0, #5
    dafc:	47a8      	blx	r5
    dafe:	4b27      	ldr	r3, [pc, #156]	; (db9c <Radio_WriteConfiguration+0x3b0>)
    db00:	68a1      	ldr	r1, [r4, #8]
    db02:	4827      	ldr	r0, [pc, #156]	; (dba0 <Radio_WriteConfiguration+0x3b4>)
    db04:	4798      	blx	r3
    db06:	0007      	movs	r7, r0
    db08:	0a01      	lsrs	r1, r0, #8
    db0a:	b2c9      	uxtb	r1, r1
    db0c:	2002      	movs	r0, #2
    db0e:	47a8      	blx	r5
    db10:	b2f9      	uxtb	r1, r7
    db12:	2003      	movs	r0, #3
    db14:	47a8      	blx	r5
    db16:	2100      	movs	r1, #0
    db18:	205d      	movs	r0, #93	; 0x5d
    db1a:	47a8      	blx	r5
    db1c:	8aa1      	ldrh	r1, [r4, #20]
    db1e:	2025      	movs	r0, #37	; 0x25
    db20:	0a09      	lsrs	r1, r1, #8
    db22:	47a8      	blx	r5
    db24:	7d21      	ldrb	r1, [r4, #20]
    db26:	2026      	movs	r0, #38	; 0x26
    db28:	47a8      	blx	r5
    db2a:	219e      	movs	r1, #158	; 0x9e
    db2c:	200d      	movs	r0, #13
    db2e:	47a8      	blx	r5
    db30:	21bf      	movs	r1, #191	; 0xbf
    db32:	2035      	movs	r0, #53	; 0x35
    db34:	47a8      	blx	r5
    db36:	200a      	movs	r0, #10
    db38:	47b0      	blx	r6
    db3a:	0023      	movs	r3, r4
    db3c:	3337      	adds	r3, #55	; 0x37
    db3e:	7819      	ldrb	r1, [r3, #0]
    db40:	2360      	movs	r3, #96	; 0x60
    db42:	0149      	lsls	r1, r1, #5
    db44:	4398      	bics	r0, r3
    db46:	4301      	orrs	r1, r0
    db48:	b2c9      	uxtb	r1, r1
    db4a:	200a      	movs	r0, #10
    db4c:	47a8      	blx	r5
    db4e:	1d23      	adds	r3, r4, #4
    db50:	7fdb      	ldrb	r3, [r3, #31]
    db52:	21c0      	movs	r1, #192	; 0xc0
    db54:	2b00      	cmp	r3, #0
    db56:	d000      	beq.n	db5a <Radio_WriteConfiguration+0x36e>
    db58:	3110      	adds	r1, #16
    db5a:	2030      	movs	r0, #48	; 0x30
    db5c:	47a8      	blx	r5
    db5e:	2600      	movs	r6, #0
    db60:	1ca3      	adds	r3, r4, #2
    db62:	7fd9      	ldrb	r1, [r3, #31]
    db64:	428e      	cmp	r6, r1
    db66:	d30d      	bcc.n	db84 <Radio_WriteConfiguration+0x398>
    db68:	2900      	cmp	r1, #0
    db6a:	d003      	beq.n	db74 <Radio_WriteConfiguration+0x388>
    db6c:	2310      	movs	r3, #16
    db6e:	3901      	subs	r1, #1
    db70:	4319      	orrs	r1, r3
    db72:	b2c9      	uxtb	r1, r1
    db74:	2027      	movs	r0, #39	; 0x27
    db76:	47a8      	blx	r5
    db78:	21ff      	movs	r1, #255	; 0xff
    db7a:	203e      	movs	r0, #62	; 0x3e
    db7c:	47a8      	blx	r5
    db7e:	21ff      	movs	r1, #255	; 0xff
    db80:	203f      	movs	r0, #63	; 0x3f
    db82:	e739      	b.n	d9f8 <Radio_WriteConfiguration+0x20c>
    db84:	0030      	movs	r0, r6
    db86:	19a3      	adds	r3, r4, r6
    db88:	3028      	adds	r0, #40	; 0x28
    db8a:	7e59      	ldrb	r1, [r3, #25]
    db8c:	b2c0      	uxtb	r0, r0
    db8e:	3601      	adds	r6, #1
    db90:	47a8      	blx	r5
    db92:	b2f6      	uxtb	r6, r6
    db94:	e7e4      	b.n	db60 <Radio_WriteConfiguration+0x374>
    db96:	46c0      	nop			; (mov r8, r8)
    db98:	00003d09 	.word	0x00003d09
    db9c:	00011b7d 	.word	0x00011b7d
    dba0:	01e84800 	.word	0x01e84800

0000dba4 <RADIO_getMappingAndOpmode>:
    dba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    dba6:	0006      	movs	r6, r0
    dba8:	4d06      	ldr	r5, [pc, #24]	; (dbc4 <RADIO_getMappingAndOpmode+0x20>)
    dbaa:	2040      	movs	r0, #64	; 0x40
    dbac:	001f      	movs	r7, r3
    dbae:	0014      	movs	r4, r2
    dbb0:	9101      	str	r1, [sp, #4]
    dbb2:	47a8      	blx	r5
    dbb4:	4004      	ands	r4, r0
    dbb6:	413c      	asrs	r4, r7
    dbb8:	2001      	movs	r0, #1
    dbba:	7034      	strb	r4, [r6, #0]
    dbbc:	47a8      	blx	r5
    dbbe:	9b01      	ldr	r3, [sp, #4]
    dbc0:	7018      	strb	r0, [r3, #0]
    dbc2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    dbc4:	0000c0b9 	.word	0x0000c0b9

0000dbc8 <RADIO_UnhandledInterrupt.part.0>:
    dbc8:	b510      	push	{r4, lr}
    dbca:	21ff      	movs	r1, #255	; 0xff
    dbcc:	2012      	movs	r0, #18
    dbce:	4b01      	ldr	r3, [pc, #4]	; (dbd4 <RADIO_UnhandledInterrupt.part.0+0xc>)
    dbd0:	4798      	blx	r3
    dbd2:	bd10      	pop	{r4, pc}
    dbd4:	0000c091 	.word	0x0000c091

0000dbd8 <RADIO_UnhandledInterrupt>:
    dbd8:	b510      	push	{r4, lr}
    dbda:	2801      	cmp	r0, #1
    dbdc:	d102      	bne.n	dbe4 <RADIO_UnhandledInterrupt+0xc>
    dbde:	4b05      	ldr	r3, [pc, #20]	; (dbf4 <RADIO_UnhandledInterrupt+0x1c>)
    dbe0:	4798      	blx	r3
    dbe2:	bd10      	pop	{r4, pc}
    dbe4:	21ff      	movs	r1, #255	; 0xff
    dbe6:	203e      	movs	r0, #62	; 0x3e
    dbe8:	4c03      	ldr	r4, [pc, #12]	; (dbf8 <RADIO_UnhandledInterrupt+0x20>)
    dbea:	47a0      	blx	r4
    dbec:	21ff      	movs	r1, #255	; 0xff
    dbee:	203f      	movs	r0, #63	; 0x3f
    dbf0:	47a0      	blx	r4
    dbf2:	e7f6      	b.n	dbe2 <RADIO_UnhandledInterrupt+0xa>
    dbf4:	0000dbc9 	.word	0x0000dbc9
    dbf8:	0000c091 	.word	0x0000c091

0000dbfc <RADIO_DIO0>:
    dbfc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    dbfe:	466b      	mov	r3, sp
    dc00:	1ddc      	adds	r4, r3, #7
    dc02:	1d9d      	adds	r5, r3, #6
    dc04:	22c0      	movs	r2, #192	; 0xc0
    dc06:	2306      	movs	r3, #6
    dc08:	0028      	movs	r0, r5
    dc0a:	0021      	movs	r1, r4
    dc0c:	4e12      	ldr	r6, [pc, #72]	; (dc58 <RADIO_DIO0+0x5c>)
    dc0e:	47b0      	blx	r6
    dc10:	7823      	ldrb	r3, [r4, #0]
    dc12:	7828      	ldrb	r0, [r5, #0]
    dc14:	b25a      	sxtb	r2, r3
    dc16:	b2c0      	uxtb	r0, r0
    dc18:	2a00      	cmp	r2, #0
    dc1a:	da0b      	bge.n	dc34 <RADIO_DIO0+0x38>
    dc1c:	2800      	cmp	r0, #0
    dc1e:	d004      	beq.n	dc2a <RADIO_DIO0+0x2e>
    dc20:	2801      	cmp	r0, #1
    dc22:	d005      	beq.n	dc30 <RADIO_DIO0+0x34>
    dc24:	4b0d      	ldr	r3, [pc, #52]	; (dc5c <RADIO_DIO0+0x60>)
    dc26:	4798      	blx	r3
    dc28:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    dc2a:	4b0d      	ldr	r3, [pc, #52]	; (dc60 <RADIO_DIO0+0x64>)
    dc2c:	4798      	blx	r3
    dc2e:	e7fb      	b.n	dc28 <RADIO_DIO0+0x2c>
    dc30:	4b0c      	ldr	r3, [pc, #48]	; (dc64 <RADIO_DIO0+0x68>)
    dc32:	e7fb      	b.n	dc2c <RADIO_DIO0+0x30>
    dc34:	2800      	cmp	r0, #0
    dc36:	d10a      	bne.n	dc4e <RADIO_DIO0+0x52>
    dc38:	2207      	movs	r2, #7
    dc3a:	4013      	ands	r3, r2
    dc3c:	7023      	strb	r3, [r4, #0]
    dc3e:	2b03      	cmp	r3, #3
    dc40:	d101      	bne.n	dc46 <RADIO_DIO0+0x4a>
    dc42:	4b09      	ldr	r3, [pc, #36]	; (dc68 <RADIO_DIO0+0x6c>)
    dc44:	e7f2      	b.n	dc2c <RADIO_DIO0+0x30>
    dc46:	2b05      	cmp	r3, #5
    dc48:	d102      	bne.n	dc50 <RADIO_DIO0+0x54>
    dc4a:	4b08      	ldr	r3, [pc, #32]	; (dc6c <RADIO_DIO0+0x70>)
    dc4c:	e7ee      	b.n	dc2c <RADIO_DIO0+0x30>
    dc4e:	2000      	movs	r0, #0
    dc50:	4b07      	ldr	r3, [pc, #28]	; (dc70 <RADIO_DIO0+0x74>)
    dc52:	4798      	blx	r3
    dc54:	e7e8      	b.n	dc28 <RADIO_DIO0+0x2c>
    dc56:	46c0      	nop			; (mov r8, r8)
    dc58:	0000dba5 	.word	0x0000dba5
    dc5c:	0000dbc9 	.word	0x0000dbc9
    dc60:	0000e381 	.word	0x0000e381
    dc64:	0000e285 	.word	0x0000e285
    dc68:	0000e301 	.word	0x0000e301
    dc6c:	0000e3fd 	.word	0x0000e3fd
    dc70:	0000dbd9 	.word	0x0000dbd9

0000dc74 <RADIO_DIO1>:
    dc74:	b573      	push	{r0, r1, r4, r5, r6, lr}
    dc76:	466b      	mov	r3, sp
    dc78:	1ddc      	adds	r4, r3, #7
    dc7a:	1d9d      	adds	r5, r3, #6
    dc7c:	2230      	movs	r2, #48	; 0x30
    dc7e:	2304      	movs	r3, #4
    dc80:	0021      	movs	r1, r4
    dc82:	0028      	movs	r0, r5
    dc84:	4e11      	ldr	r6, [pc, #68]	; (dccc <RADIO_DIO1+0x58>)
    dc86:	47b0      	blx	r6
    dc88:	7822      	ldrb	r2, [r4, #0]
    dc8a:	782b      	ldrb	r3, [r5, #0]
    dc8c:	b251      	sxtb	r1, r2
    dc8e:	2900      	cmp	r1, #0
    dc90:	da0c      	bge.n	dcac <RADIO_DIO1+0x38>
    dc92:	b2db      	uxtb	r3, r3
    dc94:	2b00      	cmp	r3, #0
    dc96:	d004      	beq.n	dca2 <RADIO_DIO1+0x2e>
    dc98:	2b01      	cmp	r3, #1
    dc9a:	d005      	beq.n	dca8 <RADIO_DIO1+0x34>
    dc9c:	4b0c      	ldr	r3, [pc, #48]	; (dcd0 <RADIO_DIO1+0x5c>)
    dc9e:	4798      	blx	r3
    dca0:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    dca2:	4b0c      	ldr	r3, [pc, #48]	; (dcd4 <RADIO_DIO1+0x60>)
    dca4:	4798      	blx	r3
    dca6:	e7fb      	b.n	dca0 <RADIO_DIO1+0x2c>
    dca8:	4b0b      	ldr	r3, [pc, #44]	; (dcd8 <RADIO_DIO1+0x64>)
    dcaa:	e7fb      	b.n	dca4 <RADIO_DIO1+0x30>
    dcac:	2107      	movs	r1, #7
    dcae:	b2db      	uxtb	r3, r3
    dcb0:	400a      	ands	r2, r1
    dcb2:	7022      	strb	r2, [r4, #0]
    dcb4:	2b00      	cmp	r3, #0
    dcb6:	d005      	beq.n	dcc4 <RADIO_DIO1+0x50>
    dcb8:	2b01      	cmp	r3, #1
    dcba:	d1f1      	bne.n	dca0 <RADIO_DIO1+0x2c>
    dcbc:	2a03      	cmp	r2, #3
    dcbe:	d1ef      	bne.n	dca0 <RADIO_DIO1+0x2c>
    dcc0:	4b06      	ldr	r3, [pc, #24]	; (dcdc <RADIO_DIO1+0x68>)
    dcc2:	e7ef      	b.n	dca4 <RADIO_DIO1+0x30>
    dcc4:	4b06      	ldr	r3, [pc, #24]	; (dce0 <RADIO_DIO1+0x6c>)
    dcc6:	2a05      	cmp	r2, #5
    dcc8:	d1ea      	bne.n	dca0 <RADIO_DIO1+0x2c>
    dcca:	e7eb      	b.n	dca4 <RADIO_DIO1+0x30>
    dccc:	0000dba5 	.word	0x0000dba5
    dcd0:	0000dbc9 	.word	0x0000dbc9
    dcd4:	0000e209 	.word	0x0000e209
    dcd8:	0000ce31 	.word	0x0000ce31
    dcdc:	0000e031 	.word	0x0000e031
    dce0:	0000df95 	.word	0x0000df95

0000dce4 <RADIO_DIO2>:
    dce4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    dce6:	466b      	mov	r3, sp
    dce8:	1ddc      	adds	r4, r3, #7
    dcea:	1d9d      	adds	r5, r3, #6
    dcec:	220c      	movs	r2, #12
    dcee:	2302      	movs	r3, #2
    dcf0:	0021      	movs	r1, r4
    dcf2:	0028      	movs	r0, r5
    dcf4:	4e0b      	ldr	r6, [pc, #44]	; (dd24 <RADIO_DIO2+0x40>)
    dcf6:	47b0      	blx	r6
    dcf8:	7823      	ldrb	r3, [r4, #0]
    dcfa:	782a      	ldrb	r2, [r5, #0]
    dcfc:	b259      	sxtb	r1, r3
    dcfe:	2900      	cmp	r1, #0
    dd00:	da05      	bge.n	dd0e <RADIO_DIO2+0x2a>
    dd02:	4b09      	ldr	r3, [pc, #36]	; (dd28 <RADIO_DIO2+0x44>)
    dd04:	2a02      	cmp	r2, #2
    dd06:	d90a      	bls.n	dd1e <RADIO_DIO2+0x3a>
    dd08:	4b08      	ldr	r3, [pc, #32]	; (dd2c <RADIO_DIO2+0x48>)
    dd0a:	4798      	blx	r3
    dd0c:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    dd0e:	2107      	movs	r1, #7
    dd10:	400b      	ands	r3, r1
    dd12:	7023      	strb	r3, [r4, #0]
    dd14:	2a03      	cmp	r2, #3
    dd16:	d1f9      	bne.n	dd0c <RADIO_DIO2+0x28>
    dd18:	2b05      	cmp	r3, #5
    dd1a:	d1f7      	bne.n	dd0c <RADIO_DIO2+0x28>
    dd1c:	4b04      	ldr	r3, [pc, #16]	; (dd30 <RADIO_DIO2+0x4c>)
    dd1e:	4798      	blx	r3
    dd20:	e7f4      	b.n	dd0c <RADIO_DIO2+0x28>
    dd22:	46c0      	nop			; (mov r8, r8)
    dd24:	0000dba5 	.word	0x0000dba5
    dd28:	0000ce31 	.word	0x0000ce31
    dd2c:	0000dbc9 	.word	0x0000dbc9
    dd30:	0000df65 	.word	0x0000df65

0000dd34 <RADIO_DIO3>:
    dd34:	b537      	push	{r0, r1, r2, r4, r5, lr}
    dd36:	466b      	mov	r3, sp
    dd38:	4668      	mov	r0, sp
    dd3a:	1ddc      	adds	r4, r3, #7
    dd3c:	2203      	movs	r2, #3
    dd3e:	2300      	movs	r3, #0
    dd40:	0021      	movs	r1, r4
    dd42:	3006      	adds	r0, #6
    dd44:	4d03      	ldr	r5, [pc, #12]	; (dd54 <RADIO_DIO3+0x20>)
    dd46:	47a8      	blx	r5
    dd48:	7823      	ldrb	r3, [r4, #0]
    dd4a:	2b7f      	cmp	r3, #127	; 0x7f
    dd4c:	d901      	bls.n	dd52 <RADIO_DIO3+0x1e>
    dd4e:	4b02      	ldr	r3, [pc, #8]	; (dd58 <RADIO_DIO3+0x24>)
    dd50:	4798      	blx	r3
    dd52:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    dd54:	0000dba5 	.word	0x0000dba5
    dd58:	0000dbc9 	.word	0x0000dbc9

0000dd5c <RADIO_DIO4>:
    dd5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    dd5e:	466b      	mov	r3, sp
    dd60:	4668      	mov	r0, sp
    dd62:	1ddc      	adds	r4, r3, #7
    dd64:	2306      	movs	r3, #6
    dd66:	22c0      	movs	r2, #192	; 0xc0
    dd68:	18c0      	adds	r0, r0, r3
    dd6a:	0021      	movs	r1, r4
    dd6c:	4d03      	ldr	r5, [pc, #12]	; (dd7c <RADIO_DIO4+0x20>)
    dd6e:	47a8      	blx	r5
    dd70:	7823      	ldrb	r3, [r4, #0]
    dd72:	2b7f      	cmp	r3, #127	; 0x7f
    dd74:	d901      	bls.n	dd7a <RADIO_DIO4+0x1e>
    dd76:	4b02      	ldr	r3, [pc, #8]	; (dd80 <RADIO_DIO4+0x24>)
    dd78:	4798      	blx	r3
    dd7a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    dd7c:	0000dba5 	.word	0x0000dba5
    dd80:	0000dbc9 	.word	0x0000dbc9

0000dd84 <RADIO_DIO5>:
    dd84:	b537      	push	{r0, r1, r2, r4, r5, lr}
    dd86:	466b      	mov	r3, sp
    dd88:	4668      	mov	r0, sp
    dd8a:	1ddc      	adds	r4, r3, #7
    dd8c:	2230      	movs	r2, #48	; 0x30
    dd8e:	2304      	movs	r3, #4
    dd90:	0021      	movs	r1, r4
    dd92:	3006      	adds	r0, #6
    dd94:	4d03      	ldr	r5, [pc, #12]	; (dda4 <RADIO_DIO5+0x20>)
    dd96:	47a8      	blx	r5
    dd98:	7823      	ldrb	r3, [r4, #0]
    dd9a:	2b7f      	cmp	r3, #127	; 0x7f
    dd9c:	d901      	bls.n	dda2 <RADIO_DIO5+0x1e>
    dd9e:	4b02      	ldr	r3, [pc, #8]	; (dda8 <RADIO_DIO5+0x24>)
    dda0:	4798      	blx	r3
    dda2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    dda4:	0000dba5 	.word	0x0000dba5
    dda8:	0000dbc9 	.word	0x0000dbc9

0000ddac <radioPostTask>:
    ddac:	b510      	push	{r4, lr}
    ddae:	0004      	movs	r4, r0
    ddb0:	4b05      	ldr	r3, [pc, #20]	; (ddc8 <radioPostTask+0x1c>)
    ddb2:	4798      	blx	r3
    ddb4:	4b05      	ldr	r3, [pc, #20]	; (ddcc <radioPostTask+0x20>)
    ddb6:	8818      	ldrh	r0, [r3, #0]
    ddb8:	4320      	orrs	r0, r4
    ddba:	8018      	strh	r0, [r3, #0]
    ddbc:	4b04      	ldr	r3, [pc, #16]	; (ddd0 <radioPostTask+0x24>)
    ddbe:	4798      	blx	r3
    ddc0:	2002      	movs	r0, #2
    ddc2:	4b04      	ldr	r3, [pc, #16]	; (ddd4 <radioPostTask+0x28>)
    ddc4:	4798      	blx	r3
    ddc6:	bd10      	pop	{r4, pc}
    ddc8:	0000c231 	.word	0x0000c231
    ddcc:	2000204c 	.word	0x2000204c
    ddd0:	0000c23d 	.word	0x0000c23d
    ddd4:	0000cd29 	.word	0x0000cd29

0000ddd8 <radioClearTask>:
    ddd8:	b510      	push	{r4, lr}
    ddda:	0004      	movs	r4, r0
    dddc:	4b04      	ldr	r3, [pc, #16]	; (ddf0 <radioClearTask+0x18>)
    ddde:	4798      	blx	r3
    dde0:	4a04      	ldr	r2, [pc, #16]	; (ddf4 <radioClearTask+0x1c>)
    dde2:	8813      	ldrh	r3, [r2, #0]
    dde4:	43a3      	bics	r3, r4
    dde6:	8013      	strh	r3, [r2, #0]
    dde8:	4b03      	ldr	r3, [pc, #12]	; (ddf8 <radioClearTask+0x20>)
    ddea:	4798      	blx	r3
    ddec:	bd10      	pop	{r4, pc}
    ddee:	46c0      	nop			; (mov r8, r8)
    ddf0:	0000c231 	.word	0x0000c231
    ddf4:	2000204c 	.word	0x2000204c
    ddf8:	0000c23d 	.word	0x0000c23d

0000ddfc <RADIO_TaskHandler>:
    ddfc:	b570      	push	{r4, r5, r6, lr}
    ddfe:	2400      	movs	r4, #0
    de00:	4d10      	ldr	r5, [pc, #64]	; (de44 <RADIO_TaskHandler+0x48>)
    de02:	2601      	movs	r6, #1
    de04:	882b      	ldrh	r3, [r5, #0]
    de06:	42a3      	cmp	r3, r4
    de08:	d015      	beq.n	de36 <RADIO_TaskHandler+0x3a>
    de0a:	882b      	ldrh	r3, [r5, #0]
    de0c:	4123      	asrs	r3, r4
    de0e:	4233      	tst	r3, r6
    de10:	d013      	beq.n	de3a <RADIO_TaskHandler+0x3e>
    de12:	40a6      	lsls	r6, r4
    de14:	4b0c      	ldr	r3, [pc, #48]	; (de48 <RADIO_TaskHandler+0x4c>)
    de16:	4798      	blx	r3
    de18:	882b      	ldrh	r3, [r5, #0]
    de1a:	00a4      	lsls	r4, r4, #2
    de1c:	43b3      	bics	r3, r6
    de1e:	802b      	strh	r3, [r5, #0]
    de20:	4b0a      	ldr	r3, [pc, #40]	; (de4c <RADIO_TaskHandler+0x50>)
    de22:	4798      	blx	r3
    de24:	4b0a      	ldr	r3, [pc, #40]	; (de50 <RADIO_TaskHandler+0x54>)
    de26:	58e3      	ldr	r3, [r4, r3]
    de28:	4798      	blx	r3
    de2a:	882b      	ldrh	r3, [r5, #0]
    de2c:	2b00      	cmp	r3, #0
    de2e:	d002      	beq.n	de36 <RADIO_TaskHandler+0x3a>
    de30:	2002      	movs	r0, #2
    de32:	4b08      	ldr	r3, [pc, #32]	; (de54 <RADIO_TaskHandler+0x58>)
    de34:	4798      	blx	r3
    de36:	2000      	movs	r0, #0
    de38:	bd70      	pop	{r4, r5, r6, pc}
    de3a:	3401      	adds	r4, #1
    de3c:	2c05      	cmp	r4, #5
    de3e:	d1e4      	bne.n	de0a <RADIO_TaskHandler+0xe>
    de40:	e7f9      	b.n	de36 <RADIO_TaskHandler+0x3a>
    de42:	46c0      	nop			; (mov r8, r8)
    de44:	2000204c 	.word	0x2000204c
    de48:	0000c231 	.word	0x0000c231
    de4c:	0000c23d 	.word	0x0000c23d
    de50:	00017378 	.word	0x00017378
    de54:	0000cd29 	.word	0x0000cd29

0000de58 <RadioSetState>:
    de58:	4b01      	ldr	r3, [pc, #4]	; (de60 <RadioSetState+0x8>)
    de5a:	7018      	strb	r0, [r3, #0]
    de5c:	4770      	bx	lr
    de5e:	46c0      	nop			; (mov r8, r8)
    de60:	20002eb3 	.word	0x20002eb3

0000de64 <RADIO_GetState>:
    de64:	4b01      	ldr	r3, [pc, #4]	; (de6c <RADIO_GetState+0x8>)
    de66:	7818      	ldrb	r0, [r3, #0]
    de68:	b2c0      	uxtb	r0, r0
    de6a:	4770      	bx	lr
    de6c:	20002eb3 	.word	0x20002eb3

0000de70 <RADIO_SetCallbackBitmask>:
    de70:	4a02      	ldr	r2, [pc, #8]	; (de7c <RADIO_SetCallbackBitmask+0xc>)
    de72:	7813      	ldrb	r3, [r2, #0]
    de74:	4318      	orrs	r0, r3
    de76:	7010      	strb	r0, [r2, #0]
    de78:	4770      	bx	lr
    de7a:	46c0      	nop			; (mov r8, r8)
    de7c:	20002eb2 	.word	0x20002eb2

0000de80 <RADIO_Transmit>:
    de80:	b570      	push	{r4, r5, r6, lr}
    de82:	4d10      	ldr	r5, [pc, #64]	; (dec4 <RADIO_Transmit+0x44>)
    de84:	0006      	movs	r6, r0
    de86:	782b      	ldrb	r3, [r5, #0]
    de88:	2004      	movs	r0, #4
    de8a:	2b01      	cmp	r3, #1
    de8c:	d118      	bne.n	dec0 <RADIO_Transmit+0x40>
    de8e:	4c0e      	ldr	r4, [pc, #56]	; (dec8 <RADIO_Transmit+0x48>)
    de90:	0023      	movs	r3, r4
    de92:	332f      	adds	r3, #47	; 0x2f
    de94:	7818      	ldrb	r0, [r3, #0]
    de96:	4b0d      	ldr	r3, [pc, #52]	; (decc <RADIO_Transmit+0x4c>)
    de98:	4798      	blx	r3
    de9a:	4b0d      	ldr	r3, [pc, #52]	; (ded0 <RADIO_Transmit+0x50>)
    de9c:	7832      	ldrb	r2, [r6, #0]
    de9e:	6871      	ldr	r1, [r6, #4]
    dea0:	701a      	strb	r2, [r3, #0]
    dea2:	4b0c      	ldr	r3, [pc, #48]	; (ded4 <RADIO_Transmit+0x54>)
    dea4:	3434      	adds	r4, #52	; 0x34
    dea6:	6019      	str	r1, [r3, #0]
    dea8:	7821      	ldrb	r1, [r4, #0]
    deaa:	2302      	movs	r3, #2
    deac:	2900      	cmp	r1, #0
    deae:	d102      	bne.n	deb6 <RADIO_Transmit+0x36>
    deb0:	0018      	movs	r0, r3
    deb2:	2a3f      	cmp	r2, #63	; 0x3f
    deb4:	d804      	bhi.n	dec0 <RADIO_Transmit+0x40>
    deb6:	702b      	strb	r3, [r5, #0]
    deb8:	2004      	movs	r0, #4
    deba:	4b07      	ldr	r3, [pc, #28]	; (ded8 <RADIO_Transmit+0x58>)
    debc:	4798      	blx	r3
    debe:	2000      	movs	r0, #0
    dec0:	bd70      	pop	{r4, r5, r6, pc}
    dec2:	46c0      	nop			; (mov r8, r8)
    dec4:	20002eb3 	.word	0x20002eb3
    dec8:	20002cf4 	.word	0x20002cf4
    decc:	0000ca3d 	.word	0x0000ca3d
    ded0:	2000206c 	.word	0x2000206c
    ded4:	20002068 	.word	0x20002068
    ded8:	0000ddad 	.word	0x0000ddad

0000dedc <Radio_FSKTxPayloadHandler>:
    dedc:	b570      	push	{r4, r5, r6, lr}
    dede:	4b1c      	ldr	r3, [pc, #112]	; (df50 <Radio_FSKTxPayloadHandler+0x74>)
    dee0:	000d      	movs	r5, r1
    dee2:	4798      	blx	r3
    dee4:	4c1b      	ldr	r4, [pc, #108]	; (df54 <Radio_FSKTxPayloadHandler+0x78>)
    dee6:	3457      	adds	r4, #87	; 0x57
    dee8:	7820      	ldrb	r0, [r4, #0]
    deea:	b2c0      	uxtb	r0, r0
    deec:	2800      	cmp	r0, #0
    deee:	d112      	bne.n	df16 <Radio_FSKTxPayloadHandler+0x3a>
    def0:	2d00      	cmp	r5, #0
    def2:	d007      	beq.n	df04 <Radio_FSKTxPayloadHandler+0x28>
    def4:	4918      	ldr	r1, [pc, #96]	; (df58 <Radio_FSKTxPayloadHandler+0x7c>)
    def6:	4b19      	ldr	r3, [pc, #100]	; (df5c <Radio_FSKTxPayloadHandler+0x80>)
    def8:	2d3e      	cmp	r5, #62	; 0x3e
    defa:	d806      	bhi.n	df0a <Radio_FSKTxPayloadHandler+0x2e>
    defc:	002a      	movs	r2, r5
    defe:	6809      	ldr	r1, [r1, #0]
    df00:	4798      	blx	r3
    df02:	7025      	strb	r5, [r4, #0]
    df04:	4b16      	ldr	r3, [pc, #88]	; (df60 <Radio_FSKTxPayloadHandler+0x84>)
    df06:	4798      	blx	r3
    df08:	bd70      	pop	{r4, r5, r6, pc}
    df0a:	223f      	movs	r2, #63	; 0x3f
    df0c:	6809      	ldr	r1, [r1, #0]
    df0e:	4798      	blx	r3
    df10:	233f      	movs	r3, #63	; 0x3f
    df12:	7023      	strb	r3, [r4, #0]
    df14:	e7f6      	b.n	df04 <Radio_FSKTxPayloadHandler+0x28>
    df16:	7823      	ldrb	r3, [r4, #0]
    df18:	429d      	cmp	r5, r3
    df1a:	d0f3      	beq.n	df04 <Radio_FSKTxPayloadHandler+0x28>
    df1c:	7822      	ldrb	r2, [r4, #0]
    df1e:	480e      	ldr	r0, [pc, #56]	; (df58 <Radio_FSKTxPayloadHandler+0x7c>)
    df20:	1aaa      	subs	r2, r5, r2
    df22:	b2d2      	uxtb	r2, r2
    df24:	4b0d      	ldr	r3, [pc, #52]	; (df5c <Radio_FSKTxPayloadHandler+0x80>)
    df26:	2a3f      	cmp	r2, #63	; 0x3f
    df28:	d807      	bhi.n	df3a <Radio_FSKTxPayloadHandler+0x5e>
    df2a:	7826      	ldrb	r6, [r4, #0]
    df2c:	7822      	ldrb	r2, [r4, #0]
    df2e:	6801      	ldr	r1, [r0, #0]
    df30:	1aaa      	subs	r2, r5, r2
    df32:	b2d2      	uxtb	r2, r2
    df34:	1989      	adds	r1, r1, r6
    df36:	2000      	movs	r0, #0
    df38:	e7e2      	b.n	df00 <Radio_FSKTxPayloadHandler+0x24>
    df3a:	7822      	ldrb	r2, [r4, #0]
    df3c:	6801      	ldr	r1, [r0, #0]
    df3e:	2000      	movs	r0, #0
    df40:	1889      	adds	r1, r1, r2
    df42:	223f      	movs	r2, #63	; 0x3f
    df44:	4798      	blx	r3
    df46:	7823      	ldrb	r3, [r4, #0]
    df48:	333f      	adds	r3, #63	; 0x3f
    df4a:	b2db      	uxtb	r3, r3
    df4c:	e7e1      	b.n	df12 <Radio_FSKTxPayloadHandler+0x36>
    df4e:	46c0      	nop			; (mov r8, r8)
    df50:	00004aa5 	.word	0x00004aa5
    df54:	20002cf4 	.word	0x20002cf4
    df58:	20002068 	.word	0x20002068
    df5c:	0000c0e5 	.word	0x0000c0e5
    df60:	00004ae5 	.word	0x00004ae5

0000df64 <RADIO_FSKSyncAddr>:
    df64:	4b08      	ldr	r3, [pc, #32]	; (df88 <RADIO_FSKSyncAddr+0x24>)
    df66:	b510      	push	{r4, lr}
    df68:	4798      	blx	r3
    df6a:	4b08      	ldr	r3, [pc, #32]	; (df8c <RADIO_FSKSyncAddr+0x28>)
    df6c:	001a      	movs	r2, r3
    df6e:	3234      	adds	r2, #52	; 0x34
    df70:	7812      	ldrb	r2, [r2, #0]
    df72:	2a00      	cmp	r2, #0
    df74:	d104      	bne.n	df80 <RADIO_FSKSyncAddr+0x1c>
    df76:	0019      	movs	r1, r3
    df78:	3357      	adds	r3, #87	; 0x57
    df7a:	312c      	adds	r1, #44	; 0x2c
    df7c:	700a      	strb	r2, [r1, #0]
    df7e:	701a      	strb	r2, [r3, #0]
    df80:	4b03      	ldr	r3, [pc, #12]	; (df90 <RADIO_FSKSyncAddr+0x2c>)
    df82:	4798      	blx	r3
    df84:	bd10      	pop	{r4, pc}
    df86:	46c0      	nop			; (mov r8, r8)
    df88:	00004aa5 	.word	0x00004aa5
    df8c:	20002cf4 	.word	0x20002cf4
    df90:	00004ae5 	.word	0x00004ae5

0000df94 <RADIO_FSKFifoLevel>:
    df94:	b570      	push	{r4, r5, r6, lr}
    df96:	4b22      	ldr	r3, [pc, #136]	; (e020 <RADIO_FSKFifoLevel+0x8c>)
    df98:	4798      	blx	r3
    df9a:	4d22      	ldr	r5, [pc, #136]	; (e024 <RADIO_FSKFifoLevel+0x90>)
    df9c:	002a      	movs	r2, r5
    df9e:	002b      	movs	r3, r5
    dfa0:	322c      	adds	r2, #44	; 0x2c
    dfa2:	3357      	adds	r3, #87	; 0x57
    dfa4:	7810      	ldrb	r0, [r2, #0]
    dfa6:	7819      	ldrb	r1, [r3, #0]
    dfa8:	4288      	cmp	r0, r1
    dfaa:	d105      	bne.n	dfb8 <RADIO_FSKFifoLevel+0x24>
    dfac:	7812      	ldrb	r2, [r2, #0]
    dfae:	2a00      	cmp	r2, #0
    dfb0:	d002      	beq.n	dfb8 <RADIO_FSKFifoLevel+0x24>
    dfb2:	781b      	ldrb	r3, [r3, #0]
    dfb4:	2b00      	cmp	r3, #0
    dfb6:	d11f      	bne.n	dff8 <RADIO_FSKFifoLevel+0x64>
    dfb8:	0029      	movs	r1, r5
    dfba:	312c      	adds	r1, #44	; 0x2c
    dfbc:	7808      	ldrb	r0, [r1, #0]
    dfbe:	b2c0      	uxtb	r0, r0
    dfc0:	2800      	cmp	r0, #0
    dfc2:	d102      	bne.n	dfca <RADIO_FSKFifoLevel+0x36>
    dfc4:	2201      	movs	r2, #1
    dfc6:	4b18      	ldr	r3, [pc, #96]	; (e028 <RADIO_FSKFifoLevel+0x94>)
    dfc8:	4798      	blx	r3
    dfca:	002e      	movs	r6, r5
    dfcc:	002c      	movs	r4, r5
    dfce:	362c      	adds	r6, #44	; 0x2c
    dfd0:	3457      	adds	r4, #87	; 0x57
    dfd2:	7833      	ldrb	r3, [r6, #0]
    dfd4:	7822      	ldrb	r2, [r4, #0]
    dfd6:	1a9b      	subs	r3, r3, r2
    dfd8:	b2db      	uxtb	r3, r3
    dfda:	2b3e      	cmp	r3, #62	; 0x3e
    dfdc:	d80f      	bhi.n	dffe <RADIO_FSKFifoLevel+0x6a>
    dfde:	7823      	ldrb	r3, [r4, #0]
    dfe0:	7832      	ldrb	r2, [r6, #0]
    dfe2:	7821      	ldrb	r1, [r4, #0]
    dfe4:	2000      	movs	r0, #0
    dfe6:	1a52      	subs	r2, r2, r1
    dfe8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    dfea:	b2d2      	uxtb	r2, r2
    dfec:	18c9      	adds	r1, r1, r3
    dfee:	4b0e      	ldr	r3, [pc, #56]	; (e028 <RADIO_FSKFifoLevel+0x94>)
    dff0:	4798      	blx	r3
    dff2:	7833      	ldrb	r3, [r6, #0]
    dff4:	b2db      	uxtb	r3, r3
    dff6:	7023      	strb	r3, [r4, #0]
    dff8:	4b0c      	ldr	r3, [pc, #48]	; (e02c <RADIO_FSKFifoLevel+0x98>)
    dffa:	4798      	blx	r3
    dffc:	bd70      	pop	{r4, r5, r6, pc}
    dffe:	7833      	ldrb	r3, [r6, #0]
    e000:	7822      	ldrb	r2, [r4, #0]
    e002:	1a9b      	subs	r3, r3, r2
    e004:	b2db      	uxtb	r3, r3
    e006:	2b3f      	cmp	r3, #63	; 0x3f
    e008:	d9f6      	bls.n	dff8 <RADIO_FSKFifoLevel+0x64>
    e00a:	7823      	ldrb	r3, [r4, #0]
    e00c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    e00e:	223f      	movs	r2, #63	; 0x3f
    e010:	18c9      	adds	r1, r1, r3
    e012:	2000      	movs	r0, #0
    e014:	4b04      	ldr	r3, [pc, #16]	; (e028 <RADIO_FSKFifoLevel+0x94>)
    e016:	4798      	blx	r3
    e018:	7823      	ldrb	r3, [r4, #0]
    e01a:	333f      	adds	r3, #63	; 0x3f
    e01c:	e7ea      	b.n	dff4 <RADIO_FSKFifoLevel+0x60>
    e01e:	46c0      	nop			; (mov r8, r8)
    e020:	00004aa5 	.word	0x00004aa5
    e024:	20002cf4 	.word	0x20002cf4
    e028:	0000c125 	.word	0x0000c125
    e02c:	00004ae5 	.word	0x00004ae5

0000e030 <RADIO_FSKFifoEmpty>:
    e030:	b510      	push	{r4, lr}
    e032:	4b03      	ldr	r3, [pc, #12]	; (e040 <RADIO_FSKFifoEmpty+0x10>)
    e034:	7819      	ldrb	r1, [r3, #0]
    e036:	4b03      	ldr	r3, [pc, #12]	; (e044 <RADIO_FSKFifoEmpty+0x14>)
    e038:	6818      	ldr	r0, [r3, #0]
    e03a:	4b03      	ldr	r3, [pc, #12]	; (e048 <RADIO_FSKFifoEmpty+0x18>)
    e03c:	4798      	blx	r3
    e03e:	bd10      	pop	{r4, pc}
    e040:	2000206c 	.word	0x2000206c
    e044:	20002068 	.word	0x20002068
    e048:	0000dedd 	.word	0x0000dedd

0000e04c <RADIO_GetData>:
    e04c:	4b03      	ldr	r3, [pc, #12]	; (e05c <RADIO_GetData+0x10>)
    e04e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e050:	332c      	adds	r3, #44	; 0x2c
    e052:	6002      	str	r2, [r0, #0]
    e054:	781b      	ldrb	r3, [r3, #0]
    e056:	2000      	movs	r0, #0
    e058:	800b      	strh	r3, [r1, #0]
    e05a:	4770      	bx	lr
    e05c:	20002cf4 	.word	0x20002cf4

0000e060 <Radio_EnableRfControl>:
    e060:	b510      	push	{r4, lr}
    e062:	4b08      	ldr	r3, [pc, #32]	; (e084 <Radio_EnableRfControl+0x24>)
    e064:	0001      	movs	r1, r0
    e066:	681a      	ldr	r2, [r3, #0]
    e068:	4807      	ldr	r0, [pc, #28]	; (e088 <Radio_EnableRfControl+0x28>)
    e06a:	4c08      	ldr	r4, [pc, #32]	; (e08c <Radio_EnableRfControl+0x2c>)
    e06c:	1812      	adds	r2, r2, r0
    e06e:	2000      	movs	r0, #0
    e070:	42a2      	cmp	r2, r4
    e072:	d804      	bhi.n	e07e <Radio_EnableRfControl+0x1e>
    e074:	3305      	adds	r3, #5
    e076:	7fdb      	ldrb	r3, [r3, #31]
    e078:	1e58      	subs	r0, r3, #1
    e07a:	4183      	sbcs	r3, r0
    e07c:	1c58      	adds	r0, r3, #1
    e07e:	4b04      	ldr	r3, [pc, #16]	; (e090 <Radio_EnableRfControl+0x30>)
    e080:	4798      	blx	r3
    e082:	bd10      	pop	{r4, pc}
    e084:	20002cf4 	.word	0x20002cf4
    e088:	cc9eec80 	.word	0xcc9eec80
    e08c:	096ae380 	.word	0x096ae380
    e090:	0000c191 	.word	0x0000c191

0000e094 <RADIO_RxHandler>:
    e094:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e096:	4b33      	ldr	r3, [pc, #204]	; (e164 <RADIO_RxHandler+0xd0>)
    e098:	2000      	movs	r0, #0
    e09a:	4798      	blx	r3
    e09c:	4e32      	ldr	r6, [pc, #200]	; (e168 <RADIO_RxHandler+0xd4>)
    e09e:	4b33      	ldr	r3, [pc, #204]	; (e16c <RADIO_RxHandler+0xd8>)
    e0a0:	8830      	ldrh	r0, [r6, #0]
    e0a2:	2800      	cmp	r0, #0
    e0a4:	d100      	bne.n	e0a8 <RADIO_RxHandler+0x14>
    e0a6:	3004      	adds	r0, #4
    e0a8:	4798      	blx	r3
    e0aa:	4c31      	ldr	r4, [pc, #196]	; (e170 <RADIO_RxHandler+0xdc>)
    e0ac:	4d31      	ldr	r5, [pc, #196]	; (e174 <RADIO_RxHandler+0xe0>)
    e0ae:	0023      	movs	r3, r4
    e0b0:	3334      	adds	r3, #52	; 0x34
    e0b2:	7819      	ldrb	r1, [r3, #0]
    e0b4:	2901      	cmp	r1, #1
    e0b6:	d122      	bne.n	e0fe <RADIO_RxHandler+0x6a>
    e0b8:	2022      	movs	r0, #34	; 0x22
    e0ba:	47a8      	blx	r5
    e0bc:	2100      	movs	r1, #0
    e0be:	2040      	movs	r0, #64	; 0x40
    e0c0:	47a8      	blx	r5
    e0c2:	2100      	movs	r1, #0
    e0c4:	2041      	movs	r0, #65	; 0x41
    e0c6:	47a8      	blx	r5
    e0c8:	8832      	ldrh	r2, [r6, #0]
    e0ca:	4b2b      	ldr	r3, [pc, #172]	; (e178 <RADIO_RxHandler+0xe4>)
    e0cc:	2a00      	cmp	r2, #0
    e0ce:	d131      	bne.n	e134 <RADIO_RxHandler+0xa0>
    e0d0:	0021      	movs	r1, r4
    e0d2:	2005      	movs	r0, #5
    e0d4:	3134      	adds	r1, #52	; 0x34
    e0d6:	7809      	ldrb	r1, [r1, #0]
    e0d8:	4798      	blx	r3
    e0da:	68e3      	ldr	r3, [r4, #12]
    e0dc:	2b00      	cmp	r3, #0
    e0de:	d00c      	beq.n	e0fa <RADIO_RxHandler+0x66>
    e0e0:	8832      	ldrh	r2, [r6, #0]
    e0e2:	2a00      	cmp	r2, #0
    e0e4:	d009      	beq.n	e0fa <RADIO_RxHandler+0x66>
    e0e6:	21fa      	movs	r1, #250	; 0xfa
    e0e8:	2200      	movs	r2, #0
    e0ea:	342f      	adds	r4, #47	; 0x2f
    e0ec:	0089      	lsls	r1, r1, #2
    e0ee:	7820      	ldrb	r0, [r4, #0]
    e0f0:	4359      	muls	r1, r3
    e0f2:	9200      	str	r2, [sp, #0]
    e0f4:	4b21      	ldr	r3, [pc, #132]	; (e17c <RADIO_RxHandler+0xe8>)
    e0f6:	4c22      	ldr	r4, [pc, #136]	; (e180 <RADIO_RxHandler+0xec>)
    e0f8:	47a0      	blx	r4
    e0fa:	2000      	movs	r0, #0
    e0fc:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    e0fe:	0023      	movs	r3, r4
    e100:	3338      	adds	r3, #56	; 0x38
    e102:	7819      	ldrb	r1, [r3, #0]
    e104:	2012      	movs	r0, #18
    e106:	47a8      	blx	r5
    e108:	0023      	movs	r3, r4
    e10a:	3339      	adds	r3, #57	; 0x39
    e10c:	7819      	ldrb	r1, [r3, #0]
    e10e:	2013      	movs	r0, #19
    e110:	47a8      	blx	r5
    e112:	210c      	movs	r1, #12
    e114:	2040      	movs	r0, #64	; 0x40
    e116:	47a8      	blx	r5
    e118:	2100      	movs	r1, #0
    e11a:	2041      	movs	r0, #65	; 0x41
    e11c:	47a8      	blx	r5
    e11e:	0022      	movs	r2, r4
    e120:	2300      	movs	r3, #0
    e122:	3256      	adds	r2, #86	; 0x56
    e124:	7013      	strb	r3, [r2, #0]
    e126:	0022      	movs	r2, r4
    e128:	322c      	adds	r2, #44	; 0x2c
    e12a:	7013      	strb	r3, [r2, #0]
    e12c:	0022      	movs	r2, r4
    e12e:	3257      	adds	r2, #87	; 0x57
    e130:	7013      	strb	r3, [r2, #0]
    e132:	e7c9      	b.n	e0c8 <RADIO_RxHandler+0x34>
    e134:	0022      	movs	r2, r4
    e136:	3234      	adds	r2, #52	; 0x34
    e138:	7811      	ldrb	r1, [r2, #0]
    e13a:	2200      	movs	r2, #0
    e13c:	2901      	cmp	r1, #1
    e13e:	d101      	bne.n	e144 <RADIO_RxHandler+0xb0>
    e140:	2006      	movs	r0, #6
    e142:	e7c9      	b.n	e0d8 <RADIO_RxHandler+0x44>
    e144:	0011      	movs	r1, r2
    e146:	2005      	movs	r0, #5
    e148:	4798      	blx	r3
    e14a:	21fa      	movs	r1, #250	; 0xfa
    e14c:	8833      	ldrh	r3, [r6, #0]
    e14e:	0089      	lsls	r1, r1, #2
    e150:	4359      	muls	r1, r3
    e152:	0023      	movs	r3, r4
    e154:	2200      	movs	r2, #0
    e156:	332e      	adds	r3, #46	; 0x2e
    e158:	7818      	ldrb	r0, [r3, #0]
    e15a:	4d09      	ldr	r5, [pc, #36]	; (e180 <RADIO_RxHandler+0xec>)
    e15c:	9200      	str	r2, [sp, #0]
    e15e:	4b09      	ldr	r3, [pc, #36]	; (e184 <RADIO_RxHandler+0xf0>)
    e160:	47a8      	blx	r5
    e162:	e7ba      	b.n	e0da <RADIO_RxHandler+0x46>
    e164:	0000e061 	.word	0x0000e061
    e168:	20002058 	.word	0x20002058
    e16c:	0000d7ed 	.word	0x0000d7ed
    e170:	20002cf4 	.word	0x20002cf4
    e174:	0000c091 	.word	0x0000c091
    e178:	0000cd4d 	.word	0x0000cd4d
    e17c:	0000e1bd 	.word	0x0000e1bd
    e180:	0000c739 	.word	0x0000c739
    e184:	0000e24d 	.word	0x0000e24d

0000e188 <Radio_DisableRfControl>:
    e188:	b510      	push	{r4, lr}
    e18a:	4b08      	ldr	r3, [pc, #32]	; (e1ac <Radio_DisableRfControl+0x24>)
    e18c:	0001      	movs	r1, r0
    e18e:	681a      	ldr	r2, [r3, #0]
    e190:	4807      	ldr	r0, [pc, #28]	; (e1b0 <Radio_DisableRfControl+0x28>)
    e192:	4c08      	ldr	r4, [pc, #32]	; (e1b4 <Radio_DisableRfControl+0x2c>)
    e194:	1812      	adds	r2, r2, r0
    e196:	2000      	movs	r0, #0
    e198:	42a2      	cmp	r2, r4
    e19a:	d804      	bhi.n	e1a6 <Radio_DisableRfControl+0x1e>
    e19c:	3305      	adds	r3, #5
    e19e:	7fdb      	ldrb	r3, [r3, #31]
    e1a0:	1e58      	subs	r0, r3, #1
    e1a2:	4183      	sbcs	r3, r0
    e1a4:	1c58      	adds	r0, r3, #1
    e1a6:	4b04      	ldr	r3, [pc, #16]	; (e1b8 <Radio_DisableRfControl+0x30>)
    e1a8:	4798      	blx	r3
    e1aa:	bd10      	pop	{r4, pc}
    e1ac:	20002cf4 	.word	0x20002cf4
    e1b0:	cc9eec80 	.word	0xcc9eec80
    e1b4:	096ae380 	.word	0x096ae380
    e1b8:	0000c1a5 	.word	0x0000c1a5

0000e1bc <Radio_WatchdogTimeout>:
    e1bc:	b510      	push	{r4, lr}
    e1be:	4b0e      	ldr	r3, [pc, #56]	; (e1f8 <Radio_WatchdogTimeout+0x3c>)
    e1c0:	781a      	ldrb	r2, [r3, #0]
    e1c2:	2a04      	cmp	r2, #4
    e1c4:	d10b      	bne.n	e1de <Radio_WatchdogTimeout+0x22>
    e1c6:	2320      	movs	r3, #32
    e1c8:	4a0c      	ldr	r2, [pc, #48]	; (e1fc <Radio_WatchdogTimeout+0x40>)
    e1ca:	2000      	movs	r0, #0
    e1cc:	8811      	ldrh	r1, [r2, #0]
    e1ce:	430b      	orrs	r3, r1
    e1d0:	8013      	strh	r3, [r2, #0]
    e1d2:	4b0b      	ldr	r3, [pc, #44]	; (e200 <Radio_WatchdogTimeout+0x44>)
    e1d4:	4798      	blx	r3
    e1d6:	2002      	movs	r0, #2
    e1d8:	4b0a      	ldr	r3, [pc, #40]	; (e204 <Radio_WatchdogTimeout+0x48>)
    e1da:	4798      	blx	r3
    e1dc:	bd10      	pop	{r4, pc}
    e1de:	781b      	ldrb	r3, [r3, #0]
    e1e0:	2b02      	cmp	r3, #2
    e1e2:	d1fb      	bne.n	e1dc <Radio_WatchdogTimeout+0x20>
    e1e4:	4a05      	ldr	r2, [pc, #20]	; (e1fc <Radio_WatchdogTimeout+0x40>)
    e1e6:	330e      	adds	r3, #14
    e1e8:	8811      	ldrh	r1, [r2, #0]
    e1ea:	2001      	movs	r0, #1
    e1ec:	430b      	orrs	r3, r1
    e1ee:	8013      	strh	r3, [r2, #0]
    e1f0:	4b03      	ldr	r3, [pc, #12]	; (e200 <Radio_WatchdogTimeout+0x44>)
    e1f2:	4798      	blx	r3
    e1f4:	2001      	movs	r0, #1
    e1f6:	e7ef      	b.n	e1d8 <Radio_WatchdogTimeout+0x1c>
    e1f8:	20002eb3 	.word	0x20002eb3
    e1fc:	20002eb0 	.word	0x20002eb0
    e200:	0000e189 	.word	0x0000e189
    e204:	0000ddad 	.word	0x0000ddad

0000e208 <RADIO_RxTimeout>:
    e208:	b510      	push	{r4, lr}
    e20a:	4b0a      	ldr	r3, [pc, #40]	; (e234 <RADIO_RxTimeout+0x2c>)
    e20c:	332f      	adds	r3, #47	; 0x2f
    e20e:	7818      	ldrb	r0, [r3, #0]
    e210:	4b09      	ldr	r3, [pc, #36]	; (e238 <RADIO_RxTimeout+0x30>)
    e212:	4798      	blx	r3
    e214:	2000      	movs	r0, #0
    e216:	4b09      	ldr	r3, [pc, #36]	; (e23c <RADIO_RxTimeout+0x34>)
    e218:	4798      	blx	r3
    e21a:	2180      	movs	r1, #128	; 0x80
    e21c:	2012      	movs	r0, #18
    e21e:	4b08      	ldr	r3, [pc, #32]	; (e240 <RADIO_RxTimeout+0x38>)
    e220:	4798      	blx	r3
    e222:	2340      	movs	r3, #64	; 0x40
    e224:	4a07      	ldr	r2, [pc, #28]	; (e244 <RADIO_RxTimeout+0x3c>)
    e226:	2002      	movs	r0, #2
    e228:	8811      	ldrh	r1, [r2, #0]
    e22a:	430b      	orrs	r3, r1
    e22c:	8013      	strh	r3, [r2, #0]
    e22e:	4b06      	ldr	r3, [pc, #24]	; (e248 <RADIO_RxTimeout+0x40>)
    e230:	4798      	blx	r3
    e232:	bd10      	pop	{r4, pc}
    e234:	20002cf4 	.word	0x20002cf4
    e238:	0000ca3d 	.word	0x0000ca3d
    e23c:	0000e189 	.word	0x0000e189
    e240:	0000c091 	.word	0x0000c091
    e244:	20002eb0 	.word	0x20002eb0
    e248:	0000ddad 	.word	0x0000ddad

0000e24c <Radio_RxFSKTimeout>:
    e24c:	b510      	push	{r4, lr}
    e24e:	4b08      	ldr	r3, [pc, #32]	; (e270 <Radio_RxFSKTimeout+0x24>)
    e250:	332f      	adds	r3, #47	; 0x2f
    e252:	7818      	ldrb	r0, [r3, #0]
    e254:	4b07      	ldr	r3, [pc, #28]	; (e274 <Radio_RxFSKTimeout+0x28>)
    e256:	4798      	blx	r3
    e258:	2000      	movs	r0, #0
    e25a:	4b07      	ldr	r3, [pc, #28]	; (e278 <Radio_RxFSKTimeout+0x2c>)
    e25c:	4798      	blx	r3
    e25e:	2380      	movs	r3, #128	; 0x80
    e260:	4a06      	ldr	r2, [pc, #24]	; (e27c <Radio_RxFSKTimeout+0x30>)
    e262:	2002      	movs	r0, #2
    e264:	8811      	ldrh	r1, [r2, #0]
    e266:	430b      	orrs	r3, r1
    e268:	8013      	strh	r3, [r2, #0]
    e26a:	4b05      	ldr	r3, [pc, #20]	; (e280 <Radio_RxFSKTimeout+0x34>)
    e26c:	4798      	blx	r3
    e26e:	bd10      	pop	{r4, pc}
    e270:	20002cf4 	.word	0x20002cf4
    e274:	0000ca3d 	.word	0x0000ca3d
    e278:	0000e189 	.word	0x0000e189
    e27c:	20002eb0 	.word	0x20002eb0
    e280:	0000ddad 	.word	0x0000ddad

0000e284 <RADIO_TxDone>:
    e284:	b570      	push	{r4, r5, r6, lr}
    e286:	4b14      	ldr	r3, [pc, #80]	; (e2d8 <RADIO_TxDone+0x54>)
    e288:	332f      	adds	r3, #47	; 0x2f
    e28a:	7818      	ldrb	r0, [r3, #0]
    e28c:	4b13      	ldr	r3, [pc, #76]	; (e2dc <RADIO_TxDone+0x58>)
    e28e:	4798      	blx	r3
    e290:	2001      	movs	r0, #1
    e292:	4b13      	ldr	r3, [pc, #76]	; (e2e0 <RADIO_TxDone+0x5c>)
    e294:	4798      	blx	r3
    e296:	4b13      	ldr	r3, [pc, #76]	; (e2e4 <RADIO_TxDone+0x60>)
    e298:	2108      	movs	r1, #8
    e29a:	2012      	movs	r0, #18
    e29c:	4798      	blx	r3
    e29e:	4b12      	ldr	r3, [pc, #72]	; (e2e8 <RADIO_TxDone+0x64>)
    e2a0:	781a      	ldrb	r2, [r3, #0]
    e2a2:	4b12      	ldr	r3, [pc, #72]	; (e2ec <RADIO_TxDone+0x68>)
    e2a4:	2a02      	cmp	r2, #2
    e2a6:	d002      	beq.n	e2ae <RADIO_TxDone+0x2a>
    e2a8:	881a      	ldrh	r2, [r3, #0]
    e2aa:	0692      	lsls	r2, r2, #26
    e2ac:	d413      	bmi.n	e2d6 <RADIO_TxDone+0x52>
    e2ae:	2001      	movs	r0, #1
    e2b0:	881a      	ldrh	r2, [r3, #0]
    e2b2:	4302      	orrs	r2, r0
    e2b4:	801a      	strh	r2, [r3, #0]
    e2b6:	4b0e      	ldr	r3, [pc, #56]	; (e2f0 <RADIO_TxDone+0x6c>)
    e2b8:	4798      	blx	r3
    e2ba:	4b0e      	ldr	r3, [pc, #56]	; (e2f4 <RADIO_TxDone+0x70>)
    e2bc:	4798      	blx	r3
    e2be:	4c0e      	ldr	r4, [pc, #56]	; (e2f8 <RADIO_TxDone+0x74>)
    e2c0:	4d0e      	ldr	r5, [pc, #56]	; (e2fc <RADIO_TxDone+0x78>)
    e2c2:	6822      	ldr	r2, [r4, #0]
    e2c4:	6863      	ldr	r3, [r4, #4]
    e2c6:	1a80      	subs	r0, r0, r2
    e2c8:	4199      	sbcs	r1, r3
    e2ca:	22fa      	movs	r2, #250	; 0xfa
    e2cc:	2300      	movs	r3, #0
    e2ce:	0092      	lsls	r2, r2, #2
    e2d0:	47a8      	blx	r5
    e2d2:	6020      	str	r0, [r4, #0]
    e2d4:	6061      	str	r1, [r4, #4]
    e2d6:	bd70      	pop	{r4, r5, r6, pc}
    e2d8:	20002cf4 	.word	0x20002cf4
    e2dc:	0000ca3d 	.word	0x0000ca3d
    e2e0:	0000e189 	.word	0x0000e189
    e2e4:	0000c091 	.word	0x0000c091
    e2e8:	20002eb3 	.word	0x20002eb3
    e2ec:	20002eb0 	.word	0x20002eb0
    e2f0:	0000ddad 	.word	0x0000ddad
    e2f4:	0000c6e1 	.word	0x0000c6e1
    e2f8:	20002060 	.word	0x20002060
    e2fc:	00011edd 	.word	0x00011edd

0000e300 <RADIO_FSKPacketSent>:
    e300:	b570      	push	{r4, r5, r6, lr}
    e302:	4b15      	ldr	r3, [pc, #84]	; (e358 <RADIO_FSKPacketSent+0x58>)
    e304:	203f      	movs	r0, #63	; 0x3f
    e306:	4798      	blx	r3
    e308:	0703      	lsls	r3, r0, #28
    e30a:	d524      	bpl.n	e356 <RADIO_FSKPacketSent+0x56>
    e30c:	4b13      	ldr	r3, [pc, #76]	; (e35c <RADIO_FSKPacketSent+0x5c>)
    e30e:	332f      	adds	r3, #47	; 0x2f
    e310:	7818      	ldrb	r0, [r3, #0]
    e312:	4b13      	ldr	r3, [pc, #76]	; (e360 <RADIO_FSKPacketSent+0x60>)
    e314:	4798      	blx	r3
    e316:	4b13      	ldr	r3, [pc, #76]	; (e364 <RADIO_FSKPacketSent+0x64>)
    e318:	2001      	movs	r0, #1
    e31a:	4798      	blx	r3
    e31c:	4b12      	ldr	r3, [pc, #72]	; (e368 <RADIO_FSKPacketSent+0x68>)
    e31e:	4c13      	ldr	r4, [pc, #76]	; (e36c <RADIO_FSKPacketSent+0x6c>)
    e320:	781b      	ldrb	r3, [r3, #0]
    e322:	2b02      	cmp	r3, #2
    e324:	d002      	beq.n	e32c <RADIO_FSKPacketSent+0x2c>
    e326:	8823      	ldrh	r3, [r4, #0]
    e328:	069b      	lsls	r3, r3, #26
    e32a:	d414      	bmi.n	e356 <RADIO_FSKPacketSent+0x56>
    e32c:	4b10      	ldr	r3, [pc, #64]	; (e370 <RADIO_FSKPacketSent+0x70>)
    e32e:	4798      	blx	r3
    e330:	4d10      	ldr	r5, [pc, #64]	; (e374 <RADIO_FSKPacketSent+0x74>)
    e332:	4e11      	ldr	r6, [pc, #68]	; (e378 <RADIO_FSKPacketSent+0x78>)
    e334:	682a      	ldr	r2, [r5, #0]
    e336:	686b      	ldr	r3, [r5, #4]
    e338:	1a80      	subs	r0, r0, r2
    e33a:	4199      	sbcs	r1, r3
    e33c:	22fa      	movs	r2, #250	; 0xfa
    e33e:	2300      	movs	r3, #0
    e340:	0092      	lsls	r2, r2, #2
    e342:	47b0      	blx	r6
    e344:	4b0d      	ldr	r3, [pc, #52]	; (e37c <RADIO_FSKPacketSent+0x7c>)
    e346:	6028      	str	r0, [r5, #0]
    e348:	6069      	str	r1, [r5, #4]
    e34a:	2001      	movs	r0, #1
    e34c:	4798      	blx	r3
    e34e:	2304      	movs	r3, #4
    e350:	8822      	ldrh	r2, [r4, #0]
    e352:	4313      	orrs	r3, r2
    e354:	8023      	strh	r3, [r4, #0]
    e356:	bd70      	pop	{r4, r5, r6, pc}
    e358:	0000c0b9 	.word	0x0000c0b9
    e35c:	20002cf4 	.word	0x20002cf4
    e360:	0000ca3d 	.word	0x0000ca3d
    e364:	0000e189 	.word	0x0000e189
    e368:	20002eb3 	.word	0x20002eb3
    e36c:	20002eb0 	.word	0x20002eb0
    e370:	0000c6e1 	.word	0x0000c6e1
    e374:	20002060 	.word	0x20002060
    e378:	00011edd 	.word	0x00011edd
    e37c:	0000ddad 	.word	0x0000ddad

0000e380 <RADIO_RxDone>:
    e380:	b570      	push	{r4, r5, r6, lr}
    e382:	2012      	movs	r0, #18
    e384:	4e16      	ldr	r6, [pc, #88]	; (e3e0 <RADIO_RxDone+0x60>)
    e386:	47b0      	blx	r6
    e388:	4b16      	ldr	r3, [pc, #88]	; (e3e4 <RADIO_RxDone+0x64>)
    e38a:	0005      	movs	r5, r0
    e38c:	2170      	movs	r1, #112	; 0x70
    e38e:	2012      	movs	r0, #18
    e390:	4798      	blx	r3
    e392:	2350      	movs	r3, #80	; 0x50
    e394:	402b      	ands	r3, r5
    e396:	2b50      	cmp	r3, #80	; 0x50
    e398:	d119      	bne.n	e3ce <RADIO_RxDone+0x4e>
    e39a:	4c13      	ldr	r4, [pc, #76]	; (e3e8 <RADIO_RxDone+0x68>)
    e39c:	0023      	movs	r3, r4
    e39e:	332f      	adds	r3, #47	; 0x2f
    e3a0:	7818      	ldrb	r0, [r3, #0]
    e3a2:	4b12      	ldr	r3, [pc, #72]	; (e3ec <RADIO_RxDone+0x6c>)
    e3a4:	4798      	blx	r3
    e3a6:	4b12      	ldr	r3, [pc, #72]	; (e3f0 <RADIO_RxDone+0x70>)
    e3a8:	2000      	movs	r0, #0
    e3aa:	4798      	blx	r3
    e3ac:	3404      	adds	r4, #4
    e3ae:	201c      	movs	r0, #28
    e3b0:	47b0      	blx	r6
    e3b2:	7fe2      	ldrb	r2, [r4, #31]
    e3b4:	4b0f      	ldr	r3, [pc, #60]	; (e3f4 <RADIO_RxDone+0x74>)
    e3b6:	4910      	ldr	r1, [pc, #64]	; (e3f8 <RADIO_RxDone+0x78>)
    e3b8:	2a00      	cmp	r2, #0
    e3ba:	d003      	beq.n	e3c4 <RADIO_RxDone+0x44>
    e3bc:	06aa      	lsls	r2, r5, #26
    e3be:	d407      	bmi.n	e3d0 <RADIO_RxDone+0x50>
    e3c0:	0642      	lsls	r2, r0, #25
    e3c2:	d505      	bpl.n	e3d0 <RADIO_RxDone+0x50>
    e3c4:	2002      	movs	r0, #2
    e3c6:	881a      	ldrh	r2, [r3, #0]
    e3c8:	4302      	orrs	r2, r0
    e3ca:	801a      	strh	r2, [r3, #0]
    e3cc:	4788      	blx	r1
    e3ce:	bd70      	pop	{r4, r5, r6, pc}
    e3d0:	2280      	movs	r2, #128	; 0x80
    e3d2:	8818      	ldrh	r0, [r3, #0]
    e3d4:	0052      	lsls	r2, r2, #1
    e3d6:	4302      	orrs	r2, r0
    e3d8:	801a      	strh	r2, [r3, #0]
    e3da:	2002      	movs	r0, #2
    e3dc:	e7f6      	b.n	e3cc <RADIO_RxDone+0x4c>
    e3de:	46c0      	nop			; (mov r8, r8)
    e3e0:	0000c0b9 	.word	0x0000c0b9
    e3e4:	0000c091 	.word	0x0000c091
    e3e8:	20002cf4 	.word	0x20002cf4
    e3ec:	0000ca3d 	.word	0x0000ca3d
    e3f0:	0000e189 	.word	0x0000e189
    e3f4:	20002eb0 	.word	0x20002eb0
    e3f8:	0000ddad 	.word	0x0000ddad

0000e3fc <RADIO_FSKPayloadReady>:
    e3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e3fe:	203f      	movs	r0, #63	; 0x3f
    e400:	4b39      	ldr	r3, [pc, #228]	; (e4e8 <RADIO_FSKPayloadReady+0xec>)
    e402:	4798      	blx	r3
    e404:	0743      	lsls	r3, r0, #29
    e406:	d559      	bpl.n	e4bc <RADIO_FSKPayloadReady+0xc0>
    e408:	4c38      	ldr	r4, [pc, #224]	; (e4ec <RADIO_FSKPayloadReady+0xf0>)
    e40a:	4d39      	ldr	r5, [pc, #228]	; (e4f0 <RADIO_FSKPayloadReady+0xf4>)
    e40c:	1d23      	adds	r3, r4, #4
    e40e:	7fdb      	ldrb	r3, [r3, #31]
    e410:	2b01      	cmp	r3, #1
    e412:	d154      	bne.n	e4be <RADIO_FSKPayloadReady+0xc2>
    e414:	2202      	movs	r2, #2
    e416:	4210      	tst	r0, r2
    e418:	d048      	beq.n	e4ac <RADIO_FSKPayloadReady+0xb0>
    e41a:	0023      	movs	r3, r4
    e41c:	332f      	adds	r3, #47	; 0x2f
    e41e:	7818      	ldrb	r0, [r3, #0]
    e420:	4e34      	ldr	r6, [pc, #208]	; (e4f4 <RADIO_FSKPayloadReady+0xf8>)
    e422:	47b0      	blx	r6
    e424:	0023      	movs	r3, r4
    e426:	332e      	adds	r3, #46	; 0x2e
    e428:	7818      	ldrb	r0, [r3, #0]
    e42a:	47b0      	blx	r6
    e42c:	4b32      	ldr	r3, [pc, #200]	; (e4f8 <RADIO_FSKPayloadReady+0xfc>)
    e42e:	4798      	blx	r3
    e430:	0022      	movs	r2, r4
    e432:	0023      	movs	r3, r4
    e434:	322c      	adds	r2, #44	; 0x2c
    e436:	3357      	adds	r3, #87	; 0x57
    e438:	7810      	ldrb	r0, [r2, #0]
    e43a:	7819      	ldrb	r1, [r3, #0]
    e43c:	4288      	cmp	r0, r1
    e43e:	d105      	bne.n	e44c <RADIO_FSKPayloadReady+0x50>
    e440:	7812      	ldrb	r2, [r2, #0]
    e442:	2a00      	cmp	r2, #0
    e444:	d002      	beq.n	e44c <RADIO_FSKPayloadReady+0x50>
    e446:	781b      	ldrb	r3, [r3, #0]
    e448:	2b00      	cmp	r3, #0
    e44a:	d118      	bne.n	e47e <RADIO_FSKPayloadReady+0x82>
    e44c:	0021      	movs	r1, r4
    e44e:	312c      	adds	r1, #44	; 0x2c
    e450:	7808      	ldrb	r0, [r1, #0]
    e452:	b2c0      	uxtb	r0, r0
    e454:	2800      	cmp	r0, #0
    e456:	d102      	bne.n	e45e <RADIO_FSKPayloadReady+0x62>
    e458:	2201      	movs	r2, #1
    e45a:	4b28      	ldr	r3, [pc, #160]	; (e4fc <RADIO_FSKPayloadReady+0x100>)
    e45c:	4798      	blx	r3
    e45e:	0026      	movs	r6, r4
    e460:	0027      	movs	r7, r4
    e462:	3657      	adds	r6, #87	; 0x57
    e464:	7830      	ldrb	r0, [r6, #0]
    e466:	372c      	adds	r7, #44	; 0x2c
    e468:	b2c0      	uxtb	r0, r0
    e46a:	2800      	cmp	r0, #0
    e46c:	d110      	bne.n	e490 <RADIO_FSKPayloadReady+0x94>
    e46e:	783a      	ldrb	r2, [r7, #0]
    e470:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    e472:	b2d2      	uxtb	r2, r2
    e474:	4b21      	ldr	r3, [pc, #132]	; (e4fc <RADIO_FSKPayloadReady+0x100>)
    e476:	4798      	blx	r3
    e478:	783b      	ldrb	r3, [r7, #0]
    e47a:	b2db      	uxtb	r3, r3
    e47c:	7033      	strb	r3, [r6, #0]
    e47e:	4b20      	ldr	r3, [pc, #128]	; (e500 <RADIO_FSKPayloadReady+0x104>)
    e480:	4798      	blx	r3
    e482:	4b20      	ldr	r3, [pc, #128]	; (e504 <RADIO_FSKPayloadReady+0x108>)
    e484:	2000      	movs	r0, #0
    e486:	4798      	blx	r3
    e488:	2308      	movs	r3, #8
    e48a:	882a      	ldrh	r2, [r5, #0]
    e48c:	4313      	orrs	r3, r2
    e48e:	e011      	b.n	e4b4 <RADIO_FSKPayloadReady+0xb8>
    e490:	783b      	ldrb	r3, [r7, #0]
    e492:	7832      	ldrb	r2, [r6, #0]
    e494:	1a9b      	subs	r3, r3, r2
    e496:	2b00      	cmp	r3, #0
    e498:	ddf1      	ble.n	e47e <RADIO_FSKPayloadReady+0x82>
    e49a:	7833      	ldrb	r3, [r6, #0]
    e49c:	783a      	ldrb	r2, [r7, #0]
    e49e:	7831      	ldrb	r1, [r6, #0]
    e4a0:	2000      	movs	r0, #0
    e4a2:	1a52      	subs	r2, r2, r1
    e4a4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    e4a6:	b2d2      	uxtb	r2, r2
    e4a8:	18c9      	adds	r1, r1, r3
    e4aa:	e7e3      	b.n	e474 <RADIO_FSKPayloadReady+0x78>
    e4ac:	2380      	movs	r3, #128	; 0x80
    e4ae:	8829      	ldrh	r1, [r5, #0]
    e4b0:	005b      	lsls	r3, r3, #1
    e4b2:	430b      	orrs	r3, r1
    e4b4:	802b      	strh	r3, [r5, #0]
    e4b6:	2002      	movs	r0, #2
    e4b8:	4b13      	ldr	r3, [pc, #76]	; (e508 <RADIO_FSKPayloadReady+0x10c>)
    e4ba:	4798      	blx	r3
    e4bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e4be:	0023      	movs	r3, r4
    e4c0:	332f      	adds	r3, #47	; 0x2f
    e4c2:	4e0c      	ldr	r6, [pc, #48]	; (e4f4 <RADIO_FSKPayloadReady+0xf8>)
    e4c4:	7818      	ldrb	r0, [r3, #0]
    e4c6:	47b0      	blx	r6
    e4c8:	0023      	movs	r3, r4
    e4ca:	332e      	adds	r3, #46	; 0x2e
    e4cc:	7818      	ldrb	r0, [r3, #0]
    e4ce:	47b0      	blx	r6
    e4d0:	4e0e      	ldr	r6, [pc, #56]	; (e50c <RADIO_FSKPayloadReady+0x110>)
    e4d2:	2201      	movs	r2, #1
    e4d4:	0031      	movs	r1, r6
    e4d6:	2000      	movs	r0, #0
    e4d8:	4f08      	ldr	r7, [pc, #32]	; (e4fc <RADIO_FSKPayloadReady+0x100>)
    e4da:	47b8      	blx	r7
    e4dc:	7832      	ldrb	r2, [r6, #0]
    e4de:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    e4e0:	b2d2      	uxtb	r2, r2
    e4e2:	2000      	movs	r0, #0
    e4e4:	47b8      	blx	r7
    e4e6:	e7cc      	b.n	e482 <RADIO_FSKPayloadReady+0x86>
    e4e8:	0000c0b9 	.word	0x0000c0b9
    e4ec:	20002cf4 	.word	0x20002cf4
    e4f0:	20002eb0 	.word	0x20002eb0
    e4f4:	0000ca3d 	.word	0x0000ca3d
    e4f8:	00004aa5 	.word	0x00004aa5
    e4fc:	0000c125 	.word	0x0000c125
    e500:	00004ae5 	.word	0x00004ae5
    e504:	0000e189 	.word	0x0000e189
    e508:	0000ddad 	.word	0x0000ddad
    e50c:	20002d20 	.word	0x20002d20

0000e510 <Radio_SetClockInput>:
    e510:	b510      	push	{r4, lr}
    e512:	4b08      	ldr	r3, [pc, #32]	; (e534 <Radio_SetClockInput+0x24>)
    e514:	3355      	adds	r3, #85	; 0x55
    e516:	781b      	ldrb	r3, [r3, #0]
    e518:	2b00      	cmp	r3, #0
    e51a:	d10a      	bne.n	e532 <Radio_SetClockInput+0x22>
    e51c:	4b06      	ldr	r3, [pc, #24]	; (e538 <Radio_SetClockInput+0x28>)
    e51e:	204b      	movs	r0, #75	; 0x4b
    e520:	4798      	blx	r3
    e522:	2110      	movs	r1, #16
    e524:	4301      	orrs	r1, r0
    e526:	4b05      	ldr	r3, [pc, #20]	; (e53c <Radio_SetClockInput+0x2c>)
    e528:	b2c9      	uxtb	r1, r1
    e52a:	204b      	movs	r0, #75	; 0x4b
    e52c:	4798      	blx	r3
    e52e:	4b04      	ldr	r3, [pc, #16]	; (e540 <Radio_SetClockInput+0x30>)
    e530:	4798      	blx	r3
    e532:	bd10      	pop	{r4, pc}
    e534:	20002cf4 	.word	0x20002cf4
    e538:	0000c0b9 	.word	0x0000c0b9
    e53c:	0000c091 	.word	0x0000c091
    e540:	0000c1c1 	.word	0x0000c1c1

0000e544 <Radio_ResetClockInput>:
    e544:	b510      	push	{r4, lr}
    e546:	4b04      	ldr	r3, [pc, #16]	; (e558 <Radio_ResetClockInput+0x14>)
    e548:	3355      	adds	r3, #85	; 0x55
    e54a:	781b      	ldrb	r3, [r3, #0]
    e54c:	2b00      	cmp	r3, #0
    e54e:	d101      	bne.n	e554 <Radio_ResetClockInput+0x10>
    e550:	4b02      	ldr	r3, [pc, #8]	; (e55c <Radio_ResetClockInput+0x18>)
    e552:	4798      	blx	r3
    e554:	bd10      	pop	{r4, pc}
    e556:	46c0      	nop			; (mov r8, r8)
    e558:	20002cf4 	.word	0x20002cf4
    e55c:	0000c1dd 	.word	0x0000c1dd

0000e560 <RADIO_InitDefaultAttributes>:
    e560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e562:	2501      	movs	r5, #1
    e564:	4b64      	ldr	r3, [pc, #400]	; (e6f8 <RADIO_InitDefaultAttributes+0x198>)
    e566:	4c65      	ldr	r4, [pc, #404]	; (e6fc <RADIO_InitDefaultAttributes+0x19c>)
    e568:	701d      	strb	r5, [r3, #0]
    e56a:	4b65      	ldr	r3, [pc, #404]	; (e700 <RADIO_InitDefaultAttributes+0x1a0>)
    e56c:	2207      	movs	r2, #7
    e56e:	6023      	str	r3, [r4, #0]
    e570:	4b64      	ldr	r3, [pc, #400]	; (e704 <RADIO_InitDefaultAttributes+0x1a4>)
    e572:	18a1      	adds	r1, r4, r2
    e574:	6063      	str	r3, [r4, #4]
    e576:	4b64      	ldr	r3, [pc, #400]	; (e708 <RADIO_InitDefaultAttributes+0x1a8>)
    e578:	0027      	movs	r7, r4
    e57a:	60a3      	str	r3, [r4, #8]
    e57c:	0023      	movs	r3, r4
    e57e:	3334      	adds	r3, #52	; 0x34
    e580:	701d      	strb	r5, [r3, #0]
    e582:	0023      	movs	r3, r4
    e584:	3336      	adds	r3, #54	; 0x36
    e586:	701a      	strb	r2, [r3, #0]
    e588:	1ce3      	adds	r3, r4, #3
    e58a:	77dd      	strb	r5, [r3, #31]
    e58c:	0023      	movs	r3, r4
    e58e:	3333      	adds	r3, #51	; 0x33
    e590:	701d      	strb	r5, [r3, #0]
    e592:	2300      	movs	r3, #0
    e594:	77cb      	strb	r3, [r1, #31]
    e596:	2108      	movs	r1, #8
    e598:	82a1      	strh	r1, [r4, #20]
    e59a:	0021      	movs	r1, r4
    e59c:	3135      	adds	r1, #53	; 0x35
    e59e:	700a      	strb	r2, [r1, #0]
    e5a0:	1d22      	adds	r2, r4, #4
    e5a2:	77d5      	strb	r5, [r2, #31]
    e5a4:	1d62      	adds	r2, r4, #5
    e5a6:	77d3      	strb	r3, [r2, #31]
    e5a8:	1da2      	adds	r2, r4, #6
    e5aa:	77d3      	strb	r3, [r2, #31]
    e5ac:	2194      	movs	r1, #148	; 0x94
    e5ae:	22c1      	movs	r2, #193	; 0xc1
    e5b0:	76a1      	strb	r1, [r4, #26]
    e5b2:	7662      	strb	r2, [r4, #25]
    e5b4:	76e2      	strb	r2, [r4, #27]
    e5b6:	3991      	subs	r1, #145	; 0x91
    e5b8:	1ca2      	adds	r2, r4, #2
    e5ba:	77d1      	strb	r1, [r2, #31]
    e5bc:	2234      	movs	r2, #52	; 0x34
    e5be:	7622      	strb	r2, [r4, #24]
    e5c0:	0022      	movs	r2, r4
    e5c2:	317d      	adds	r1, #125	; 0x7d
    e5c4:	3232      	adds	r2, #50	; 0x32
    e5c6:	7011      	strb	r1, [r2, #0]
    e5c8:	4a50      	ldr	r2, [pc, #320]	; (e70c <RADIO_InitDefaultAttributes+0x1ac>)
    e5ca:	397e      	subs	r1, #126	; 0x7e
    e5cc:	60e2      	str	r2, [r4, #12]
    e5ce:	0022      	movs	r2, r4
    e5d0:	3237      	adds	r2, #55	; 0x37
    e5d2:	7011      	strb	r1, [r2, #0]
    e5d4:	0022      	movs	r2, r4
    e5d6:	3109      	adds	r1, #9
    e5d8:	3238      	adds	r2, #56	; 0x38
    e5da:	7011      	strb	r1, [r2, #0]
    e5dc:	0022      	movs	r2, r4
    e5de:	3107      	adds	r1, #7
    e5e0:	3239      	adds	r2, #57	; 0x39
    e5e2:	7011      	strb	r1, [r2, #0]
    e5e4:	0022      	movs	r2, r4
    e5e6:	322c      	adds	r2, #44	; 0x2c
    e5e8:	7013      	strb	r3, [r2, #0]
    e5ea:	4a49      	ldr	r2, [pc, #292]	; (e710 <RADIO_InitDefaultAttributes+0x1b0>)
    e5ec:	82e3      	strh	r3, [r4, #22]
    e5ee:	62a2      	str	r2, [r4, #40]	; 0x28
    e5f0:	0022      	movs	r2, r4
    e5f2:	324c      	adds	r2, #76	; 0x4c
    e5f4:	8013      	strh	r3, [r2, #0]
    e5f6:	0022      	movs	r2, r4
    e5f8:	324e      	adds	r2, #78	; 0x4e
    e5fa:	7013      	strb	r3, [r2, #0]
    e5fc:	0022      	movs	r2, r4
    e5fe:	324f      	adds	r2, #79	; 0x4f
    e600:	7013      	strb	r3, [r2, #0]
    e602:	0022      	movs	r2, r4
    e604:	3240      	adds	r2, #64	; 0x40
    e606:	7013      	strb	r3, [r2, #0]
    e608:	0022      	movs	r2, r4
    e60a:	3241      	adds	r2, #65	; 0x41
    e60c:	7013      	strb	r3, [r2, #0]
    e60e:	0022      	movs	r2, r4
    e610:	3254      	adds	r2, #84	; 0x54
    e612:	7013      	strb	r3, [r2, #0]
    e614:	0022      	movs	r2, r4
    e616:	3255      	adds	r2, #85	; 0x55
    e618:	7015      	strb	r5, [r2, #0]
    e61a:	0022      	movs	r2, r4
    e61c:	3257      	adds	r2, #87	; 0x57
    e61e:	6463      	str	r3, [r4, #68]	; 0x44
    e620:	64a3      	str	r3, [r4, #72]	; 0x48
    e622:	87a3      	strh	r3, [r4, #60]	; 0x3c
    e624:	87e3      	strh	r3, [r4, #62]	; 0x3e
    e626:	7013      	strb	r3, [r2, #0]
    e628:	3730      	adds	r7, #48	; 0x30
    e62a:	783b      	ldrb	r3, [r7, #0]
    e62c:	2b00      	cmp	r3, #0
    e62e:	d151      	bne.n	e6d4 <RADIO_InitDefaultAttributes+0x174>
    e630:	4838      	ldr	r0, [pc, #224]	; (e714 <RADIO_InitDefaultAttributes+0x1b4>)
    e632:	4e39      	ldr	r6, [pc, #228]	; (e718 <RADIO_InitDefaultAttributes+0x1b8>)
    e634:	47b0      	blx	r6
    e636:	2808      	cmp	r0, #8
    e638:	d149      	bne.n	e6ce <RADIO_InitDefaultAttributes+0x16e>
    e63a:	4838      	ldr	r0, [pc, #224]	; (e71c <RADIO_InitDefaultAttributes+0x1bc>)
    e63c:	47b0      	blx	r6
    e63e:	2808      	cmp	r0, #8
    e640:	d145      	bne.n	e6ce <RADIO_InitDefaultAttributes+0x16e>
    e642:	4837      	ldr	r0, [pc, #220]	; (e720 <RADIO_InitDefaultAttributes+0x1c0>)
    e644:	47b0      	blx	r6
    e646:	2808      	cmp	r0, #8
    e648:	d141      	bne.n	e6ce <RADIO_InitDefaultAttributes+0x16e>
    e64a:	4836      	ldr	r0, [pc, #216]	; (e724 <RADIO_InitDefaultAttributes+0x1c4>)
    e64c:	47b0      	blx	r6
    e64e:	2808      	cmp	r0, #8
    e650:	d13d      	bne.n	e6ce <RADIO_InitDefaultAttributes+0x16e>
    e652:	703d      	strb	r5, [r7, #0]
    e654:	4b34      	ldr	r3, [pc, #208]	; (e728 <RADIO_InitDefaultAttributes+0x1c8>)
    e656:	4798      	blx	r3
    e658:	4b34      	ldr	r3, [pc, #208]	; (e72c <RADIO_InitDefaultAttributes+0x1cc>)
    e65a:	4798      	blx	r3
    e65c:	2800      	cmp	r0, #0
    e65e:	d107      	bne.n	e670 <RADIO_InitDefaultAttributes+0x110>
    e660:	0023      	movs	r3, r4
    e662:	3355      	adds	r3, #85	; 0x55
    e664:	7018      	strb	r0, [r3, #0]
    e666:	4b32      	ldr	r3, [pc, #200]	; (e730 <RADIO_InitDefaultAttributes+0x1d0>)
    e668:	4798      	blx	r3
    e66a:	0023      	movs	r3, r4
    e66c:	3354      	adds	r3, #84	; 0x54
    e66e:	7018      	strb	r0, [r3, #0]
    e670:	4b30      	ldr	r3, [pc, #192]	; (e734 <RADIO_InitDefaultAttributes+0x1d4>)
    e672:	4798      	blx	r3
    e674:	2201      	movs	r2, #1
    e676:	2100      	movs	r1, #0
    e678:	0010      	movs	r0, r2
    e67a:	4f2f      	ldr	r7, [pc, #188]	; (e738 <RADIO_InitDefaultAttributes+0x1d8>)
    e67c:	47b8      	blx	r7
    e67e:	6820      	ldr	r0, [r4, #0]
    e680:	4b2e      	ldr	r3, [pc, #184]	; (e73c <RADIO_InitDefaultAttributes+0x1dc>)
    e682:	4798      	blx	r3
    e684:	2142      	movs	r1, #66	; 0x42
    e686:	203b      	movs	r0, #59	; 0x3b
    e688:	4d2d      	ldr	r5, [pc, #180]	; (e740 <RADIO_InitDefaultAttributes+0x1e0>)
    e68a:	47a8      	blx	r5
    e68c:	203b      	movs	r0, #59	; 0x3b
    e68e:	4b2d      	ldr	r3, [pc, #180]	; (e744 <RADIO_InitDefaultAttributes+0x1e4>)
    e690:	4798      	blx	r3
    e692:	2620      	movs	r6, #32
    e694:	4006      	ands	r6, r0
    e696:	d1f9      	bne.n	e68c <RADIO_InitDefaultAttributes+0x12c>
    e698:	2123      	movs	r1, #35	; 0x23
    e69a:	200c      	movs	r0, #12
    e69c:	47a8      	blx	r5
    e69e:	21aa      	movs	r1, #170	; 0xaa
    e6a0:	201f      	movs	r0, #31
    e6a2:	47a8      	blx	r5
    e6a4:	21ff      	movs	r1, #255	; 0xff
    e6a6:	2032      	movs	r0, #50	; 0x32
    e6a8:	47a8      	blx	r5
    e6aa:	2140      	movs	r1, #64	; 0x40
    e6ac:	2031      	movs	r0, #49	; 0x31
    e6ae:	47a8      	blx	r5
    e6b0:	2201      	movs	r2, #1
    e6b2:	0030      	movs	r0, r6
    e6b4:	0011      	movs	r1, r2
    e6b6:	47b8      	blx	r7
    e6b8:	21ff      	movs	r1, #255	; 0xff
    e6ba:	2023      	movs	r0, #35	; 0x23
    e6bc:	47a8      	blx	r5
    e6be:	4b21      	ldr	r3, [pc, #132]	; (e744 <RADIO_InitDefaultAttributes+0x1e4>)
    e6c0:	2042      	movs	r0, #66	; 0x42
    e6c2:	4798      	blx	r3
    e6c4:	3431      	adds	r4, #49	; 0x31
    e6c6:	4b20      	ldr	r3, [pc, #128]	; (e748 <RADIO_InitDefaultAttributes+0x1e8>)
    e6c8:	7020      	strb	r0, [r4, #0]
    e6ca:	4798      	blx	r3
    e6cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e6ce:	4b1f      	ldr	r3, [pc, #124]	; (e74c <RADIO_InitDefaultAttributes+0x1ec>)
    e6d0:	4798      	blx	r3
    e6d2:	e7bf      	b.n	e654 <RADIO_InitDefaultAttributes+0xf4>
    e6d4:	0023      	movs	r3, r4
    e6d6:	332d      	adds	r3, #45	; 0x2d
    e6d8:	4d1d      	ldr	r5, [pc, #116]	; (e750 <RADIO_InitDefaultAttributes+0x1f0>)
    e6da:	7818      	ldrb	r0, [r3, #0]
    e6dc:	47a8      	blx	r5
    e6de:	0023      	movs	r3, r4
    e6e0:	332e      	adds	r3, #46	; 0x2e
    e6e2:	7818      	ldrb	r0, [r3, #0]
    e6e4:	47a8      	blx	r5
    e6e6:	0023      	movs	r3, r4
    e6e8:	332f      	adds	r3, #47	; 0x2f
    e6ea:	7818      	ldrb	r0, [r3, #0]
    e6ec:	47a8      	blx	r5
    e6ee:	0023      	movs	r3, r4
    e6f0:	3350      	adds	r3, #80	; 0x50
    e6f2:	7818      	ldrb	r0, [r3, #0]
    e6f4:	47a8      	blx	r5
    e6f6:	e7ad      	b.n	e654 <RADIO_InitDefaultAttributes+0xf4>
    e6f8:	20002eb3 	.word	0x20002eb3
    e6fc:	20002cf4 	.word	0x20002cf4
    e700:	33be27a0 	.word	0x33be27a0
    e704:	000061a8 	.word	0x000061a8
    e708:	0000c350 	.word	0x0000c350
    e70c:	00003a98 	.word	0x00003a98
    e710:	20002db0 	.word	0x20002db0
    e714:	20002d21 	.word	0x20002d21
    e718:	0000c705 	.word	0x0000c705
    e71c:	20002d22 	.word	0x20002d22
    e720:	20002d23 	.word	0x20002d23
    e724:	20002d44 	.word	0x20002d44
    e728:	0000c051 	.word	0x0000c051
    e72c:	0000c1bd 	.word	0x0000c1bd
    e730:	0000c1b9 	.word	0x0000c1b9
    e734:	0000e511 	.word	0x0000e511
    e738:	0000cd4d 	.word	0x0000cd4d
    e73c:	0000d7a5 	.word	0x0000d7a5
    e740:	0000c091 	.word	0x0000c091
    e744:	0000c0b9 	.word	0x0000c0b9
    e748:	0000e545 	.word	0x0000e545
    e74c:	0000c649 	.word	0x0000c649
    e750:	0000ca3d 	.word	0x0000ca3d

0000e754 <RADIO_Receive>:
    e754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e756:	7803      	ldrb	r3, [r0, #0]
    e758:	0006      	movs	r6, r0
    e75a:	4d24      	ldr	r5, [pc, #144]	; (e7ec <RADIO_Receive+0x98>)
    e75c:	2b00      	cmp	r3, #0
    e75e:	d11d      	bne.n	e79c <RADIO_Receive+0x48>
    e760:	782b      	ldrb	r3, [r5, #0]
    e762:	2004      	movs	r0, #4
    e764:	2b01      	cmp	r3, #1
    e766:	d118      	bne.n	e79a <RADIO_Receive+0x46>
    e768:	4c21      	ldr	r4, [pc, #132]	; (e7f0 <RADIO_Receive+0x9c>)
    e76a:	4f22      	ldr	r7, [pc, #136]	; (e7f4 <RADIO_Receive+0xa0>)
    e76c:	0023      	movs	r3, r4
    e76e:	332f      	adds	r3, #47	; 0x2f
    e770:	7818      	ldrb	r0, [r3, #0]
    e772:	47b8      	blx	r7
    e774:	0023      	movs	r3, r4
    e776:	3334      	adds	r3, #52	; 0x34
    e778:	781b      	ldrb	r3, [r3, #0]
    e77a:	2b00      	cmp	r3, #0
    e77c:	d102      	bne.n	e784 <RADIO_Receive+0x30>
    e77e:	342e      	adds	r4, #46	; 0x2e
    e780:	7820      	ldrb	r0, [r4, #0]
    e782:	47b8      	blx	r7
    e784:	8872      	ldrh	r2, [r6, #2]
    e786:	4b1c      	ldr	r3, [pc, #112]	; (e7f8 <RADIO_Receive+0xa4>)
    e788:	2008      	movs	r0, #8
    e78a:	801a      	strh	r2, [r3, #0]
    e78c:	2304      	movs	r3, #4
    e78e:	702b      	strb	r3, [r5, #0]
    e790:	4b1a      	ldr	r3, [pc, #104]	; (e7fc <RADIO_Receive+0xa8>)
    e792:	4798      	blx	r3
    e794:	4b1a      	ldr	r3, [pc, #104]	; (e800 <RADIO_Receive+0xac>)
    e796:	4798      	blx	r3
    e798:	2000      	movs	r0, #0
    e79a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e79c:	782b      	ldrb	r3, [r5, #0]
    e79e:	2000      	movs	r0, #0
    e7a0:	2b01      	cmp	r3, #1
    e7a2:	d0fa      	beq.n	e79a <RADIO_Receive+0x46>
    e7a4:	782b      	ldrb	r3, [r5, #0]
    e7a6:	3003      	adds	r0, #3
    e7a8:	2b04      	cmp	r3, #4
    e7aa:	d1f6      	bne.n	e79a <RADIO_Receive+0x46>
    e7ac:	4c10      	ldr	r4, [pc, #64]	; (e7f0 <RADIO_Receive+0x9c>)
    e7ae:	4e11      	ldr	r6, [pc, #68]	; (e7f4 <RADIO_Receive+0xa0>)
    e7b0:	0023      	movs	r3, r4
    e7b2:	332f      	adds	r3, #47	; 0x2f
    e7b4:	7818      	ldrb	r0, [r3, #0]
    e7b6:	47b0      	blx	r6
    e7b8:	0023      	movs	r3, r4
    e7ba:	3334      	adds	r3, #52	; 0x34
    e7bc:	781b      	ldrb	r3, [r3, #0]
    e7be:	2b00      	cmp	r3, #0
    e7c0:	d103      	bne.n	e7ca <RADIO_Receive+0x76>
    e7c2:	0023      	movs	r3, r4
    e7c4:	332e      	adds	r3, #46	; 0x2e
    e7c6:	7818      	ldrb	r0, [r3, #0]
    e7c8:	47b0      	blx	r6
    e7ca:	2200      	movs	r2, #0
    e7cc:	3434      	adds	r4, #52	; 0x34
    e7ce:	7821      	ldrb	r1, [r4, #0]
    e7d0:	0010      	movs	r0, r2
    e7d2:	4b0c      	ldr	r3, [pc, #48]	; (e804 <RADIO_Receive+0xb0>)
    e7d4:	4798      	blx	r3
    e7d6:	4b0c      	ldr	r3, [pc, #48]	; (e808 <RADIO_Receive+0xb4>)
    e7d8:	4798      	blx	r3
    e7da:	2301      	movs	r3, #1
    e7dc:	2008      	movs	r0, #8
    e7de:	4c0b      	ldr	r4, [pc, #44]	; (e80c <RADIO_Receive+0xb8>)
    e7e0:	702b      	strb	r3, [r5, #0]
    e7e2:	47a0      	blx	r4
    e7e4:	2002      	movs	r0, #2
    e7e6:	47a0      	blx	r4
    e7e8:	e7d6      	b.n	e798 <RADIO_Receive+0x44>
    e7ea:	46c0      	nop			; (mov r8, r8)
    e7ec:	20002eb3 	.word	0x20002eb3
    e7f0:	20002cf4 	.word	0x20002cf4
    e7f4:	0000ca3d 	.word	0x0000ca3d
    e7f8:	20002058 	.word	0x20002058
    e7fc:	0000ddad 	.word	0x0000ddad
    e800:	0000e511 	.word	0x0000e511
    e804:	0000cd4d 	.word	0x0000cd4d
    e808:	0000e545 	.word	0x0000e545
    e80c:	0000ddd9 	.word	0x0000ddd9

0000e810 <RADIO_TxHandler>:
    e810:	b5f0      	push	{r4, r5, r6, r7, lr}
    e812:	4d5d      	ldr	r5, [pc, #372]	; (e988 <RADIO_TxHandler+0x178>)
    e814:	b087      	sub	sp, #28
    e816:	47a8      	blx	r5
    e818:	2001      	movs	r0, #1
    e81a:	4c5c      	ldr	r4, [pc, #368]	; (e98c <RADIO_TxHandler+0x17c>)
    e81c:	47a0      	blx	r4
    e81e:	4f5c      	ldr	r7, [pc, #368]	; (e990 <RADIO_TxHandler+0x180>)
    e820:	003b      	movs	r3, r7
    e822:	332d      	adds	r3, #45	; 0x2d
    e824:	7818      	ldrb	r0, [r3, #0]
    e826:	4b5b      	ldr	r3, [pc, #364]	; (e994 <RADIO_TxHandler+0x184>)
    e828:	4798      	blx	r3
    e82a:	003b      	movs	r3, r7
    e82c:	3341      	adds	r3, #65	; 0x41
    e82e:	781b      	ldrb	r3, [r3, #0]
    e830:	2b00      	cmp	r3, #0
    e832:	d035      	beq.n	e8a0 <RADIO_TxHandler+0x90>
    e834:	8fbe      	ldrh	r6, [r7, #60]	; 0x3c
    e836:	47a8      	blx	r5
    e838:	2000      	movs	r0, #0
    e83a:	47a0      	blx	r4
    e83c:	6838      	ldr	r0, [r7, #0]
    e83e:	4b56      	ldr	r3, [pc, #344]	; (e998 <RADIO_TxHandler+0x188>)
    e840:	4798      	blx	r3
    e842:	003b      	movs	r3, r7
    e844:	2400      	movs	r4, #0
    e846:	334c      	adds	r3, #76	; 0x4c
    e848:	801c      	strh	r4, [r3, #0]
    e84a:	2201      	movs	r2, #1
    e84c:	0021      	movs	r1, r4
    e84e:	0020      	movs	r0, r4
    e850:	4b52      	ldr	r3, [pc, #328]	; (e99c <RADIO_TxHandler+0x18c>)
    e852:	4798      	blx	r3
    e854:	2109      	movs	r1, #9
    e856:	2012      	movs	r0, #18
    e858:	4b51      	ldr	r3, [pc, #324]	; (e9a0 <RADIO_TxHandler+0x190>)
    e85a:	4798      	blx	r3
    e85c:	2201      	movs	r2, #1
    e85e:	0021      	movs	r1, r4
    e860:	2005      	movs	r0, #5
    e862:	4b4e      	ldr	r3, [pc, #312]	; (e99c <RADIO_TxHandler+0x18c>)
    e864:	4798      	blx	r3
    e866:	4b4f      	ldr	r3, [pc, #316]	; (e9a4 <RADIO_TxHandler+0x194>)
    e868:	4798      	blx	r3
    e86a:	22fa      	movs	r2, #250	; 0xfa
    e86c:	2300      	movs	r3, #0
    e86e:	0092      	lsls	r2, r2, #2
    e870:	4c4d      	ldr	r4, [pc, #308]	; (e9a8 <RADIO_TxHandler+0x198>)
    e872:	47a0      	blx	r4
    e874:	4b4d      	ldr	r3, [pc, #308]	; (e9ac <RADIO_TxHandler+0x19c>)
    e876:	3601      	adds	r6, #1
    e878:	6018      	str	r0, [r3, #0]
    e87a:	6059      	str	r1, [r3, #4]
    e87c:	b2b6      	uxth	r6, r6
    e87e:	4b49      	ldr	r3, [pc, #292]	; (e9a4 <RADIO_TxHandler+0x194>)
    e880:	4798      	blx	r3
    e882:	22fa      	movs	r2, #250	; 0xfa
    e884:	2300      	movs	r3, #0
    e886:	0092      	lsls	r2, r2, #2
    e888:	4d47      	ldr	r5, [pc, #284]	; (e9a8 <RADIO_TxHandler+0x198>)
    e88a:	47a8      	blx	r5
    e88c:	4b47      	ldr	r3, [pc, #284]	; (e9ac <RADIO_TxHandler+0x19c>)
    e88e:	2400      	movs	r4, #0
    e890:	681a      	ldr	r2, [r3, #0]
    e892:	685b      	ldr	r3, [r3, #4]
    e894:	1a80      	subs	r0, r0, r2
    e896:	4199      	sbcs	r1, r3
    e898:	428c      	cmp	r4, r1
    e89a:	d101      	bne.n	e8a0 <RADIO_TxHandler+0x90>
    e89c:	4286      	cmp	r6, r0
    e89e:	d842      	bhi.n	e926 <RADIO_TxHandler+0x116>
    e8a0:	4b43      	ldr	r3, [pc, #268]	; (e9b0 <RADIO_TxHandler+0x1a0>)
    e8a2:	2004      	movs	r0, #4
    e8a4:	4798      	blx	r3
    e8a6:	4b43      	ldr	r3, [pc, #268]	; (e9b4 <RADIO_TxHandler+0x1a4>)
    e8a8:	4c3d      	ldr	r4, [pc, #244]	; (e9a0 <RADIO_TxHandler+0x190>)
    e8aa:	781e      	ldrb	r6, [r3, #0]
    e8ac:	4d42      	ldr	r5, [pc, #264]	; (e9b8 <RADIO_TxHandler+0x1a8>)
    e8ae:	2e01      	cmp	r6, #1
    e8b0:	d158      	bne.n	e964 <RADIO_TxHandler+0x154>
    e8b2:	7829      	ldrb	r1, [r5, #0]
    e8b4:	2022      	movs	r0, #34	; 0x22
    e8b6:	47a0      	blx	r4
    e8b8:	4b40      	ldr	r3, [pc, #256]	; (e9bc <RADIO_TxHandler+0x1ac>)
    e8ba:	200a      	movs	r0, #10
    e8bc:	4798      	blx	r3
    e8be:	21f0      	movs	r1, #240	; 0xf0
    e8c0:	4008      	ands	r0, r1
    e8c2:	39e8      	subs	r1, #232	; 0xe8
    e8c4:	4301      	orrs	r1, r0
    e8c6:	200a      	movs	r0, #10
    e8c8:	47a0      	blx	r4
    e8ca:	2140      	movs	r1, #64	; 0x40
    e8cc:	0008      	movs	r0, r1
    e8ce:	47a0      	blx	r4
    e8d0:	2100      	movs	r1, #0
    e8d2:	2041      	movs	r0, #65	; 0x41
    e8d4:	47a0      	blx	r4
    e8d6:	4b37      	ldr	r3, [pc, #220]	; (e9b4 <RADIO_TxHandler+0x1a4>)
    e8d8:	0032      	movs	r2, r6
    e8da:	7819      	ldrb	r1, [r3, #0]
    e8dc:	0030      	movs	r0, r6
    e8de:	4b2f      	ldr	r3, [pc, #188]	; (e99c <RADIO_TxHandler+0x18c>)
    e8e0:	4798      	blx	r3
    e8e2:	4b37      	ldr	r3, [pc, #220]	; (e9c0 <RADIO_TxHandler+0x1b0>)
    e8e4:	782a      	ldrb	r2, [r5, #0]
    e8e6:	6819      	ldr	r1, [r3, #0]
    e8e8:	2000      	movs	r0, #0
    e8ea:	4b36      	ldr	r3, [pc, #216]	; (e9c4 <RADIO_TxHandler+0x1b4>)
    e8ec:	4798      	blx	r3
    e8ee:	003b      	movs	r3, r7
    e8f0:	3334      	adds	r3, #52	; 0x34
    e8f2:	7819      	ldrb	r1, [r3, #0]
    e8f4:	2200      	movs	r2, #0
    e8f6:	2003      	movs	r0, #3
    e8f8:	4b28      	ldr	r3, [pc, #160]	; (e99c <RADIO_TxHandler+0x18c>)
    e8fa:	4798      	blx	r3
    e8fc:	4b29      	ldr	r3, [pc, #164]	; (e9a4 <RADIO_TxHandler+0x194>)
    e8fe:	4798      	blx	r3
    e900:	4b31      	ldr	r3, [pc, #196]	; (e9c8 <RADIO_TxHandler+0x1b8>)
    e902:	6018      	str	r0, [r3, #0]
    e904:	6059      	str	r1, [r3, #4]
    e906:	68fb      	ldr	r3, [r7, #12]
    e908:	2b00      	cmp	r3, #0
    e90a:	d009      	beq.n	e920 <RADIO_TxHandler+0x110>
    e90c:	21fa      	movs	r1, #250	; 0xfa
    e90e:	2200      	movs	r2, #0
    e910:	0089      	lsls	r1, r1, #2
    e912:	372f      	adds	r7, #47	; 0x2f
    e914:	4359      	muls	r1, r3
    e916:	7838      	ldrb	r0, [r7, #0]
    e918:	4b2c      	ldr	r3, [pc, #176]	; (e9cc <RADIO_TxHandler+0x1bc>)
    e91a:	9200      	str	r2, [sp, #0]
    e91c:	4c2c      	ldr	r4, [pc, #176]	; (e9d0 <RADIO_TxHandler+0x1c0>)
    e91e:	47a0      	blx	r4
    e920:	2000      	movs	r0, #0
    e922:	b007      	add	sp, #28
    e924:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e926:	4d2b      	ldr	r5, [pc, #172]	; (e9d4 <RADIO_TxHandler+0x1c4>)
    e928:	4b2b      	ldr	r3, [pc, #172]	; (e9d8 <RADIO_TxHandler+0x1c8>)
    e92a:	0028      	movs	r0, r5
    e92c:	4798      	blx	r3
    e92e:	233e      	movs	r3, #62	; 0x3e
    e930:	5efa      	ldrsh	r2, [r7, r3]
    e932:	2100      	movs	r1, #0
    e934:	5e6b      	ldrsh	r3, [r5, r1]
    e936:	429a      	cmp	r2, r3
    e938:	daa1      	bge.n	e87e <RADIO_TxHandler+0x6e>
    e93a:	0020      	movs	r0, r4
    e93c:	4b27      	ldr	r3, [pc, #156]	; (e9dc <RADIO_TxHandler+0x1cc>)
    e93e:	4798      	blx	r3
    e940:	4b27      	ldr	r3, [pc, #156]	; (e9e0 <RADIO_TxHandler+0x1d0>)
    e942:	4798      	blx	r3
    e944:	2307      	movs	r3, #7
    e946:	2201      	movs	r2, #1
    e948:	a903      	add	r1, sp, #12
    e94a:	700b      	strb	r3, [r1, #0]
    e94c:	4b25      	ldr	r3, [pc, #148]	; (e9e4 <RADIO_TxHandler+0x1d4>)
    e94e:	701a      	strb	r2, [r3, #0]
    e950:	4b25      	ldr	r3, [pc, #148]	; (e9e8 <RADIO_TxHandler+0x1d8>)
    e952:	781b      	ldrb	r3, [r3, #0]
    e954:	079b      	lsls	r3, r3, #30
    e956:	d5a3      	bpl.n	e8a0 <RADIO_TxHandler+0x90>
    e958:	693b      	ldr	r3, [r7, #16]
    e95a:	2b00      	cmp	r3, #0
    e95c:	d0a0      	beq.n	e8a0 <RADIO_TxHandler+0x90>
    e95e:	2002      	movs	r0, #2
    e960:	4798      	blx	r3
    e962:	e79d      	b.n	e8a0 <RADIO_TxHandler+0x90>
    e964:	2100      	movs	r1, #0
    e966:	2040      	movs	r0, #64	; 0x40
    e968:	47a0      	blx	r4
    e96a:	2100      	movs	r1, #0
    e96c:	2041      	movs	r0, #65	; 0x41
    e96e:	47a0      	blx	r4
    e970:	003b      	movs	r3, r7
    e972:	2000      	movs	r0, #0
    e974:	3357      	adds	r3, #87	; 0x57
    e976:	7829      	ldrb	r1, [r5, #0]
    e978:	7018      	strb	r0, [r3, #0]
    e97a:	47a0      	blx	r4
    e97c:	4b10      	ldr	r3, [pc, #64]	; (e9c0 <RADIO_TxHandler+0x1b0>)
    e97e:	7829      	ldrb	r1, [r5, #0]
    e980:	6818      	ldr	r0, [r3, #0]
    e982:	4b1a      	ldr	r3, [pc, #104]	; (e9ec <RADIO_TxHandler+0x1dc>)
    e984:	4798      	blx	r3
    e986:	e7b2      	b.n	e8ee <RADIO_TxHandler+0xde>
    e988:	0000e511 	.word	0x0000e511
    e98c:	0000e061 	.word	0x0000e061
    e990:	20002cf4 	.word	0x20002cf4
    e994:	0000ca3d 	.word	0x0000ca3d
    e998:	0000d7a5 	.word	0x0000d7a5
    e99c:	0000cd4d 	.word	0x0000cd4d
    e9a0:	0000c091 	.word	0x0000c091
    e9a4:	0000c6e1 	.word	0x0000c6e1
    e9a8:	00011edd 	.word	0x00011edd
    e9ac:	20002050 	.word	0x20002050
    e9b0:	0000d7ed 	.word	0x0000d7ed
    e9b4:	20002d28 	.word	0x20002d28
    e9b8:	2000206c 	.word	0x2000206c
    e9bc:	0000c0b9 	.word	0x0000c0b9
    e9c0:	20002068 	.word	0x20002068
    e9c4:	0000c0e5 	.word	0x0000c0e5
    e9c8:	20002060 	.word	0x20002060
    e9cc:	0000e1bd 	.word	0x0000e1bd
    e9d0:	0000c739 	.word	0x0000c739
    e9d4:	2000204e 	.word	0x2000204e
    e9d8:	0000cf69 	.word	0x0000cf69
    e9dc:	0000e189 	.word	0x0000e189
    e9e0:	0000e545 	.word	0x0000e545
    e9e4:	20002eb3 	.word	0x20002eb3
    e9e8:	20002eb2 	.word	0x20002eb2
    e9ec:	0000dedd 	.word	0x0000dedd

0000e9f0 <RADIO_TxDoneHandler>:
    e9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e9f2:	4b35      	ldr	r3, [pc, #212]	; (eac8 <RADIO_TxDoneHandler+0xd8>)
    e9f4:	b087      	sub	sp, #28
    e9f6:	881a      	ldrh	r2, [r3, #0]
    e9f8:	06d2      	lsls	r2, r2, #27
    e9fa:	0fd2      	lsrs	r2, r2, #31
    e9fc:	9200      	str	r2, [sp, #0]
    e9fe:	466a      	mov	r2, sp
    ea00:	7810      	ldrb	r0, [r2, #0]
    ea02:	881a      	ldrh	r2, [r3, #0]
    ea04:	2801      	cmp	r0, #1
    ea06:	d12b      	bne.n	ea60 <RADIO_TxDoneHandler+0x70>
    ea08:	4c30      	ldr	r4, [pc, #192]	; (eacc <RADIO_TxDoneHandler+0xdc>)
    ea0a:	2110      	movs	r1, #16
    ea0c:	0027      	movs	r7, r4
    ea0e:	2500      	movs	r5, #0
    ea10:	438a      	bics	r2, r1
    ea12:	801a      	strh	r2, [r3, #0]
    ea14:	3734      	adds	r7, #52	; 0x34
    ea16:	0002      	movs	r2, r0
    ea18:	7839      	ldrb	r1, [r7, #0]
    ea1a:	4b2d      	ldr	r3, [pc, #180]	; (ead0 <RADIO_TxDoneHandler+0xe0>)
    ea1c:	4798      	blx	r3
    ea1e:	68e3      	ldr	r3, [r4, #12]
    ea20:	ae03      	add	r6, sp, #12
    ea22:	9304      	str	r3, [sp, #16]
    ea24:	7035      	strb	r5, [r6, #0]
    ea26:	002a      	movs	r2, r5
    ea28:	4b29      	ldr	r3, [pc, #164]	; (ead0 <RADIO_TxDoneHandler+0xe0>)
    ea2a:	7839      	ldrb	r1, [r7, #0]
    ea2c:	0028      	movs	r0, r5
    ea2e:	4798      	blx	r3
    ea30:	466a      	mov	r2, sp
    ea32:	4b28      	ldr	r3, [pc, #160]	; (ead4 <RADIO_TxDoneHandler+0xe4>)
    ea34:	7812      	ldrb	r2, [r2, #0]
    ea36:	701a      	strb	r2, [r3, #0]
    ea38:	0023      	movs	r3, r4
    ea3a:	3357      	adds	r3, #87	; 0x57
    ea3c:	701d      	strb	r5, [r3, #0]
    ea3e:	4b26      	ldr	r3, [pc, #152]	; (ead8 <RADIO_TxDoneHandler+0xe8>)
    ea40:	781b      	ldrb	r3, [r3, #0]
    ea42:	075b      	lsls	r3, r3, #29
    ea44:	d505      	bpl.n	ea52 <RADIO_TxDoneHandler+0x62>
    ea46:	6923      	ldr	r3, [r4, #16]
    ea48:	42ab      	cmp	r3, r5
    ea4a:	d002      	beq.n	ea52 <RADIO_TxDoneHandler+0x62>
    ea4c:	0031      	movs	r1, r6
    ea4e:	2004      	movs	r0, #4
    ea50:	4798      	blx	r3
    ea52:	4b22      	ldr	r3, [pc, #136]	; (eadc <RADIO_TxDoneHandler+0xec>)
    ea54:	4798      	blx	r3
    ea56:	4b22      	ldr	r3, [pc, #136]	; (eae0 <RADIO_TxDoneHandler+0xf0>)
    ea58:	4798      	blx	r3
    ea5a:	2000      	movs	r0, #0
    ea5c:	b007      	add	sp, #28
    ea5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ea60:	07d2      	lsls	r2, r2, #31
    ea62:	d402      	bmi.n	ea6a <RADIO_TxDoneHandler+0x7a>
    ea64:	881a      	ldrh	r2, [r3, #0]
    ea66:	0752      	lsls	r2, r2, #29
    ea68:	d527      	bpl.n	eaba <RADIO_TxDoneHandler+0xca>
    ea6a:	2601      	movs	r6, #1
    ea6c:	2104      	movs	r1, #4
    ea6e:	881a      	ldrh	r2, [r3, #0]
    ea70:	4f16      	ldr	r7, [pc, #88]	; (eacc <RADIO_TxDoneHandler+0xdc>)
    ea72:	43b2      	bics	r2, r6
    ea74:	801a      	strh	r2, [r3, #0]
    ea76:	881a      	ldrh	r2, [r3, #0]
    ea78:	2400      	movs	r4, #0
    ea7a:	438a      	bics	r2, r1
    ea7c:	801a      	strh	r2, [r3, #0]
    ea7e:	4b19      	ldr	r3, [pc, #100]	; (eae4 <RADIO_TxDoneHandler+0xf4>)
    ea80:	ad03      	add	r5, sp, #12
    ea82:	681b      	ldr	r3, [r3, #0]
    ea84:	702c      	strb	r4, [r5, #0]
    ea86:	9304      	str	r3, [sp, #16]
    ea88:	003b      	movs	r3, r7
    ea8a:	3334      	adds	r3, #52	; 0x34
    ea8c:	7819      	ldrb	r1, [r3, #0]
    ea8e:	0022      	movs	r2, r4
    ea90:	0020      	movs	r0, r4
    ea92:	4b0f      	ldr	r3, [pc, #60]	; (ead0 <RADIO_TxDoneHandler+0xe0>)
    ea94:	4798      	blx	r3
    ea96:	4b14      	ldr	r3, [pc, #80]	; (eae8 <RADIO_TxDoneHandler+0xf8>)
    ea98:	4798      	blx	r3
    ea9a:	4b0e      	ldr	r3, [pc, #56]	; (ead4 <RADIO_TxDoneHandler+0xe4>)
    ea9c:	701e      	strb	r6, [r3, #0]
    ea9e:	003b      	movs	r3, r7
    eaa0:	3357      	adds	r3, #87	; 0x57
    eaa2:	701c      	strb	r4, [r3, #0]
    eaa4:	4b0c      	ldr	r3, [pc, #48]	; (ead8 <RADIO_TxDoneHandler+0xe8>)
    eaa6:	781b      	ldrb	r3, [r3, #0]
    eaa8:	079b      	lsls	r3, r3, #30
    eaaa:	d5d6      	bpl.n	ea5a <RADIO_TxDoneHandler+0x6a>
    eaac:	693b      	ldr	r3, [r7, #16]
    eaae:	42a3      	cmp	r3, r4
    eab0:	d0d3      	beq.n	ea5a <RADIO_TxDoneHandler+0x6a>
    eab2:	0029      	movs	r1, r5
    eab4:	2002      	movs	r0, #2
    eab6:	4798      	blx	r3
    eab8:	e7cf      	b.n	ea5a <RADIO_TxDoneHandler+0x6a>
    eaba:	881b      	ldrh	r3, [r3, #0]
    eabc:	059b      	lsls	r3, r3, #22
    eabe:	d5cc      	bpl.n	ea5a <RADIO_TxDoneHandler+0x6a>
    eac0:	4b0a      	ldr	r3, [pc, #40]	; (eaec <RADIO_TxDoneHandler+0xfc>)
    eac2:	4798      	blx	r3
    eac4:	e7c9      	b.n	ea5a <RADIO_TxDoneHandler+0x6a>
    eac6:	46c0      	nop			; (mov r8, r8)
    eac8:	20002eb0 	.word	0x20002eb0
    eacc:	20002cf4 	.word	0x20002cf4
    ead0:	0000cd4d 	.word	0x0000cd4d
    ead4:	20002eb3 	.word	0x20002eb3
    ead8:	20002eb2 	.word	0x20002eb2
    eadc:	0000c051 	.word	0x0000c051
    eae0:	0000e561 	.word	0x0000e561
    eae4:	20002060 	.word	0x20002060
    eae8:	0000e545 	.word	0x0000e545
    eaec:	00011951 	.word	0x00011951

0000eaf0 <RADIO_RxDoneHandler>:
    eaf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    eaf2:	4b95      	ldr	r3, [pc, #596]	; (ed48 <RADIO_RxDoneHandler+0x258>)
    eaf4:	b085      	sub	sp, #20
    eaf6:	881c      	ldrh	r4, [r3, #0]
    eaf8:	881a      	ldrh	r2, [r3, #0]
    eafa:	06a4      	lsls	r4, r4, #26
    eafc:	0fe4      	lsrs	r4, r4, #31
    eafe:	b2e0      	uxtb	r0, r4
    eb00:	2801      	cmp	r0, #1
    eb02:	d126      	bne.n	eb52 <RADIO_RxDoneHandler+0x62>
    eb04:	4d91      	ldr	r5, [pc, #580]	; (ed4c <RADIO_RxDoneHandler+0x25c>)
    eb06:	2120      	movs	r1, #32
    eb08:	002e      	movs	r6, r5
    eb0a:	438a      	bics	r2, r1
    eb0c:	801a      	strh	r2, [r3, #0]
    eb0e:	3634      	adds	r6, #52	; 0x34
    eb10:	0002      	movs	r2, r0
    eb12:	7831      	ldrb	r1, [r6, #0]
    eb14:	4f8e      	ldr	r7, [pc, #568]	; (ed50 <RADIO_RxDoneHandler+0x260>)
    eb16:	47b8      	blx	r7
    eb18:	2200      	movs	r2, #0
    eb1a:	7831      	ldrb	r1, [r6, #0]
    eb1c:	0010      	movs	r0, r2
    eb1e:	47b8      	blx	r7
    eb20:	4b8c      	ldr	r3, [pc, #560]	; (ed54 <RADIO_RxDoneHandler+0x264>)
    eb22:	4798      	blx	r3
    eb24:	4b8c      	ldr	r3, [pc, #560]	; (ed58 <RADIO_RxDoneHandler+0x268>)
    eb26:	002a      	movs	r2, r5
    eb28:	701c      	strb	r4, [r3, #0]
    eb2a:	2300      	movs	r3, #0
    eb2c:	322c      	adds	r2, #44	; 0x2c
    eb2e:	7013      	strb	r3, [r2, #0]
    eb30:	002a      	movs	r2, r5
    eb32:	a901      	add	r1, sp, #4
    eb34:	3257      	adds	r2, #87	; 0x57
    eb36:	7013      	strb	r3, [r2, #0]
    eb38:	700b      	strb	r3, [r1, #0]
    eb3a:	4b88      	ldr	r3, [pc, #544]	; (ed5c <RADIO_RxDoneHandler+0x26c>)
    eb3c:	781b      	ldrb	r3, [r3, #0]
    eb3e:	071b      	lsls	r3, r3, #28
    eb40:	d504      	bpl.n	eb4c <RADIO_RxDoneHandler+0x5c>
    eb42:	692b      	ldr	r3, [r5, #16]
    eb44:	2008      	movs	r0, #8
    eb46:	2b00      	cmp	r3, #0
    eb48:	d000      	beq.n	eb4c <RADIO_RxDoneHandler+0x5c>
    eb4a:	e084      	b.n	ec56 <RADIO_RxDoneHandler+0x166>
    eb4c:	2000      	movs	r0, #0
    eb4e:	b005      	add	sp, #20
    eb50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eb52:	0652      	lsls	r2, r2, #25
    eb54:	d402      	bmi.n	eb5c <RADIO_RxDoneHandler+0x6c>
    eb56:	881a      	ldrh	r2, [r3, #0]
    eb58:	0612      	lsls	r2, r2, #24
    eb5a:	d523      	bpl.n	eba4 <RADIO_RxDoneHandler+0xb4>
    eb5c:	2140      	movs	r1, #64	; 0x40
    eb5e:	881a      	ldrh	r2, [r3, #0]
    eb60:	4c7a      	ldr	r4, [pc, #488]	; (ed4c <RADIO_RxDoneHandler+0x25c>)
    eb62:	438a      	bics	r2, r1
    eb64:	801a      	strh	r2, [r3, #0]
    eb66:	881a      	ldrh	r2, [r3, #0]
    eb68:	1849      	adds	r1, r1, r1
    eb6a:	438a      	bics	r2, r1
    eb6c:	801a      	strh	r2, [r3, #0]
    eb6e:	0023      	movs	r3, r4
    eb70:	2200      	movs	r2, #0
    eb72:	3334      	adds	r3, #52	; 0x34
    eb74:	7819      	ldrb	r1, [r3, #0]
    eb76:	0010      	movs	r0, r2
    eb78:	4b75      	ldr	r3, [pc, #468]	; (ed50 <RADIO_RxDoneHandler+0x260>)
    eb7a:	4798      	blx	r3
    eb7c:	4b75      	ldr	r3, [pc, #468]	; (ed54 <RADIO_RxDoneHandler+0x264>)
    eb7e:	4798      	blx	r3
    eb80:	2201      	movs	r2, #1
    eb82:	4b75      	ldr	r3, [pc, #468]	; (ed58 <RADIO_RxDoneHandler+0x268>)
    eb84:	a901      	add	r1, sp, #4
    eb86:	701a      	strb	r2, [r3, #0]
    eb88:	0022      	movs	r2, r4
    eb8a:	2300      	movs	r3, #0
    eb8c:	322c      	adds	r2, #44	; 0x2c
    eb8e:	7013      	strb	r3, [r2, #0]
    eb90:	0022      	movs	r2, r4
    eb92:	3257      	adds	r2, #87	; 0x57
    eb94:	7013      	strb	r3, [r2, #0]
    eb96:	700b      	strb	r3, [r1, #0]
    eb98:	4b70      	ldr	r3, [pc, #448]	; (ed5c <RADIO_RxDoneHandler+0x26c>)
    eb9a:	781b      	ldrb	r3, [r3, #0]
    eb9c:	071b      	lsls	r3, r3, #28
    eb9e:	d5d5      	bpl.n	eb4c <RADIO_RxDoneHandler+0x5c>
    eba0:	6923      	ldr	r3, [r4, #16]
    eba2:	e7cf      	b.n	eb44 <RADIO_RxDoneHandler+0x54>
    eba4:	881a      	ldrh	r2, [r3, #0]
    eba6:	0792      	lsls	r2, r2, #30
    eba8:	d56e      	bpl.n	ec88 <RADIO_RxDoneHandler+0x198>
    ebaa:	2102      	movs	r1, #2
    ebac:	881a      	ldrh	r2, [r3, #0]
    ebae:	4d6c      	ldr	r5, [pc, #432]	; (ed60 <RADIO_RxDoneHandler+0x270>)
    ebb0:	438a      	bics	r2, r1
    ebb2:	801a      	strh	r2, [r3, #0]
    ebb4:	2013      	movs	r0, #19
    ebb6:	47a8      	blx	r5
    ebb8:	4c64      	ldr	r4, [pc, #400]	; (ed4c <RADIO_RxDoneHandler+0x25c>)
    ebba:	2100      	movs	r1, #0
    ebbc:	0026      	movs	r6, r4
    ebbe:	362c      	adds	r6, #44	; 0x2c
    ebc0:	7030      	strb	r0, [r6, #0]
    ebc2:	4b68      	ldr	r3, [pc, #416]	; (ed64 <RADIO_RxDoneHandler+0x274>)
    ebc4:	200d      	movs	r0, #13
    ebc6:	4798      	blx	r3
    ebc8:	7832      	ldrb	r2, [r6, #0]
    ebca:	4b67      	ldr	r3, [pc, #412]	; (ed68 <RADIO_RxDoneHandler+0x278>)
    ebcc:	b2d2      	uxtb	r2, r2
    ebce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    ebd0:	2000      	movs	r0, #0
    ebd2:	4798      	blx	r3
    ebd4:	2019      	movs	r0, #25
    ebd6:	47a8      	blx	r5
    ebd8:	0023      	movs	r3, r4
    ebda:	b240      	sxtb	r0, r0
    ebdc:	3332      	adds	r3, #50	; 0x32
    ebde:	2800      	cmp	r0, #0
    ebe0:	da3b      	bge.n	ec5a <RADIO_RxDoneHandler+0x16a>
    ebe2:	4240      	negs	r0, r0
    ebe4:	1080      	asrs	r0, r0, #2
    ebe6:	4240      	negs	r0, r0
    ebe8:	7018      	strb	r0, [r3, #0]
    ebea:	201a      	movs	r0, #26
    ebec:	47a8      	blx	r5
    ebee:	0022      	movs	r2, r4
    ebf0:	3232      	adds	r2, #50	; 0x32
    ebf2:	7812      	ldrb	r2, [r2, #0]
    ebf4:	b203      	sxth	r3, r0
    ebf6:	b252      	sxtb	r2, r2
    ebf8:	4d5c      	ldr	r5, [pc, #368]	; (ed6c <RADIO_RxDoneHandler+0x27c>)
    ebfa:	2a00      	cmp	r2, #0
    ebfc:	da36      	bge.n	ec6c <RADIO_RxDoneHandler+0x17c>
    ebfe:	6821      	ldr	r1, [r4, #0]
    ec00:	4e5b      	ldr	r6, [pc, #364]	; (ed70 <RADIO_RxDoneHandler+0x280>)
    ec02:	198e      	adds	r6, r1, r6
    ec04:	42ae      	cmp	r6, r5
    ec06:	d82a      	bhi.n	ec5e <RADIO_RxDoneHandler+0x16e>
    ec08:	3263      	adds	r2, #99	; 0x63
    ec0a:	1880      	adds	r0, r0, r2
    ec0c:	111b      	asrs	r3, r3, #4
    ec0e:	1818      	adds	r0, r3, r0
    ec10:	0023      	movs	r3, r4
    ec12:	3356      	adds	r3, #86	; 0x56
    ec14:	7018      	strb	r0, [r3, #0]
    ec16:	0023      	movs	r3, r4
    ec18:	2200      	movs	r2, #0
    ec1a:	3334      	adds	r3, #52	; 0x34
    ec1c:	7819      	ldrb	r1, [r3, #0]
    ec1e:	0010      	movs	r0, r2
    ec20:	4b4b      	ldr	r3, [pc, #300]	; (ed50 <RADIO_RxDoneHandler+0x260>)
    ec22:	4798      	blx	r3
    ec24:	4b4b      	ldr	r3, [pc, #300]	; (ed54 <RADIO_RxDoneHandler+0x264>)
    ec26:	4798      	blx	r3
    ec28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ec2a:	a901      	add	r1, sp, #4
    ec2c:	604b      	str	r3, [r1, #4]
    ec2e:	0023      	movs	r3, r4
    ec30:	332c      	adds	r3, #44	; 0x2c
    ec32:	781b      	ldrb	r3, [r3, #0]
    ec34:	2201      	movs	r2, #1
    ec36:	720b      	strb	r3, [r1, #8]
    ec38:	2300      	movs	r3, #0
    ec3a:	700b      	strb	r3, [r1, #0]
    ec3c:	4b46      	ldr	r3, [pc, #280]	; (ed58 <RADIO_RxDoneHandler+0x268>)
    ec3e:	701a      	strb	r2, [r3, #0]
    ec40:	4b46      	ldr	r3, [pc, #280]	; (ed5c <RADIO_RxDoneHandler+0x26c>)
    ec42:	7818      	ldrb	r0, [r3, #0]
    ec44:	07c0      	lsls	r0, r0, #31
    ec46:	0fc0      	lsrs	r0, r0, #31
    ec48:	4290      	cmp	r0, r2
    ec4a:	d000      	beq.n	ec4e <RADIO_RxDoneHandler+0x15e>
    ec4c:	e77e      	b.n	eb4c <RADIO_RxDoneHandler+0x5c>
    ec4e:	6923      	ldr	r3, [r4, #16]
    ec50:	2b00      	cmp	r3, #0
    ec52:	d100      	bne.n	ec56 <RADIO_RxDoneHandler+0x166>
    ec54:	e77a      	b.n	eb4c <RADIO_RxDoneHandler+0x5c>
    ec56:	4798      	blx	r3
    ec58:	e778      	b.n	eb4c <RADIO_RxDoneHandler+0x5c>
    ec5a:	1080      	asrs	r0, r0, #2
    ec5c:	e7c4      	b.n	ebe8 <RADIO_RxDoneHandler+0xf8>
    ec5e:	4d45      	ldr	r5, [pc, #276]	; (ed74 <RADIO_RxDoneHandler+0x284>)
    ec60:	1949      	adds	r1, r1, r5
    ec62:	4d45      	ldr	r5, [pc, #276]	; (ed78 <RADIO_RxDoneHandler+0x288>)
    ec64:	42a9      	cmp	r1, r5
    ec66:	d8d6      	bhi.n	ec16 <RADIO_RxDoneHandler+0x126>
    ec68:	325c      	adds	r2, #92	; 0x5c
    ec6a:	e7ce      	b.n	ec0a <RADIO_RxDoneHandler+0x11a>
    ec6c:	6822      	ldr	r2, [r4, #0]
    ec6e:	4940      	ldr	r1, [pc, #256]	; (ed70 <RADIO_RxDoneHandler+0x280>)
    ec70:	1851      	adds	r1, r2, r1
    ec72:	42a9      	cmp	r1, r5
    ec74:	d801      	bhi.n	ec7a <RADIO_RxDoneHandler+0x18a>
    ec76:	3063      	adds	r0, #99	; 0x63
    ec78:	e7c8      	b.n	ec0c <RADIO_RxDoneHandler+0x11c>
    ec7a:	493e      	ldr	r1, [pc, #248]	; (ed74 <RADIO_RxDoneHandler+0x284>)
    ec7c:	1852      	adds	r2, r2, r1
    ec7e:	493e      	ldr	r1, [pc, #248]	; (ed78 <RADIO_RxDoneHandler+0x288>)
    ec80:	428a      	cmp	r2, r1
    ec82:	d8c8      	bhi.n	ec16 <RADIO_RxDoneHandler+0x126>
    ec84:	305c      	adds	r0, #92	; 0x5c
    ec86:	e7c1      	b.n	ec0c <RADIO_RxDoneHandler+0x11c>
    ec88:	881a      	ldrh	r2, [r3, #0]
    ec8a:	0712      	lsls	r2, r2, #28
    ec8c:	0fd5      	lsrs	r5, r2, #31
    ec8e:	2a00      	cmp	r2, #0
    ec90:	da27      	bge.n	ece2 <RADIO_RxDoneHandler+0x1f2>
    ec92:	2108      	movs	r1, #8
    ec94:	881a      	ldrh	r2, [r3, #0]
    ec96:	4c2d      	ldr	r4, [pc, #180]	; (ed4c <RADIO_RxDoneHandler+0x25c>)
    ec98:	438a      	bics	r2, r1
    ec9a:	801a      	strh	r2, [r3, #0]
    ec9c:	0023      	movs	r3, r4
    ec9e:	2280      	movs	r2, #128	; 0x80
    eca0:	3332      	adds	r3, #50	; 0x32
    eca2:	701a      	strb	r2, [r3, #0]
    eca4:	0023      	movs	r3, r4
    eca6:	2200      	movs	r2, #0
    eca8:	3334      	adds	r3, #52	; 0x34
    ecaa:	7819      	ldrb	r1, [r3, #0]
    ecac:	0010      	movs	r0, r2
    ecae:	4b28      	ldr	r3, [pc, #160]	; (ed50 <RADIO_RxDoneHandler+0x260>)
    ecb0:	4798      	blx	r3
    ecb2:	4b28      	ldr	r3, [pc, #160]	; (ed54 <RADIO_RxDoneHandler+0x264>)
    ecb4:	4798      	blx	r3
    ecb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ecb8:	a901      	add	r1, sp, #4
    ecba:	604b      	str	r3, [r1, #4]
    ecbc:	0023      	movs	r3, r4
    ecbe:	332c      	adds	r3, #44	; 0x2c
    ecc0:	781b      	ldrb	r3, [r3, #0]
    ecc2:	0022      	movs	r2, r4
    ecc4:	720b      	strb	r3, [r1, #8]
    ecc6:	2300      	movs	r3, #0
    ecc8:	3257      	adds	r2, #87	; 0x57
    ecca:	7013      	strb	r3, [r2, #0]
    eccc:	700b      	strb	r3, [r1, #0]
    ecce:	4b22      	ldr	r3, [pc, #136]	; (ed58 <RADIO_RxDoneHandler+0x268>)
    ecd0:	701d      	strb	r5, [r3, #0]
    ecd2:	4b22      	ldr	r3, [pc, #136]	; (ed5c <RADIO_RxDoneHandler+0x26c>)
    ecd4:	7818      	ldrb	r0, [r3, #0]
    ecd6:	07c0      	lsls	r0, r0, #31
    ecd8:	0fc0      	lsrs	r0, r0, #31
    ecda:	2801      	cmp	r0, #1
    ecdc:	d000      	beq.n	ece0 <RADIO_RxDoneHandler+0x1f0>
    ecde:	e735      	b.n	eb4c <RADIO_RxDoneHandler+0x5c>
    ece0:	e7b5      	b.n	ec4e <RADIO_RxDoneHandler+0x15e>
    ece2:	881a      	ldrh	r2, [r3, #0]
    ece4:	05d2      	lsls	r2, r2, #23
    ece6:	0fd5      	lsrs	r5, r2, #31
    ece8:	2a00      	cmp	r2, #0
    ecea:	db00      	blt.n	ecee <RADIO_RxDoneHandler+0x1fe>
    ecec:	e72e      	b.n	eb4c <RADIO_RxDoneHandler+0x5c>
    ecee:	4c17      	ldr	r4, [pc, #92]	; (ed4c <RADIO_RxDoneHandler+0x25c>)
    ecf0:	881a      	ldrh	r2, [r3, #0]
    ecf2:	0026      	movs	r6, r4
    ecf4:	4921      	ldr	r1, [pc, #132]	; (ed7c <RADIO_RxDoneHandler+0x28c>)
    ecf6:	362c      	adds	r6, #44	; 0x2c
    ecf8:	400a      	ands	r2, r1
    ecfa:	801a      	strh	r2, [r3, #0]
    ecfc:	7832      	ldrb	r2, [r6, #0]
    ecfe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    ed00:	b2d2      	uxtb	r2, r2
    ed02:	2000      	movs	r0, #0
    ed04:	4b18      	ldr	r3, [pc, #96]	; (ed68 <RADIO_RxDoneHandler+0x278>)
    ed06:	4798      	blx	r3
    ed08:	0023      	movs	r3, r4
    ed0a:	2200      	movs	r2, #0
    ed0c:	3334      	adds	r3, #52	; 0x34
    ed0e:	7819      	ldrb	r1, [r3, #0]
    ed10:	0010      	movs	r0, r2
    ed12:	4b0f      	ldr	r3, [pc, #60]	; (ed50 <RADIO_RxDoneHandler+0x260>)
    ed14:	4798      	blx	r3
    ed16:	4b0f      	ldr	r3, [pc, #60]	; (ed54 <RADIO_RxDoneHandler+0x264>)
    ed18:	4798      	blx	r3
    ed1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ed1c:	a901      	add	r1, sp, #4
    ed1e:	604b      	str	r3, [r1, #4]
    ed20:	7833      	ldrb	r3, [r6, #0]
    ed22:	0022      	movs	r2, r4
    ed24:	720b      	strb	r3, [r1, #8]
    ed26:	2300      	movs	r3, #0
    ed28:	3257      	adds	r2, #87	; 0x57
    ed2a:	7013      	strb	r3, [r2, #0]
    ed2c:	700b      	strb	r3, [r1, #0]
    ed2e:	4b0a      	ldr	r3, [pc, #40]	; (ed58 <RADIO_RxDoneHandler+0x268>)
    ed30:	701d      	strb	r5, [r3, #0]
    ed32:	4b0a      	ldr	r3, [pc, #40]	; (ed5c <RADIO_RxDoneHandler+0x26c>)
    ed34:	781b      	ldrb	r3, [r3, #0]
    ed36:	06db      	lsls	r3, r3, #27
    ed38:	d400      	bmi.n	ed3c <RADIO_RxDoneHandler+0x24c>
    ed3a:	e707      	b.n	eb4c <RADIO_RxDoneHandler+0x5c>
    ed3c:	6923      	ldr	r3, [r4, #16]
    ed3e:	2b00      	cmp	r3, #0
    ed40:	d100      	bne.n	ed44 <RADIO_RxDoneHandler+0x254>
    ed42:	e703      	b.n	eb4c <RADIO_RxDoneHandler+0x5c>
    ed44:	2010      	movs	r0, #16
    ed46:	e786      	b.n	ec56 <RADIO_RxDoneHandler+0x166>
    ed48:	20002eb0 	.word	0x20002eb0
    ed4c:	20002cf4 	.word	0x20002cf4
    ed50:	0000cd4d 	.word	0x0000cd4d
    ed54:	0000e545 	.word	0x0000e545
    ed58:	20002eb3 	.word	0x20002eb3
    ed5c:	20002eb2 	.word	0x20002eb2
    ed60:	0000c0b9 	.word	0x0000c0b9
    ed64:	0000c091 	.word	0x0000c091
    ed68:	0000c125 	.word	0x0000c125
    ed6c:	096ae380 	.word	0x096ae380
    ed70:	cc9eec80 	.word	0xcc9eec80
    ed74:	e78fe580 	.word	0xe78fe580
    ed78:	06dac2c0 	.word	0x06dac2c0
    ed7c:	fffffeff 	.word	0xfffffeff

0000ed80 <MacClearCommands>:
    ed80:	490e      	ldr	r1, [pc, #56]	; (edbc <MacClearCommands+0x3c>)
    ed82:	b570      	push	{r4, r5, r6, lr}
    ed84:	000b      	movs	r3, r1
    ed86:	33b8      	adds	r3, #184	; 0xb8
    ed88:	7818      	ldrb	r0, [r3, #0]
    ed8a:	2303      	movs	r3, #3
    ed8c:	25a4      	movs	r5, #164	; 0xa4
    ed8e:	4343      	muls	r3, r0
    ed90:	2401      	movs	r4, #1
    ed92:	20ff      	movs	r0, #255	; 0xff
    ed94:	3371      	adds	r3, #113	; 0x71
    ed96:	4a0a      	ldr	r2, [pc, #40]	; (edc0 <MacClearCommands+0x40>)
    ed98:	185b      	adds	r3, r3, r1
    ed9a:	00ed      	lsls	r5, r5, #3
    ed9c:	429a      	cmp	r2, r3
    ed9e:	d100      	bne.n	eda2 <MacClearCommands+0x22>
    eda0:	bd70      	pop	{r4, r5, r6, pc}
    eda2:	7811      	ldrb	r1, [r2, #0]
    eda4:	29ff      	cmp	r1, #255	; 0xff
    eda6:	d006      	beq.n	edb6 <MacClearCommands+0x36>
    eda8:	290a      	cmp	r1, #10
    edaa:	d803      	bhi.n	edb4 <MacClearCommands+0x34>
    edac:	0026      	movs	r6, r4
    edae:	408e      	lsls	r6, r1
    edb0:	422e      	tst	r6, r5
    edb2:	d100      	bne.n	edb6 <MacClearCommands+0x36>
    edb4:	7010      	strb	r0, [r2, #0]
    edb6:	3203      	adds	r2, #3
    edb8:	e7f0      	b.n	ed9c <MacClearCommands+0x1c>
    edba:	46c0      	nop			; (mov r8, r8)
    edbc:	20002fd8 	.word	0x20002fd8
    edc0:	20003049 	.word	0x20003049

0000edc4 <CountfOptsLength>:
    edc4:	2200      	movs	r2, #0
    edc6:	490d      	ldr	r1, [pc, #52]	; (edfc <CountfOptsLength+0x38>)
    edc8:	b570      	push	{r4, r5, r6, lr}
    edca:	000b      	movs	r3, r1
    edcc:	0010      	movs	r0, r2
    edce:	2503      	movs	r5, #3
    edd0:	33b8      	adds	r3, #184	; 0xb8
    edd2:	781c      	ldrb	r4, [r3, #0]
    edd4:	4e0a      	ldr	r6, [pc, #40]	; (ee00 <CountfOptsLength+0x3c>)
    edd6:	b2d3      	uxtb	r3, r2
    edd8:	429c      	cmp	r4, r3
    edda:	d800      	bhi.n	edde <CountfOptsLength+0x1a>
    eddc:	bd70      	pop	{r4, r5, r6, pc}
    edde:	002b      	movs	r3, r5
    ede0:	4353      	muls	r3, r2
    ede2:	3371      	adds	r3, #113	; 0x71
    ede4:	5ccb      	ldrb	r3, [r1, r3]
    ede6:	2bff      	cmp	r3, #255	; 0xff
    ede8:	d006      	beq.n	edf8 <CountfOptsLength+0x34>
    edea:	18f3      	adds	r3, r6, r3
    edec:	3b02      	subs	r3, #2
    edee:	781b      	ldrb	r3, [r3, #0]
    edf0:	18c3      	adds	r3, r0, r3
    edf2:	2b0f      	cmp	r3, #15
    edf4:	dcf2      	bgt.n	eddc <CountfOptsLength+0x18>
    edf6:	b2d8      	uxtb	r0, r3
    edf8:	3201      	adds	r2, #1
    edfa:	e7ec      	b.n	edd6 <CountfOptsLength+0x12>
    edfc:	20002fd8 	.word	0x20002fd8
    ee00:	0001738f 	.word	0x0001738f

0000ee04 <LorawanGetMaxPayloadSize>:
    ee04:	b513      	push	{r0, r1, r4, lr}
    ee06:	466b      	mov	r3, sp
    ee08:	1ddc      	adds	r4, r3, #7
    ee0a:	2300      	movs	r3, #0
    ee0c:	0022      	movs	r2, r4
    ee0e:	7023      	strb	r3, [r4, #0]
    ee10:	4902      	ldr	r1, [pc, #8]	; (ee1c <LorawanGetMaxPayloadSize+0x18>)
    ee12:	4b03      	ldr	r3, [pc, #12]	; (ee20 <LorawanGetMaxPayloadSize+0x1c>)
    ee14:	2005      	movs	r0, #5
    ee16:	4798      	blx	r3
    ee18:	7820      	ldrb	r0, [r4, #0]
    ee1a:	bd16      	pop	{r1, r2, r4, pc}
    ee1c:	20003097 	.word	0x20003097
    ee20:	0000c2cd 	.word	0x0000c2cd

0000ee24 <UpdateReceiveDelays>:
    ee24:	23fa      	movs	r3, #250	; 0xfa
    ee26:	b570      	push	{r4, r5, r6, lr}
    ee28:	009b      	lsls	r3, r3, #2
    ee2a:	4c0b      	ldr	r4, [pc, #44]	; (ee58 <UpdateReceiveDelays+0x34>)
    ee2c:	2800      	cmp	r0, #0
    ee2e:	d000      	beq.n	ee32 <UpdateReceiveDelays+0xe>
    ee30:	4343      	muls	r3, r0
    ee32:	0022      	movs	r2, r4
    ee34:	4d09      	ldr	r5, [pc, #36]	; (ee5c <UpdateReceiveDelays+0x38>)
    ee36:	32a8      	adds	r2, #168	; 0xa8
    ee38:	210c      	movs	r1, #12
    ee3a:	2000      	movs	r0, #0
    ee3c:	8013      	strh	r3, [r2, #0]
    ee3e:	47a8      	blx	r5
    ee40:	0023      	movs	r3, r4
    ee42:	22fa      	movs	r2, #250	; 0xfa
    ee44:	33a8      	adds	r3, #168	; 0xa8
    ee46:	881b      	ldrh	r3, [r3, #0]
    ee48:	0092      	lsls	r2, r2, #2
    ee4a:	189b      	adds	r3, r3, r2
    ee4c:	34aa      	adds	r4, #170	; 0xaa
    ee4e:	210d      	movs	r1, #13
    ee50:	2000      	movs	r0, #0
    ee52:	8023      	strh	r3, [r4, #0]
    ee54:	47a8      	blx	r5
    ee56:	bd70      	pop	{r4, r5, r6, pc}
    ee58:	20002fd8 	.word	0x20002fd8
    ee5c:	00008e61 	.word	0x00008e61

0000ee60 <IncludeMacCommandsResponse>:
    ee60:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee62:	0005      	movs	r5, r0
    ee64:	2600      	movs	r6, #0
    ee66:	b087      	sub	sp, #28
    ee68:	880c      	ldrh	r4, [r1, #0]
    ee6a:	9101      	str	r1, [sp, #4]
    ee6c:	9203      	str	r2, [sp, #12]
    ee6e:	4a67      	ldr	r2, [pc, #412]	; (f00c <IncludeMacCommandsResponse+0x1ac>)
    ee70:	0013      	movs	r3, r2
    ee72:	33b8      	adds	r3, #184	; 0xb8
    ee74:	781b      	ldrb	r3, [r3, #0]
    ee76:	42b3      	cmp	r3, r6
    ee78:	d913      	bls.n	eea2 <IncludeMacCommandsResponse+0x42>
    ee7a:	9b03      	ldr	r3, [sp, #12]
    ee7c:	2b00      	cmp	r3, #0
    ee7e:	d019      	beq.n	eeb4 <IncludeMacCommandsResponse+0x54>
    ee80:	2303      	movs	r3, #3
    ee82:	4373      	muls	r3, r6
    ee84:	18d3      	adds	r3, r2, r3
    ee86:	3371      	adds	r3, #113	; 0x71
    ee88:	7818      	ldrb	r0, [r3, #0]
    ee8a:	28ff      	cmp	r0, #255	; 0xff
    ee8c:	d012      	beq.n	eeb4 <IncludeMacCommandsResponse+0x54>
    ee8e:	9b01      	ldr	r3, [sp, #4]
    ee90:	8819      	ldrh	r1, [r3, #0]
    ee92:	4b5f      	ldr	r3, [pc, #380]	; (f010 <IncludeMacCommandsResponse+0x1b0>)
    ee94:	1a61      	subs	r1, r4, r1
    ee96:	181b      	adds	r3, r3, r0
    ee98:	3b02      	subs	r3, #2
    ee9a:	781b      	ldrb	r3, [r3, #0]
    ee9c:	18cb      	adds	r3, r1, r3
    ee9e:	2b0f      	cmp	r3, #15
    eea0:	dd08      	ble.n	eeb4 <IncludeMacCommandsResponse+0x54>
    eea2:	2207      	movs	r2, #7
    eea4:	2100      	movs	r1, #0
    eea6:	4b5b      	ldr	r3, [pc, #364]	; (f014 <IncludeMacCommandsResponse+0x1b4>)
    eea8:	485b      	ldr	r0, [pc, #364]	; (f018 <IncludeMacCommandsResponse+0x1b8>)
    eeaa:	4798      	blx	r3
    eeac:	9b01      	ldr	r3, [sp, #4]
    eeae:	801c      	strh	r4, [r3, #0]
    eeb0:	b007      	add	sp, #28
    eeb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eeb4:	2303      	movs	r3, #3
    eeb6:	4373      	muls	r3, r6
    eeb8:	18d3      	adds	r3, r2, r3
    eeba:	3371      	adds	r3, #113	; 0x71
    eebc:	7819      	ldrb	r1, [r3, #0]
    eebe:	1e88      	subs	r0, r1, #2
    eec0:	2808      	cmp	r0, #8
    eec2:	d862      	bhi.n	ef8a <IncludeMacCommandsResponse+0x12a>
    eec4:	1c63      	adds	r3, r4, #1
    eec6:	f002 fe4f 	bl	11b68 <__gnu_thumb1_case_uqi>
    eeca:	0594      	.short	0x0594
    eecc:	6646269e 	.word	0x6646269e
    eed0:	7b9e      	.short	0x7b9e
    eed2:	7f          	.byte	0x7f
    eed3:	00          	.byte	0x00
    eed4:	2203      	movs	r2, #3
    eed6:	20b8      	movs	r0, #184	; 0xb8
    eed8:	552a      	strb	r2, [r5, r4]
    eeda:	2200      	movs	r2, #0
    eedc:	b29b      	uxth	r3, r3
    eede:	18eb      	adds	r3, r5, r3
    eee0:	4f4a      	ldr	r7, [pc, #296]	; (f00c <IncludeMacCommandsResponse+0x1ac>)
    eee2:	701a      	strb	r2, [r3, #0]
    eee4:	30ff      	adds	r0, #255	; 0xff
    eee6:	5c39      	ldrb	r1, [r7, r0]
    eee8:	3201      	adds	r2, #1
    eeea:	4011      	ands	r1, r2
    eeec:	466a      	mov	r2, sp
    eeee:	9102      	str	r1, [sp, #8]
    eef0:	7a12      	ldrb	r2, [r2, #8]
    eef2:	701a      	strb	r2, [r3, #0]
    eef4:	5c3a      	ldrb	r2, [r7, r0]
    eef6:	4694      	mov	ip, r2
    eef8:	2202      	movs	r2, #2
    eefa:	4661      	mov	r1, ip
    eefc:	4211      	tst	r1, r2
    eefe:	d002      	beq.n	ef06 <IncludeMacCommandsResponse+0xa6>
    ef00:	9902      	ldr	r1, [sp, #8]
    ef02:	430a      	orrs	r2, r1
    ef04:	701a      	strb	r2, [r3, #0]
    ef06:	2204      	movs	r2, #4
    ef08:	5c39      	ldrb	r1, [r7, r0]
    ef0a:	4211      	tst	r1, r2
    ef0c:	d06e      	beq.n	efec <IncludeMacCommandsResponse+0x18c>
    ef0e:	7819      	ldrb	r1, [r3, #0]
    ef10:	430a      	orrs	r2, r1
    ef12:	701a      	strb	r2, [r3, #0]
    ef14:	e06a      	b.n	efec <IncludeMacCommandsResponse+0x18c>
    ef16:	2205      	movs	r2, #5
    ef18:	2103      	movs	r1, #3
    ef1a:	552a      	strb	r2, [r5, r4]
    ef1c:	2200      	movs	r2, #0
    ef1e:	b29b      	uxth	r3, r3
    ef20:	4371      	muls	r1, r6
    ef22:	18eb      	adds	r3, r5, r3
    ef24:	701a      	strb	r2, [r3, #0]
    ef26:	4a39      	ldr	r2, [pc, #228]	; (f00c <IncludeMacCommandsResponse+0x1ac>)
    ef28:	1851      	adds	r1, r2, r1
    ef2a:	3170      	adds	r1, #112	; 0x70
    ef2c:	7888      	ldrb	r0, [r1, #2]
    ef2e:	0700      	lsls	r0, r0, #28
    ef30:	0fc0      	lsrs	r0, r0, #31
    ef32:	7018      	strb	r0, [r3, #0]
    ef34:	7889      	ldrb	r1, [r1, #2]
    ef36:	b2c7      	uxtb	r7, r0
    ef38:	06c9      	lsls	r1, r1, #27
    ef3a:	d502      	bpl.n	ef42 <IncludeMacCommandsResponse+0xe2>
    ef3c:	2102      	movs	r1, #2
    ef3e:	4339      	orrs	r1, r7
    ef40:	7019      	strb	r1, [r3, #0]
    ef42:	2103      	movs	r1, #3
    ef44:	4371      	muls	r1, r6
    ef46:	1852      	adds	r2, r2, r1
    ef48:	3270      	adds	r2, #112	; 0x70
    ef4a:	7892      	ldrb	r2, [r2, #2]
    ef4c:	0692      	lsls	r2, r2, #26
    ef4e:	d54d      	bpl.n	efec <IncludeMacCommandsResponse+0x18c>
    ef50:	7819      	ldrb	r1, [r3, #0]
    ef52:	2204      	movs	r2, #4
    ef54:	e7dc      	b.n	ef10 <IncludeMacCommandsResponse+0xb0>
    ef56:	ab04      	add	r3, sp, #16
    ef58:	1ddf      	adds	r7, r3, #7
    ef5a:	0039      	movs	r1, r7
    ef5c:	4b2f      	ldr	r3, [pc, #188]	; (f01c <IncludeMacCommandsResponse+0x1bc>)
    ef5e:	200e      	movs	r0, #14
    ef60:	4798      	blx	r3
    ef62:	2306      	movs	r3, #6
    ef64:	4a29      	ldr	r2, [pc, #164]	; (f00c <IncludeMacCommandsResponse+0x1ac>)
    ef66:	552b      	strb	r3, [r5, r4]
    ef68:	32c0      	adds	r2, #192	; 0xc0
    ef6a:	7811      	ldrb	r1, [r2, #0]
    ef6c:	1c62      	adds	r2, r4, #1
    ef6e:	b292      	uxth	r2, r2
    ef70:	54a9      	strb	r1, [r5, r2]
    ef72:	783a      	ldrb	r2, [r7, #0]
    ef74:	1ca3      	adds	r3, r4, #2
    ef76:	0011      	movs	r1, r2
    ef78:	3120      	adds	r1, #32
    ef7a:	3403      	adds	r4, #3
    ef7c:	b2c9      	uxtb	r1, r1
    ef7e:	b29b      	uxth	r3, r3
    ef80:	b2a4      	uxth	r4, r4
    ef82:	293f      	cmp	r1, #63	; 0x3f
    ef84:	d904      	bls.n	ef90 <IncludeMacCommandsResponse+0x130>
    ef86:	2220      	movs	r2, #32
    ef88:	54ea      	strb	r2, [r5, r3]
    ef8a:	3601      	adds	r6, #1
    ef8c:	b2f6      	uxtb	r6, r6
    ef8e:	e76e      	b.n	ee6e <IncludeMacCommandsResponse+0xe>
    ef90:	213f      	movs	r1, #63	; 0x3f
    ef92:	400a      	ands	r2, r1
    ef94:	e7f8      	b.n	ef88 <IncludeMacCommandsResponse+0x128>
    ef96:	2207      	movs	r2, #7
    ef98:	2103      	movs	r1, #3
    ef9a:	552a      	strb	r2, [r5, r4]
    ef9c:	2200      	movs	r2, #0
    ef9e:	4371      	muls	r1, r6
    efa0:	b29b      	uxth	r3, r3
    efa2:	18eb      	adds	r3, r5, r3
    efa4:	701a      	strb	r2, [r3, #0]
    efa6:	4a19      	ldr	r2, [pc, #100]	; (f00c <IncludeMacCommandsResponse+0x1ac>)
    efa8:	1852      	adds	r2, r2, r1
    efaa:	3270      	adds	r2, #112	; 0x70
    efac:	7891      	ldrb	r1, [r2, #2]
    efae:	09c9      	lsrs	r1, r1, #7
    efb0:	7019      	strb	r1, [r3, #0]
    efb2:	7892      	ldrb	r2, [r2, #2]
    efb4:	b2c8      	uxtb	r0, r1
    efb6:	0652      	lsls	r2, r2, #25
    efb8:	d518      	bpl.n	efec <IncludeMacCommandsResponse+0x18c>
    efba:	2202      	movs	r2, #2
    efbc:	4302      	orrs	r2, r0
    efbe:	e7a8      	b.n	ef12 <IncludeMacCommandsResponse+0xb2>
    efc0:	2209      	movs	r2, #9
    efc2:	552a      	strb	r2, [r5, r4]
    efc4:	b29c      	uxth	r4, r3
    efc6:	e7e0      	b.n	ef8a <IncludeMacCommandsResponse+0x12a>
    efc8:	220a      	movs	r2, #10
    efca:	2103      	movs	r1, #3
    efcc:	552a      	strb	r2, [r5, r4]
    efce:	2200      	movs	r2, #0
    efd0:	4371      	muls	r1, r6
    efd2:	b29b      	uxth	r3, r3
    efd4:	18eb      	adds	r3, r5, r3
    efd6:	701a      	strb	r2, [r3, #0]
    efd8:	4a0c      	ldr	r2, [pc, #48]	; (f00c <IncludeMacCommandsResponse+0x1ac>)
    efda:	1852      	adds	r2, r2, r1
    efdc:	3270      	adds	r2, #112	; 0x70
    efde:	7891      	ldrb	r1, [r2, #2]
    efe0:	09c9      	lsrs	r1, r1, #7
    efe2:	7019      	strb	r1, [r3, #0]
    efe4:	78d2      	ldrb	r2, [r2, #3]
    efe6:	b2c8      	uxtb	r0, r1
    efe8:	07d2      	lsls	r2, r2, #31
    efea:	d4e6      	bmi.n	efba <IncludeMacCommandsResponse+0x15a>
    efec:	3402      	adds	r4, #2
    efee:	b2a4      	uxth	r4, r4
    eff0:	e7cb      	b.n	ef8a <IncludeMacCommandsResponse+0x12a>
    eff2:	0013      	movs	r3, r2
    eff4:	21ff      	movs	r1, #255	; 0xff
    eff6:	33bd      	adds	r3, #189	; 0xbd
    eff8:	7019      	strb	r1, [r3, #0]
    effa:	2300      	movs	r3, #0
    effc:	32be      	adds	r2, #190	; 0xbe
    effe:	7013      	strb	r3, [r2, #0]
    f000:	1c63      	adds	r3, r4, #1
    f002:	2202      	movs	r2, #2
    f004:	e7dd      	b.n	efc2 <IncludeMacCommandsResponse+0x162>
    f006:	5529      	strb	r1, [r5, r4]
    f008:	e7dc      	b.n	efc4 <IncludeMacCommandsResponse+0x164>
    f00a:	46c0      	nop			; (mov r8, r8)
    f00c:	20002fd8 	.word	0x20002fd8
    f010:	0001738f 	.word	0x0001738f
    f014:	00014df1 	.word	0x00014df1
    f018:	2000318f 	.word	0x2000318f
    f01c:	0000d445 	.word	0x0000d445

0000f020 <UpdateJoinSuccessState>:
    f020:	b5f0      	push	{r4, r5, r6, r7, lr}
    f022:	4c33      	ldr	r4, [pc, #204]	; (f0f0 <UpdateJoinSuccessState+0xd0>)
    f024:	2104      	movs	r1, #4
    f026:	0022      	movs	r2, r4
    f028:	326c      	adds	r2, #108	; 0x6c
    f02a:	7813      	ldrb	r3, [r2, #0]
    f02c:	2001      	movs	r0, #1
    f02e:	438b      	bics	r3, r1
    f030:	7013      	strb	r3, [r2, #0]
    f032:	0022      	movs	r2, r4
    f034:	2500      	movs	r5, #0
    f036:	325c      	adds	r2, #92	; 0x5c
    f038:	7813      	ldrb	r3, [r2, #0]
    f03a:	b087      	sub	sp, #28
    f03c:	4303      	orrs	r3, r0
    f03e:	3107      	adds	r1, #7
    f040:	4f2c      	ldr	r7, [pc, #176]	; (f0f4 <UpdateJoinSuccessState+0xd4>)
    f042:	7013      	strb	r3, [r2, #0]
    f044:	47b8      	blx	r7
    f046:	2116      	movs	r1, #22
    f048:	0028      	movs	r0, r5
    f04a:	6625      	str	r5, [r4, #96]	; 0x60
    f04c:	47b8      	blx	r7
    f04e:	0023      	movs	r3, r4
    f050:	2020      	movs	r0, #32
    f052:	33f0      	adds	r3, #240	; 0xf0
    f054:	781b      	ldrb	r3, [r3, #0]
    f056:	4e28      	ldr	r6, [pc, #160]	; (f0f8 <UpdateJoinSuccessState+0xd8>)
    f058:	4203      	tst	r3, r0
    f05a:	d014      	beq.n	f086 <UpdateJoinSuccessState+0x66>
    f05c:	0023      	movs	r3, r4
    f05e:	335b      	adds	r3, #91	; 0x5b
    f060:	701d      	strb	r5, [r3, #0]
    f062:	0023      	movs	r3, r4
    f064:	a904      	add	r1, sp, #16
    f066:	334f      	adds	r3, #79	; 0x4f
    f068:	710d      	strb	r5, [r1, #4]
    f06a:	701d      	strb	r5, [r3, #0]
    f06c:	705d      	strb	r5, [r3, #1]
    f06e:	709d      	strb	r5, [r3, #2]
    f070:	70dd      	strb	r5, [r3, #3]
    f072:	711d      	strb	r5, [r3, #4]
    f074:	715d      	strb	r5, [r3, #5]
    f076:	719d      	strb	r5, [r3, #6]
    f078:	71dd      	strb	r5, [r3, #7]
    f07a:	47b0      	blx	r6
    f07c:	210f      	movs	r1, #15
    f07e:	2021      	movs	r0, #33	; 0x21
    f080:	4469      	add	r1, sp
    f082:	700d      	strb	r5, [r1, #0]
    f084:	47b0      	blx	r6
    f086:	2500      	movs	r5, #0
    f088:	210a      	movs	r1, #10
    f08a:	2001      	movs	r0, #1
    f08c:	6665      	str	r5, [r4, #100]	; 0x64
    f08e:	47b8      	blx	r7
    f090:	0023      	movs	r3, r4
    f092:	33a2      	adds	r3, #162	; 0xa2
    f094:	801d      	strh	r5, [r3, #0]
    f096:	0022      	movs	r2, r4
    f098:	0023      	movs	r3, r4
    f09a:	210e      	movs	r1, #14
    f09c:	325c      	adds	r2, #92	; 0x5c
    f09e:	33cd      	adds	r3, #205	; 0xcd
    f0a0:	701d      	strb	r5, [r3, #0]
    f0a2:	7813      	ldrb	r3, [r2, #0]
    f0a4:	203a      	movs	r0, #58	; 0x3a
    f0a6:	438b      	bics	r3, r1
    f0a8:	0029      	movs	r1, r5
    f0aa:	7013      	strb	r3, [r2, #0]
    f0ac:	47b0      	blx	r6
    f0ae:	0023      	movs	r3, r4
    f0b0:	335d      	adds	r3, #93	; 0x5d
    f0b2:	781b      	ldrb	r3, [r3, #0]
    f0b4:	079b      	lsls	r3, r3, #30
    f0b6:	d50a      	bpl.n	f0ce <UpdateJoinSuccessState+0xae>
    f0b8:	21fa      	movs	r1, #250	; 0xfa
    f0ba:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    f0bc:	0089      	lsls	r1, r1, #2
    f0be:	34c7      	adds	r4, #199	; 0xc7
    f0c0:	7820      	ldrb	r0, [r4, #0]
    f0c2:	4359      	muls	r1, r3
    f0c4:	9500      	str	r5, [sp, #0]
    f0c6:	4b0d      	ldr	r3, [pc, #52]	; (f0fc <UpdateJoinSuccessState+0xdc>)
    f0c8:	002a      	movs	r2, r5
    f0ca:	4c0d      	ldr	r4, [pc, #52]	; (f100 <UpdateJoinSuccessState+0xe0>)
    f0cc:	47a0      	blx	r4
    f0ce:	490d      	ldr	r1, [pc, #52]	; (f104 <UpdateJoinSuccessState+0xe4>)
    f0d0:	794a      	ldrb	r2, [r1, #5]
    f0d2:	790b      	ldrb	r3, [r1, #4]
    f0d4:	0212      	lsls	r2, r2, #8
    f0d6:	431a      	orrs	r2, r3
    f0d8:	798b      	ldrb	r3, [r1, #6]
    f0da:	041b      	lsls	r3, r3, #16
    f0dc:	431a      	orrs	r2, r3
    f0de:	79cb      	ldrb	r3, [r1, #7]
    f0e0:	061b      	lsls	r3, r3, #24
    f0e2:	4313      	orrs	r3, r2
    f0e4:	d001      	beq.n	f0ea <UpdateJoinSuccessState+0xca>
    f0e6:	2008      	movs	r0, #8
    f0e8:	4798      	blx	r3
    f0ea:	b007      	add	sp, #28
    f0ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f0ee:	46c0      	nop			; (mov r8, r8)
    f0f0:	20002fd8 	.word	0x20002fd8
    f0f4:	00008e61 	.word	0x00008e61
    f0f8:	0000c305 	.word	0x0000c305
    f0fc:	0000f241 	.word	0x0000f241
    f100:	0000c739 	.word	0x0000c739
    f104:	200032ac 	.word	0x200032ac

0000f108 <PrepareSessionKeys>:
    f108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f10a:	0004      	movs	r4, r0
    f10c:	2603      	movs	r6, #3
    f10e:	000d      	movs	r5, r1
    f110:	0017      	movs	r7, r2
    f112:	4b09      	ldr	r3, [pc, #36]	; (f138 <PrepareSessionKeys+0x30>)
    f114:	2210      	movs	r2, #16
    f116:	2100      	movs	r1, #0
    f118:	4798      	blx	r3
    f11a:	0032      	movs	r2, r6
    f11c:	0029      	movs	r1, r5
    f11e:	1c60      	adds	r0, r4, #1
    f120:	4d06      	ldr	r5, [pc, #24]	; (f13c <PrepareSessionKeys+0x34>)
    f122:	47a8      	blx	r5
    f124:	0032      	movs	r2, r6
    f126:	0039      	movs	r1, r7
    f128:	1d20      	adds	r0, r4, #4
    f12a:	47a8      	blx	r5
    f12c:	1de0      	adds	r0, r4, #7
    f12e:	2202      	movs	r2, #2
    f130:	4903      	ldr	r1, [pc, #12]	; (f140 <PrepareSessionKeys+0x38>)
    f132:	47a8      	blx	r5
    f134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f136:	46c0      	nop			; (mov r8, r8)
    f138:	00014df1 	.word	0x00014df1
    f13c:	00014ddf 	.word	0x00014ddf
    f140:	2000307c 	.word	0x2000307c

0000f144 <AssembleEncryptionBlock>:
    f144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f146:	001e      	movs	r6, r3
    f148:	4c0b      	ldr	r4, [pc, #44]	; (f178 <AssembleEncryptionBlock+0x34>)
    f14a:	0017      	movs	r7, r2
    f14c:	4b0b      	ldr	r3, [pc, #44]	; (f17c <AssembleEncryptionBlock+0x38>)
    f14e:	0005      	movs	r5, r0
    f150:	9101      	str	r1, [sp, #4]
    f152:	2210      	movs	r2, #16
    f154:	2100      	movs	r1, #0
    f156:	0020      	movs	r0, r4
    f158:	4798      	blx	r3
    f15a:	7026      	strb	r6, [r4, #0]
    f15c:	2604      	movs	r6, #4
    f15e:	7165      	strb	r5, [r4, #5]
    f160:	0032      	movs	r2, r6
    f162:	4d07      	ldr	r5, [pc, #28]	; (f180 <AssembleEncryptionBlock+0x3c>)
    f164:	a908      	add	r1, sp, #32
    f166:	1da0      	adds	r0, r4, #6
    f168:	47a8      	blx	r5
    f16a:	0020      	movs	r0, r4
    f16c:	0032      	movs	r2, r6
    f16e:	a901      	add	r1, sp, #4
    f170:	300a      	adds	r0, #10
    f172:	47a8      	blx	r5
    f174:	73e7      	strb	r7, [r4, #15]
    f176:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    f178:	2000206d 	.word	0x2000206d
    f17c:	00014df1 	.word	0x00014df1
    f180:	00014ddf 	.word	0x00014ddf

0000f184 <ConfigureRadio>:
    f184:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f186:	0001      	movs	r1, r0
    f188:	0005      	movs	r5, r0
    f18a:	4c11      	ldr	r4, [pc, #68]	; (f1d0 <ConfigureRadio+0x4c>)
    f18c:	3109      	adds	r1, #9
    f18e:	2009      	movs	r0, #9
    f190:	47a0      	blx	r4
    f192:	0029      	movs	r1, r5
    f194:	2001      	movs	r0, #1
    f196:	47a0      	blx	r4
    f198:	1d29      	adds	r1, r5, #4
    f19a:	200a      	movs	r0, #10
    f19c:	47a0      	blx	r4
    f19e:	7a6b      	ldrb	r3, [r5, #9]
    f1a0:	2b01      	cmp	r3, #1
    f1a2:	d10b      	bne.n	f1bc <ConfigureRadio+0x38>
    f1a4:	0029      	movs	r1, r5
    f1a6:	2016      	movs	r0, #22
    f1a8:	310b      	adds	r1, #11
    f1aa:	47a0      	blx	r4
    f1ac:	0029      	movs	r1, r5
    f1ae:	2007      	movs	r0, #7
    f1b0:	310a      	adds	r1, #10
    f1b2:	47a0      	blx	r4
    f1b4:	2000      	movs	r0, #0
    f1b6:	4907      	ldr	r1, [pc, #28]	; (f1d4 <ConfigureRadio+0x50>)
    f1b8:	47a0      	blx	r4
    f1ba:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    f1bc:	466b      	mov	r3, sp
    f1be:	1dd9      	adds	r1, r3, #7
    f1c0:	2303      	movs	r3, #3
    f1c2:	2013      	movs	r0, #19
    f1c4:	700b      	strb	r3, [r1, #0]
    f1c6:	47a0      	blx	r4
    f1c8:	4903      	ldr	r1, [pc, #12]	; (f1d8 <ConfigureRadio+0x54>)
    f1ca:	2012      	movs	r0, #18
    f1cc:	e7f4      	b.n	f1b8 <ConfigureRadio+0x34>
    f1ce:	46c0      	nop			; (mov r8, r8)
    f1d0:	0000d531 	.word	0x0000d531
    f1d4:	200030af 	.word	0x200030af
    f1d8:	0001738c 	.word	0x0001738c

0000f1dc <StopReceiveWindow2Timer>:
    f1dc:	b510      	push	{r4, lr}
    f1de:	4c0b      	ldr	r4, [pc, #44]	; (f20c <StopReceiveWindow2Timer+0x30>)
    f1e0:	0022      	movs	r2, r4
    f1e2:	32d4      	adds	r2, #212	; 0xd4
    f1e4:	7812      	ldrb	r2, [r2, #0]
    f1e6:	2a01      	cmp	r2, #1
    f1e8:	d10e      	bne.n	f208 <StopReceiveWindow2Timer+0x2c>
    f1ea:	0021      	movs	r1, r4
    f1ec:	200e      	movs	r0, #14
    f1ee:	315c      	adds	r1, #92	; 0x5c
    f1f0:	780a      	ldrb	r2, [r1, #0]
    f1f2:	34c5      	adds	r4, #197	; 0xc5
    f1f4:	4382      	bics	r2, r0
    f1f6:	700a      	strb	r2, [r1, #0]
    f1f8:	7820      	ldrb	r0, [r4, #0]
    f1fa:	4b05      	ldr	r3, [pc, #20]	; (f210 <StopReceiveWindow2Timer+0x34>)
    f1fc:	4798      	blx	r3
    f1fe:	2800      	cmp	r0, #0
    f200:	d002      	beq.n	f208 <StopReceiveWindow2Timer+0x2c>
    f202:	7820      	ldrb	r0, [r4, #0]
    f204:	4b03      	ldr	r3, [pc, #12]	; (f214 <StopReceiveWindow2Timer+0x38>)
    f206:	4798      	blx	r3
    f208:	bd10      	pop	{r4, pc}
    f20a:	46c0      	nop			; (mov r8, r8)
    f20c:	20002fd8 	.word	0x20002fd8
    f210:	0000c8d1 	.word	0x0000c8d1
    f214:	0000ca3d 	.word	0x0000ca3d

0000f218 <LorawanLinkCheckCallback.part.1>:
    f218:	b513      	push	{r0, r1, r4, lr}
    f21a:	21fa      	movs	r1, #250	; 0xfa
    f21c:	4b05      	ldr	r3, [pc, #20]	; (f234 <LorawanLinkCheckCallback.part.1+0x1c>)
    f21e:	0089      	lsls	r1, r1, #2
    f220:	6e9a      	ldr	r2, [r3, #104]	; 0x68
    f222:	33c7      	adds	r3, #199	; 0xc7
    f224:	4351      	muls	r1, r2
    f226:	2200      	movs	r2, #0
    f228:	7818      	ldrb	r0, [r3, #0]
    f22a:	4c03      	ldr	r4, [pc, #12]	; (f238 <LorawanLinkCheckCallback.part.1+0x20>)
    f22c:	9200      	str	r2, [sp, #0]
    f22e:	4b03      	ldr	r3, [pc, #12]	; (f23c <LorawanLinkCheckCallback.part.1+0x24>)
    f230:	47a0      	blx	r4
    f232:	bd13      	pop	{r0, r1, r4, pc}
    f234:	20002fd8 	.word	0x20002fd8
    f238:	0000c739 	.word	0x0000c739
    f23c:	0000f241 	.word	0x0000f241

0000f240 <LorawanLinkCheckCallback>:
    f240:	4b17      	ldr	r3, [pc, #92]	; (f2a0 <LorawanLinkCheckCallback+0x60>)
    f242:	20a0      	movs	r0, #160	; 0xa0
    f244:	001a      	movs	r2, r3
    f246:	2180      	movs	r1, #128	; 0x80
    f248:	b510      	push	{r4, lr}
    f24a:	325c      	adds	r2, #92	; 0x5c
    f24c:	8812      	ldrh	r2, [r2, #0]
    f24e:	0080      	lsls	r0, r0, #2
    f250:	0089      	lsls	r1, r1, #2
    f252:	4002      	ands	r2, r0
    f254:	428a      	cmp	r2, r1
    f256:	d11c      	bne.n	f292 <LorawanLinkCheckCallback+0x52>
    f258:	001a      	movs	r2, r3
    f25a:	32b8      	adds	r2, #184	; 0xb8
    f25c:	7810      	ldrb	r0, [r2, #0]
    f25e:	2403      	movs	r4, #3
    f260:	2200      	movs	r2, #0
    f262:	b2d1      	uxtb	r1, r2
    f264:	4281      	cmp	r1, r0
    f266:	d30d      	bcc.n	f284 <LorawanLinkCheckCallback+0x44>
    f268:	d113      	bne.n	f292 <LorawanLinkCheckCallback+0x52>
    f26a:	2203      	movs	r2, #3
    f26c:	434a      	muls	r2, r1
    f26e:	2102      	movs	r1, #2
    f270:	189a      	adds	r2, r3, r2
    f272:	3271      	adds	r2, #113	; 0x71
    f274:	7011      	strb	r1, [r2, #0]
    f276:	280f      	cmp	r0, #15
    f278:	d80b      	bhi.n	f292 <LorawanLinkCheckCallback+0x52>
    f27a:	001a      	movs	r2, r3
    f27c:	3001      	adds	r0, #1
    f27e:	32b8      	adds	r2, #184	; 0xb8
    f280:	7010      	strb	r0, [r2, #0]
    f282:	e006      	b.n	f292 <LorawanLinkCheckCallback+0x52>
    f284:	0021      	movs	r1, r4
    f286:	3201      	adds	r2, #1
    f288:	4351      	muls	r1, r2
    f28a:	316e      	adds	r1, #110	; 0x6e
    f28c:	5c59      	ldrb	r1, [r3, r1]
    f28e:	2902      	cmp	r1, #2
    f290:	d1e7      	bne.n	f262 <LorawanLinkCheckCallback+0x22>
    f292:	335d      	adds	r3, #93	; 0x5d
    f294:	781b      	ldrb	r3, [r3, #0]
    f296:	079b      	lsls	r3, r3, #30
    f298:	d501      	bpl.n	f29e <LorawanLinkCheckCallback+0x5e>
    f29a:	4b02      	ldr	r3, [pc, #8]	; (f2a4 <LorawanLinkCheckCallback+0x64>)
    f29c:	4798      	blx	r3
    f29e:	bd10      	pop	{r4, pc}
    f2a0:	20002fd8 	.word	0x20002fd8
    f2a4:	0000f219 	.word	0x0000f219

0000f2a8 <LORAWAN_Send>:
    f2a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f2aa:	4c36      	ldr	r4, [pc, #216]	; (f384 <LORAWAN_Send+0xdc>)
    f2ac:	0006      	movs	r6, r0
    f2ae:	0023      	movs	r3, r4
    f2b0:	335c      	adds	r3, #92	; 0x5c
    f2b2:	781b      	ldrb	r3, [r3, #0]
    f2b4:	250f      	movs	r5, #15
    f2b6:	b25a      	sxtb	r2, r3
    f2b8:	2a00      	cmp	r2, #0
    f2ba:	db0b      	blt.n	f2d4 <LORAWAN_Send+0x2c>
    f2bc:	3d03      	subs	r5, #3
    f2be:	065a      	lsls	r2, r3, #25
    f2c0:	d408      	bmi.n	f2d4 <LORAWAN_Send+0x2c>
    f2c2:	3d03      	subs	r5, #3
    f2c4:	07db      	lsls	r3, r3, #31
    f2c6:	d505      	bpl.n	f2d4 <LORAWAN_Send+0x2c>
    f2c8:	23da      	movs	r3, #218	; 0xda
    f2ca:	005b      	lsls	r3, r3, #1
    f2cc:	5ce7      	ldrb	r7, [r4, r3]
    f2ce:	2f00      	cmp	r7, #0
    f2d0:	d102      	bne.n	f2d8 <LORAWAN_Send+0x30>
    f2d2:	2511      	movs	r5, #17
    f2d4:	0028      	movs	r0, r5
    f2d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f2d8:	2800      	cmp	r0, #0
    f2da:	d10d      	bne.n	f2f8 <LORAWAN_Send+0x50>
    f2dc:	2700      	movs	r7, #0
    f2de:	6e23      	ldr	r3, [r4, #96]	; 0x60
    f2e0:	3301      	adds	r3, #1
    f2e2:	d123      	bne.n	f32c <LORAWAN_Send+0x84>
    f2e4:	2001      	movs	r0, #1
    f2e6:	345c      	adds	r4, #92	; 0x5c
    f2e8:	78a3      	ldrb	r3, [r4, #2]
    f2ea:	210b      	movs	r1, #11
    f2ec:	4303      	orrs	r3, r0
    f2ee:	70a3      	strb	r3, [r4, #2]
    f2f0:	4b25      	ldr	r3, [pc, #148]	; (f388 <LORAWAN_Send+0xe0>)
    f2f2:	4798      	blx	r3
    f2f4:	250d      	movs	r5, #13
    f2f6:	e7ed      	b.n	f2d4 <LORAWAN_Send+0x2c>
    f2f8:	7843      	ldrb	r3, [r0, #1]
    f2fa:	7a02      	ldrb	r2, [r0, #8]
    f2fc:	3b01      	subs	r3, #1
    f2fe:	b2db      	uxtb	r3, r3
    f300:	9201      	str	r2, [sp, #4]
    f302:	2bdf      	cmp	r3, #223	; 0xdf
    f304:	d902      	bls.n	f30c <LORAWAN_Send+0x64>
    f306:	250a      	movs	r5, #10
    f308:	2a00      	cmp	r2, #0
    f30a:	d1e3      	bne.n	f2d4 <LORAWAN_Send+0x2c>
    f30c:	4b1f      	ldr	r3, [pc, #124]	; (f38c <LORAWAN_Send+0xe4>)
    f30e:	4798      	blx	r3
    f310:	4684      	mov	ip, r0
    f312:	9b01      	ldr	r3, [sp, #4]
    f314:	9000      	str	r0, [sp, #0]
    f316:	4463      	add	r3, ip
    f318:	001d      	movs	r5, r3
    f31a:	4b1d      	ldr	r3, [pc, #116]	; (f390 <LORAWAN_Send+0xe8>)
    f31c:	4798      	blx	r3
    f31e:	4285      	cmp	r5, r0
    f320:	dddc      	ble.n	f2dc <LORAWAN_Send+0x34>
    f322:	9b00      	ldr	r3, [sp, #0]
    f324:	250e      	movs	r5, #14
    f326:	2b00      	cmp	r3, #0
    f328:	d0d4      	beq.n	f2d4 <LORAWAN_Send+0x2c>
    f32a:	e7d8      	b.n	f2de <LORAWAN_Send+0x36>
    f32c:	0023      	movs	r3, r4
    f32e:	33d4      	adds	r3, #212	; 0xd4
    f330:	781b      	ldrb	r3, [r3, #0]
    f332:	2b04      	cmp	r3, #4
    f334:	d01d      	beq.n	f372 <LORAWAN_Send+0xca>
    f336:	0023      	movs	r3, r4
    f338:	33d4      	adds	r3, #212	; 0xd4
    f33a:	781b      	ldrb	r3, [r3, #0]
    f33c:	2b01      	cmp	r3, #1
    f33e:	d105      	bne.n	f34c <LORAWAN_Send+0xa4>
    f340:	0023      	movs	r3, r4
    f342:	335c      	adds	r3, #92	; 0x5c
    f344:	781a      	ldrb	r2, [r3, #0]
    f346:	230e      	movs	r3, #14
    f348:	421a      	tst	r2, r3
    f34a:	d1c2      	bne.n	f2d2 <LORAWAN_Send+0x2a>
    f34c:	0023      	movs	r3, r4
    f34e:	33dc      	adds	r3, #220	; 0xdc
    f350:	2f00      	cmp	r7, #0
    f352:	d113      	bne.n	f37c <LORAWAN_Send+0xd4>
    f354:	2508      	movs	r5, #8
    f356:	601e      	str	r6, [r3, #0]
    f358:	23da      	movs	r3, #218	; 0xda
    f35a:	2200      	movs	r2, #0
    f35c:	005b      	lsls	r3, r3, #1
    f35e:	54e2      	strb	r2, [r4, r3]
    f360:	2001      	movs	r0, #1
    f362:	4b0c      	ldr	r3, [pc, #48]	; (f394 <LORAWAN_Send+0xec>)
    f364:	4798      	blx	r3
    f366:	2320      	movs	r3, #32
    f368:	346c      	adds	r4, #108	; 0x6c
    f36a:	7822      	ldrb	r2, [r4, #0]
    f36c:	4313      	orrs	r3, r2
    f36e:	7023      	strb	r3, [r4, #0]
    f370:	e7b0      	b.n	f2d4 <LORAWAN_Send+0x2c>
    f372:	4b09      	ldr	r3, [pc, #36]	; (f398 <LORAWAN_Send+0xf0>)
    f374:	4798      	blx	r3
    f376:	2808      	cmp	r0, #8
    f378:	d1ab      	bne.n	f2d2 <LORAWAN_Send+0x2a>
    f37a:	e7dc      	b.n	f336 <LORAWAN_Send+0x8e>
    f37c:	2200      	movs	r2, #0
    f37e:	2511      	movs	r5, #17
    f380:	601a      	str	r2, [r3, #0]
    f382:	e7e9      	b.n	f358 <LORAWAN_Send+0xb0>
    f384:	20002fd8 	.word	0x20002fd8
    f388:	00008e61 	.word	0x00008e61
    f38c:	0000edc5 	.word	0x0000edc5
    f390:	0000ee05 	.word	0x0000ee05
    f394:	0000d3c1 	.word	0x0000d3c1
    f398:	000115e9 	.word	0x000115e9

0000f39c <AutomaticReplyCallback>:
    f39c:	b510      	push	{r4, lr}
    f39e:	4c0d      	ldr	r4, [pc, #52]	; (f3d4 <AutomaticReplyCallback+0x38>)
    f3a0:	0023      	movs	r3, r4
    f3a2:	33d4      	adds	r3, #212	; 0xd4
    f3a4:	781b      	ldrb	r3, [r3, #0]
    f3a6:	2b01      	cmp	r3, #1
    f3a8:	d10e      	bne.n	f3c8 <AutomaticReplyCallback+0x2c>
    f3aa:	0022      	movs	r2, r4
    f3ac:	210e      	movs	r1, #14
    f3ae:	325c      	adds	r2, #92	; 0x5c
    f3b0:	7813      	ldrb	r3, [r2, #0]
    f3b2:	438b      	bics	r3, r1
    f3b4:	7013      	strb	r3, [r2, #0]
    f3b6:	4b08      	ldr	r3, [pc, #32]	; (f3d8 <AutomaticReplyCallback+0x3c>)
    f3b8:	2000      	movs	r0, #0
    f3ba:	4798      	blx	r3
    f3bc:	2208      	movs	r2, #8
    f3be:	346c      	adds	r4, #108	; 0x6c
    f3c0:	7823      	ldrb	r3, [r4, #0]
    f3c2:	4393      	bics	r3, r2
    f3c4:	7023      	strb	r3, [r4, #0]
    f3c6:	bd10      	pop	{r4, pc}
    f3c8:	2b04      	cmp	r3, #4
    f3ca:	d1f4      	bne.n	f3b6 <AutomaticReplyCallback+0x1a>
    f3cc:	4b03      	ldr	r3, [pc, #12]	; (f3dc <AutomaticReplyCallback+0x40>)
    f3ce:	4798      	blx	r3
    f3d0:	e7f1      	b.n	f3b6 <AutomaticReplyCallback+0x1a>
    f3d2:	46c0      	nop			; (mov r8, r8)
    f3d4:	20002fd8 	.word	0x20002fd8
    f3d8:	0000f2a9 	.word	0x0000f2a9
    f3dc:	0000de65 	.word	0x0000de65

0000f3e0 <UpdateCurrentDataRate>:
    f3e0:	b510      	push	{r4, lr}
    f3e2:	4b04      	ldr	r3, [pc, #16]	; (f3f4 <UpdateCurrentDataRate+0x14>)
    f3e4:	210c      	movs	r1, #12
    f3e6:	33bf      	adds	r3, #191	; 0xbf
    f3e8:	7018      	strb	r0, [r3, #0]
    f3ea:	2001      	movs	r0, #1
    f3ec:	4b02      	ldr	r3, [pc, #8]	; (f3f8 <UpdateCurrentDataRate+0x18>)
    f3ee:	4798      	blx	r3
    f3f0:	bd10      	pop	{r4, pc}
    f3f2:	46c0      	nop			; (mov r8, r8)
    f3f4:	20002fd8 	.word	0x20002fd8
    f3f8:	00008e61 	.word	0x00008e61

0000f3fc <UpdateDLSettings>:
    f3fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f3fe:	466b      	mov	r3, sp
    f400:	1dde      	adds	r6, r3, #7
    f402:	1d9c      	adds	r4, r3, #6
    f404:	71d8      	strb	r0, [r3, #7]
    f406:	7021      	strb	r1, [r4, #0]
    f408:	2017      	movs	r0, #23
    f40a:	0031      	movs	r1, r6
    f40c:	4d0c      	ldr	r5, [pc, #48]	; (f440 <UpdateDLSettings+0x44>)
    f40e:	47a8      	blx	r5
    f410:	2808      	cmp	r0, #8
    f412:	d107      	bne.n	f424 <UpdateDLSettings+0x28>
    f414:	4b0b      	ldr	r3, [pc, #44]	; (f444 <UpdateDLSettings+0x48>)
    f416:	7832      	ldrb	r2, [r6, #0]
    f418:	334e      	adds	r3, #78	; 0x4e
    f41a:	701a      	strb	r2, [r3, #0]
    f41c:	2100      	movs	r1, #0
    f41e:	3807      	subs	r0, #7
    f420:	4b09      	ldr	r3, [pc, #36]	; (f448 <UpdateDLSettings+0x4c>)
    f422:	4798      	blx	r3
    f424:	0021      	movs	r1, r4
    f426:	2018      	movs	r0, #24
    f428:	47a8      	blx	r5
    f42a:	2808      	cmp	r0, #8
    f42c:	d107      	bne.n	f43e <UpdateDLSettings+0x42>
    f42e:	2101      	movs	r1, #1
    f430:	4b04      	ldr	r3, [pc, #16]	; (f444 <UpdateDLSettings+0x48>)
    f432:	7822      	ldrb	r2, [r4, #0]
    f434:	33ce      	adds	r3, #206	; 0xce
    f436:	701a      	strb	r2, [r3, #0]
    f438:	0008      	movs	r0, r1
    f43a:	4b03      	ldr	r3, [pc, #12]	; (f448 <UpdateDLSettings+0x4c>)
    f43c:	4798      	blx	r3
    f43e:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    f440:	0000c2e9 	.word	0x0000c2e9
    f444:	20002fd8 	.word	0x20002fd8
    f448:	00008e61 	.word	0x00008e61

0000f44c <UpdateTxPower>:
    f44c:	b510      	push	{r4, lr}
    f44e:	4b04      	ldr	r3, [pc, #16]	; (f460 <UpdateTxPower+0x14>)
    f450:	210a      	movs	r1, #10
    f452:	33c1      	adds	r3, #193	; 0xc1
    f454:	7018      	strb	r0, [r3, #0]
    f456:	2000      	movs	r0, #0
    f458:	4b02      	ldr	r3, [pc, #8]	; (f464 <UpdateTxPower+0x18>)
    f45a:	4798      	blx	r3
    f45c:	bd10      	pop	{r4, pc}
    f45e:	46c0      	nop			; (mov r8, r8)
    f460:	20002fd8 	.word	0x20002fd8
    f464:	00008e61 	.word	0x00008e61

0000f468 <UpdateRetransmissionAckTimeoutState>:
    f468:	4b10      	ldr	r3, [pc, #64]	; (f4ac <UpdateRetransmissionAckTimeoutState+0x44>)
    f46a:	b513      	push	{r0, r1, r4, lr}
    f46c:	001a      	movs	r2, r3
    f46e:	32d4      	adds	r2, #212	; 0xd4
    f470:	7812      	ldrb	r2, [r2, #0]
    f472:	2a01      	cmp	r2, #1
    f474:	d108      	bne.n	f488 <UpdateRetransmissionAckTimeoutState+0x20>
    f476:	0018      	movs	r0, r3
    f478:	210e      	movs	r1, #14
    f47a:	305c      	adds	r0, #92	; 0x5c
    f47c:	7802      	ldrb	r2, [r0, #0]
    f47e:	438a      	bics	r2, r1
    f480:	0011      	movs	r1, r2
    f482:	220c      	movs	r2, #12
    f484:	430a      	orrs	r2, r1
    f486:	7002      	strb	r2, [r0, #0]
    f488:	001a      	movs	r2, r3
    f48a:	32b2      	adds	r2, #178	; 0xb2
    f48c:	8811      	ldrh	r1, [r2, #0]
    f48e:	22c0      	movs	r2, #192	; 0xc0
    f490:	32ff      	adds	r2, #255	; 0xff
    f492:	5c9a      	ldrb	r2, [r3, r2]
    f494:	33c8      	adds	r3, #200	; 0xc8
    f496:	1a8a      	subs	r2, r1, r2
    f498:	21fa      	movs	r1, #250	; 0xfa
    f49a:	0089      	lsls	r1, r1, #2
    f49c:	4351      	muls	r1, r2
    f49e:	2200      	movs	r2, #0
    f4a0:	7818      	ldrb	r0, [r3, #0]
    f4a2:	4c03      	ldr	r4, [pc, #12]	; (f4b0 <UpdateRetransmissionAckTimeoutState+0x48>)
    f4a4:	9200      	str	r2, [sp, #0]
    f4a6:	4b03      	ldr	r3, [pc, #12]	; (f4b4 <UpdateRetransmissionAckTimeoutState+0x4c>)
    f4a8:	47a0      	blx	r4
    f4aa:	bd13      	pop	{r0, r1, r4, pc}
    f4ac:	20002fd8 	.word	0x20002fd8
    f4b0:	0000c739 	.word	0x0000c739
    f4b4:	0001037d 	.word	0x0001037d

0000f4b8 <UpdateReceiveWindow2Parameters>:
    f4b8:	4b06      	ldr	r3, [pc, #24]	; (f4d4 <UpdateReceiveWindow2Parameters+0x1c>)
    f4ba:	b510      	push	{r4, lr}
    f4bc:	001a      	movs	r2, r3
    f4be:	334a      	adds	r3, #74	; 0x4a
    f4c0:	8018      	strh	r0, [r3, #0]
    f4c2:	324e      	adds	r2, #78	; 0x4e
    f4c4:	0c00      	lsrs	r0, r0, #16
    f4c6:	8058      	strh	r0, [r3, #2]
    f4c8:	7011      	strb	r1, [r2, #0]
    f4ca:	2001      	movs	r0, #1
    f4cc:	2100      	movs	r1, #0
    f4ce:	4b02      	ldr	r3, [pc, #8]	; (f4d8 <UpdateReceiveWindow2Parameters+0x20>)
    f4d0:	4798      	blx	r3
    f4d2:	bd10      	pop	{r4, pc}
    f4d4:	20002fd8 	.word	0x20002fd8
    f4d8:	00008e61 	.word	0x00008e61

0000f4dc <ResetParametersForConfirmedTransmission>:
    f4dc:	4b0a      	ldr	r3, [pc, #40]	; (f508 <ResetParametersForConfirmedTransmission+0x2c>)
    f4de:	001a      	movs	r2, r3
    f4e0:	32d4      	adds	r2, #212	; 0xd4
    f4e2:	7812      	ldrb	r2, [r2, #0]
    f4e4:	2a01      	cmp	r2, #1
    f4e6:	d105      	bne.n	f4f4 <ResetParametersForConfirmedTransmission+0x18>
    f4e8:	0019      	movs	r1, r3
    f4ea:	200e      	movs	r0, #14
    f4ec:	315c      	adds	r1, #92	; 0x5c
    f4ee:	780a      	ldrb	r2, [r1, #0]
    f4f0:	4382      	bics	r2, r0
    f4f2:	700a      	strb	r2, [r1, #0]
    f4f4:	001a      	movs	r2, r3
    f4f6:	2100      	movs	r1, #0
    f4f8:	336c      	adds	r3, #108	; 0x6c
    f4fa:	32bc      	adds	r2, #188	; 0xbc
    f4fc:	7011      	strb	r1, [r2, #0]
    f4fe:	781a      	ldrb	r2, [r3, #0]
    f500:	3101      	adds	r1, #1
    f502:	438a      	bics	r2, r1
    f504:	701a      	strb	r2, [r3, #0]
    f506:	4770      	bx	lr
    f508:	20002fd8 	.word	0x20002fd8

0000f50c <ResetParametersForUnconfirmedTransmission>:
    f50c:	4b07      	ldr	r3, [pc, #28]	; (f52c <ResetParametersForUnconfirmedTransmission+0x20>)
    f50e:	001a      	movs	r2, r3
    f510:	32d4      	adds	r2, #212	; 0xd4
    f512:	7812      	ldrb	r2, [r2, #0]
    f514:	2a01      	cmp	r2, #1
    f516:	d105      	bne.n	f524 <ResetParametersForUnconfirmedTransmission+0x18>
    f518:	0019      	movs	r1, r3
    f51a:	200e      	movs	r0, #14
    f51c:	315c      	adds	r1, #92	; 0x5c
    f51e:	780a      	ldrb	r2, [r1, #0]
    f520:	4382      	bics	r2, r0
    f522:	700a      	strb	r2, [r1, #0]
    f524:	2200      	movs	r2, #0
    f526:	33bb      	adds	r3, #187	; 0xbb
    f528:	701a      	strb	r2, [r3, #0]
    f52a:	4770      	bx	lr
    f52c:	20002fd8 	.word	0x20002fd8

0000f530 <SetJoinFailState>:
    f530:	b570      	push	{r4, r5, r6, lr}
    f532:	4c15      	ldr	r4, [pc, #84]	; (f588 <SetJoinFailState+0x58>)
    f534:	2604      	movs	r6, #4
    f536:	0025      	movs	r5, r4
    f538:	356c      	adds	r5, #108	; 0x6c
    f53a:	782a      	ldrb	r2, [r5, #0]
    f53c:	0021      	movs	r1, r4
    f53e:	43b2      	bics	r2, r6
    f540:	702a      	strb	r2, [r5, #0]
    f542:	22f0      	movs	r2, #240	; 0xf0
    f544:	315c      	adds	r1, #92	; 0x5c
    f546:	780b      	ldrb	r3, [r1, #0]
    f548:	4013      	ands	r3, r2
    f54a:	700b      	strb	r3, [r1, #0]
    f54c:	18a3      	adds	r3, r4, r2
    f54e:	781b      	ldrb	r3, [r3, #0]
    f550:	069b      	lsls	r3, r3, #26
    f552:	d503      	bpl.n	f55c <SetJoinFailState+0x2c>
    f554:	0023      	movs	r3, r4
    f556:	2200      	movs	r2, #0
    f558:	335b      	adds	r3, #91	; 0x5b
    f55a:	701a      	strb	r2, [r3, #0]
    f55c:	490b      	ldr	r1, [pc, #44]	; (f58c <SetJoinFailState+0x5c>)
    f55e:	794a      	ldrb	r2, [r1, #5]
    f560:	790b      	ldrb	r3, [r1, #4]
    f562:	0212      	lsls	r2, r2, #8
    f564:	431a      	orrs	r2, r3
    f566:	798b      	ldrb	r3, [r1, #6]
    f568:	041b      	lsls	r3, r3, #16
    f56a:	431a      	orrs	r2, r3
    f56c:	79cb      	ldrb	r3, [r1, #7]
    f56e:	061b      	lsls	r3, r3, #24
    f570:	4313      	orrs	r3, r2
    f572:	d000      	beq.n	f576 <SetJoinFailState+0x46>
    f574:	4798      	blx	r3
    f576:	2300      	movs	r3, #0
    f578:	34d0      	adds	r4, #208	; 0xd0
    f57a:	7023      	strb	r3, [r4, #0]
    f57c:	210b      	movs	r1, #11
    f57e:	4b04      	ldr	r3, [pc, #16]	; (f590 <SetJoinFailState+0x60>)
    f580:	2001      	movs	r0, #1
    f582:	4798      	blx	r3
    f584:	bd70      	pop	{r4, r5, r6, pc}
    f586:	46c0      	nop			; (mov r8, r8)
    f588:	20002fd8 	.word	0x20002fd8
    f58c:	200032ac 	.word	0x200032ac
    f590:	00008e61 	.word	0x00008e61

0000f594 <ExecuteRxParamSetupReq>:
    f594:	b5f0      	push	{r4, r5, r6, r7, lr}
    f596:	b085      	sub	sp, #20
    f598:	7805      	ldrb	r5, [r0, #0]
    f59a:	0004      	movs	r4, r0
    f59c:	1c41      	adds	r1, r0, #1
    f59e:	2204      	movs	r2, #4
    f5a0:	4b36      	ldr	r3, [pc, #216]	; (f67c <ExecuteRxParamSetupReq+0xe8>)
    f5a2:	a803      	add	r0, sp, #12
    f5a4:	4798      	blx	r3
    f5a6:	2264      	movs	r2, #100	; 0x64
    f5a8:	9b03      	ldr	r3, [sp, #12]
    f5aa:	a903      	add	r1, sp, #12
    f5ac:	021b      	lsls	r3, r3, #8
    f5ae:	0a1b      	lsrs	r3, r3, #8
    f5b0:	4353      	muls	r3, r2
    f5b2:	9303      	str	r3, [sp, #12]
    f5b4:	1d23      	adds	r3, r4, #4
    f5b6:	9301      	str	r3, [sp, #4]
    f5b8:	072b      	lsls	r3, r5, #28
    f5ba:	0f1b      	lsrs	r3, r3, #28
    f5bc:	b2da      	uxtb	r2, r3
    f5be:	9200      	str	r2, [sp, #0]
    f5c0:	aa02      	add	r2, sp, #8
    f5c2:	1c96      	adds	r6, r2, #2
    f5c4:	066d      	lsls	r5, r5, #25
    f5c6:	7033      	strb	r3, [r6, #0]
    f5c8:	1cd7      	adds	r7, r2, #3
    f5ca:	0f6d      	lsrs	r5, r5, #29
    f5cc:	2001      	movs	r0, #1
    f5ce:	4b2c      	ldr	r3, [pc, #176]	; (f680 <ExecuteRxParamSetupReq+0xec>)
    f5d0:	703d      	strb	r5, [r7, #0]
    f5d2:	4798      	blx	r3
    f5d4:	4c2b      	ldr	r4, [pc, #172]	; (f684 <ExecuteRxParamSetupReq+0xf0>)
    f5d6:	2808      	cmp	r0, #8
    f5d8:	d109      	bne.n	f5ee <ExecuteRxParamSetupReq+0x5a>
    f5da:	0023      	movs	r3, r4
    f5dc:	33b8      	adds	r3, #184	; 0xb8
    f5de:	781a      	ldrb	r2, [r3, #0]
    f5e0:	2303      	movs	r3, #3
    f5e2:	4353      	muls	r3, r2
    f5e4:	18e3      	adds	r3, r4, r3
    f5e6:	3370      	adds	r3, #112	; 0x70
    f5e8:	789a      	ldrb	r2, [r3, #2]
    f5ea:	4310      	orrs	r0, r2
    f5ec:	7098      	strb	r0, [r3, #2]
    f5ee:	0031      	movs	r1, r6
    f5f0:	200f      	movs	r0, #15
    f5f2:	4e23      	ldr	r6, [pc, #140]	; (f680 <ExecuteRxParamSetupReq+0xec>)
    f5f4:	47b0      	blx	r6
    f5f6:	2808      	cmp	r0, #8
    f5f8:	d10a      	bne.n	f610 <ExecuteRxParamSetupReq+0x7c>
    f5fa:	0023      	movs	r3, r4
    f5fc:	33b8      	adds	r3, #184	; 0xb8
    f5fe:	781a      	ldrb	r2, [r3, #0]
    f600:	2303      	movs	r3, #3
    f602:	4353      	muls	r3, r2
    f604:	2210      	movs	r2, #16
    f606:	18e3      	adds	r3, r4, r3
    f608:	3370      	adds	r3, #112	; 0x70
    f60a:	7899      	ldrb	r1, [r3, #2]
    f60c:	430a      	orrs	r2, r1
    f60e:	709a      	strb	r2, [r3, #2]
    f610:	0039      	movs	r1, r7
    f612:	2018      	movs	r0, #24
    f614:	47b0      	blx	r6
    f616:	2808      	cmp	r0, #8
    f618:	d10a      	bne.n	f630 <ExecuteRxParamSetupReq+0x9c>
    f61a:	0023      	movs	r3, r4
    f61c:	33b8      	adds	r3, #184	; 0xb8
    f61e:	781a      	ldrb	r2, [r3, #0]
    f620:	2303      	movs	r3, #3
    f622:	4353      	muls	r3, r2
    f624:	2220      	movs	r2, #32
    f626:	18e3      	adds	r3, r4, r3
    f628:	3370      	adds	r3, #112	; 0x70
    f62a:	7899      	ldrb	r1, [r3, #2]
    f62c:	430a      	orrs	r2, r1
    f62e:	709a      	strb	r2, [r3, #2]
    f630:	0023      	movs	r3, r4
    f632:	33b8      	adds	r3, #184	; 0xb8
    f634:	781a      	ldrb	r2, [r3, #0]
    f636:	2303      	movs	r3, #3
    f638:	4353      	muls	r3, r2
    f63a:	18e3      	adds	r3, r4, r3
    f63c:	3370      	adds	r3, #112	; 0x70
    f63e:	789e      	ldrb	r6, [r3, #2]
    f640:	06f3      	lsls	r3, r6, #27
    f642:	d518      	bpl.n	f676 <ExecuteRxParamSetupReq+0xe2>
    f644:	0733      	lsls	r3, r6, #28
    f646:	d516      	bpl.n	f676 <ExecuteRxParamSetupReq+0xe2>
    f648:	06b6      	lsls	r6, r6, #26
    f64a:	0ff6      	lsrs	r6, r6, #31
    f64c:	2e01      	cmp	r6, #1
    f64e:	d112      	bne.n	f676 <ExecuteRxParamSetupReq+0xe2>
    f650:	0023      	movs	r3, r4
    f652:	33ce      	adds	r3, #206	; 0xce
    f654:	701d      	strb	r5, [r3, #0]
    f656:	0031      	movs	r1, r6
    f658:	0030      	movs	r0, r6
    f65a:	4d0b      	ldr	r5, [pc, #44]	; (f688 <ExecuteRxParamSetupReq+0xf4>)
    f65c:	47a8      	blx	r5
    f65e:	9900      	ldr	r1, [sp, #0]
    f660:	9803      	ldr	r0, [sp, #12]
    f662:	4b0a      	ldr	r3, [pc, #40]	; (f68c <ExecuteRxParamSetupReq+0xf8>)
    f664:	4798      	blx	r3
    f666:	2340      	movs	r3, #64	; 0x40
    f668:	345c      	adds	r4, #92	; 0x5c
    f66a:	7862      	ldrb	r2, [r4, #1]
    f66c:	210b      	movs	r1, #11
    f66e:	4313      	orrs	r3, r2
    f670:	7063      	strb	r3, [r4, #1]
    f672:	0030      	movs	r0, r6
    f674:	47a8      	blx	r5
    f676:	9801      	ldr	r0, [sp, #4]
    f678:	b005      	add	sp, #20
    f67a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f67c:	00014ddf 	.word	0x00014ddf
    f680:	0000c2e9 	.word	0x0000c2e9
    f684:	20002fd8 	.word	0x20002fd8
    f688:	00008e61 	.word	0x00008e61
    f68c:	0000f4b9 	.word	0x0000f4b9

0000f690 <ExecuteDutyCycle>:
    f690:	b570      	push	{r4, r5, r6, lr}
    f692:	7803      	ldrb	r3, [r0, #0]
    f694:	1c46      	adds	r6, r0, #1
    f696:	2b0f      	cmp	r3, #15
    f698:	d80f      	bhi.n	f6ba <ExecuteDutyCycle+0x2a>
    f69a:	4c09      	ldr	r4, [pc, #36]	; (f6c0 <ExecuteDutyCycle+0x30>)
    f69c:	210b      	movs	r1, #11
    f69e:	0022      	movs	r2, r4
    f6a0:	2000      	movs	r0, #0
    f6a2:	3270      	adds	r2, #112	; 0x70
    f6a4:	4d07      	ldr	r5, [pc, #28]	; (f6c4 <ExecuteDutyCycle+0x34>)
    f6a6:	7013      	strb	r3, [r2, #0]
    f6a8:	47a8      	blx	r5
    f6aa:	2320      	movs	r3, #32
    f6ac:	345c      	adds	r4, #92	; 0x5c
    f6ae:	7862      	ldrb	r2, [r4, #1]
    f6b0:	210b      	movs	r1, #11
    f6b2:	4313      	orrs	r3, r2
    f6b4:	7063      	strb	r3, [r4, #1]
    f6b6:	2001      	movs	r0, #1
    f6b8:	47a8      	blx	r5
    f6ba:	0030      	movs	r0, r6
    f6bc:	bd70      	pop	{r4, r5, r6, pc}
    f6be:	46c0      	nop			; (mov r8, r8)
    f6c0:	20002fd8 	.word	0x20002fd8
    f6c4:	00008e61 	.word	0x00008e61

0000f6c8 <ExecuteDlChannel>:
    f6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    f6ca:	b089      	sub	sp, #36	; 0x24
    f6cc:	7805      	ldrb	r5, [r0, #0]
    f6ce:	ab02      	add	r3, sp, #8
    f6d0:	1c41      	adds	r1, r0, #1
    f6d2:	0007      	movs	r7, r0
    f6d4:	719d      	strb	r5, [r3, #6]
    f6d6:	1d9e      	adds	r6, r3, #6
    f6d8:	2204      	movs	r2, #4
    f6da:	4b23      	ldr	r3, [pc, #140]	; (f768 <ExecuteDlChannel+0xa0>)
    f6dc:	a805      	add	r0, sp, #20
    f6de:	4798      	blx	r3
    f6e0:	9b05      	ldr	r3, [sp, #20]
    f6e2:	a904      	add	r1, sp, #16
    f6e4:	021c      	lsls	r4, r3, #8
    f6e6:	2364      	movs	r3, #100	; 0x64
    f6e8:	0a24      	lsrs	r4, r4, #8
    f6ea:	435c      	muls	r4, r3
    f6ec:	1d3b      	adds	r3, r7, #4
    f6ee:	9301      	str	r3, [sp, #4]
    f6f0:	2301      	movs	r3, #1
    f6f2:	2015      	movs	r0, #21
    f6f4:	704b      	strb	r3, [r1, #1]
    f6f6:	4b1d      	ldr	r3, [pc, #116]	; (f76c <ExecuteDlChannel+0xa4>)
    f6f8:	9405      	str	r4, [sp, #20]
    f6fa:	700d      	strb	r5, [r1, #0]
    f6fc:	4798      	blx	r3
    f6fe:	2808      	cmp	r0, #8
    f700:	d12f      	bne.n	f762 <ExecuteDlChannel+0x9a>
    f702:	ab02      	add	r3, sp, #8
    f704:	1ddd      	adds	r5, r3, #7
    f706:	2300      	movs	r3, #0
    f708:	702b      	strb	r3, [r5, #0]
    f70a:	7833      	ldrb	r3, [r6, #0]
    f70c:	af06      	add	r7, sp, #24
    f70e:	713b      	strb	r3, [r7, #4]
    f710:	002a      	movs	r2, r5
    f712:	0031      	movs	r1, r6
    f714:	300e      	adds	r0, #14
    f716:	4b16      	ldr	r3, [pc, #88]	; (f770 <ExecuteDlChannel+0xa8>)
    f718:	9406      	str	r4, [sp, #24]
    f71a:	4798      	blx	r3
    f71c:	280a      	cmp	r0, #10
    f71e:	d00d      	beq.n	f73c <ExecuteDlChannel+0x74>
    f720:	782a      	ldrb	r2, [r5, #0]
    f722:	2a01      	cmp	r2, #1
    f724:	d10a      	bne.n	f73c <ExecuteDlChannel+0x74>
    f726:	4b13      	ldr	r3, [pc, #76]	; (f774 <ExecuteDlChannel+0xac>)
    f728:	0019      	movs	r1, r3
    f72a:	31b8      	adds	r1, #184	; 0xb8
    f72c:	7808      	ldrb	r0, [r1, #0]
    f72e:	2103      	movs	r1, #3
    f730:	4341      	muls	r1, r0
    f732:	185b      	adds	r3, r3, r1
    f734:	3370      	adds	r3, #112	; 0x70
    f736:	78d9      	ldrb	r1, [r3, #3]
    f738:	430a      	orrs	r2, r1
    f73a:	70da      	strb	r2, [r3, #3]
    f73c:	0039      	movs	r1, r7
    f73e:	2034      	movs	r0, #52	; 0x34
    f740:	4b0d      	ldr	r3, [pc, #52]	; (f778 <ExecuteDlChannel+0xb0>)
    f742:	4798      	blx	r3
    f744:	2808      	cmp	r0, #8
    f746:	d10c      	bne.n	f762 <ExecuteDlChannel+0x9a>
    f748:	4b0a      	ldr	r3, [pc, #40]	; (f774 <ExecuteDlChannel+0xac>)
    f74a:	001a      	movs	r2, r3
    f74c:	32b8      	adds	r2, #184	; 0xb8
    f74e:	7811      	ldrb	r1, [r2, #0]
    f750:	2203      	movs	r2, #3
    f752:	434a      	muls	r2, r1
    f754:	189b      	adds	r3, r3, r2
    f756:	2280      	movs	r2, #128	; 0x80
    f758:	3370      	adds	r3, #112	; 0x70
    f75a:	7899      	ldrb	r1, [r3, #2]
    f75c:	4252      	negs	r2, r2
    f75e:	430a      	orrs	r2, r1
    f760:	709a      	strb	r2, [r3, #2]
    f762:	9801      	ldr	r0, [sp, #4]
    f764:	b009      	add	sp, #36	; 0x24
    f766:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f768:	00014ddf 	.word	0x00014ddf
    f76c:	0000c2e9 	.word	0x0000c2e9
    f770:	0000c2cd 	.word	0x0000c2cd
    f774:	20002fd8 	.word	0x20002fd8
    f778:	0000c305 	.word	0x0000c305

0000f77c <ExecuteTxParamSetup>:
    f77c:	220f      	movs	r2, #15
    f77e:	b513      	push	{r0, r1, r4, lr}
    f780:	7803      	ldrb	r3, [r0, #0]
    f782:	4c0f      	ldr	r4, [pc, #60]	; (f7c0 <ExecuteTxParamSetup+0x44>)
    f784:	401a      	ands	r2, r3
    f786:	5ca2      	ldrb	r2, [r4, r2]
    f788:	2401      	movs	r4, #1
    f78a:	a901      	add	r1, sp, #4
    f78c:	700a      	strb	r2, [r1, #0]
    f78e:	111a      	asrs	r2, r3, #4
    f790:	115b      	asrs	r3, r3, #5
    f792:	4023      	ands	r3, r4
    f794:	40a3      	lsls	r3, r4
    f796:	4022      	ands	r2, r4
    f798:	4313      	orrs	r3, r2
    f79a:	704b      	strb	r3, [r1, #1]
    f79c:	1904      	adds	r4, r0, r4
    f79e:	4b09      	ldr	r3, [pc, #36]	; (f7c4 <ExecuteTxParamSetup+0x48>)
    f7a0:	2035      	movs	r0, #53	; 0x35
    f7a2:	4798      	blx	r3
    f7a4:	2808      	cmp	r0, #8
    f7a6:	d009      	beq.n	f7bc <ExecuteTxParamSetup+0x40>
    f7a8:	4b07      	ldr	r3, [pc, #28]	; (f7c8 <ExecuteTxParamSetup+0x4c>)
    f7aa:	001a      	movs	r2, r3
    f7ac:	32b8      	adds	r2, #184	; 0xb8
    f7ae:	7811      	ldrb	r1, [r2, #0]
    f7b0:	2203      	movs	r2, #3
    f7b2:	434a      	muls	r2, r1
    f7b4:	189b      	adds	r3, r3, r2
    f7b6:	22ff      	movs	r2, #255	; 0xff
    f7b8:	3371      	adds	r3, #113	; 0x71
    f7ba:	701a      	strb	r2, [r3, #0]
    f7bc:	0020      	movs	r0, r4
    f7be:	bd16      	pop	{r1, r2, r4, pc}
    f7c0:	00017398 	.word	0x00017398
    f7c4:	0000c305 	.word	0x0000c305
    f7c8:	20002fd8 	.word	0x20002fd8

0000f7cc <ExecuteLinkAdr>:
    f7cc:	220f      	movs	r2, #15
    f7ce:	b5f0      	push	{r4, r5, r6, r7, lr}
    f7d0:	0005      	movs	r5, r0
    f7d2:	7803      	ldrb	r3, [r0, #0]
    f7d4:	b089      	sub	sp, #36	; 0x24
    f7d6:	401a      	ands	r2, r3
    f7d8:	a905      	add	r1, sp, #20
    f7da:	700a      	strb	r2, [r1, #0]
    f7dc:	24b8      	movs	r4, #184	; 0xb8
    f7de:	aa04      	add	r2, sp, #16
    f7e0:	1d96      	adds	r6, r2, #6
    f7e2:	091b      	lsrs	r3, r3, #4
    f7e4:	7153      	strb	r3, [r2, #5]
    f7e6:	1c41      	adds	r1, r0, #1
    f7e8:	2202      	movs	r2, #2
    f7ea:	0030      	movs	r0, r6
    f7ec:	4b38      	ldr	r3, [pc, #224]	; (f8d0 <ExecuteLinkAdr+0x104>)
    f7ee:	4798      	blx	r3
    f7f0:	2201      	movs	r2, #1
    f7f2:	1d2b      	adds	r3, r5, #4
    f7f4:	9303      	str	r3, [sp, #12]
    f7f6:	78eb      	ldrb	r3, [r5, #3]
    f7f8:	4f36      	ldr	r7, [pc, #216]	; (f8d4 <ExecuteLinkAdr+0x108>)
    f7fa:	065b      	lsls	r3, r3, #25
    f7fc:	0f5b      	lsrs	r3, r3, #29
    f7fe:	34ff      	adds	r4, #255	; 0xff
    f800:	9300      	str	r3, [sp, #0]
    f802:	5d3b      	ldrb	r3, [r7, r4]
    f804:	a906      	add	r1, sp, #24
    f806:	4393      	bics	r3, r2
    f808:	1892      	adds	r2, r2, r2
    f80a:	4393      	bics	r3, r2
    f80c:	3202      	adds	r2, #2
    f80e:	4393      	bics	r3, r2
    f810:	553b      	strb	r3, [r7, r4]
    f812:	466b      	mov	r3, sp
    f814:	781b      	ldrb	r3, [r3, #0]
    f816:	8836      	ldrh	r6, [r6, #0]
    f818:	700b      	strb	r3, [r1, #0]
    f81a:	2038      	movs	r0, #56	; 0x38
    f81c:	4b2e      	ldr	r3, [pc, #184]	; (f8d8 <ExecuteLinkAdr+0x10c>)
    f81e:	804e      	strh	r6, [r1, #2]
    f820:	4798      	blx	r3
    f822:	2808      	cmp	r0, #8
    f824:	d116      	bne.n	f854 <ExecuteLinkAdr+0x88>
    f826:	466b      	mov	r3, sp
    f828:	781b      	ldrb	r3, [r3, #0]
    f82a:	a907      	add	r1, sp, #28
    f82c:	708b      	strb	r3, [r1, #2]
    f82e:	3014      	adds	r0, #20
    f830:	4b2a      	ldr	r3, [pc, #168]	; (f8dc <ExecuteLinkAdr+0x110>)
    f832:	800e      	strh	r6, [r1, #0]
    f834:	4798      	blx	r3
    f836:	2201      	movs	r2, #1
    f838:	5d3b      	ldrb	r3, [r7, r4]
    f83a:	2010      	movs	r0, #16
    f83c:	4313      	orrs	r3, r2
    f83e:	553b      	strb	r3, [r7, r4]
    f840:	ab04      	add	r3, sp, #16
    f842:	1d59      	adds	r1, r3, #5
    f844:	4b24      	ldr	r3, [pc, #144]	; (f8d8 <ExecuteLinkAdr+0x10c>)
    f846:	4798      	blx	r3
    f848:	2808      	cmp	r0, #8
    f84a:	d103      	bne.n	f854 <ExecuteLinkAdr+0x88>
    f84c:	2202      	movs	r2, #2
    f84e:	5d3b      	ldrb	r3, [r7, r4]
    f850:	4313      	orrs	r3, r2
    f852:	553b      	strb	r3, [r7, r4]
    f854:	af05      	add	r7, sp, #20
    f856:	4b20      	ldr	r3, [pc, #128]	; (f8d8 <ExecuteLinkAdr+0x10c>)
    f858:	0039      	movs	r1, r7
    f85a:	201d      	movs	r0, #29
    f85c:	4798      	blx	r3
    f85e:	4b1d      	ldr	r3, [pc, #116]	; (f8d4 <ExecuteLinkAdr+0x108>)
    f860:	2808      	cmp	r0, #8
    f862:	d103      	bne.n	f86c <ExecuteLinkAdr+0xa0>
    f864:	2204      	movs	r2, #4
    f866:	5d19      	ldrb	r1, [r3, r4]
    f868:	430a      	orrs	r2, r1
    f86a:	551a      	strb	r2, [r3, r4]
    f86c:	2207      	movs	r2, #7
    f86e:	5d19      	ldrb	r1, [r3, r4]
    f870:	4011      	ands	r1, r2
    f872:	4291      	cmp	r1, r2
    f874:	d122      	bne.n	f8bc <ExecuteLinkAdr+0xf0>
    f876:	22bc      	movs	r2, #188	; 0xbc
    f878:	32ff      	adds	r2, #255	; 0xff
    f87a:	549e      	strb	r6, [r3, r2]
    f87c:	001a      	movs	r2, r3
    f87e:	32bc      	adds	r2, #188	; 0xbc
    f880:	32ff      	adds	r2, #255	; 0xff
    f882:	0a36      	lsrs	r6, r6, #8
    f884:	7056      	strb	r6, [r2, #1]
    f886:	aa04      	add	r2, sp, #16
    f888:	7950      	ldrb	r0, [r2, #5]
    f88a:	22dc      	movs	r2, #220	; 0xdc
    f88c:	0052      	lsls	r2, r2, #1
    f88e:	5498      	strb	r0, [r3, r2]
    f890:	20be      	movs	r0, #190	; 0xbe
    f892:	2470      	movs	r4, #112	; 0x70
    f894:	78ea      	ldrb	r2, [r5, #3]
    f896:	30ff      	adds	r0, #255	; 0xff
    f898:	0912      	lsrs	r2, r2, #4
    f89a:	400a      	ands	r2, r1
    f89c:	5c19      	ldrb	r1, [r3, r0]
    f89e:	0112      	lsls	r2, r2, #4
    f8a0:	43a1      	bics	r1, r4
    f8a2:	430a      	orrs	r2, r1
    f8a4:	541a      	strb	r2, [r3, r0]
    f8a6:	78e9      	ldrb	r1, [r5, #3]
    f8a8:	3c61      	subs	r4, #97	; 0x61
    f8aa:	b2d2      	uxtb	r2, r2
    f8ac:	4021      	ands	r1, r4
    f8ae:	43a2      	bics	r2, r4
    f8b0:	430a      	orrs	r2, r1
    f8b2:	541a      	strb	r2, [r3, r0]
    f8b4:	22ba      	movs	r2, #186	; 0xba
    f8b6:	7839      	ldrb	r1, [r7, #0]
    f8b8:	32ff      	adds	r2, #255	; 0xff
    f8ba:	5499      	strb	r1, [r3, r2]
    f8bc:	22dd      	movs	r2, #221	; 0xdd
    f8be:	4905      	ldr	r1, [pc, #20]	; (f8d4 <ExecuteLinkAdr+0x108>)
    f8c0:	0052      	lsls	r2, r2, #1
    f8c2:	5c8b      	ldrb	r3, [r1, r2]
    f8c4:	9803      	ldr	r0, [sp, #12]
    f8c6:	3301      	adds	r3, #1
    f8c8:	548b      	strb	r3, [r1, r2]
    f8ca:	b009      	add	sp, #36	; 0x24
    f8cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f8ce:	46c0      	nop			; (mov r8, r8)
    f8d0:	00014ddf 	.word	0x00014ddf
    f8d4:	20002fd8 	.word	0x20002fd8
    f8d8:	0000c2e9 	.word	0x0000c2e9
    f8dc:	0000c305 	.word	0x0000c305

0000f8e0 <PrepareJoinRequestFrame>:
    f8e0:	2210      	movs	r2, #16
    f8e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f8e4:	4d1b      	ldr	r5, [pc, #108]	; (f954 <PrepareJoinRequestFrame+0x74>)
    f8e6:	4b1c      	ldr	r3, [pc, #112]	; (f958 <PrepareJoinRequestFrame+0x78>)
    f8e8:	32ff      	adds	r2, #255	; 0xff
    f8ea:	2100      	movs	r1, #0
    f8ec:	0028      	movs	r0, r5
    f8ee:	4798      	blx	r3
    f8f0:	2300      	movs	r3, #0
    f8f2:	203c      	movs	r0, #60	; 0x3c
    f8f4:	4c19      	ldr	r4, [pc, #100]	; (f95c <PrepareJoinRequestFrame+0x7c>)
    f8f6:	702b      	strb	r3, [r5, #0]
    f8f8:	1ac1      	subs	r1, r0, r3
    f8fa:	5c61      	ldrb	r1, [r4, r1]
    f8fc:	18ea      	adds	r2, r5, r3
    f8fe:	3301      	adds	r3, #1
    f900:	7051      	strb	r1, [r2, #1]
    f902:	2b08      	cmp	r3, #8
    f904:	d1f8      	bne.n	f8f8 <PrepareJoinRequestFrame+0x18>
    f906:	2300      	movs	r3, #0
    f908:	2044      	movs	r0, #68	; 0x44
    f90a:	1ac1      	subs	r1, r0, r3
    f90c:	5c61      	ldrb	r1, [r4, r1]
    f90e:	18ea      	adds	r2, r5, r3
    f910:	3301      	adds	r3, #1
    f912:	7251      	strb	r1, [r2, #9]
    f914:	2b08      	cmp	r3, #8
    f916:	d1f8      	bne.n	f90a <PrepareJoinRequestFrame+0x2a>
    f918:	4b11      	ldr	r3, [pc, #68]	; (f960 <PrepareJoinRequestFrame+0x80>)
    f91a:	4798      	blx	r3
    f91c:	4b11      	ldr	r3, [pc, #68]	; (f964 <PrepareJoinRequestFrame+0x84>)
    f91e:	4912      	ldr	r1, [pc, #72]	; (f968 <PrepareJoinRequestFrame+0x88>)
    f920:	4798      	blx	r3
    f922:	34a4      	adds	r4, #164	; 0xa4
    f924:	8021      	strh	r1, [r4, #0]
    f926:	2202      	movs	r2, #2
    f928:	0021      	movs	r1, r4
    f92a:	4810      	ldr	r0, [pc, #64]	; (f96c <PrepareJoinRequestFrame+0x8c>)
    f92c:	4c10      	ldr	r4, [pc, #64]	; (f970 <PrepareJoinRequestFrame+0x90>)
    f92e:	47a0      	blx	r4
    f930:	4e10      	ldr	r6, [pc, #64]	; (f974 <PrepareJoinRequestFrame+0x94>)
    f932:	2313      	movs	r3, #19
    f934:	0031      	movs	r1, r6
    f936:	002a      	movs	r2, r5
    f938:	480f      	ldr	r0, [pc, #60]	; (f978 <PrepareJoinRequestFrame+0x98>)
    f93a:	4d10      	ldr	r5, [pc, #64]	; (f97c <PrepareJoinRequestFrame+0x9c>)
    f93c:	47a8      	blx	r5
    f93e:	0031      	movs	r1, r6
    f940:	2204      	movs	r2, #4
    f942:	a801      	add	r0, sp, #4
    f944:	47a0      	blx	r4
    f946:	2204      	movs	r2, #4
    f948:	a901      	add	r1, sp, #4
    f94a:	480d      	ldr	r0, [pc, #52]	; (f980 <PrepareJoinRequestFrame+0xa0>)
    f94c:	47a0      	blx	r4
    f94e:	2017      	movs	r0, #23
    f950:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    f952:	46c0      	nop			; (mov r8, r8)
    f954:	20003198 	.word	0x20003198
    f958:	00014df1 	.word	0x00014df1
    f95c:	20002fd8 	.word	0x20002fd8
    f960:	00015525 	.word	0x00015525
    f964:	00011e5d 	.word	0x00011e5d
    f968:	0000ffff 	.word	0x0000ffff
    f96c:	200031a9 	.word	0x200031a9
    f970:	00014ddf 	.word	0x00014ddf
    f974:	2000206d 	.word	0x2000206d
    f978:	20002ffd 	.word	0x20002ffd
    f97c:	00011459 	.word	0x00011459
    f980:	200031ab 	.word	0x200031ab

0000f984 <ConfigureRadioRx>:
    f984:	b5f0      	push	{r4, r5, r6, r7, lr}
    f986:	b087      	sub	sp, #28
    f988:	466b      	mov	r3, sp
    f98a:	2600      	movs	r6, #0
    f98c:	1ddc      	adds	r4, r3, #7
    f98e:	71d8      	strb	r0, [r3, #7]
    f990:	729e      	strb	r6, [r3, #10]
    f992:	466a      	mov	r2, sp
    f994:	2301      	movs	r3, #1
    f996:	72d3      	strb	r3, [r2, #11]
    f998:	2215      	movs	r2, #21
    f99a:	ad03      	add	r5, sp, #12
    f99c:	4f11      	ldr	r7, [pc, #68]	; (f9e4 <ConfigureRadioRx+0x60>)
    f99e:	9100      	str	r1, [sp, #0]
    f9a0:	446a      	add	r2, sp
    f9a2:	0021      	movs	r1, r4
    f9a4:	2023      	movs	r0, #35	; 0x23
    f9a6:	80ae      	strh	r6, [r5, #4]
    f9a8:	47b8      	blx	r7
    f9aa:	2216      	movs	r2, #22
    f9ac:	0021      	movs	r1, r4
    f9ae:	446a      	add	r2, sp
    f9b0:	2024      	movs	r0, #36	; 0x24
    f9b2:	47b8      	blx	r7
    f9b4:	2217      	movs	r2, #23
    f9b6:	0021      	movs	r1, r4
    f9b8:	446a      	add	r2, sp
    f9ba:	2025      	movs	r0, #37	; 0x25
    f9bc:	47b8      	blx	r7
    f9be:	9b00      	ldr	r3, [sp, #0]
    f9c0:	0028      	movs	r0, r5
    f9c2:	9303      	str	r3, [sp, #12]
    f9c4:	4b08      	ldr	r3, [pc, #32]	; (f9e8 <ConfigureRadioRx+0x64>)
    f9c6:	80ae      	strh	r6, [r5, #4]
    f9c8:	4798      	blx	r3
    f9ca:	230a      	movs	r3, #10
    f9cc:	446b      	add	r3, sp
    f9ce:	0019      	movs	r1, r3
    f9d0:	4c06      	ldr	r4, [pc, #24]	; (f9ec <ConfigureRadioRx+0x68>)
    f9d2:	2014      	movs	r0, #20
    f9d4:	47a0      	blx	r4
    f9d6:	230b      	movs	r3, #11
    f9d8:	446b      	add	r3, sp
    f9da:	0019      	movs	r1, r3
    f9dc:	2006      	movs	r0, #6
    f9de:	47a0      	blx	r4
    f9e0:	b007      	add	sp, #28
    f9e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f9e4:	0000c2cd 	.word	0x0000c2cd
    f9e8:	0000f185 	.word	0x0000f185
    f9ec:	0000d531 	.word	0x0000d531

0000f9f0 <ConfigureRadioTx>:
    f9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f9f2:	2517      	movs	r5, #23
    f9f4:	2300      	movs	r3, #0
    f9f6:	2616      	movs	r6, #22
    f9f8:	2701      	movs	r7, #1
    f9fa:	b087      	sub	sp, #28
    f9fc:	ac01      	add	r4, sp, #4
    f9fe:	446d      	add	r5, sp
    fa00:	9001      	str	r0, [sp, #4]
    fa02:	702b      	strb	r3, [r5, #0]
    fa04:	0020      	movs	r0, r4
    fa06:	4b10      	ldr	r3, [pc, #64]	; (fa48 <ConfigureRadioTx+0x58>)
    fa08:	446e      	add	r6, sp
    fa0a:	9102      	str	r1, [sp, #8]
    fa0c:	9203      	str	r2, [sp, #12]
    fa0e:	7037      	strb	r7, [r6, #0]
    fa10:	4798      	blx	r3
    fa12:	79e3      	ldrb	r3, [r4, #7]
    fa14:	4c0d      	ldr	r4, [pc, #52]	; (fa4c <ConfigureRadioTx+0x5c>)
    fa16:	2b00      	cmp	r3, #0
    fa18:	d00b      	beq.n	fa32 <ConfigureRadioTx+0x42>
    fa1a:	23db      	movs	r3, #219	; 0xdb
    fa1c:	4a0c      	ldr	r2, [pc, #48]	; (fa50 <ConfigureRadioTx+0x60>)
    fa1e:	005b      	lsls	r3, r3, #1
    fa20:	54d7      	strb	r7, [r2, r3]
    fa22:	490c      	ldr	r1, [pc, #48]	; (fa54 <ConfigureRadioTx+0x64>)
    fa24:	200b      	movs	r0, #11
    fa26:	4b0c      	ldr	r3, [pc, #48]	; (fa58 <ConfigureRadioTx+0x68>)
    fa28:	4798      	blx	r3
    fa2a:	210a      	movs	r1, #10
    fa2c:	200b      	movs	r0, #11
    fa2e:	4469      	add	r1, sp
    fa30:	47a0      	blx	r4
    fa32:	a903      	add	r1, sp, #12
    fa34:	2004      	movs	r0, #4
    fa36:	47a0      	blx	r4
    fa38:	0031      	movs	r1, r6
    fa3a:	2014      	movs	r0, #20
    fa3c:	47a0      	blx	r4
    fa3e:	0029      	movs	r1, r5
    fa40:	2006      	movs	r0, #6
    fa42:	47a0      	blx	r4
    fa44:	b007      	add	sp, #28
    fa46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fa48:	0000f185 	.word	0x0000f185
    fa4c:	0000d531 	.word	0x0000d531
    fa50:	20002fd8 	.word	0x20002fd8
    fa54:	2000318d 	.word	0x2000318d
    fa58:	0000d445 	.word	0x0000d445

0000fa5c <LorawanGetChAndInitiateRadioTransmit>:
    fa5c:	2301      	movs	r3, #1
    fa5e:	b530      	push	{r4, r5, lr}
    fa60:	4c46      	ldr	r4, [pc, #280]	; (fb7c <LorawanGetChAndInitiateRadioTransmit+0x120>)
    fa62:	b089      	sub	sp, #36	; 0x24
    fa64:	a902      	add	r1, sp, #8
    fa66:	700b      	strb	r3, [r1, #0]
    fa68:	0023      	movs	r3, r4
    fa6a:	33c1      	adds	r3, #193	; 0xc1
    fa6c:	781b      	ldrb	r3, [r3, #0]
    fa6e:	704b      	strb	r3, [r1, #1]
    fa70:	0023      	movs	r3, r4
    fa72:	33bf      	adds	r3, #191	; 0xbf
    fa74:	781b      	ldrb	r3, [r3, #0]
    fa76:	708b      	strb	r3, [r1, #2]
    fa78:	0023      	movs	r3, r4
    fa7a:	33d4      	adds	r3, #212	; 0xd4
    fa7c:	781b      	ldrb	r3, [r3, #0]
    fa7e:	2b01      	cmp	r3, #1
    fa80:	d108      	bne.n	fa94 <LorawanGetChAndInitiateRadioTransmit+0x38>
    fa82:	0020      	movs	r0, r4
    fa84:	220e      	movs	r2, #14
    fa86:	305c      	adds	r0, #92	; 0x5c
    fa88:	7803      	ldrb	r3, [r0, #0]
    fa8a:	4393      	bics	r3, r2
    fa8c:	001a      	movs	r2, r3
    fa8e:	230c      	movs	r3, #12
    fa90:	4313      	orrs	r3, r2
    fa92:	7003      	strb	r3, [r0, #0]
    fa94:	aa05      	add	r2, sp, #20
    fa96:	202f      	movs	r0, #47	; 0x2f
    fa98:	4d39      	ldr	r5, [pc, #228]	; (fb80 <LorawanGetChAndInitiateRadioTransmit+0x124>)
    fa9a:	47a8      	blx	r5
    fa9c:	0023      	movs	r3, r4
    fa9e:	2808      	cmp	r0, #8
    faa0:	d132      	bne.n	fb08 <LorawanGetChAndInitiateRadioTransmit+0xac>
    faa2:	33d4      	adds	r3, #212	; 0xd4
    faa4:	781b      	ldrb	r3, [r3, #0]
    faa6:	ad03      	add	r5, sp, #12
    faa8:	2b04      	cmp	r3, #4
    faaa:	d104      	bne.n	fab6 <LorawanGetChAndInitiateRadioTransmit+0x5a>
    faac:	3b03      	subs	r3, #3
    faae:	702b      	strb	r3, [r5, #0]
    fab0:	0028      	movs	r0, r5
    fab2:	4b34      	ldr	r3, [pc, #208]	; (fb84 <LorawanGetChAndInitiateRadioTransmit+0x128>)
    fab4:	4798      	blx	r3
    fab6:	9805      	ldr	r0, [sp, #20]
    fab8:	4b33      	ldr	r3, [pc, #204]	; (fb88 <LorawanGetChAndInitiateRadioTransmit+0x12c>)
    faba:	9906      	ldr	r1, [sp, #24]
    fabc:	9a07      	ldr	r2, [sp, #28]
    fabe:	4798      	blx	r3
    fac0:	0023      	movs	r3, r4
    fac2:	33a6      	adds	r3, #166	; 0xa6
    fac4:	881b      	ldrh	r3, [r3, #0]
    fac6:	0028      	movs	r0, r5
    fac8:	702b      	strb	r3, [r5, #0]
    faca:	4b30      	ldr	r3, [pc, #192]	; (fb8c <LorawanGetChAndInitiateRadioTransmit+0x130>)
    facc:	606b      	str	r3, [r5, #4]
    face:	4b30      	ldr	r3, [pc, #192]	; (fb90 <LorawanGetChAndInitiateRadioTransmit+0x134>)
    fad0:	4798      	blx	r3
    fad2:	2800      	cmp	r0, #0
    fad4:	d109      	bne.n	faea <LorawanGetChAndInitiateRadioTransmit+0x8e>
    fad6:	220e      	movs	r2, #14
    fad8:	345c      	adds	r4, #92	; 0x5c
    fada:	7823      	ldrb	r3, [r4, #0]
    fadc:	4393      	bics	r3, r2
    fade:	001a      	movs	r2, r3
    fae0:	2302      	movs	r3, #2
    fae2:	4313      	orrs	r3, r2
    fae4:	7023      	strb	r3, [r4, #0]
    fae6:	b009      	add	sp, #36	; 0x24
    fae8:	bd30      	pop	{r4, r5, pc}
    faea:	23c0      	movs	r3, #192	; 0xc0
    faec:	2200      	movs	r2, #0
    faee:	33ff      	adds	r3, #255	; 0xff
    faf0:	5ce3      	ldrb	r3, [r4, r3]
    faf2:	4928      	ldr	r1, [pc, #160]	; (fb94 <LorawanGetChAndInitiateRadioTransmit+0x138>)
    faf4:	34d3      	adds	r4, #211	; 0xd3
    faf6:	4359      	muls	r1, r3
    faf8:	4b27      	ldr	r3, [pc, #156]	; (fb98 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
    fafa:	7820      	ldrb	r0, [r4, #0]
    fafc:	18c9      	adds	r1, r1, r3
    fafe:	4b27      	ldr	r3, [pc, #156]	; (fb9c <LorawanGetChAndInitiateRadioTransmit+0x140>)
    fb00:	9200      	str	r2, [sp, #0]
    fb02:	4c27      	ldr	r4, [pc, #156]	; (fba0 <LorawanGetChAndInitiateRadioTransmit+0x144>)
    fb04:	47a0      	blx	r4
    fb06:	e7ee      	b.n	fae6 <LorawanGetChAndInitiateRadioTransmit+0x8a>
    fb08:	33f0      	adds	r3, #240	; 0xf0
    fb0a:	781b      	ldrb	r3, [r3, #0]
    fb0c:	079a      	lsls	r2, r3, #30
    fb0e:	d516      	bpl.n	fb3e <LorawanGetChAndInitiateRadioTransmit+0xe2>
    fb10:	aa03      	add	r2, sp, #12
    fb12:	4924      	ldr	r1, [pc, #144]	; (fba4 <LorawanGetChAndInitiateRadioTransmit+0x148>)
    fb14:	2026      	movs	r0, #38	; 0x26
    fb16:	47a8      	blx	r5
    fb18:	9b03      	ldr	r3, [sp, #12]
    fb1a:	1c5a      	adds	r2, r3, #1
    fb1c:	d001      	beq.n	fb22 <LorawanGetChAndInitiateRadioTransmit+0xc6>
    fb1e:	3314      	adds	r3, #20
    fb20:	9303      	str	r3, [sp, #12]
    fb22:	23c0      	movs	r3, #192	; 0xc0
    fb24:	21fa      	movs	r1, #250	; 0xfa
    fb26:	33ff      	adds	r3, #255	; 0xff
    fb28:	5ce3      	ldrb	r3, [r4, r3]
    fb2a:	9a03      	ldr	r2, [sp, #12]
    fb2c:	0089      	lsls	r1, r1, #2
    fb2e:	1ad3      	subs	r3, r2, r3
    fb30:	2200      	movs	r2, #0
    fb32:	4359      	muls	r1, r3
    fb34:	34c9      	adds	r4, #201	; 0xc9
    fb36:	7820      	ldrb	r0, [r4, #0]
    fb38:	9200      	str	r2, [sp, #0]
    fb3a:	4b1b      	ldr	r3, [pc, #108]	; (fba8 <LorawanGetChAndInitiateRadioTransmit+0x14c>)
    fb3c:	e7e1      	b.n	fb02 <LorawanGetChAndInitiateRadioTransmit+0xa6>
    fb3e:	075b      	lsls	r3, r3, #29
    fb40:	d508      	bpl.n	fb54 <LorawanGetChAndInitiateRadioTransmit+0xf8>
    fb42:	aa03      	add	r2, sp, #12
    fb44:	4917      	ldr	r1, [pc, #92]	; (fba4 <LorawanGetChAndInitiateRadioTransmit+0x148>)
    fb46:	2033      	movs	r0, #51	; 0x33
    fb48:	47a8      	blx	r5
    fb4a:	9b03      	ldr	r3, [sp, #12]
    fb4c:	1c5a      	adds	r2, r3, #1
    fb4e:	d0e8      	beq.n	fb22 <LorawanGetChAndInitiateRadioTransmit+0xc6>
    fb50:	3301      	adds	r3, #1
    fb52:	e7e5      	b.n	fb20 <LorawanGetChAndInitiateRadioTransmit+0xc4>
    fb54:	0023      	movs	r3, r4
    fb56:	2201      	movs	r2, #1
    fb58:	336c      	adds	r3, #108	; 0x6c
    fb5a:	781b      	ldrb	r3, [r3, #0]
    fb5c:	401a      	ands	r2, r3
    fb5e:	d109      	bne.n	fb74 <LorawanGetChAndInitiateRadioTransmit+0x118>
    fb60:	23c0      	movs	r3, #192	; 0xc0
    fb62:	33ff      	adds	r3, #255	; 0xff
    fb64:	5ce3      	ldrb	r3, [r4, r3]
    fb66:	490b      	ldr	r1, [pc, #44]	; (fb94 <LorawanGetChAndInitiateRadioTransmit+0x138>)
    fb68:	34c9      	adds	r4, #201	; 0xc9
    fb6a:	4359      	muls	r1, r3
    fb6c:	4b0a      	ldr	r3, [pc, #40]	; (fb98 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
    fb6e:	7820      	ldrb	r0, [r4, #0]
    fb70:	18c9      	adds	r1, r1, r3
    fb72:	e7e1      	b.n	fb38 <LorawanGetChAndInitiateRadioTransmit+0xdc>
    fb74:	4b0d      	ldr	r3, [pc, #52]	; (fbac <LorawanGetChAndInitiateRadioTransmit+0x150>)
    fb76:	4798      	blx	r3
    fb78:	e7b5      	b.n	fae6 <LorawanGetChAndInitiateRadioTransmit+0x8a>
    fb7a:	46c0      	nop			; (mov r8, r8)
    fb7c:	20002fd8 	.word	0x20002fd8
    fb80:	0000c2cd 	.word	0x0000c2cd
    fb84:	0000e755 	.word	0x0000e755
    fb88:	0000f9f1 	.word	0x0000f9f1
    fb8c:	200031a8 	.word	0x200031a8
    fb90:	0000de81 	.word	0x0000de81
    fb94:	fffffc18 	.word	0xfffffc18
    fb98:	001e8480 	.word	0x001e8480
    fb9c:	0000fbb1 	.word	0x0000fbb1
    fba0:	0000c739 	.word	0x0000c739
    fba4:	20003097 	.word	0x20003097
    fba8:	0000fc65 	.word	0x0000fc65
    fbac:	0000f469 	.word	0x0000f469

0000fbb0 <TransmissionErrorCallback>:
    fbb0:	b530      	push	{r4, r5, lr}
    fbb2:	4c22      	ldr	r4, [pc, #136]	; (fc3c <TransmissionErrorCallback+0x8c>)
    fbb4:	2501      	movs	r5, #1
    fbb6:	0023      	movs	r3, r4
    fbb8:	b08b      	sub	sp, #44	; 0x2c
    fbba:	a903      	add	r1, sp, #12
    fbbc:	700d      	strb	r5, [r1, #0]
    fbbe:	33c1      	adds	r3, #193	; 0xc1
    fbc0:	781b      	ldrb	r3, [r3, #0]
    fbc2:	aa07      	add	r2, sp, #28
    fbc4:	704b      	strb	r3, [r1, #1]
    fbc6:	0023      	movs	r3, r4
    fbc8:	33bf      	adds	r3, #191	; 0xbf
    fbca:	781b      	ldrb	r3, [r3, #0]
    fbcc:	202f      	movs	r0, #47	; 0x2f
    fbce:	708b      	strb	r3, [r1, #2]
    fbd0:	4b1b      	ldr	r3, [pc, #108]	; (fc40 <TransmissionErrorCallback+0x90>)
    fbd2:	4798      	blx	r3
    fbd4:	2808      	cmp	r0, #8
    fbd6:	d121      	bne.n	fc1c <TransmissionErrorCallback+0x6c>
    fbd8:	a804      	add	r0, sp, #16
    fbda:	4b1a      	ldr	r3, [pc, #104]	; (fc44 <TransmissionErrorCallback+0x94>)
    fbdc:	7005      	strb	r5, [r0, #0]
    fbde:	4798      	blx	r3
    fbe0:	9807      	ldr	r0, [sp, #28]
    fbe2:	4b19      	ldr	r3, [pc, #100]	; (fc48 <TransmissionErrorCallback+0x98>)
    fbe4:	9908      	ldr	r1, [sp, #32]
    fbe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    fbe8:	4798      	blx	r3
    fbea:	0023      	movs	r3, r4
    fbec:	33a6      	adds	r3, #166	; 0xa6
    fbee:	881b      	ldrh	r3, [r3, #0]
    fbf0:	a805      	add	r0, sp, #20
    fbf2:	7003      	strb	r3, [r0, #0]
    fbf4:	4b15      	ldr	r3, [pc, #84]	; (fc4c <TransmissionErrorCallback+0x9c>)
    fbf6:	6043      	str	r3, [r0, #4]
    fbf8:	4b15      	ldr	r3, [pc, #84]	; (fc50 <TransmissionErrorCallback+0xa0>)
    fbfa:	4798      	blx	r3
    fbfc:	2800      	cmp	r0, #0
    fbfe:	d01b      	beq.n	fc38 <TransmissionErrorCallback+0x88>
    fc00:	0023      	movs	r3, r4
    fc02:	33d4      	adds	r3, #212	; 0xd4
    fc04:	781b      	ldrb	r3, [r3, #0]
    fc06:	42ab      	cmp	r3, r5
    fc08:	d108      	bne.n	fc1c <TransmissionErrorCallback+0x6c>
    fc0a:	0021      	movs	r1, r4
    fc0c:	220e      	movs	r2, #14
    fc0e:	315c      	adds	r1, #92	; 0x5c
    fc10:	780b      	ldrb	r3, [r1, #0]
    fc12:	4393      	bics	r3, r2
    fc14:	001a      	movs	r2, r3
    fc16:	230c      	movs	r3, #12
    fc18:	4313      	orrs	r3, r2
    fc1a:	700b      	strb	r3, [r1, #0]
    fc1c:	23c0      	movs	r3, #192	; 0xc0
    fc1e:	2200      	movs	r2, #0
    fc20:	33ff      	adds	r3, #255	; 0xff
    fc22:	5ce3      	ldrb	r3, [r4, r3]
    fc24:	490b      	ldr	r1, [pc, #44]	; (fc54 <TransmissionErrorCallback+0xa4>)
    fc26:	34d3      	adds	r4, #211	; 0xd3
    fc28:	4359      	muls	r1, r3
    fc2a:	4b0b      	ldr	r3, [pc, #44]	; (fc58 <TransmissionErrorCallback+0xa8>)
    fc2c:	7820      	ldrb	r0, [r4, #0]
    fc2e:	18c9      	adds	r1, r1, r3
    fc30:	9200      	str	r2, [sp, #0]
    fc32:	4b0a      	ldr	r3, [pc, #40]	; (fc5c <TransmissionErrorCallback+0xac>)
    fc34:	4c0a      	ldr	r4, [pc, #40]	; (fc60 <TransmissionErrorCallback+0xb0>)
    fc36:	47a0      	blx	r4
    fc38:	b00b      	add	sp, #44	; 0x2c
    fc3a:	bd30      	pop	{r4, r5, pc}
    fc3c:	20002fd8 	.word	0x20002fd8
    fc40:	0000c2cd 	.word	0x0000c2cd
    fc44:	0000e755 	.word	0x0000e755
    fc48:	0000f9f1 	.word	0x0000f9f1
    fc4c:	200031a8 	.word	0x200031a8
    fc50:	0000de81 	.word	0x0000de81
    fc54:	fffffc18 	.word	0xfffffc18
    fc58:	001e8480 	.word	0x001e8480
    fc5c:	0000fbb1 	.word	0x0000fbb1
    fc60:	0000c739 	.word	0x0000c739

0000fc64 <UnconfirmedTransmissionCallback>:
    fc64:	b5f0      	push	{r4, r5, r6, r7, lr}
    fc66:	4c38      	ldr	r4, [pc, #224]	; (fd48 <UnconfirmedTransmissionCallback+0xe4>)
    fc68:	b08b      	sub	sp, #44	; 0x2c
    fc6a:	0023      	movs	r3, r4
    fc6c:	33a6      	adds	r3, #166	; 0xa6
    fc6e:	881b      	ldrh	r3, [r3, #0]
    fc70:	af05      	add	r7, sp, #20
    fc72:	703b      	strb	r3, [r7, #0]
    fc74:	4b35      	ldr	r3, [pc, #212]	; (fd4c <UnconfirmedTransmissionCallback+0xe8>)
    fc76:	a903      	add	r1, sp, #12
    fc78:	9306      	str	r3, [sp, #24]
    fc7a:	2301      	movs	r3, #1
    fc7c:	700b      	strb	r3, [r1, #0]
    fc7e:	0023      	movs	r3, r4
    fc80:	0026      	movs	r6, r4
    fc82:	33c1      	adds	r3, #193	; 0xc1
    fc84:	781b      	ldrb	r3, [r3, #0]
    fc86:	36bf      	adds	r6, #191	; 0xbf
    fc88:	704b      	strb	r3, [r1, #1]
    fc8a:	7833      	ldrb	r3, [r6, #0]
    fc8c:	aa07      	add	r2, sp, #28
    fc8e:	202f      	movs	r0, #47	; 0x2f
    fc90:	4d2f      	ldr	r5, [pc, #188]	; (fd50 <UnconfirmedTransmissionCallback+0xec>)
    fc92:	708b      	strb	r3, [r1, #2]
    fc94:	47a8      	blx	r5
    fc96:	2808      	cmp	r0, #8
    fc98:	d12c      	bne.n	fcf4 <UnconfirmedTransmissionCallback+0x90>
    fc9a:	2301      	movs	r3, #1
    fc9c:	a804      	add	r0, sp, #16
    fc9e:	7003      	strb	r3, [r0, #0]
    fca0:	4b2c      	ldr	r3, [pc, #176]	; (fd54 <UnconfirmedTransmissionCallback+0xf0>)
    fca2:	4798      	blx	r3
    fca4:	9807      	ldr	r0, [sp, #28]
    fca6:	4b2c      	ldr	r3, [pc, #176]	; (fd58 <UnconfirmedTransmissionCallback+0xf4>)
    fca8:	9908      	ldr	r1, [sp, #32]
    fcaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    fcac:	4798      	blx	r3
    fcae:	0038      	movs	r0, r7
    fcb0:	4b2a      	ldr	r3, [pc, #168]	; (fd5c <UnconfirmedTransmissionCallback+0xf8>)
    fcb2:	4798      	blx	r3
    fcb4:	2800      	cmp	r0, #0
    fcb6:	d01b      	beq.n	fcf0 <UnconfirmedTransmissionCallback+0x8c>
    fcb8:	0023      	movs	r3, r4
    fcba:	33d4      	adds	r3, #212	; 0xd4
    fcbc:	781b      	ldrb	r3, [r3, #0]
    fcbe:	2b01      	cmp	r3, #1
    fcc0:	d108      	bne.n	fcd4 <UnconfirmedTransmissionCallback+0x70>
    fcc2:	0021      	movs	r1, r4
    fcc4:	220e      	movs	r2, #14
    fcc6:	315c      	adds	r1, #92	; 0x5c
    fcc8:	780b      	ldrb	r3, [r1, #0]
    fcca:	4393      	bics	r3, r2
    fccc:	001a      	movs	r2, r3
    fcce:	230c      	movs	r3, #12
    fcd0:	4313      	orrs	r3, r2
    fcd2:	700b      	strb	r3, [r1, #0]
    fcd4:	23c0      	movs	r3, #192	; 0xc0
    fcd6:	2200      	movs	r2, #0
    fcd8:	33ff      	adds	r3, #255	; 0xff
    fcda:	5ce3      	ldrb	r3, [r4, r3]
    fcdc:	4920      	ldr	r1, [pc, #128]	; (fd60 <UnconfirmedTransmissionCallback+0xfc>)
    fcde:	34d3      	adds	r4, #211	; 0xd3
    fce0:	4359      	muls	r1, r3
    fce2:	4b20      	ldr	r3, [pc, #128]	; (fd64 <UnconfirmedTransmissionCallback+0x100>)
    fce4:	7820      	ldrb	r0, [r4, #0]
    fce6:	18c9      	adds	r1, r1, r3
    fce8:	4b1f      	ldr	r3, [pc, #124]	; (fd68 <UnconfirmedTransmissionCallback+0x104>)
    fcea:	9200      	str	r2, [sp, #0]
    fcec:	4c1f      	ldr	r4, [pc, #124]	; (fd6c <UnconfirmedTransmissionCallback+0x108>)
    fcee:	47a0      	blx	r4
    fcf0:	b00b      	add	sp, #44	; 0x2c
    fcf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fcf4:	23fa      	movs	r3, #250	; 0xfa
    fcf6:	00db      	lsls	r3, r3, #3
    fcf8:	9304      	str	r3, [sp, #16]
    fcfa:	0023      	movs	r3, r4
    fcfc:	33f0      	adds	r3, #240	; 0xf0
    fcfe:	781b      	ldrb	r3, [r3, #0]
    fd00:	079a      	lsls	r2, r3, #30
    fd02:	d516      	bpl.n	fd32 <UnconfirmedTransmissionCallback+0xce>
    fd04:	aa04      	add	r2, sp, #16
    fd06:	0031      	movs	r1, r6
    fd08:	2026      	movs	r0, #38	; 0x26
    fd0a:	47a8      	blx	r5
    fd0c:	9b04      	ldr	r3, [sp, #16]
    fd0e:	1c5a      	adds	r2, r3, #1
    fd10:	d001      	beq.n	fd16 <UnconfirmedTransmissionCallback+0xb2>
    fd12:	3314      	adds	r3, #20
    fd14:	9304      	str	r3, [sp, #16]
    fd16:	23c0      	movs	r3, #192	; 0xc0
    fd18:	33ff      	adds	r3, #255	; 0xff
    fd1a:	5ce3      	ldrb	r3, [r4, r3]
    fd1c:	9a04      	ldr	r2, [sp, #16]
    fd1e:	21fa      	movs	r1, #250	; 0xfa
    fd20:	1ad3      	subs	r3, r2, r3
    fd22:	2200      	movs	r2, #0
    fd24:	0089      	lsls	r1, r1, #2
    fd26:	34c9      	adds	r4, #201	; 0xc9
    fd28:	4359      	muls	r1, r3
    fd2a:	7820      	ldrb	r0, [r4, #0]
    fd2c:	4b10      	ldr	r3, [pc, #64]	; (fd70 <UnconfirmedTransmissionCallback+0x10c>)
    fd2e:	9200      	str	r2, [sp, #0]
    fd30:	e7dc      	b.n	fcec <UnconfirmedTransmissionCallback+0x88>
    fd32:	075b      	lsls	r3, r3, #29
    fd34:	d5ef      	bpl.n	fd16 <UnconfirmedTransmissionCallback+0xb2>
    fd36:	aa04      	add	r2, sp, #16
    fd38:	0031      	movs	r1, r6
    fd3a:	2033      	movs	r0, #51	; 0x33
    fd3c:	47a8      	blx	r5
    fd3e:	9b04      	ldr	r3, [sp, #16]
    fd40:	1c5a      	adds	r2, r3, #1
    fd42:	d0e8      	beq.n	fd16 <UnconfirmedTransmissionCallback+0xb2>
    fd44:	3301      	adds	r3, #1
    fd46:	e7e5      	b.n	fd14 <UnconfirmedTransmissionCallback+0xb0>
    fd48:	20002fd8 	.word	0x20002fd8
    fd4c:	200031a8 	.word	0x200031a8
    fd50:	0000c2cd 	.word	0x0000c2cd
    fd54:	0000e755 	.word	0x0000e755
    fd58:	0000f9f1 	.word	0x0000f9f1
    fd5c:	0000de81 	.word	0x0000de81
    fd60:	fffffc18 	.word	0xfffffc18
    fd64:	001e8480 	.word	0x001e8480
    fd68:	0000fbb1 	.word	0x0000fbb1
    fd6c:	0000c739 	.word	0x0000c739
    fd70:	0000fc65 	.word	0x0000fc65

0000fd74 <EncryptFRMPayload>:
    fd74:	b5f0      	push	{r4, r5, r6, r7, lr}
    fd76:	0007      	movs	r7, r0
    fd78:	2401      	movs	r4, #1
    fd7a:	b089      	sub	sp, #36	; 0x24
    fd7c:	9305      	str	r3, [sp, #20]
    fd7e:	ab0e      	add	r3, sp, #56	; 0x38
    fd80:	9204      	str	r2, [sp, #16]
    fd82:	cb04      	ldmia	r3!, {r2}
    fd84:	9103      	str	r1, [sp, #12]
    fd86:	781d      	ldrb	r5, [r3, #0]
    fd88:	090b      	lsrs	r3, r1, #4
    fd8a:	9206      	str	r2, [sp, #24]
    fd8c:	9302      	str	r3, [sp, #8]
    fd8e:	9b02      	ldr	r3, [sp, #8]
    fd90:	429c      	cmp	r4, r3
    fd92:	d922      	bls.n	fdda <EncryptFRMPayload+0x66>
    fd94:	260f      	movs	r6, #15
    fd96:	9b03      	ldr	r3, [sp, #12]
    fd98:	4033      	ands	r3, r6
    fd9a:	1e1e      	subs	r6, r3, #0
    fd9c:	d01b      	beq.n	fdd6 <EncryptFRMPayload+0x62>
    fd9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fda0:	0022      	movs	r2, r4
    fda2:	9300      	str	r3, [sp, #0]
    fda4:	9905      	ldr	r1, [sp, #20]
    fda6:	2301      	movs	r3, #1
    fda8:	9804      	ldr	r0, [sp, #16]
    fdaa:	4c1d      	ldr	r4, [pc, #116]	; (fe20 <EncryptFRMPayload+0xac>)
    fdac:	47a0      	blx	r4
    fdae:	4c1d      	ldr	r4, [pc, #116]	; (fe24 <EncryptFRMPayload+0xb0>)
    fdb0:	4b1d      	ldr	r3, [pc, #116]	; (fe28 <EncryptFRMPayload+0xb4>)
    fdb2:	9906      	ldr	r1, [sp, #24]
    fdb4:	0020      	movs	r0, r4
    fdb6:	4798      	blx	r3
    fdb8:	9b02      	ldr	r3, [sp, #8]
    fdba:	011a      	lsls	r2, r3, #4
    fdbc:	2300      	movs	r3, #0
    fdbe:	18ba      	adds	r2, r7, r2
    fdc0:	5d1f      	ldrb	r7, [r3, r4]
    fdc2:	5cd0      	ldrb	r0, [r2, r3]
    fdc4:	18e9      	adds	r1, r5, r3
    fdc6:	4078      	eors	r0, r7
    fdc8:	9f10      	ldr	r7, [sp, #64]	; 0x40
    fdca:	b2c9      	uxtb	r1, r1
    fdcc:	3301      	adds	r3, #1
    fdce:	5478      	strb	r0, [r7, r1]
    fdd0:	b2d9      	uxtb	r1, r3
    fdd2:	428e      	cmp	r6, r1
    fdd4:	d8f4      	bhi.n	fdc0 <EncryptFRMPayload+0x4c>
    fdd6:	b009      	add	sp, #36	; 0x24
    fdd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fdda:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fddc:	0022      	movs	r2, r4
    fdde:	9300      	str	r3, [sp, #0]
    fde0:	9905      	ldr	r1, [sp, #20]
    fde2:	2301      	movs	r3, #1
    fde4:	9804      	ldr	r0, [sp, #16]
    fde6:	4e0e      	ldr	r6, [pc, #56]	; (fe20 <EncryptFRMPayload+0xac>)
    fde8:	47b0      	blx	r6
    fdea:	4e0e      	ldr	r6, [pc, #56]	; (fe24 <EncryptFRMPayload+0xb0>)
    fdec:	4b0e      	ldr	r3, [pc, #56]	; (fe28 <EncryptFRMPayload+0xb4>)
    fdee:	9906      	ldr	r1, [sp, #24]
    fdf0:	0030      	movs	r0, r6
    fdf2:	4798      	blx	r3
    fdf4:	2300      	movs	r3, #0
    fdf6:	1e62      	subs	r2, r4, #1
    fdf8:	0112      	lsls	r2, r2, #4
    fdfa:	18ba      	adds	r2, r7, r2
    fdfc:	9207      	str	r2, [sp, #28]
    fdfe:	9a07      	ldr	r2, [sp, #28]
    fe00:	18e9      	adds	r1, r5, r3
    fe02:	5cd0      	ldrb	r0, [r2, r3]
    fe04:	5d9a      	ldrb	r2, [r3, r6]
    fe06:	b2c9      	uxtb	r1, r1
    fe08:	4050      	eors	r0, r2
    fe0a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fe0c:	3301      	adds	r3, #1
    fe0e:	5450      	strb	r0, [r2, r1]
    fe10:	2b10      	cmp	r3, #16
    fe12:	d1f4      	bne.n	fdfe <EncryptFRMPayload+0x8a>
    fe14:	3510      	adds	r5, #16
    fe16:	3401      	adds	r4, #1
    fe18:	b2ed      	uxtb	r5, r5
    fe1a:	b2e4      	uxtb	r4, r4
    fe1c:	e7b7      	b.n	fd8e <EncryptFRMPayload+0x1a>
    fe1e:	46c0      	nop			; (mov r8, r8)
    fe20:	0000f145 	.word	0x0000f145
    fe24:	2000206d 	.word	0x2000206d
    fe28:	00011419 	.word	0x00011419

0000fe2c <AssemblePacket>:
    fe2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fe2e:	2710      	movs	r7, #16
    fe30:	b08b      	sub	sp, #44	; 0x2c
    fe32:	9304      	str	r3, [sp, #16]
    fe34:	ab04      	add	r3, sp, #16
    fe36:	829f      	strh	r7, [r3, #20]
    fe38:	2316      	movs	r3, #22
    fe3a:	9205      	str	r2, [sp, #20]
    fe3c:	aa04      	add	r2, sp, #16
    fe3e:	189b      	adds	r3, r3, r2
    fe40:	2500      	movs	r5, #0
    fe42:	2210      	movs	r2, #16
    fe44:	ac08      	add	r4, sp, #32
    fe46:	9006      	str	r0, [sp, #24]
    fe48:	9107      	str	r1, [sp, #28]
    fe4a:	32ff      	adds	r2, #255	; 0xff
    fe4c:	0029      	movs	r1, r5
    fe4e:	4ea1      	ldr	r6, [pc, #644]	; (100d4 <AssemblePacket+0x2a8>)
    fe50:	7025      	strb	r5, [r4, #0]
    fe52:	48a1      	ldr	r0, [pc, #644]	; (100d8 <AssemblePacket+0x2ac>)
    fe54:	801d      	strh	r5, [r3, #0]
    fe56:	47b0      	blx	r6
    fe58:	003a      	movs	r2, r7
    fe5a:	0029      	movs	r1, r5
    fe5c:	489f      	ldr	r0, [pc, #636]	; (100dc <AssemblePacket+0x2b0>)
    fe5e:	47b0      	blx	r6
    fe60:	221f      	movs	r2, #31
    fe62:	7823      	ldrb	r3, [r4, #0]
    fe64:	9906      	ldr	r1, [sp, #24]
    fe66:	4013      	ands	r3, r2
    fe68:	42a9      	cmp	r1, r5
    fe6a:	d041      	beq.n	fef0 <AssemblePacket+0xc4>
    fe6c:	3a9f      	subs	r2, #159	; 0x9f
    fe6e:	4313      	orrs	r3, r2
    fe70:	7023      	strb	r3, [r4, #0]
    fe72:	4b9b      	ldr	r3, [pc, #620]	; (100e0 <AssemblePacket+0x2b4>)
    fe74:	3281      	adds	r2, #129	; 0x81
    fe76:	336c      	adds	r3, #108	; 0x6c
    fe78:	7819      	ldrb	r1, [r3, #0]
    fe7a:	430a      	orrs	r2, r1
    fe7c:	701a      	strb	r2, [r3, #0]
    fe7e:	22e0      	movs	r2, #224	; 0xe0
    fe80:	7823      	ldrb	r3, [r4, #0]
    fe82:	4895      	ldr	r0, [pc, #596]	; (100d8 <AssemblePacket+0x2ac>)
    fe84:	4013      	ands	r3, r2
    fe86:	7023      	strb	r3, [r4, #0]
    fe88:	4c95      	ldr	r4, [pc, #596]	; (100e0 <AssemblePacket+0x2b4>)
    fe8a:	7403      	strb	r3, [r0, #16]
    fe8c:	3adc      	subs	r2, #220	; 0xdc
    fe8e:	4b95      	ldr	r3, [pc, #596]	; (100e4 <AssemblePacket+0x2b8>)
    fe90:	3011      	adds	r0, #17
    fe92:	1c61      	adds	r1, r4, #1
    fe94:	4798      	blx	r3
    fe96:	2315      	movs	r3, #21
    fe98:	aa04      	add	r2, sp, #16
    fe9a:	8293      	strh	r3, [r2, #20]
    fe9c:	2300      	movs	r3, #0
    fe9e:	469c      	mov	ip, r3
    fea0:	0023      	movs	r3, r4
    fea2:	335c      	adds	r3, #92	; 0x5c
    fea4:	781b      	ldrb	r3, [r3, #0]
    fea6:	069b      	lsls	r3, r3, #26
    fea8:	d400      	bmi.n	feac <AssemblePacket+0x80>
    feaa:	e0e2      	b.n	10072 <AssemblePacket+0x246>
    feac:	0023      	movs	r3, r4
    feae:	33bf      	adds	r3, #191	; 0xbf
    feb0:	781a      	ldrb	r2, [r3, #0]
    feb2:	4b8d      	ldr	r3, [pc, #564]	; (100e8 <AssemblePacket+0x2bc>)
    feb4:	781d      	ldrb	r5, [r3, #0]
    feb6:	42aa      	cmp	r2, r5
    feb8:	d200      	bcs.n	febc <AssemblePacket+0x90>
    feba:	e0da      	b.n	10072 <AssemblePacket+0x246>
    febc:	0021      	movs	r1, r4
    febe:	0026      	movs	r6, r4
    fec0:	2780      	movs	r7, #128	; 0x80
    fec2:	31a2      	adds	r1, #162	; 0xa2
    fec4:	880b      	ldrh	r3, [r1, #0]
    fec6:	36b4      	adds	r6, #180	; 0xb4
    fec8:	3301      	adds	r3, #1
    feca:	b29b      	uxth	r3, r3
    fecc:	800b      	strh	r3, [r1, #0]
    fece:	7836      	ldrb	r6, [r6, #0]
    fed0:	427f      	negs	r7, r7
    fed2:	1c38      	adds	r0, r7, #0
    fed4:	42b3      	cmp	r3, r6
    fed6:	d10f      	bne.n	fef8 <AssemblePacket+0xcc>
    fed8:	0023      	movs	r3, r4
    feda:	4662      	mov	r2, ip
    fedc:	33cd      	adds	r3, #205	; 0xcd
    fede:	701a      	strb	r2, [r3, #0]
    fee0:	2040      	movs	r0, #64	; 0x40
    fee2:	2310      	movs	r3, #16
    fee4:	346c      	adds	r4, #108	; 0x6c
    fee6:	7822      	ldrb	r2, [r4, #0]
    fee8:	4338      	orrs	r0, r7
    feea:	4313      	orrs	r3, r2
    feec:	7023      	strb	r3, [r4, #0]
    feee:	e02e      	b.n	ff4e <AssemblePacket+0x122>
    fef0:	2240      	movs	r2, #64	; 0x40
    fef2:	4313      	orrs	r3, r2
    fef4:	7023      	strb	r3, [r4, #0]
    fef6:	e7c2      	b.n	fe7e <AssemblePacket+0x52>
    fef8:	42b3      	cmp	r3, r6
    fefa:	d928      	bls.n	ff4e <AssemblePacket+0x122>
    fefc:	42aa      	cmp	r2, r5
    fefe:	d100      	bne.n	ff02 <AssemblePacket+0xd6>
    ff00:	e0b0      	b.n	10064 <AssemblePacket+0x238>
    ff02:	0021      	movs	r1, r4
    ff04:	0020      	movs	r0, r4
    ff06:	31cd      	adds	r1, #205	; 0xcd
    ff08:	780b      	ldrb	r3, [r1, #0]
    ff0a:	30b5      	adds	r0, #181	; 0xb5
    ff0c:	3301      	adds	r3, #1
    ff0e:	b2db      	uxtb	r3, r3
    ff10:	700b      	strb	r3, [r1, #0]
    ff12:	7800      	ldrb	r0, [r0, #0]
    ff14:	3801      	subs	r0, #1
    ff16:	4283      	cmp	r3, r0
    ff18:	dbe2      	blt.n	fee0 <AssemblePacket+0xb4>
    ff1a:	4663      	mov	r3, ip
    ff1c:	700b      	strb	r3, [r1, #0]
    ff1e:	42aa      	cmp	r2, r5
    ff20:	d90d      	bls.n	ff3e <AssemblePacket+0x112>
    ff22:	2313      	movs	r3, #19
    ff24:	a904      	add	r1, sp, #16
    ff26:	3a01      	subs	r2, #1
    ff28:	185b      	adds	r3, r3, r1
    ff2a:	4d6f      	ldr	r5, [pc, #444]	; (100e8 <AssemblePacket+0x2bc>)
    ff2c:	701a      	strb	r2, [r3, #0]
    ff2e:	2613      	movs	r6, #19
    ff30:	ab04      	add	r3, sp, #16
    ff32:	18f6      	adds	r6, r6, r3
    ff34:	782a      	ldrb	r2, [r5, #0]
    ff36:	7833      	ldrb	r3, [r6, #0]
    ff38:	429a      	cmp	r2, r3
    ff3a:	d800      	bhi.n	ff3e <AssemblePacket+0x112>
    ff3c:	e084      	b.n	10048 <AssemblePacket+0x21c>
    ff3e:	2210      	movs	r2, #16
    ff40:	2040      	movs	r0, #64	; 0x40
    ff42:	4b67      	ldr	r3, [pc, #412]	; (100e0 <AssemblePacket+0x2b4>)
    ff44:	4338      	orrs	r0, r7
    ff46:	336c      	adds	r3, #108	; 0x6c
    ff48:	7819      	ldrb	r1, [r3, #0]
    ff4a:	430a      	orrs	r2, r1
    ff4c:	701a      	strb	r2, [r3, #0]
    ff4e:	4b64      	ldr	r3, [pc, #400]	; (100e0 <AssemblePacket+0x2b4>)
    ff50:	2402      	movs	r4, #2
    ff52:	0019      	movs	r1, r3
    ff54:	316c      	adds	r1, #108	; 0x6c
    ff56:	780a      	ldrb	r2, [r1, #0]
    ff58:	4222      	tst	r2, r4
    ff5a:	d003      	beq.n	ff64 <AssemblePacket+0x138>
    ff5c:	2520      	movs	r5, #32
    ff5e:	43a2      	bics	r2, r4
    ff60:	4328      	orrs	r0, r5
    ff62:	700a      	strb	r2, [r1, #0]
    ff64:	2210      	movs	r2, #16
    ff66:	0004      	movs	r4, r0
    ff68:	33b8      	adds	r3, #184	; 0xb8
    ff6a:	781e      	ldrb	r6, [r3, #0]
    ff6c:	4394      	bics	r4, r2
    ff6e:	2e00      	cmp	r6, #0
    ff70:	d003      	beq.n	ff7a <AssemblePacket+0x14e>
    ff72:	9b04      	ldr	r3, [sp, #16]
    ff74:	2b00      	cmp	r3, #0
    ff76:	d000      	beq.n	ff7a <AssemblePacket+0x14e>
    ff78:	e07d      	b.n	10076 <AssemblePacket+0x24a>
    ff7a:	230f      	movs	r3, #15
    ff7c:	439c      	bics	r4, r3
    ff7e:	0020      	movs	r0, r4
    ff80:	ac09      	add	r4, sp, #36	; 0x24
    ff82:	8825      	ldrh	r5, [r4, #0]
    ff84:	4f54      	ldr	r7, [pc, #336]	; (100d8 <AssemblePacket+0x2ac>)
    ff86:	2202      	movs	r2, #2
    ff88:	5578      	strb	r0, [r7, r5]
    ff8a:	1c68      	adds	r0, r5, #1
    ff8c:	b280      	uxth	r0, r0
    ff8e:	19c0      	adds	r0, r0, r7
    ff90:	4956      	ldr	r1, [pc, #344]	; (100ec <AssemblePacket+0x2c0>)
    ff92:	4b54      	ldr	r3, [pc, #336]	; (100e4 <AssemblePacket+0x2b8>)
    ff94:	3503      	adds	r5, #3
    ff96:	4798      	blx	r3
    ff98:	8025      	strh	r5, [r4, #0]
    ff9a:	2e00      	cmp	r6, #0
    ff9c:	d007      	beq.n	ffae <AssemblePacket+0x182>
    ff9e:	9b04      	ldr	r3, [sp, #16]
    ffa0:	2b00      	cmp	r3, #0
    ffa2:	d004      	beq.n	ffae <AssemblePacket+0x182>
    ffa4:	2201      	movs	r2, #1
    ffa6:	0021      	movs	r1, r4
    ffa8:	0038      	movs	r0, r7
    ffaa:	4b51      	ldr	r3, [pc, #324]	; (100f0 <AssemblePacket+0x2c4>)
    ffac:	4798      	blx	r3
    ffae:	466a      	mov	r2, sp
    ffb0:	8823      	ldrh	r3, [r4, #0]
    ffb2:	7f12      	ldrb	r2, [r2, #28]
    ffb4:	1c5d      	adds	r5, r3, #1
    ffb6:	54fa      	strb	r2, [r7, r3]
    ffb8:	9b04      	ldr	r3, [sp, #16]
    ffba:	b2ad      	uxth	r5, r5
    ffbc:	8025      	strh	r5, [r4, #0]
    ffbe:	2b00      	cmp	r3, #0
    ffc0:	d062      	beq.n	10088 <AssemblePacket+0x25c>
    ffc2:	001a      	movs	r2, r3
    ffc4:	1978      	adds	r0, r7, r5
    ffc6:	9905      	ldr	r1, [sp, #20]
    ffc8:	4b46      	ldr	r3, [pc, #280]	; (100e4 <AssemblePacket+0x2b8>)
    ffca:	4798      	blx	r3
    ffcc:	466b      	mov	r3, sp
    ffce:	4a44      	ldr	r2, [pc, #272]	; (100e0 <AssemblePacket+0x2b4>)
    ffd0:	7c19      	ldrb	r1, [r3, #16]
    ffd2:	6813      	ldr	r3, [r2, #0]
    ffd4:	b2ed      	uxtb	r5, r5
    ffd6:	0a18      	lsrs	r0, r3, #8
    ffd8:	7913      	ldrb	r3, [r2, #4]
    ffda:	9501      	str	r5, [sp, #4]
    ffdc:	061b      	lsls	r3, r3, #24
    ffde:	4303      	orrs	r3, r0
    ffe0:	9303      	str	r3, [sp, #12]
    ffe2:	4b44      	ldr	r3, [pc, #272]	; (100f4 <AssemblePacket+0x2c8>)
    ffe4:	9702      	str	r7, [sp, #8]
    ffe6:	9300      	str	r3, [sp, #0]
    ffe8:	6e13      	ldr	r3, [r2, #96]	; 0x60
    ffea:	9805      	ldr	r0, [sp, #20]
    ffec:	2200      	movs	r2, #0
    ffee:	4d42      	ldr	r5, [pc, #264]	; (100f8 <AssemblePacket+0x2cc>)
    fff0:	47a8      	blx	r5
    fff2:	8823      	ldrh	r3, [r4, #0]
    fff4:	9a04      	ldr	r2, [sp, #16]
    fff6:	189b      	adds	r3, r3, r2
    fff8:	8023      	strh	r3, [r4, #0]
    fffa:	4c39      	ldr	r4, [pc, #228]	; (100e0 <AssemblePacket+0x2b4>)
    fffc:	ae09      	add	r6, sp, #36	; 0x24
    fffe:	6823      	ldr	r3, [r4, #0]
   10000:	8832      	ldrh	r2, [r6, #0]
   10002:	0a19      	lsrs	r1, r3, #8
   10004:	7923      	ldrb	r3, [r4, #4]
   10006:	3a10      	subs	r2, #16
   10008:	061b      	lsls	r3, r3, #24
   1000a:	430b      	orrs	r3, r1
   1000c:	9300      	str	r3, [sp, #0]
   1000e:	6e21      	ldr	r1, [r4, #96]	; 0x60
   10010:	b2d2      	uxtb	r2, r2
   10012:	2349      	movs	r3, #73	; 0x49
   10014:	2000      	movs	r0, #0
   10016:	4d39      	ldr	r5, [pc, #228]	; (100fc <AssemblePacket+0x2d0>)
   10018:	47a8      	blx	r5
   1001a:	4f2f      	ldr	r7, [pc, #188]	; (100d8 <AssemblePacket+0x2ac>)
   1001c:	2210      	movs	r2, #16
   1001e:	492f      	ldr	r1, [pc, #188]	; (100dc <AssemblePacket+0x2b0>)
   10020:	0038      	movs	r0, r7
   10022:	4b30      	ldr	r3, [pc, #192]	; (100e4 <AssemblePacket+0x2b8>)
   10024:	4798      	blx	r3
   10026:	7833      	ldrb	r3, [r6, #0]
   10028:	003a      	movs	r2, r7
   1002a:	492c      	ldr	r1, [pc, #176]	; (100dc <AssemblePacket+0x2b0>)
   1002c:	4834      	ldr	r0, [pc, #208]	; (10100 <AssemblePacket+0x2d4>)
   1002e:	4d35      	ldr	r5, [pc, #212]	; (10104 <AssemblePacket+0x2d8>)
   10030:	47a8      	blx	r5
   10032:	8836      	ldrh	r6, [r6, #0]
   10034:	2204      	movs	r2, #4
   10036:	19f0      	adds	r0, r6, r7
   10038:	4928      	ldr	r1, [pc, #160]	; (100dc <AssemblePacket+0x2b0>)
   1003a:	4b2a      	ldr	r3, [pc, #168]	; (100e4 <AssemblePacket+0x2b8>)
   1003c:	4798      	blx	r3
   1003e:	3e0c      	subs	r6, #12
   10040:	34a6      	adds	r4, #166	; 0xa6
   10042:	8026      	strh	r6, [r4, #0]
   10044:	b00b      	add	sp, #44	; 0x2c
   10046:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10048:	4b2f      	ldr	r3, [pc, #188]	; (10108 <AssemblePacket+0x2dc>)
   1004a:	0031      	movs	r1, r6
   1004c:	2011      	movs	r0, #17
   1004e:	4798      	blx	r3
   10050:	7833      	ldrb	r3, [r6, #0]
   10052:	2808      	cmp	r0, #8
   10054:	d03a      	beq.n	100cc <AssemblePacket+0x2a0>
   10056:	782a      	ldrb	r2, [r5, #0]
   10058:	429a      	cmp	r2, r3
   1005a:	d300      	bcc.n	1005e <AssemblePacket+0x232>
   1005c:	e767      	b.n	ff2e <AssemblePacket+0x102>
   1005e:	3b01      	subs	r3, #1
   10060:	7033      	strb	r3, [r6, #0]
   10062:	e764      	b.n	ff2e <AssemblePacket+0x102>
   10064:	4663      	mov	r3, ip
   10066:	800b      	strh	r3, [r1, #0]
   10068:	2210      	movs	r2, #16
   1006a:	346c      	adds	r4, #108	; 0x6c
   1006c:	7823      	ldrb	r3, [r4, #0]
   1006e:	4393      	bics	r3, r2
   10070:	e73c      	b.n	feec <AssemblePacket+0xc0>
   10072:	2000      	movs	r0, #0
   10074:	e7f8      	b.n	10068 <AssemblePacket+0x23c>
   10076:	4b25      	ldr	r3, [pc, #148]	; (1010c <AssemblePacket+0x2e0>)
   10078:	4798      	blx	r3
   1007a:	220f      	movs	r2, #15
   1007c:	0003      	movs	r3, r0
   1007e:	0020      	movs	r0, r4
   10080:	4013      	ands	r3, r2
   10082:	4390      	bics	r0, r2
   10084:	4318      	orrs	r0, r3
   10086:	e77b      	b.n	ff80 <AssemblePacket+0x154>
   10088:	4d15      	ldr	r5, [pc, #84]	; (100e0 <AssemblePacket+0x2b4>)
   1008a:	002b      	movs	r3, r5
   1008c:	33b8      	adds	r3, #184	; 0xb8
   1008e:	781b      	ldrb	r3, [r3, #0]
   10090:	2b00      	cmp	r3, #0
   10092:	d0b2      	beq.n	fffa <AssemblePacket+0x1ce>
   10094:	2616      	movs	r6, #22
   10096:	ab04      	add	r3, sp, #16
   10098:	18f6      	adds	r6, r6, r3
   1009a:	9a04      	ldr	r2, [sp, #16]
   1009c:	0031      	movs	r1, r6
   1009e:	481c      	ldr	r0, [pc, #112]	; (10110 <AssemblePacket+0x2e4>)
   100a0:	4b13      	ldr	r3, [pc, #76]	; (100f0 <AssemblePacket+0x2c4>)
   100a2:	4798      	blx	r3
   100a4:	682b      	ldr	r3, [r5, #0]
   100a6:	7831      	ldrb	r1, [r6, #0]
   100a8:	0a1a      	lsrs	r2, r3, #8
   100aa:	792b      	ldrb	r3, [r5, #4]
   100ac:	9702      	str	r7, [sp, #8]
   100ae:	061b      	lsls	r3, r3, #24
   100b0:	4313      	orrs	r3, r2
   100b2:	9303      	str	r3, [sp, #12]
   100b4:	7823      	ldrb	r3, [r4, #0]
   100b6:	9a04      	ldr	r2, [sp, #16]
   100b8:	9301      	str	r3, [sp, #4]
   100ba:	4b11      	ldr	r3, [pc, #68]	; (10100 <AssemblePacket+0x2d4>)
   100bc:	4814      	ldr	r0, [pc, #80]	; (10110 <AssemblePacket+0x2e4>)
   100be:	9300      	str	r3, [sp, #0]
   100c0:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   100c2:	4d0d      	ldr	r5, [pc, #52]	; (100f8 <AssemblePacket+0x2cc>)
   100c4:	47a8      	blx	r5
   100c6:	8823      	ldrh	r3, [r4, #0]
   100c8:	8832      	ldrh	r2, [r6, #0]
   100ca:	e794      	b.n	fff6 <AssemblePacket+0x1ca>
   100cc:	34bf      	adds	r4, #191	; 0xbf
   100ce:	7023      	strb	r3, [r4, #0]
   100d0:	e735      	b.n	ff3e <AssemblePacket+0x112>
   100d2:	46c0      	nop			; (mov r8, r8)
   100d4:	00014df1 	.word	0x00014df1
   100d8:	20003198 	.word	0x20003198
   100dc:	2000206d 	.word	0x2000206d
   100e0:	20002fd8 	.word	0x20002fd8
   100e4:	00014ddf 	.word	0x00014ddf
   100e8:	200030a2 	.word	0x200030a2
   100ec:	20003038 	.word	0x20003038
   100f0:	0000ee61 	.word	0x0000ee61
   100f4:	20002fed 	.word	0x20002fed
   100f8:	0000fd75 	.word	0x0000fd75
   100fc:	0000f145 	.word	0x0000f145
   10100:	20002fdd 	.word	0x20002fdd
   10104:	00011459 	.word	0x00011459
   10108:	0000c2e9 	.word	0x0000c2e9
   1010c:	0000edc5 	.word	0x0000edc5
   10110:	20002da0 	.word	0x20002da0

00010114 <UpdateTransactionCompleteCbParams>:
   10114:	23da      	movs	r3, #218	; 0xda
   10116:	2201      	movs	r2, #1
   10118:	b570      	push	{r4, r5, r6, lr}
   1011a:	4915      	ldr	r1, [pc, #84]	; (10170 <UpdateTransactionCompleteCbParams+0x5c>)
   1011c:	4c15      	ldr	r4, [pc, #84]	; (10174 <UpdateTransactionCompleteCbParams+0x60>)
   1011e:	005b      	lsls	r3, r3, #1
   10120:	54e2      	strb	r2, [r4, r3]
   10122:	784a      	ldrb	r2, [r1, #1]
   10124:	780b      	ldrb	r3, [r1, #0]
   10126:	0212      	lsls	r2, r2, #8
   10128:	431a      	orrs	r2, r3
   1012a:	788b      	ldrb	r3, [r1, #2]
   1012c:	041b      	lsls	r3, r3, #16
   1012e:	431a      	orrs	r2, r3
   10130:	78cb      	ldrb	r3, [r1, #3]
   10132:	061b      	lsls	r3, r3, #24
   10134:	4313      	orrs	r3, r2
   10136:	d012      	beq.n	1015e <UpdateTransactionCompleteCbParams+0x4a>
   10138:	0022      	movs	r2, r4
   1013a:	2504      	movs	r5, #4
   1013c:	32d8      	adds	r2, #216	; 0xd8
   1013e:	6812      	ldr	r2, [r2, #0]
   10140:	422a      	tst	r2, r5
   10142:	d00c      	beq.n	1015e <UpdateTransactionCompleteCbParams+0x4a>
   10144:	0022      	movs	r2, r4
   10146:	32dc      	adds	r2, #220	; 0xdc
   10148:	6812      	ldr	r2, [r2, #0]
   1014a:	2a00      	cmp	r2, #0
   1014c:	d007      	beq.n	1015e <UpdateTransactionCompleteCbParams+0x4a>
   1014e:	0021      	movs	r1, r4
   10150:	31e0      	adds	r1, #224	; 0xe0
   10152:	700d      	strb	r5, [r1, #0]
   10154:	0025      	movs	r5, r4
   10156:	35e4      	adds	r5, #228	; 0xe4
   10158:	7028      	strb	r0, [r5, #0]
   1015a:	0010      	movs	r0, r2
   1015c:	4798      	blx	r3
   1015e:	23da      	movs	r3, #218	; 0xda
   10160:	005b      	lsls	r3, r3, #1
   10162:	5ce3      	ldrb	r3, [r4, r3]
   10164:	2b00      	cmp	r3, #0
   10166:	d002      	beq.n	1016e <UpdateTransactionCompleteCbParams+0x5a>
   10168:	2300      	movs	r3, #0
   1016a:	34dc      	adds	r4, #220	; 0xdc
   1016c:	6023      	str	r3, [r4, #0]
   1016e:	bd70      	pop	{r4, r5, r6, pc}
   10170:	200032ac 	.word	0x200032ac
   10174:	20002fd8 	.word	0x20002fd8

00010178 <UpdateRxDataAvailableCbParams>:
   10178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1017a:	4e13      	ldr	r6, [pc, #76]	; (101c8 <UpdateRxDataAvailableCbParams+0x50>)
   1017c:	7874      	ldrb	r4, [r6, #1]
   1017e:	7835      	ldrb	r5, [r6, #0]
   10180:	0224      	lsls	r4, r4, #8
   10182:	432c      	orrs	r4, r5
   10184:	78b5      	ldrb	r5, [r6, #2]
   10186:	042d      	lsls	r5, r5, #16
   10188:	432c      	orrs	r4, r5
   1018a:	78f5      	ldrb	r5, [r6, #3]
   1018c:	062d      	lsls	r5, r5, #24
   1018e:	4325      	orrs	r5, r4
   10190:	d019      	beq.n	101c6 <UpdateRxDataAvailableCbParams+0x4e>
   10192:	4c0e      	ldr	r4, [pc, #56]	; (101cc <UpdateRxDataAvailableCbParams+0x54>)
   10194:	2702      	movs	r7, #2
   10196:	0026      	movs	r6, r4
   10198:	36d8      	adds	r6, #216	; 0xd8
   1019a:	6836      	ldr	r6, [r6, #0]
   1019c:	423e      	tst	r6, r7
   1019e:	d012      	beq.n	101c6 <UpdateRxDataAvailableCbParams+0x4e>
   101a0:	0026      	movs	r6, r4
   101a2:	36e0      	adds	r6, #224	; 0xe0
   101a4:	7037      	strb	r7, [r6, #0]
   101a6:	0027      	movs	r7, r4
   101a8:	37e4      	adds	r7, #228	; 0xe4
   101aa:	6038      	str	r0, [r7, #0]
   101ac:	0020      	movs	r0, r4
   101ae:	30e8      	adds	r0, #232	; 0xe8
   101b0:	6001      	str	r1, [r0, #0]
   101b2:	0021      	movs	r1, r4
   101b4:	31ec      	adds	r1, #236	; 0xec
   101b6:	700a      	strb	r2, [r1, #0]
   101b8:	0022      	movs	r2, r4
   101ba:	34dc      	adds	r4, #220	; 0xdc
   101bc:	32ed      	adds	r2, #237	; 0xed
   101be:	7013      	strb	r3, [r2, #0]
   101c0:	0031      	movs	r1, r6
   101c2:	6820      	ldr	r0, [r4, #0]
   101c4:	47a8      	blx	r5
   101c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   101c8:	200032ac 	.word	0x200032ac
   101cc:	20002fd8 	.word	0x20002fd8

000101d0 <LorawanNotifyAppOnRxdone>:
   101d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   101d2:	4c25      	ldr	r4, [pc, #148]	; (10268 <LorawanNotifyAppOnRxdone+0x98>)
   101d4:	0007      	movs	r7, r0
   101d6:	0023      	movs	r3, r4
   101d8:	33d4      	adds	r3, #212	; 0xd4
   101da:	781b      	ldrb	r3, [r3, #0]
   101dc:	000d      	movs	r5, r1
   101de:	0016      	movs	r6, r2
   101e0:	2b01      	cmp	r3, #1
   101e2:	d136      	bne.n	10252 <LorawanNotifyAppOnRxdone+0x82>
   101e4:	0022      	movs	r2, r4
   101e6:	210e      	movs	r1, #14
   101e8:	325c      	adds	r2, #92	; 0x5c
   101ea:	7813      	ldrb	r3, [r2, #0]
   101ec:	438b      	bics	r3, r1
   101ee:	7013      	strb	r3, [r2, #0]
   101f0:	491e      	ldr	r1, [pc, #120]	; (1026c <LorawanNotifyAppOnRxdone+0x9c>)
   101f2:	784a      	ldrb	r2, [r1, #1]
   101f4:	780b      	ldrb	r3, [r1, #0]
   101f6:	0212      	lsls	r2, r2, #8
   101f8:	431a      	orrs	r2, r3
   101fa:	788b      	ldrb	r3, [r1, #2]
   101fc:	041b      	lsls	r3, r3, #16
   101fe:	431a      	orrs	r2, r3
   10200:	78cb      	ldrb	r3, [r1, #3]
   10202:	061b      	lsls	r3, r3, #24
   10204:	4313      	orrs	r3, r2
   10206:	d023      	beq.n	10250 <LorawanNotifyAppOnRxdone+0x80>
   10208:	0022      	movs	r2, r4
   1020a:	2120      	movs	r1, #32
   1020c:	326c      	adds	r2, #108	; 0x6c
   1020e:	7813      	ldrb	r3, [r2, #0]
   10210:	438b      	bics	r3, r1
   10212:	7013      	strb	r3, [r2, #0]
   10214:	0023      	movs	r3, r4
   10216:	33d4      	adds	r3, #212	; 0xd4
   10218:	781b      	ldrb	r3, [r3, #0]
   1021a:	7878      	ldrb	r0, [r7, #1]
   1021c:	469c      	mov	ip, r3
   1021e:	78fa      	ldrb	r2, [r7, #3]
   10220:	78b9      	ldrb	r1, [r7, #2]
   10222:	793b      	ldrb	r3, [r7, #4]
   10224:	4667      	mov	r7, ip
   10226:	0209      	lsls	r1, r1, #8
   10228:	4301      	orrs	r1, r0
   1022a:	0410      	lsls	r0, r2, #16
   1022c:	4308      	orrs	r0, r1
   1022e:	061b      	lsls	r3, r3, #24
   10230:	4318      	orrs	r0, r3
   10232:	0032      	movs	r2, r6
   10234:	2308      	movs	r3, #8
   10236:	0029      	movs	r1, r5
   10238:	2f04      	cmp	r7, #4
   1023a:	d112      	bne.n	10262 <LorawanNotifyAppOnRxdone+0x92>
   1023c:	4d0c      	ldr	r5, [pc, #48]	; (10270 <LorawanNotifyAppOnRxdone+0xa0>)
   1023e:	47a8      	blx	r5
   10240:	23da      	movs	r3, #218	; 0xda
   10242:	005b      	lsls	r3, r3, #1
   10244:	5ce3      	ldrb	r3, [r4, r3]
   10246:	2b00      	cmp	r3, #0
   10248:	d102      	bne.n	10250 <LorawanNotifyAppOnRxdone+0x80>
   1024a:	2008      	movs	r0, #8
   1024c:	4b09      	ldr	r3, [pc, #36]	; (10274 <LorawanNotifyAppOnRxdone+0xa4>)
   1024e:	4798      	blx	r3
   10250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10252:	2b04      	cmp	r3, #4
   10254:	d1cc      	bne.n	101f0 <LorawanNotifyAppOnRxdone+0x20>
   10256:	0023      	movs	r3, r4
   10258:	33c8      	adds	r3, #200	; 0xc8
   1025a:	7818      	ldrb	r0, [r3, #0]
   1025c:	4b06      	ldr	r3, [pc, #24]	; (10278 <LorawanNotifyAppOnRxdone+0xa8>)
   1025e:	4798      	blx	r3
   10260:	e7c6      	b.n	101f0 <LorawanNotifyAppOnRxdone+0x20>
   10262:	4d06      	ldr	r5, [pc, #24]	; (1027c <LorawanNotifyAppOnRxdone+0xac>)
   10264:	47a8      	blx	r5
   10266:	e7eb      	b.n	10240 <LorawanNotifyAppOnRxdone+0x70>
   10268:	20002fd8 	.word	0x20002fd8
   1026c:	200032ac 	.word	0x200032ac
   10270:	000116b9 	.word	0x000116b9
   10274:	00010115 	.word	0x00010115
   10278:	0000ca3d 	.word	0x0000ca3d
   1027c:	00010179 	.word	0x00010179

00010280 <LorawanCheckAndDoRetryOnTimeout>:
   10280:	b513      	push	{r0, r1, r4, lr}
   10282:	4c34      	ldr	r4, [pc, #208]	; (10354 <LorawanCheckAndDoRetryOnTimeout+0xd4>)
   10284:	0023      	movs	r3, r4
   10286:	336c      	adds	r3, #108	; 0x6c
   10288:	781b      	ldrb	r3, [r3, #0]
   1028a:	0022      	movs	r2, r4
   1028c:	07db      	lsls	r3, r3, #31
   1028e:	d54d      	bpl.n	1032c <LorawanCheckAndDoRetryOnTimeout+0xac>
   10290:	0023      	movs	r3, r4
   10292:	32bc      	adds	r2, #188	; 0xbc
   10294:	33ba      	adds	r3, #186	; 0xba
   10296:	7812      	ldrb	r2, [r2, #0]
   10298:	781b      	ldrb	r3, [r3, #0]
   1029a:	429a      	cmp	r2, r3
   1029c:	d838      	bhi.n	10310 <LorawanCheckAndDoRetryOnTimeout+0x90>
   1029e:	23df      	movs	r3, #223	; 0xdf
   102a0:	005b      	lsls	r3, r3, #1
   102a2:	5ce3      	ldrb	r3, [r4, r3]
   102a4:	2b00      	cmp	r3, #0
   102a6:	d033      	beq.n	10310 <LorawanCheckAndDoRetryOnTimeout+0x90>
   102a8:	0023      	movs	r3, r4
   102aa:	33d4      	adds	r3, #212	; 0xd4
   102ac:	781b      	ldrb	r3, [r3, #0]
   102ae:	2b01      	cmp	r3, #1
   102b0:	d11a      	bne.n	102e8 <LorawanCheckAndDoRetryOnTimeout+0x68>
   102b2:	0021      	movs	r1, r4
   102b4:	220e      	movs	r2, #14
   102b6:	315c      	adds	r1, #92	; 0x5c
   102b8:	780b      	ldrb	r3, [r1, #0]
   102ba:	4393      	bics	r3, r2
   102bc:	001a      	movs	r2, r3
   102be:	230c      	movs	r3, #12
   102c0:	4313      	orrs	r3, r2
   102c2:	700b      	strb	r3, [r1, #0]
   102c4:	0023      	movs	r3, r4
   102c6:	33b2      	adds	r3, #178	; 0xb2
   102c8:	8819      	ldrh	r1, [r3, #0]
   102ca:	23c0      	movs	r3, #192	; 0xc0
   102cc:	33ff      	adds	r3, #255	; 0xff
   102ce:	5ce3      	ldrb	r3, [r4, r3]
   102d0:	2200      	movs	r2, #0
   102d2:	1acb      	subs	r3, r1, r3
   102d4:	21fa      	movs	r1, #250	; 0xfa
   102d6:	34c8      	adds	r4, #200	; 0xc8
   102d8:	0089      	lsls	r1, r1, #2
   102da:	7820      	ldrb	r0, [r4, #0]
   102dc:	4359      	muls	r1, r3
   102de:	9200      	str	r2, [sp, #0]
   102e0:	4b1d      	ldr	r3, [pc, #116]	; (10358 <LorawanCheckAndDoRetryOnTimeout+0xd8>)
   102e2:	4c1e      	ldr	r4, [pc, #120]	; (1035c <LorawanCheckAndDoRetryOnTimeout+0xdc>)
   102e4:	47a0      	blx	r4
   102e6:	bd13      	pop	{r0, r1, r4, pc}
   102e8:	2b04      	cmp	r3, #4
   102ea:	d1fc      	bne.n	102e6 <LorawanCheckAndDoRetryOnTimeout+0x66>
   102ec:	4b1c      	ldr	r3, [pc, #112]	; (10360 <LorawanCheckAndDoRetryOnTimeout+0xe0>)
   102ee:	4798      	blx	r3
   102f0:	34a6      	adds	r4, #166	; 0xa6
   102f2:	300d      	adds	r0, #13
   102f4:	8823      	ldrh	r3, [r4, #0]
   102f6:	b280      	uxth	r0, r0
   102f8:	4283      	cmp	r3, r0
   102fa:	d802      	bhi.n	10302 <LorawanCheckAndDoRetryOnTimeout+0x82>
   102fc:	4b19      	ldr	r3, [pc, #100]	; (10364 <LorawanCheckAndDoRetryOnTimeout+0xe4>)
   102fe:	4798      	blx	r3
   10300:	e7f1      	b.n	102e6 <LorawanCheckAndDoRetryOnTimeout+0x66>
   10302:	200e      	movs	r0, #14
   10304:	4b18      	ldr	r3, [pc, #96]	; (10368 <LorawanCheckAndDoRetryOnTimeout+0xe8>)
   10306:	4798      	blx	r3
   10308:	4b18      	ldr	r3, [pc, #96]	; (1036c <LorawanCheckAndDoRetryOnTimeout+0xec>)
   1030a:	4798      	blx	r3
   1030c:	4b18      	ldr	r3, [pc, #96]	; (10370 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   1030e:	e7f6      	b.n	102fe <LorawanCheckAndDoRetryOnTimeout+0x7e>
   10310:	2012      	movs	r0, #18
   10312:	4b15      	ldr	r3, [pc, #84]	; (10368 <LorawanCheckAndDoRetryOnTimeout+0xe8>)
   10314:	4798      	blx	r3
   10316:	4b15      	ldr	r3, [pc, #84]	; (1036c <LorawanCheckAndDoRetryOnTimeout+0xec>)
   10318:	4798      	blx	r3
   1031a:	34d4      	adds	r4, #212	; 0xd4
   1031c:	4b14      	ldr	r3, [pc, #80]	; (10370 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   1031e:	4798      	blx	r3
   10320:	7823      	ldrb	r3, [r4, #0]
   10322:	2b04      	cmp	r3, #4
   10324:	d1df      	bne.n	102e6 <LorawanCheckAndDoRetryOnTimeout+0x66>
   10326:	4b13      	ldr	r3, [pc, #76]	; (10374 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   10328:	4798      	blx	r3
   1032a:	e7dc      	b.n	102e6 <LorawanCheckAndDoRetryOnTimeout+0x66>
   1032c:	0023      	movs	r3, r4
   1032e:	32bb      	adds	r2, #187	; 0xbb
   10330:	33b9      	adds	r3, #185	; 0xb9
   10332:	7812      	ldrb	r2, [r2, #0]
   10334:	781b      	ldrb	r3, [r3, #0]
   10336:	429a      	cmp	r2, r3
   10338:	d804      	bhi.n	10344 <LorawanCheckAndDoRetryOnTimeout+0xc4>
   1033a:	23df      	movs	r3, #223	; 0xdf
   1033c:	005b      	lsls	r3, r3, #1
   1033e:	5ce3      	ldrb	r3, [r4, r3]
   10340:	2b00      	cmp	r3, #0
   10342:	d1db      	bne.n	102fc <LorawanCheckAndDoRetryOnTimeout+0x7c>
   10344:	4b0c      	ldr	r3, [pc, #48]	; (10378 <LorawanCheckAndDoRetryOnTimeout+0xf8>)
   10346:	4798      	blx	r3
   10348:	4b09      	ldr	r3, [pc, #36]	; (10370 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   1034a:	4798      	blx	r3
   1034c:	2008      	movs	r0, #8
   1034e:	4b06      	ldr	r3, [pc, #24]	; (10368 <LorawanCheckAndDoRetryOnTimeout+0xe8>)
   10350:	4798      	blx	r3
   10352:	e7c8      	b.n	102e6 <LorawanCheckAndDoRetryOnTimeout+0x66>
   10354:	20002fd8 	.word	0x20002fd8
   10358:	0001037d 	.word	0x0001037d
   1035c:	0000c739 	.word	0x0000c739
   10360:	0000ee05 	.word	0x0000ee05
   10364:	0000fa5d 	.word	0x0000fa5d
   10368:	00010115 	.word	0x00010115
   1036c:	0000f4dd 	.word	0x0000f4dd
   10370:	0000ed81 	.word	0x0000ed81
   10374:	0000de65 	.word	0x0000de65
   10378:	0000f50d 	.word	0x0000f50d

0001037c <AckRetransmissionCallback>:
   1037c:	b510      	push	{r4, lr}
   1037e:	4c1c      	ldr	r4, [pc, #112]	; (103f0 <AckRetransmissionCallback+0x74>)
   10380:	0023      	movs	r3, r4
   10382:	335c      	adds	r3, #92	; 0x5c
   10384:	781b      	ldrb	r3, [r3, #0]
   10386:	2b7f      	cmp	r3, #127	; 0x7f
   10388:	d82e      	bhi.n	103e8 <AckRetransmissionCallback+0x6c>
   1038a:	0023      	movs	r3, r4
   1038c:	33d4      	adds	r3, #212	; 0xd4
   1038e:	781b      	ldrb	r3, [r3, #0]
   10390:	2b04      	cmp	r3, #4
   10392:	d102      	bne.n	1039a <AckRetransmissionCallback+0x1e>
   10394:	4b17      	ldr	r3, [pc, #92]	; (103f4 <AckRetransmissionCallback+0x78>)
   10396:	4798      	blx	r3
   10398:	e01f      	b.n	103da <AckRetransmissionCallback+0x5e>
   1039a:	2b01      	cmp	r3, #1
   1039c:	d11d      	bne.n	103da <AckRetransmissionCallback+0x5e>
   1039e:	0022      	movs	r2, r4
   103a0:	0023      	movs	r3, r4
   103a2:	32bc      	adds	r2, #188	; 0xbc
   103a4:	33ba      	adds	r3, #186	; 0xba
   103a6:	7812      	ldrb	r2, [r2, #0]
   103a8:	781b      	ldrb	r3, [r3, #0]
   103aa:	429a      	cmp	r2, r3
   103ac:	d816      	bhi.n	103dc <AckRetransmissionCallback+0x60>
   103ae:	23df      	movs	r3, #223	; 0xdf
   103b0:	005b      	lsls	r3, r3, #1
   103b2:	5ce3      	ldrb	r3, [r4, r3]
   103b4:	2b00      	cmp	r3, #0
   103b6:	d011      	beq.n	103dc <AckRetransmissionCallback+0x60>
   103b8:	4b0f      	ldr	r3, [pc, #60]	; (103f8 <AckRetransmissionCallback+0x7c>)
   103ba:	4798      	blx	r3
   103bc:	34a6      	adds	r4, #166	; 0xa6
   103be:	300d      	adds	r0, #13
   103c0:	8823      	ldrh	r3, [r4, #0]
   103c2:	b280      	uxth	r0, r0
   103c4:	4283      	cmp	r3, r0
   103c6:	d801      	bhi.n	103cc <AckRetransmissionCallback+0x50>
   103c8:	4b0c      	ldr	r3, [pc, #48]	; (103fc <AckRetransmissionCallback+0x80>)
   103ca:	e7e4      	b.n	10396 <AckRetransmissionCallback+0x1a>
   103cc:	4b0c      	ldr	r3, [pc, #48]	; (10400 <AckRetransmissionCallback+0x84>)
   103ce:	4798      	blx	r3
   103d0:	4b0c      	ldr	r3, [pc, #48]	; (10404 <AckRetransmissionCallback+0x88>)
   103d2:	4798      	blx	r3
   103d4:	200e      	movs	r0, #14
   103d6:	4b0c      	ldr	r3, [pc, #48]	; (10408 <AckRetransmissionCallback+0x8c>)
   103d8:	4798      	blx	r3
   103da:	bd10      	pop	{r4, pc}
   103dc:	4b08      	ldr	r3, [pc, #32]	; (10400 <AckRetransmissionCallback+0x84>)
   103de:	4798      	blx	r3
   103e0:	4b08      	ldr	r3, [pc, #32]	; (10404 <AckRetransmissionCallback+0x88>)
   103e2:	4798      	blx	r3
   103e4:	2012      	movs	r0, #18
   103e6:	e7f6      	b.n	103d6 <AckRetransmissionCallback+0x5a>
   103e8:	4b05      	ldr	r3, [pc, #20]	; (10400 <AckRetransmissionCallback+0x84>)
   103ea:	4798      	blx	r3
   103ec:	4b05      	ldr	r3, [pc, #20]	; (10404 <AckRetransmissionCallback+0x88>)
   103ee:	e7d2      	b.n	10396 <AckRetransmissionCallback+0x1a>
   103f0:	20002fd8 	.word	0x20002fd8
   103f4:	00010281 	.word	0x00010281
   103f8:	0000ee05 	.word	0x0000ee05
   103fc:	0000fa5d 	.word	0x0000fa5d
   10400:	0000f4dd 	.word	0x0000f4dd
   10404:	0000ed81 	.word	0x0000ed81
   10408:	00010115 	.word	0x00010115

0001040c <LORAWAN_RxTimeout>:
   1040c:	4b23      	ldr	r3, [pc, #140]	; (1049c <LORAWAN_RxTimeout+0x90>)
   1040e:	b510      	push	{r4, lr}
   10410:	001a      	movs	r2, r3
   10412:	325c      	adds	r2, #92	; 0x5c
   10414:	7812      	ldrb	r2, [r2, #0]
   10416:	b251      	sxtb	r1, r2
   10418:	2900      	cmp	r1, #0
   1041a:	db23      	blt.n	10464 <LORAWAN_RxTimeout+0x58>
   1041c:	0019      	movs	r1, r3
   1041e:	31d4      	adds	r1, #212	; 0xd4
   10420:	7809      	ldrb	r1, [r1, #0]
   10422:	2904      	cmp	r1, #4
   10424:	d104      	bne.n	10430 <LORAWAN_RxTimeout+0x24>
   10426:	07d1      	lsls	r1, r2, #31
   10428:	d502      	bpl.n	10430 <LORAWAN_RxTimeout+0x24>
   1042a:	4b1d      	ldr	r3, [pc, #116]	; (104a0 <LORAWAN_RxTimeout+0x94>)
   1042c:	4798      	blx	r3
   1042e:	bd10      	pop	{r4, pc}
   10430:	210e      	movs	r1, #14
   10432:	0010      	movs	r0, r2
   10434:	4008      	ands	r0, r1
   10436:	2806      	cmp	r0, #6
   10438:	d107      	bne.n	1044a <LORAWAN_RxTimeout+0x3e>
   1043a:	335c      	adds	r3, #92	; 0x5c
   1043c:	781a      	ldrb	r2, [r3, #0]
   1043e:	438a      	bics	r2, r1
   10440:	0011      	movs	r1, r2
   10442:	2208      	movs	r2, #8
   10444:	430a      	orrs	r2, r1
   10446:	701a      	strb	r2, [r3, #0]
   10448:	e7f1      	b.n	1042e <LORAWAN_RxTimeout+0x22>
   1044a:	2004      	movs	r0, #4
   1044c:	336c      	adds	r3, #108	; 0x6c
   1044e:	781b      	ldrb	r3, [r3, #0]
   10450:	4203      	tst	r3, r0
   10452:	d002      	beq.n	1045a <LORAWAN_RxTimeout+0x4e>
   10454:	4b13      	ldr	r3, [pc, #76]	; (104a4 <LORAWAN_RxTimeout+0x98>)
   10456:	4798      	blx	r3
   10458:	e7e9      	b.n	1042e <LORAWAN_RxTimeout+0x22>
   1045a:	07d3      	lsls	r3, r2, #31
   1045c:	d5e7      	bpl.n	1042e <LORAWAN_RxTimeout+0x22>
   1045e:	4b12      	ldr	r3, [pc, #72]	; (104a8 <LORAWAN_RxTimeout+0x9c>)
   10460:	4798      	blx	r3
   10462:	e7e4      	b.n	1042e <LORAWAN_RxTimeout+0x22>
   10464:	4811      	ldr	r0, [pc, #68]	; (104ac <LORAWAN_RxTimeout+0xa0>)
   10466:	7841      	ldrb	r1, [r0, #1]
   10468:	7802      	ldrb	r2, [r0, #0]
   1046a:	0209      	lsls	r1, r1, #8
   1046c:	4311      	orrs	r1, r2
   1046e:	7882      	ldrb	r2, [r0, #2]
   10470:	0412      	lsls	r2, r2, #16
   10472:	4311      	orrs	r1, r2
   10474:	78c2      	ldrb	r2, [r0, #3]
   10476:	0612      	lsls	r2, r2, #24
   10478:	430a      	orrs	r2, r1
   1047a:	d0d8      	beq.n	1042e <LORAWAN_RxTimeout+0x22>
   1047c:	21da      	movs	r1, #218	; 0xda
   1047e:	2001      	movs	r0, #1
   10480:	0049      	lsls	r1, r1, #1
   10482:	5458      	strb	r0, [r3, r1]
   10484:	0019      	movs	r1, r3
   10486:	2404      	movs	r4, #4
   10488:	31e0      	adds	r1, #224	; 0xe0
   1048a:	700c      	strb	r4, [r1, #0]
   1048c:	001c      	movs	r4, r3
   1048e:	33dc      	adds	r3, #220	; 0xdc
   10490:	34e4      	adds	r4, #228	; 0xe4
   10492:	7020      	strb	r0, [r4, #0]
   10494:	6818      	ldr	r0, [r3, #0]
   10496:	4790      	blx	r2
   10498:	e7c9      	b.n	1042e <LORAWAN_RxTimeout+0x22>
   1049a:	46c0      	nop			; (mov r8, r8)
   1049c:	20002fd8 	.word	0x20002fd8
   104a0:	0001168d 	.word	0x0001168d
   104a4:	0000f531 	.word	0x0000f531
   104a8:	00010281 	.word	0x00010281
   104ac:	200032ac 	.word	0x200032ac

000104b0 <LorawanConfigureRadioForRX2>:
   104b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   104b2:	466b      	mov	r3, sp
   104b4:	4c21      	ldr	r4, [pc, #132]	; (1053c <LorawanConfigureRadioForRX2+0x8c>)
   104b6:	1cdd      	adds	r5, r3, #3
   104b8:	0023      	movs	r3, r4
   104ba:	2100      	movs	r1, #0
   104bc:	336c      	adds	r3, #108	; 0x6c
   104be:	781b      	ldrb	r3, [r3, #0]
   104c0:	0007      	movs	r7, r0
   104c2:	7029      	strb	r1, [r5, #0]
   104c4:	075b      	lsls	r3, r3, #29
   104c6:	d52c      	bpl.n	10522 <LorawanConfigureRadioForRX2+0x72>
   104c8:	002a      	movs	r2, r5
   104ca:	2009      	movs	r0, #9
   104cc:	4b1c      	ldr	r3, [pc, #112]	; (10540 <LorawanConfigureRadioForRX2+0x90>)
   104ce:	4798      	blx	r3
   104d0:	0022      	movs	r2, r4
   104d2:	0023      	movs	r3, r4
   104d4:	324c      	adds	r2, #76	; 0x4c
   104d6:	8811      	ldrh	r1, [r2, #0]
   104d8:	334a      	adds	r3, #74	; 0x4a
   104da:	881b      	ldrh	r3, [r3, #0]
   104dc:	0409      	lsls	r1, r1, #16
   104de:	4319      	orrs	r1, r3
   104e0:	7828      	ldrb	r0, [r5, #0]
   104e2:	4b18      	ldr	r3, [pc, #96]	; (10544 <LorawanConfigureRadioForRX2+0x94>)
   104e4:	4798      	blx	r3
   104e6:	2300      	movs	r3, #0
   104e8:	0022      	movs	r2, r4
   104ea:	ae01      	add	r6, sp, #4
   104ec:	7033      	strb	r3, [r6, #0]
   104ee:	32d4      	adds	r2, #212	; 0xd4
   104f0:	7812      	ldrb	r2, [r2, #0]
   104f2:	2a04      	cmp	r2, #4
   104f4:	d11a      	bne.n	1052c <LorawanConfigureRadioForRX2+0x7c>
   104f6:	345c      	adds	r4, #92	; 0x5c
   104f8:	7822      	ldrb	r2, [r4, #0]
   104fa:	07d2      	lsls	r2, r2, #31
   104fc:	d516      	bpl.n	1052c <LorawanConfigureRadioForRX2+0x7c>
   104fe:	8073      	strh	r3, [r6, #2]
   10500:	0030      	movs	r0, r6
   10502:	4b11      	ldr	r3, [pc, #68]	; (10548 <LorawanConfigureRadioForRX2+0x98>)
   10504:	4798      	blx	r3
   10506:	1e04      	subs	r4, r0, #0
   10508:	d00a      	beq.n	10520 <LorawanConfigureRadioForRX2+0x70>
   1050a:	4b10      	ldr	r3, [pc, #64]	; (1054c <LorawanConfigureRadioForRX2+0x9c>)
   1050c:	4798      	blx	r3
   1050e:	4b10      	ldr	r3, [pc, #64]	; (10550 <LorawanConfigureRadioForRX2+0xa0>)
   10510:	4798      	blx	r3
   10512:	4b10      	ldr	r3, [pc, #64]	; (10554 <LorawanConfigureRadioForRX2+0xa4>)
   10514:	4798      	blx	r3
   10516:	2f00      	cmp	r7, #0
   10518:	d002      	beq.n	10520 <LorawanConfigureRadioForRX2+0x70>
   1051a:	0020      	movs	r0, r4
   1051c:	4b0e      	ldr	r3, [pc, #56]	; (10558 <LorawanConfigureRadioForRX2+0xa8>)
   1051e:	4798      	blx	r3
   10520:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   10522:	0023      	movs	r3, r4
   10524:	334e      	adds	r3, #78	; 0x4e
   10526:	781b      	ldrb	r3, [r3, #0]
   10528:	702b      	strb	r3, [r5, #0]
   1052a:	e7d1      	b.n	104d0 <LorawanConfigureRadioForRX2+0x20>
   1052c:	466b      	mov	r3, sp
   1052e:	0029      	movs	r1, r5
   10530:	1d9a      	adds	r2, r3, #6
   10532:	2003      	movs	r0, #3
   10534:	4b02      	ldr	r3, [pc, #8]	; (10540 <LorawanConfigureRadioForRX2+0x90>)
   10536:	4798      	blx	r3
   10538:	e7e2      	b.n	10500 <LorawanConfigureRadioForRX2+0x50>
   1053a:	46c0      	nop			; (mov r8, r8)
   1053c:	20002fd8 	.word	0x20002fd8
   10540:	0000c2cd 	.word	0x0000c2cd
   10544:	0000f985 	.word	0x0000f985
   10548:	0000e755 	.word	0x0000e755
   1054c:	0000f4dd 	.word	0x0000f4dd
   10550:	0000f50d 	.word	0x0000f50d
   10554:	0000ed81 	.word	0x0000ed81
   10558:	00010115 	.word	0x00010115

0001055c <SetReceptionNotOkState>:
   1055c:	22da      	movs	r2, #218	; 0xda
   1055e:	2101      	movs	r1, #1
   10560:	4b19      	ldr	r3, [pc, #100]	; (105c8 <SetReceptionNotOkState+0x6c>)
   10562:	0052      	lsls	r2, r2, #1
   10564:	b510      	push	{r4, lr}
   10566:	5499      	strb	r1, [r3, r2]
   10568:	001a      	movs	r2, r3
   1056a:	0019      	movs	r1, r3
   1056c:	32d4      	adds	r2, #212	; 0xd4
   1056e:	7812      	ldrb	r2, [r2, #0]
   10570:	315c      	adds	r1, #92	; 0x5c
   10572:	200e      	movs	r0, #14
   10574:	2a01      	cmp	r2, #1
   10576:	d11d      	bne.n	105b4 <SetReceptionNotOkState+0x58>
   10578:	780a      	ldrb	r2, [r1, #0]
   1057a:	4002      	ands	r2, r0
   1057c:	2a0a      	cmp	r2, #10
   1057e:	d006      	beq.n	1058e <SetReceptionNotOkState+0x32>
   10580:	2a06      	cmp	r2, #6
   10582:	d113      	bne.n	105ac <SetReceptionNotOkState+0x50>
   10584:	001a      	movs	r2, r3
   10586:	32d0      	adds	r2, #208	; 0xd0
   10588:	7812      	ldrb	r2, [r2, #0]
   1058a:	2a00      	cmp	r2, #0
   1058c:	d00e      	beq.n	105ac <SetReceptionNotOkState+0x50>
   1058e:	0019      	movs	r1, r3
   10590:	2001      	movs	r0, #1
   10592:	316c      	adds	r1, #108	; 0x6c
   10594:	780a      	ldrb	r2, [r1, #0]
   10596:	240e      	movs	r4, #14
   10598:	4382      	bics	r2, r0
   1059a:	700a      	strb	r2, [r1, #0]
   1059c:	001a      	movs	r2, r3
   1059e:	325c      	adds	r2, #92	; 0x5c
   105a0:	7811      	ldrb	r1, [r2, #0]
   105a2:	43a1      	bics	r1, r4
   105a4:	7011      	strb	r1, [r2, #0]
   105a6:	7851      	ldrb	r1, [r2, #1]
   105a8:	4381      	bics	r1, r0
   105aa:	7051      	strb	r1, [r2, #1]
   105ac:	2200      	movs	r2, #0
   105ae:	33d0      	adds	r3, #208	; 0xd0
   105b0:	701a      	strb	r2, [r3, #0]
   105b2:	bd10      	pop	{r4, pc}
   105b4:	230a      	movs	r3, #10
   105b6:	780a      	ldrb	r2, [r1, #0]
   105b8:	4382      	bics	r2, r0
   105ba:	4313      	orrs	r3, r2
   105bc:	700b      	strb	r3, [r1, #0]
   105be:	2000      	movs	r0, #0
   105c0:	4b02      	ldr	r3, [pc, #8]	; (105cc <SetReceptionNotOkState+0x70>)
   105c2:	4798      	blx	r3
   105c4:	e7f5      	b.n	105b2 <SetReceptionNotOkState+0x56>
   105c6:	46c0      	nop			; (mov r8, r8)
   105c8:	20002fd8 	.word	0x20002fd8
   105cc:	000104b1 	.word	0x000104b1

000105d0 <UpdateCurrentDataRateAfterDataRangeChanges>:
   105d0:	4b09      	ldr	r3, [pc, #36]	; (105f8 <UpdateCurrentDataRateAfterDataRangeChanges+0x28>)
   105d2:	001a      	movs	r2, r3
   105d4:	32cb      	adds	r2, #203	; 0xcb
   105d6:	7811      	ldrb	r1, [r2, #0]
   105d8:	001a      	movs	r2, r3
   105da:	32bf      	adds	r2, #191	; 0xbf
   105dc:	7810      	ldrb	r0, [r2, #0]
   105de:	4288      	cmp	r0, r1
   105e0:	d900      	bls.n	105e4 <UpdateCurrentDataRateAfterDataRangeChanges+0x14>
   105e2:	7011      	strb	r1, [r2, #0]
   105e4:	001a      	movs	r2, r3
   105e6:	33bf      	adds	r3, #191	; 0xbf
   105e8:	32ca      	adds	r2, #202	; 0xca
   105ea:	7812      	ldrb	r2, [r2, #0]
   105ec:	7819      	ldrb	r1, [r3, #0]
   105ee:	4291      	cmp	r1, r2
   105f0:	d200      	bcs.n	105f4 <UpdateCurrentDataRateAfterDataRangeChanges+0x24>
   105f2:	701a      	strb	r2, [r3, #0]
   105f4:	4770      	bx	lr
   105f6:	46c0      	nop			; (mov r8, r8)
   105f8:	20002fd8 	.word	0x20002fd8

000105fc <ExecuteNewChannel>:
   105fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   105fe:	b08d      	sub	sp, #52	; 0x34
   10600:	7807      	ldrb	r7, [r0, #0]
   10602:	ab02      	add	r3, sp, #8
   10604:	0006      	movs	r6, r0
   10606:	71df      	strb	r7, [r3, #7]
   10608:	1c41      	adds	r1, r0, #1
   1060a:	4b59      	ldr	r3, [pc, #356]	; (10770 <ExecuteNewChannel+0x174>)
   1060c:	2204      	movs	r2, #4
   1060e:	a808      	add	r0, sp, #32
   10610:	4798      	blx	r3
   10612:	9b08      	ldr	r3, [sp, #32]
   10614:	4c57      	ldr	r4, [pc, #348]	; (10774 <ExecuteNewChannel+0x178>)
   10616:	021d      	lsls	r5, r3, #8
   10618:	2364      	movs	r3, #100	; 0x64
   1061a:	0a2d      	lsrs	r5, r5, #8
   1061c:	435d      	muls	r5, r3
   1061e:	1d73      	adds	r3, r6, #5
   10620:	9301      	str	r3, [sp, #4]
   10622:	0023      	movs	r3, r4
   10624:	9508      	str	r5, [sp, #32]
   10626:	33d6      	adds	r3, #214	; 0xd6
   10628:	781b      	ldrb	r3, [r3, #0]
   1062a:	3b02      	subs	r3, #2
   1062c:	2b01      	cmp	r3, #1
   1062e:	d800      	bhi.n	10632 <ExecuteNewChannel+0x36>
   10630:	e092      	b.n	10758 <ExecuteNewChannel+0x15c>
   10632:	7933      	ldrb	r3, [r6, #4]
   10634:	a904      	add	r1, sp, #16
   10636:	9300      	str	r3, [sp, #0]
   10638:	2300      	movs	r3, #0
   1063a:	2015      	movs	r0, #21
   1063c:	4e4e      	ldr	r6, [pc, #312]	; (10778 <ExecuteNewChannel+0x17c>)
   1063e:	700f      	strb	r7, [r1, #0]
   10640:	704b      	strb	r3, [r1, #1]
   10642:	47b0      	blx	r6
   10644:	2808      	cmp	r0, #8
   10646:	d12b      	bne.n	106a0 <ExecuteNewChannel+0xa4>
   10648:	466a      	mov	r2, sp
   1064a:	ab02      	add	r3, sp, #8
   1064c:	79db      	ldrb	r3, [r3, #7]
   1064e:	7812      	ldrb	r2, [r2, #0]
   10650:	af06      	add	r7, sp, #24
   10652:	a90a      	add	r1, sp, #40	; 0x28
   10654:	3806      	subs	r0, #6
   10656:	703b      	strb	r3, [r7, #0]
   10658:	707a      	strb	r2, [r7, #1]
   1065a:	710b      	strb	r3, [r1, #4]
   1065c:	950a      	str	r5, [sp, #40]	; 0x28
   1065e:	47b0      	blx	r6
   10660:	2808      	cmp	r0, #8
   10662:	d001      	beq.n	10668 <ExecuteNewChannel+0x6c>
   10664:	2d00      	cmp	r5, #0
   10666:	d10b      	bne.n	10680 <ExecuteNewChannel+0x84>
   10668:	0023      	movs	r3, r4
   1066a:	33b8      	adds	r3, #184	; 0xb8
   1066c:	781a      	ldrb	r2, [r3, #0]
   1066e:	2303      	movs	r3, #3
   10670:	4353      	muls	r3, r2
   10672:	2280      	movs	r2, #128	; 0x80
   10674:	18e3      	adds	r3, r4, r3
   10676:	3370      	adds	r3, #112	; 0x70
   10678:	7899      	ldrb	r1, [r3, #2]
   1067a:	4252      	negs	r2, r2
   1067c:	430a      	orrs	r2, r1
   1067e:	709a      	strb	r2, [r3, #2]
   10680:	0039      	movs	r1, r7
   10682:	2012      	movs	r0, #18
   10684:	47b0      	blx	r6
   10686:	2808      	cmp	r0, #8
   10688:	d10a      	bne.n	106a0 <ExecuteNewChannel+0xa4>
   1068a:	0023      	movs	r3, r4
   1068c:	33b8      	adds	r3, #184	; 0xb8
   1068e:	781a      	ldrb	r2, [r3, #0]
   10690:	2303      	movs	r3, #3
   10692:	4353      	muls	r3, r2
   10694:	2240      	movs	r2, #64	; 0x40
   10696:	18e3      	adds	r3, r4, r3
   10698:	3370      	adds	r3, #112	; 0x70
   1069a:	7899      	ldrb	r1, [r3, #2]
   1069c:	430a      	orrs	r2, r1
   1069e:	709a      	strb	r2, [r3, #2]
   106a0:	0023      	movs	r3, r4
   106a2:	33b8      	adds	r3, #184	; 0xb8
   106a4:	781a      	ldrb	r2, [r3, #0]
   106a6:	2303      	movs	r3, #3
   106a8:	4353      	muls	r3, r2
   106aa:	18e3      	adds	r3, r4, r3
   106ac:	3370      	adds	r3, #112	; 0x70
   106ae:	789b      	ldrb	r3, [r3, #2]
   106b0:	09da      	lsrs	r2, r3, #7
   106b2:	2a01      	cmp	r2, #1
   106b4:	d150      	bne.n	10758 <ExecuteNewChannel+0x15c>
   106b6:	065b      	lsls	r3, r3, #25
   106b8:	d54e      	bpl.n	10758 <ExecuteNewChannel+0x15c>
   106ba:	4e30      	ldr	r6, [pc, #192]	; (1077c <ExecuteNewChannel+0x180>)
   106bc:	2d00      	cmp	r5, #0
   106be:	d04e      	beq.n	1075e <ExecuteNewChannel+0x162>
   106c0:	a906      	add	r1, sp, #24
   106c2:	2012      	movs	r0, #18
   106c4:	47b0      	blx	r6
   106c6:	ad07      	add	r5, sp, #28
   106c8:	a90a      	add	r1, sp, #40	; 0x28
   106ca:	2000      	movs	r0, #0
   106cc:	47b0      	blx	r6
   106ce:	002a      	movs	r2, r5
   106d0:	2100      	movs	r1, #0
   106d2:	2014      	movs	r0, #20
   106d4:	4f2a      	ldr	r7, [pc, #168]	; (10780 <ExecuteNewChannel+0x184>)
   106d6:	47b8      	blx	r7
   106d8:	0023      	movs	r3, r4
   106da:	782a      	ldrb	r2, [r5, #0]
   106dc:	33ca      	adds	r3, #202	; 0xca
   106de:	701a      	strb	r2, [r3, #0]
   106e0:	0023      	movs	r3, r4
   106e2:	786a      	ldrb	r2, [r5, #1]
   106e4:	33cb      	adds	r3, #203	; 0xcb
   106e6:	701a      	strb	r2, [r3, #0]
   106e8:	34f0      	adds	r4, #240	; 0xf0
   106ea:	4b26      	ldr	r3, [pc, #152]	; (10784 <ExecuteNewChannel+0x188>)
   106ec:	4798      	blx	r3
   106ee:	7823      	ldrb	r3, [r4, #0]
   106f0:	079b      	lsls	r3, r3, #30
   106f2:	d50e      	bpl.n	10712 <ExecuteNewChannel+0x116>
   106f4:	2416      	movs	r4, #22
   106f6:	ab02      	add	r3, sp, #8
   106f8:	18e4      	adds	r4, r4, r3
   106fa:	1dd9      	adds	r1, r3, #7
   106fc:	0022      	movs	r2, r4
   106fe:	201e      	movs	r0, #30
   10700:	47b8      	blx	r7
   10702:	ab02      	add	r3, sp, #8
   10704:	79db      	ldrb	r3, [r3, #7]
   10706:	a909      	add	r1, sp, #36	; 0x24
   10708:	708b      	strb	r3, [r1, #2]
   1070a:	8823      	ldrh	r3, [r4, #0]
   1070c:	201e      	movs	r0, #30
   1070e:	800b      	strh	r3, [r1, #0]
   10710:	47b0      	blx	r6
   10712:	ab02      	add	r3, sp, #8
   10714:	79db      	ldrb	r3, [r3, #7]
   10716:	a905      	add	r1, sp, #20
   10718:	700b      	strb	r3, [r1, #0]
   1071a:	2301      	movs	r3, #1
   1071c:	2016      	movs	r0, #22
   1071e:	704b      	strb	r3, [r1, #1]
   10720:	4b16      	ldr	r3, [pc, #88]	; (1077c <ExecuteNewChannel+0x180>)
   10722:	4798      	blx	r3
   10724:	ad09      	add	r5, sp, #36	; 0x24
   10726:	2100      	movs	r1, #0
   10728:	002a      	movs	r2, r5
   1072a:	4b15      	ldr	r3, [pc, #84]	; (10780 <ExecuteNewChannel+0x184>)
   1072c:	2014      	movs	r0, #20
   1072e:	4798      	blx	r3
   10730:	4c10      	ldr	r4, [pc, #64]	; (10774 <ExecuteNewChannel+0x178>)
   10732:	782a      	ldrb	r2, [r5, #0]
   10734:	0023      	movs	r3, r4
   10736:	33ca      	adds	r3, #202	; 0xca
   10738:	701a      	strb	r2, [r3, #0]
   1073a:	0023      	movs	r3, r4
   1073c:	786a      	ldrb	r2, [r5, #1]
   1073e:	33cb      	adds	r3, #203	; 0xcb
   10740:	701a      	strb	r2, [r3, #0]
   10742:	4b10      	ldr	r3, [pc, #64]	; (10784 <ExecuteNewChannel+0x188>)
   10744:	4798      	blx	r3
   10746:	2304      	movs	r3, #4
   10748:	345c      	adds	r4, #92	; 0x5c
   1074a:	7862      	ldrb	r2, [r4, #1]
   1074c:	210b      	movs	r1, #11
   1074e:	4313      	orrs	r3, r2
   10750:	7063      	strb	r3, [r4, #1]
   10752:	2001      	movs	r0, #1
   10754:	4b0c      	ldr	r3, [pc, #48]	; (10788 <ExecuteNewChannel+0x18c>)
   10756:	4798      	blx	r3
   10758:	9801      	ldr	r0, [sp, #4]
   1075a:	b00d      	add	sp, #52	; 0x34
   1075c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1075e:	ab02      	add	r3, sp, #8
   10760:	79db      	ldrb	r3, [r3, #7]
   10762:	a905      	add	r1, sp, #20
   10764:	2016      	movs	r0, #22
   10766:	700b      	strb	r3, [r1, #0]
   10768:	704d      	strb	r5, [r1, #1]
   1076a:	47b0      	blx	r6
   1076c:	e7da      	b.n	10724 <ExecuteNewChannel+0x128>
   1076e:	46c0      	nop			; (mov r8, r8)
   10770:	00014ddf 	.word	0x00014ddf
   10774:	20002fd8 	.word	0x20002fd8
   10778:	0000c2e9 	.word	0x0000c2e9
   1077c:	0000c305 	.word	0x0000c305
   10780:	0000c2cd 	.word	0x0000c2cd
   10784:	000105d1 	.word	0x000105d1
   10788:	00008e61 	.word	0x00008e61

0001078c <MacExecuteCommands>:
   1078c:	2300      	movs	r3, #0
   1078e:	b5f0      	push	{r4, r5, r6, r7, lr}
   10790:	0007      	movs	r7, r0
   10792:	2501      	movs	r5, #1
   10794:	b087      	sub	sp, #28
   10796:	9002      	str	r0, [sp, #8]
   10798:	9103      	str	r1, [sp, #12]
   1079a:	9300      	str	r3, [sp, #0]
   1079c:	9b02      	ldr	r3, [sp, #8]
   1079e:	9a03      	ldr	r2, [sp, #12]
   107a0:	4e63      	ldr	r6, [pc, #396]	; (10930 <MacExecuteCommands+0x1a4>)
   107a2:	1898      	adds	r0, r3, r2
   107a4:	4287      	cmp	r7, r0
   107a6:	d353      	bcc.n	10850 <MacExecuteCommands+0xc4>
   107a8:	23dd      	movs	r3, #221	; 0xdd
   107aa:	005b      	lsls	r3, r3, #1
   107ac:	5cf3      	ldrb	r3, [r6, r3]
   107ae:	2b00      	cmp	r3, #0
   107b0:	d000      	beq.n	107b4 <MacExecuteCommands+0x28>
   107b2:	e072      	b.n	1089a <MacExecuteCommands+0x10e>
   107b4:	0038      	movs	r0, r7
   107b6:	b007      	add	sp, #28
   107b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   107ba:	0033      	movs	r3, r6
   107bc:	787a      	ldrb	r2, [r7, #1]
   107be:	33bd      	adds	r3, #189	; 0xbd
   107c0:	701a      	strb	r2, [r3, #0]
   107c2:	0033      	movs	r3, r6
   107c4:	78ba      	ldrb	r2, [r7, #2]
   107c6:	33be      	adds	r3, #190	; 0xbe
   107c8:	701a      	strb	r2, [r3, #0]
   107ca:	2203      	movs	r2, #3
   107cc:	9b01      	ldr	r3, [sp, #4]
   107ce:	1cfc      	adds	r4, r7, #3
   107d0:	4353      	muls	r3, r2
   107d2:	18f3      	adds	r3, r6, r3
   107d4:	3371      	adds	r3, #113	; 0x71
   107d6:	32fc      	adds	r2, #252	; 0xfc
   107d8:	701a      	strb	r2, [r3, #0]
   107da:	0032      	movs	r2, r6
   107dc:	2103      	movs	r1, #3
   107de:	32b8      	adds	r2, #184	; 0xb8
   107e0:	7813      	ldrb	r3, [r2, #0]
   107e2:	4359      	muls	r1, r3
   107e4:	1876      	adds	r6, r6, r1
   107e6:	3671      	adds	r6, #113	; 0x71
   107e8:	7831      	ldrb	r1, [r6, #0]
   107ea:	29ff      	cmp	r1, #255	; 0xff
   107ec:	d003      	beq.n	107f6 <MacExecuteCommands+0x6a>
   107ee:	2b0f      	cmp	r3, #15
   107f0:	d801      	bhi.n	107f6 <MacExecuteCommands+0x6a>
   107f2:	3301      	adds	r3, #1
   107f4:	7013      	strb	r3, [r2, #0]
   107f6:	0027      	movs	r7, r4
   107f8:	e7d0      	b.n	1079c <MacExecuteCommands+0x10>
   107fa:	0020      	movs	r0, r4
   107fc:	4b4d      	ldr	r3, [pc, #308]	; (10934 <MacExecuteCommands+0x1a8>)
   107fe:	4798      	blx	r3
   10800:	0004      	movs	r4, r0
   10802:	e7ea      	b.n	107da <MacExecuteCommands+0x4e>
   10804:	0020      	movs	r0, r4
   10806:	4b4c      	ldr	r3, [pc, #304]	; (10938 <MacExecuteCommands+0x1ac>)
   10808:	e7f9      	b.n	107fe <MacExecuteCommands+0x72>
   1080a:	0020      	movs	r0, r4
   1080c:	4b4b      	ldr	r3, [pc, #300]	; (1093c <MacExecuteCommands+0x1b0>)
   1080e:	e7f6      	b.n	107fe <MacExecuteCommands+0x72>
   10810:	0020      	movs	r0, r4
   10812:	4b4b      	ldr	r3, [pc, #300]	; (10940 <MacExecuteCommands+0x1b4>)
   10814:	e7f3      	b.n	107fe <MacExecuteCommands+0x72>
   10816:	230f      	movs	r3, #15
   10818:	7878      	ldrb	r0, [r7, #1]
   1081a:	1cbc      	adds	r4, r7, #2
   1081c:	4018      	ands	r0, r3
   1081e:	4b49      	ldr	r3, [pc, #292]	; (10944 <MacExecuteCommands+0x1b8>)
   10820:	4798      	blx	r3
   10822:	0032      	movs	r2, r6
   10824:	2380      	movs	r3, #128	; 0x80
   10826:	325c      	adds	r2, #92	; 0x5c
   10828:	7851      	ldrb	r1, [r2, #1]
   1082a:	425b      	negs	r3, r3
   1082c:	430b      	orrs	r3, r1
   1082e:	7053      	strb	r3, [r2, #1]
   10830:	210b      	movs	r1, #11
   10832:	0028      	movs	r0, r5
   10834:	4b44      	ldr	r3, [pc, #272]	; (10948 <MacExecuteCommands+0x1bc>)
   10836:	4798      	blx	r3
   10838:	e7cf      	b.n	107da <MacExecuteCommands+0x4e>
   1083a:	0020      	movs	r0, r4
   1083c:	4b43      	ldr	r3, [pc, #268]	; (1094c <MacExecuteCommands+0x1c0>)
   1083e:	e7de      	b.n	107fe <MacExecuteCommands+0x72>
   10840:	0020      	movs	r0, r4
   10842:	4b43      	ldr	r3, [pc, #268]	; (10950 <MacExecuteCommands+0x1c4>)
   10844:	e7db      	b.n	107fe <MacExecuteCommands+0x72>
   10846:	22ff      	movs	r2, #255	; 0xff
   10848:	0004      	movs	r4, r0
   1084a:	701a      	strb	r2, [r3, #0]
   1084c:	9500      	str	r5, [sp, #0]
   1084e:	e7c4      	b.n	107da <MacExecuteCommands+0x4e>
   10850:	9b00      	ldr	r3, [sp, #0]
   10852:	2b00      	cmp	r3, #0
   10854:	d1a8      	bne.n	107a8 <MacExecuteCommands+0x1c>
   10856:	0033      	movs	r3, r6
   10858:	33b8      	adds	r3, #184	; 0xb8
   1085a:	781b      	ldrb	r3, [r3, #0]
   1085c:	2401      	movs	r4, #1
   1085e:	9301      	str	r3, [sp, #4]
   10860:	2303      	movs	r3, #3
   10862:	9a01      	ldr	r2, [sp, #4]
   10864:	4353      	muls	r3, r2
   10866:	18f3      	adds	r3, r6, r3
   10868:	0019      	movs	r1, r3
   1086a:	3170      	adds	r1, #112	; 0x70
   1086c:	788a      	ldrb	r2, [r1, #2]
   1086e:	3371      	adds	r3, #113	; 0x71
   10870:	43aa      	bics	r2, r5
   10872:	4022      	ands	r2, r4
   10874:	708a      	strb	r2, [r1, #2]
   10876:	78ca      	ldrb	r2, [r1, #3]
   10878:	193c      	adds	r4, r7, r4
   1087a:	43aa      	bics	r2, r5
   1087c:	70ca      	strb	r2, [r1, #3]
   1087e:	783a      	ldrb	r2, [r7, #0]
   10880:	701a      	strb	r2, [r3, #0]
   10882:	783a      	ldrb	r2, [r7, #0]
   10884:	3a02      	subs	r2, #2
   10886:	2a08      	cmp	r2, #8
   10888:	d8dd      	bhi.n	10846 <MacExecuteCommands+0xba>
   1088a:	0010      	movs	r0, r2
   1088c:	f001 f962 	bl	11b54 <__gnu_thumb1_case_sqi>
   10890:	bdbab595 	.word	0xbdbab595
   10894:	d5c3c0a5 	.word	0xd5c3c0a5
   10898:	d8          	.byte	0xd8
   10899:	00          	.byte	0x00
   1089a:	23b8      	movs	r3, #184	; 0xb8
   1089c:	33ff      	adds	r3, #255	; 0xff
   1089e:	5cf3      	ldrb	r3, [r6, r3]
   108a0:	43db      	mvns	r3, r3
   108a2:	075b      	lsls	r3, r3, #29
   108a4:	d000      	beq.n	108a8 <MacExecuteCommands+0x11c>
   108a6:	e785      	b.n	107b4 <MacExecuteCommands+0x28>
   108a8:	23be      	movs	r3, #190	; 0xbe
   108aa:	33ff      	adds	r3, #255	; 0xff
   108ac:	5cf4      	ldrb	r4, [r6, r3]
   108ae:	ad05      	add	r5, sp, #20
   108b0:	0724      	lsls	r4, r4, #28
   108b2:	0f24      	lsrs	r4, r4, #28
   108b4:	b2e3      	uxtb	r3, r4
   108b6:	9300      	str	r3, [sp, #0]
   108b8:	23ba      	movs	r3, #186	; 0xba
   108ba:	33ff      	adds	r3, #255	; 0xff
   108bc:	5cf3      	ldrb	r3, [r6, r3]
   108be:	2100      	movs	r1, #0
   108c0:	9301      	str	r3, [sp, #4]
   108c2:	23dc      	movs	r3, #220	; 0xdc
   108c4:	005b      	lsls	r3, r3, #1
   108c6:	5cf3      	ldrb	r3, [r6, r3]
   108c8:	002a      	movs	r2, r5
   108ca:	9302      	str	r3, [sp, #8]
   108cc:	2014      	movs	r0, #20
   108ce:	4b21      	ldr	r3, [pc, #132]	; (10954 <MacExecuteCommands+0x1c8>)
   108d0:	4798      	blx	r3
   108d2:	0033      	movs	r3, r6
   108d4:	782a      	ldrb	r2, [r5, #0]
   108d6:	33ca      	adds	r3, #202	; 0xca
   108d8:	701a      	strb	r2, [r3, #0]
   108da:	0033      	movs	r3, r6
   108dc:	786a      	ldrb	r2, [r5, #1]
   108de:	33cb      	adds	r3, #203	; 0xcb
   108e0:	701a      	strb	r2, [r3, #0]
   108e2:	4b1d      	ldr	r3, [pc, #116]	; (10958 <MacExecuteCommands+0x1cc>)
   108e4:	4798      	blx	r3
   108e6:	9801      	ldr	r0, [sp, #4]
   108e8:	4b1c      	ldr	r3, [pc, #112]	; (1095c <MacExecuteCommands+0x1d0>)
   108ea:	4798      	blx	r3
   108ec:	0032      	movs	r2, r6
   108ee:	2308      	movs	r3, #8
   108f0:	325c      	adds	r2, #92	; 0x5c
   108f2:	7851      	ldrb	r1, [r2, #1]
   108f4:	430b      	orrs	r3, r1
   108f6:	7053      	strb	r3, [r2, #1]
   108f8:	9802      	ldr	r0, [sp, #8]
   108fa:	4b19      	ldr	r3, [pc, #100]	; (10960 <MacExecuteCommands+0x1d4>)
   108fc:	4798      	blx	r3
   108fe:	0033      	movs	r3, r6
   10900:	b2e2      	uxtb	r2, r4
   10902:	33b9      	adds	r3, #185	; 0xb9
   10904:	2a00      	cmp	r2, #0
   10906:	d10e      	bne.n	10926 <MacExecuteCommands+0x19a>
   10908:	701c      	strb	r4, [r3, #0]
   1090a:	2114      	movs	r1, #20
   1090c:	4c0e      	ldr	r4, [pc, #56]	; (10948 <MacExecuteCommands+0x1bc>)
   1090e:	2000      	movs	r0, #0
   10910:	47a0      	blx	r4
   10912:	2210      	movs	r2, #16
   10914:	4b06      	ldr	r3, [pc, #24]	; (10930 <MacExecuteCommands+0x1a4>)
   10916:	2001      	movs	r0, #1
   10918:	335c      	adds	r3, #92	; 0x5c
   1091a:	7859      	ldrb	r1, [r3, #1]
   1091c:	430a      	orrs	r2, r1
   1091e:	705a      	strb	r2, [r3, #1]
   10920:	210b      	movs	r1, #11
   10922:	47a0      	blx	r4
   10924:	e746      	b.n	107b4 <MacExecuteCommands+0x28>
   10926:	9a00      	ldr	r2, [sp, #0]
   10928:	3a01      	subs	r2, #1
   1092a:	701a      	strb	r2, [r3, #0]
   1092c:	e7ed      	b.n	1090a <MacExecuteCommands+0x17e>
   1092e:	46c0      	nop			; (mov r8, r8)
   10930:	20002fd8 	.word	0x20002fd8
   10934:	0000f7cd 	.word	0x0000f7cd
   10938:	0000f691 	.word	0x0000f691
   1093c:	0000f595 	.word	0x0000f595
   10940:	000105fd 	.word	0x000105fd
   10944:	0000ee25 	.word	0x0000ee25
   10948:	00008e61 	.word	0x00008e61
   1094c:	0000f77d 	.word	0x0000f77d
   10950:	0000f6c9 	.word	0x0000f6c9
   10954:	0000c2cd 	.word	0x0000c2cd
   10958:	000105d1 	.word	0x000105d1
   1095c:	0000f44d 	.word	0x0000f44d
   10960:	0000f3e1 	.word	0x0000f3e1

00010964 <LorawanSetChannelIdStatus>:
   10964:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10966:	466b      	mov	r3, sp
   10968:	7018      	strb	r0, [r3, #0]
   1096a:	7059      	strb	r1, [r3, #1]
   1096c:	2016      	movs	r0, #22
   1096e:	4669      	mov	r1, sp
   10970:	4b0c      	ldr	r3, [pc, #48]	; (109a4 <LorawanSetChannelIdStatus+0x40>)
   10972:	4798      	blx	r3
   10974:	0004      	movs	r4, r0
   10976:	2808      	cmp	r0, #8
   10978:	d111      	bne.n	1099e <LorawanSetChannelIdStatus+0x3a>
   1097a:	ad01      	add	r5, sp, #4
   1097c:	002a      	movs	r2, r5
   1097e:	2100      	movs	r1, #0
   10980:	4b09      	ldr	r3, [pc, #36]	; (109a8 <LorawanSetChannelIdStatus+0x44>)
   10982:	2014      	movs	r0, #20
   10984:	4798      	blx	r3
   10986:	4b09      	ldr	r3, [pc, #36]	; (109ac <LorawanSetChannelIdStatus+0x48>)
   10988:	7829      	ldrb	r1, [r5, #0]
   1098a:	001a      	movs	r2, r3
   1098c:	32ca      	adds	r2, #202	; 0xca
   1098e:	7011      	strb	r1, [r2, #0]
   10990:	786a      	ldrb	r2, [r5, #1]
   10992:	33cb      	adds	r3, #203	; 0xcb
   10994:	701a      	strb	r2, [r3, #0]
   10996:	4b06      	ldr	r3, [pc, #24]	; (109b0 <LorawanSetChannelIdStatus+0x4c>)
   10998:	4798      	blx	r3
   1099a:	0020      	movs	r0, r4
   1099c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1099e:	240a      	movs	r4, #10
   109a0:	e7fb      	b.n	1099a <LorawanSetChannelIdStatus+0x36>
   109a2:	46c0      	nop			; (mov r8, r8)
   109a4:	0000c305 	.word	0x0000c305
   109a8:	0000c2cd 	.word	0x0000c2cd
   109ac:	20002fd8 	.word	0x20002fd8
   109b0:	000105d1 	.word	0x000105d1

000109b4 <LORAWAN_RxDone>:
   109b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   109b6:	4ba3      	ldr	r3, [pc, #652]	; (10c44 <LORAWAN_RxDone+0x290>)
   109b8:	b093      	sub	sp, #76	; 0x4c
   109ba:	781b      	ldrb	r3, [r3, #0]
   109bc:	0007      	movs	r7, r0
   109be:	b25a      	sxtb	r2, r3
   109c0:	9105      	str	r1, [sp, #20]
   109c2:	4ca1      	ldr	r4, [pc, #644]	; (10c48 <LORAWAN_RxDone+0x294>)
   109c4:	2a00      	cmp	r2, #0
   109c6:	da01      	bge.n	109cc <LORAWAN_RxDone+0x18>
   109c8:	f000 fcf8 	bl	113bc <LORAWAN_RxDone+0xa08>
   109cc:	7801      	ldrb	r1, [r0, #0]
   109ce:	221f      	movs	r2, #31
   109d0:	0008      	movs	r0, r1
   109d2:	4390      	bics	r0, r2
   109d4:	0002      	movs	r2, r0
   109d6:	2820      	cmp	r0, #32
   109d8:	d000      	beq.n	109dc <LORAWAN_RxDone+0x28>
   109da:	e161      	b.n	10ca0 <LORAWAN_RxDone+0x2ec>
   109dc:	7822      	ldrb	r2, [r4, #0]
   109de:	2a00      	cmp	r2, #0
   109e0:	d001      	beq.n	109e6 <LORAWAN_RxDone+0x32>
   109e2:	f000 fcd7 	bl	11394 <LORAWAN_RxDone+0x9e0>
   109e6:	0022      	movs	r2, r4
   109e8:	326c      	adds	r2, #108	; 0x6c
   109ea:	7812      	ldrb	r2, [r2, #0]
   109ec:	0752      	lsls	r2, r2, #29
   109ee:	d401      	bmi.n	109f4 <LORAWAN_RxDone+0x40>
   109f0:	f000 fcd0 	bl	11394 <LORAWAN_RxDone+0x9e0>
   109f4:	9b05      	ldr	r3, [sp, #20]
   109f6:	3b01      	subs	r3, #1
   109f8:	b2db      	uxtb	r3, r3
   109fa:	9306      	str	r3, [sp, #24]
   109fc:	4b93      	ldr	r3, [pc, #588]	; (10c4c <LORAWAN_RxDone+0x298>)
   109fe:	469c      	mov	ip, r3
   10a00:	9b06      	ldr	r3, [sp, #24]
   10a02:	2b00      	cmp	r3, #0
   10a04:	d12a      	bne.n	10a5c <LORAWAN_RxDone+0xa8>
   10a06:	9b05      	ldr	r3, [sp, #20]
   10a08:	4660      	mov	r0, ip
   10a0a:	1f1d      	subs	r5, r3, #4
   10a0c:	b2eb      	uxtb	r3, r5
   10a0e:	003a      	movs	r2, r7
   10a10:	498f      	ldr	r1, [pc, #572]	; (10c50 <LORAWAN_RxDone+0x29c>)
   10a12:	4e90      	ldr	r6, [pc, #576]	; (10c54 <LORAWAN_RxDone+0x2a0>)
   10a14:	47b0      	blx	r6
   10a16:	2204      	movs	r2, #4
   10a18:	498d      	ldr	r1, [pc, #564]	; (10c50 <LORAWAN_RxDone+0x29c>)
   10a1a:	4b8f      	ldr	r3, [pc, #572]	; (10c58 <LORAWAN_RxDone+0x2a4>)
   10a1c:	a810      	add	r0, sp, #64	; 0x40
   10a1e:	4798      	blx	r3
   10a20:	9e10      	ldr	r6, [sp, #64]	; 0x40
   10a22:	1979      	adds	r1, r7, r5
   10a24:	2204      	movs	r2, #4
   10a26:	4b8c      	ldr	r3, [pc, #560]	; (10c58 <LORAWAN_RxDone+0x2a4>)
   10a28:	a810      	add	r0, sp, #64	; 0x40
   10a2a:	960d      	str	r6, [sp, #52]	; 0x34
   10a2c:	4798      	blx	r3
   10a2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10a30:	4b85      	ldr	r3, [pc, #532]	; (10c48 <LORAWAN_RxDone+0x294>)
   10a32:	210e      	movs	r1, #14
   10a34:	42b2      	cmp	r2, r6
   10a36:	d01f      	beq.n	10a78 <LORAWAN_RxDone+0xc4>
   10a38:	001a      	movs	r2, r3
   10a3a:	325c      	adds	r2, #92	; 0x5c
   10a3c:	7812      	ldrb	r2, [r2, #0]
   10a3e:	400a      	ands	r2, r1
   10a40:	2a0a      	cmp	r2, #10
   10a42:	d005      	beq.n	10a50 <LORAWAN_RxDone+0x9c>
   10a44:	2a06      	cmp	r2, #6
   10a46:	d106      	bne.n	10a56 <LORAWAN_RxDone+0xa2>
   10a48:	33d0      	adds	r3, #208	; 0xd0
   10a4a:	781b      	ldrb	r3, [r3, #0]
   10a4c:	2b00      	cmp	r3, #0
   10a4e:	d002      	beq.n	10a56 <LORAWAN_RxDone+0xa2>
   10a50:	2018      	movs	r0, #24
   10a52:	4b82      	ldr	r3, [pc, #520]	; (10c5c <LORAWAN_RxDone+0x2a8>)
   10a54:	4798      	blx	r3
   10a56:	4b82      	ldr	r3, [pc, #520]	; (10c60 <LORAWAN_RxDone+0x2ac>)
   10a58:	4798      	blx	r3
   10a5a:	e1a9      	b.n	10db0 <LORAWAN_RxDone+0x3fc>
   10a5c:	9b05      	ldr	r3, [sp, #20]
   10a5e:	9a06      	ldr	r2, [sp, #24]
   10a60:	4661      	mov	r1, ip
   10a62:	1a98      	subs	r0, r3, r2
   10a64:	1838      	adds	r0, r7, r0
   10a66:	4b7f      	ldr	r3, [pc, #508]	; (10c64 <LORAWAN_RxDone+0x2b0>)
   10a68:	4798      	blx	r3
   10a6a:	9b06      	ldr	r3, [sp, #24]
   10a6c:	2b10      	cmp	r3, #16
   10a6e:	d901      	bls.n	10a74 <LORAWAN_RxDone+0xc0>
   10a70:	3b10      	subs	r3, #16
   10a72:	e7c1      	b.n	109f8 <LORAWAN_RxDone+0x44>
   10a74:	2300      	movs	r3, #0
   10a76:	e7c0      	b.n	109fa <LORAWAN_RxDone+0x46>
   10a78:	001a      	movs	r2, r3
   10a7a:	325c      	adds	r2, #92	; 0x5c
   10a7c:	7812      	ldrb	r2, [r2, #0]
   10a7e:	400a      	ands	r2, r1
   10a80:	2a06      	cmp	r2, #6
   10a82:	d103      	bne.n	10a8c <LORAWAN_RxDone+0xd8>
   10a84:	33c3      	adds	r3, #195	; 0xc3
   10a86:	7818      	ldrb	r0, [r3, #0]
   10a88:	4b77      	ldr	r3, [pc, #476]	; (10c68 <LORAWAN_RxDone+0x2b4>)
   10a8a:	4798      	blx	r3
   10a8c:	7a3a      	ldrb	r2, [r7, #8]
   10a8e:	79fb      	ldrb	r3, [r7, #7]
   10a90:	0212      	lsls	r2, r2, #8
   10a92:	431a      	orrs	r2, r3
   10a94:	7a7b      	ldrb	r3, [r7, #9]
   10a96:	2001      	movs	r0, #1
   10a98:	041b      	lsls	r3, r3, #16
   10a9a:	431a      	orrs	r2, r3
   10a9c:	7abb      	ldrb	r3, [r7, #10]
   10a9e:	061b      	lsls	r3, r3, #24
   10aa0:	4313      	orrs	r3, r2
   10aa2:	0a19      	lsrs	r1, r3, #8
   10aa4:	7063      	strb	r3, [r4, #1]
   10aa6:	70a1      	strb	r1, [r4, #2]
   10aa8:	0c19      	lsrs	r1, r3, #16
   10aaa:	0e1b      	lsrs	r3, r3, #24
   10aac:	70e1      	strb	r1, [r4, #3]
   10aae:	7123      	strb	r3, [r4, #4]
   10ab0:	240f      	movs	r4, #15
   10ab2:	2103      	movs	r1, #3
   10ab4:	4b6d      	ldr	r3, [pc, #436]	; (10c6c <LORAWAN_RxDone+0x2b8>)
   10ab6:	4798      	blx	r3
   10ab8:	7b38      	ldrb	r0, [r7, #12]
   10aba:	4b6d      	ldr	r3, [pc, #436]	; (10c70 <LORAWAN_RxDone+0x2bc>)
   10abc:	4020      	ands	r0, r4
   10abe:	4798      	blx	r3
   10ac0:	7af8      	ldrb	r0, [r7, #11]
   10ac2:	4b6c      	ldr	r3, [pc, #432]	; (10c74 <LORAWAN_RxDone+0x2c0>)
   10ac4:	0641      	lsls	r1, r0, #25
   10ac6:	0700      	lsls	r0, r0, #28
   10ac8:	0f49      	lsrs	r1, r1, #29
   10aca:	0f00      	lsrs	r0, r0, #28
   10acc:	4798      	blx	r3
   10ace:	9b05      	ldr	r3, [sp, #20]
   10ad0:	2b21      	cmp	r3, #33	; 0x21
   10ad2:	d000      	beq.n	10ad6 <LORAWAN_RxDone+0x122>
   10ad4:	e088      	b.n	10be8 <LORAWAN_RxDone+0x234>
   10ad6:	2512      	movs	r5, #18
   10ad8:	ab06      	add	r3, sp, #24
   10ada:	18ed      	adds	r5, r5, r3
   10adc:	002a      	movs	r2, r5
   10ade:	4b66      	ldr	r3, [pc, #408]	; (10c78 <LORAWAN_RxDone+0x2c4>)
   10ae0:	4966      	ldr	r1, [pc, #408]	; (10c7c <LORAWAN_RxDone+0x2c8>)
   10ae2:	2007      	movs	r0, #7
   10ae4:	4798      	blx	r3
   10ae6:	782b      	ldrb	r3, [r5, #0]
   10ae8:	2bff      	cmp	r3, #255	; 0xff
   10aea:	d07d      	beq.n	10be8 <LORAWAN_RxDone+0x234>
   10aec:	2350      	movs	r3, #80	; 0x50
   10aee:	43a3      	bics	r3, r4
   10af0:	9307      	str	r3, [sp, #28]
   10af2:	003b      	movs	r3, r7
   10af4:	330d      	adds	r3, #13
   10af6:	9305      	str	r3, [sp, #20]
   10af8:	2400      	movs	r4, #0
   10afa:	2203      	movs	r2, #3
   10afc:	9905      	ldr	r1, [sp, #20]
   10afe:	4b56      	ldr	r3, [pc, #344]	; (10c58 <LORAWAN_RxDone+0x2a4>)
   10b00:	a80e      	add	r0, sp, #56	; 0x38
   10b02:	940e      	str	r4, [sp, #56]	; 0x38
   10b04:	4798      	blx	r3
   10b06:	2364      	movs	r3, #100	; 0x64
   10b08:	990e      	ldr	r1, [sp, #56]	; 0x38
   10b0a:	aa06      	add	r2, sp, #24
   10b0c:	4359      	muls	r1, r3
   10b0e:	3b52      	subs	r3, #82	; 0x52
   10b10:	189b      	adds	r3, r3, r2
   10b12:	7818      	ldrb	r0, [r3, #0]
   10b14:	9b06      	ldr	r3, [sp, #24]
   10b16:	910e      	str	r1, [sp, #56]	; 0x38
   10b18:	1818      	adds	r0, r3, r0
   10b1a:	b2c0      	uxtb	r0, r0
   10b1c:	74d0      	strb	r0, [r2, #19]
   10b1e:	42a1      	cmp	r1, r4
   10b20:	d100      	bne.n	10b24 <LORAWAN_RxDone+0x170>
   10b22:	e08b      	b.n	10c3c <LORAWAN_RxDone+0x288>
   10b24:	466b      	mov	r3, sp
   10b26:	7f1b      	ldrb	r3, [r3, #28]
   10b28:	ae10      	add	r6, sp, #64	; 0x40
   10b2a:	ad0b      	add	r5, sp, #44	; 0x2c
   10b2c:	7130      	strb	r0, [r6, #4]
   10b2e:	9110      	str	r1, [sp, #64]	; 0x40
   10b30:	7028      	strb	r0, [r5, #0]
   10b32:	706b      	strb	r3, [r5, #1]
   10b34:	0031      	movs	r1, r6
   10b36:	2002      	movs	r0, #2
   10b38:	4b51      	ldr	r3, [pc, #324]	; (10c80 <LORAWAN_RxDone+0x2cc>)
   10b3a:	4798      	blx	r3
   10b3c:	2808      	cmp	r0, #8
   10b3e:	d13f      	bne.n	10bc0 <LORAWAN_RxDone+0x20c>
   10b40:	0031      	movs	r1, r6
   10b42:	0020      	movs	r0, r4
   10b44:	4e4f      	ldr	r6, [pc, #316]	; (10c84 <LORAWAN_RxDone+0x2d0>)
   10b46:	47b0      	blx	r6
   10b48:	0029      	movs	r1, r5
   10b4a:	2012      	movs	r0, #18
   10b4c:	ad0c      	add	r5, sp, #48	; 0x30
   10b4e:	47b0      	blx	r6
   10b50:	0021      	movs	r1, r4
   10b52:	002a      	movs	r2, r5
   10b54:	4b48      	ldr	r3, [pc, #288]	; (10c78 <LORAWAN_RxDone+0x2c4>)
   10b56:	2014      	movs	r0, #20
   10b58:	4798      	blx	r3
   10b5a:	4c3b      	ldr	r4, [pc, #236]	; (10c48 <LORAWAN_RxDone+0x294>)
   10b5c:	782a      	ldrb	r2, [r5, #0]
   10b5e:	0023      	movs	r3, r4
   10b60:	33ca      	adds	r3, #202	; 0xca
   10b62:	701a      	strb	r2, [r3, #0]
   10b64:	0023      	movs	r3, r4
   10b66:	786a      	ldrb	r2, [r5, #1]
   10b68:	251a      	movs	r5, #26
   10b6a:	33cb      	adds	r3, #203	; 0xcb
   10b6c:	701a      	strb	r2, [r3, #0]
   10b6e:	4b46      	ldr	r3, [pc, #280]	; (10c88 <LORAWAN_RxDone+0x2d4>)
   10b70:	4798      	blx	r3
   10b72:	ab06      	add	r3, sp, #24
   10b74:	18ed      	adds	r5, r5, r3
   10b76:	2313      	movs	r3, #19
   10b78:	a906      	add	r1, sp, #24
   10b7a:	185b      	adds	r3, r3, r1
   10b7c:	0019      	movs	r1, r3
   10b7e:	002a      	movs	r2, r5
   10b80:	4b3d      	ldr	r3, [pc, #244]	; (10c78 <LORAWAN_RxDone+0x2c4>)
   10b82:	201e      	movs	r0, #30
   10b84:	4798      	blx	r3
   10b86:	0023      	movs	r3, r4
   10b88:	33f0      	adds	r3, #240	; 0xf0
   10b8a:	781b      	ldrb	r3, [r3, #0]
   10b8c:	079b      	lsls	r3, r3, #30
   10b8e:	d507      	bpl.n	10ba0 <LORAWAN_RxDone+0x1ec>
   10b90:	ab06      	add	r3, sp, #24
   10b92:	7cdb      	ldrb	r3, [r3, #19]
   10b94:	a90f      	add	r1, sp, #60	; 0x3c
   10b96:	708b      	strb	r3, [r1, #2]
   10b98:	882b      	ldrh	r3, [r5, #0]
   10b9a:	201e      	movs	r0, #30
   10b9c:	800b      	strh	r3, [r1, #0]
   10b9e:	47b0      	blx	r6
   10ba0:	2313      	movs	r3, #19
   10ba2:	aa06      	add	r2, sp, #24
   10ba4:	189b      	adds	r3, r3, r2
   10ba6:	7818      	ldrb	r0, [r3, #0]
   10ba8:	2101      	movs	r1, #1
   10baa:	4b38      	ldr	r3, [pc, #224]	; (10c8c <LORAWAN_RxDone+0x2d8>)
   10bac:	4798      	blx	r3
   10bae:	2204      	movs	r2, #4
   10bb0:	345c      	adds	r4, #92	; 0x5c
   10bb2:	7863      	ldrb	r3, [r4, #1]
   10bb4:	210b      	movs	r1, #11
   10bb6:	4313      	orrs	r3, r2
   10bb8:	7063      	strb	r3, [r4, #1]
   10bba:	2001      	movs	r0, #1
   10bbc:	4b2b      	ldr	r3, [pc, #172]	; (10c6c <LORAWAN_RxDone+0x2b8>)
   10bbe:	4798      	blx	r3
   10bc0:	9b06      	ldr	r3, [sp, #24]
   10bc2:	3301      	adds	r3, #1
   10bc4:	b2db      	uxtb	r3, r3
   10bc6:	9306      	str	r3, [sp, #24]
   10bc8:	9b05      	ldr	r3, [sp, #20]
   10bca:	3303      	adds	r3, #3
   10bcc:	9305      	str	r3, [sp, #20]
   10bce:	9b06      	ldr	r3, [sp, #24]
   10bd0:	2b05      	cmp	r3, #5
   10bd2:	d191      	bne.n	10af8 <LORAWAN_RxDone+0x144>
   10bd4:	2204      	movs	r2, #4
   10bd6:	4b1c      	ldr	r3, [pc, #112]	; (10c48 <LORAWAN_RxDone+0x294>)
   10bd8:	2001      	movs	r0, #1
   10bda:	335c      	adds	r3, #92	; 0x5c
   10bdc:	7859      	ldrb	r1, [r3, #1]
   10bde:	430a      	orrs	r2, r1
   10be0:	705a      	strb	r2, [r3, #1]
   10be2:	210b      	movs	r1, #11
   10be4:	4b21      	ldr	r3, [pc, #132]	; (10c6c <LORAWAN_RxDone+0x2b8>)
   10be6:	4798      	blx	r3
   10be8:	4c29      	ldr	r4, [pc, #164]	; (10c90 <LORAWAN_RxDone+0x2dc>)
   10bea:	1c7e      	adds	r6, r7, #1
   10bec:	3704      	adds	r7, #4
   10bee:	0031      	movs	r1, r6
   10bf0:	0020      	movs	r0, r4
   10bf2:	003a      	movs	r2, r7
   10bf4:	4b27      	ldr	r3, [pc, #156]	; (10c94 <LORAWAN_RxDone+0x2e0>)
   10bf6:	4798      	blx	r3
   10bf8:	2302      	movs	r3, #2
   10bfa:	4a13      	ldr	r2, [pc, #76]	; (10c48 <LORAWAN_RxDone+0x294>)
   10bfc:	4d13      	ldr	r5, [pc, #76]	; (10c4c <LORAWAN_RxDone+0x298>)
   10bfe:	7553      	strb	r3, [r2, #21]
   10c00:	0020      	movs	r0, r4
   10c02:	0029      	movs	r1, r5
   10c04:	4b17      	ldr	r3, [pc, #92]	; (10c64 <LORAWAN_RxDone+0x2b0>)
   10c06:	4798      	blx	r3
   10c08:	2105      	movs	r1, #5
   10c0a:	4b18      	ldr	r3, [pc, #96]	; (10c6c <LORAWAN_RxDone+0x2b8>)
   10c0c:	2001      	movs	r0, #1
   10c0e:	4798      	blx	r3
   10c10:	0031      	movs	r1, r6
   10c12:	2601      	movs	r6, #1
   10c14:	4c20      	ldr	r4, [pc, #128]	; (10c98 <LORAWAN_RxDone+0x2e4>)
   10c16:	003a      	movs	r2, r7
   10c18:	0020      	movs	r0, r4
   10c1a:	4b1e      	ldr	r3, [pc, #120]	; (10c94 <LORAWAN_RxDone+0x2e0>)
   10c1c:	4798      	blx	r3
   10c1e:	4b0a      	ldr	r3, [pc, #40]	; (10c48 <LORAWAN_RxDone+0x294>)
   10c20:	0029      	movs	r1, r5
   10c22:	715e      	strb	r6, [r3, #5]
   10c24:	0020      	movs	r0, r4
   10c26:	4b0f      	ldr	r3, [pc, #60]	; (10c64 <LORAWAN_RxDone+0x2b0>)
   10c28:	4798      	blx	r3
   10c2a:	2104      	movs	r1, #4
   10c2c:	4b0f      	ldr	r3, [pc, #60]	; (10c6c <LORAWAN_RxDone+0x2b8>)
   10c2e:	0030      	movs	r0, r6
   10c30:	4798      	blx	r3
   10c32:	4b1a      	ldr	r3, [pc, #104]	; (10c9c <LORAWAN_RxDone+0x2e8>)
   10c34:	4798      	blx	r3
   10c36:	2008      	movs	r0, #8
   10c38:	b013      	add	sp, #76	; 0x4c
   10c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10c3c:	4b13      	ldr	r3, [pc, #76]	; (10c8c <LORAWAN_RxDone+0x2d8>)
   10c3e:	4798      	blx	r3
   10c40:	e7be      	b.n	10bc0 <LORAWAN_RxDone+0x20c>
   10c42:	46c0      	nop			; (mov r8, r8)
   10c44:	20003034 	.word	0x20003034
   10c48:	20002fd8 	.word	0x20002fd8
   10c4c:	20002ffd 	.word	0x20002ffd
   10c50:	2000206d 	.word	0x2000206d
   10c54:	00011459 	.word	0x00011459
   10c58:	00014ddf 	.word	0x00014ddf
   10c5c:	0000f531 	.word	0x0000f531
   10c60:	0001055d 	.word	0x0001055d
   10c64:	00011419 	.word	0x00011419
   10c68:	0000ca3d 	.word	0x0000ca3d
   10c6c:	00008e61 	.word	0x00008e61
   10c70:	0000ee25 	.word	0x0000ee25
   10c74:	0000f3fd 	.word	0x0000f3fd
   10c78:	0000c2cd 	.word	0x0000c2cd
   10c7c:	20003097 	.word	0x20003097
   10c80:	0000c2e9 	.word	0x0000c2e9
   10c84:	0000c305 	.word	0x0000c305
   10c88:	000105d1 	.word	0x000105d1
   10c8c:	00010965 	.word	0x00010965
   10c90:	20002fed 	.word	0x20002fed
   10c94:	0000f109 	.word	0x0000f109
   10c98:	20002fdd 	.word	0x20002fdd
   10c9c:	0000f021 	.word	0x0000f021
   10ca0:	20bf      	movs	r0, #191	; 0xbf
   10ca2:	3a60      	subs	r2, #96	; 0x60
   10ca4:	4002      	ands	r2, r0
   10ca6:	d000      	beq.n	10caa <LORAWAN_RxDone+0x2f6>
   10ca8:	e374      	b.n	11394 <LORAWAN_RxDone+0x9e0>
   10caa:	38be      	subs	r0, #190	; 0xbe
   10cac:	4203      	tst	r3, r0
   10cae:	d100      	bne.n	10cb2 <LORAWAN_RxDone+0x2fe>
   10cb0:	e370      	b.n	11394 <LORAWAN_RxDone+0x9e0>
   10cb2:	6823      	ldr	r3, [r4, #0]
   10cb4:	0a18      	lsrs	r0, r3, #8
   10cb6:	7923      	ldrb	r3, [r4, #4]
   10cb8:	061b      	lsls	r3, r3, #24
   10cba:	4303      	orrs	r3, r0
   10cbc:	0020      	movs	r0, r4
   10cbe:	30b8      	adds	r0, #184	; 0xb8
   10cc0:	7002      	strb	r2, [r0, #0]
   10cc2:	78bd      	ldrb	r5, [r7, #2]
   10cc4:	787e      	ldrb	r6, [r7, #1]
   10cc6:	022d      	lsls	r5, r5, #8
   10cc8:	432e      	orrs	r6, r5
   10cca:	78fd      	ldrb	r5, [r7, #3]
   10ccc:	7938      	ldrb	r0, [r7, #4]
   10cce:	042d      	lsls	r5, r5, #16
   10cd0:	4335      	orrs	r5, r6
   10cd2:	0600      	lsls	r0, r0, #24
   10cd4:	4305      	orrs	r5, r0
   10cd6:	42ab      	cmp	r3, r5
   10cd8:	d079      	beq.n	10dce <LORAWAN_RxDone+0x41a>
   10cda:	251a      	movs	r5, #26
   10cdc:	ab06      	add	r3, sp, #24
   10cde:	18ed      	adds	r5, r5, r3
   10ce0:	7a3a      	ldrb	r2, [r7, #8]
   10ce2:	0949      	lsrs	r1, r1, #5
   10ce4:	002b      	movs	r3, r5
   10ce6:	0038      	movs	r0, r7
   10ce8:	4e8c      	ldr	r6, [pc, #560]	; (10f1c <LORAWAN_RxDone+0x568>)
   10cea:	47b0      	blx	r6
   10cec:	2808      	cmp	r0, #8
   10cee:	d157      	bne.n	10da0 <LORAWAN_RxDone+0x3ec>
   10cf0:	232c      	movs	r3, #44	; 0x2c
   10cf2:	782a      	ldrb	r2, [r5, #0]
   10cf4:	4353      	muls	r3, r2
   10cf6:	001a      	movs	r2, r3
   10cf8:	3209      	adds	r2, #9
   10cfa:	32ff      	adds	r2, #255	; 0xff
   10cfc:	1912      	adds	r2, r2, r4
   10cfe:	18e4      	adds	r4, r4, r3
   10d00:	2301      	movs	r3, #1
   10d02:	34fc      	adds	r4, #252	; 0xfc
   10d04:	68a5      	ldr	r5, [r4, #8]
   10d06:	9208      	str	r2, [sp, #32]
   10d08:	9307      	str	r3, [sp, #28]
   10d0a:	4c85      	ldr	r4, [pc, #532]	; (10f20 <LORAWAN_RxDone+0x56c>)
   10d0c:	0021      	movs	r1, r4
   10d0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10d10:	3164      	adds	r1, #100	; 0x64
   10d12:	9309      	str	r3, [sp, #36]	; 0x24
   10d14:	79fb      	ldrb	r3, [r7, #7]
   10d16:	79ba      	ldrb	r2, [r7, #6]
   10d18:	021b      	lsls	r3, r3, #8
   10d1a:	4313      	orrs	r3, r2
   10d1c:	880a      	ldrh	r2, [r1, #0]
   10d1e:	4293      	cmp	r3, r2
   10d20:	d36d      	bcc.n	10dfe <LORAWAN_RxDone+0x44a>
   10d22:	0020      	movs	r0, r4
   10d24:	30b0      	adds	r0, #176	; 0xb0
   10d26:	8800      	ldrh	r0, [r0, #0]
   10d28:	1a9a      	subs	r2, r3, r2
   10d2a:	4e7e      	ldr	r6, [pc, #504]	; (10f24 <LORAWAN_RxDone+0x570>)
   10d2c:	4282      	cmp	r2, r0
   10d2e:	dd52      	ble.n	10dd6 <LORAWAN_RxDone+0x422>
   10d30:	0022      	movs	r2, r4
   10d32:	2101      	movs	r1, #1
   10d34:	326c      	adds	r2, #108	; 0x6c
   10d36:	7813      	ldrb	r3, [r2, #0]
   10d38:	438b      	bics	r3, r1
   10d3a:	7013      	strb	r3, [r2, #0]
   10d3c:	0023      	movs	r3, r4
   10d3e:	33d4      	adds	r3, #212	; 0xd4
   10d40:	781b      	ldrb	r3, [r3, #0]
   10d42:	428b      	cmp	r3, r1
   10d44:	d108      	bne.n	10d58 <LORAWAN_RxDone+0x3a4>
   10d46:	0023      	movs	r3, r4
   10d48:	220e      	movs	r2, #14
   10d4a:	335c      	adds	r3, #92	; 0x5c
   10d4c:	781b      	ldrb	r3, [r3, #0]
   10d4e:	4013      	ands	r3, r2
   10d50:	2b06      	cmp	r3, #6
   10d52:	d101      	bne.n	10d58 <LORAWAN_RxDone+0x3a4>
   10d54:	4b74      	ldr	r3, [pc, #464]	; (10f28 <LORAWAN_RxDone+0x574>)
   10d56:	4798      	blx	r3
   10d58:	4974      	ldr	r1, [pc, #464]	; (10f2c <LORAWAN_RxDone+0x578>)
   10d5a:	784a      	ldrb	r2, [r1, #1]
   10d5c:	780b      	ldrb	r3, [r1, #0]
   10d5e:	0212      	lsls	r2, r2, #8
   10d60:	431a      	orrs	r2, r3
   10d62:	788b      	ldrb	r3, [r1, #2]
   10d64:	041b      	lsls	r3, r3, #16
   10d66:	431a      	orrs	r2, r3
   10d68:	78cb      	ldrb	r3, [r1, #3]
   10d6a:	061b      	lsls	r3, r3, #24
   10d6c:	4313      	orrs	r3, r2
   10d6e:	d008      	beq.n	10d82 <LORAWAN_RxDone+0x3ce>
   10d70:	0022      	movs	r2, r4
   10d72:	2120      	movs	r1, #32
   10d74:	326c      	adds	r2, #108	; 0x6c
   10d76:	7813      	ldrb	r3, [r2, #0]
   10d78:	2017      	movs	r0, #23
   10d7a:	438b      	bics	r3, r1
   10d7c:	7013      	strb	r3, [r2, #0]
   10d7e:	4b6c      	ldr	r3, [pc, #432]	; (10f30 <LORAWAN_RxDone+0x57c>)
   10d80:	4798      	blx	r3
   10d82:	2501      	movs	r5, #1
   10d84:	345c      	adds	r4, #92	; 0x5c
   10d86:	7863      	ldrb	r3, [r4, #1]
   10d88:	43ab      	bics	r3, r5
   10d8a:	7063      	strb	r3, [r4, #1]
   10d8c:	78a3      	ldrb	r3, [r4, #2]
   10d8e:	432b      	orrs	r3, r5
   10d90:	70a3      	strb	r3, [r4, #2]
   10d92:	4b68      	ldr	r3, [pc, #416]	; (10f34 <LORAWAN_RxDone+0x580>)
   10d94:	4798      	blx	r3
   10d96:	210b      	movs	r1, #11
   10d98:	0028      	movs	r0, r5
   10d9a:	47b0      	blx	r6
   10d9c:	200d      	movs	r0, #13
   10d9e:	e74b      	b.n	10c38 <LORAWAN_RxDone+0x284>
   10da0:	220e      	movs	r2, #14
   10da2:	4b65      	ldr	r3, [pc, #404]	; (10f38 <LORAWAN_RxDone+0x584>)
   10da4:	781b      	ldrb	r3, [r3, #0]
   10da6:	4013      	ands	r3, r2
   10da8:	2b0a      	cmp	r3, #10
   10daa:	d008      	beq.n	10dbe <LORAWAN_RxDone+0x40a>
   10dac:	2b06      	cmp	r3, #6
   10dae:	d001      	beq.n	10db4 <LORAWAN_RxDone+0x400>
   10db0:	200a      	movs	r0, #10
   10db2:	e741      	b.n	10c38 <LORAWAN_RxDone+0x284>
   10db4:	0023      	movs	r3, r4
   10db6:	33d0      	adds	r3, #208	; 0xd0
   10db8:	781b      	ldrb	r3, [r3, #0]
   10dba:	2b00      	cmp	r3, #0
   10dbc:	d0f8      	beq.n	10db0 <LORAWAN_RxDone+0x3fc>
   10dbe:	2220      	movs	r2, #32
   10dc0:	201e      	movs	r0, #30
   10dc2:	346c      	adds	r4, #108	; 0x6c
   10dc4:	7823      	ldrb	r3, [r4, #0]
   10dc6:	4393      	bics	r3, r2
   10dc8:	7023      	strb	r3, [r4, #0]
   10dca:	4b59      	ldr	r3, [pc, #356]	; (10f30 <LORAWAN_RxDone+0x57c>)
   10dcc:	e642      	b.n	10a54 <LORAWAN_RxDone+0xa0>
   10dce:	4b5b      	ldr	r3, [pc, #364]	; (10f3c <LORAWAN_RxDone+0x588>)
   10dd0:	9207      	str	r2, [sp, #28]
   10dd2:	9308      	str	r3, [sp, #32]
   10dd4:	e799      	b.n	10d0a <LORAWAN_RxDone+0x356>
   10dd6:	800b      	strh	r3, [r1, #0]
   10dd8:	2001      	movs	r0, #1
   10dda:	210a      	movs	r1, #10
   10ddc:	47b0      	blx	r6
   10dde:	4c50      	ldr	r4, [pc, #320]	; (10f20 <LORAWAN_RxDone+0x56c>)
   10de0:	6e61      	ldr	r1, [r4, #100]	; 0x64
   10de2:	1c4b      	adds	r3, r1, #1
   10de4:	d13d      	bne.n	10e62 <LORAWAN_RxDone+0x4ae>
   10de6:	2501      	movs	r5, #1
   10de8:	345c      	adds	r4, #92	; 0x5c
   10dea:	78a3      	ldrb	r3, [r4, #2]
   10dec:	432b      	orrs	r3, r5
   10dee:	70a3      	strb	r3, [r4, #2]
   10df0:	4b50      	ldr	r3, [pc, #320]	; (10f34 <LORAWAN_RxDone+0x580>)
   10df2:	4798      	blx	r3
   10df4:	210b      	movs	r1, #11
   10df6:	0028      	movs	r0, r5
   10df8:	4b4a      	ldr	r3, [pc, #296]	; (10f24 <LORAWAN_RxDone+0x570>)
   10dfa:	4798      	blx	r3
   10dfc:	e7ce      	b.n	10d9c <LORAWAN_RxDone+0x3e8>
   10dfe:	4850      	ldr	r0, [pc, #320]	; (10f40 <LORAWAN_RxDone+0x58c>)
   10e00:	1a9a      	subs	r2, r3, r2
   10e02:	1812      	adds	r2, r2, r0
   10e04:	484f      	ldr	r0, [pc, #316]	; (10f44 <LORAWAN_RxDone+0x590>)
   10e06:	4282      	cmp	r2, r0
   10e08:	dc09      	bgt.n	10e1e <LORAWAN_RxDone+0x46a>
   10e0a:	3466      	adds	r4, #102	; 0x66
   10e0c:	800b      	strh	r3, [r1, #0]
   10e0e:	8823      	ldrh	r3, [r4, #0]
   10e10:	210a      	movs	r1, #10
   10e12:	3301      	adds	r3, #1
   10e14:	8023      	strh	r3, [r4, #0]
   10e16:	2001      	movs	r0, #1
   10e18:	4b42      	ldr	r3, [pc, #264]	; (10f24 <LORAWAN_RxDone+0x570>)
   10e1a:	4798      	blx	r3
   10e1c:	e7df      	b.n	10dde <LORAWAN_RxDone+0x42a>
   10e1e:	0023      	movs	r3, r4
   10e20:	33d4      	adds	r3, #212	; 0xd4
   10e22:	781b      	ldrb	r3, [r3, #0]
   10e24:	2b01      	cmp	r3, #1
   10e26:	d108      	bne.n	10e3a <LORAWAN_RxDone+0x486>
   10e28:	0023      	movs	r3, r4
   10e2a:	220e      	movs	r2, #14
   10e2c:	335c      	adds	r3, #92	; 0x5c
   10e2e:	781b      	ldrb	r3, [r3, #0]
   10e30:	4013      	ands	r3, r2
   10e32:	2b06      	cmp	r3, #6
   10e34:	d101      	bne.n	10e3a <LORAWAN_RxDone+0x486>
   10e36:	4b3c      	ldr	r3, [pc, #240]	; (10f28 <LORAWAN_RxDone+0x574>)
   10e38:	4798      	blx	r3
   10e3a:	493c      	ldr	r1, [pc, #240]	; (10f2c <LORAWAN_RxDone+0x578>)
   10e3c:	784a      	ldrb	r2, [r1, #1]
   10e3e:	780b      	ldrb	r3, [r1, #0]
   10e40:	0212      	lsls	r2, r2, #8
   10e42:	431a      	orrs	r2, r3
   10e44:	788b      	ldrb	r3, [r1, #2]
   10e46:	041b      	lsls	r3, r3, #16
   10e48:	431a      	orrs	r2, r3
   10e4a:	78cb      	ldrb	r3, [r1, #3]
   10e4c:	061b      	lsls	r3, r3, #24
   10e4e:	4313      	orrs	r3, r2
   10e50:	d100      	bne.n	10e54 <LORAWAN_RxDone+0x4a0>
   10e52:	e600      	b.n	10a56 <LORAWAN_RxDone+0xa2>
   10e54:	2220      	movs	r2, #32
   10e56:	346c      	adds	r4, #108	; 0x6c
   10e58:	7823      	ldrb	r3, [r4, #0]
   10e5a:	2017      	movs	r0, #23
   10e5c:	4393      	bics	r3, r2
   10e5e:	7023      	strb	r3, [r4, #0]
   10e60:	e7b3      	b.n	10dca <LORAWAN_RxDone+0x416>
   10e62:	9b05      	ldr	r3, [sp, #20]
   10e64:	2001      	movs	r0, #1
   10e66:	3b04      	subs	r3, #4
   10e68:	9306      	str	r3, [sp, #24]
   10e6a:	466b      	mov	r3, sp
   10e6c:	7e1a      	ldrb	r2, [r3, #24]
   10e6e:	2349      	movs	r3, #73	; 0x49
   10e70:	9500      	str	r5, [sp, #0]
   10e72:	4d35      	ldr	r5, [pc, #212]	; (10f48 <LORAWAN_RxDone+0x594>)
   10e74:	47a8      	blx	r5
   10e76:	4e35      	ldr	r6, [pc, #212]	; (10f4c <LORAWAN_RxDone+0x598>)
   10e78:	4d35      	ldr	r5, [pc, #212]	; (10f50 <LORAWAN_RxDone+0x59c>)
   10e7a:	2210      	movs	r2, #16
   10e7c:	4935      	ldr	r1, [pc, #212]	; (10f54 <LORAWAN_RxDone+0x5a0>)
   10e7e:	0030      	movs	r0, r6
   10e80:	47a8      	blx	r5
   10e82:	9a06      	ldr	r2, [sp, #24]
   10e84:	0039      	movs	r1, r7
   10e86:	4834      	ldr	r0, [pc, #208]	; (10f58 <LORAWAN_RxDone+0x5a4>)
   10e88:	47a8      	blx	r5
   10e8a:	9b05      	ldr	r3, [sp, #20]
   10e8c:	0032      	movs	r2, r6
   10e8e:	330c      	adds	r3, #12
   10e90:	b2db      	uxtb	r3, r3
   10e92:	4930      	ldr	r1, [pc, #192]	; (10f54 <LORAWAN_RxDone+0x5a0>)
   10e94:	9808      	ldr	r0, [sp, #32]
   10e96:	4e31      	ldr	r6, [pc, #196]	; (10f5c <LORAWAN_RxDone+0x5a8>)
   10e98:	47b0      	blx	r6
   10e9a:	2204      	movs	r2, #4
   10e9c:	492d      	ldr	r1, [pc, #180]	; (10f54 <LORAWAN_RxDone+0x5a0>)
   10e9e:	a80d      	add	r0, sp, #52	; 0x34
   10ea0:	47a8      	blx	r5
   10ea2:	9b06      	ldr	r3, [sp, #24]
   10ea4:	2204      	movs	r2, #4
   10ea6:	18f9      	adds	r1, r7, r3
   10ea8:	a810      	add	r0, sp, #64	; 0x40
   10eaa:	47a8      	blx	r5
   10eac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10eae:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10eb0:	4293      	cmp	r3, r2
   10eb2:	d024      	beq.n	10efe <LORAWAN_RxDone+0x54a>
   10eb4:	0023      	movs	r3, r4
   10eb6:	33d4      	adds	r3, #212	; 0xd4
   10eb8:	781b      	ldrb	r3, [r3, #0]
   10eba:	2b01      	cmp	r3, #1
   10ebc:	d107      	bne.n	10ece <LORAWAN_RxDone+0x51a>
   10ebe:	220e      	movs	r2, #14
   10ec0:	345c      	adds	r4, #92	; 0x5c
   10ec2:	7823      	ldrb	r3, [r4, #0]
   10ec4:	4013      	ands	r3, r2
   10ec6:	2b06      	cmp	r3, #6
   10ec8:	d101      	bne.n	10ece <LORAWAN_RxDone+0x51a>
   10eca:	4b17      	ldr	r3, [pc, #92]	; (10f28 <LORAWAN_RxDone+0x574>)
   10ecc:	4798      	blx	r3
   10ece:	4917      	ldr	r1, [pc, #92]	; (10f2c <LORAWAN_RxDone+0x578>)
   10ed0:	784a      	ldrb	r2, [r1, #1]
   10ed2:	780b      	ldrb	r3, [r1, #0]
   10ed4:	0212      	lsls	r2, r2, #8
   10ed6:	431a      	orrs	r2, r3
   10ed8:	788b      	ldrb	r3, [r1, #2]
   10eda:	041b      	lsls	r3, r3, #16
   10edc:	431a      	orrs	r2, r3
   10ede:	78cb      	ldrb	r3, [r1, #3]
   10ee0:	061b      	lsls	r3, r3, #24
   10ee2:	4313      	orrs	r3, r2
   10ee4:	d100      	bne.n	10ee8 <LORAWAN_RxDone+0x534>
   10ee6:	e5b6      	b.n	10a56 <LORAWAN_RxDone+0xa2>
   10ee8:	4a0d      	ldr	r2, [pc, #52]	; (10f20 <LORAWAN_RxDone+0x56c>)
   10eea:	2020      	movs	r0, #32
   10eec:	0011      	movs	r1, r2
   10eee:	316c      	adds	r1, #108	; 0x6c
   10ef0:	780b      	ldrb	r3, [r1, #0]
   10ef2:	4383      	bics	r3, r0
   10ef4:	700b      	strb	r3, [r1, #0]
   10ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10ef8:	3808      	subs	r0, #8
   10efa:	6653      	str	r3, [r2, #100]	; 0x64
   10efc:	e765      	b.n	10dca <LORAWAN_RxDone+0x416>
   10efe:	9b07      	ldr	r3, [sp, #28]
   10f00:	2b00      	cmp	r3, #0
   10f02:	d02f      	beq.n	10f64 <LORAWAN_RxDone+0x5b0>
   10f04:	231a      	movs	r3, #26
   10f06:	aa06      	add	r2, sp, #24
   10f08:	189b      	adds	r3, r3, r2
   10f0a:	781b      	ldrb	r3, [r3, #0]
   10f0c:	003a      	movs	r2, r7
   10f0e:	9905      	ldr	r1, [sp, #20]
   10f10:	0038      	movs	r0, r7
   10f12:	4c13      	ldr	r4, [pc, #76]	; (10f60 <LORAWAN_RxDone+0x5ac>)
   10f14:	47a0      	blx	r4
   10f16:	2001      	movs	r0, #1
   10f18:	e68e      	b.n	10c38 <LORAWAN_RxDone+0x284>
   10f1a:	46c0      	nop			; (mov r8, r8)
   10f1c:	000116ed 	.word	0x000116ed
   10f20:	20002fd8 	.word	0x20002fd8
   10f24:	00008e61 	.word	0x00008e61
   10f28:	0000f1dd 	.word	0x0000f1dd
   10f2c:	200032ac 	.word	0x200032ac
   10f30:	00010115 	.word	0x00010115
   10f34:	0001055d 	.word	0x0001055d
   10f38:	20003034 	.word	0x20003034
   10f3c:	20002fdd 	.word	0x20002fdd
   10f40:	0000ffff 	.word	0x0000ffff
   10f44:	00003fff 	.word	0x00003fff
   10f48:	0000f145 	.word	0x0000f145
   10f4c:	20002da0 	.word	0x20002da0
   10f50:	00014ddf 	.word	0x00014ddf
   10f54:	2000206d 	.word	0x2000206d
   10f58:	20002db0 	.word	0x20002db0
   10f5c:	00011459 	.word	0x00011459
   10f60:	00011761 	.word	0x00011761
   10f64:	466a      	mov	r2, sp
   10f66:	0023      	movs	r3, r4
   10f68:	7f12      	ldrb	r2, [r2, #28]
   10f6a:	33bb      	adds	r3, #187	; 0xbb
   10f6c:	701a      	strb	r2, [r3, #0]
   10f6e:	797b      	ldrb	r3, [r7, #5]
   10f70:	2b7f      	cmp	r3, #127	; 0x7f
   10f72:	d908      	bls.n	10f86 <LORAWAN_RxDone+0x5d2>
   10f74:	2320      	movs	r3, #32
   10f76:	345c      	adds	r4, #92	; 0x5c
   10f78:	7822      	ldrb	r2, [r4, #0]
   10f7a:	210b      	movs	r1, #11
   10f7c:	4313      	orrs	r3, r2
   10f7e:	7023      	strb	r3, [r4, #0]
   10f80:	2001      	movs	r0, #1
   10f82:	4bc8      	ldr	r3, [pc, #800]	; (112a4 <LORAWAN_RxDone+0x8f0>)
   10f84:	4798      	blx	r3
   10f86:	797b      	ldrb	r3, [r7, #5]
   10f88:	4cc7      	ldr	r4, [pc, #796]	; (112a8 <LORAWAN_RxDone+0x8f4>)
   10f8a:	06db      	lsls	r3, r3, #27
   10f8c:	d505      	bpl.n	10f9a <LORAWAN_RxDone+0x5e6>
   10f8e:	0022      	movs	r2, r4
   10f90:	2308      	movs	r3, #8
   10f92:	326c      	adds	r2, #108	; 0x6c
   10f94:	7811      	ldrb	r1, [r2, #0]
   10f96:	430b      	orrs	r3, r1
   10f98:	7013      	strb	r3, [r2, #0]
   10f9a:	797b      	ldrb	r3, [r7, #5]
   10f9c:	065b      	lsls	r3, r3, #25
   10f9e:	d505      	bpl.n	10fac <LORAWAN_RxDone+0x5f8>
   10fa0:	0022      	movs	r2, r4
   10fa2:	2310      	movs	r3, #16
   10fa4:	326c      	adds	r2, #108	; 0x6c
   10fa6:	7811      	ldrb	r1, [r2, #0]
   10fa8:	430b      	orrs	r3, r1
   10faa:	7013      	strb	r3, [r2, #0]
   10fac:	221f      	movs	r2, #31
   10fae:	783b      	ldrb	r3, [r7, #0]
   10fb0:	4393      	bics	r3, r2
   10fb2:	2ba0      	cmp	r3, #160	; 0xa0
   10fb4:	d105      	bne.n	10fc2 <LORAWAN_RxDone+0x60e>
   10fb6:	0022      	movs	r2, r4
   10fb8:	326c      	adds	r2, #108	; 0x6c
   10fba:	7811      	ldrb	r1, [r2, #0]
   10fbc:	3b9e      	subs	r3, #158	; 0x9e
   10fbe:	430b      	orrs	r3, r1
   10fc0:	7013      	strb	r3, [r2, #0]
   10fc2:	7979      	ldrb	r1, [r7, #5]
   10fc4:	070b      	lsls	r3, r1, #28
   10fc6:	d100      	bne.n	10fca <LORAWAN_RxDone+0x616>
   10fc8:	e0d0      	b.n	1116c <LORAWAN_RxDone+0x7b8>
   10fca:	0709      	lsls	r1, r1, #28
   10fcc:	0f09      	lsrs	r1, r1, #28
   10fce:	187b      	adds	r3, r7, r1
   10fd0:	7a1b      	ldrb	r3, [r3, #8]
   10fd2:	2b00      	cmp	r3, #0
   10fd4:	d100      	bne.n	10fd8 <LORAWAN_RxDone+0x624>
   10fd6:	e0a0      	b.n	1111a <LORAWAN_RxDone+0x766>
   10fd8:	0038      	movs	r0, r7
   10fda:	4bb4      	ldr	r3, [pc, #720]	; (112ac <LORAWAN_RxDone+0x8f8>)
   10fdc:	3008      	adds	r0, #8
   10fde:	4798      	blx	r3
   10fe0:	2301      	movs	r3, #1
   10fe2:	0006      	movs	r6, r0
   10fe4:	9307      	str	r3, [sp, #28]
   10fe6:	7978      	ldrb	r0, [r7, #5]
   10fe8:	9905      	ldr	r1, [sp, #20]
   10fea:	0702      	lsls	r2, r0, #28
   10fec:	0f12      	lsrs	r2, r2, #28
   10fee:	0013      	movs	r3, r2
   10ff0:	330c      	adds	r3, #12
   10ff2:	4299      	cmp	r1, r3
   10ff4:	d100      	bne.n	10ff8 <LORAWAN_RxDone+0x644>
   10ff6:	e0e5      	b.n	111c4 <LORAWAN_RxDone+0x810>
   10ff8:	7833      	ldrb	r3, [r6, #0]
   10ffa:	1a89      	subs	r1, r1, r2
   10ffc:	b2c9      	uxtb	r1, r1
   10ffe:	9306      	str	r3, [sp, #24]
   11000:	000b      	movs	r3, r1
   11002:	3219      	adds	r2, #25
   11004:	3b0c      	subs	r3, #12
   11006:	4694      	mov	ip, r2
   11008:	9a06      	ldr	r2, [sp, #24]
   1100a:	b2db      	uxtb	r3, r3
   1100c:	9305      	str	r3, [sp, #20]
   1100e:	1c75      	adds	r5, r6, #1
   11010:	4ba5      	ldr	r3, [pc, #660]	; (112a8 <LORAWAN_RxDone+0x8f4>)
   11012:	2a00      	cmp	r2, #0
   11014:	d100      	bne.n	11018 <LORAWAN_RxDone+0x664>
   11016:	e0ac      	b.n	11172 <LORAWAN_RxDone+0x7be>
   11018:	681a      	ldr	r2, [r3, #0]
   1101a:	7918      	ldrb	r0, [r3, #4]
   1101c:	0a14      	lsrs	r4, r2, #8
   1101e:	4662      	mov	r2, ip
   11020:	0600      	lsls	r0, r0, #24
   11022:	4320      	orrs	r0, r4
   11024:	9003      	str	r0, [sp, #12]
   11026:	9201      	str	r2, [sp, #4]
   11028:	48a1      	ldr	r0, [pc, #644]	; (112b0 <LORAWAN_RxDone+0x8fc>)
   1102a:	4aa2      	ldr	r2, [pc, #648]	; (112b4 <LORAWAN_RxDone+0x900>)
   1102c:	9002      	str	r0, [sp, #8]
   1102e:	9200      	str	r2, [sp, #0]
   11030:	390d      	subs	r1, #13
   11032:	b2c9      	uxtb	r1, r1
   11034:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   11036:	2201      	movs	r2, #1
   11038:	0028      	movs	r0, r5
   1103a:	4c9f      	ldr	r4, [pc, #636]	; (112b8 <LORAWAN_RxDone+0x904>)
   1103c:	47a0      	blx	r4
   1103e:	4c9a      	ldr	r4, [pc, #616]	; (112a8 <LORAWAN_RxDone+0x8f4>)
   11040:	2300      	movs	r3, #0
   11042:	0022      	movs	r2, r4
   11044:	32a2      	adds	r2, #162	; 0xa2
   11046:	8013      	strh	r3, [r2, #0]
   11048:	0022      	movs	r2, r4
   1104a:	32cd      	adds	r2, #205	; 0xcd
   1104c:	7013      	strb	r3, [r2, #0]
   1104e:	0022      	movs	r2, r4
   11050:	2110      	movs	r1, #16
   11052:	326c      	adds	r2, #108	; 0x6c
   11054:	7813      	ldrb	r3, [r2, #0]
   11056:	438b      	bics	r3, r1
   11058:	7013      	strb	r3, [r2, #0]
   1105a:	0023      	movs	r3, r4
   1105c:	2201      	movs	r2, #1
   1105e:	335c      	adds	r3, #92	; 0x5c
   11060:	7859      	ldrb	r1, [r3, #1]
   11062:	430a      	orrs	r2, r1
   11064:	705a      	strb	r2, [r3, #1]
   11066:	220e      	movs	r2, #14
   11068:	781b      	ldrb	r3, [r3, #0]
   1106a:	4013      	ands	r3, r2
   1106c:	2b06      	cmp	r3, #6
   1106e:	d109      	bne.n	11084 <LORAWAN_RxDone+0x6d0>
   11070:	0023      	movs	r3, r4
   11072:	33d4      	adds	r3, #212	; 0xd4
   11074:	781b      	ldrb	r3, [r3, #0]
   11076:	2b01      	cmp	r3, #1
   11078:	d104      	bne.n	11084 <LORAWAN_RxDone+0x6d0>
   1107a:	0023      	movs	r3, r4
   1107c:	33c5      	adds	r3, #197	; 0xc5
   1107e:	7818      	ldrb	r0, [r3, #0]
   11080:	4b8e      	ldr	r3, [pc, #568]	; (112bc <LORAWAN_RxDone+0x908>)
   11082:	4798      	blx	r3
   11084:	0025      	movs	r5, r4
   11086:	2201      	movs	r2, #1
   11088:	356c      	adds	r5, #108	; 0x6c
   1108a:	782b      	ldrb	r3, [r5, #0]
   1108c:	4213      	tst	r3, r2
   1108e:	d100      	bne.n	11092 <LORAWAN_RxDone+0x6de>
   11090:	e0da      	b.n	11248 <LORAWAN_RxDone+0x894>
   11092:	797b      	ldrb	r3, [r7, #5]
   11094:	321f      	adds	r2, #31
   11096:	4213      	tst	r3, r2
   11098:	d100      	bne.n	1109c <LORAWAN_RxDone+0x6e8>
   1109a:	e0bb      	b.n	11214 <LORAWAN_RxDone+0x860>
   1109c:	4b88      	ldr	r3, [pc, #544]	; (112c0 <LORAWAN_RxDone+0x90c>)
   1109e:	4798      	blx	r3
   110a0:	0023      	movs	r3, r4
   110a2:	2101      	movs	r1, #1
   110a4:	335c      	adds	r3, #92	; 0x5c
   110a6:	785a      	ldrb	r2, [r3, #1]
   110a8:	438a      	bics	r2, r1
   110aa:	705a      	strb	r2, [r3, #1]
   110ac:	9a06      	ldr	r2, [sp, #24]
   110ae:	2a00      	cmp	r2, #0
   110b0:	d100      	bne.n	110b4 <LORAWAN_RxDone+0x700>
   110b2:	e08f      	b.n	111d4 <LORAWAN_RxDone+0x820>
   110b4:	9a05      	ldr	r2, [sp, #20]
   110b6:	0031      	movs	r1, r6
   110b8:	0038      	movs	r0, r7
   110ba:	4b82      	ldr	r3, [pc, #520]	; (112c4 <LORAWAN_RxDone+0x910>)
   110bc:	4798      	blx	r3
   110be:	4b82      	ldr	r3, [pc, #520]	; (112c8 <LORAWAN_RxDone+0x914>)
   110c0:	4d79      	ldr	r5, [pc, #484]	; (112a8 <LORAWAN_RxDone+0x8f4>)
   110c2:	781b      	ldrb	r3, [r3, #0]
   110c4:	06db      	lsls	r3, r3, #27
   110c6:	d400      	bmi.n	110ca <LORAWAN_RxDone+0x716>
   110c8:	e15b      	b.n	11382 <LORAWAN_RxDone+0x9ce>
   110ca:	2220      	movs	r2, #32
   110cc:	4b7f      	ldr	r3, [pc, #508]	; (112cc <LORAWAN_RxDone+0x918>)
   110ce:	781b      	ldrb	r3, [r3, #0]
   110d0:	401a      	ands	r2, r3
   110d2:	9205      	str	r2, [sp, #20]
   110d4:	d000      	beq.n	110d8 <LORAWAN_RxDone+0x724>
   110d6:	e154      	b.n	11382 <LORAWAN_RxDone+0x9ce>
   110d8:	320a      	adds	r2, #10
   110da:	4213      	tst	r3, r2
   110dc:	d100      	bne.n	110e0 <LORAWAN_RxDone+0x72c>
   110de:	e150      	b.n	11382 <LORAWAN_RxDone+0x9ce>
   110e0:	002b      	movs	r3, r5
   110e2:	33cc      	adds	r3, #204	; 0xcc
   110e4:	781b      	ldrb	r3, [r3, #0]
   110e6:	a90f      	add	r1, sp, #60	; 0x3c
   110e8:	704b      	strb	r3, [r1, #1]
   110ea:	002e      	movs	r6, r5
   110ec:	2301      	movs	r3, #1
   110ee:	36bf      	adds	r6, #191	; 0xbf
   110f0:	700b      	strb	r3, [r1, #0]
   110f2:	7833      	ldrb	r3, [r6, #0]
   110f4:	aa0e      	add	r2, sp, #56	; 0x38
   110f6:	2030      	movs	r0, #48	; 0x30
   110f8:	4f75      	ldr	r7, [pc, #468]	; (112d0 <LORAWAN_RxDone+0x91c>)
   110fa:	708b      	strb	r3, [r1, #2]
   110fc:	47b8      	blx	r7
   110fe:	9006      	str	r0, [sp, #24]
   11100:	2808      	cmp	r0, #8
   11102:	d000      	beq.n	11106 <LORAWAN_RxDone+0x752>
   11104:	e0f4      	b.n	112f0 <LORAWAN_RxDone+0x93c>
   11106:	4b73      	ldr	r3, [pc, #460]	; (112d4 <LORAWAN_RxDone+0x920>)
   11108:	9805      	ldr	r0, [sp, #20]
   1110a:	4798      	blx	r3
   1110c:	4b6f      	ldr	r3, [pc, #444]	; (112cc <LORAWAN_RxDone+0x918>)
   1110e:	9a06      	ldr	r2, [sp, #24]
   11110:	781b      	ldrb	r3, [r3, #0]
   11112:	4393      	bics	r3, r2
   11114:	4a6d      	ldr	r2, [pc, #436]	; (112cc <LORAWAN_RxDone+0x918>)
   11116:	7013      	strb	r3, [r2, #0]
   11118:	e6fd      	b.n	10f16 <LORAWAN_RxDone+0x562>
   1111a:	0023      	movs	r3, r4
   1111c:	33d4      	adds	r3, #212	; 0xd4
   1111e:	781b      	ldrb	r3, [r3, #0]
   11120:	2b01      	cmp	r3, #1
   11122:	d108      	bne.n	11136 <LORAWAN_RxDone+0x782>
   11124:	0023      	movs	r3, r4
   11126:	220e      	movs	r2, #14
   11128:	335c      	adds	r3, #92	; 0x5c
   1112a:	781b      	ldrb	r3, [r3, #0]
   1112c:	4013      	ands	r3, r2
   1112e:	2b06      	cmp	r3, #6
   11130:	d101      	bne.n	11136 <LORAWAN_RxDone+0x782>
   11132:	4b69      	ldr	r3, [pc, #420]	; (112d8 <LORAWAN_RxDone+0x924>)
   11134:	4798      	blx	r3
   11136:	4969      	ldr	r1, [pc, #420]	; (112dc <LORAWAN_RxDone+0x928>)
   11138:	784a      	ldrb	r2, [r1, #1]
   1113a:	780b      	ldrb	r3, [r1, #0]
   1113c:	0212      	lsls	r2, r2, #8
   1113e:	431a      	orrs	r2, r3
   11140:	788b      	ldrb	r3, [r1, #2]
   11142:	041b      	lsls	r3, r3, #16
   11144:	431a      	orrs	r2, r3
   11146:	78cb      	ldrb	r3, [r1, #3]
   11148:	061b      	lsls	r3, r3, #24
   1114a:	4313      	orrs	r3, r2
   1114c:	d008      	beq.n	11160 <LORAWAN_RxDone+0x7ac>
   1114e:	0022      	movs	r2, r4
   11150:	2120      	movs	r1, #32
   11152:	326c      	adds	r2, #108	; 0x6c
   11154:	7813      	ldrb	r3, [r2, #0]
   11156:	201e      	movs	r0, #30
   11158:	438b      	bics	r3, r1
   1115a:	7013      	strb	r3, [r2, #0]
   1115c:	4b60      	ldr	r3, [pc, #384]	; (112e0 <LORAWAN_RxDone+0x92c>)
   1115e:	4798      	blx	r3
   11160:	2300      	movs	r3, #0
   11162:	34b8      	adds	r4, #184	; 0xb8
   11164:	7023      	strb	r3, [r4, #0]
   11166:	4b5f      	ldr	r3, [pc, #380]	; (112e4 <LORAWAN_RxDone+0x930>)
   11168:	4798      	blx	r3
   1116a:	e6d4      	b.n	10f16 <LORAWAN_RxDone+0x562>
   1116c:	003e      	movs	r6, r7
   1116e:	3608      	adds	r6, #8
   11170:	e739      	b.n	10fe6 <LORAWAN_RxDone+0x632>
   11172:	9a05      	ldr	r2, [sp, #20]
   11174:	2a00      	cmp	r2, #0
   11176:	d029      	beq.n	111cc <LORAWAN_RxDone+0x818>
   11178:	0702      	lsls	r2, r0, #28
   1117a:	d11d      	bne.n	111b8 <LORAWAN_RxDone+0x804>
   1117c:	681a      	ldr	r2, [r3, #0]
   1117e:	390d      	subs	r1, #13
   11180:	0a10      	lsrs	r0, r2, #8
   11182:	4662      	mov	r2, ip
   11184:	b2cc      	uxtb	r4, r1
   11186:	7919      	ldrb	r1, [r3, #4]
   11188:	9201      	str	r2, [sp, #4]
   1118a:	0609      	lsls	r1, r1, #24
   1118c:	4301      	orrs	r1, r0
   1118e:	9103      	str	r1, [sp, #12]
   11190:	4a55      	ldr	r2, [pc, #340]	; (112e8 <LORAWAN_RxDone+0x934>)
   11192:	4947      	ldr	r1, [pc, #284]	; (112b0 <LORAWAN_RxDone+0x8fc>)
   11194:	9200      	str	r2, [sp, #0]
   11196:	9102      	str	r1, [sp, #8]
   11198:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1119a:	2201      	movs	r2, #1
   1119c:	0021      	movs	r1, r4
   1119e:	0028      	movs	r0, r5
   111a0:	4e45      	ldr	r6, [pc, #276]	; (112b8 <LORAWAN_RxDone+0x904>)
   111a2:	47b0      	blx	r6
   111a4:	4b41      	ldr	r3, [pc, #260]	; (112ac <LORAWAN_RxDone+0x8f8>)
   111a6:	0021      	movs	r1, r4
   111a8:	0028      	movs	r0, r5
   111aa:	4798      	blx	r3
   111ac:	9b06      	ldr	r3, [sp, #24]
   111ae:	9e06      	ldr	r6, [sp, #24]
   111b0:	9305      	str	r3, [sp, #20]
   111b2:	2301      	movs	r3, #1
   111b4:	9307      	str	r3, [sp, #28]
   111b6:	e742      	b.n	1103e <LORAWAN_RxDone+0x68a>
   111b8:	001a      	movs	r2, r3
   111ba:	32d4      	adds	r2, #212	; 0xd4
   111bc:	7812      	ldrb	r2, [r2, #0]
   111be:	2a01      	cmp	r2, #1
   111c0:	d1b9      	bne.n	11136 <LORAWAN_RxDone+0x782>
   111c2:	e7b0      	b.n	11126 <LORAWAN_RxDone+0x772>
   111c4:	2600      	movs	r6, #0
   111c6:	9606      	str	r6, [sp, #24]
   111c8:	9605      	str	r6, [sp, #20]
   111ca:	e738      	b.n	1103e <LORAWAN_RxDone+0x68a>
   111cc:	9b05      	ldr	r3, [sp, #20]
   111ce:	9306      	str	r3, [sp, #24]
   111d0:	001e      	movs	r6, r3
   111d2:	e734      	b.n	1103e <LORAWAN_RxDone+0x68a>
   111d4:	2120      	movs	r1, #32
   111d6:	782a      	ldrb	r2, [r5, #0]
   111d8:	438a      	bics	r2, r1
   111da:	702a      	strb	r2, [r5, #0]
   111dc:	0022      	movs	r2, r4
   111de:	32d4      	adds	r2, #212	; 0xd4
   111e0:	7812      	ldrb	r2, [r2, #0]
   111e2:	2a01      	cmp	r2, #1
   111e4:	d10e      	bne.n	11204 <LORAWAN_RxDone+0x850>
   111e6:	781a      	ldrb	r2, [r3, #0]
   111e8:	3912      	subs	r1, #18
   111ea:	438a      	bics	r2, r1
   111ec:	701a      	strb	r2, [r3, #0]
   111ee:	23da      	movs	r3, #218	; 0xda
   111f0:	4a2d      	ldr	r2, [pc, #180]	; (112a8 <LORAWAN_RxDone+0x8f4>)
   111f2:	005b      	lsls	r3, r3, #1
   111f4:	5cd3      	ldrb	r3, [r2, r3]
   111f6:	2b00      	cmp	r3, #0
   111f8:	d000      	beq.n	111fc <LORAWAN_RxDone+0x848>
   111fa:	e760      	b.n	110be <LORAWAN_RxDone+0x70a>
   111fc:	2008      	movs	r0, #8
   111fe:	4b38      	ldr	r3, [pc, #224]	; (112e0 <LORAWAN_RxDone+0x92c>)
   11200:	4798      	blx	r3
   11202:	e75c      	b.n	110be <LORAWAN_RxDone+0x70a>
   11204:	2a04      	cmp	r2, #4
   11206:	d1f2      	bne.n	111ee <LORAWAN_RxDone+0x83a>
   11208:	0023      	movs	r3, r4
   1120a:	33c8      	adds	r3, #200	; 0xc8
   1120c:	7818      	ldrb	r0, [r3, #0]
   1120e:	4b2b      	ldr	r3, [pc, #172]	; (112bc <LORAWAN_RxDone+0x908>)
   11210:	4798      	blx	r3
   11212:	e7ec      	b.n	111ee <LORAWAN_RxDone+0x83a>
   11214:	9b07      	ldr	r3, [sp, #28]
   11216:	2b00      	cmp	r3, #0
   11218:	d013      	beq.n	11242 <LORAWAN_RxDone+0x88e>
   1121a:	0023      	movs	r3, r4
   1121c:	33d4      	adds	r3, #212	; 0xd4
   1121e:	781e      	ldrb	r6, [r3, #0]
   11220:	2e01      	cmp	r6, #1
   11222:	d10e      	bne.n	11242 <LORAWAN_RxDone+0x88e>
   11224:	4b26      	ldr	r3, [pc, #152]	; (112c0 <LORAWAN_RxDone+0x90c>)
   11226:	4798      	blx	r3
   11228:	0022      	movs	r2, r4
   1122a:	325c      	adds	r2, #92	; 0x5c
   1122c:	7853      	ldrb	r3, [r2, #1]
   1122e:	43b3      	bics	r3, r6
   11230:	7053      	strb	r3, [r2, #1]
   11232:	2220      	movs	r2, #32
   11234:	782b      	ldrb	r3, [r5, #0]
   11236:	4393      	bics	r3, r2
   11238:	702b      	strb	r3, [r5, #0]
   1123a:	23da      	movs	r3, #218	; 0xda
   1123c:	005b      	lsls	r3, r3, #1
   1123e:	5ce3      	ldrb	r3, [r4, r3]
   11240:	e7d9      	b.n	111f6 <LORAWAN_RxDone+0x842>
   11242:	4b2a      	ldr	r3, [pc, #168]	; (112ec <LORAWAN_RxDone+0x938>)
   11244:	4798      	blx	r3
   11246:	e73a      	b.n	110be <LORAWAN_RxDone+0x70a>
   11248:	9a06      	ldr	r2, [sp, #24]
   1124a:	2a00      	cmp	r2, #0
   1124c:	d00b      	beq.n	11266 <LORAWAN_RxDone+0x8b2>
   1124e:	9a05      	ldr	r2, [sp, #20]
   11250:	0031      	movs	r1, r6
   11252:	0038      	movs	r0, r7
   11254:	4b1b      	ldr	r3, [pc, #108]	; (112c4 <LORAWAN_RxDone+0x910>)
   11256:	4798      	blx	r3
   11258:	0022      	movs	r2, r4
   1125a:	2101      	movs	r1, #1
   1125c:	325c      	adds	r2, #92	; 0x5c
   1125e:	7853      	ldrb	r3, [r2, #1]
   11260:	438b      	bics	r3, r1
   11262:	7053      	strb	r3, [r2, #1]
   11264:	e72b      	b.n	110be <LORAWAN_RxDone+0x70a>
   11266:	2220      	movs	r2, #32
   11268:	4393      	bics	r3, r2
   1126a:	702b      	strb	r3, [r5, #0]
   1126c:	0023      	movs	r3, r4
   1126e:	33d4      	adds	r3, #212	; 0xd4
   11270:	781b      	ldrb	r3, [r3, #0]
   11272:	2b01      	cmp	r3, #1
   11274:	d10e      	bne.n	11294 <LORAWAN_RxDone+0x8e0>
   11276:	0022      	movs	r2, r4
   11278:	210e      	movs	r1, #14
   1127a:	325c      	adds	r2, #92	; 0x5c
   1127c:	7813      	ldrb	r3, [r2, #0]
   1127e:	438b      	bics	r3, r1
   11280:	7013      	strb	r3, [r2, #0]
   11282:	23da      	movs	r3, #218	; 0xda
   11284:	005b      	lsls	r3, r3, #1
   11286:	5ce3      	ldrb	r3, [r4, r3]
   11288:	2b00      	cmp	r3, #0
   1128a:	d1e5      	bne.n	11258 <LORAWAN_RxDone+0x8a4>
   1128c:	2008      	movs	r0, #8
   1128e:	4b14      	ldr	r3, [pc, #80]	; (112e0 <LORAWAN_RxDone+0x92c>)
   11290:	4798      	blx	r3
   11292:	e7e1      	b.n	11258 <LORAWAN_RxDone+0x8a4>
   11294:	2b04      	cmp	r3, #4
   11296:	d1f4      	bne.n	11282 <LORAWAN_RxDone+0x8ce>
   11298:	0023      	movs	r3, r4
   1129a:	33c8      	adds	r3, #200	; 0xc8
   1129c:	7818      	ldrb	r0, [r3, #0]
   1129e:	4b07      	ldr	r3, [pc, #28]	; (112bc <LORAWAN_RxDone+0x908>)
   112a0:	4798      	blx	r3
   112a2:	e7ee      	b.n	11282 <LORAWAN_RxDone+0x8ce>
   112a4:	00008e61 	.word	0x00008e61
   112a8:	20002fd8 	.word	0x20002fd8
   112ac:	0001078d 	.word	0x0001078d
   112b0:	20002da0 	.word	0x20002da0
   112b4:	20002fed 	.word	0x20002fed
   112b8:	0000fd75 	.word	0x0000fd75
   112bc:	0000ca3d 	.word	0x0000ca3d
   112c0:	0000f4dd 	.word	0x0000f4dd
   112c4:	000101d1 	.word	0x000101d1
   112c8:	20003034 	.word	0x20003034
   112cc:	20003044 	.word	0x20003044
   112d0:	0000c2cd 	.word	0x0000c2cd
   112d4:	0000f2a9 	.word	0x0000f2a9
   112d8:	0000f1dd 	.word	0x0000f1dd
   112dc:	200032ac 	.word	0x200032ac
   112e0:	00010115 	.word	0x00010115
   112e4:	0001055d 	.word	0x0001055d
   112e8:	20002fdd 	.word	0x20002fdd
   112ec:	0000f469 	.word	0x0000f469
   112f0:	35f0      	adds	r5, #240	; 0xf0
   112f2:	782b      	ldrb	r3, [r5, #0]
   112f4:	079a      	lsls	r2, r3, #30
   112f6:	d521      	bpl.n	1133c <LORAWAN_RxDone+0x988>
   112f8:	aa10      	add	r2, sp, #64	; 0x40
   112fa:	0031      	movs	r1, r6
   112fc:	2026      	movs	r0, #38	; 0x26
   112fe:	47b8      	blx	r7
   11300:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11302:	1c5a      	adds	r2, r3, #1
   11304:	d001      	beq.n	1130a <LORAWAN_RxDone+0x956>
   11306:	3314      	adds	r3, #20
   11308:	9310      	str	r3, [sp, #64]	; 0x40
   1130a:	0021      	movs	r1, r4
   1130c:	220e      	movs	r2, #14
   1130e:	315c      	adds	r1, #92	; 0x5c
   11310:	780b      	ldrb	r3, [r1, #0]
   11312:	4393      	bics	r3, r2
   11314:	001a      	movs	r2, r3
   11316:	230c      	movs	r3, #12
   11318:	4313      	orrs	r3, r2
   1131a:	700b      	strb	r3, [r1, #0]
   1131c:	23c0      	movs	r3, #192	; 0xc0
   1131e:	33ff      	adds	r3, #255	; 0xff
   11320:	5ce3      	ldrb	r3, [r4, r3]
   11322:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11324:	21fa      	movs	r1, #250	; 0xfa
   11326:	1ad3      	subs	r3, r2, r3
   11328:	2200      	movs	r2, #0
   1132a:	0089      	lsls	r1, r1, #2
   1132c:	4359      	muls	r1, r3
   1132e:	34c6      	adds	r4, #198	; 0xc6
   11330:	4b31      	ldr	r3, [pc, #196]	; (113f8 <LORAWAN_RxDone+0xa44>)
   11332:	7820      	ldrb	r0, [r4, #0]
   11334:	9200      	str	r2, [sp, #0]
   11336:	4c31      	ldr	r4, [pc, #196]	; (113fc <LORAWAN_RxDone+0xa48>)
   11338:	47a0      	blx	r4
   1133a:	e5ec      	b.n	10f16 <LORAWAN_RxDone+0x562>
   1133c:	075b      	lsls	r3, r3, #29
   1133e:	d400      	bmi.n	11342 <LORAWAN_RxDone+0x98e>
   11340:	e5e9      	b.n	10f16 <LORAWAN_RxDone+0x562>
   11342:	aa10      	add	r2, sp, #64	; 0x40
   11344:	0031      	movs	r1, r6
   11346:	2033      	movs	r0, #51	; 0x33
   11348:	47b8      	blx	r7
   1134a:	220e      	movs	r2, #14
   1134c:	4b2c      	ldr	r3, [pc, #176]	; (11400 <LORAWAN_RxDone+0xa4c>)
   1134e:	781b      	ldrb	r3, [r3, #0]
   11350:	4393      	bics	r3, r2
   11352:	001a      	movs	r2, r3
   11354:	230c      	movs	r3, #12
   11356:	4313      	orrs	r3, r2
   11358:	4a29      	ldr	r2, [pc, #164]	; (11400 <LORAWAN_RxDone+0xa4c>)
   1135a:	7013      	strb	r3, [r2, #0]
   1135c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1135e:	1c5a      	adds	r2, r3, #1
   11360:	d001      	beq.n	11366 <LORAWAN_RxDone+0x9b2>
   11362:	3301      	adds	r3, #1
   11364:	9310      	str	r3, [sp, #64]	; 0x40
   11366:	23c0      	movs	r3, #192	; 0xc0
   11368:	33ff      	adds	r3, #255	; 0xff
   1136a:	5ce3      	ldrb	r3, [r4, r3]
   1136c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1136e:	21fa      	movs	r1, #250	; 0xfa
   11370:	1ad3      	subs	r3, r2, r3
   11372:	2200      	movs	r2, #0
   11374:	0089      	lsls	r1, r1, #2
   11376:	34c9      	adds	r4, #201	; 0xc9
   11378:	4359      	muls	r1, r3
   1137a:	7820      	ldrb	r0, [r4, #0]
   1137c:	4b21      	ldr	r3, [pc, #132]	; (11404 <LORAWAN_RxDone+0xa50>)
   1137e:	9200      	str	r2, [sp, #0]
   11380:	e7d9      	b.n	11336 <LORAWAN_RxDone+0x982>
   11382:	35d4      	adds	r5, #212	; 0xd4
   11384:	782b      	ldrb	r3, [r5, #0]
   11386:	2b04      	cmp	r3, #4
   11388:	d000      	beq.n	1138c <LORAWAN_RxDone+0x9d8>
   1138a:	e5c4      	b.n	10f16 <LORAWAN_RxDone+0x562>
   1138c:	0038      	movs	r0, r7
   1138e:	4b1e      	ldr	r3, [pc, #120]	; (11408 <LORAWAN_RxDone+0xa54>)
   11390:	4798      	blx	r3
   11392:	e5c0      	b.n	10f16 <LORAWAN_RxDone+0x562>
   11394:	220e      	movs	r2, #14
   11396:	4013      	ands	r3, r2
   11398:	2b0a      	cmp	r3, #10
   1139a:	d008      	beq.n	113ae <LORAWAN_RxDone+0x9fa>
   1139c:	2b06      	cmp	r3, #6
   1139e:	d000      	beq.n	113a2 <LORAWAN_RxDone+0x9ee>
   113a0:	e506      	b.n	10db0 <LORAWAN_RxDone+0x3fc>
   113a2:	0023      	movs	r3, r4
   113a4:	33d0      	adds	r3, #208	; 0xd0
   113a6:	781b      	ldrb	r3, [r3, #0]
   113a8:	2b00      	cmp	r3, #0
   113aa:	d100      	bne.n	113ae <LORAWAN_RxDone+0x9fa>
   113ac:	e500      	b.n	10db0 <LORAWAN_RxDone+0x3fc>
   113ae:	2220      	movs	r2, #32
   113b0:	346c      	adds	r4, #108	; 0x6c
   113b2:	7823      	ldrb	r3, [r4, #0]
   113b4:	2019      	movs	r0, #25
   113b6:	4393      	bics	r3, r2
   113b8:	7023      	strb	r3, [r4, #0]
   113ba:	e506      	b.n	10dca <LORAWAN_RxDone+0x416>
   113bc:	4913      	ldr	r1, [pc, #76]	; (1140c <LORAWAN_RxDone+0xa58>)
   113be:	784a      	ldrb	r2, [r1, #1]
   113c0:	780b      	ldrb	r3, [r1, #0]
   113c2:	0212      	lsls	r2, r2, #8
   113c4:	431a      	orrs	r2, r3
   113c6:	788b      	ldrb	r3, [r1, #2]
   113c8:	041b      	lsls	r3, r3, #16
   113ca:	431a      	orrs	r2, r3
   113cc:	78cb      	ldrb	r3, [r1, #3]
   113ce:	061b      	lsls	r3, r3, #24
   113d0:	4313      	orrs	r3, r2
   113d2:	d100      	bne.n	113d6 <LORAWAN_RxDone+0xa22>
   113d4:	e59f      	b.n	10f16 <LORAWAN_RxDone+0x562>
   113d6:	4b0e      	ldr	r3, [pc, #56]	; (11410 <LORAWAN_RxDone+0xa5c>)
   113d8:	4c0e      	ldr	r4, [pc, #56]	; (11414 <LORAWAN_RxDone+0xa60>)
   113da:	781b      	ldrb	r3, [r3, #0]
   113dc:	2b10      	cmp	r3, #16
   113de:	d105      	bne.n	113ec <LORAWAN_RxDone+0xa38>
   113e0:	0001      	movs	r1, r0
   113e2:	2000      	movs	r0, #0
   113e4:	9a05      	ldr	r2, [sp, #20]
   113e6:	3b0c      	subs	r3, #12
   113e8:	47a0      	blx	r4
   113ea:	e594      	b.n	10f16 <LORAWAN_RxDone+0x562>
   113ec:	2300      	movs	r3, #0
   113ee:	0001      	movs	r1, r0
   113f0:	9a05      	ldr	r2, [sp, #20]
   113f2:	0018      	movs	r0, r3
   113f4:	e7f8      	b.n	113e8 <LORAWAN_RxDone+0xa34>
   113f6:	46c0      	nop			; (mov r8, r8)
   113f8:	0000f39d 	.word	0x0000f39d
   113fc:	0000c739 	.word	0x0000c739
   11400:	20003034 	.word	0x20003034
   11404:	0000fc65 	.word	0x0000fc65
   11408:	00011621 	.word	0x00011621
   1140c:	200032ac 	.word	0x200032ac
   11410:	200023f3 	.word	0x200023f3
   11414:	00010179 	.word	0x00010179

00011418 <AESEncodeLoRa>:
   11418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1141a:	0004      	movs	r4, r0
   1141c:	2210      	movs	r2, #16
   1141e:	4668      	mov	r0, sp
   11420:	4b03      	ldr	r3, [pc, #12]	; (11430 <AESEncodeLoRa+0x18>)
   11422:	4798      	blx	r3
   11424:	4669      	mov	r1, sp
   11426:	0020      	movs	r0, r4
   11428:	4b02      	ldr	r3, [pc, #8]	; (11434 <AESEncodeLoRa+0x1c>)
   1142a:	4798      	blx	r3
   1142c:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
   1142e:	46c0      	nop			; (mov r8, r8)
   11430:	00014ddf 	.word	0x00014ddf
   11434:	0000c321 	.word	0x0000c321

00011438 <FillSubKey.constprop.0>:
   11438:	b530      	push	{r4, r5, lr}
   1143a:	2310      	movs	r3, #16
   1143c:	2400      	movs	r4, #0
   1143e:	3b01      	subs	r3, #1
   11440:	b2db      	uxtb	r3, r3
   11442:	2bff      	cmp	r3, #255	; 0xff
   11444:	d100      	bne.n	11448 <FillSubKey.constprop.0+0x10>
   11446:	bd30      	pop	{r4, r5, pc}
   11448:	18c5      	adds	r5, r0, r3
   1144a:	782a      	ldrb	r2, [r5, #0]
   1144c:	0052      	lsls	r2, r2, #1
   1144e:	4322      	orrs	r2, r4
   11450:	54ca      	strb	r2, [r1, r3]
   11452:	782c      	ldrb	r4, [r5, #0]
   11454:	09e4      	lsrs	r4, r4, #7
   11456:	e7f2      	b.n	1143e <FillSubKey.constprop.0+0x6>

00011458 <AESCmac>:
   11458:	b5f0      	push	{r4, r5, r6, r7, lr}
   1145a:	b09d      	sub	sp, #116	; 0x74
   1145c:	ad18      	add	r5, sp, #96	; 0x60
   1145e:	4c59      	ldr	r4, [pc, #356]	; (115c4 <AESCmac+0x16c>)
   11460:	9001      	str	r0, [sp, #4]
   11462:	9103      	str	r1, [sp, #12]
   11464:	9202      	str	r2, [sp, #8]
   11466:	2100      	movs	r1, #0
   11468:	2210      	movs	r2, #16
   1146a:	0028      	movs	r0, r5
   1146c:	001f      	movs	r7, r3
   1146e:	47a0      	blx	r4
   11470:	2387      	movs	r3, #135	; 0x87
   11472:	ae14      	add	r6, sp, #80	; 0x50
   11474:	2210      	movs	r2, #16
   11476:	2100      	movs	r1, #0
   11478:	0030      	movs	r0, r6
   1147a:	73eb      	strb	r3, [r5, #15]
   1147c:	47a0      	blx	r4
   1147e:	9901      	ldr	r1, [sp, #4]
   11480:	0030      	movs	r0, r6
   11482:	4b51      	ldr	r3, [pc, #324]	; (115c8 <AESCmac+0x170>)
   11484:	4798      	blx	r3
   11486:	7832      	ldrb	r2, [r6, #0]
   11488:	ac04      	add	r4, sp, #16
   1148a:	4b50      	ldr	r3, [pc, #320]	; (115cc <AESCmac+0x174>)
   1148c:	0021      	movs	r1, r4
   1148e:	0030      	movs	r0, r6
   11490:	2a7f      	cmp	r2, #127	; 0x7f
   11492:	d83e      	bhi.n	11512 <AESCmac+0xba>
   11494:	4798      	blx	r3
   11496:	ab04      	add	r3, sp, #16
   11498:	781a      	ldrb	r2, [r3, #0]
   1149a:	ac08      	add	r4, sp, #32
   1149c:	4b4b      	ldr	r3, [pc, #300]	; (115cc <AESCmac+0x174>)
   1149e:	0021      	movs	r1, r4
   114a0:	a804      	add	r0, sp, #16
   114a2:	2a7f      	cmp	r2, #127	; 0x7f
   114a4:	d83f      	bhi.n	11526 <AESCmac+0xce>
   114a6:	4798      	blx	r3
   114a8:	0039      	movs	r1, r7
   114aa:	310f      	adds	r1, #15
   114ac:	110b      	asrs	r3, r1, #4
   114ae:	d04d      	beq.n	1154c <AESCmac+0xf4>
   114b0:	b2db      	uxtb	r3, r3
   114b2:	9300      	str	r3, [sp, #0]
   114b4:	073b      	lsls	r3, r7, #28
   114b6:	d14b      	bne.n	11550 <AESCmac+0xf8>
   114b8:	9b00      	ldr	r3, [sp, #0]
   114ba:	20ff      	movs	r0, #255	; 0xff
   114bc:	1e5a      	subs	r2, r3, #1
   114be:	0112      	lsls	r2, r2, #4
   114c0:	b2d2      	uxtb	r2, r2
   114c2:	0013      	movs	r3, r2
   114c4:	0100      	lsls	r0, r0, #4
   114c6:	4001      	ands	r1, r0
   114c8:	ad14      	add	r5, sp, #80	; 0x50
   114ca:	1a98      	subs	r0, r3, r2
   114cc:	b2c0      	uxtb	r0, r0
   114ce:	428b      	cmp	r3, r1
   114d0:	db33      	blt.n	1153a <AESCmac+0xe2>
   114d2:	2210      	movs	r2, #16
   114d4:	2100      	movs	r1, #0
   114d6:	a80c      	add	r0, sp, #48	; 0x30
   114d8:	4b3a      	ldr	r3, [pc, #232]	; (115c4 <AESCmac+0x16c>)
   114da:	4798      	blx	r3
   114dc:	2400      	movs	r4, #0
   114de:	9b00      	ldr	r3, [sp, #0]
   114e0:	3b01      	subs	r3, #1
   114e2:	429c      	cmp	r4, r3
   114e4:	db57      	blt.n	11596 <AESCmac+0x13e>
   114e6:	2400      	movs	r4, #0
   114e8:	ad10      	add	r5, sp, #64	; 0x40
   114ea:	a80c      	add	r0, sp, #48	; 0x30
   114ec:	a914      	add	r1, sp, #80	; 0x50
   114ee:	5c23      	ldrb	r3, [r4, r0]
   114f0:	5c62      	ldrb	r2, [r4, r1]
   114f2:	4053      	eors	r3, r2
   114f4:	5563      	strb	r3, [r4, r5]
   114f6:	3401      	adds	r4, #1
   114f8:	2c10      	cmp	r4, #16
   114fa:	d1f8      	bne.n	114ee <AESCmac+0x96>
   114fc:	9901      	ldr	r1, [sp, #4]
   114fe:	0028      	movs	r0, r5
   11500:	4b31      	ldr	r3, [pc, #196]	; (115c8 <AESCmac+0x170>)
   11502:	4798      	blx	r3
   11504:	0022      	movs	r2, r4
   11506:	0029      	movs	r1, r5
   11508:	9803      	ldr	r0, [sp, #12]
   1150a:	4b31      	ldr	r3, [pc, #196]	; (115d0 <AESCmac+0x178>)
   1150c:	4798      	blx	r3
   1150e:	b01d      	add	sp, #116	; 0x74
   11510:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11512:	4798      	blx	r3
   11514:	2300      	movs	r3, #0
   11516:	5d1a      	ldrb	r2, [r3, r4]
   11518:	5ce9      	ldrb	r1, [r5, r3]
   1151a:	404a      	eors	r2, r1
   1151c:	551a      	strb	r2, [r3, r4]
   1151e:	3301      	adds	r3, #1
   11520:	2b10      	cmp	r3, #16
   11522:	d1f8      	bne.n	11516 <AESCmac+0xbe>
   11524:	e7b7      	b.n	11496 <AESCmac+0x3e>
   11526:	4798      	blx	r3
   11528:	2300      	movs	r3, #0
   1152a:	5d1a      	ldrb	r2, [r3, r4]
   1152c:	5ce9      	ldrb	r1, [r5, r3]
   1152e:	404a      	eors	r2, r1
   11530:	551a      	strb	r2, [r3, r4]
   11532:	3301      	adds	r3, #1
   11534:	2b10      	cmp	r3, #16
   11536:	d1f8      	bne.n	1152a <AESCmac+0xd2>
   11538:	e7b6      	b.n	114a8 <AESCmac+0x50>
   1153a:	9c02      	ldr	r4, [sp, #8]
   1153c:	ae04      	add	r6, sp, #16
   1153e:	5ce4      	ldrb	r4, [r4, r3]
   11540:	5c36      	ldrb	r6, [r6, r0]
   11542:	3301      	adds	r3, #1
   11544:	4074      	eors	r4, r6
   11546:	542c      	strb	r4, [r5, r0]
   11548:	b2db      	uxtb	r3, r3
   1154a:	e7be      	b.n	114ca <AESCmac+0x72>
   1154c:	2301      	movs	r3, #1
   1154e:	9300      	str	r3, [sp, #0]
   11550:	2300      	movs	r3, #0
   11552:	220f      	movs	r2, #15
   11554:	003e      	movs	r6, r7
   11556:	001c      	movs	r4, r3
   11558:	2080      	movs	r0, #128	; 0x80
   1155a:	4396      	bics	r6, r2
   1155c:	4017      	ands	r7, r2
   1155e:	aa18      	add	r2, sp, #96	; 0x60
   11560:	b2d9      	uxtb	r1, r3
   11562:	428f      	cmp	r7, r1
   11564:	d911      	bls.n	1158a <AESCmac+0x132>
   11566:	9902      	ldr	r1, [sp, #8]
   11568:	1989      	adds	r1, r1, r6
   1156a:	5cc9      	ldrb	r1, [r1, r3]
   1156c:	54d1      	strb	r1, [r2, r3]
   1156e:	3301      	adds	r3, #1
   11570:	2b10      	cmp	r3, #16
   11572:	d1f5      	bne.n	11560 <AESCmac+0x108>
   11574:	2300      	movs	r3, #0
   11576:	a914      	add	r1, sp, #80	; 0x50
   11578:	a808      	add	r0, sp, #32
   1157a:	5cea      	ldrb	r2, [r5, r3]
   1157c:	5c1c      	ldrb	r4, [r3, r0]
   1157e:	4062      	eors	r2, r4
   11580:	545a      	strb	r2, [r3, r1]
   11582:	3301      	adds	r3, #1
   11584:	2b10      	cmp	r3, #16
   11586:	d1f8      	bne.n	1157a <AESCmac+0x122>
   11588:	e7a3      	b.n	114d2 <AESCmac+0x7a>
   1158a:	428f      	cmp	r7, r1
   1158c:	d101      	bne.n	11592 <AESCmac+0x13a>
   1158e:	54d0      	strb	r0, [r2, r3]
   11590:	e7ed      	b.n	1156e <AESCmac+0x116>
   11592:	54d4      	strb	r4, [r2, r3]
   11594:	e7eb      	b.n	1156e <AESCmac+0x116>
   11596:	2200      	movs	r2, #0
   11598:	9802      	ldr	r0, [sp, #8]
   1159a:	0123      	lsls	r3, r4, #4
   1159c:	a910      	add	r1, sp, #64	; 0x40
   1159e:	18c0      	adds	r0, r0, r3
   115a0:	ad0c      	add	r5, sp, #48	; 0x30
   115a2:	5c83      	ldrb	r3, [r0, r2]
   115a4:	5d56      	ldrb	r6, [r2, r5]
   115a6:	4073      	eors	r3, r6
   115a8:	5453      	strb	r3, [r2, r1]
   115aa:	3201      	adds	r2, #1
   115ac:	2a10      	cmp	r2, #16
   115ae:	d1f8      	bne.n	115a2 <AESCmac+0x14a>
   115b0:	4b07      	ldr	r3, [pc, #28]	; (115d0 <AESCmac+0x178>)
   115b2:	0028      	movs	r0, r5
   115b4:	4798      	blx	r3
   115b6:	3401      	adds	r4, #1
   115b8:	9901      	ldr	r1, [sp, #4]
   115ba:	0028      	movs	r0, r5
   115bc:	4b02      	ldr	r3, [pc, #8]	; (115c8 <AESCmac+0x170>)
   115be:	4798      	blx	r3
   115c0:	b2e4      	uxtb	r4, r4
   115c2:	e78c      	b.n	114de <AESCmac+0x86>
   115c4:	00014df1 	.word	0x00014df1
   115c8:	00011419 	.word	0x00011419
   115cc:	00011439 	.word	0x00011439
   115d0:	00014ddf 	.word	0x00014ddf

000115d4 <LorawanClasscUlAckTimerCallback>:
   115d4:	2102      	movs	r1, #2
   115d6:	4b03      	ldr	r3, [pc, #12]	; (115e4 <LorawanClasscUlAckTimerCallback+0x10>)
   115d8:	336c      	adds	r3, #108	; 0x6c
   115da:	781a      	ldrb	r2, [r3, #0]
   115dc:	438a      	bics	r2, r1
   115de:	701a      	strb	r2, [r3, #0]
   115e0:	4770      	bx	lr
   115e2:	46c0      	nop			; (mov r8, r8)
   115e4:	20002fd8 	.word	0x20002fd8

000115e8 <LorawanClasscValidateSend>:
   115e8:	23da      	movs	r3, #218	; 0xda
   115ea:	b510      	push	{r4, lr}
   115ec:	4c0a      	ldr	r4, [pc, #40]	; (11618 <LorawanClasscValidateSend+0x30>)
   115ee:	005b      	lsls	r3, r3, #1
   115f0:	5ce3      	ldrb	r3, [r4, r3]
   115f2:	2b00      	cmp	r3, #0
   115f4:	d008      	beq.n	11608 <LorawanClasscValidateSend+0x20>
   115f6:	220e      	movs	r2, #14
   115f8:	345c      	adds	r4, #92	; 0x5c
   115fa:	7823      	ldrb	r3, [r4, #0]
   115fc:	2008      	movs	r0, #8
   115fe:	4013      	ands	r3, r2
   11600:	2b02      	cmp	r3, #2
   11602:	d100      	bne.n	11606 <LorawanClasscValidateSend+0x1e>
   11604:	2011      	movs	r0, #17
   11606:	bd10      	pop	{r4, pc}
   11608:	0023      	movs	r3, r4
   1160a:	33fc      	adds	r3, #252	; 0xfc
   1160c:	7818      	ldrb	r0, [r3, #0]
   1160e:	4b03      	ldr	r3, [pc, #12]	; (1161c <LorawanClasscValidateSend+0x34>)
   11610:	4798      	blx	r3
   11612:	2800      	cmp	r0, #0
   11614:	d1ef      	bne.n	115f6 <LorawanClasscValidateSend+0xe>
   11616:	e7f5      	b.n	11604 <LorawanClasscValidateSend+0x1c>
   11618:	20002fd8 	.word	0x20002fd8
   1161c:	0000c8d1 	.word	0x0000c8d1

00011620 <LorawanClasscRxDone>:
   11620:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11622:	221f      	movs	r2, #31
   11624:	7803      	ldrb	r3, [r0, #0]
   11626:	4c13      	ldr	r4, [pc, #76]	; (11674 <LorawanClasscRxDone+0x54>)
   11628:	4393      	bics	r3, r2
   1162a:	2ba0      	cmp	r3, #160	; 0xa0
   1162c:	d10c      	bne.n	11648 <LorawanClasscRxDone+0x28>
   1162e:	0025      	movs	r5, r4
   11630:	35fc      	adds	r5, #252	; 0xfc
   11632:	7828      	ldrb	r0, [r5, #0]
   11634:	4b10      	ldr	r3, [pc, #64]	; (11678 <LorawanClasscRxDone+0x58>)
   11636:	4798      	blx	r3
   11638:	1e02      	subs	r2, r0, #0
   1163a:	d014      	beq.n	11666 <LorawanClasscRxDone+0x46>
   1163c:	0022      	movs	r2, r4
   1163e:	2102      	movs	r1, #2
   11640:	326c      	adds	r2, #108	; 0x6c
   11642:	7813      	ldrb	r3, [r2, #0]
   11644:	438b      	bics	r3, r1
   11646:	7013      	strb	r3, [r2, #0]
   11648:	345c      	adds	r4, #92	; 0x5c
   1164a:	7823      	ldrb	r3, [r4, #0]
   1164c:	220e      	movs	r2, #14
   1164e:	0019      	movs	r1, r3
   11650:	4011      	ands	r1, r2
   11652:	2906      	cmp	r1, #6
   11654:	d103      	bne.n	1165e <LorawanClasscRxDone+0x3e>
   11656:	4393      	bics	r3, r2
   11658:	3a04      	subs	r2, #4
   1165a:	4313      	orrs	r3, r2
   1165c:	7023      	strb	r3, [r4, #0]
   1165e:	2000      	movs	r0, #0
   11660:	4b06      	ldr	r3, [pc, #24]	; (1167c <LorawanClasscRxDone+0x5c>)
   11662:	4798      	blx	r3
   11664:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   11666:	7828      	ldrb	r0, [r5, #0]
   11668:	4b05      	ldr	r3, [pc, #20]	; (11680 <LorawanClasscRxDone+0x60>)
   1166a:	9200      	str	r2, [sp, #0]
   1166c:	4905      	ldr	r1, [pc, #20]	; (11684 <LorawanClasscRxDone+0x64>)
   1166e:	4d06      	ldr	r5, [pc, #24]	; (11688 <LorawanClasscRxDone+0x68>)
   11670:	47a8      	blx	r5
   11672:	e7e9      	b.n	11648 <LorawanClasscRxDone+0x28>
   11674:	20002fd8 	.word	0x20002fd8
   11678:	0000c8d1 	.word	0x0000c8d1
   1167c:	000104b1 	.word	0x000104b1
   11680:	000115d5 	.word	0x000115d5
   11684:	001e8480 	.word	0x001e8480
   11688:	0000c739 	.word	0x0000c739

0001168c <LorawanClasscRxTimeout>:
   1168c:	b510      	push	{r4, lr}
   1168e:	4b08      	ldr	r3, [pc, #32]	; (116b0 <LorawanClasscRxTimeout+0x24>)
   11690:	210e      	movs	r1, #14
   11692:	335c      	adds	r3, #92	; 0x5c
   11694:	781a      	ldrb	r2, [r3, #0]
   11696:	0010      	movs	r0, r2
   11698:	4008      	ands	r0, r1
   1169a:	2806      	cmp	r0, #6
   1169c:	d106      	bne.n	116ac <LorawanClasscRxTimeout+0x20>
   1169e:	438a      	bics	r2, r1
   116a0:	3904      	subs	r1, #4
   116a2:	430a      	orrs	r2, r1
   116a4:	701a      	strb	r2, [r3, #0]
   116a6:	2000      	movs	r0, #0
   116a8:	4b02      	ldr	r3, [pc, #8]	; (116b4 <LorawanClasscRxTimeout+0x28>)
   116aa:	4798      	blx	r3
   116ac:	bd10      	pop	{r4, pc}
   116ae:	46c0      	nop			; (mov r8, r8)
   116b0:	20002fd8 	.word	0x20002fd8
   116b4:	000104b1 	.word	0x000104b1

000116b8 <LorawanClasscNotifyAppOnReceive>:
   116b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   116ba:	001f      	movs	r7, r3
   116bc:	4b08      	ldr	r3, [pc, #32]	; (116e0 <LorawanClasscNotifyAppOnReceive+0x28>)
   116be:	0004      	movs	r4, r0
   116c0:	33fc      	adds	r3, #252	; 0xfc
   116c2:	7818      	ldrb	r0, [r3, #0]
   116c4:	4b07      	ldr	r3, [pc, #28]	; (116e4 <LorawanClasscNotifyAppOnReceive+0x2c>)
   116c6:	000d      	movs	r5, r1
   116c8:	0016      	movs	r6, r2
   116ca:	4798      	blx	r3
   116cc:	2800      	cmp	r0, #0
   116ce:	d105      	bne.n	116dc <LorawanClasscNotifyAppOnReceive+0x24>
   116d0:	0020      	movs	r0, r4
   116d2:	003b      	movs	r3, r7
   116d4:	0032      	movs	r2, r6
   116d6:	0029      	movs	r1, r5
   116d8:	4c03      	ldr	r4, [pc, #12]	; (116e8 <LorawanClasscNotifyAppOnReceive+0x30>)
   116da:	47a0      	blx	r4
   116dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   116de:	46c0      	nop			; (mov r8, r8)
   116e0:	20002fd8 	.word	0x20002fd8
   116e4:	0000c8d1 	.word	0x0000c8d1
   116e8:	00010179 	.word	0x00010179

000116ec <LorawanMcastValidateHdr>:
   116ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   116ee:	469c      	mov	ip, r3
   116f0:	2400      	movs	r4, #0
   116f2:	230a      	movs	r3, #10
   116f4:	4f18      	ldr	r7, [pc, #96]	; (11758 <LorawanMcastValidateHdr+0x6c>)
   116f6:	b2e5      	uxtb	r5, r4
   116f8:	9501      	str	r5, [sp, #4]
   116fa:	4d18      	ldr	r5, [pc, #96]	; (1175c <LorawanMcastValidateHdr+0x70>)
   116fc:	2601      	movs	r6, #1
   116fe:	78ad      	ldrb	r5, [r5, #2]
   11700:	4125      	asrs	r5, r4
   11702:	4235      	tst	r5, r6
   11704:	d023      	beq.n	1174e <LorawanMcastValidateHdr+0x62>
   11706:	7886      	ldrb	r6, [r0, #2]
   11708:	7845      	ldrb	r5, [r0, #1]
   1170a:	0236      	lsls	r6, r6, #8
   1170c:	432e      	orrs	r6, r5
   1170e:	78c5      	ldrb	r5, [r0, #3]
   11710:	042d      	lsls	r5, r5, #16
   11712:	432e      	orrs	r6, r5
   11714:	7905      	ldrb	r5, [r0, #4]
   11716:	062d      	lsls	r5, r5, #24
   11718:	4335      	orrs	r5, r6
   1171a:	262c      	movs	r6, #44	; 0x2c
   1171c:	4366      	muls	r6, r4
   1171e:	3605      	adds	r6, #5
   11720:	36ff      	adds	r6, #255	; 0xff
   11722:	59be      	ldr	r6, [r7, r6]
   11724:	42b5      	cmp	r5, r6
   11726:	d112      	bne.n	1174e <LorawanMcastValidateHdr+0x62>
   11728:	003d      	movs	r5, r7
   1172a:	35d4      	adds	r5, #212	; 0xd4
   1172c:	782e      	ldrb	r6, [r5, #0]
   1172e:	2506      	movs	r5, #6
   11730:	422e      	tst	r6, r5
   11732:	d00c      	beq.n	1174e <LorawanMcastValidateHdr+0x62>
   11734:	2a00      	cmp	r2, #0
   11736:	d00a      	beq.n	1174e <LorawanMcastValidateHdr+0x62>
   11738:	7946      	ldrb	r6, [r0, #5]
   1173a:	3569      	adds	r5, #105	; 0x69
   1173c:	422e      	tst	r6, r5
   1173e:	d106      	bne.n	1174e <LorawanMcastValidateHdr+0x62>
   11740:	2903      	cmp	r1, #3
   11742:	d104      	bne.n	1174e <LorawanMcastValidateHdr+0x62>
   11744:	466d      	mov	r5, sp
   11746:	4663      	mov	r3, ip
   11748:	792d      	ldrb	r5, [r5, #4]
   1174a:	701d      	strb	r5, [r3, #0]
   1174c:	2308      	movs	r3, #8
   1174e:	3401      	adds	r4, #1
   11750:	2c04      	cmp	r4, #4
   11752:	d1d0      	bne.n	116f6 <LorawanMcastValidateHdr+0xa>
   11754:	0018      	movs	r0, r3
   11756:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   11758:	20002fd8 	.word	0x20002fd8
   1175c:	200030d7 	.word	0x200030d7

00011760 <LorawanMcastProcessPkt>:
   11760:	b5f0      	push	{r4, r5, r6, r7, lr}
   11762:	b089      	sub	sp, #36	; 0x24
   11764:	9005      	str	r0, [sp, #20]
   11766:	000c      	movs	r4, r1
   11768:	0015      	movs	r5, r2
   1176a:	7991      	ldrb	r1, [r2, #6]
   1176c:	79d2      	ldrb	r2, [r2, #7]
   1176e:	4e31      	ldr	r6, [pc, #196]	; (11834 <LorawanMcastProcessPkt+0xd4>)
   11770:	0212      	lsls	r2, r2, #8
   11772:	430a      	orrs	r2, r1
   11774:	212c      	movs	r1, #44	; 0x2c
   11776:	4359      	muls	r1, r3
   11778:	1873      	adds	r3, r6, r1
   1177a:	9307      	str	r3, [sp, #28]
   1177c:	33fe      	adds	r3, #254	; 0xfe
   1177e:	9106      	str	r1, [sp, #24]
   11780:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
   11782:	270a      	movs	r7, #10
   11784:	4291      	cmp	r1, r2
   11786:	d83e      	bhi.n	11806 <LorawanMcastProcessPkt+0xa6>
   11788:	855a      	strh	r2, [r3, #42]	; 0x2a
   1178a:	2105      	movs	r1, #5
   1178c:	4b2a      	ldr	r3, [pc, #168]	; (11838 <LorawanMcastProcessPkt+0xd8>)
   1178e:	2000      	movs	r0, #0
   11790:	4798      	blx	r3
   11792:	9a07      	ldr	r2, [sp, #28]
   11794:	0021      	movs	r1, r4
   11796:	32fc      	adds	r2, #252	; 0xfc
   11798:	6893      	ldr	r3, [r2, #8]
   1179a:	9805      	ldr	r0, [sp, #20]
   1179c:	9303      	str	r3, [sp, #12]
   1179e:	4b27      	ldr	r3, [pc, #156]	; (1183c <LorawanMcastProcessPkt+0xdc>)
   117a0:	390d      	subs	r1, #13
   117a2:	9302      	str	r3, [sp, #8]
   117a4:	2319      	movs	r3, #25
   117a6:	9301      	str	r3, [sp, #4]
   117a8:	9b06      	ldr	r3, [sp, #24]
   117aa:	b2c9      	uxtb	r1, r1
   117ac:	3319      	adds	r3, #25
   117ae:	33ff      	adds	r3, #255	; 0xff
   117b0:	199b      	adds	r3, r3, r6
   117b2:	9300      	str	r3, [sp, #0]
   117b4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   117b6:	4f22      	ldr	r7, [pc, #136]	; (11840 <LorawanMcastProcessPkt+0xe0>)
   117b8:	2201      	movs	r2, #1
   117ba:	3009      	adds	r0, #9
   117bc:	47b8      	blx	r7
   117be:	4921      	ldr	r1, [pc, #132]	; (11844 <LorawanMcastProcessPkt+0xe4>)
   117c0:	2708      	movs	r7, #8
   117c2:	784a      	ldrb	r2, [r1, #1]
   117c4:	780b      	ldrb	r3, [r1, #0]
   117c6:	0212      	lsls	r2, r2, #8
   117c8:	431a      	orrs	r2, r3
   117ca:	788b      	ldrb	r3, [r1, #2]
   117cc:	041b      	lsls	r3, r3, #16
   117ce:	431a      	orrs	r2, r3
   117d0:	78cb      	ldrb	r3, [r1, #3]
   117d2:	061b      	lsls	r3, r3, #24
   117d4:	4313      	orrs	r3, r2
   117d6:	d016      	beq.n	11806 <LorawanMcastProcessPkt+0xa6>
   117d8:	2220      	movs	r2, #32
   117da:	366c      	adds	r6, #108	; 0x6c
   117dc:	7833      	ldrb	r3, [r6, #0]
   117de:	9905      	ldr	r1, [sp, #20]
   117e0:	4393      	bics	r3, r2
   117e2:	7033      	strb	r3, [r6, #0]
   117e4:	78ab      	ldrb	r3, [r5, #2]
   117e6:	0022      	movs	r2, r4
   117e8:	40bb      	lsls	r3, r7
   117ea:	7868      	ldrb	r0, [r5, #1]
   117ec:	3a0c      	subs	r2, #12
   117ee:	4303      	orrs	r3, r0
   117f0:	78e8      	ldrb	r0, [r5, #3]
   117f2:	b2d2      	uxtb	r2, r2
   117f4:	0400      	lsls	r0, r0, #16
   117f6:	4303      	orrs	r3, r0
   117f8:	7928      	ldrb	r0, [r5, #4]
   117fa:	19c9      	adds	r1, r1, r7
   117fc:	0600      	lsls	r0, r0, #24
   117fe:	4318      	orrs	r0, r3
   11800:	4c11      	ldr	r4, [pc, #68]	; (11848 <LorawanMcastProcessPkt+0xe8>)
   11802:	003b      	movs	r3, r7
   11804:	47a0      	blx	r4
   11806:	4a0b      	ldr	r2, [pc, #44]	; (11834 <LorawanMcastProcessPkt+0xd4>)
   11808:	200e      	movs	r0, #14
   1180a:	0011      	movs	r1, r2
   1180c:	315c      	adds	r1, #92	; 0x5c
   1180e:	780b      	ldrb	r3, [r1, #0]
   11810:	001c      	movs	r4, r3
   11812:	4004      	ands	r4, r0
   11814:	2c06      	cmp	r4, #6
   11816:	d107      	bne.n	11828 <LorawanMcastProcessPkt+0xc8>
   11818:	32d4      	adds	r2, #212	; 0xd4
   1181a:	7812      	ldrb	r2, [r2, #0]
   1181c:	2a04      	cmp	r2, #4
   1181e:	d103      	bne.n	11828 <LorawanMcastProcessPkt+0xc8>
   11820:	4383      	bics	r3, r0
   11822:	3206      	adds	r2, #6
   11824:	4313      	orrs	r3, r2
   11826:	700b      	strb	r3, [r1, #0]
   11828:	2000      	movs	r0, #0
   1182a:	4b08      	ldr	r3, [pc, #32]	; (1184c <LorawanMcastProcessPkt+0xec>)
   1182c:	4798      	blx	r3
   1182e:	0038      	movs	r0, r7
   11830:	b009      	add	sp, #36	; 0x24
   11832:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11834:	20002fd8 	.word	0x20002fd8
   11838:	00008e61 	.word	0x00008e61
   1183c:	20002da0 	.word	0x20002da0
   11840:	0000fd75 	.word	0x0000fd75
   11844:	200032ac 	.word	0x200032ac
   11848:	00010179 	.word	0x00010179
   1184c:	000104b1 	.word	0x000104b1

00011850 <Radio_LBTScanTimeout>:
   11850:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   11852:	4c1c      	ldr	r4, [pc, #112]	; (118c4 <Radio_LBTScanTimeout+0x74>)
   11854:	0025      	movs	r5, r4
   11856:	0023      	movs	r3, r4
   11858:	354f      	adds	r5, #79	; 0x4f
   1185a:	7829      	ldrb	r1, [r5, #0]
   1185c:	3340      	adds	r3, #64	; 0x40
   1185e:	3101      	adds	r1, #1
   11860:	b2c9      	uxtb	r1, r1
   11862:	7029      	strb	r1, [r5, #0]
   11864:	781b      	ldrb	r3, [r3, #0]
   11866:	428b      	cmp	r3, r1
   11868:	d315      	bcc.n	11896 <Radio_LBTScanTimeout+0x46>
   1186a:	260e      	movs	r6, #14
   1186c:	446e      	add	r6, sp
   1186e:	4b16      	ldr	r3, [pc, #88]	; (118c8 <Radio_LBTScanTimeout+0x78>)
   11870:	0030      	movs	r0, r6
   11872:	4798      	blx	r3
   11874:	2300      	movs	r3, #0
   11876:	5ef2      	ldrsh	r2, [r6, r3]
   11878:	782b      	ldrb	r3, [r5, #0]
   1187a:	4353      	muls	r3, r2
   1187c:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1187e:	189b      	adds	r3, r3, r2
   11880:	6463      	str	r3, [r4, #68]	; 0x44
   11882:	0023      	movs	r3, r4
   11884:	2200      	movs	r2, #0
   11886:	3350      	adds	r3, #80	; 0x50
   11888:	7818      	ldrb	r0, [r3, #0]
   1188a:	9200      	str	r2, [sp, #0]
   1188c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   1188e:	4b0f      	ldr	r3, [pc, #60]	; (118cc <Radio_LBTScanTimeout+0x7c>)
   11890:	4c0f      	ldr	r4, [pc, #60]	; (118d0 <Radio_LBTScanTimeout+0x80>)
   11892:	47a0      	blx	r4
   11894:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
   11896:	2380      	movs	r3, #128	; 0x80
   11898:	4a0e      	ldr	r2, [pc, #56]	; (118d4 <Radio_LBTScanTimeout+0x84>)
   1189a:	009b      	lsls	r3, r3, #2
   1189c:	8810      	ldrh	r0, [r2, #0]
   1189e:	4303      	orrs	r3, r0
   118a0:	8013      	strh	r3, [r2, #0]
   118a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   118a4:	0058      	lsls	r0, r3, #1
   118a6:	1e4b      	subs	r3, r1, #1
   118a8:	4359      	muls	r1, r3
   118aa:	4b0b      	ldr	r3, [pc, #44]	; (118d8 <Radio_LBTScanTimeout+0x88>)
   118ac:	b289      	uxth	r1, r1
   118ae:	4798      	blx	r3
   118b0:	0023      	movs	r3, r4
   118b2:	334c      	adds	r3, #76	; 0x4c
   118b4:	8018      	strh	r0, [r3, #0]
   118b6:	2300      	movs	r3, #0
   118b8:	2001      	movs	r0, #1
   118ba:	702b      	strb	r3, [r5, #0]
   118bc:	6463      	str	r3, [r4, #68]	; 0x44
   118be:	4b07      	ldr	r3, [pc, #28]	; (118dc <Radio_LBTScanTimeout+0x8c>)
   118c0:	4798      	blx	r3
   118c2:	e7e7      	b.n	11894 <Radio_LBTScanTimeout+0x44>
   118c4:	20002cf4 	.word	0x20002cf4
   118c8:	0000cf69 	.word	0x0000cf69
   118cc:	00011851 	.word	0x00011851
   118d0:	0000c739 	.word	0x0000c739
   118d4:	20002eb0 	.word	0x20002eb0
   118d8:	00011c91 	.word	0x00011c91
   118dc:	0000ddad 	.word	0x0000ddad

000118e0 <RADIO_ScanHandler>:
   118e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   118e2:	4b12      	ldr	r3, [pc, #72]	; (1192c <RADIO_ScanHandler+0x4c>)
   118e4:	4798      	blx	r3
   118e6:	2000      	movs	r0, #0
   118e8:	4b11      	ldr	r3, [pc, #68]	; (11930 <RADIO_ScanHandler+0x50>)
   118ea:	4798      	blx	r3
   118ec:	4d11      	ldr	r5, [pc, #68]	; (11934 <RADIO_ScanHandler+0x54>)
   118ee:	4b12      	ldr	r3, [pc, #72]	; (11938 <RADIO_ScanHandler+0x58>)
   118f0:	6828      	ldr	r0, [r5, #0]
   118f2:	2400      	movs	r4, #0
   118f4:	4798      	blx	r3
   118f6:	002b      	movs	r3, r5
   118f8:	4e10      	ldr	r6, [pc, #64]	; (1193c <RADIO_ScanHandler+0x5c>)
   118fa:	334c      	adds	r3, #76	; 0x4c
   118fc:	2201      	movs	r2, #1
   118fe:	0021      	movs	r1, r4
   11900:	0020      	movs	r0, r4
   11902:	801c      	strh	r4, [r3, #0]
   11904:	47b0      	blx	r6
   11906:	4b0e      	ldr	r3, [pc, #56]	; (11940 <RADIO_ScanHandler+0x60>)
   11908:	2109      	movs	r1, #9
   1190a:	2012      	movs	r0, #18
   1190c:	4798      	blx	r3
   1190e:	3550      	adds	r5, #80	; 0x50
   11910:	0022      	movs	r2, r4
   11912:	0021      	movs	r1, r4
   11914:	2005      	movs	r0, #5
   11916:	47b0      	blx	r6
   11918:	7828      	ldrb	r0, [r5, #0]
   1191a:	4b0a      	ldr	r3, [pc, #40]	; (11944 <RADIO_ScanHandler+0x64>)
   1191c:	4d0a      	ldr	r5, [pc, #40]	; (11948 <RADIO_ScanHandler+0x68>)
   1191e:	9400      	str	r4, [sp, #0]
   11920:	0022      	movs	r2, r4
   11922:	490a      	ldr	r1, [pc, #40]	; (1194c <RADIO_ScanHandler+0x6c>)
   11924:	47a8      	blx	r5
   11926:	0020      	movs	r0, r4
   11928:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   1192a:	46c0      	nop			; (mov r8, r8)
   1192c:	0000e511 	.word	0x0000e511
   11930:	0000e061 	.word	0x0000e061
   11934:	20002cf4 	.word	0x20002cf4
   11938:	0000d7a5 	.word	0x0000d7a5
   1193c:	0000cd4d 	.word	0x0000cd4d
   11940:	0000c091 	.word	0x0000c091
   11944:	00011851 	.word	0x00011851
   11948:	0000c739 	.word	0x0000c739
   1194c:	00002328 	.word	0x00002328

00011950 <radioScanDoneHandler>:
   11950:	b530      	push	{r4, r5, lr}
   11952:	4a18      	ldr	r2, [pc, #96]	; (119b4 <radioScanDoneHandler+0x64>)
   11954:	4918      	ldr	r1, [pc, #96]	; (119b8 <radioScanDoneHandler+0x68>)
   11956:	8813      	ldrh	r3, [r2, #0]
   11958:	b085      	sub	sp, #20
   1195a:	400b      	ands	r3, r1
   1195c:	8013      	strh	r3, [r2, #0]
   1195e:	2200      	movs	r2, #0
   11960:	4b16      	ldr	r3, [pc, #88]	; (119bc <radioScanDoneHandler+0x6c>)
   11962:	0011      	movs	r1, r2
   11964:	0010      	movs	r0, r2
   11966:	4798      	blx	r3
   11968:	2000      	movs	r0, #0
   1196a:	4b15      	ldr	r3, [pc, #84]	; (119c0 <radioScanDoneHandler+0x70>)
   1196c:	4798      	blx	r3
   1196e:	4b15      	ldr	r3, [pc, #84]	; (119c4 <radioScanDoneHandler+0x74>)
   11970:	4798      	blx	r3
   11972:	4c15      	ldr	r4, [pc, #84]	; (119c8 <radioScanDoneHandler+0x78>)
   11974:	0023      	movs	r3, r4
   11976:	334c      	adds	r3, #76	; 0x4c
   11978:	2100      	movs	r1, #0
   1197a:	5e59      	ldrsh	r1, [r3, r1]
   1197c:	233e      	movs	r3, #62	; 0x3e
   1197e:	5ee2      	ldrsh	r2, [r4, r3]
   11980:	4b12      	ldr	r3, [pc, #72]	; (119cc <radioScanDoneHandler+0x7c>)
   11982:	4291      	cmp	r1, r2
   11984:	da06      	bge.n	11994 <radioScanDoneHandler+0x44>
   11986:	2002      	movs	r0, #2
   11988:	4798      	blx	r3
   1198a:	4b11      	ldr	r3, [pc, #68]	; (119d0 <radioScanDoneHandler+0x80>)
   1198c:	4798      	blx	r3
   1198e:	2000      	movs	r0, #0
   11990:	b005      	add	sp, #20
   11992:	bd30      	pop	{r4, r5, pc}
   11994:	2207      	movs	r2, #7
   11996:	ad01      	add	r5, sp, #4
   11998:	2001      	movs	r0, #1
   1199a:	702a      	strb	r2, [r5, #0]
   1199c:	4798      	blx	r3
   1199e:	4b0d      	ldr	r3, [pc, #52]	; (119d4 <radioScanDoneHandler+0x84>)
   119a0:	781b      	ldrb	r3, [r3, #0]
   119a2:	079b      	lsls	r3, r3, #30
   119a4:	d5f3      	bpl.n	1198e <radioScanDoneHandler+0x3e>
   119a6:	6923      	ldr	r3, [r4, #16]
   119a8:	2b00      	cmp	r3, #0
   119aa:	d0f0      	beq.n	1198e <radioScanDoneHandler+0x3e>
   119ac:	0029      	movs	r1, r5
   119ae:	2002      	movs	r0, #2
   119b0:	4798      	blx	r3
   119b2:	e7ec      	b.n	1198e <radioScanDoneHandler+0x3e>
   119b4:	20002eb0 	.word	0x20002eb0
   119b8:	fffffdff 	.word	0xfffffdff
   119bc:	0000cd4d 	.word	0x0000cd4d
   119c0:	0000e189 	.word	0x0000e189
   119c4:	0000e545 	.word	0x0000e545
   119c8:	20002cf4 	.word	0x20002cf4
   119cc:	0000de59 	.word	0x0000de59
   119d0:	0000e811 	.word	0x0000e811
   119d4:	20002eb2 	.word	0x20002eb2

000119d8 <common_tc_read_count>:
   119d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   119da:	4b0d      	ldr	r3, [pc, #52]	; (11a10 <common_tc_read_count+0x38>)
   119dc:	4798      	blx	r3
   119de:	4b0d      	ldr	r3, [pc, #52]	; (11a14 <common_tc_read_count+0x3c>)
   119e0:	781b      	ldrb	r3, [r3, #0]
   119e2:	2b00      	cmp	r3, #0
   119e4:	d00e      	beq.n	11a04 <common_tc_read_count+0x2c>
   119e6:	4b0c      	ldr	r3, [pc, #48]	; (11a18 <common_tc_read_count+0x40>)
   119e8:	781d      	ldrb	r5, [r3, #0]
   119ea:	4b0a      	ldr	r3, [pc, #40]	; (11a14 <common_tc_read_count+0x3c>)
   119ec:	781f      	ldrb	r7, [r3, #0]
   119ee:	4c0b      	ldr	r4, [pc, #44]	; (11a1c <common_tc_read_count+0x44>)
   119f0:	1c29      	adds	r1, r5, #0
   119f2:	47a0      	blx	r4
   119f4:	1c06      	adds	r6, r0, #0
   119f6:	480a      	ldr	r0, [pc, #40]	; (11a20 <common_tc_read_count+0x48>)
   119f8:	1c29      	adds	r1, r5, #0
   119fa:	47a0      	blx	r4
   119fc:	4378      	muls	r0, r7
   119fe:	1830      	adds	r0, r6, r0
   11a00:	b280      	uxth	r0, r0
   11a02:	e004      	b.n	11a0e <common_tc_read_count+0x36>
   11a04:	4b04      	ldr	r3, [pc, #16]	; (11a18 <common_tc_read_count+0x40>)
   11a06:	7819      	ldrb	r1, [r3, #0]
   11a08:	4b04      	ldr	r3, [pc, #16]	; (11a1c <common_tc_read_count+0x44>)
   11a0a:	4798      	blx	r3
   11a0c:	b280      	uxth	r0, r0
   11a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11a10:	0000cf9d 	.word	0x0000cf9d
   11a14:	20002080 	.word	0x20002080
   11a18:	200032b4 	.word	0x200032b4
   11a1c:	00011c91 	.word	0x00011c91
   11a20:	0000ffff 	.word	0x0000ffff

00011a24 <common_tc_compare_stop>:
   11a24:	b508      	push	{r3, lr}
   11a26:	4b05      	ldr	r3, [pc, #20]	; (11a3c <common_tc_compare_stop+0x18>)
   11a28:	4798      	blx	r3
   11a2a:	4b05      	ldr	r3, [pc, #20]	; (11a40 <common_tc_compare_stop+0x1c>)
   11a2c:	4798      	blx	r3
   11a2e:	4b05      	ldr	r3, [pc, #20]	; (11a44 <common_tc_compare_stop+0x20>)
   11a30:	2200      	movs	r2, #0
   11a32:	605a      	str	r2, [r3, #4]
   11a34:	811a      	strh	r2, [r3, #8]
   11a36:	4b04      	ldr	r3, [pc, #16]	; (11a48 <common_tc_compare_stop+0x24>)
   11a38:	4798      	blx	r3
   11a3a:	bd08      	pop	{r3, pc}
   11a3c:	0000cfb1 	.word	0x0000cfb1
   11a40:	0000d069 	.word	0x0000d069
   11a44:	20002080 	.word	0x20002080
   11a48:	0000d08d 	.word	0x0000d08d

00011a4c <common_tc_delay>:
   11a4c:	b510      	push	{r4, lr}
   11a4e:	1c04      	adds	r4, r0, #0
   11a50:	4b13      	ldr	r3, [pc, #76]	; (11aa0 <common_tc_delay+0x54>)
   11a52:	4798      	blx	r3
   11a54:	4b13      	ldr	r3, [pc, #76]	; (11aa4 <common_tc_delay+0x58>)
   11a56:	781a      	ldrb	r2, [r3, #0]
   11a58:	4362      	muls	r2, r4
   11a5a:	1881      	adds	r1, r0, r2
   11a5c:	4b12      	ldr	r3, [pc, #72]	; (11aa8 <common_tc_delay+0x5c>)
   11a5e:	6059      	str	r1, [r3, #4]
   11a60:	6859      	ldr	r1, [r3, #4]
   11a62:	0c09      	lsrs	r1, r1, #16
   11a64:	6059      	str	r1, [r3, #4]
   11a66:	685b      	ldr	r3, [r3, #4]
   11a68:	2b00      	cmp	r3, #0
   11a6a:	d007      	beq.n	11a7c <common_tc_delay+0x30>
   11a6c:	4b0e      	ldr	r3, [pc, #56]	; (11aa8 <common_tc_delay+0x5c>)
   11a6e:	6859      	ldr	r1, [r3, #4]
   11a70:	3201      	adds	r2, #1
   11a72:	1880      	adds	r0, r0, r2
   11a74:	8118      	strh	r0, [r3, #8]
   11a76:	4b0d      	ldr	r3, [pc, #52]	; (11aac <common_tc_delay+0x60>)
   11a78:	4798      	blx	r3
   11a7a:	e004      	b.n	11a86 <common_tc_delay+0x3a>
   11a7c:	1882      	adds	r2, r0, r2
   11a7e:	4b0a      	ldr	r3, [pc, #40]	; (11aa8 <common_tc_delay+0x5c>)
   11a80:	811a      	strh	r2, [r3, #8]
   11a82:	4b0b      	ldr	r3, [pc, #44]	; (11ab0 <common_tc_delay+0x64>)
   11a84:	4798      	blx	r3
   11a86:	4b08      	ldr	r3, [pc, #32]	; (11aa8 <common_tc_delay+0x5c>)
   11a88:	891b      	ldrh	r3, [r3, #8]
   11a8a:	2b63      	cmp	r3, #99	; 0x63
   11a8c:	d802      	bhi.n	11a94 <common_tc_delay+0x48>
   11a8e:	3364      	adds	r3, #100	; 0x64
   11a90:	4a05      	ldr	r2, [pc, #20]	; (11aa8 <common_tc_delay+0x5c>)
   11a92:	8113      	strh	r3, [r2, #8]
   11a94:	4b04      	ldr	r3, [pc, #16]	; (11aa8 <common_tc_delay+0x5c>)
   11a96:	8918      	ldrh	r0, [r3, #8]
   11a98:	4b06      	ldr	r3, [pc, #24]	; (11ab4 <common_tc_delay+0x68>)
   11a9a:	4798      	blx	r3
   11a9c:	bd10      	pop	{r4, pc}
   11a9e:	46c0      	nop			; (mov r8, r8)
   11aa0:	0000cf9d 	.word	0x0000cf9d
   11aa4:	200032b4 	.word	0x200032b4
   11aa8:	20002080 	.word	0x20002080
   11aac:	0000cfb1 	.word	0x0000cfb1
   11ab0:	0000cfc5 	.word	0x0000cfc5
   11ab4:	0000d051 	.word	0x0000d051

00011ab8 <common_tc_init>:
   11ab8:	b508      	push	{r3, lr}
   11aba:	2200      	movs	r2, #0
   11abc:	4b03      	ldr	r3, [pc, #12]	; (11acc <common_tc_init+0x14>)
   11abe:	701a      	strb	r2, [r3, #0]
   11ac0:	4b03      	ldr	r3, [pc, #12]	; (11ad0 <common_tc_init+0x18>)
   11ac2:	4798      	blx	r3
   11ac4:	4b03      	ldr	r3, [pc, #12]	; (11ad4 <common_tc_init+0x1c>)
   11ac6:	7018      	strb	r0, [r3, #0]
   11ac8:	bd08      	pop	{r3, pc}
   11aca:	46c0      	nop			; (mov r8, r8)
   11acc:	20002080 	.word	0x20002080
   11ad0:	0000d0a5 	.word	0x0000d0a5
   11ad4:	200032b4 	.word	0x200032b4

00011ad8 <tmr_ovf_callback>:
   11ad8:	b508      	push	{r3, lr}
   11ada:	4b0e      	ldr	r3, [pc, #56]	; (11b14 <tmr_ovf_callback+0x3c>)
   11adc:	685b      	ldr	r3, [r3, #4]
   11ade:	2b00      	cmp	r3, #0
   11ae0:	d007      	beq.n	11af2 <tmr_ovf_callback+0x1a>
   11ae2:	4a0c      	ldr	r2, [pc, #48]	; (11b14 <tmr_ovf_callback+0x3c>)
   11ae4:	6853      	ldr	r3, [r2, #4]
   11ae6:	3b01      	subs	r3, #1
   11ae8:	6053      	str	r3, [r2, #4]
   11aea:	2b00      	cmp	r3, #0
   11aec:	d101      	bne.n	11af2 <tmr_ovf_callback+0x1a>
   11aee:	4b0a      	ldr	r3, [pc, #40]	; (11b18 <tmr_ovf_callback+0x40>)
   11af0:	4798      	blx	r3
   11af2:	4a08      	ldr	r2, [pc, #32]	; (11b14 <tmr_ovf_callback+0x3c>)
   11af4:	7813      	ldrb	r3, [r2, #0]
   11af6:	3301      	adds	r3, #1
   11af8:	b2db      	uxtb	r3, r3
   11afa:	7013      	strb	r3, [r2, #0]
   11afc:	4a07      	ldr	r2, [pc, #28]	; (11b1c <tmr_ovf_callback+0x44>)
   11afe:	7812      	ldrb	r2, [r2, #0]
   11b00:	429a      	cmp	r2, r3
   11b02:	d806      	bhi.n	11b12 <tmr_ovf_callback+0x3a>
   11b04:	4b03      	ldr	r3, [pc, #12]	; (11b14 <tmr_ovf_callback+0x3c>)
   11b06:	2200      	movs	r2, #0
   11b08:	701a      	strb	r2, [r3, #0]
   11b0a:	68db      	ldr	r3, [r3, #12]
   11b0c:	2b00      	cmp	r3, #0
   11b0e:	d000      	beq.n	11b12 <tmr_ovf_callback+0x3a>
   11b10:	4798      	blx	r3
   11b12:	bd08      	pop	{r3, pc}
   11b14:	20002080 	.word	0x20002080
   11b18:	0000cfc5 	.word	0x0000cfc5
   11b1c:	200032b4 	.word	0x200032b4

00011b20 <tmr_cca_callback>:
   11b20:	b508      	push	{r3, lr}
   11b22:	4b04      	ldr	r3, [pc, #16]	; (11b34 <tmr_cca_callback+0x14>)
   11b24:	4798      	blx	r3
   11b26:	4b04      	ldr	r3, [pc, #16]	; (11b38 <tmr_cca_callback+0x18>)
   11b28:	691b      	ldr	r3, [r3, #16]
   11b2a:	2b00      	cmp	r3, #0
   11b2c:	d000      	beq.n	11b30 <tmr_cca_callback+0x10>
   11b2e:	4798      	blx	r3
   11b30:	bd08      	pop	{r3, pc}
   11b32:	46c0      	nop			; (mov r8, r8)
   11b34:	0000cfb1 	.word	0x0000cfb1
   11b38:	20002080 	.word	0x20002080

00011b3c <set_common_tc_overflow_callback>:
   11b3c:	4b01      	ldr	r3, [pc, #4]	; (11b44 <set_common_tc_overflow_callback+0x8>)
   11b3e:	60d8      	str	r0, [r3, #12]
   11b40:	4770      	bx	lr
   11b42:	46c0      	nop			; (mov r8, r8)
   11b44:	20002080 	.word	0x20002080

00011b48 <set_common_tc_expiry_callback>:
   11b48:	4b01      	ldr	r3, [pc, #4]	; (11b50 <set_common_tc_expiry_callback+0x8>)
   11b4a:	6118      	str	r0, [r3, #16]
   11b4c:	4770      	bx	lr
   11b4e:	46c0      	nop			; (mov r8, r8)
   11b50:	20002080 	.word	0x20002080

00011b54 <__gnu_thumb1_case_sqi>:
   11b54:	b402      	push	{r1}
   11b56:	4671      	mov	r1, lr
   11b58:	0849      	lsrs	r1, r1, #1
   11b5a:	0049      	lsls	r1, r1, #1
   11b5c:	5609      	ldrsb	r1, [r1, r0]
   11b5e:	0049      	lsls	r1, r1, #1
   11b60:	448e      	add	lr, r1
   11b62:	bc02      	pop	{r1}
   11b64:	4770      	bx	lr
   11b66:	46c0      	nop			; (mov r8, r8)

00011b68 <__gnu_thumb1_case_uqi>:
   11b68:	b402      	push	{r1}
   11b6a:	4671      	mov	r1, lr
   11b6c:	0849      	lsrs	r1, r1, #1
   11b6e:	0049      	lsls	r1, r1, #1
   11b70:	5c09      	ldrb	r1, [r1, r0]
   11b72:	0049      	lsls	r1, r1, #1
   11b74:	448e      	add	lr, r1
   11b76:	bc02      	pop	{r1}
   11b78:	4770      	bx	lr
   11b7a:	46c0      	nop			; (mov r8, r8)

00011b7c <__udivsi3>:
   11b7c:	2200      	movs	r2, #0
   11b7e:	0843      	lsrs	r3, r0, #1
   11b80:	428b      	cmp	r3, r1
   11b82:	d374      	bcc.n	11c6e <__udivsi3+0xf2>
   11b84:	0903      	lsrs	r3, r0, #4
   11b86:	428b      	cmp	r3, r1
   11b88:	d35f      	bcc.n	11c4a <__udivsi3+0xce>
   11b8a:	0a03      	lsrs	r3, r0, #8
   11b8c:	428b      	cmp	r3, r1
   11b8e:	d344      	bcc.n	11c1a <__udivsi3+0x9e>
   11b90:	0b03      	lsrs	r3, r0, #12
   11b92:	428b      	cmp	r3, r1
   11b94:	d328      	bcc.n	11be8 <__udivsi3+0x6c>
   11b96:	0c03      	lsrs	r3, r0, #16
   11b98:	428b      	cmp	r3, r1
   11b9a:	d30d      	bcc.n	11bb8 <__udivsi3+0x3c>
   11b9c:	22ff      	movs	r2, #255	; 0xff
   11b9e:	0209      	lsls	r1, r1, #8
   11ba0:	ba12      	rev	r2, r2
   11ba2:	0c03      	lsrs	r3, r0, #16
   11ba4:	428b      	cmp	r3, r1
   11ba6:	d302      	bcc.n	11bae <__udivsi3+0x32>
   11ba8:	1212      	asrs	r2, r2, #8
   11baa:	0209      	lsls	r1, r1, #8
   11bac:	d065      	beq.n	11c7a <__udivsi3+0xfe>
   11bae:	0b03      	lsrs	r3, r0, #12
   11bb0:	428b      	cmp	r3, r1
   11bb2:	d319      	bcc.n	11be8 <__udivsi3+0x6c>
   11bb4:	e000      	b.n	11bb8 <__udivsi3+0x3c>
   11bb6:	0a09      	lsrs	r1, r1, #8
   11bb8:	0bc3      	lsrs	r3, r0, #15
   11bba:	428b      	cmp	r3, r1
   11bbc:	d301      	bcc.n	11bc2 <__udivsi3+0x46>
   11bbe:	03cb      	lsls	r3, r1, #15
   11bc0:	1ac0      	subs	r0, r0, r3
   11bc2:	4152      	adcs	r2, r2
   11bc4:	0b83      	lsrs	r3, r0, #14
   11bc6:	428b      	cmp	r3, r1
   11bc8:	d301      	bcc.n	11bce <__udivsi3+0x52>
   11bca:	038b      	lsls	r3, r1, #14
   11bcc:	1ac0      	subs	r0, r0, r3
   11bce:	4152      	adcs	r2, r2
   11bd0:	0b43      	lsrs	r3, r0, #13
   11bd2:	428b      	cmp	r3, r1
   11bd4:	d301      	bcc.n	11bda <__udivsi3+0x5e>
   11bd6:	034b      	lsls	r3, r1, #13
   11bd8:	1ac0      	subs	r0, r0, r3
   11bda:	4152      	adcs	r2, r2
   11bdc:	0b03      	lsrs	r3, r0, #12
   11bde:	428b      	cmp	r3, r1
   11be0:	d301      	bcc.n	11be6 <__udivsi3+0x6a>
   11be2:	030b      	lsls	r3, r1, #12
   11be4:	1ac0      	subs	r0, r0, r3
   11be6:	4152      	adcs	r2, r2
   11be8:	0ac3      	lsrs	r3, r0, #11
   11bea:	428b      	cmp	r3, r1
   11bec:	d301      	bcc.n	11bf2 <__udivsi3+0x76>
   11bee:	02cb      	lsls	r3, r1, #11
   11bf0:	1ac0      	subs	r0, r0, r3
   11bf2:	4152      	adcs	r2, r2
   11bf4:	0a83      	lsrs	r3, r0, #10
   11bf6:	428b      	cmp	r3, r1
   11bf8:	d301      	bcc.n	11bfe <__udivsi3+0x82>
   11bfa:	028b      	lsls	r3, r1, #10
   11bfc:	1ac0      	subs	r0, r0, r3
   11bfe:	4152      	adcs	r2, r2
   11c00:	0a43      	lsrs	r3, r0, #9
   11c02:	428b      	cmp	r3, r1
   11c04:	d301      	bcc.n	11c0a <__udivsi3+0x8e>
   11c06:	024b      	lsls	r3, r1, #9
   11c08:	1ac0      	subs	r0, r0, r3
   11c0a:	4152      	adcs	r2, r2
   11c0c:	0a03      	lsrs	r3, r0, #8
   11c0e:	428b      	cmp	r3, r1
   11c10:	d301      	bcc.n	11c16 <__udivsi3+0x9a>
   11c12:	020b      	lsls	r3, r1, #8
   11c14:	1ac0      	subs	r0, r0, r3
   11c16:	4152      	adcs	r2, r2
   11c18:	d2cd      	bcs.n	11bb6 <__udivsi3+0x3a>
   11c1a:	09c3      	lsrs	r3, r0, #7
   11c1c:	428b      	cmp	r3, r1
   11c1e:	d301      	bcc.n	11c24 <__udivsi3+0xa8>
   11c20:	01cb      	lsls	r3, r1, #7
   11c22:	1ac0      	subs	r0, r0, r3
   11c24:	4152      	adcs	r2, r2
   11c26:	0983      	lsrs	r3, r0, #6
   11c28:	428b      	cmp	r3, r1
   11c2a:	d301      	bcc.n	11c30 <__udivsi3+0xb4>
   11c2c:	018b      	lsls	r3, r1, #6
   11c2e:	1ac0      	subs	r0, r0, r3
   11c30:	4152      	adcs	r2, r2
   11c32:	0943      	lsrs	r3, r0, #5
   11c34:	428b      	cmp	r3, r1
   11c36:	d301      	bcc.n	11c3c <__udivsi3+0xc0>
   11c38:	014b      	lsls	r3, r1, #5
   11c3a:	1ac0      	subs	r0, r0, r3
   11c3c:	4152      	adcs	r2, r2
   11c3e:	0903      	lsrs	r3, r0, #4
   11c40:	428b      	cmp	r3, r1
   11c42:	d301      	bcc.n	11c48 <__udivsi3+0xcc>
   11c44:	010b      	lsls	r3, r1, #4
   11c46:	1ac0      	subs	r0, r0, r3
   11c48:	4152      	adcs	r2, r2
   11c4a:	08c3      	lsrs	r3, r0, #3
   11c4c:	428b      	cmp	r3, r1
   11c4e:	d301      	bcc.n	11c54 <__udivsi3+0xd8>
   11c50:	00cb      	lsls	r3, r1, #3
   11c52:	1ac0      	subs	r0, r0, r3
   11c54:	4152      	adcs	r2, r2
   11c56:	0883      	lsrs	r3, r0, #2
   11c58:	428b      	cmp	r3, r1
   11c5a:	d301      	bcc.n	11c60 <__udivsi3+0xe4>
   11c5c:	008b      	lsls	r3, r1, #2
   11c5e:	1ac0      	subs	r0, r0, r3
   11c60:	4152      	adcs	r2, r2
   11c62:	0843      	lsrs	r3, r0, #1
   11c64:	428b      	cmp	r3, r1
   11c66:	d301      	bcc.n	11c6c <__udivsi3+0xf0>
   11c68:	004b      	lsls	r3, r1, #1
   11c6a:	1ac0      	subs	r0, r0, r3
   11c6c:	4152      	adcs	r2, r2
   11c6e:	1a41      	subs	r1, r0, r1
   11c70:	d200      	bcs.n	11c74 <__udivsi3+0xf8>
   11c72:	4601      	mov	r1, r0
   11c74:	4152      	adcs	r2, r2
   11c76:	4610      	mov	r0, r2
   11c78:	4770      	bx	lr
   11c7a:	e7ff      	b.n	11c7c <__udivsi3+0x100>
   11c7c:	b501      	push	{r0, lr}
   11c7e:	2000      	movs	r0, #0
   11c80:	f000 f8f0 	bl	11e64 <__aeabi_idiv0>
   11c84:	bd02      	pop	{r1, pc}
   11c86:	46c0      	nop			; (mov r8, r8)

00011c88 <__aeabi_uidivmod>:
   11c88:	2900      	cmp	r1, #0
   11c8a:	d0f7      	beq.n	11c7c <__udivsi3+0x100>
   11c8c:	e776      	b.n	11b7c <__udivsi3>
   11c8e:	4770      	bx	lr

00011c90 <__divsi3>:
   11c90:	4603      	mov	r3, r0
   11c92:	430b      	orrs	r3, r1
   11c94:	d47f      	bmi.n	11d96 <__divsi3+0x106>
   11c96:	2200      	movs	r2, #0
   11c98:	0843      	lsrs	r3, r0, #1
   11c9a:	428b      	cmp	r3, r1
   11c9c:	d374      	bcc.n	11d88 <__divsi3+0xf8>
   11c9e:	0903      	lsrs	r3, r0, #4
   11ca0:	428b      	cmp	r3, r1
   11ca2:	d35f      	bcc.n	11d64 <__divsi3+0xd4>
   11ca4:	0a03      	lsrs	r3, r0, #8
   11ca6:	428b      	cmp	r3, r1
   11ca8:	d344      	bcc.n	11d34 <__divsi3+0xa4>
   11caa:	0b03      	lsrs	r3, r0, #12
   11cac:	428b      	cmp	r3, r1
   11cae:	d328      	bcc.n	11d02 <__divsi3+0x72>
   11cb0:	0c03      	lsrs	r3, r0, #16
   11cb2:	428b      	cmp	r3, r1
   11cb4:	d30d      	bcc.n	11cd2 <__divsi3+0x42>
   11cb6:	22ff      	movs	r2, #255	; 0xff
   11cb8:	0209      	lsls	r1, r1, #8
   11cba:	ba12      	rev	r2, r2
   11cbc:	0c03      	lsrs	r3, r0, #16
   11cbe:	428b      	cmp	r3, r1
   11cc0:	d302      	bcc.n	11cc8 <__divsi3+0x38>
   11cc2:	1212      	asrs	r2, r2, #8
   11cc4:	0209      	lsls	r1, r1, #8
   11cc6:	d065      	beq.n	11d94 <__divsi3+0x104>
   11cc8:	0b03      	lsrs	r3, r0, #12
   11cca:	428b      	cmp	r3, r1
   11ccc:	d319      	bcc.n	11d02 <__divsi3+0x72>
   11cce:	e000      	b.n	11cd2 <__divsi3+0x42>
   11cd0:	0a09      	lsrs	r1, r1, #8
   11cd2:	0bc3      	lsrs	r3, r0, #15
   11cd4:	428b      	cmp	r3, r1
   11cd6:	d301      	bcc.n	11cdc <__divsi3+0x4c>
   11cd8:	03cb      	lsls	r3, r1, #15
   11cda:	1ac0      	subs	r0, r0, r3
   11cdc:	4152      	adcs	r2, r2
   11cde:	0b83      	lsrs	r3, r0, #14
   11ce0:	428b      	cmp	r3, r1
   11ce2:	d301      	bcc.n	11ce8 <__divsi3+0x58>
   11ce4:	038b      	lsls	r3, r1, #14
   11ce6:	1ac0      	subs	r0, r0, r3
   11ce8:	4152      	adcs	r2, r2
   11cea:	0b43      	lsrs	r3, r0, #13
   11cec:	428b      	cmp	r3, r1
   11cee:	d301      	bcc.n	11cf4 <__divsi3+0x64>
   11cf0:	034b      	lsls	r3, r1, #13
   11cf2:	1ac0      	subs	r0, r0, r3
   11cf4:	4152      	adcs	r2, r2
   11cf6:	0b03      	lsrs	r3, r0, #12
   11cf8:	428b      	cmp	r3, r1
   11cfa:	d301      	bcc.n	11d00 <__divsi3+0x70>
   11cfc:	030b      	lsls	r3, r1, #12
   11cfe:	1ac0      	subs	r0, r0, r3
   11d00:	4152      	adcs	r2, r2
   11d02:	0ac3      	lsrs	r3, r0, #11
   11d04:	428b      	cmp	r3, r1
   11d06:	d301      	bcc.n	11d0c <__divsi3+0x7c>
   11d08:	02cb      	lsls	r3, r1, #11
   11d0a:	1ac0      	subs	r0, r0, r3
   11d0c:	4152      	adcs	r2, r2
   11d0e:	0a83      	lsrs	r3, r0, #10
   11d10:	428b      	cmp	r3, r1
   11d12:	d301      	bcc.n	11d18 <__divsi3+0x88>
   11d14:	028b      	lsls	r3, r1, #10
   11d16:	1ac0      	subs	r0, r0, r3
   11d18:	4152      	adcs	r2, r2
   11d1a:	0a43      	lsrs	r3, r0, #9
   11d1c:	428b      	cmp	r3, r1
   11d1e:	d301      	bcc.n	11d24 <__divsi3+0x94>
   11d20:	024b      	lsls	r3, r1, #9
   11d22:	1ac0      	subs	r0, r0, r3
   11d24:	4152      	adcs	r2, r2
   11d26:	0a03      	lsrs	r3, r0, #8
   11d28:	428b      	cmp	r3, r1
   11d2a:	d301      	bcc.n	11d30 <__divsi3+0xa0>
   11d2c:	020b      	lsls	r3, r1, #8
   11d2e:	1ac0      	subs	r0, r0, r3
   11d30:	4152      	adcs	r2, r2
   11d32:	d2cd      	bcs.n	11cd0 <__divsi3+0x40>
   11d34:	09c3      	lsrs	r3, r0, #7
   11d36:	428b      	cmp	r3, r1
   11d38:	d301      	bcc.n	11d3e <__divsi3+0xae>
   11d3a:	01cb      	lsls	r3, r1, #7
   11d3c:	1ac0      	subs	r0, r0, r3
   11d3e:	4152      	adcs	r2, r2
   11d40:	0983      	lsrs	r3, r0, #6
   11d42:	428b      	cmp	r3, r1
   11d44:	d301      	bcc.n	11d4a <__divsi3+0xba>
   11d46:	018b      	lsls	r3, r1, #6
   11d48:	1ac0      	subs	r0, r0, r3
   11d4a:	4152      	adcs	r2, r2
   11d4c:	0943      	lsrs	r3, r0, #5
   11d4e:	428b      	cmp	r3, r1
   11d50:	d301      	bcc.n	11d56 <__divsi3+0xc6>
   11d52:	014b      	lsls	r3, r1, #5
   11d54:	1ac0      	subs	r0, r0, r3
   11d56:	4152      	adcs	r2, r2
   11d58:	0903      	lsrs	r3, r0, #4
   11d5a:	428b      	cmp	r3, r1
   11d5c:	d301      	bcc.n	11d62 <__divsi3+0xd2>
   11d5e:	010b      	lsls	r3, r1, #4
   11d60:	1ac0      	subs	r0, r0, r3
   11d62:	4152      	adcs	r2, r2
   11d64:	08c3      	lsrs	r3, r0, #3
   11d66:	428b      	cmp	r3, r1
   11d68:	d301      	bcc.n	11d6e <__divsi3+0xde>
   11d6a:	00cb      	lsls	r3, r1, #3
   11d6c:	1ac0      	subs	r0, r0, r3
   11d6e:	4152      	adcs	r2, r2
   11d70:	0883      	lsrs	r3, r0, #2
   11d72:	428b      	cmp	r3, r1
   11d74:	d301      	bcc.n	11d7a <__divsi3+0xea>
   11d76:	008b      	lsls	r3, r1, #2
   11d78:	1ac0      	subs	r0, r0, r3
   11d7a:	4152      	adcs	r2, r2
   11d7c:	0843      	lsrs	r3, r0, #1
   11d7e:	428b      	cmp	r3, r1
   11d80:	d301      	bcc.n	11d86 <__divsi3+0xf6>
   11d82:	004b      	lsls	r3, r1, #1
   11d84:	1ac0      	subs	r0, r0, r3
   11d86:	4152      	adcs	r2, r2
   11d88:	1a41      	subs	r1, r0, r1
   11d8a:	d200      	bcs.n	11d8e <__divsi3+0xfe>
   11d8c:	4601      	mov	r1, r0
   11d8e:	4152      	adcs	r2, r2
   11d90:	4610      	mov	r0, r2
   11d92:	4770      	bx	lr
   11d94:	e05d      	b.n	11e52 <__divsi3+0x1c2>
   11d96:	0fca      	lsrs	r2, r1, #31
   11d98:	d000      	beq.n	11d9c <__divsi3+0x10c>
   11d9a:	4249      	negs	r1, r1
   11d9c:	1003      	asrs	r3, r0, #32
   11d9e:	d300      	bcc.n	11da2 <__divsi3+0x112>
   11da0:	4240      	negs	r0, r0
   11da2:	4053      	eors	r3, r2
   11da4:	2200      	movs	r2, #0
   11da6:	469c      	mov	ip, r3
   11da8:	0903      	lsrs	r3, r0, #4
   11daa:	428b      	cmp	r3, r1
   11dac:	d32d      	bcc.n	11e0a <__divsi3+0x17a>
   11dae:	0a03      	lsrs	r3, r0, #8
   11db0:	428b      	cmp	r3, r1
   11db2:	d312      	bcc.n	11dda <__divsi3+0x14a>
   11db4:	22fc      	movs	r2, #252	; 0xfc
   11db6:	0189      	lsls	r1, r1, #6
   11db8:	ba12      	rev	r2, r2
   11dba:	0a03      	lsrs	r3, r0, #8
   11dbc:	428b      	cmp	r3, r1
   11dbe:	d30c      	bcc.n	11dda <__divsi3+0x14a>
   11dc0:	0189      	lsls	r1, r1, #6
   11dc2:	1192      	asrs	r2, r2, #6
   11dc4:	428b      	cmp	r3, r1
   11dc6:	d308      	bcc.n	11dda <__divsi3+0x14a>
   11dc8:	0189      	lsls	r1, r1, #6
   11dca:	1192      	asrs	r2, r2, #6
   11dcc:	428b      	cmp	r3, r1
   11dce:	d304      	bcc.n	11dda <__divsi3+0x14a>
   11dd0:	0189      	lsls	r1, r1, #6
   11dd2:	d03a      	beq.n	11e4a <__divsi3+0x1ba>
   11dd4:	1192      	asrs	r2, r2, #6
   11dd6:	e000      	b.n	11dda <__divsi3+0x14a>
   11dd8:	0989      	lsrs	r1, r1, #6
   11dda:	09c3      	lsrs	r3, r0, #7
   11ddc:	428b      	cmp	r3, r1
   11dde:	d301      	bcc.n	11de4 <__divsi3+0x154>
   11de0:	01cb      	lsls	r3, r1, #7
   11de2:	1ac0      	subs	r0, r0, r3
   11de4:	4152      	adcs	r2, r2
   11de6:	0983      	lsrs	r3, r0, #6
   11de8:	428b      	cmp	r3, r1
   11dea:	d301      	bcc.n	11df0 <__divsi3+0x160>
   11dec:	018b      	lsls	r3, r1, #6
   11dee:	1ac0      	subs	r0, r0, r3
   11df0:	4152      	adcs	r2, r2
   11df2:	0943      	lsrs	r3, r0, #5
   11df4:	428b      	cmp	r3, r1
   11df6:	d301      	bcc.n	11dfc <__divsi3+0x16c>
   11df8:	014b      	lsls	r3, r1, #5
   11dfa:	1ac0      	subs	r0, r0, r3
   11dfc:	4152      	adcs	r2, r2
   11dfe:	0903      	lsrs	r3, r0, #4
   11e00:	428b      	cmp	r3, r1
   11e02:	d301      	bcc.n	11e08 <__divsi3+0x178>
   11e04:	010b      	lsls	r3, r1, #4
   11e06:	1ac0      	subs	r0, r0, r3
   11e08:	4152      	adcs	r2, r2
   11e0a:	08c3      	lsrs	r3, r0, #3
   11e0c:	428b      	cmp	r3, r1
   11e0e:	d301      	bcc.n	11e14 <__divsi3+0x184>
   11e10:	00cb      	lsls	r3, r1, #3
   11e12:	1ac0      	subs	r0, r0, r3
   11e14:	4152      	adcs	r2, r2
   11e16:	0883      	lsrs	r3, r0, #2
   11e18:	428b      	cmp	r3, r1
   11e1a:	d301      	bcc.n	11e20 <__divsi3+0x190>
   11e1c:	008b      	lsls	r3, r1, #2
   11e1e:	1ac0      	subs	r0, r0, r3
   11e20:	4152      	adcs	r2, r2
   11e22:	d2d9      	bcs.n	11dd8 <__divsi3+0x148>
   11e24:	0843      	lsrs	r3, r0, #1
   11e26:	428b      	cmp	r3, r1
   11e28:	d301      	bcc.n	11e2e <__divsi3+0x19e>
   11e2a:	004b      	lsls	r3, r1, #1
   11e2c:	1ac0      	subs	r0, r0, r3
   11e2e:	4152      	adcs	r2, r2
   11e30:	1a41      	subs	r1, r0, r1
   11e32:	d200      	bcs.n	11e36 <__divsi3+0x1a6>
   11e34:	4601      	mov	r1, r0
   11e36:	4663      	mov	r3, ip
   11e38:	4152      	adcs	r2, r2
   11e3a:	105b      	asrs	r3, r3, #1
   11e3c:	4610      	mov	r0, r2
   11e3e:	d301      	bcc.n	11e44 <__divsi3+0x1b4>
   11e40:	4240      	negs	r0, r0
   11e42:	2b00      	cmp	r3, #0
   11e44:	d500      	bpl.n	11e48 <__divsi3+0x1b8>
   11e46:	4249      	negs	r1, r1
   11e48:	4770      	bx	lr
   11e4a:	4663      	mov	r3, ip
   11e4c:	105b      	asrs	r3, r3, #1
   11e4e:	d300      	bcc.n	11e52 <__divsi3+0x1c2>
   11e50:	4240      	negs	r0, r0
   11e52:	b501      	push	{r0, lr}
   11e54:	2000      	movs	r0, #0
   11e56:	f000 f805 	bl	11e64 <__aeabi_idiv0>
   11e5a:	bd02      	pop	{r1, pc}

00011e5c <__aeabi_idivmod>:
   11e5c:	2900      	cmp	r1, #0
   11e5e:	d0f8      	beq.n	11e52 <__divsi3+0x1c2>
   11e60:	e716      	b.n	11c90 <__divsi3>
   11e62:	4770      	bx	lr

00011e64 <__aeabi_idiv0>:
   11e64:	4770      	bx	lr
   11e66:	46c0      	nop			; (mov r8, r8)

00011e68 <__aeabi_cfrcmple>:
   11e68:	4684      	mov	ip, r0
   11e6a:	1c08      	adds	r0, r1, #0
   11e6c:	4661      	mov	r1, ip
   11e6e:	e7ff      	b.n	11e70 <__aeabi_cfcmpeq>

00011e70 <__aeabi_cfcmpeq>:
   11e70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   11e72:	f000 fcd3 	bl	1281c <__lesf2>
   11e76:	2800      	cmp	r0, #0
   11e78:	d401      	bmi.n	11e7e <__aeabi_cfcmpeq+0xe>
   11e7a:	2100      	movs	r1, #0
   11e7c:	42c8      	cmn	r0, r1
   11e7e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00011e80 <__aeabi_fcmpeq>:
   11e80:	b510      	push	{r4, lr}
   11e82:	f000 fc65 	bl	12750 <__eqsf2>
   11e86:	4240      	negs	r0, r0
   11e88:	3001      	adds	r0, #1
   11e8a:	bd10      	pop	{r4, pc}

00011e8c <__aeabi_fcmplt>:
   11e8c:	b510      	push	{r4, lr}
   11e8e:	f000 fcc5 	bl	1281c <__lesf2>
   11e92:	2800      	cmp	r0, #0
   11e94:	db01      	blt.n	11e9a <__aeabi_fcmplt+0xe>
   11e96:	2000      	movs	r0, #0
   11e98:	bd10      	pop	{r4, pc}
   11e9a:	2001      	movs	r0, #1
   11e9c:	bd10      	pop	{r4, pc}
   11e9e:	46c0      	nop			; (mov r8, r8)

00011ea0 <__aeabi_fcmple>:
   11ea0:	b510      	push	{r4, lr}
   11ea2:	f000 fcbb 	bl	1281c <__lesf2>
   11ea6:	2800      	cmp	r0, #0
   11ea8:	dd01      	ble.n	11eae <__aeabi_fcmple+0xe>
   11eaa:	2000      	movs	r0, #0
   11eac:	bd10      	pop	{r4, pc}
   11eae:	2001      	movs	r0, #1
   11eb0:	bd10      	pop	{r4, pc}
   11eb2:	46c0      	nop			; (mov r8, r8)

00011eb4 <__aeabi_fcmpgt>:
   11eb4:	b510      	push	{r4, lr}
   11eb6:	f000 fc71 	bl	1279c <__gesf2>
   11eba:	2800      	cmp	r0, #0
   11ebc:	dc01      	bgt.n	11ec2 <__aeabi_fcmpgt+0xe>
   11ebe:	2000      	movs	r0, #0
   11ec0:	bd10      	pop	{r4, pc}
   11ec2:	2001      	movs	r0, #1
   11ec4:	bd10      	pop	{r4, pc}
   11ec6:	46c0      	nop			; (mov r8, r8)

00011ec8 <__aeabi_fcmpge>:
   11ec8:	b510      	push	{r4, lr}
   11eca:	f000 fc67 	bl	1279c <__gesf2>
   11ece:	2800      	cmp	r0, #0
   11ed0:	da01      	bge.n	11ed6 <__aeabi_fcmpge+0xe>
   11ed2:	2000      	movs	r0, #0
   11ed4:	bd10      	pop	{r4, pc}
   11ed6:	2001      	movs	r0, #1
   11ed8:	bd10      	pop	{r4, pc}
   11eda:	46c0      	nop			; (mov r8, r8)

00011edc <__aeabi_uldivmod>:
   11edc:	2b00      	cmp	r3, #0
   11ede:	d111      	bne.n	11f04 <__aeabi_uldivmod+0x28>
   11ee0:	2a00      	cmp	r2, #0
   11ee2:	d10f      	bne.n	11f04 <__aeabi_uldivmod+0x28>
   11ee4:	2900      	cmp	r1, #0
   11ee6:	d100      	bne.n	11eea <__aeabi_uldivmod+0xe>
   11ee8:	2800      	cmp	r0, #0
   11eea:	d002      	beq.n	11ef2 <__aeabi_uldivmod+0x16>
   11eec:	2100      	movs	r1, #0
   11eee:	43c9      	mvns	r1, r1
   11ef0:	1c08      	adds	r0, r1, #0
   11ef2:	b407      	push	{r0, r1, r2}
   11ef4:	4802      	ldr	r0, [pc, #8]	; (11f00 <__aeabi_uldivmod+0x24>)
   11ef6:	a102      	add	r1, pc, #8	; (adr r1, 11f00 <__aeabi_uldivmod+0x24>)
   11ef8:	1840      	adds	r0, r0, r1
   11efa:	9002      	str	r0, [sp, #8]
   11efc:	bd03      	pop	{r0, r1, pc}
   11efe:	46c0      	nop			; (mov r8, r8)
   11f00:	ffffff65 	.word	0xffffff65
   11f04:	b403      	push	{r0, r1}
   11f06:	4668      	mov	r0, sp
   11f08:	b501      	push	{r0, lr}
   11f0a:	9802      	ldr	r0, [sp, #8]
   11f0c:	f000 f886 	bl	1201c <__udivmoddi4>
   11f10:	9b01      	ldr	r3, [sp, #4]
   11f12:	469e      	mov	lr, r3
   11f14:	b002      	add	sp, #8
   11f16:	bc0c      	pop	{r2, r3}
   11f18:	4770      	bx	lr
   11f1a:	46c0      	nop			; (mov r8, r8)

00011f1c <__aeabi_lmul>:
   11f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   11f1e:	46ce      	mov	lr, r9
   11f20:	4647      	mov	r7, r8
   11f22:	0415      	lsls	r5, r2, #16
   11f24:	0c2d      	lsrs	r5, r5, #16
   11f26:	002e      	movs	r6, r5
   11f28:	b580      	push	{r7, lr}
   11f2a:	0407      	lsls	r7, r0, #16
   11f2c:	0c14      	lsrs	r4, r2, #16
   11f2e:	0c3f      	lsrs	r7, r7, #16
   11f30:	4699      	mov	r9, r3
   11f32:	0c03      	lsrs	r3, r0, #16
   11f34:	437e      	muls	r6, r7
   11f36:	435d      	muls	r5, r3
   11f38:	4367      	muls	r7, r4
   11f3a:	4363      	muls	r3, r4
   11f3c:	197f      	adds	r7, r7, r5
   11f3e:	0c34      	lsrs	r4, r6, #16
   11f40:	19e4      	adds	r4, r4, r7
   11f42:	469c      	mov	ip, r3
   11f44:	42a5      	cmp	r5, r4
   11f46:	d903      	bls.n	11f50 <__aeabi_lmul+0x34>
   11f48:	2380      	movs	r3, #128	; 0x80
   11f4a:	025b      	lsls	r3, r3, #9
   11f4c:	4698      	mov	r8, r3
   11f4e:	44c4      	add	ip, r8
   11f50:	464b      	mov	r3, r9
   11f52:	4351      	muls	r1, r2
   11f54:	4343      	muls	r3, r0
   11f56:	0436      	lsls	r6, r6, #16
   11f58:	0c36      	lsrs	r6, r6, #16
   11f5a:	0c25      	lsrs	r5, r4, #16
   11f5c:	0424      	lsls	r4, r4, #16
   11f5e:	4465      	add	r5, ip
   11f60:	19a4      	adds	r4, r4, r6
   11f62:	1859      	adds	r1, r3, r1
   11f64:	1949      	adds	r1, r1, r5
   11f66:	0020      	movs	r0, r4
   11f68:	bc0c      	pop	{r2, r3}
   11f6a:	4690      	mov	r8, r2
   11f6c:	4699      	mov	r9, r3
   11f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011f70 <__aeabi_f2uiz>:
   11f70:	219e      	movs	r1, #158	; 0x9e
   11f72:	b510      	push	{r4, lr}
   11f74:	05c9      	lsls	r1, r1, #23
   11f76:	1c04      	adds	r4, r0, #0
   11f78:	f7ff ffa6 	bl	11ec8 <__aeabi_fcmpge>
   11f7c:	2800      	cmp	r0, #0
   11f7e:	d103      	bne.n	11f88 <__aeabi_f2uiz+0x18>
   11f80:	1c20      	adds	r0, r4, #0
   11f82:	f000 ff49 	bl	12e18 <__aeabi_f2iz>
   11f86:	bd10      	pop	{r4, pc}
   11f88:	219e      	movs	r1, #158	; 0x9e
   11f8a:	1c20      	adds	r0, r4, #0
   11f8c:	05c9      	lsls	r1, r1, #23
   11f8e:	f000 fda7 	bl	12ae0 <__aeabi_fsub>
   11f92:	f000 ff41 	bl	12e18 <__aeabi_f2iz>
   11f96:	2380      	movs	r3, #128	; 0x80
   11f98:	061b      	lsls	r3, r3, #24
   11f9a:	469c      	mov	ip, r3
   11f9c:	4460      	add	r0, ip
   11f9e:	e7f2      	b.n	11f86 <__aeabi_f2uiz+0x16>

00011fa0 <__aeabi_d2uiz>:
   11fa0:	b570      	push	{r4, r5, r6, lr}
   11fa2:	2200      	movs	r2, #0
   11fa4:	4b0c      	ldr	r3, [pc, #48]	; (11fd8 <__aeabi_d2uiz+0x38>)
   11fa6:	0004      	movs	r4, r0
   11fa8:	000d      	movs	r5, r1
   11faa:	f002 fd83 	bl	14ab4 <__aeabi_dcmpge>
   11fae:	2800      	cmp	r0, #0
   11fb0:	d104      	bne.n	11fbc <__aeabi_d2uiz+0x1c>
   11fb2:	0020      	movs	r0, r4
   11fb4:	0029      	movs	r1, r5
   11fb6:	f002 fbbf 	bl	14738 <__aeabi_d2iz>
   11fba:	bd70      	pop	{r4, r5, r6, pc}
   11fbc:	4b06      	ldr	r3, [pc, #24]	; (11fd8 <__aeabi_d2uiz+0x38>)
   11fbe:	2200      	movs	r2, #0
   11fc0:	0020      	movs	r0, r4
   11fc2:	0029      	movs	r1, r5
   11fc4:	f002 f8a2 	bl	1410c <__aeabi_dsub>
   11fc8:	f002 fbb6 	bl	14738 <__aeabi_d2iz>
   11fcc:	2380      	movs	r3, #128	; 0x80
   11fce:	061b      	lsls	r3, r3, #24
   11fd0:	469c      	mov	ip, r3
   11fd2:	4460      	add	r0, ip
   11fd4:	e7f1      	b.n	11fba <__aeabi_d2uiz+0x1a>
   11fd6:	46c0      	nop			; (mov r8, r8)
   11fd8:	41e00000 	.word	0x41e00000

00011fdc <__aeabi_f2ulz>:
   11fdc:	b570      	push	{r4, r5, r6, lr}
   11fde:	f002 fc59 	bl	14894 <__aeabi_f2d>
   11fe2:	2200      	movs	r2, #0
   11fe4:	4b0b      	ldr	r3, [pc, #44]	; (12014 <__aeabi_f2ulz+0x38>)
   11fe6:	000d      	movs	r5, r1
   11fe8:	0004      	movs	r4, r0
   11fea:	f001 fe0f 	bl	13c0c <__aeabi_dmul>
   11fee:	f7ff ffd7 	bl	11fa0 <__aeabi_d2uiz>
   11ff2:	0006      	movs	r6, r0
   11ff4:	f002 fc16 	bl	14824 <__aeabi_ui2d>
   11ff8:	2200      	movs	r2, #0
   11ffa:	4b07      	ldr	r3, [pc, #28]	; (12018 <__aeabi_f2ulz+0x3c>)
   11ffc:	f001 fe06 	bl	13c0c <__aeabi_dmul>
   12000:	0002      	movs	r2, r0
   12002:	000b      	movs	r3, r1
   12004:	0020      	movs	r0, r4
   12006:	0029      	movs	r1, r5
   12008:	f002 f880 	bl	1410c <__aeabi_dsub>
   1200c:	f7ff ffc8 	bl	11fa0 <__aeabi_d2uiz>
   12010:	0031      	movs	r1, r6
   12012:	bd70      	pop	{r4, r5, r6, pc}
   12014:	3df00000 	.word	0x3df00000
   12018:	41f00000 	.word	0x41f00000

0001201c <__udivmoddi4>:
   1201c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1201e:	4657      	mov	r7, sl
   12020:	464e      	mov	r6, r9
   12022:	4645      	mov	r5, r8
   12024:	46de      	mov	lr, fp
   12026:	b5e0      	push	{r5, r6, r7, lr}
   12028:	0004      	movs	r4, r0
   1202a:	b083      	sub	sp, #12
   1202c:	000d      	movs	r5, r1
   1202e:	4692      	mov	sl, r2
   12030:	4699      	mov	r9, r3
   12032:	428b      	cmp	r3, r1
   12034:	d82f      	bhi.n	12096 <__udivmoddi4+0x7a>
   12036:	d02c      	beq.n	12092 <__udivmoddi4+0x76>
   12038:	4649      	mov	r1, r9
   1203a:	4650      	mov	r0, sl
   1203c:	f002 fd62 	bl	14b04 <__clzdi2>
   12040:	0029      	movs	r1, r5
   12042:	0006      	movs	r6, r0
   12044:	0020      	movs	r0, r4
   12046:	f002 fd5d 	bl	14b04 <__clzdi2>
   1204a:	1a33      	subs	r3, r6, r0
   1204c:	4698      	mov	r8, r3
   1204e:	3b20      	subs	r3, #32
   12050:	469b      	mov	fp, r3
   12052:	d500      	bpl.n	12056 <__udivmoddi4+0x3a>
   12054:	e074      	b.n	12140 <__udivmoddi4+0x124>
   12056:	4653      	mov	r3, sl
   12058:	465a      	mov	r2, fp
   1205a:	4093      	lsls	r3, r2
   1205c:	001f      	movs	r7, r3
   1205e:	4653      	mov	r3, sl
   12060:	4642      	mov	r2, r8
   12062:	4093      	lsls	r3, r2
   12064:	001e      	movs	r6, r3
   12066:	42af      	cmp	r7, r5
   12068:	d829      	bhi.n	120be <__udivmoddi4+0xa2>
   1206a:	d026      	beq.n	120ba <__udivmoddi4+0x9e>
   1206c:	465b      	mov	r3, fp
   1206e:	1ba4      	subs	r4, r4, r6
   12070:	41bd      	sbcs	r5, r7
   12072:	2b00      	cmp	r3, #0
   12074:	da00      	bge.n	12078 <__udivmoddi4+0x5c>
   12076:	e079      	b.n	1216c <__udivmoddi4+0x150>
   12078:	2200      	movs	r2, #0
   1207a:	2300      	movs	r3, #0
   1207c:	9200      	str	r2, [sp, #0]
   1207e:	9301      	str	r3, [sp, #4]
   12080:	2301      	movs	r3, #1
   12082:	465a      	mov	r2, fp
   12084:	4093      	lsls	r3, r2
   12086:	9301      	str	r3, [sp, #4]
   12088:	2301      	movs	r3, #1
   1208a:	4642      	mov	r2, r8
   1208c:	4093      	lsls	r3, r2
   1208e:	9300      	str	r3, [sp, #0]
   12090:	e019      	b.n	120c6 <__udivmoddi4+0xaa>
   12092:	4282      	cmp	r2, r0
   12094:	d9d0      	bls.n	12038 <__udivmoddi4+0x1c>
   12096:	2200      	movs	r2, #0
   12098:	2300      	movs	r3, #0
   1209a:	9200      	str	r2, [sp, #0]
   1209c:	9301      	str	r3, [sp, #4]
   1209e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   120a0:	2b00      	cmp	r3, #0
   120a2:	d001      	beq.n	120a8 <__udivmoddi4+0x8c>
   120a4:	601c      	str	r4, [r3, #0]
   120a6:	605d      	str	r5, [r3, #4]
   120a8:	9800      	ldr	r0, [sp, #0]
   120aa:	9901      	ldr	r1, [sp, #4]
   120ac:	b003      	add	sp, #12
   120ae:	bc3c      	pop	{r2, r3, r4, r5}
   120b0:	4690      	mov	r8, r2
   120b2:	4699      	mov	r9, r3
   120b4:	46a2      	mov	sl, r4
   120b6:	46ab      	mov	fp, r5
   120b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   120ba:	42a3      	cmp	r3, r4
   120bc:	d9d6      	bls.n	1206c <__udivmoddi4+0x50>
   120be:	2200      	movs	r2, #0
   120c0:	2300      	movs	r3, #0
   120c2:	9200      	str	r2, [sp, #0]
   120c4:	9301      	str	r3, [sp, #4]
   120c6:	4643      	mov	r3, r8
   120c8:	2b00      	cmp	r3, #0
   120ca:	d0e8      	beq.n	1209e <__udivmoddi4+0x82>
   120cc:	07fb      	lsls	r3, r7, #31
   120ce:	0872      	lsrs	r2, r6, #1
   120d0:	431a      	orrs	r2, r3
   120d2:	4646      	mov	r6, r8
   120d4:	087b      	lsrs	r3, r7, #1
   120d6:	e00e      	b.n	120f6 <__udivmoddi4+0xda>
   120d8:	42ab      	cmp	r3, r5
   120da:	d101      	bne.n	120e0 <__udivmoddi4+0xc4>
   120dc:	42a2      	cmp	r2, r4
   120de:	d80c      	bhi.n	120fa <__udivmoddi4+0xde>
   120e0:	1aa4      	subs	r4, r4, r2
   120e2:	419d      	sbcs	r5, r3
   120e4:	2001      	movs	r0, #1
   120e6:	1924      	adds	r4, r4, r4
   120e8:	416d      	adcs	r5, r5
   120ea:	2100      	movs	r1, #0
   120ec:	3e01      	subs	r6, #1
   120ee:	1824      	adds	r4, r4, r0
   120f0:	414d      	adcs	r5, r1
   120f2:	2e00      	cmp	r6, #0
   120f4:	d006      	beq.n	12104 <__udivmoddi4+0xe8>
   120f6:	42ab      	cmp	r3, r5
   120f8:	d9ee      	bls.n	120d8 <__udivmoddi4+0xbc>
   120fa:	3e01      	subs	r6, #1
   120fc:	1924      	adds	r4, r4, r4
   120fe:	416d      	adcs	r5, r5
   12100:	2e00      	cmp	r6, #0
   12102:	d1f8      	bne.n	120f6 <__udivmoddi4+0xda>
   12104:	465b      	mov	r3, fp
   12106:	9800      	ldr	r0, [sp, #0]
   12108:	9901      	ldr	r1, [sp, #4]
   1210a:	1900      	adds	r0, r0, r4
   1210c:	4169      	adcs	r1, r5
   1210e:	2b00      	cmp	r3, #0
   12110:	db22      	blt.n	12158 <__udivmoddi4+0x13c>
   12112:	002b      	movs	r3, r5
   12114:	465a      	mov	r2, fp
   12116:	40d3      	lsrs	r3, r2
   12118:	002a      	movs	r2, r5
   1211a:	4644      	mov	r4, r8
   1211c:	40e2      	lsrs	r2, r4
   1211e:	001c      	movs	r4, r3
   12120:	465b      	mov	r3, fp
   12122:	0015      	movs	r5, r2
   12124:	2b00      	cmp	r3, #0
   12126:	db2c      	blt.n	12182 <__udivmoddi4+0x166>
   12128:	0026      	movs	r6, r4
   1212a:	409e      	lsls	r6, r3
   1212c:	0033      	movs	r3, r6
   1212e:	0026      	movs	r6, r4
   12130:	4647      	mov	r7, r8
   12132:	40be      	lsls	r6, r7
   12134:	0032      	movs	r2, r6
   12136:	1a80      	subs	r0, r0, r2
   12138:	4199      	sbcs	r1, r3
   1213a:	9000      	str	r0, [sp, #0]
   1213c:	9101      	str	r1, [sp, #4]
   1213e:	e7ae      	b.n	1209e <__udivmoddi4+0x82>
   12140:	4642      	mov	r2, r8
   12142:	2320      	movs	r3, #32
   12144:	1a9b      	subs	r3, r3, r2
   12146:	4652      	mov	r2, sl
   12148:	40da      	lsrs	r2, r3
   1214a:	4641      	mov	r1, r8
   1214c:	0013      	movs	r3, r2
   1214e:	464a      	mov	r2, r9
   12150:	408a      	lsls	r2, r1
   12152:	0017      	movs	r7, r2
   12154:	431f      	orrs	r7, r3
   12156:	e782      	b.n	1205e <__udivmoddi4+0x42>
   12158:	4642      	mov	r2, r8
   1215a:	2320      	movs	r3, #32
   1215c:	1a9b      	subs	r3, r3, r2
   1215e:	002a      	movs	r2, r5
   12160:	4646      	mov	r6, r8
   12162:	409a      	lsls	r2, r3
   12164:	0023      	movs	r3, r4
   12166:	40f3      	lsrs	r3, r6
   12168:	4313      	orrs	r3, r2
   1216a:	e7d5      	b.n	12118 <__udivmoddi4+0xfc>
   1216c:	4642      	mov	r2, r8
   1216e:	2320      	movs	r3, #32
   12170:	2100      	movs	r1, #0
   12172:	1a9b      	subs	r3, r3, r2
   12174:	2200      	movs	r2, #0
   12176:	9100      	str	r1, [sp, #0]
   12178:	9201      	str	r2, [sp, #4]
   1217a:	2201      	movs	r2, #1
   1217c:	40da      	lsrs	r2, r3
   1217e:	9201      	str	r2, [sp, #4]
   12180:	e782      	b.n	12088 <__udivmoddi4+0x6c>
   12182:	4642      	mov	r2, r8
   12184:	2320      	movs	r3, #32
   12186:	0026      	movs	r6, r4
   12188:	1a9b      	subs	r3, r3, r2
   1218a:	40de      	lsrs	r6, r3
   1218c:	002f      	movs	r7, r5
   1218e:	46b4      	mov	ip, r6
   12190:	4097      	lsls	r7, r2
   12192:	4666      	mov	r6, ip
   12194:	003b      	movs	r3, r7
   12196:	4333      	orrs	r3, r6
   12198:	e7c9      	b.n	1212e <__udivmoddi4+0x112>
   1219a:	46c0      	nop			; (mov r8, r8)

0001219c <__aeabi_fadd>:
   1219c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1219e:	46c6      	mov	lr, r8
   121a0:	024e      	lsls	r6, r1, #9
   121a2:	0247      	lsls	r7, r0, #9
   121a4:	0a76      	lsrs	r6, r6, #9
   121a6:	0a7b      	lsrs	r3, r7, #9
   121a8:	0044      	lsls	r4, r0, #1
   121aa:	0fc5      	lsrs	r5, r0, #31
   121ac:	00f7      	lsls	r7, r6, #3
   121ae:	0048      	lsls	r0, r1, #1
   121b0:	4698      	mov	r8, r3
   121b2:	b500      	push	{lr}
   121b4:	0e24      	lsrs	r4, r4, #24
   121b6:	002a      	movs	r2, r5
   121b8:	00db      	lsls	r3, r3, #3
   121ba:	0e00      	lsrs	r0, r0, #24
   121bc:	0fc9      	lsrs	r1, r1, #31
   121be:	46bc      	mov	ip, r7
   121c0:	428d      	cmp	r5, r1
   121c2:	d067      	beq.n	12294 <__aeabi_fadd+0xf8>
   121c4:	1a22      	subs	r2, r4, r0
   121c6:	2a00      	cmp	r2, #0
   121c8:	dc00      	bgt.n	121cc <__aeabi_fadd+0x30>
   121ca:	e0a5      	b.n	12318 <__aeabi_fadd+0x17c>
   121cc:	2800      	cmp	r0, #0
   121ce:	d13a      	bne.n	12246 <__aeabi_fadd+0xaa>
   121d0:	2f00      	cmp	r7, #0
   121d2:	d100      	bne.n	121d6 <__aeabi_fadd+0x3a>
   121d4:	e093      	b.n	122fe <__aeabi_fadd+0x162>
   121d6:	1e51      	subs	r1, r2, #1
   121d8:	2900      	cmp	r1, #0
   121da:	d000      	beq.n	121de <__aeabi_fadd+0x42>
   121dc:	e0bc      	b.n	12358 <__aeabi_fadd+0x1bc>
   121de:	2401      	movs	r4, #1
   121e0:	1bdb      	subs	r3, r3, r7
   121e2:	015a      	lsls	r2, r3, #5
   121e4:	d546      	bpl.n	12274 <__aeabi_fadd+0xd8>
   121e6:	019b      	lsls	r3, r3, #6
   121e8:	099e      	lsrs	r6, r3, #6
   121ea:	0030      	movs	r0, r6
   121ec:	f002 fc6c 	bl	14ac8 <__clzsi2>
   121f0:	3805      	subs	r0, #5
   121f2:	4086      	lsls	r6, r0
   121f4:	4284      	cmp	r4, r0
   121f6:	dd00      	ble.n	121fa <__aeabi_fadd+0x5e>
   121f8:	e09d      	b.n	12336 <__aeabi_fadd+0x19a>
   121fa:	1b04      	subs	r4, r0, r4
   121fc:	0032      	movs	r2, r6
   121fe:	2020      	movs	r0, #32
   12200:	3401      	adds	r4, #1
   12202:	40e2      	lsrs	r2, r4
   12204:	1b04      	subs	r4, r0, r4
   12206:	40a6      	lsls	r6, r4
   12208:	0033      	movs	r3, r6
   1220a:	1e5e      	subs	r6, r3, #1
   1220c:	41b3      	sbcs	r3, r6
   1220e:	2400      	movs	r4, #0
   12210:	4313      	orrs	r3, r2
   12212:	075a      	lsls	r2, r3, #29
   12214:	d004      	beq.n	12220 <__aeabi_fadd+0x84>
   12216:	220f      	movs	r2, #15
   12218:	401a      	ands	r2, r3
   1221a:	2a04      	cmp	r2, #4
   1221c:	d000      	beq.n	12220 <__aeabi_fadd+0x84>
   1221e:	3304      	adds	r3, #4
   12220:	015a      	lsls	r2, r3, #5
   12222:	d529      	bpl.n	12278 <__aeabi_fadd+0xdc>
   12224:	3401      	adds	r4, #1
   12226:	2cff      	cmp	r4, #255	; 0xff
   12228:	d100      	bne.n	1222c <__aeabi_fadd+0x90>
   1222a:	e081      	b.n	12330 <__aeabi_fadd+0x194>
   1222c:	002a      	movs	r2, r5
   1222e:	019b      	lsls	r3, r3, #6
   12230:	0a5b      	lsrs	r3, r3, #9
   12232:	b2e4      	uxtb	r4, r4
   12234:	025b      	lsls	r3, r3, #9
   12236:	05e4      	lsls	r4, r4, #23
   12238:	0a58      	lsrs	r0, r3, #9
   1223a:	07d2      	lsls	r2, r2, #31
   1223c:	4320      	orrs	r0, r4
   1223e:	4310      	orrs	r0, r2
   12240:	bc04      	pop	{r2}
   12242:	4690      	mov	r8, r2
   12244:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12246:	2cff      	cmp	r4, #255	; 0xff
   12248:	d0e3      	beq.n	12212 <__aeabi_fadd+0x76>
   1224a:	2180      	movs	r1, #128	; 0x80
   1224c:	0038      	movs	r0, r7
   1224e:	04c9      	lsls	r1, r1, #19
   12250:	4308      	orrs	r0, r1
   12252:	4684      	mov	ip, r0
   12254:	2a1b      	cmp	r2, #27
   12256:	dd00      	ble.n	1225a <__aeabi_fadd+0xbe>
   12258:	e082      	b.n	12360 <__aeabi_fadd+0x1c4>
   1225a:	2020      	movs	r0, #32
   1225c:	4661      	mov	r1, ip
   1225e:	40d1      	lsrs	r1, r2
   12260:	1a82      	subs	r2, r0, r2
   12262:	4660      	mov	r0, ip
   12264:	4090      	lsls	r0, r2
   12266:	0002      	movs	r2, r0
   12268:	1e50      	subs	r0, r2, #1
   1226a:	4182      	sbcs	r2, r0
   1226c:	430a      	orrs	r2, r1
   1226e:	1a9b      	subs	r3, r3, r2
   12270:	015a      	lsls	r2, r3, #5
   12272:	d4b8      	bmi.n	121e6 <__aeabi_fadd+0x4a>
   12274:	075a      	lsls	r2, r3, #29
   12276:	d1ce      	bne.n	12216 <__aeabi_fadd+0x7a>
   12278:	08de      	lsrs	r6, r3, #3
   1227a:	002a      	movs	r2, r5
   1227c:	2cff      	cmp	r4, #255	; 0xff
   1227e:	d13a      	bne.n	122f6 <__aeabi_fadd+0x15a>
   12280:	2e00      	cmp	r6, #0
   12282:	d100      	bne.n	12286 <__aeabi_fadd+0xea>
   12284:	e0ae      	b.n	123e4 <__aeabi_fadd+0x248>
   12286:	2380      	movs	r3, #128	; 0x80
   12288:	03db      	lsls	r3, r3, #15
   1228a:	4333      	orrs	r3, r6
   1228c:	025b      	lsls	r3, r3, #9
   1228e:	0a5b      	lsrs	r3, r3, #9
   12290:	24ff      	movs	r4, #255	; 0xff
   12292:	e7cf      	b.n	12234 <__aeabi_fadd+0x98>
   12294:	1a21      	subs	r1, r4, r0
   12296:	2900      	cmp	r1, #0
   12298:	dd52      	ble.n	12340 <__aeabi_fadd+0x1a4>
   1229a:	2800      	cmp	r0, #0
   1229c:	d031      	beq.n	12302 <__aeabi_fadd+0x166>
   1229e:	2cff      	cmp	r4, #255	; 0xff
   122a0:	d0b7      	beq.n	12212 <__aeabi_fadd+0x76>
   122a2:	2080      	movs	r0, #128	; 0x80
   122a4:	003e      	movs	r6, r7
   122a6:	04c0      	lsls	r0, r0, #19
   122a8:	4306      	orrs	r6, r0
   122aa:	46b4      	mov	ip, r6
   122ac:	291b      	cmp	r1, #27
   122ae:	dd00      	ble.n	122b2 <__aeabi_fadd+0x116>
   122b0:	e0aa      	b.n	12408 <__aeabi_fadd+0x26c>
   122b2:	2620      	movs	r6, #32
   122b4:	4660      	mov	r0, ip
   122b6:	40c8      	lsrs	r0, r1
   122b8:	1a71      	subs	r1, r6, r1
   122ba:	4666      	mov	r6, ip
   122bc:	408e      	lsls	r6, r1
   122be:	0031      	movs	r1, r6
   122c0:	1e4e      	subs	r6, r1, #1
   122c2:	41b1      	sbcs	r1, r6
   122c4:	4301      	orrs	r1, r0
   122c6:	185b      	adds	r3, r3, r1
   122c8:	0159      	lsls	r1, r3, #5
   122ca:	d5d3      	bpl.n	12274 <__aeabi_fadd+0xd8>
   122cc:	3401      	adds	r4, #1
   122ce:	2cff      	cmp	r4, #255	; 0xff
   122d0:	d100      	bne.n	122d4 <__aeabi_fadd+0x138>
   122d2:	e087      	b.n	123e4 <__aeabi_fadd+0x248>
   122d4:	2201      	movs	r2, #1
   122d6:	4978      	ldr	r1, [pc, #480]	; (124b8 <__aeabi_fadd+0x31c>)
   122d8:	401a      	ands	r2, r3
   122da:	085b      	lsrs	r3, r3, #1
   122dc:	400b      	ands	r3, r1
   122de:	4313      	orrs	r3, r2
   122e0:	e797      	b.n	12212 <__aeabi_fadd+0x76>
   122e2:	2c00      	cmp	r4, #0
   122e4:	d000      	beq.n	122e8 <__aeabi_fadd+0x14c>
   122e6:	e0a7      	b.n	12438 <__aeabi_fadd+0x29c>
   122e8:	2b00      	cmp	r3, #0
   122ea:	d000      	beq.n	122ee <__aeabi_fadd+0x152>
   122ec:	e0b6      	b.n	1245c <__aeabi_fadd+0x2c0>
   122ee:	1e3b      	subs	r3, r7, #0
   122f0:	d162      	bne.n	123b8 <__aeabi_fadd+0x21c>
   122f2:	2600      	movs	r6, #0
   122f4:	2200      	movs	r2, #0
   122f6:	0273      	lsls	r3, r6, #9
   122f8:	0a5b      	lsrs	r3, r3, #9
   122fa:	b2e4      	uxtb	r4, r4
   122fc:	e79a      	b.n	12234 <__aeabi_fadd+0x98>
   122fe:	0014      	movs	r4, r2
   12300:	e787      	b.n	12212 <__aeabi_fadd+0x76>
   12302:	2f00      	cmp	r7, #0
   12304:	d04d      	beq.n	123a2 <__aeabi_fadd+0x206>
   12306:	1e48      	subs	r0, r1, #1
   12308:	2800      	cmp	r0, #0
   1230a:	d157      	bne.n	123bc <__aeabi_fadd+0x220>
   1230c:	4463      	add	r3, ip
   1230e:	2401      	movs	r4, #1
   12310:	015a      	lsls	r2, r3, #5
   12312:	d5af      	bpl.n	12274 <__aeabi_fadd+0xd8>
   12314:	2402      	movs	r4, #2
   12316:	e7dd      	b.n	122d4 <__aeabi_fadd+0x138>
   12318:	2a00      	cmp	r2, #0
   1231a:	d124      	bne.n	12366 <__aeabi_fadd+0x1ca>
   1231c:	1c62      	adds	r2, r4, #1
   1231e:	b2d2      	uxtb	r2, r2
   12320:	2a01      	cmp	r2, #1
   12322:	ddde      	ble.n	122e2 <__aeabi_fadd+0x146>
   12324:	1bde      	subs	r6, r3, r7
   12326:	0172      	lsls	r2, r6, #5
   12328:	d535      	bpl.n	12396 <__aeabi_fadd+0x1fa>
   1232a:	1afe      	subs	r6, r7, r3
   1232c:	000d      	movs	r5, r1
   1232e:	e75c      	b.n	121ea <__aeabi_fadd+0x4e>
   12330:	002a      	movs	r2, r5
   12332:	2300      	movs	r3, #0
   12334:	e77e      	b.n	12234 <__aeabi_fadd+0x98>
   12336:	0033      	movs	r3, r6
   12338:	4a60      	ldr	r2, [pc, #384]	; (124bc <__aeabi_fadd+0x320>)
   1233a:	1a24      	subs	r4, r4, r0
   1233c:	4013      	ands	r3, r2
   1233e:	e768      	b.n	12212 <__aeabi_fadd+0x76>
   12340:	2900      	cmp	r1, #0
   12342:	d163      	bne.n	1240c <__aeabi_fadd+0x270>
   12344:	1c61      	adds	r1, r4, #1
   12346:	b2c8      	uxtb	r0, r1
   12348:	2801      	cmp	r0, #1
   1234a:	dd4e      	ble.n	123ea <__aeabi_fadd+0x24e>
   1234c:	29ff      	cmp	r1, #255	; 0xff
   1234e:	d049      	beq.n	123e4 <__aeabi_fadd+0x248>
   12350:	4463      	add	r3, ip
   12352:	085b      	lsrs	r3, r3, #1
   12354:	000c      	movs	r4, r1
   12356:	e75c      	b.n	12212 <__aeabi_fadd+0x76>
   12358:	2aff      	cmp	r2, #255	; 0xff
   1235a:	d041      	beq.n	123e0 <__aeabi_fadd+0x244>
   1235c:	000a      	movs	r2, r1
   1235e:	e779      	b.n	12254 <__aeabi_fadd+0xb8>
   12360:	2201      	movs	r2, #1
   12362:	1a9b      	subs	r3, r3, r2
   12364:	e784      	b.n	12270 <__aeabi_fadd+0xd4>
   12366:	2c00      	cmp	r4, #0
   12368:	d01d      	beq.n	123a6 <__aeabi_fadd+0x20a>
   1236a:	28ff      	cmp	r0, #255	; 0xff
   1236c:	d022      	beq.n	123b4 <__aeabi_fadd+0x218>
   1236e:	2480      	movs	r4, #128	; 0x80
   12370:	04e4      	lsls	r4, r4, #19
   12372:	4252      	negs	r2, r2
   12374:	4323      	orrs	r3, r4
   12376:	2a1b      	cmp	r2, #27
   12378:	dd00      	ble.n	1237c <__aeabi_fadd+0x1e0>
   1237a:	e08a      	b.n	12492 <__aeabi_fadd+0x2f6>
   1237c:	001c      	movs	r4, r3
   1237e:	2520      	movs	r5, #32
   12380:	40d4      	lsrs	r4, r2
   12382:	1aaa      	subs	r2, r5, r2
   12384:	4093      	lsls	r3, r2
   12386:	1e5a      	subs	r2, r3, #1
   12388:	4193      	sbcs	r3, r2
   1238a:	4323      	orrs	r3, r4
   1238c:	4662      	mov	r2, ip
   1238e:	0004      	movs	r4, r0
   12390:	1ad3      	subs	r3, r2, r3
   12392:	000d      	movs	r5, r1
   12394:	e725      	b.n	121e2 <__aeabi_fadd+0x46>
   12396:	2e00      	cmp	r6, #0
   12398:	d000      	beq.n	1239c <__aeabi_fadd+0x200>
   1239a:	e726      	b.n	121ea <__aeabi_fadd+0x4e>
   1239c:	2200      	movs	r2, #0
   1239e:	2400      	movs	r4, #0
   123a0:	e7a9      	b.n	122f6 <__aeabi_fadd+0x15a>
   123a2:	000c      	movs	r4, r1
   123a4:	e735      	b.n	12212 <__aeabi_fadd+0x76>
   123a6:	2b00      	cmp	r3, #0
   123a8:	d04d      	beq.n	12446 <__aeabi_fadd+0x2aa>
   123aa:	43d2      	mvns	r2, r2
   123ac:	2a00      	cmp	r2, #0
   123ae:	d0ed      	beq.n	1238c <__aeabi_fadd+0x1f0>
   123b0:	28ff      	cmp	r0, #255	; 0xff
   123b2:	d1e0      	bne.n	12376 <__aeabi_fadd+0x1da>
   123b4:	4663      	mov	r3, ip
   123b6:	24ff      	movs	r4, #255	; 0xff
   123b8:	000d      	movs	r5, r1
   123ba:	e72a      	b.n	12212 <__aeabi_fadd+0x76>
   123bc:	29ff      	cmp	r1, #255	; 0xff
   123be:	d00f      	beq.n	123e0 <__aeabi_fadd+0x244>
   123c0:	0001      	movs	r1, r0
   123c2:	e773      	b.n	122ac <__aeabi_fadd+0x110>
   123c4:	2b00      	cmp	r3, #0
   123c6:	d061      	beq.n	1248c <__aeabi_fadd+0x2f0>
   123c8:	24ff      	movs	r4, #255	; 0xff
   123ca:	2f00      	cmp	r7, #0
   123cc:	d100      	bne.n	123d0 <__aeabi_fadd+0x234>
   123ce:	e720      	b.n	12212 <__aeabi_fadd+0x76>
   123d0:	2280      	movs	r2, #128	; 0x80
   123d2:	4641      	mov	r1, r8
   123d4:	03d2      	lsls	r2, r2, #15
   123d6:	4211      	tst	r1, r2
   123d8:	d002      	beq.n	123e0 <__aeabi_fadd+0x244>
   123da:	4216      	tst	r6, r2
   123dc:	d100      	bne.n	123e0 <__aeabi_fadd+0x244>
   123de:	003b      	movs	r3, r7
   123e0:	24ff      	movs	r4, #255	; 0xff
   123e2:	e716      	b.n	12212 <__aeabi_fadd+0x76>
   123e4:	24ff      	movs	r4, #255	; 0xff
   123e6:	2300      	movs	r3, #0
   123e8:	e724      	b.n	12234 <__aeabi_fadd+0x98>
   123ea:	2c00      	cmp	r4, #0
   123ec:	d1ea      	bne.n	123c4 <__aeabi_fadd+0x228>
   123ee:	2b00      	cmp	r3, #0
   123f0:	d058      	beq.n	124a4 <__aeabi_fadd+0x308>
   123f2:	2f00      	cmp	r7, #0
   123f4:	d100      	bne.n	123f8 <__aeabi_fadd+0x25c>
   123f6:	e70c      	b.n	12212 <__aeabi_fadd+0x76>
   123f8:	4463      	add	r3, ip
   123fa:	015a      	lsls	r2, r3, #5
   123fc:	d400      	bmi.n	12400 <__aeabi_fadd+0x264>
   123fe:	e739      	b.n	12274 <__aeabi_fadd+0xd8>
   12400:	4a2e      	ldr	r2, [pc, #184]	; (124bc <__aeabi_fadd+0x320>)
   12402:	000c      	movs	r4, r1
   12404:	4013      	ands	r3, r2
   12406:	e704      	b.n	12212 <__aeabi_fadd+0x76>
   12408:	2101      	movs	r1, #1
   1240a:	e75c      	b.n	122c6 <__aeabi_fadd+0x12a>
   1240c:	2c00      	cmp	r4, #0
   1240e:	d11e      	bne.n	1244e <__aeabi_fadd+0x2b2>
   12410:	2b00      	cmp	r3, #0
   12412:	d040      	beq.n	12496 <__aeabi_fadd+0x2fa>
   12414:	43c9      	mvns	r1, r1
   12416:	2900      	cmp	r1, #0
   12418:	d00b      	beq.n	12432 <__aeabi_fadd+0x296>
   1241a:	28ff      	cmp	r0, #255	; 0xff
   1241c:	d036      	beq.n	1248c <__aeabi_fadd+0x2f0>
   1241e:	291b      	cmp	r1, #27
   12420:	dc47      	bgt.n	124b2 <__aeabi_fadd+0x316>
   12422:	001c      	movs	r4, r3
   12424:	2620      	movs	r6, #32
   12426:	40cc      	lsrs	r4, r1
   12428:	1a71      	subs	r1, r6, r1
   1242a:	408b      	lsls	r3, r1
   1242c:	1e59      	subs	r1, r3, #1
   1242e:	418b      	sbcs	r3, r1
   12430:	4323      	orrs	r3, r4
   12432:	4463      	add	r3, ip
   12434:	0004      	movs	r4, r0
   12436:	e747      	b.n	122c8 <__aeabi_fadd+0x12c>
   12438:	2b00      	cmp	r3, #0
   1243a:	d118      	bne.n	1246e <__aeabi_fadd+0x2d2>
   1243c:	1e3b      	subs	r3, r7, #0
   1243e:	d02d      	beq.n	1249c <__aeabi_fadd+0x300>
   12440:	000d      	movs	r5, r1
   12442:	24ff      	movs	r4, #255	; 0xff
   12444:	e6e5      	b.n	12212 <__aeabi_fadd+0x76>
   12446:	003b      	movs	r3, r7
   12448:	0004      	movs	r4, r0
   1244a:	000d      	movs	r5, r1
   1244c:	e6e1      	b.n	12212 <__aeabi_fadd+0x76>
   1244e:	28ff      	cmp	r0, #255	; 0xff
   12450:	d01c      	beq.n	1248c <__aeabi_fadd+0x2f0>
   12452:	2480      	movs	r4, #128	; 0x80
   12454:	04e4      	lsls	r4, r4, #19
   12456:	4249      	negs	r1, r1
   12458:	4323      	orrs	r3, r4
   1245a:	e7e0      	b.n	1241e <__aeabi_fadd+0x282>
   1245c:	2f00      	cmp	r7, #0
   1245e:	d100      	bne.n	12462 <__aeabi_fadd+0x2c6>
   12460:	e6d7      	b.n	12212 <__aeabi_fadd+0x76>
   12462:	1bde      	subs	r6, r3, r7
   12464:	0172      	lsls	r2, r6, #5
   12466:	d51f      	bpl.n	124a8 <__aeabi_fadd+0x30c>
   12468:	1afb      	subs	r3, r7, r3
   1246a:	000d      	movs	r5, r1
   1246c:	e6d1      	b.n	12212 <__aeabi_fadd+0x76>
   1246e:	24ff      	movs	r4, #255	; 0xff
   12470:	2f00      	cmp	r7, #0
   12472:	d100      	bne.n	12476 <__aeabi_fadd+0x2da>
   12474:	e6cd      	b.n	12212 <__aeabi_fadd+0x76>
   12476:	2280      	movs	r2, #128	; 0x80
   12478:	4640      	mov	r0, r8
   1247a:	03d2      	lsls	r2, r2, #15
   1247c:	4210      	tst	r0, r2
   1247e:	d0af      	beq.n	123e0 <__aeabi_fadd+0x244>
   12480:	4216      	tst	r6, r2
   12482:	d1ad      	bne.n	123e0 <__aeabi_fadd+0x244>
   12484:	003b      	movs	r3, r7
   12486:	000d      	movs	r5, r1
   12488:	24ff      	movs	r4, #255	; 0xff
   1248a:	e6c2      	b.n	12212 <__aeabi_fadd+0x76>
   1248c:	4663      	mov	r3, ip
   1248e:	24ff      	movs	r4, #255	; 0xff
   12490:	e6bf      	b.n	12212 <__aeabi_fadd+0x76>
   12492:	2301      	movs	r3, #1
   12494:	e77a      	b.n	1238c <__aeabi_fadd+0x1f0>
   12496:	003b      	movs	r3, r7
   12498:	0004      	movs	r4, r0
   1249a:	e6ba      	b.n	12212 <__aeabi_fadd+0x76>
   1249c:	2680      	movs	r6, #128	; 0x80
   1249e:	2200      	movs	r2, #0
   124a0:	03f6      	lsls	r6, r6, #15
   124a2:	e6f0      	b.n	12286 <__aeabi_fadd+0xea>
   124a4:	003b      	movs	r3, r7
   124a6:	e6b4      	b.n	12212 <__aeabi_fadd+0x76>
   124a8:	1e33      	subs	r3, r6, #0
   124aa:	d000      	beq.n	124ae <__aeabi_fadd+0x312>
   124ac:	e6e2      	b.n	12274 <__aeabi_fadd+0xd8>
   124ae:	2200      	movs	r2, #0
   124b0:	e721      	b.n	122f6 <__aeabi_fadd+0x15a>
   124b2:	2301      	movs	r3, #1
   124b4:	e7bd      	b.n	12432 <__aeabi_fadd+0x296>
   124b6:	46c0      	nop			; (mov r8, r8)
   124b8:	7dffffff 	.word	0x7dffffff
   124bc:	fbffffff 	.word	0xfbffffff

000124c0 <__aeabi_fdiv>:
   124c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   124c2:	4657      	mov	r7, sl
   124c4:	464e      	mov	r6, r9
   124c6:	46de      	mov	lr, fp
   124c8:	4645      	mov	r5, r8
   124ca:	b5e0      	push	{r5, r6, r7, lr}
   124cc:	0244      	lsls	r4, r0, #9
   124ce:	0043      	lsls	r3, r0, #1
   124d0:	0fc6      	lsrs	r6, r0, #31
   124d2:	b083      	sub	sp, #12
   124d4:	1c0f      	adds	r7, r1, #0
   124d6:	0a64      	lsrs	r4, r4, #9
   124d8:	0e1b      	lsrs	r3, r3, #24
   124da:	46b2      	mov	sl, r6
   124dc:	d053      	beq.n	12586 <__aeabi_fdiv+0xc6>
   124de:	2bff      	cmp	r3, #255	; 0xff
   124e0:	d027      	beq.n	12532 <__aeabi_fdiv+0x72>
   124e2:	2280      	movs	r2, #128	; 0x80
   124e4:	00e4      	lsls	r4, r4, #3
   124e6:	04d2      	lsls	r2, r2, #19
   124e8:	4314      	orrs	r4, r2
   124ea:	227f      	movs	r2, #127	; 0x7f
   124ec:	4252      	negs	r2, r2
   124ee:	4690      	mov	r8, r2
   124f0:	4498      	add	r8, r3
   124f2:	2300      	movs	r3, #0
   124f4:	4699      	mov	r9, r3
   124f6:	469b      	mov	fp, r3
   124f8:	027d      	lsls	r5, r7, #9
   124fa:	0078      	lsls	r0, r7, #1
   124fc:	0ffb      	lsrs	r3, r7, #31
   124fe:	0a6d      	lsrs	r5, r5, #9
   12500:	0e00      	lsrs	r0, r0, #24
   12502:	9300      	str	r3, [sp, #0]
   12504:	d024      	beq.n	12550 <__aeabi_fdiv+0x90>
   12506:	28ff      	cmp	r0, #255	; 0xff
   12508:	d046      	beq.n	12598 <__aeabi_fdiv+0xd8>
   1250a:	2380      	movs	r3, #128	; 0x80
   1250c:	2100      	movs	r1, #0
   1250e:	00ed      	lsls	r5, r5, #3
   12510:	04db      	lsls	r3, r3, #19
   12512:	431d      	orrs	r5, r3
   12514:	387f      	subs	r0, #127	; 0x7f
   12516:	4647      	mov	r7, r8
   12518:	1a38      	subs	r0, r7, r0
   1251a:	464f      	mov	r7, r9
   1251c:	430f      	orrs	r7, r1
   1251e:	00bf      	lsls	r7, r7, #2
   12520:	46b9      	mov	r9, r7
   12522:	0033      	movs	r3, r6
   12524:	9a00      	ldr	r2, [sp, #0]
   12526:	4f87      	ldr	r7, [pc, #540]	; (12744 <__aeabi_fdiv+0x284>)
   12528:	4053      	eors	r3, r2
   1252a:	464a      	mov	r2, r9
   1252c:	58ba      	ldr	r2, [r7, r2]
   1252e:	9301      	str	r3, [sp, #4]
   12530:	4697      	mov	pc, r2
   12532:	2c00      	cmp	r4, #0
   12534:	d14e      	bne.n	125d4 <__aeabi_fdiv+0x114>
   12536:	2308      	movs	r3, #8
   12538:	4699      	mov	r9, r3
   1253a:	33f7      	adds	r3, #247	; 0xf7
   1253c:	4698      	mov	r8, r3
   1253e:	3bfd      	subs	r3, #253	; 0xfd
   12540:	469b      	mov	fp, r3
   12542:	027d      	lsls	r5, r7, #9
   12544:	0078      	lsls	r0, r7, #1
   12546:	0ffb      	lsrs	r3, r7, #31
   12548:	0a6d      	lsrs	r5, r5, #9
   1254a:	0e00      	lsrs	r0, r0, #24
   1254c:	9300      	str	r3, [sp, #0]
   1254e:	d1da      	bne.n	12506 <__aeabi_fdiv+0x46>
   12550:	2d00      	cmp	r5, #0
   12552:	d126      	bne.n	125a2 <__aeabi_fdiv+0xe2>
   12554:	2000      	movs	r0, #0
   12556:	2101      	movs	r1, #1
   12558:	0033      	movs	r3, r6
   1255a:	9a00      	ldr	r2, [sp, #0]
   1255c:	4f7a      	ldr	r7, [pc, #488]	; (12748 <__aeabi_fdiv+0x288>)
   1255e:	4053      	eors	r3, r2
   12560:	4642      	mov	r2, r8
   12562:	1a10      	subs	r0, r2, r0
   12564:	464a      	mov	r2, r9
   12566:	430a      	orrs	r2, r1
   12568:	0092      	lsls	r2, r2, #2
   1256a:	58ba      	ldr	r2, [r7, r2]
   1256c:	001d      	movs	r5, r3
   1256e:	4697      	mov	pc, r2
   12570:	9b00      	ldr	r3, [sp, #0]
   12572:	002c      	movs	r4, r5
   12574:	469a      	mov	sl, r3
   12576:	468b      	mov	fp, r1
   12578:	465b      	mov	r3, fp
   1257a:	2b02      	cmp	r3, #2
   1257c:	d131      	bne.n	125e2 <__aeabi_fdiv+0x122>
   1257e:	4653      	mov	r3, sl
   12580:	21ff      	movs	r1, #255	; 0xff
   12582:	2400      	movs	r4, #0
   12584:	e038      	b.n	125f8 <__aeabi_fdiv+0x138>
   12586:	2c00      	cmp	r4, #0
   12588:	d117      	bne.n	125ba <__aeabi_fdiv+0xfa>
   1258a:	2304      	movs	r3, #4
   1258c:	4699      	mov	r9, r3
   1258e:	2300      	movs	r3, #0
   12590:	4698      	mov	r8, r3
   12592:	3301      	adds	r3, #1
   12594:	469b      	mov	fp, r3
   12596:	e7af      	b.n	124f8 <__aeabi_fdiv+0x38>
   12598:	20ff      	movs	r0, #255	; 0xff
   1259a:	2d00      	cmp	r5, #0
   1259c:	d10b      	bne.n	125b6 <__aeabi_fdiv+0xf6>
   1259e:	2102      	movs	r1, #2
   125a0:	e7da      	b.n	12558 <__aeabi_fdiv+0x98>
   125a2:	0028      	movs	r0, r5
   125a4:	f002 fa90 	bl	14ac8 <__clzsi2>
   125a8:	1f43      	subs	r3, r0, #5
   125aa:	409d      	lsls	r5, r3
   125ac:	2376      	movs	r3, #118	; 0x76
   125ae:	425b      	negs	r3, r3
   125b0:	1a18      	subs	r0, r3, r0
   125b2:	2100      	movs	r1, #0
   125b4:	e7af      	b.n	12516 <__aeabi_fdiv+0x56>
   125b6:	2103      	movs	r1, #3
   125b8:	e7ad      	b.n	12516 <__aeabi_fdiv+0x56>
   125ba:	0020      	movs	r0, r4
   125bc:	f002 fa84 	bl	14ac8 <__clzsi2>
   125c0:	1f43      	subs	r3, r0, #5
   125c2:	409c      	lsls	r4, r3
   125c4:	2376      	movs	r3, #118	; 0x76
   125c6:	425b      	negs	r3, r3
   125c8:	1a1b      	subs	r3, r3, r0
   125ca:	4698      	mov	r8, r3
   125cc:	2300      	movs	r3, #0
   125ce:	4699      	mov	r9, r3
   125d0:	469b      	mov	fp, r3
   125d2:	e791      	b.n	124f8 <__aeabi_fdiv+0x38>
   125d4:	230c      	movs	r3, #12
   125d6:	4699      	mov	r9, r3
   125d8:	33f3      	adds	r3, #243	; 0xf3
   125da:	4698      	mov	r8, r3
   125dc:	3bfc      	subs	r3, #252	; 0xfc
   125de:	469b      	mov	fp, r3
   125e0:	e78a      	b.n	124f8 <__aeabi_fdiv+0x38>
   125e2:	2b03      	cmp	r3, #3
   125e4:	d100      	bne.n	125e8 <__aeabi_fdiv+0x128>
   125e6:	e0a5      	b.n	12734 <__aeabi_fdiv+0x274>
   125e8:	4655      	mov	r5, sl
   125ea:	2b01      	cmp	r3, #1
   125ec:	d000      	beq.n	125f0 <__aeabi_fdiv+0x130>
   125ee:	e081      	b.n	126f4 <__aeabi_fdiv+0x234>
   125f0:	2301      	movs	r3, #1
   125f2:	2100      	movs	r1, #0
   125f4:	2400      	movs	r4, #0
   125f6:	402b      	ands	r3, r5
   125f8:	0264      	lsls	r4, r4, #9
   125fa:	05c9      	lsls	r1, r1, #23
   125fc:	0a60      	lsrs	r0, r4, #9
   125fe:	07db      	lsls	r3, r3, #31
   12600:	4308      	orrs	r0, r1
   12602:	4318      	orrs	r0, r3
   12604:	b003      	add	sp, #12
   12606:	bc3c      	pop	{r2, r3, r4, r5}
   12608:	4690      	mov	r8, r2
   1260a:	4699      	mov	r9, r3
   1260c:	46a2      	mov	sl, r4
   1260e:	46ab      	mov	fp, r5
   12610:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12612:	2480      	movs	r4, #128	; 0x80
   12614:	2300      	movs	r3, #0
   12616:	03e4      	lsls	r4, r4, #15
   12618:	21ff      	movs	r1, #255	; 0xff
   1261a:	e7ed      	b.n	125f8 <__aeabi_fdiv+0x138>
   1261c:	21ff      	movs	r1, #255	; 0xff
   1261e:	2400      	movs	r4, #0
   12620:	e7ea      	b.n	125f8 <__aeabi_fdiv+0x138>
   12622:	2301      	movs	r3, #1
   12624:	1a59      	subs	r1, r3, r1
   12626:	291b      	cmp	r1, #27
   12628:	dd66      	ble.n	126f8 <__aeabi_fdiv+0x238>
   1262a:	9a01      	ldr	r2, [sp, #4]
   1262c:	4013      	ands	r3, r2
   1262e:	2100      	movs	r1, #0
   12630:	2400      	movs	r4, #0
   12632:	e7e1      	b.n	125f8 <__aeabi_fdiv+0x138>
   12634:	2380      	movs	r3, #128	; 0x80
   12636:	03db      	lsls	r3, r3, #15
   12638:	421c      	tst	r4, r3
   1263a:	d038      	beq.n	126ae <__aeabi_fdiv+0x1ee>
   1263c:	421d      	tst	r5, r3
   1263e:	d051      	beq.n	126e4 <__aeabi_fdiv+0x224>
   12640:	431c      	orrs	r4, r3
   12642:	0264      	lsls	r4, r4, #9
   12644:	0a64      	lsrs	r4, r4, #9
   12646:	0033      	movs	r3, r6
   12648:	21ff      	movs	r1, #255	; 0xff
   1264a:	e7d5      	b.n	125f8 <__aeabi_fdiv+0x138>
   1264c:	0163      	lsls	r3, r4, #5
   1264e:	016c      	lsls	r4, r5, #5
   12650:	42a3      	cmp	r3, r4
   12652:	d23b      	bcs.n	126cc <__aeabi_fdiv+0x20c>
   12654:	261b      	movs	r6, #27
   12656:	2100      	movs	r1, #0
   12658:	3801      	subs	r0, #1
   1265a:	2501      	movs	r5, #1
   1265c:	001f      	movs	r7, r3
   1265e:	0049      	lsls	r1, r1, #1
   12660:	005b      	lsls	r3, r3, #1
   12662:	2f00      	cmp	r7, #0
   12664:	db01      	blt.n	1266a <__aeabi_fdiv+0x1aa>
   12666:	429c      	cmp	r4, r3
   12668:	d801      	bhi.n	1266e <__aeabi_fdiv+0x1ae>
   1266a:	1b1b      	subs	r3, r3, r4
   1266c:	4329      	orrs	r1, r5
   1266e:	3e01      	subs	r6, #1
   12670:	2e00      	cmp	r6, #0
   12672:	d1f3      	bne.n	1265c <__aeabi_fdiv+0x19c>
   12674:	001c      	movs	r4, r3
   12676:	1e63      	subs	r3, r4, #1
   12678:	419c      	sbcs	r4, r3
   1267a:	430c      	orrs	r4, r1
   1267c:	0001      	movs	r1, r0
   1267e:	317f      	adds	r1, #127	; 0x7f
   12680:	2900      	cmp	r1, #0
   12682:	ddce      	ble.n	12622 <__aeabi_fdiv+0x162>
   12684:	0763      	lsls	r3, r4, #29
   12686:	d004      	beq.n	12692 <__aeabi_fdiv+0x1d2>
   12688:	230f      	movs	r3, #15
   1268a:	4023      	ands	r3, r4
   1268c:	2b04      	cmp	r3, #4
   1268e:	d000      	beq.n	12692 <__aeabi_fdiv+0x1d2>
   12690:	3404      	adds	r4, #4
   12692:	0123      	lsls	r3, r4, #4
   12694:	d503      	bpl.n	1269e <__aeabi_fdiv+0x1de>
   12696:	0001      	movs	r1, r0
   12698:	4b2c      	ldr	r3, [pc, #176]	; (1274c <__aeabi_fdiv+0x28c>)
   1269a:	3180      	adds	r1, #128	; 0x80
   1269c:	401c      	ands	r4, r3
   1269e:	29fe      	cmp	r1, #254	; 0xfe
   126a0:	dd0d      	ble.n	126be <__aeabi_fdiv+0x1fe>
   126a2:	2301      	movs	r3, #1
   126a4:	9a01      	ldr	r2, [sp, #4]
   126a6:	21ff      	movs	r1, #255	; 0xff
   126a8:	4013      	ands	r3, r2
   126aa:	2400      	movs	r4, #0
   126ac:	e7a4      	b.n	125f8 <__aeabi_fdiv+0x138>
   126ae:	2380      	movs	r3, #128	; 0x80
   126b0:	03db      	lsls	r3, r3, #15
   126b2:	431c      	orrs	r4, r3
   126b4:	0264      	lsls	r4, r4, #9
   126b6:	0a64      	lsrs	r4, r4, #9
   126b8:	0033      	movs	r3, r6
   126ba:	21ff      	movs	r1, #255	; 0xff
   126bc:	e79c      	b.n	125f8 <__aeabi_fdiv+0x138>
   126be:	2301      	movs	r3, #1
   126c0:	9a01      	ldr	r2, [sp, #4]
   126c2:	01a4      	lsls	r4, r4, #6
   126c4:	0a64      	lsrs	r4, r4, #9
   126c6:	b2c9      	uxtb	r1, r1
   126c8:	4013      	ands	r3, r2
   126ca:	e795      	b.n	125f8 <__aeabi_fdiv+0x138>
   126cc:	1b1b      	subs	r3, r3, r4
   126ce:	261a      	movs	r6, #26
   126d0:	2101      	movs	r1, #1
   126d2:	e7c2      	b.n	1265a <__aeabi_fdiv+0x19a>
   126d4:	9b00      	ldr	r3, [sp, #0]
   126d6:	468b      	mov	fp, r1
   126d8:	469a      	mov	sl, r3
   126da:	2400      	movs	r4, #0
   126dc:	e74c      	b.n	12578 <__aeabi_fdiv+0xb8>
   126de:	0263      	lsls	r3, r4, #9
   126e0:	d5e5      	bpl.n	126ae <__aeabi_fdiv+0x1ee>
   126e2:	2500      	movs	r5, #0
   126e4:	2480      	movs	r4, #128	; 0x80
   126e6:	03e4      	lsls	r4, r4, #15
   126e8:	432c      	orrs	r4, r5
   126ea:	0264      	lsls	r4, r4, #9
   126ec:	0a64      	lsrs	r4, r4, #9
   126ee:	9b00      	ldr	r3, [sp, #0]
   126f0:	21ff      	movs	r1, #255	; 0xff
   126f2:	e781      	b.n	125f8 <__aeabi_fdiv+0x138>
   126f4:	9501      	str	r5, [sp, #4]
   126f6:	e7c1      	b.n	1267c <__aeabi_fdiv+0x1bc>
   126f8:	0023      	movs	r3, r4
   126fa:	2020      	movs	r0, #32
   126fc:	40cb      	lsrs	r3, r1
   126fe:	1a41      	subs	r1, r0, r1
   12700:	408c      	lsls	r4, r1
   12702:	1e61      	subs	r1, r4, #1
   12704:	418c      	sbcs	r4, r1
   12706:	431c      	orrs	r4, r3
   12708:	0763      	lsls	r3, r4, #29
   1270a:	d004      	beq.n	12716 <__aeabi_fdiv+0x256>
   1270c:	230f      	movs	r3, #15
   1270e:	4023      	ands	r3, r4
   12710:	2b04      	cmp	r3, #4
   12712:	d000      	beq.n	12716 <__aeabi_fdiv+0x256>
   12714:	3404      	adds	r4, #4
   12716:	0163      	lsls	r3, r4, #5
   12718:	d505      	bpl.n	12726 <__aeabi_fdiv+0x266>
   1271a:	2301      	movs	r3, #1
   1271c:	9a01      	ldr	r2, [sp, #4]
   1271e:	2101      	movs	r1, #1
   12720:	4013      	ands	r3, r2
   12722:	2400      	movs	r4, #0
   12724:	e768      	b.n	125f8 <__aeabi_fdiv+0x138>
   12726:	2301      	movs	r3, #1
   12728:	9a01      	ldr	r2, [sp, #4]
   1272a:	01a4      	lsls	r4, r4, #6
   1272c:	0a64      	lsrs	r4, r4, #9
   1272e:	4013      	ands	r3, r2
   12730:	2100      	movs	r1, #0
   12732:	e761      	b.n	125f8 <__aeabi_fdiv+0x138>
   12734:	2380      	movs	r3, #128	; 0x80
   12736:	03db      	lsls	r3, r3, #15
   12738:	431c      	orrs	r4, r3
   1273a:	0264      	lsls	r4, r4, #9
   1273c:	0a64      	lsrs	r4, r4, #9
   1273e:	4653      	mov	r3, sl
   12740:	21ff      	movs	r1, #255	; 0xff
   12742:	e759      	b.n	125f8 <__aeabi_fdiv+0x138>
   12744:	000173a8 	.word	0x000173a8
   12748:	000173e8 	.word	0x000173e8
   1274c:	f7ffffff 	.word	0xf7ffffff

00012750 <__eqsf2>:
   12750:	b570      	push	{r4, r5, r6, lr}
   12752:	0042      	lsls	r2, r0, #1
   12754:	0245      	lsls	r5, r0, #9
   12756:	024e      	lsls	r6, r1, #9
   12758:	004c      	lsls	r4, r1, #1
   1275a:	0fc3      	lsrs	r3, r0, #31
   1275c:	0a6d      	lsrs	r5, r5, #9
   1275e:	0e12      	lsrs	r2, r2, #24
   12760:	0a76      	lsrs	r6, r6, #9
   12762:	0e24      	lsrs	r4, r4, #24
   12764:	0fc9      	lsrs	r1, r1, #31
   12766:	2001      	movs	r0, #1
   12768:	2aff      	cmp	r2, #255	; 0xff
   1276a:	d006      	beq.n	1277a <__eqsf2+0x2a>
   1276c:	2cff      	cmp	r4, #255	; 0xff
   1276e:	d003      	beq.n	12778 <__eqsf2+0x28>
   12770:	42a2      	cmp	r2, r4
   12772:	d101      	bne.n	12778 <__eqsf2+0x28>
   12774:	42b5      	cmp	r5, r6
   12776:	d006      	beq.n	12786 <__eqsf2+0x36>
   12778:	bd70      	pop	{r4, r5, r6, pc}
   1277a:	2d00      	cmp	r5, #0
   1277c:	d1fc      	bne.n	12778 <__eqsf2+0x28>
   1277e:	2cff      	cmp	r4, #255	; 0xff
   12780:	d1fa      	bne.n	12778 <__eqsf2+0x28>
   12782:	2e00      	cmp	r6, #0
   12784:	d1f8      	bne.n	12778 <__eqsf2+0x28>
   12786:	428b      	cmp	r3, r1
   12788:	d006      	beq.n	12798 <__eqsf2+0x48>
   1278a:	2001      	movs	r0, #1
   1278c:	2a00      	cmp	r2, #0
   1278e:	d1f3      	bne.n	12778 <__eqsf2+0x28>
   12790:	0028      	movs	r0, r5
   12792:	1e45      	subs	r5, r0, #1
   12794:	41a8      	sbcs	r0, r5
   12796:	e7ef      	b.n	12778 <__eqsf2+0x28>
   12798:	2000      	movs	r0, #0
   1279a:	e7ed      	b.n	12778 <__eqsf2+0x28>

0001279c <__gesf2>:
   1279c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1279e:	0042      	lsls	r2, r0, #1
   127a0:	0245      	lsls	r5, r0, #9
   127a2:	024c      	lsls	r4, r1, #9
   127a4:	0fc3      	lsrs	r3, r0, #31
   127a6:	0048      	lsls	r0, r1, #1
   127a8:	0a6d      	lsrs	r5, r5, #9
   127aa:	0e12      	lsrs	r2, r2, #24
   127ac:	0a64      	lsrs	r4, r4, #9
   127ae:	0e00      	lsrs	r0, r0, #24
   127b0:	0fc9      	lsrs	r1, r1, #31
   127b2:	2aff      	cmp	r2, #255	; 0xff
   127b4:	d01e      	beq.n	127f4 <__gesf2+0x58>
   127b6:	28ff      	cmp	r0, #255	; 0xff
   127b8:	d021      	beq.n	127fe <__gesf2+0x62>
   127ba:	2a00      	cmp	r2, #0
   127bc:	d10a      	bne.n	127d4 <__gesf2+0x38>
   127be:	426e      	negs	r6, r5
   127c0:	416e      	adcs	r6, r5
   127c2:	b2f6      	uxtb	r6, r6
   127c4:	2800      	cmp	r0, #0
   127c6:	d10f      	bne.n	127e8 <__gesf2+0x4c>
   127c8:	2c00      	cmp	r4, #0
   127ca:	d10d      	bne.n	127e8 <__gesf2+0x4c>
   127cc:	2000      	movs	r0, #0
   127ce:	2d00      	cmp	r5, #0
   127d0:	d009      	beq.n	127e6 <__gesf2+0x4a>
   127d2:	e005      	b.n	127e0 <__gesf2+0x44>
   127d4:	2800      	cmp	r0, #0
   127d6:	d101      	bne.n	127dc <__gesf2+0x40>
   127d8:	2c00      	cmp	r4, #0
   127da:	d001      	beq.n	127e0 <__gesf2+0x44>
   127dc:	428b      	cmp	r3, r1
   127de:	d011      	beq.n	12804 <__gesf2+0x68>
   127e0:	2101      	movs	r1, #1
   127e2:	4258      	negs	r0, r3
   127e4:	4308      	orrs	r0, r1
   127e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   127e8:	2e00      	cmp	r6, #0
   127ea:	d0f7      	beq.n	127dc <__gesf2+0x40>
   127ec:	2001      	movs	r0, #1
   127ee:	3901      	subs	r1, #1
   127f0:	4308      	orrs	r0, r1
   127f2:	e7f8      	b.n	127e6 <__gesf2+0x4a>
   127f4:	2d00      	cmp	r5, #0
   127f6:	d0de      	beq.n	127b6 <__gesf2+0x1a>
   127f8:	2002      	movs	r0, #2
   127fa:	4240      	negs	r0, r0
   127fc:	e7f3      	b.n	127e6 <__gesf2+0x4a>
   127fe:	2c00      	cmp	r4, #0
   12800:	d0db      	beq.n	127ba <__gesf2+0x1e>
   12802:	e7f9      	b.n	127f8 <__gesf2+0x5c>
   12804:	4282      	cmp	r2, r0
   12806:	dceb      	bgt.n	127e0 <__gesf2+0x44>
   12808:	db04      	blt.n	12814 <__gesf2+0x78>
   1280a:	42a5      	cmp	r5, r4
   1280c:	d8e8      	bhi.n	127e0 <__gesf2+0x44>
   1280e:	2000      	movs	r0, #0
   12810:	42a5      	cmp	r5, r4
   12812:	d2e8      	bcs.n	127e6 <__gesf2+0x4a>
   12814:	2101      	movs	r1, #1
   12816:	1e58      	subs	r0, r3, #1
   12818:	4308      	orrs	r0, r1
   1281a:	e7e4      	b.n	127e6 <__gesf2+0x4a>

0001281c <__lesf2>:
   1281c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1281e:	0042      	lsls	r2, r0, #1
   12820:	024d      	lsls	r5, r1, #9
   12822:	004c      	lsls	r4, r1, #1
   12824:	0246      	lsls	r6, r0, #9
   12826:	0a76      	lsrs	r6, r6, #9
   12828:	0e12      	lsrs	r2, r2, #24
   1282a:	0fc3      	lsrs	r3, r0, #31
   1282c:	0a6d      	lsrs	r5, r5, #9
   1282e:	0e24      	lsrs	r4, r4, #24
   12830:	0fc9      	lsrs	r1, r1, #31
   12832:	2aff      	cmp	r2, #255	; 0xff
   12834:	d016      	beq.n	12864 <__lesf2+0x48>
   12836:	2cff      	cmp	r4, #255	; 0xff
   12838:	d018      	beq.n	1286c <__lesf2+0x50>
   1283a:	2a00      	cmp	r2, #0
   1283c:	d10a      	bne.n	12854 <__lesf2+0x38>
   1283e:	4270      	negs	r0, r6
   12840:	4170      	adcs	r0, r6
   12842:	b2c0      	uxtb	r0, r0
   12844:	2c00      	cmp	r4, #0
   12846:	d015      	beq.n	12874 <__lesf2+0x58>
   12848:	2800      	cmp	r0, #0
   1284a:	d005      	beq.n	12858 <__lesf2+0x3c>
   1284c:	2001      	movs	r0, #1
   1284e:	3901      	subs	r1, #1
   12850:	4308      	orrs	r0, r1
   12852:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12854:	2c00      	cmp	r4, #0
   12856:	d013      	beq.n	12880 <__lesf2+0x64>
   12858:	4299      	cmp	r1, r3
   1285a:	d014      	beq.n	12886 <__lesf2+0x6a>
   1285c:	2001      	movs	r0, #1
   1285e:	425b      	negs	r3, r3
   12860:	4318      	orrs	r0, r3
   12862:	e7f6      	b.n	12852 <__lesf2+0x36>
   12864:	2002      	movs	r0, #2
   12866:	2e00      	cmp	r6, #0
   12868:	d1f3      	bne.n	12852 <__lesf2+0x36>
   1286a:	e7e4      	b.n	12836 <__lesf2+0x1a>
   1286c:	2002      	movs	r0, #2
   1286e:	2d00      	cmp	r5, #0
   12870:	d1ef      	bne.n	12852 <__lesf2+0x36>
   12872:	e7e2      	b.n	1283a <__lesf2+0x1e>
   12874:	2d00      	cmp	r5, #0
   12876:	d1e7      	bne.n	12848 <__lesf2+0x2c>
   12878:	2000      	movs	r0, #0
   1287a:	2e00      	cmp	r6, #0
   1287c:	d0e9      	beq.n	12852 <__lesf2+0x36>
   1287e:	e7ed      	b.n	1285c <__lesf2+0x40>
   12880:	2d00      	cmp	r5, #0
   12882:	d1e9      	bne.n	12858 <__lesf2+0x3c>
   12884:	e7ea      	b.n	1285c <__lesf2+0x40>
   12886:	42a2      	cmp	r2, r4
   12888:	dc06      	bgt.n	12898 <__lesf2+0x7c>
   1288a:	dbdf      	blt.n	1284c <__lesf2+0x30>
   1288c:	42ae      	cmp	r6, r5
   1288e:	d803      	bhi.n	12898 <__lesf2+0x7c>
   12890:	2000      	movs	r0, #0
   12892:	42ae      	cmp	r6, r5
   12894:	d3da      	bcc.n	1284c <__lesf2+0x30>
   12896:	e7dc      	b.n	12852 <__lesf2+0x36>
   12898:	2001      	movs	r0, #1
   1289a:	4249      	negs	r1, r1
   1289c:	4308      	orrs	r0, r1
   1289e:	e7d8      	b.n	12852 <__lesf2+0x36>

000128a0 <__aeabi_fmul>:
   128a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   128a2:	4657      	mov	r7, sl
   128a4:	464e      	mov	r6, r9
   128a6:	4645      	mov	r5, r8
   128a8:	46de      	mov	lr, fp
   128aa:	b5e0      	push	{r5, r6, r7, lr}
   128ac:	0247      	lsls	r7, r0, #9
   128ae:	0046      	lsls	r6, r0, #1
   128b0:	4688      	mov	r8, r1
   128b2:	0a7f      	lsrs	r7, r7, #9
   128b4:	0e36      	lsrs	r6, r6, #24
   128b6:	0fc4      	lsrs	r4, r0, #31
   128b8:	2e00      	cmp	r6, #0
   128ba:	d047      	beq.n	1294c <__aeabi_fmul+0xac>
   128bc:	2eff      	cmp	r6, #255	; 0xff
   128be:	d024      	beq.n	1290a <__aeabi_fmul+0x6a>
   128c0:	00fb      	lsls	r3, r7, #3
   128c2:	2780      	movs	r7, #128	; 0x80
   128c4:	04ff      	lsls	r7, r7, #19
   128c6:	431f      	orrs	r7, r3
   128c8:	2300      	movs	r3, #0
   128ca:	4699      	mov	r9, r3
   128cc:	469a      	mov	sl, r3
   128ce:	3e7f      	subs	r6, #127	; 0x7f
   128d0:	4643      	mov	r3, r8
   128d2:	025d      	lsls	r5, r3, #9
   128d4:	0058      	lsls	r0, r3, #1
   128d6:	0fdb      	lsrs	r3, r3, #31
   128d8:	0a6d      	lsrs	r5, r5, #9
   128da:	0e00      	lsrs	r0, r0, #24
   128dc:	4698      	mov	r8, r3
   128de:	d043      	beq.n	12968 <__aeabi_fmul+0xc8>
   128e0:	28ff      	cmp	r0, #255	; 0xff
   128e2:	d03b      	beq.n	1295c <__aeabi_fmul+0xbc>
   128e4:	00eb      	lsls	r3, r5, #3
   128e6:	2580      	movs	r5, #128	; 0x80
   128e8:	2200      	movs	r2, #0
   128ea:	04ed      	lsls	r5, r5, #19
   128ec:	431d      	orrs	r5, r3
   128ee:	387f      	subs	r0, #127	; 0x7f
   128f0:	1836      	adds	r6, r6, r0
   128f2:	1c73      	adds	r3, r6, #1
   128f4:	4641      	mov	r1, r8
   128f6:	469b      	mov	fp, r3
   128f8:	464b      	mov	r3, r9
   128fa:	4061      	eors	r1, r4
   128fc:	4313      	orrs	r3, r2
   128fe:	2b0f      	cmp	r3, #15
   12900:	d864      	bhi.n	129cc <__aeabi_fmul+0x12c>
   12902:	4875      	ldr	r0, [pc, #468]	; (12ad8 <__aeabi_fmul+0x238>)
   12904:	009b      	lsls	r3, r3, #2
   12906:	58c3      	ldr	r3, [r0, r3]
   12908:	469f      	mov	pc, r3
   1290a:	2f00      	cmp	r7, #0
   1290c:	d142      	bne.n	12994 <__aeabi_fmul+0xf4>
   1290e:	2308      	movs	r3, #8
   12910:	4699      	mov	r9, r3
   12912:	3b06      	subs	r3, #6
   12914:	26ff      	movs	r6, #255	; 0xff
   12916:	469a      	mov	sl, r3
   12918:	e7da      	b.n	128d0 <__aeabi_fmul+0x30>
   1291a:	4641      	mov	r1, r8
   1291c:	2a02      	cmp	r2, #2
   1291e:	d028      	beq.n	12972 <__aeabi_fmul+0xd2>
   12920:	2a03      	cmp	r2, #3
   12922:	d100      	bne.n	12926 <__aeabi_fmul+0x86>
   12924:	e0ce      	b.n	12ac4 <__aeabi_fmul+0x224>
   12926:	2a01      	cmp	r2, #1
   12928:	d000      	beq.n	1292c <__aeabi_fmul+0x8c>
   1292a:	e0ac      	b.n	12a86 <__aeabi_fmul+0x1e6>
   1292c:	4011      	ands	r1, r2
   1292e:	2000      	movs	r0, #0
   12930:	2200      	movs	r2, #0
   12932:	b2cc      	uxtb	r4, r1
   12934:	0240      	lsls	r0, r0, #9
   12936:	05d2      	lsls	r2, r2, #23
   12938:	0a40      	lsrs	r0, r0, #9
   1293a:	07e4      	lsls	r4, r4, #31
   1293c:	4310      	orrs	r0, r2
   1293e:	4320      	orrs	r0, r4
   12940:	bc3c      	pop	{r2, r3, r4, r5}
   12942:	4690      	mov	r8, r2
   12944:	4699      	mov	r9, r3
   12946:	46a2      	mov	sl, r4
   12948:	46ab      	mov	fp, r5
   1294a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1294c:	2f00      	cmp	r7, #0
   1294e:	d115      	bne.n	1297c <__aeabi_fmul+0xdc>
   12950:	2304      	movs	r3, #4
   12952:	4699      	mov	r9, r3
   12954:	3b03      	subs	r3, #3
   12956:	2600      	movs	r6, #0
   12958:	469a      	mov	sl, r3
   1295a:	e7b9      	b.n	128d0 <__aeabi_fmul+0x30>
   1295c:	20ff      	movs	r0, #255	; 0xff
   1295e:	2202      	movs	r2, #2
   12960:	2d00      	cmp	r5, #0
   12962:	d0c5      	beq.n	128f0 <__aeabi_fmul+0x50>
   12964:	2203      	movs	r2, #3
   12966:	e7c3      	b.n	128f0 <__aeabi_fmul+0x50>
   12968:	2d00      	cmp	r5, #0
   1296a:	d119      	bne.n	129a0 <__aeabi_fmul+0x100>
   1296c:	2000      	movs	r0, #0
   1296e:	2201      	movs	r2, #1
   12970:	e7be      	b.n	128f0 <__aeabi_fmul+0x50>
   12972:	2401      	movs	r4, #1
   12974:	22ff      	movs	r2, #255	; 0xff
   12976:	400c      	ands	r4, r1
   12978:	2000      	movs	r0, #0
   1297a:	e7db      	b.n	12934 <__aeabi_fmul+0x94>
   1297c:	0038      	movs	r0, r7
   1297e:	f002 f8a3 	bl	14ac8 <__clzsi2>
   12982:	2676      	movs	r6, #118	; 0x76
   12984:	1f43      	subs	r3, r0, #5
   12986:	409f      	lsls	r7, r3
   12988:	2300      	movs	r3, #0
   1298a:	4276      	negs	r6, r6
   1298c:	1a36      	subs	r6, r6, r0
   1298e:	4699      	mov	r9, r3
   12990:	469a      	mov	sl, r3
   12992:	e79d      	b.n	128d0 <__aeabi_fmul+0x30>
   12994:	230c      	movs	r3, #12
   12996:	4699      	mov	r9, r3
   12998:	3b09      	subs	r3, #9
   1299a:	26ff      	movs	r6, #255	; 0xff
   1299c:	469a      	mov	sl, r3
   1299e:	e797      	b.n	128d0 <__aeabi_fmul+0x30>
   129a0:	0028      	movs	r0, r5
   129a2:	f002 f891 	bl	14ac8 <__clzsi2>
   129a6:	1f43      	subs	r3, r0, #5
   129a8:	409d      	lsls	r5, r3
   129aa:	2376      	movs	r3, #118	; 0x76
   129ac:	425b      	negs	r3, r3
   129ae:	1a18      	subs	r0, r3, r0
   129b0:	2200      	movs	r2, #0
   129b2:	e79d      	b.n	128f0 <__aeabi_fmul+0x50>
   129b4:	2080      	movs	r0, #128	; 0x80
   129b6:	2400      	movs	r4, #0
   129b8:	03c0      	lsls	r0, r0, #15
   129ba:	22ff      	movs	r2, #255	; 0xff
   129bc:	e7ba      	b.n	12934 <__aeabi_fmul+0x94>
   129be:	003d      	movs	r5, r7
   129c0:	4652      	mov	r2, sl
   129c2:	e7ab      	b.n	1291c <__aeabi_fmul+0x7c>
   129c4:	003d      	movs	r5, r7
   129c6:	0021      	movs	r1, r4
   129c8:	4652      	mov	r2, sl
   129ca:	e7a7      	b.n	1291c <__aeabi_fmul+0x7c>
   129cc:	0c3b      	lsrs	r3, r7, #16
   129ce:	469c      	mov	ip, r3
   129d0:	042a      	lsls	r2, r5, #16
   129d2:	0c12      	lsrs	r2, r2, #16
   129d4:	0c2b      	lsrs	r3, r5, #16
   129d6:	0014      	movs	r4, r2
   129d8:	4660      	mov	r0, ip
   129da:	4665      	mov	r5, ip
   129dc:	043f      	lsls	r7, r7, #16
   129de:	0c3f      	lsrs	r7, r7, #16
   129e0:	437c      	muls	r4, r7
   129e2:	4342      	muls	r2, r0
   129e4:	435d      	muls	r5, r3
   129e6:	437b      	muls	r3, r7
   129e8:	0c27      	lsrs	r7, r4, #16
   129ea:	189b      	adds	r3, r3, r2
   129ec:	18ff      	adds	r7, r7, r3
   129ee:	42ba      	cmp	r2, r7
   129f0:	d903      	bls.n	129fa <__aeabi_fmul+0x15a>
   129f2:	2380      	movs	r3, #128	; 0x80
   129f4:	025b      	lsls	r3, r3, #9
   129f6:	469c      	mov	ip, r3
   129f8:	4465      	add	r5, ip
   129fa:	0424      	lsls	r4, r4, #16
   129fc:	043a      	lsls	r2, r7, #16
   129fe:	0c24      	lsrs	r4, r4, #16
   12a00:	1912      	adds	r2, r2, r4
   12a02:	0193      	lsls	r3, r2, #6
   12a04:	1e5c      	subs	r4, r3, #1
   12a06:	41a3      	sbcs	r3, r4
   12a08:	0c3f      	lsrs	r7, r7, #16
   12a0a:	0e92      	lsrs	r2, r2, #26
   12a0c:	197d      	adds	r5, r7, r5
   12a0e:	431a      	orrs	r2, r3
   12a10:	01ad      	lsls	r5, r5, #6
   12a12:	4315      	orrs	r5, r2
   12a14:	012b      	lsls	r3, r5, #4
   12a16:	d504      	bpl.n	12a22 <__aeabi_fmul+0x182>
   12a18:	2301      	movs	r3, #1
   12a1a:	465e      	mov	r6, fp
   12a1c:	086a      	lsrs	r2, r5, #1
   12a1e:	401d      	ands	r5, r3
   12a20:	4315      	orrs	r5, r2
   12a22:	0032      	movs	r2, r6
   12a24:	327f      	adds	r2, #127	; 0x7f
   12a26:	2a00      	cmp	r2, #0
   12a28:	dd25      	ble.n	12a76 <__aeabi_fmul+0x1d6>
   12a2a:	076b      	lsls	r3, r5, #29
   12a2c:	d004      	beq.n	12a38 <__aeabi_fmul+0x198>
   12a2e:	230f      	movs	r3, #15
   12a30:	402b      	ands	r3, r5
   12a32:	2b04      	cmp	r3, #4
   12a34:	d000      	beq.n	12a38 <__aeabi_fmul+0x198>
   12a36:	3504      	adds	r5, #4
   12a38:	012b      	lsls	r3, r5, #4
   12a3a:	d503      	bpl.n	12a44 <__aeabi_fmul+0x1a4>
   12a3c:	0032      	movs	r2, r6
   12a3e:	4b27      	ldr	r3, [pc, #156]	; (12adc <__aeabi_fmul+0x23c>)
   12a40:	3280      	adds	r2, #128	; 0x80
   12a42:	401d      	ands	r5, r3
   12a44:	2afe      	cmp	r2, #254	; 0xfe
   12a46:	dc94      	bgt.n	12972 <__aeabi_fmul+0xd2>
   12a48:	2401      	movs	r4, #1
   12a4a:	01a8      	lsls	r0, r5, #6
   12a4c:	0a40      	lsrs	r0, r0, #9
   12a4e:	b2d2      	uxtb	r2, r2
   12a50:	400c      	ands	r4, r1
   12a52:	e76f      	b.n	12934 <__aeabi_fmul+0x94>
   12a54:	2080      	movs	r0, #128	; 0x80
   12a56:	03c0      	lsls	r0, r0, #15
   12a58:	4207      	tst	r7, r0
   12a5a:	d007      	beq.n	12a6c <__aeabi_fmul+0x1cc>
   12a5c:	4205      	tst	r5, r0
   12a5e:	d105      	bne.n	12a6c <__aeabi_fmul+0x1cc>
   12a60:	4328      	orrs	r0, r5
   12a62:	0240      	lsls	r0, r0, #9
   12a64:	0a40      	lsrs	r0, r0, #9
   12a66:	4644      	mov	r4, r8
   12a68:	22ff      	movs	r2, #255	; 0xff
   12a6a:	e763      	b.n	12934 <__aeabi_fmul+0x94>
   12a6c:	4338      	orrs	r0, r7
   12a6e:	0240      	lsls	r0, r0, #9
   12a70:	0a40      	lsrs	r0, r0, #9
   12a72:	22ff      	movs	r2, #255	; 0xff
   12a74:	e75e      	b.n	12934 <__aeabi_fmul+0x94>
   12a76:	2401      	movs	r4, #1
   12a78:	1aa3      	subs	r3, r4, r2
   12a7a:	2b1b      	cmp	r3, #27
   12a7c:	dd05      	ble.n	12a8a <__aeabi_fmul+0x1ea>
   12a7e:	400c      	ands	r4, r1
   12a80:	2200      	movs	r2, #0
   12a82:	2000      	movs	r0, #0
   12a84:	e756      	b.n	12934 <__aeabi_fmul+0x94>
   12a86:	465e      	mov	r6, fp
   12a88:	e7cb      	b.n	12a22 <__aeabi_fmul+0x182>
   12a8a:	002a      	movs	r2, r5
   12a8c:	2020      	movs	r0, #32
   12a8e:	40da      	lsrs	r2, r3
   12a90:	1ac3      	subs	r3, r0, r3
   12a92:	409d      	lsls	r5, r3
   12a94:	002b      	movs	r3, r5
   12a96:	1e5d      	subs	r5, r3, #1
   12a98:	41ab      	sbcs	r3, r5
   12a9a:	4313      	orrs	r3, r2
   12a9c:	075a      	lsls	r2, r3, #29
   12a9e:	d004      	beq.n	12aaa <__aeabi_fmul+0x20a>
   12aa0:	220f      	movs	r2, #15
   12aa2:	401a      	ands	r2, r3
   12aa4:	2a04      	cmp	r2, #4
   12aa6:	d000      	beq.n	12aaa <__aeabi_fmul+0x20a>
   12aa8:	3304      	adds	r3, #4
   12aaa:	015a      	lsls	r2, r3, #5
   12aac:	d504      	bpl.n	12ab8 <__aeabi_fmul+0x218>
   12aae:	2401      	movs	r4, #1
   12ab0:	2201      	movs	r2, #1
   12ab2:	400c      	ands	r4, r1
   12ab4:	2000      	movs	r0, #0
   12ab6:	e73d      	b.n	12934 <__aeabi_fmul+0x94>
   12ab8:	2401      	movs	r4, #1
   12aba:	019b      	lsls	r3, r3, #6
   12abc:	0a58      	lsrs	r0, r3, #9
   12abe:	400c      	ands	r4, r1
   12ac0:	2200      	movs	r2, #0
   12ac2:	e737      	b.n	12934 <__aeabi_fmul+0x94>
   12ac4:	2080      	movs	r0, #128	; 0x80
   12ac6:	2401      	movs	r4, #1
   12ac8:	03c0      	lsls	r0, r0, #15
   12aca:	4328      	orrs	r0, r5
   12acc:	0240      	lsls	r0, r0, #9
   12ace:	0a40      	lsrs	r0, r0, #9
   12ad0:	400c      	ands	r4, r1
   12ad2:	22ff      	movs	r2, #255	; 0xff
   12ad4:	e72e      	b.n	12934 <__aeabi_fmul+0x94>
   12ad6:	46c0      	nop			; (mov r8, r8)
   12ad8:	00017428 	.word	0x00017428
   12adc:	f7ffffff 	.word	0xf7ffffff

00012ae0 <__aeabi_fsub>:
   12ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
   12ae2:	464f      	mov	r7, r9
   12ae4:	46d6      	mov	lr, sl
   12ae6:	4646      	mov	r6, r8
   12ae8:	0044      	lsls	r4, r0, #1
   12aea:	b5c0      	push	{r6, r7, lr}
   12aec:	0fc2      	lsrs	r2, r0, #31
   12aee:	0247      	lsls	r7, r0, #9
   12af0:	0248      	lsls	r0, r1, #9
   12af2:	0a40      	lsrs	r0, r0, #9
   12af4:	4684      	mov	ip, r0
   12af6:	4666      	mov	r6, ip
   12af8:	0a7b      	lsrs	r3, r7, #9
   12afa:	0048      	lsls	r0, r1, #1
   12afc:	0fc9      	lsrs	r1, r1, #31
   12afe:	469a      	mov	sl, r3
   12b00:	0e24      	lsrs	r4, r4, #24
   12b02:	0015      	movs	r5, r2
   12b04:	00db      	lsls	r3, r3, #3
   12b06:	0e00      	lsrs	r0, r0, #24
   12b08:	4689      	mov	r9, r1
   12b0a:	00f6      	lsls	r6, r6, #3
   12b0c:	28ff      	cmp	r0, #255	; 0xff
   12b0e:	d100      	bne.n	12b12 <__aeabi_fsub+0x32>
   12b10:	e08f      	b.n	12c32 <__aeabi_fsub+0x152>
   12b12:	2101      	movs	r1, #1
   12b14:	464f      	mov	r7, r9
   12b16:	404f      	eors	r7, r1
   12b18:	0039      	movs	r1, r7
   12b1a:	4291      	cmp	r1, r2
   12b1c:	d066      	beq.n	12bec <__aeabi_fsub+0x10c>
   12b1e:	1a22      	subs	r2, r4, r0
   12b20:	2a00      	cmp	r2, #0
   12b22:	dc00      	bgt.n	12b26 <__aeabi_fsub+0x46>
   12b24:	e09d      	b.n	12c62 <__aeabi_fsub+0x182>
   12b26:	2800      	cmp	r0, #0
   12b28:	d13d      	bne.n	12ba6 <__aeabi_fsub+0xc6>
   12b2a:	2e00      	cmp	r6, #0
   12b2c:	d100      	bne.n	12b30 <__aeabi_fsub+0x50>
   12b2e:	e08b      	b.n	12c48 <__aeabi_fsub+0x168>
   12b30:	1e51      	subs	r1, r2, #1
   12b32:	2900      	cmp	r1, #0
   12b34:	d000      	beq.n	12b38 <__aeabi_fsub+0x58>
   12b36:	e0b5      	b.n	12ca4 <__aeabi_fsub+0x1c4>
   12b38:	2401      	movs	r4, #1
   12b3a:	1b9b      	subs	r3, r3, r6
   12b3c:	015a      	lsls	r2, r3, #5
   12b3e:	d544      	bpl.n	12bca <__aeabi_fsub+0xea>
   12b40:	019b      	lsls	r3, r3, #6
   12b42:	099f      	lsrs	r7, r3, #6
   12b44:	0038      	movs	r0, r7
   12b46:	f001 ffbf 	bl	14ac8 <__clzsi2>
   12b4a:	3805      	subs	r0, #5
   12b4c:	4087      	lsls	r7, r0
   12b4e:	4284      	cmp	r4, r0
   12b50:	dd00      	ble.n	12b54 <__aeabi_fsub+0x74>
   12b52:	e096      	b.n	12c82 <__aeabi_fsub+0x1a2>
   12b54:	1b04      	subs	r4, r0, r4
   12b56:	003a      	movs	r2, r7
   12b58:	2020      	movs	r0, #32
   12b5a:	3401      	adds	r4, #1
   12b5c:	40e2      	lsrs	r2, r4
   12b5e:	1b04      	subs	r4, r0, r4
   12b60:	40a7      	lsls	r7, r4
   12b62:	003b      	movs	r3, r7
   12b64:	1e5f      	subs	r7, r3, #1
   12b66:	41bb      	sbcs	r3, r7
   12b68:	2400      	movs	r4, #0
   12b6a:	4313      	orrs	r3, r2
   12b6c:	075a      	lsls	r2, r3, #29
   12b6e:	d004      	beq.n	12b7a <__aeabi_fsub+0x9a>
   12b70:	220f      	movs	r2, #15
   12b72:	401a      	ands	r2, r3
   12b74:	2a04      	cmp	r2, #4
   12b76:	d000      	beq.n	12b7a <__aeabi_fsub+0x9a>
   12b78:	3304      	adds	r3, #4
   12b7a:	015a      	lsls	r2, r3, #5
   12b7c:	d527      	bpl.n	12bce <__aeabi_fsub+0xee>
   12b7e:	3401      	adds	r4, #1
   12b80:	2cff      	cmp	r4, #255	; 0xff
   12b82:	d100      	bne.n	12b86 <__aeabi_fsub+0xa6>
   12b84:	e079      	b.n	12c7a <__aeabi_fsub+0x19a>
   12b86:	2201      	movs	r2, #1
   12b88:	019b      	lsls	r3, r3, #6
   12b8a:	0a5b      	lsrs	r3, r3, #9
   12b8c:	b2e4      	uxtb	r4, r4
   12b8e:	402a      	ands	r2, r5
   12b90:	025b      	lsls	r3, r3, #9
   12b92:	05e4      	lsls	r4, r4, #23
   12b94:	0a58      	lsrs	r0, r3, #9
   12b96:	07d2      	lsls	r2, r2, #31
   12b98:	4320      	orrs	r0, r4
   12b9a:	4310      	orrs	r0, r2
   12b9c:	bc1c      	pop	{r2, r3, r4}
   12b9e:	4690      	mov	r8, r2
   12ba0:	4699      	mov	r9, r3
   12ba2:	46a2      	mov	sl, r4
   12ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12ba6:	2cff      	cmp	r4, #255	; 0xff
   12ba8:	d0e0      	beq.n	12b6c <__aeabi_fsub+0x8c>
   12baa:	2180      	movs	r1, #128	; 0x80
   12bac:	04c9      	lsls	r1, r1, #19
   12bae:	430e      	orrs	r6, r1
   12bb0:	2a1b      	cmp	r2, #27
   12bb2:	dc7b      	bgt.n	12cac <__aeabi_fsub+0x1cc>
   12bb4:	0031      	movs	r1, r6
   12bb6:	2020      	movs	r0, #32
   12bb8:	40d1      	lsrs	r1, r2
   12bba:	1a82      	subs	r2, r0, r2
   12bbc:	4096      	lsls	r6, r2
   12bbe:	1e72      	subs	r2, r6, #1
   12bc0:	4196      	sbcs	r6, r2
   12bc2:	430e      	orrs	r6, r1
   12bc4:	1b9b      	subs	r3, r3, r6
   12bc6:	015a      	lsls	r2, r3, #5
   12bc8:	d4ba      	bmi.n	12b40 <__aeabi_fsub+0x60>
   12bca:	075a      	lsls	r2, r3, #29
   12bcc:	d1d0      	bne.n	12b70 <__aeabi_fsub+0x90>
   12bce:	2201      	movs	r2, #1
   12bd0:	08df      	lsrs	r7, r3, #3
   12bd2:	402a      	ands	r2, r5
   12bd4:	2cff      	cmp	r4, #255	; 0xff
   12bd6:	d133      	bne.n	12c40 <__aeabi_fsub+0x160>
   12bd8:	2f00      	cmp	r7, #0
   12bda:	d100      	bne.n	12bde <__aeabi_fsub+0xfe>
   12bdc:	e0a8      	b.n	12d30 <__aeabi_fsub+0x250>
   12bde:	2380      	movs	r3, #128	; 0x80
   12be0:	03db      	lsls	r3, r3, #15
   12be2:	433b      	orrs	r3, r7
   12be4:	025b      	lsls	r3, r3, #9
   12be6:	0a5b      	lsrs	r3, r3, #9
   12be8:	24ff      	movs	r4, #255	; 0xff
   12bea:	e7d1      	b.n	12b90 <__aeabi_fsub+0xb0>
   12bec:	1a21      	subs	r1, r4, r0
   12bee:	2900      	cmp	r1, #0
   12bf0:	dd4c      	ble.n	12c8c <__aeabi_fsub+0x1ac>
   12bf2:	2800      	cmp	r0, #0
   12bf4:	d02a      	beq.n	12c4c <__aeabi_fsub+0x16c>
   12bf6:	2cff      	cmp	r4, #255	; 0xff
   12bf8:	d0b8      	beq.n	12b6c <__aeabi_fsub+0x8c>
   12bfa:	2080      	movs	r0, #128	; 0x80
   12bfc:	04c0      	lsls	r0, r0, #19
   12bfe:	4306      	orrs	r6, r0
   12c00:	291b      	cmp	r1, #27
   12c02:	dd00      	ble.n	12c06 <__aeabi_fsub+0x126>
   12c04:	e0af      	b.n	12d66 <__aeabi_fsub+0x286>
   12c06:	0030      	movs	r0, r6
   12c08:	2720      	movs	r7, #32
   12c0a:	40c8      	lsrs	r0, r1
   12c0c:	1a79      	subs	r1, r7, r1
   12c0e:	408e      	lsls	r6, r1
   12c10:	1e71      	subs	r1, r6, #1
   12c12:	418e      	sbcs	r6, r1
   12c14:	4306      	orrs	r6, r0
   12c16:	199b      	adds	r3, r3, r6
   12c18:	0159      	lsls	r1, r3, #5
   12c1a:	d5d6      	bpl.n	12bca <__aeabi_fsub+0xea>
   12c1c:	3401      	adds	r4, #1
   12c1e:	2cff      	cmp	r4, #255	; 0xff
   12c20:	d100      	bne.n	12c24 <__aeabi_fsub+0x144>
   12c22:	e085      	b.n	12d30 <__aeabi_fsub+0x250>
   12c24:	2201      	movs	r2, #1
   12c26:	497a      	ldr	r1, [pc, #488]	; (12e10 <__aeabi_fsub+0x330>)
   12c28:	401a      	ands	r2, r3
   12c2a:	085b      	lsrs	r3, r3, #1
   12c2c:	400b      	ands	r3, r1
   12c2e:	4313      	orrs	r3, r2
   12c30:	e79c      	b.n	12b6c <__aeabi_fsub+0x8c>
   12c32:	2e00      	cmp	r6, #0
   12c34:	d000      	beq.n	12c38 <__aeabi_fsub+0x158>
   12c36:	e770      	b.n	12b1a <__aeabi_fsub+0x3a>
   12c38:	e76b      	b.n	12b12 <__aeabi_fsub+0x32>
   12c3a:	1e3b      	subs	r3, r7, #0
   12c3c:	d1c5      	bne.n	12bca <__aeabi_fsub+0xea>
   12c3e:	2200      	movs	r2, #0
   12c40:	027b      	lsls	r3, r7, #9
   12c42:	0a5b      	lsrs	r3, r3, #9
   12c44:	b2e4      	uxtb	r4, r4
   12c46:	e7a3      	b.n	12b90 <__aeabi_fsub+0xb0>
   12c48:	0014      	movs	r4, r2
   12c4a:	e78f      	b.n	12b6c <__aeabi_fsub+0x8c>
   12c4c:	2e00      	cmp	r6, #0
   12c4e:	d04d      	beq.n	12cec <__aeabi_fsub+0x20c>
   12c50:	1e48      	subs	r0, r1, #1
   12c52:	2800      	cmp	r0, #0
   12c54:	d157      	bne.n	12d06 <__aeabi_fsub+0x226>
   12c56:	199b      	adds	r3, r3, r6
   12c58:	2401      	movs	r4, #1
   12c5a:	015a      	lsls	r2, r3, #5
   12c5c:	d5b5      	bpl.n	12bca <__aeabi_fsub+0xea>
   12c5e:	2402      	movs	r4, #2
   12c60:	e7e0      	b.n	12c24 <__aeabi_fsub+0x144>
   12c62:	2a00      	cmp	r2, #0
   12c64:	d125      	bne.n	12cb2 <__aeabi_fsub+0x1d2>
   12c66:	1c62      	adds	r2, r4, #1
   12c68:	b2d2      	uxtb	r2, r2
   12c6a:	2a01      	cmp	r2, #1
   12c6c:	dd72      	ble.n	12d54 <__aeabi_fsub+0x274>
   12c6e:	1b9f      	subs	r7, r3, r6
   12c70:	017a      	lsls	r2, r7, #5
   12c72:	d535      	bpl.n	12ce0 <__aeabi_fsub+0x200>
   12c74:	1af7      	subs	r7, r6, r3
   12c76:	000d      	movs	r5, r1
   12c78:	e764      	b.n	12b44 <__aeabi_fsub+0x64>
   12c7a:	2201      	movs	r2, #1
   12c7c:	2300      	movs	r3, #0
   12c7e:	402a      	ands	r2, r5
   12c80:	e786      	b.n	12b90 <__aeabi_fsub+0xb0>
   12c82:	003b      	movs	r3, r7
   12c84:	4a63      	ldr	r2, [pc, #396]	; (12e14 <__aeabi_fsub+0x334>)
   12c86:	1a24      	subs	r4, r4, r0
   12c88:	4013      	ands	r3, r2
   12c8a:	e76f      	b.n	12b6c <__aeabi_fsub+0x8c>
   12c8c:	2900      	cmp	r1, #0
   12c8e:	d16c      	bne.n	12d6a <__aeabi_fsub+0x28a>
   12c90:	1c61      	adds	r1, r4, #1
   12c92:	b2c8      	uxtb	r0, r1
   12c94:	2801      	cmp	r0, #1
   12c96:	dd4e      	ble.n	12d36 <__aeabi_fsub+0x256>
   12c98:	29ff      	cmp	r1, #255	; 0xff
   12c9a:	d049      	beq.n	12d30 <__aeabi_fsub+0x250>
   12c9c:	199b      	adds	r3, r3, r6
   12c9e:	085b      	lsrs	r3, r3, #1
   12ca0:	000c      	movs	r4, r1
   12ca2:	e763      	b.n	12b6c <__aeabi_fsub+0x8c>
   12ca4:	2aff      	cmp	r2, #255	; 0xff
   12ca6:	d041      	beq.n	12d2c <__aeabi_fsub+0x24c>
   12ca8:	000a      	movs	r2, r1
   12caa:	e781      	b.n	12bb0 <__aeabi_fsub+0xd0>
   12cac:	2601      	movs	r6, #1
   12cae:	1b9b      	subs	r3, r3, r6
   12cb0:	e789      	b.n	12bc6 <__aeabi_fsub+0xe6>
   12cb2:	2c00      	cmp	r4, #0
   12cb4:	d01c      	beq.n	12cf0 <__aeabi_fsub+0x210>
   12cb6:	28ff      	cmp	r0, #255	; 0xff
   12cb8:	d021      	beq.n	12cfe <__aeabi_fsub+0x21e>
   12cba:	2480      	movs	r4, #128	; 0x80
   12cbc:	04e4      	lsls	r4, r4, #19
   12cbe:	4252      	negs	r2, r2
   12cc0:	4323      	orrs	r3, r4
   12cc2:	2a1b      	cmp	r2, #27
   12cc4:	dd00      	ble.n	12cc8 <__aeabi_fsub+0x1e8>
   12cc6:	e096      	b.n	12df6 <__aeabi_fsub+0x316>
   12cc8:	001c      	movs	r4, r3
   12cca:	2520      	movs	r5, #32
   12ccc:	40d4      	lsrs	r4, r2
   12cce:	1aaa      	subs	r2, r5, r2
   12cd0:	4093      	lsls	r3, r2
   12cd2:	1e5a      	subs	r2, r3, #1
   12cd4:	4193      	sbcs	r3, r2
   12cd6:	4323      	orrs	r3, r4
   12cd8:	1af3      	subs	r3, r6, r3
   12cda:	0004      	movs	r4, r0
   12cdc:	000d      	movs	r5, r1
   12cde:	e72d      	b.n	12b3c <__aeabi_fsub+0x5c>
   12ce0:	2f00      	cmp	r7, #0
   12ce2:	d000      	beq.n	12ce6 <__aeabi_fsub+0x206>
   12ce4:	e72e      	b.n	12b44 <__aeabi_fsub+0x64>
   12ce6:	2200      	movs	r2, #0
   12ce8:	2400      	movs	r4, #0
   12cea:	e7a9      	b.n	12c40 <__aeabi_fsub+0x160>
   12cec:	000c      	movs	r4, r1
   12cee:	e73d      	b.n	12b6c <__aeabi_fsub+0x8c>
   12cf0:	2b00      	cmp	r3, #0
   12cf2:	d058      	beq.n	12da6 <__aeabi_fsub+0x2c6>
   12cf4:	43d2      	mvns	r2, r2
   12cf6:	2a00      	cmp	r2, #0
   12cf8:	d0ee      	beq.n	12cd8 <__aeabi_fsub+0x1f8>
   12cfa:	28ff      	cmp	r0, #255	; 0xff
   12cfc:	d1e1      	bne.n	12cc2 <__aeabi_fsub+0x1e2>
   12cfe:	0033      	movs	r3, r6
   12d00:	24ff      	movs	r4, #255	; 0xff
   12d02:	000d      	movs	r5, r1
   12d04:	e732      	b.n	12b6c <__aeabi_fsub+0x8c>
   12d06:	29ff      	cmp	r1, #255	; 0xff
   12d08:	d010      	beq.n	12d2c <__aeabi_fsub+0x24c>
   12d0a:	0001      	movs	r1, r0
   12d0c:	e778      	b.n	12c00 <__aeabi_fsub+0x120>
   12d0e:	2b00      	cmp	r3, #0
   12d10:	d06e      	beq.n	12df0 <__aeabi_fsub+0x310>
   12d12:	24ff      	movs	r4, #255	; 0xff
   12d14:	2e00      	cmp	r6, #0
   12d16:	d100      	bne.n	12d1a <__aeabi_fsub+0x23a>
   12d18:	e728      	b.n	12b6c <__aeabi_fsub+0x8c>
   12d1a:	2280      	movs	r2, #128	; 0x80
   12d1c:	4651      	mov	r1, sl
   12d1e:	03d2      	lsls	r2, r2, #15
   12d20:	4211      	tst	r1, r2
   12d22:	d003      	beq.n	12d2c <__aeabi_fsub+0x24c>
   12d24:	4661      	mov	r1, ip
   12d26:	4211      	tst	r1, r2
   12d28:	d100      	bne.n	12d2c <__aeabi_fsub+0x24c>
   12d2a:	0033      	movs	r3, r6
   12d2c:	24ff      	movs	r4, #255	; 0xff
   12d2e:	e71d      	b.n	12b6c <__aeabi_fsub+0x8c>
   12d30:	24ff      	movs	r4, #255	; 0xff
   12d32:	2300      	movs	r3, #0
   12d34:	e72c      	b.n	12b90 <__aeabi_fsub+0xb0>
   12d36:	2c00      	cmp	r4, #0
   12d38:	d1e9      	bne.n	12d0e <__aeabi_fsub+0x22e>
   12d3a:	2b00      	cmp	r3, #0
   12d3c:	d063      	beq.n	12e06 <__aeabi_fsub+0x326>
   12d3e:	2e00      	cmp	r6, #0
   12d40:	d100      	bne.n	12d44 <__aeabi_fsub+0x264>
   12d42:	e713      	b.n	12b6c <__aeabi_fsub+0x8c>
   12d44:	199b      	adds	r3, r3, r6
   12d46:	015a      	lsls	r2, r3, #5
   12d48:	d400      	bmi.n	12d4c <__aeabi_fsub+0x26c>
   12d4a:	e73e      	b.n	12bca <__aeabi_fsub+0xea>
   12d4c:	4a31      	ldr	r2, [pc, #196]	; (12e14 <__aeabi_fsub+0x334>)
   12d4e:	000c      	movs	r4, r1
   12d50:	4013      	ands	r3, r2
   12d52:	e70b      	b.n	12b6c <__aeabi_fsub+0x8c>
   12d54:	2c00      	cmp	r4, #0
   12d56:	d11e      	bne.n	12d96 <__aeabi_fsub+0x2b6>
   12d58:	2b00      	cmp	r3, #0
   12d5a:	d12f      	bne.n	12dbc <__aeabi_fsub+0x2dc>
   12d5c:	2e00      	cmp	r6, #0
   12d5e:	d04f      	beq.n	12e00 <__aeabi_fsub+0x320>
   12d60:	0033      	movs	r3, r6
   12d62:	000d      	movs	r5, r1
   12d64:	e702      	b.n	12b6c <__aeabi_fsub+0x8c>
   12d66:	2601      	movs	r6, #1
   12d68:	e755      	b.n	12c16 <__aeabi_fsub+0x136>
   12d6a:	2c00      	cmp	r4, #0
   12d6c:	d11f      	bne.n	12dae <__aeabi_fsub+0x2ce>
   12d6e:	2b00      	cmp	r3, #0
   12d70:	d043      	beq.n	12dfa <__aeabi_fsub+0x31a>
   12d72:	43c9      	mvns	r1, r1
   12d74:	2900      	cmp	r1, #0
   12d76:	d00b      	beq.n	12d90 <__aeabi_fsub+0x2b0>
   12d78:	28ff      	cmp	r0, #255	; 0xff
   12d7a:	d039      	beq.n	12df0 <__aeabi_fsub+0x310>
   12d7c:	291b      	cmp	r1, #27
   12d7e:	dc44      	bgt.n	12e0a <__aeabi_fsub+0x32a>
   12d80:	001c      	movs	r4, r3
   12d82:	2720      	movs	r7, #32
   12d84:	40cc      	lsrs	r4, r1
   12d86:	1a79      	subs	r1, r7, r1
   12d88:	408b      	lsls	r3, r1
   12d8a:	1e59      	subs	r1, r3, #1
   12d8c:	418b      	sbcs	r3, r1
   12d8e:	4323      	orrs	r3, r4
   12d90:	199b      	adds	r3, r3, r6
   12d92:	0004      	movs	r4, r0
   12d94:	e740      	b.n	12c18 <__aeabi_fsub+0x138>
   12d96:	2b00      	cmp	r3, #0
   12d98:	d11a      	bne.n	12dd0 <__aeabi_fsub+0x2f0>
   12d9a:	2e00      	cmp	r6, #0
   12d9c:	d124      	bne.n	12de8 <__aeabi_fsub+0x308>
   12d9e:	2780      	movs	r7, #128	; 0x80
   12da0:	2200      	movs	r2, #0
   12da2:	03ff      	lsls	r7, r7, #15
   12da4:	e71b      	b.n	12bde <__aeabi_fsub+0xfe>
   12da6:	0033      	movs	r3, r6
   12da8:	0004      	movs	r4, r0
   12daa:	000d      	movs	r5, r1
   12dac:	e6de      	b.n	12b6c <__aeabi_fsub+0x8c>
   12dae:	28ff      	cmp	r0, #255	; 0xff
   12db0:	d01e      	beq.n	12df0 <__aeabi_fsub+0x310>
   12db2:	2480      	movs	r4, #128	; 0x80
   12db4:	04e4      	lsls	r4, r4, #19
   12db6:	4249      	negs	r1, r1
   12db8:	4323      	orrs	r3, r4
   12dba:	e7df      	b.n	12d7c <__aeabi_fsub+0x29c>
   12dbc:	2e00      	cmp	r6, #0
   12dbe:	d100      	bne.n	12dc2 <__aeabi_fsub+0x2e2>
   12dc0:	e6d4      	b.n	12b6c <__aeabi_fsub+0x8c>
   12dc2:	1b9f      	subs	r7, r3, r6
   12dc4:	017a      	lsls	r2, r7, #5
   12dc6:	d400      	bmi.n	12dca <__aeabi_fsub+0x2ea>
   12dc8:	e737      	b.n	12c3a <__aeabi_fsub+0x15a>
   12dca:	1af3      	subs	r3, r6, r3
   12dcc:	000d      	movs	r5, r1
   12dce:	e6cd      	b.n	12b6c <__aeabi_fsub+0x8c>
   12dd0:	24ff      	movs	r4, #255	; 0xff
   12dd2:	2e00      	cmp	r6, #0
   12dd4:	d100      	bne.n	12dd8 <__aeabi_fsub+0x2f8>
   12dd6:	e6c9      	b.n	12b6c <__aeabi_fsub+0x8c>
   12dd8:	2280      	movs	r2, #128	; 0x80
   12dda:	4650      	mov	r0, sl
   12ddc:	03d2      	lsls	r2, r2, #15
   12dde:	4210      	tst	r0, r2
   12de0:	d0a4      	beq.n	12d2c <__aeabi_fsub+0x24c>
   12de2:	4660      	mov	r0, ip
   12de4:	4210      	tst	r0, r2
   12de6:	d1a1      	bne.n	12d2c <__aeabi_fsub+0x24c>
   12de8:	0033      	movs	r3, r6
   12dea:	000d      	movs	r5, r1
   12dec:	24ff      	movs	r4, #255	; 0xff
   12dee:	e6bd      	b.n	12b6c <__aeabi_fsub+0x8c>
   12df0:	0033      	movs	r3, r6
   12df2:	24ff      	movs	r4, #255	; 0xff
   12df4:	e6ba      	b.n	12b6c <__aeabi_fsub+0x8c>
   12df6:	2301      	movs	r3, #1
   12df8:	e76e      	b.n	12cd8 <__aeabi_fsub+0x1f8>
   12dfa:	0033      	movs	r3, r6
   12dfc:	0004      	movs	r4, r0
   12dfe:	e6b5      	b.n	12b6c <__aeabi_fsub+0x8c>
   12e00:	2700      	movs	r7, #0
   12e02:	2200      	movs	r2, #0
   12e04:	e71c      	b.n	12c40 <__aeabi_fsub+0x160>
   12e06:	0033      	movs	r3, r6
   12e08:	e6b0      	b.n	12b6c <__aeabi_fsub+0x8c>
   12e0a:	2301      	movs	r3, #1
   12e0c:	e7c0      	b.n	12d90 <__aeabi_fsub+0x2b0>
   12e0e:	46c0      	nop			; (mov r8, r8)
   12e10:	7dffffff 	.word	0x7dffffff
   12e14:	fbffffff 	.word	0xfbffffff

00012e18 <__aeabi_f2iz>:
   12e18:	0241      	lsls	r1, r0, #9
   12e1a:	0043      	lsls	r3, r0, #1
   12e1c:	0fc2      	lsrs	r2, r0, #31
   12e1e:	0a49      	lsrs	r1, r1, #9
   12e20:	0e1b      	lsrs	r3, r3, #24
   12e22:	2000      	movs	r0, #0
   12e24:	2b7e      	cmp	r3, #126	; 0x7e
   12e26:	dd0d      	ble.n	12e44 <__aeabi_f2iz+0x2c>
   12e28:	2b9d      	cmp	r3, #157	; 0x9d
   12e2a:	dc0c      	bgt.n	12e46 <__aeabi_f2iz+0x2e>
   12e2c:	2080      	movs	r0, #128	; 0x80
   12e2e:	0400      	lsls	r0, r0, #16
   12e30:	4301      	orrs	r1, r0
   12e32:	2b95      	cmp	r3, #149	; 0x95
   12e34:	dc0a      	bgt.n	12e4c <__aeabi_f2iz+0x34>
   12e36:	2096      	movs	r0, #150	; 0x96
   12e38:	1ac3      	subs	r3, r0, r3
   12e3a:	40d9      	lsrs	r1, r3
   12e3c:	4248      	negs	r0, r1
   12e3e:	2a00      	cmp	r2, #0
   12e40:	d100      	bne.n	12e44 <__aeabi_f2iz+0x2c>
   12e42:	0008      	movs	r0, r1
   12e44:	4770      	bx	lr
   12e46:	4b03      	ldr	r3, [pc, #12]	; (12e54 <__aeabi_f2iz+0x3c>)
   12e48:	18d0      	adds	r0, r2, r3
   12e4a:	e7fb      	b.n	12e44 <__aeabi_f2iz+0x2c>
   12e4c:	3b96      	subs	r3, #150	; 0x96
   12e4e:	4099      	lsls	r1, r3
   12e50:	e7f4      	b.n	12e3c <__aeabi_f2iz+0x24>
   12e52:	46c0      	nop			; (mov r8, r8)
   12e54:	7fffffff 	.word	0x7fffffff

00012e58 <__aeabi_i2f>:
   12e58:	b570      	push	{r4, r5, r6, lr}
   12e5a:	2800      	cmp	r0, #0
   12e5c:	d030      	beq.n	12ec0 <__aeabi_i2f+0x68>
   12e5e:	17c3      	asrs	r3, r0, #31
   12e60:	18c4      	adds	r4, r0, r3
   12e62:	405c      	eors	r4, r3
   12e64:	0fc5      	lsrs	r5, r0, #31
   12e66:	0020      	movs	r0, r4
   12e68:	f001 fe2e 	bl	14ac8 <__clzsi2>
   12e6c:	239e      	movs	r3, #158	; 0x9e
   12e6e:	1a1b      	subs	r3, r3, r0
   12e70:	2b96      	cmp	r3, #150	; 0x96
   12e72:	dc0d      	bgt.n	12e90 <__aeabi_i2f+0x38>
   12e74:	2296      	movs	r2, #150	; 0x96
   12e76:	1ad2      	subs	r2, r2, r3
   12e78:	4094      	lsls	r4, r2
   12e7a:	002a      	movs	r2, r5
   12e7c:	0264      	lsls	r4, r4, #9
   12e7e:	0a64      	lsrs	r4, r4, #9
   12e80:	b2db      	uxtb	r3, r3
   12e82:	0264      	lsls	r4, r4, #9
   12e84:	05db      	lsls	r3, r3, #23
   12e86:	0a60      	lsrs	r0, r4, #9
   12e88:	07d2      	lsls	r2, r2, #31
   12e8a:	4318      	orrs	r0, r3
   12e8c:	4310      	orrs	r0, r2
   12e8e:	bd70      	pop	{r4, r5, r6, pc}
   12e90:	2b99      	cmp	r3, #153	; 0x99
   12e92:	dc19      	bgt.n	12ec8 <__aeabi_i2f+0x70>
   12e94:	2299      	movs	r2, #153	; 0x99
   12e96:	1ad2      	subs	r2, r2, r3
   12e98:	2a00      	cmp	r2, #0
   12e9a:	dd29      	ble.n	12ef0 <__aeabi_i2f+0x98>
   12e9c:	4094      	lsls	r4, r2
   12e9e:	0022      	movs	r2, r4
   12ea0:	4c14      	ldr	r4, [pc, #80]	; (12ef4 <__aeabi_i2f+0x9c>)
   12ea2:	4014      	ands	r4, r2
   12ea4:	0751      	lsls	r1, r2, #29
   12ea6:	d004      	beq.n	12eb2 <__aeabi_i2f+0x5a>
   12ea8:	210f      	movs	r1, #15
   12eaa:	400a      	ands	r2, r1
   12eac:	2a04      	cmp	r2, #4
   12eae:	d000      	beq.n	12eb2 <__aeabi_i2f+0x5a>
   12eb0:	3404      	adds	r4, #4
   12eb2:	0162      	lsls	r2, r4, #5
   12eb4:	d413      	bmi.n	12ede <__aeabi_i2f+0x86>
   12eb6:	01a4      	lsls	r4, r4, #6
   12eb8:	0a64      	lsrs	r4, r4, #9
   12eba:	b2db      	uxtb	r3, r3
   12ebc:	002a      	movs	r2, r5
   12ebe:	e7e0      	b.n	12e82 <__aeabi_i2f+0x2a>
   12ec0:	2200      	movs	r2, #0
   12ec2:	2300      	movs	r3, #0
   12ec4:	2400      	movs	r4, #0
   12ec6:	e7dc      	b.n	12e82 <__aeabi_i2f+0x2a>
   12ec8:	2205      	movs	r2, #5
   12eca:	0021      	movs	r1, r4
   12ecc:	1a12      	subs	r2, r2, r0
   12ece:	40d1      	lsrs	r1, r2
   12ed0:	22b9      	movs	r2, #185	; 0xb9
   12ed2:	1ad2      	subs	r2, r2, r3
   12ed4:	4094      	lsls	r4, r2
   12ed6:	1e62      	subs	r2, r4, #1
   12ed8:	4194      	sbcs	r4, r2
   12eda:	430c      	orrs	r4, r1
   12edc:	e7da      	b.n	12e94 <__aeabi_i2f+0x3c>
   12ede:	4b05      	ldr	r3, [pc, #20]	; (12ef4 <__aeabi_i2f+0x9c>)
   12ee0:	002a      	movs	r2, r5
   12ee2:	401c      	ands	r4, r3
   12ee4:	239f      	movs	r3, #159	; 0x9f
   12ee6:	01a4      	lsls	r4, r4, #6
   12ee8:	1a1b      	subs	r3, r3, r0
   12eea:	0a64      	lsrs	r4, r4, #9
   12eec:	b2db      	uxtb	r3, r3
   12eee:	e7c8      	b.n	12e82 <__aeabi_i2f+0x2a>
   12ef0:	0022      	movs	r2, r4
   12ef2:	e7d5      	b.n	12ea0 <__aeabi_i2f+0x48>
   12ef4:	fbffffff 	.word	0xfbffffff

00012ef8 <__aeabi_ui2f>:
   12ef8:	b510      	push	{r4, lr}
   12efa:	1e04      	subs	r4, r0, #0
   12efc:	d027      	beq.n	12f4e <__aeabi_ui2f+0x56>
   12efe:	f001 fde3 	bl	14ac8 <__clzsi2>
   12f02:	239e      	movs	r3, #158	; 0x9e
   12f04:	1a1b      	subs	r3, r3, r0
   12f06:	2b96      	cmp	r3, #150	; 0x96
   12f08:	dc0a      	bgt.n	12f20 <__aeabi_ui2f+0x28>
   12f0a:	2296      	movs	r2, #150	; 0x96
   12f0c:	1ad2      	subs	r2, r2, r3
   12f0e:	4094      	lsls	r4, r2
   12f10:	0264      	lsls	r4, r4, #9
   12f12:	0a64      	lsrs	r4, r4, #9
   12f14:	b2db      	uxtb	r3, r3
   12f16:	0264      	lsls	r4, r4, #9
   12f18:	05db      	lsls	r3, r3, #23
   12f1a:	0a60      	lsrs	r0, r4, #9
   12f1c:	4318      	orrs	r0, r3
   12f1e:	bd10      	pop	{r4, pc}
   12f20:	2b99      	cmp	r3, #153	; 0x99
   12f22:	dc17      	bgt.n	12f54 <__aeabi_ui2f+0x5c>
   12f24:	2299      	movs	r2, #153	; 0x99
   12f26:	1ad2      	subs	r2, r2, r3
   12f28:	2a00      	cmp	r2, #0
   12f2a:	dd27      	ble.n	12f7c <__aeabi_ui2f+0x84>
   12f2c:	4094      	lsls	r4, r2
   12f2e:	0022      	movs	r2, r4
   12f30:	4c13      	ldr	r4, [pc, #76]	; (12f80 <__aeabi_ui2f+0x88>)
   12f32:	4014      	ands	r4, r2
   12f34:	0751      	lsls	r1, r2, #29
   12f36:	d004      	beq.n	12f42 <__aeabi_ui2f+0x4a>
   12f38:	210f      	movs	r1, #15
   12f3a:	400a      	ands	r2, r1
   12f3c:	2a04      	cmp	r2, #4
   12f3e:	d000      	beq.n	12f42 <__aeabi_ui2f+0x4a>
   12f40:	3404      	adds	r4, #4
   12f42:	0162      	lsls	r2, r4, #5
   12f44:	d412      	bmi.n	12f6c <__aeabi_ui2f+0x74>
   12f46:	01a4      	lsls	r4, r4, #6
   12f48:	0a64      	lsrs	r4, r4, #9
   12f4a:	b2db      	uxtb	r3, r3
   12f4c:	e7e3      	b.n	12f16 <__aeabi_ui2f+0x1e>
   12f4e:	2300      	movs	r3, #0
   12f50:	2400      	movs	r4, #0
   12f52:	e7e0      	b.n	12f16 <__aeabi_ui2f+0x1e>
   12f54:	22b9      	movs	r2, #185	; 0xb9
   12f56:	0021      	movs	r1, r4
   12f58:	1ad2      	subs	r2, r2, r3
   12f5a:	4091      	lsls	r1, r2
   12f5c:	000a      	movs	r2, r1
   12f5e:	1e51      	subs	r1, r2, #1
   12f60:	418a      	sbcs	r2, r1
   12f62:	2105      	movs	r1, #5
   12f64:	1a09      	subs	r1, r1, r0
   12f66:	40cc      	lsrs	r4, r1
   12f68:	4314      	orrs	r4, r2
   12f6a:	e7db      	b.n	12f24 <__aeabi_ui2f+0x2c>
   12f6c:	4b04      	ldr	r3, [pc, #16]	; (12f80 <__aeabi_ui2f+0x88>)
   12f6e:	401c      	ands	r4, r3
   12f70:	239f      	movs	r3, #159	; 0x9f
   12f72:	01a4      	lsls	r4, r4, #6
   12f74:	1a1b      	subs	r3, r3, r0
   12f76:	0a64      	lsrs	r4, r4, #9
   12f78:	b2db      	uxtb	r3, r3
   12f7a:	e7cc      	b.n	12f16 <__aeabi_ui2f+0x1e>
   12f7c:	0022      	movs	r2, r4
   12f7e:	e7d7      	b.n	12f30 <__aeabi_ui2f+0x38>
   12f80:	fbffffff 	.word	0xfbffffff

00012f84 <__aeabi_dadd>:
   12f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12f86:	4645      	mov	r5, r8
   12f88:	46de      	mov	lr, fp
   12f8a:	4657      	mov	r7, sl
   12f8c:	464e      	mov	r6, r9
   12f8e:	030c      	lsls	r4, r1, #12
   12f90:	b5e0      	push	{r5, r6, r7, lr}
   12f92:	004e      	lsls	r6, r1, #1
   12f94:	0fc9      	lsrs	r1, r1, #31
   12f96:	4688      	mov	r8, r1
   12f98:	000d      	movs	r5, r1
   12f9a:	0a61      	lsrs	r1, r4, #9
   12f9c:	0f44      	lsrs	r4, r0, #29
   12f9e:	430c      	orrs	r4, r1
   12fa0:	00c7      	lsls	r7, r0, #3
   12fa2:	0319      	lsls	r1, r3, #12
   12fa4:	0058      	lsls	r0, r3, #1
   12fa6:	0fdb      	lsrs	r3, r3, #31
   12fa8:	469b      	mov	fp, r3
   12faa:	0a4b      	lsrs	r3, r1, #9
   12fac:	0f51      	lsrs	r1, r2, #29
   12fae:	430b      	orrs	r3, r1
   12fb0:	0d76      	lsrs	r6, r6, #21
   12fb2:	0d40      	lsrs	r0, r0, #21
   12fb4:	0019      	movs	r1, r3
   12fb6:	00d2      	lsls	r2, r2, #3
   12fb8:	45d8      	cmp	r8, fp
   12fba:	d100      	bne.n	12fbe <__aeabi_dadd+0x3a>
   12fbc:	e0ae      	b.n	1311c <__aeabi_dadd+0x198>
   12fbe:	1a35      	subs	r5, r6, r0
   12fc0:	2d00      	cmp	r5, #0
   12fc2:	dc00      	bgt.n	12fc6 <__aeabi_dadd+0x42>
   12fc4:	e0f6      	b.n	131b4 <__aeabi_dadd+0x230>
   12fc6:	2800      	cmp	r0, #0
   12fc8:	d10f      	bne.n	12fea <__aeabi_dadd+0x66>
   12fca:	4313      	orrs	r3, r2
   12fcc:	d100      	bne.n	12fd0 <__aeabi_dadd+0x4c>
   12fce:	e0db      	b.n	13188 <__aeabi_dadd+0x204>
   12fd0:	1e6b      	subs	r3, r5, #1
   12fd2:	2b00      	cmp	r3, #0
   12fd4:	d000      	beq.n	12fd8 <__aeabi_dadd+0x54>
   12fd6:	e137      	b.n	13248 <__aeabi_dadd+0x2c4>
   12fd8:	1aba      	subs	r2, r7, r2
   12fda:	4297      	cmp	r7, r2
   12fdc:	41bf      	sbcs	r7, r7
   12fde:	1a64      	subs	r4, r4, r1
   12fe0:	427f      	negs	r7, r7
   12fe2:	1be4      	subs	r4, r4, r7
   12fe4:	2601      	movs	r6, #1
   12fe6:	0017      	movs	r7, r2
   12fe8:	e024      	b.n	13034 <__aeabi_dadd+0xb0>
   12fea:	4bc6      	ldr	r3, [pc, #792]	; (13304 <__aeabi_dadd+0x380>)
   12fec:	429e      	cmp	r6, r3
   12fee:	d04d      	beq.n	1308c <__aeabi_dadd+0x108>
   12ff0:	2380      	movs	r3, #128	; 0x80
   12ff2:	041b      	lsls	r3, r3, #16
   12ff4:	4319      	orrs	r1, r3
   12ff6:	2d38      	cmp	r5, #56	; 0x38
   12ff8:	dd00      	ble.n	12ffc <__aeabi_dadd+0x78>
   12ffa:	e107      	b.n	1320c <__aeabi_dadd+0x288>
   12ffc:	2d1f      	cmp	r5, #31
   12ffe:	dd00      	ble.n	13002 <__aeabi_dadd+0x7e>
   13000:	e138      	b.n	13274 <__aeabi_dadd+0x2f0>
   13002:	2020      	movs	r0, #32
   13004:	1b43      	subs	r3, r0, r5
   13006:	469a      	mov	sl, r3
   13008:	000b      	movs	r3, r1
   1300a:	4650      	mov	r0, sl
   1300c:	4083      	lsls	r3, r0
   1300e:	4699      	mov	r9, r3
   13010:	0013      	movs	r3, r2
   13012:	4648      	mov	r0, r9
   13014:	40eb      	lsrs	r3, r5
   13016:	4318      	orrs	r0, r3
   13018:	0003      	movs	r3, r0
   1301a:	4650      	mov	r0, sl
   1301c:	4082      	lsls	r2, r0
   1301e:	1e50      	subs	r0, r2, #1
   13020:	4182      	sbcs	r2, r0
   13022:	40e9      	lsrs	r1, r5
   13024:	431a      	orrs	r2, r3
   13026:	1aba      	subs	r2, r7, r2
   13028:	1a61      	subs	r1, r4, r1
   1302a:	4297      	cmp	r7, r2
   1302c:	41a4      	sbcs	r4, r4
   1302e:	0017      	movs	r7, r2
   13030:	4264      	negs	r4, r4
   13032:	1b0c      	subs	r4, r1, r4
   13034:	0223      	lsls	r3, r4, #8
   13036:	d562      	bpl.n	130fe <__aeabi_dadd+0x17a>
   13038:	0264      	lsls	r4, r4, #9
   1303a:	0a65      	lsrs	r5, r4, #9
   1303c:	2d00      	cmp	r5, #0
   1303e:	d100      	bne.n	13042 <__aeabi_dadd+0xbe>
   13040:	e0df      	b.n	13202 <__aeabi_dadd+0x27e>
   13042:	0028      	movs	r0, r5
   13044:	f001 fd40 	bl	14ac8 <__clzsi2>
   13048:	0003      	movs	r3, r0
   1304a:	3b08      	subs	r3, #8
   1304c:	2b1f      	cmp	r3, #31
   1304e:	dd00      	ble.n	13052 <__aeabi_dadd+0xce>
   13050:	e0d2      	b.n	131f8 <__aeabi_dadd+0x274>
   13052:	2220      	movs	r2, #32
   13054:	003c      	movs	r4, r7
   13056:	1ad2      	subs	r2, r2, r3
   13058:	409d      	lsls	r5, r3
   1305a:	40d4      	lsrs	r4, r2
   1305c:	409f      	lsls	r7, r3
   1305e:	4325      	orrs	r5, r4
   13060:	429e      	cmp	r6, r3
   13062:	dd00      	ble.n	13066 <__aeabi_dadd+0xe2>
   13064:	e0c4      	b.n	131f0 <__aeabi_dadd+0x26c>
   13066:	1b9e      	subs	r6, r3, r6
   13068:	1c73      	adds	r3, r6, #1
   1306a:	2b1f      	cmp	r3, #31
   1306c:	dd00      	ble.n	13070 <__aeabi_dadd+0xec>
   1306e:	e0f1      	b.n	13254 <__aeabi_dadd+0x2d0>
   13070:	2220      	movs	r2, #32
   13072:	0038      	movs	r0, r7
   13074:	0029      	movs	r1, r5
   13076:	1ad2      	subs	r2, r2, r3
   13078:	40d8      	lsrs	r0, r3
   1307a:	4091      	lsls	r1, r2
   1307c:	4097      	lsls	r7, r2
   1307e:	002c      	movs	r4, r5
   13080:	4301      	orrs	r1, r0
   13082:	1e78      	subs	r0, r7, #1
   13084:	4187      	sbcs	r7, r0
   13086:	40dc      	lsrs	r4, r3
   13088:	2600      	movs	r6, #0
   1308a:	430f      	orrs	r7, r1
   1308c:	077b      	lsls	r3, r7, #29
   1308e:	d009      	beq.n	130a4 <__aeabi_dadd+0x120>
   13090:	230f      	movs	r3, #15
   13092:	403b      	ands	r3, r7
   13094:	2b04      	cmp	r3, #4
   13096:	d005      	beq.n	130a4 <__aeabi_dadd+0x120>
   13098:	1d3b      	adds	r3, r7, #4
   1309a:	42bb      	cmp	r3, r7
   1309c:	41bf      	sbcs	r7, r7
   1309e:	427f      	negs	r7, r7
   130a0:	19e4      	adds	r4, r4, r7
   130a2:	001f      	movs	r7, r3
   130a4:	0223      	lsls	r3, r4, #8
   130a6:	d52c      	bpl.n	13102 <__aeabi_dadd+0x17e>
   130a8:	4b96      	ldr	r3, [pc, #600]	; (13304 <__aeabi_dadd+0x380>)
   130aa:	3601      	adds	r6, #1
   130ac:	429e      	cmp	r6, r3
   130ae:	d100      	bne.n	130b2 <__aeabi_dadd+0x12e>
   130b0:	e09a      	b.n	131e8 <__aeabi_dadd+0x264>
   130b2:	4645      	mov	r5, r8
   130b4:	4b94      	ldr	r3, [pc, #592]	; (13308 <__aeabi_dadd+0x384>)
   130b6:	08ff      	lsrs	r7, r7, #3
   130b8:	401c      	ands	r4, r3
   130ba:	0760      	lsls	r0, r4, #29
   130bc:	0576      	lsls	r6, r6, #21
   130be:	0264      	lsls	r4, r4, #9
   130c0:	4307      	orrs	r7, r0
   130c2:	0b24      	lsrs	r4, r4, #12
   130c4:	0d76      	lsrs	r6, r6, #21
   130c6:	2100      	movs	r1, #0
   130c8:	0324      	lsls	r4, r4, #12
   130ca:	0b23      	lsrs	r3, r4, #12
   130cc:	0d0c      	lsrs	r4, r1, #20
   130ce:	4a8f      	ldr	r2, [pc, #572]	; (1330c <__aeabi_dadd+0x388>)
   130d0:	0524      	lsls	r4, r4, #20
   130d2:	431c      	orrs	r4, r3
   130d4:	4014      	ands	r4, r2
   130d6:	0533      	lsls	r3, r6, #20
   130d8:	4323      	orrs	r3, r4
   130da:	005b      	lsls	r3, r3, #1
   130dc:	07ed      	lsls	r5, r5, #31
   130de:	085b      	lsrs	r3, r3, #1
   130e0:	432b      	orrs	r3, r5
   130e2:	0038      	movs	r0, r7
   130e4:	0019      	movs	r1, r3
   130e6:	bc3c      	pop	{r2, r3, r4, r5}
   130e8:	4690      	mov	r8, r2
   130ea:	4699      	mov	r9, r3
   130ec:	46a2      	mov	sl, r4
   130ee:	46ab      	mov	fp, r5
   130f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   130f2:	4664      	mov	r4, ip
   130f4:	4304      	orrs	r4, r0
   130f6:	d100      	bne.n	130fa <__aeabi_dadd+0x176>
   130f8:	e211      	b.n	1351e <__aeabi_dadd+0x59a>
   130fa:	0004      	movs	r4, r0
   130fc:	4667      	mov	r7, ip
   130fe:	077b      	lsls	r3, r7, #29
   13100:	d1c6      	bne.n	13090 <__aeabi_dadd+0x10c>
   13102:	4645      	mov	r5, r8
   13104:	0760      	lsls	r0, r4, #29
   13106:	08ff      	lsrs	r7, r7, #3
   13108:	4307      	orrs	r7, r0
   1310a:	08e4      	lsrs	r4, r4, #3
   1310c:	4b7d      	ldr	r3, [pc, #500]	; (13304 <__aeabi_dadd+0x380>)
   1310e:	429e      	cmp	r6, r3
   13110:	d030      	beq.n	13174 <__aeabi_dadd+0x1f0>
   13112:	0324      	lsls	r4, r4, #12
   13114:	0576      	lsls	r6, r6, #21
   13116:	0b24      	lsrs	r4, r4, #12
   13118:	0d76      	lsrs	r6, r6, #21
   1311a:	e7d4      	b.n	130c6 <__aeabi_dadd+0x142>
   1311c:	1a33      	subs	r3, r6, r0
   1311e:	469a      	mov	sl, r3
   13120:	2b00      	cmp	r3, #0
   13122:	dd78      	ble.n	13216 <__aeabi_dadd+0x292>
   13124:	2800      	cmp	r0, #0
   13126:	d031      	beq.n	1318c <__aeabi_dadd+0x208>
   13128:	4876      	ldr	r0, [pc, #472]	; (13304 <__aeabi_dadd+0x380>)
   1312a:	4286      	cmp	r6, r0
   1312c:	d0ae      	beq.n	1308c <__aeabi_dadd+0x108>
   1312e:	2080      	movs	r0, #128	; 0x80
   13130:	0400      	lsls	r0, r0, #16
   13132:	4301      	orrs	r1, r0
   13134:	4653      	mov	r3, sl
   13136:	2b38      	cmp	r3, #56	; 0x38
   13138:	dc00      	bgt.n	1313c <__aeabi_dadd+0x1b8>
   1313a:	e0e9      	b.n	13310 <__aeabi_dadd+0x38c>
   1313c:	430a      	orrs	r2, r1
   1313e:	1e51      	subs	r1, r2, #1
   13140:	418a      	sbcs	r2, r1
   13142:	2100      	movs	r1, #0
   13144:	19d2      	adds	r2, r2, r7
   13146:	42ba      	cmp	r2, r7
   13148:	41bf      	sbcs	r7, r7
   1314a:	1909      	adds	r1, r1, r4
   1314c:	427c      	negs	r4, r7
   1314e:	0017      	movs	r7, r2
   13150:	190c      	adds	r4, r1, r4
   13152:	0223      	lsls	r3, r4, #8
   13154:	d5d3      	bpl.n	130fe <__aeabi_dadd+0x17a>
   13156:	4b6b      	ldr	r3, [pc, #428]	; (13304 <__aeabi_dadd+0x380>)
   13158:	3601      	adds	r6, #1
   1315a:	429e      	cmp	r6, r3
   1315c:	d100      	bne.n	13160 <__aeabi_dadd+0x1dc>
   1315e:	e13a      	b.n	133d6 <__aeabi_dadd+0x452>
   13160:	2001      	movs	r0, #1
   13162:	4b69      	ldr	r3, [pc, #420]	; (13308 <__aeabi_dadd+0x384>)
   13164:	401c      	ands	r4, r3
   13166:	087b      	lsrs	r3, r7, #1
   13168:	4007      	ands	r7, r0
   1316a:	431f      	orrs	r7, r3
   1316c:	07e0      	lsls	r0, r4, #31
   1316e:	4307      	orrs	r7, r0
   13170:	0864      	lsrs	r4, r4, #1
   13172:	e78b      	b.n	1308c <__aeabi_dadd+0x108>
   13174:	0023      	movs	r3, r4
   13176:	433b      	orrs	r3, r7
   13178:	d100      	bne.n	1317c <__aeabi_dadd+0x1f8>
   1317a:	e1cb      	b.n	13514 <__aeabi_dadd+0x590>
   1317c:	2280      	movs	r2, #128	; 0x80
   1317e:	0312      	lsls	r2, r2, #12
   13180:	4314      	orrs	r4, r2
   13182:	0324      	lsls	r4, r4, #12
   13184:	0b24      	lsrs	r4, r4, #12
   13186:	e79e      	b.n	130c6 <__aeabi_dadd+0x142>
   13188:	002e      	movs	r6, r5
   1318a:	e77f      	b.n	1308c <__aeabi_dadd+0x108>
   1318c:	0008      	movs	r0, r1
   1318e:	4310      	orrs	r0, r2
   13190:	d100      	bne.n	13194 <__aeabi_dadd+0x210>
   13192:	e0b4      	b.n	132fe <__aeabi_dadd+0x37a>
   13194:	1e58      	subs	r0, r3, #1
   13196:	2800      	cmp	r0, #0
   13198:	d000      	beq.n	1319c <__aeabi_dadd+0x218>
   1319a:	e0de      	b.n	1335a <__aeabi_dadd+0x3d6>
   1319c:	18ba      	adds	r2, r7, r2
   1319e:	42ba      	cmp	r2, r7
   131a0:	419b      	sbcs	r3, r3
   131a2:	1864      	adds	r4, r4, r1
   131a4:	425b      	negs	r3, r3
   131a6:	18e4      	adds	r4, r4, r3
   131a8:	0017      	movs	r7, r2
   131aa:	2601      	movs	r6, #1
   131ac:	0223      	lsls	r3, r4, #8
   131ae:	d5a6      	bpl.n	130fe <__aeabi_dadd+0x17a>
   131b0:	2602      	movs	r6, #2
   131b2:	e7d5      	b.n	13160 <__aeabi_dadd+0x1dc>
   131b4:	2d00      	cmp	r5, #0
   131b6:	d16e      	bne.n	13296 <__aeabi_dadd+0x312>
   131b8:	1c70      	adds	r0, r6, #1
   131ba:	0540      	lsls	r0, r0, #21
   131bc:	0d40      	lsrs	r0, r0, #21
   131be:	2801      	cmp	r0, #1
   131c0:	dc00      	bgt.n	131c4 <__aeabi_dadd+0x240>
   131c2:	e0f9      	b.n	133b8 <__aeabi_dadd+0x434>
   131c4:	1ab8      	subs	r0, r7, r2
   131c6:	4684      	mov	ip, r0
   131c8:	4287      	cmp	r7, r0
   131ca:	4180      	sbcs	r0, r0
   131cc:	1ae5      	subs	r5, r4, r3
   131ce:	4240      	negs	r0, r0
   131d0:	1a2d      	subs	r5, r5, r0
   131d2:	0228      	lsls	r0, r5, #8
   131d4:	d400      	bmi.n	131d8 <__aeabi_dadd+0x254>
   131d6:	e089      	b.n	132ec <__aeabi_dadd+0x368>
   131d8:	1bd7      	subs	r7, r2, r7
   131da:	42ba      	cmp	r2, r7
   131dc:	4192      	sbcs	r2, r2
   131de:	1b1c      	subs	r4, r3, r4
   131e0:	4252      	negs	r2, r2
   131e2:	1aa5      	subs	r5, r4, r2
   131e4:	46d8      	mov	r8, fp
   131e6:	e729      	b.n	1303c <__aeabi_dadd+0xb8>
   131e8:	4645      	mov	r5, r8
   131ea:	2400      	movs	r4, #0
   131ec:	2700      	movs	r7, #0
   131ee:	e76a      	b.n	130c6 <__aeabi_dadd+0x142>
   131f0:	4c45      	ldr	r4, [pc, #276]	; (13308 <__aeabi_dadd+0x384>)
   131f2:	1af6      	subs	r6, r6, r3
   131f4:	402c      	ands	r4, r5
   131f6:	e749      	b.n	1308c <__aeabi_dadd+0x108>
   131f8:	003d      	movs	r5, r7
   131fa:	3828      	subs	r0, #40	; 0x28
   131fc:	4085      	lsls	r5, r0
   131fe:	2700      	movs	r7, #0
   13200:	e72e      	b.n	13060 <__aeabi_dadd+0xdc>
   13202:	0038      	movs	r0, r7
   13204:	f001 fc60 	bl	14ac8 <__clzsi2>
   13208:	3020      	adds	r0, #32
   1320a:	e71d      	b.n	13048 <__aeabi_dadd+0xc4>
   1320c:	430a      	orrs	r2, r1
   1320e:	1e51      	subs	r1, r2, #1
   13210:	418a      	sbcs	r2, r1
   13212:	2100      	movs	r1, #0
   13214:	e707      	b.n	13026 <__aeabi_dadd+0xa2>
   13216:	2b00      	cmp	r3, #0
   13218:	d000      	beq.n	1321c <__aeabi_dadd+0x298>
   1321a:	e0f3      	b.n	13404 <__aeabi_dadd+0x480>
   1321c:	1c70      	adds	r0, r6, #1
   1321e:	0543      	lsls	r3, r0, #21
   13220:	0d5b      	lsrs	r3, r3, #21
   13222:	2b01      	cmp	r3, #1
   13224:	dc00      	bgt.n	13228 <__aeabi_dadd+0x2a4>
   13226:	e0ad      	b.n	13384 <__aeabi_dadd+0x400>
   13228:	4b36      	ldr	r3, [pc, #216]	; (13304 <__aeabi_dadd+0x380>)
   1322a:	4298      	cmp	r0, r3
   1322c:	d100      	bne.n	13230 <__aeabi_dadd+0x2ac>
   1322e:	e0d1      	b.n	133d4 <__aeabi_dadd+0x450>
   13230:	18ba      	adds	r2, r7, r2
   13232:	42ba      	cmp	r2, r7
   13234:	41bf      	sbcs	r7, r7
   13236:	1864      	adds	r4, r4, r1
   13238:	427f      	negs	r7, r7
   1323a:	19e4      	adds	r4, r4, r7
   1323c:	07e7      	lsls	r7, r4, #31
   1323e:	0852      	lsrs	r2, r2, #1
   13240:	4317      	orrs	r7, r2
   13242:	0864      	lsrs	r4, r4, #1
   13244:	0006      	movs	r6, r0
   13246:	e721      	b.n	1308c <__aeabi_dadd+0x108>
   13248:	482e      	ldr	r0, [pc, #184]	; (13304 <__aeabi_dadd+0x380>)
   1324a:	4285      	cmp	r5, r0
   1324c:	d100      	bne.n	13250 <__aeabi_dadd+0x2cc>
   1324e:	e093      	b.n	13378 <__aeabi_dadd+0x3f4>
   13250:	001d      	movs	r5, r3
   13252:	e6d0      	b.n	12ff6 <__aeabi_dadd+0x72>
   13254:	0029      	movs	r1, r5
   13256:	3e1f      	subs	r6, #31
   13258:	40f1      	lsrs	r1, r6
   1325a:	2b20      	cmp	r3, #32
   1325c:	d100      	bne.n	13260 <__aeabi_dadd+0x2dc>
   1325e:	e08d      	b.n	1337c <__aeabi_dadd+0x3f8>
   13260:	2240      	movs	r2, #64	; 0x40
   13262:	1ad3      	subs	r3, r2, r3
   13264:	409d      	lsls	r5, r3
   13266:	432f      	orrs	r7, r5
   13268:	1e7d      	subs	r5, r7, #1
   1326a:	41af      	sbcs	r7, r5
   1326c:	2400      	movs	r4, #0
   1326e:	430f      	orrs	r7, r1
   13270:	2600      	movs	r6, #0
   13272:	e744      	b.n	130fe <__aeabi_dadd+0x17a>
   13274:	002b      	movs	r3, r5
   13276:	0008      	movs	r0, r1
   13278:	3b20      	subs	r3, #32
   1327a:	40d8      	lsrs	r0, r3
   1327c:	0003      	movs	r3, r0
   1327e:	2d20      	cmp	r5, #32
   13280:	d100      	bne.n	13284 <__aeabi_dadd+0x300>
   13282:	e07d      	b.n	13380 <__aeabi_dadd+0x3fc>
   13284:	2040      	movs	r0, #64	; 0x40
   13286:	1b45      	subs	r5, r0, r5
   13288:	40a9      	lsls	r1, r5
   1328a:	430a      	orrs	r2, r1
   1328c:	1e51      	subs	r1, r2, #1
   1328e:	418a      	sbcs	r2, r1
   13290:	2100      	movs	r1, #0
   13292:	431a      	orrs	r2, r3
   13294:	e6c7      	b.n	13026 <__aeabi_dadd+0xa2>
   13296:	2e00      	cmp	r6, #0
   13298:	d050      	beq.n	1333c <__aeabi_dadd+0x3b8>
   1329a:	4e1a      	ldr	r6, [pc, #104]	; (13304 <__aeabi_dadd+0x380>)
   1329c:	42b0      	cmp	r0, r6
   1329e:	d057      	beq.n	13350 <__aeabi_dadd+0x3cc>
   132a0:	2680      	movs	r6, #128	; 0x80
   132a2:	426b      	negs	r3, r5
   132a4:	4699      	mov	r9, r3
   132a6:	0436      	lsls	r6, r6, #16
   132a8:	4334      	orrs	r4, r6
   132aa:	464b      	mov	r3, r9
   132ac:	2b38      	cmp	r3, #56	; 0x38
   132ae:	dd00      	ble.n	132b2 <__aeabi_dadd+0x32e>
   132b0:	e0d6      	b.n	13460 <__aeabi_dadd+0x4dc>
   132b2:	2b1f      	cmp	r3, #31
   132b4:	dd00      	ble.n	132b8 <__aeabi_dadd+0x334>
   132b6:	e135      	b.n	13524 <__aeabi_dadd+0x5a0>
   132b8:	2620      	movs	r6, #32
   132ba:	1af5      	subs	r5, r6, r3
   132bc:	0026      	movs	r6, r4
   132be:	40ae      	lsls	r6, r5
   132c0:	46b2      	mov	sl, r6
   132c2:	003e      	movs	r6, r7
   132c4:	40de      	lsrs	r6, r3
   132c6:	46ac      	mov	ip, r5
   132c8:	0035      	movs	r5, r6
   132ca:	4656      	mov	r6, sl
   132cc:	432e      	orrs	r6, r5
   132ce:	4665      	mov	r5, ip
   132d0:	40af      	lsls	r7, r5
   132d2:	1e7d      	subs	r5, r7, #1
   132d4:	41af      	sbcs	r7, r5
   132d6:	40dc      	lsrs	r4, r3
   132d8:	4337      	orrs	r7, r6
   132da:	1bd7      	subs	r7, r2, r7
   132dc:	42ba      	cmp	r2, r7
   132de:	4192      	sbcs	r2, r2
   132e0:	1b0c      	subs	r4, r1, r4
   132e2:	4252      	negs	r2, r2
   132e4:	1aa4      	subs	r4, r4, r2
   132e6:	0006      	movs	r6, r0
   132e8:	46d8      	mov	r8, fp
   132ea:	e6a3      	b.n	13034 <__aeabi_dadd+0xb0>
   132ec:	4664      	mov	r4, ip
   132ee:	4667      	mov	r7, ip
   132f0:	432c      	orrs	r4, r5
   132f2:	d000      	beq.n	132f6 <__aeabi_dadd+0x372>
   132f4:	e6a2      	b.n	1303c <__aeabi_dadd+0xb8>
   132f6:	2500      	movs	r5, #0
   132f8:	2600      	movs	r6, #0
   132fa:	2700      	movs	r7, #0
   132fc:	e706      	b.n	1310c <__aeabi_dadd+0x188>
   132fe:	001e      	movs	r6, r3
   13300:	e6c4      	b.n	1308c <__aeabi_dadd+0x108>
   13302:	46c0      	nop			; (mov r8, r8)
   13304:	000007ff 	.word	0x000007ff
   13308:	ff7fffff 	.word	0xff7fffff
   1330c:	800fffff 	.word	0x800fffff
   13310:	2b1f      	cmp	r3, #31
   13312:	dc63      	bgt.n	133dc <__aeabi_dadd+0x458>
   13314:	2020      	movs	r0, #32
   13316:	1ac3      	subs	r3, r0, r3
   13318:	0008      	movs	r0, r1
   1331a:	4098      	lsls	r0, r3
   1331c:	469c      	mov	ip, r3
   1331e:	4683      	mov	fp, r0
   13320:	4653      	mov	r3, sl
   13322:	0010      	movs	r0, r2
   13324:	40d8      	lsrs	r0, r3
   13326:	0003      	movs	r3, r0
   13328:	4658      	mov	r0, fp
   1332a:	4318      	orrs	r0, r3
   1332c:	4663      	mov	r3, ip
   1332e:	409a      	lsls	r2, r3
   13330:	1e53      	subs	r3, r2, #1
   13332:	419a      	sbcs	r2, r3
   13334:	4653      	mov	r3, sl
   13336:	4302      	orrs	r2, r0
   13338:	40d9      	lsrs	r1, r3
   1333a:	e703      	b.n	13144 <__aeabi_dadd+0x1c0>
   1333c:	0026      	movs	r6, r4
   1333e:	433e      	orrs	r6, r7
   13340:	d006      	beq.n	13350 <__aeabi_dadd+0x3cc>
   13342:	43eb      	mvns	r3, r5
   13344:	4699      	mov	r9, r3
   13346:	2b00      	cmp	r3, #0
   13348:	d0c7      	beq.n	132da <__aeabi_dadd+0x356>
   1334a:	4e94      	ldr	r6, [pc, #592]	; (1359c <__aeabi_dadd+0x618>)
   1334c:	42b0      	cmp	r0, r6
   1334e:	d1ac      	bne.n	132aa <__aeabi_dadd+0x326>
   13350:	000c      	movs	r4, r1
   13352:	0017      	movs	r7, r2
   13354:	0006      	movs	r6, r0
   13356:	46d8      	mov	r8, fp
   13358:	e698      	b.n	1308c <__aeabi_dadd+0x108>
   1335a:	4b90      	ldr	r3, [pc, #576]	; (1359c <__aeabi_dadd+0x618>)
   1335c:	459a      	cmp	sl, r3
   1335e:	d00b      	beq.n	13378 <__aeabi_dadd+0x3f4>
   13360:	4682      	mov	sl, r0
   13362:	e6e7      	b.n	13134 <__aeabi_dadd+0x1b0>
   13364:	2800      	cmp	r0, #0
   13366:	d000      	beq.n	1336a <__aeabi_dadd+0x3e6>
   13368:	e09e      	b.n	134a8 <__aeabi_dadd+0x524>
   1336a:	0018      	movs	r0, r3
   1336c:	4310      	orrs	r0, r2
   1336e:	d100      	bne.n	13372 <__aeabi_dadd+0x3ee>
   13370:	e0e9      	b.n	13546 <__aeabi_dadd+0x5c2>
   13372:	001c      	movs	r4, r3
   13374:	0017      	movs	r7, r2
   13376:	46d8      	mov	r8, fp
   13378:	4e88      	ldr	r6, [pc, #544]	; (1359c <__aeabi_dadd+0x618>)
   1337a:	e687      	b.n	1308c <__aeabi_dadd+0x108>
   1337c:	2500      	movs	r5, #0
   1337e:	e772      	b.n	13266 <__aeabi_dadd+0x2e2>
   13380:	2100      	movs	r1, #0
   13382:	e782      	b.n	1328a <__aeabi_dadd+0x306>
   13384:	0023      	movs	r3, r4
   13386:	433b      	orrs	r3, r7
   13388:	2e00      	cmp	r6, #0
   1338a:	d000      	beq.n	1338e <__aeabi_dadd+0x40a>
   1338c:	e0ab      	b.n	134e6 <__aeabi_dadd+0x562>
   1338e:	2b00      	cmp	r3, #0
   13390:	d100      	bne.n	13394 <__aeabi_dadd+0x410>
   13392:	e0e7      	b.n	13564 <__aeabi_dadd+0x5e0>
   13394:	000b      	movs	r3, r1
   13396:	4313      	orrs	r3, r2
   13398:	d100      	bne.n	1339c <__aeabi_dadd+0x418>
   1339a:	e677      	b.n	1308c <__aeabi_dadd+0x108>
   1339c:	18ba      	adds	r2, r7, r2
   1339e:	42ba      	cmp	r2, r7
   133a0:	41bf      	sbcs	r7, r7
   133a2:	1864      	adds	r4, r4, r1
   133a4:	427f      	negs	r7, r7
   133a6:	19e4      	adds	r4, r4, r7
   133a8:	0223      	lsls	r3, r4, #8
   133aa:	d400      	bmi.n	133ae <__aeabi_dadd+0x42a>
   133ac:	e0f2      	b.n	13594 <__aeabi_dadd+0x610>
   133ae:	4b7c      	ldr	r3, [pc, #496]	; (135a0 <__aeabi_dadd+0x61c>)
   133b0:	0017      	movs	r7, r2
   133b2:	401c      	ands	r4, r3
   133b4:	0006      	movs	r6, r0
   133b6:	e669      	b.n	1308c <__aeabi_dadd+0x108>
   133b8:	0020      	movs	r0, r4
   133ba:	4338      	orrs	r0, r7
   133bc:	2e00      	cmp	r6, #0
   133be:	d1d1      	bne.n	13364 <__aeabi_dadd+0x3e0>
   133c0:	2800      	cmp	r0, #0
   133c2:	d15b      	bne.n	1347c <__aeabi_dadd+0x4f8>
   133c4:	001c      	movs	r4, r3
   133c6:	4314      	orrs	r4, r2
   133c8:	d100      	bne.n	133cc <__aeabi_dadd+0x448>
   133ca:	e0a8      	b.n	1351e <__aeabi_dadd+0x59a>
   133cc:	001c      	movs	r4, r3
   133ce:	0017      	movs	r7, r2
   133d0:	46d8      	mov	r8, fp
   133d2:	e65b      	b.n	1308c <__aeabi_dadd+0x108>
   133d4:	0006      	movs	r6, r0
   133d6:	2400      	movs	r4, #0
   133d8:	2700      	movs	r7, #0
   133da:	e697      	b.n	1310c <__aeabi_dadd+0x188>
   133dc:	4650      	mov	r0, sl
   133de:	000b      	movs	r3, r1
   133e0:	3820      	subs	r0, #32
   133e2:	40c3      	lsrs	r3, r0
   133e4:	4699      	mov	r9, r3
   133e6:	4653      	mov	r3, sl
   133e8:	2b20      	cmp	r3, #32
   133ea:	d100      	bne.n	133ee <__aeabi_dadd+0x46a>
   133ec:	e095      	b.n	1351a <__aeabi_dadd+0x596>
   133ee:	2340      	movs	r3, #64	; 0x40
   133f0:	4650      	mov	r0, sl
   133f2:	1a1b      	subs	r3, r3, r0
   133f4:	4099      	lsls	r1, r3
   133f6:	430a      	orrs	r2, r1
   133f8:	1e51      	subs	r1, r2, #1
   133fa:	418a      	sbcs	r2, r1
   133fc:	464b      	mov	r3, r9
   133fe:	2100      	movs	r1, #0
   13400:	431a      	orrs	r2, r3
   13402:	e69f      	b.n	13144 <__aeabi_dadd+0x1c0>
   13404:	2e00      	cmp	r6, #0
   13406:	d130      	bne.n	1346a <__aeabi_dadd+0x4e6>
   13408:	0026      	movs	r6, r4
   1340a:	433e      	orrs	r6, r7
   1340c:	d067      	beq.n	134de <__aeabi_dadd+0x55a>
   1340e:	43db      	mvns	r3, r3
   13410:	469a      	mov	sl, r3
   13412:	2b00      	cmp	r3, #0
   13414:	d01c      	beq.n	13450 <__aeabi_dadd+0x4cc>
   13416:	4e61      	ldr	r6, [pc, #388]	; (1359c <__aeabi_dadd+0x618>)
   13418:	42b0      	cmp	r0, r6
   1341a:	d060      	beq.n	134de <__aeabi_dadd+0x55a>
   1341c:	4653      	mov	r3, sl
   1341e:	2b38      	cmp	r3, #56	; 0x38
   13420:	dd00      	ble.n	13424 <__aeabi_dadd+0x4a0>
   13422:	e096      	b.n	13552 <__aeabi_dadd+0x5ce>
   13424:	2b1f      	cmp	r3, #31
   13426:	dd00      	ble.n	1342a <__aeabi_dadd+0x4a6>
   13428:	e09f      	b.n	1356a <__aeabi_dadd+0x5e6>
   1342a:	2620      	movs	r6, #32
   1342c:	1af3      	subs	r3, r6, r3
   1342e:	0026      	movs	r6, r4
   13430:	409e      	lsls	r6, r3
   13432:	469c      	mov	ip, r3
   13434:	46b3      	mov	fp, r6
   13436:	4653      	mov	r3, sl
   13438:	003e      	movs	r6, r7
   1343a:	40de      	lsrs	r6, r3
   1343c:	0033      	movs	r3, r6
   1343e:	465e      	mov	r6, fp
   13440:	431e      	orrs	r6, r3
   13442:	4663      	mov	r3, ip
   13444:	409f      	lsls	r7, r3
   13446:	1e7b      	subs	r3, r7, #1
   13448:	419f      	sbcs	r7, r3
   1344a:	4653      	mov	r3, sl
   1344c:	40dc      	lsrs	r4, r3
   1344e:	4337      	orrs	r7, r6
   13450:	18bf      	adds	r7, r7, r2
   13452:	4297      	cmp	r7, r2
   13454:	4192      	sbcs	r2, r2
   13456:	1864      	adds	r4, r4, r1
   13458:	4252      	negs	r2, r2
   1345a:	18a4      	adds	r4, r4, r2
   1345c:	0006      	movs	r6, r0
   1345e:	e678      	b.n	13152 <__aeabi_dadd+0x1ce>
   13460:	4327      	orrs	r7, r4
   13462:	1e7c      	subs	r4, r7, #1
   13464:	41a7      	sbcs	r7, r4
   13466:	2400      	movs	r4, #0
   13468:	e737      	b.n	132da <__aeabi_dadd+0x356>
   1346a:	4e4c      	ldr	r6, [pc, #304]	; (1359c <__aeabi_dadd+0x618>)
   1346c:	42b0      	cmp	r0, r6
   1346e:	d036      	beq.n	134de <__aeabi_dadd+0x55a>
   13470:	2680      	movs	r6, #128	; 0x80
   13472:	425b      	negs	r3, r3
   13474:	0436      	lsls	r6, r6, #16
   13476:	469a      	mov	sl, r3
   13478:	4334      	orrs	r4, r6
   1347a:	e7cf      	b.n	1341c <__aeabi_dadd+0x498>
   1347c:	0018      	movs	r0, r3
   1347e:	4310      	orrs	r0, r2
   13480:	d100      	bne.n	13484 <__aeabi_dadd+0x500>
   13482:	e603      	b.n	1308c <__aeabi_dadd+0x108>
   13484:	1ab8      	subs	r0, r7, r2
   13486:	4684      	mov	ip, r0
   13488:	4567      	cmp	r7, ip
   1348a:	41ad      	sbcs	r5, r5
   1348c:	1ae0      	subs	r0, r4, r3
   1348e:	426d      	negs	r5, r5
   13490:	1b40      	subs	r0, r0, r5
   13492:	0205      	lsls	r5, r0, #8
   13494:	d400      	bmi.n	13498 <__aeabi_dadd+0x514>
   13496:	e62c      	b.n	130f2 <__aeabi_dadd+0x16e>
   13498:	1bd7      	subs	r7, r2, r7
   1349a:	42ba      	cmp	r2, r7
   1349c:	4192      	sbcs	r2, r2
   1349e:	1b1c      	subs	r4, r3, r4
   134a0:	4252      	negs	r2, r2
   134a2:	1aa4      	subs	r4, r4, r2
   134a4:	46d8      	mov	r8, fp
   134a6:	e5f1      	b.n	1308c <__aeabi_dadd+0x108>
   134a8:	0018      	movs	r0, r3
   134aa:	4310      	orrs	r0, r2
   134ac:	d100      	bne.n	134b0 <__aeabi_dadd+0x52c>
   134ae:	e763      	b.n	13378 <__aeabi_dadd+0x3f4>
   134b0:	08f8      	lsrs	r0, r7, #3
   134b2:	0767      	lsls	r7, r4, #29
   134b4:	4307      	orrs	r7, r0
   134b6:	2080      	movs	r0, #128	; 0x80
   134b8:	08e4      	lsrs	r4, r4, #3
   134ba:	0300      	lsls	r0, r0, #12
   134bc:	4204      	tst	r4, r0
   134be:	d008      	beq.n	134d2 <__aeabi_dadd+0x54e>
   134c0:	08dd      	lsrs	r5, r3, #3
   134c2:	4205      	tst	r5, r0
   134c4:	d105      	bne.n	134d2 <__aeabi_dadd+0x54e>
   134c6:	08d2      	lsrs	r2, r2, #3
   134c8:	0759      	lsls	r1, r3, #29
   134ca:	4311      	orrs	r1, r2
   134cc:	000f      	movs	r7, r1
   134ce:	002c      	movs	r4, r5
   134d0:	46d8      	mov	r8, fp
   134d2:	0f7b      	lsrs	r3, r7, #29
   134d4:	00e4      	lsls	r4, r4, #3
   134d6:	431c      	orrs	r4, r3
   134d8:	00ff      	lsls	r7, r7, #3
   134da:	4e30      	ldr	r6, [pc, #192]	; (1359c <__aeabi_dadd+0x618>)
   134dc:	e5d6      	b.n	1308c <__aeabi_dadd+0x108>
   134de:	000c      	movs	r4, r1
   134e0:	0017      	movs	r7, r2
   134e2:	0006      	movs	r6, r0
   134e4:	e5d2      	b.n	1308c <__aeabi_dadd+0x108>
   134e6:	2b00      	cmp	r3, #0
   134e8:	d038      	beq.n	1355c <__aeabi_dadd+0x5d8>
   134ea:	000b      	movs	r3, r1
   134ec:	4313      	orrs	r3, r2
   134ee:	d100      	bne.n	134f2 <__aeabi_dadd+0x56e>
   134f0:	e742      	b.n	13378 <__aeabi_dadd+0x3f4>
   134f2:	08f8      	lsrs	r0, r7, #3
   134f4:	0767      	lsls	r7, r4, #29
   134f6:	4307      	orrs	r7, r0
   134f8:	2080      	movs	r0, #128	; 0x80
   134fa:	08e4      	lsrs	r4, r4, #3
   134fc:	0300      	lsls	r0, r0, #12
   134fe:	4204      	tst	r4, r0
   13500:	d0e7      	beq.n	134d2 <__aeabi_dadd+0x54e>
   13502:	08cb      	lsrs	r3, r1, #3
   13504:	4203      	tst	r3, r0
   13506:	d1e4      	bne.n	134d2 <__aeabi_dadd+0x54e>
   13508:	08d2      	lsrs	r2, r2, #3
   1350a:	0749      	lsls	r1, r1, #29
   1350c:	4311      	orrs	r1, r2
   1350e:	000f      	movs	r7, r1
   13510:	001c      	movs	r4, r3
   13512:	e7de      	b.n	134d2 <__aeabi_dadd+0x54e>
   13514:	2700      	movs	r7, #0
   13516:	2400      	movs	r4, #0
   13518:	e5d5      	b.n	130c6 <__aeabi_dadd+0x142>
   1351a:	2100      	movs	r1, #0
   1351c:	e76b      	b.n	133f6 <__aeabi_dadd+0x472>
   1351e:	2500      	movs	r5, #0
   13520:	2700      	movs	r7, #0
   13522:	e5f3      	b.n	1310c <__aeabi_dadd+0x188>
   13524:	464e      	mov	r6, r9
   13526:	0025      	movs	r5, r4
   13528:	3e20      	subs	r6, #32
   1352a:	40f5      	lsrs	r5, r6
   1352c:	464b      	mov	r3, r9
   1352e:	002e      	movs	r6, r5
   13530:	2b20      	cmp	r3, #32
   13532:	d02d      	beq.n	13590 <__aeabi_dadd+0x60c>
   13534:	2540      	movs	r5, #64	; 0x40
   13536:	1aed      	subs	r5, r5, r3
   13538:	40ac      	lsls	r4, r5
   1353a:	4327      	orrs	r7, r4
   1353c:	1e7c      	subs	r4, r7, #1
   1353e:	41a7      	sbcs	r7, r4
   13540:	2400      	movs	r4, #0
   13542:	4337      	orrs	r7, r6
   13544:	e6c9      	b.n	132da <__aeabi_dadd+0x356>
   13546:	2480      	movs	r4, #128	; 0x80
   13548:	2500      	movs	r5, #0
   1354a:	0324      	lsls	r4, r4, #12
   1354c:	4e13      	ldr	r6, [pc, #76]	; (1359c <__aeabi_dadd+0x618>)
   1354e:	2700      	movs	r7, #0
   13550:	e5dc      	b.n	1310c <__aeabi_dadd+0x188>
   13552:	4327      	orrs	r7, r4
   13554:	1e7c      	subs	r4, r7, #1
   13556:	41a7      	sbcs	r7, r4
   13558:	2400      	movs	r4, #0
   1355a:	e779      	b.n	13450 <__aeabi_dadd+0x4cc>
   1355c:	000c      	movs	r4, r1
   1355e:	0017      	movs	r7, r2
   13560:	4e0e      	ldr	r6, [pc, #56]	; (1359c <__aeabi_dadd+0x618>)
   13562:	e593      	b.n	1308c <__aeabi_dadd+0x108>
   13564:	000c      	movs	r4, r1
   13566:	0017      	movs	r7, r2
   13568:	e590      	b.n	1308c <__aeabi_dadd+0x108>
   1356a:	4656      	mov	r6, sl
   1356c:	0023      	movs	r3, r4
   1356e:	3e20      	subs	r6, #32
   13570:	40f3      	lsrs	r3, r6
   13572:	4699      	mov	r9, r3
   13574:	4653      	mov	r3, sl
   13576:	2b20      	cmp	r3, #32
   13578:	d00e      	beq.n	13598 <__aeabi_dadd+0x614>
   1357a:	2340      	movs	r3, #64	; 0x40
   1357c:	4656      	mov	r6, sl
   1357e:	1b9b      	subs	r3, r3, r6
   13580:	409c      	lsls	r4, r3
   13582:	4327      	orrs	r7, r4
   13584:	1e7c      	subs	r4, r7, #1
   13586:	41a7      	sbcs	r7, r4
   13588:	464b      	mov	r3, r9
   1358a:	2400      	movs	r4, #0
   1358c:	431f      	orrs	r7, r3
   1358e:	e75f      	b.n	13450 <__aeabi_dadd+0x4cc>
   13590:	2400      	movs	r4, #0
   13592:	e7d2      	b.n	1353a <__aeabi_dadd+0x5b6>
   13594:	0017      	movs	r7, r2
   13596:	e5b2      	b.n	130fe <__aeabi_dadd+0x17a>
   13598:	2400      	movs	r4, #0
   1359a:	e7f2      	b.n	13582 <__aeabi_dadd+0x5fe>
   1359c:	000007ff 	.word	0x000007ff
   135a0:	ff7fffff 	.word	0xff7fffff

000135a4 <__aeabi_ddiv>:
   135a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   135a6:	4657      	mov	r7, sl
   135a8:	4645      	mov	r5, r8
   135aa:	46de      	mov	lr, fp
   135ac:	464e      	mov	r6, r9
   135ae:	b5e0      	push	{r5, r6, r7, lr}
   135b0:	004c      	lsls	r4, r1, #1
   135b2:	030e      	lsls	r6, r1, #12
   135b4:	b087      	sub	sp, #28
   135b6:	4683      	mov	fp, r0
   135b8:	4692      	mov	sl, r2
   135ba:	001d      	movs	r5, r3
   135bc:	4680      	mov	r8, r0
   135be:	0b36      	lsrs	r6, r6, #12
   135c0:	0d64      	lsrs	r4, r4, #21
   135c2:	0fcf      	lsrs	r7, r1, #31
   135c4:	2c00      	cmp	r4, #0
   135c6:	d04f      	beq.n	13668 <__aeabi_ddiv+0xc4>
   135c8:	4b6f      	ldr	r3, [pc, #444]	; (13788 <__aeabi_ddiv+0x1e4>)
   135ca:	429c      	cmp	r4, r3
   135cc:	d035      	beq.n	1363a <__aeabi_ddiv+0x96>
   135ce:	2380      	movs	r3, #128	; 0x80
   135d0:	0f42      	lsrs	r2, r0, #29
   135d2:	041b      	lsls	r3, r3, #16
   135d4:	00f6      	lsls	r6, r6, #3
   135d6:	4313      	orrs	r3, r2
   135d8:	4333      	orrs	r3, r6
   135da:	4699      	mov	r9, r3
   135dc:	00c3      	lsls	r3, r0, #3
   135de:	4698      	mov	r8, r3
   135e0:	4b6a      	ldr	r3, [pc, #424]	; (1378c <__aeabi_ddiv+0x1e8>)
   135e2:	2600      	movs	r6, #0
   135e4:	469c      	mov	ip, r3
   135e6:	2300      	movs	r3, #0
   135e8:	4464      	add	r4, ip
   135ea:	9303      	str	r3, [sp, #12]
   135ec:	032b      	lsls	r3, r5, #12
   135ee:	0b1b      	lsrs	r3, r3, #12
   135f0:	469b      	mov	fp, r3
   135f2:	006b      	lsls	r3, r5, #1
   135f4:	0fed      	lsrs	r5, r5, #31
   135f6:	4650      	mov	r0, sl
   135f8:	0d5b      	lsrs	r3, r3, #21
   135fa:	9501      	str	r5, [sp, #4]
   135fc:	d05e      	beq.n	136bc <__aeabi_ddiv+0x118>
   135fe:	4a62      	ldr	r2, [pc, #392]	; (13788 <__aeabi_ddiv+0x1e4>)
   13600:	4293      	cmp	r3, r2
   13602:	d053      	beq.n	136ac <__aeabi_ddiv+0x108>
   13604:	465a      	mov	r2, fp
   13606:	00d1      	lsls	r1, r2, #3
   13608:	2280      	movs	r2, #128	; 0x80
   1360a:	0f40      	lsrs	r0, r0, #29
   1360c:	0412      	lsls	r2, r2, #16
   1360e:	4302      	orrs	r2, r0
   13610:	430a      	orrs	r2, r1
   13612:	4693      	mov	fp, r2
   13614:	4652      	mov	r2, sl
   13616:	00d1      	lsls	r1, r2, #3
   13618:	4a5c      	ldr	r2, [pc, #368]	; (1378c <__aeabi_ddiv+0x1e8>)
   1361a:	4694      	mov	ip, r2
   1361c:	2200      	movs	r2, #0
   1361e:	4463      	add	r3, ip
   13620:	0038      	movs	r0, r7
   13622:	4068      	eors	r0, r5
   13624:	4684      	mov	ip, r0
   13626:	9002      	str	r0, [sp, #8]
   13628:	1ae4      	subs	r4, r4, r3
   1362a:	4316      	orrs	r6, r2
   1362c:	2e0f      	cmp	r6, #15
   1362e:	d900      	bls.n	13632 <__aeabi_ddiv+0x8e>
   13630:	e0b4      	b.n	1379c <__aeabi_ddiv+0x1f8>
   13632:	4b57      	ldr	r3, [pc, #348]	; (13790 <__aeabi_ddiv+0x1ec>)
   13634:	00b6      	lsls	r6, r6, #2
   13636:	599b      	ldr	r3, [r3, r6]
   13638:	469f      	mov	pc, r3
   1363a:	0003      	movs	r3, r0
   1363c:	4333      	orrs	r3, r6
   1363e:	4699      	mov	r9, r3
   13640:	d16c      	bne.n	1371c <__aeabi_ddiv+0x178>
   13642:	2300      	movs	r3, #0
   13644:	4698      	mov	r8, r3
   13646:	3302      	adds	r3, #2
   13648:	2608      	movs	r6, #8
   1364a:	9303      	str	r3, [sp, #12]
   1364c:	e7ce      	b.n	135ec <__aeabi_ddiv+0x48>
   1364e:	46cb      	mov	fp, r9
   13650:	4641      	mov	r1, r8
   13652:	9a03      	ldr	r2, [sp, #12]
   13654:	9701      	str	r7, [sp, #4]
   13656:	2a02      	cmp	r2, #2
   13658:	d165      	bne.n	13726 <__aeabi_ddiv+0x182>
   1365a:	9b01      	ldr	r3, [sp, #4]
   1365c:	4c4a      	ldr	r4, [pc, #296]	; (13788 <__aeabi_ddiv+0x1e4>)
   1365e:	469c      	mov	ip, r3
   13660:	2300      	movs	r3, #0
   13662:	2200      	movs	r2, #0
   13664:	4698      	mov	r8, r3
   13666:	e06b      	b.n	13740 <__aeabi_ddiv+0x19c>
   13668:	0003      	movs	r3, r0
   1366a:	4333      	orrs	r3, r6
   1366c:	4699      	mov	r9, r3
   1366e:	d04e      	beq.n	1370e <__aeabi_ddiv+0x16a>
   13670:	2e00      	cmp	r6, #0
   13672:	d100      	bne.n	13676 <__aeabi_ddiv+0xd2>
   13674:	e1bc      	b.n	139f0 <__aeabi_ddiv+0x44c>
   13676:	0030      	movs	r0, r6
   13678:	f001 fa26 	bl	14ac8 <__clzsi2>
   1367c:	0003      	movs	r3, r0
   1367e:	3b0b      	subs	r3, #11
   13680:	2b1c      	cmp	r3, #28
   13682:	dd00      	ble.n	13686 <__aeabi_ddiv+0xe2>
   13684:	e1ac      	b.n	139e0 <__aeabi_ddiv+0x43c>
   13686:	221d      	movs	r2, #29
   13688:	1ad3      	subs	r3, r2, r3
   1368a:	465a      	mov	r2, fp
   1368c:	0001      	movs	r1, r0
   1368e:	40da      	lsrs	r2, r3
   13690:	3908      	subs	r1, #8
   13692:	408e      	lsls	r6, r1
   13694:	0013      	movs	r3, r2
   13696:	4333      	orrs	r3, r6
   13698:	4699      	mov	r9, r3
   1369a:	465b      	mov	r3, fp
   1369c:	408b      	lsls	r3, r1
   1369e:	4698      	mov	r8, r3
   136a0:	2300      	movs	r3, #0
   136a2:	4c3c      	ldr	r4, [pc, #240]	; (13794 <__aeabi_ddiv+0x1f0>)
   136a4:	2600      	movs	r6, #0
   136a6:	1a24      	subs	r4, r4, r0
   136a8:	9303      	str	r3, [sp, #12]
   136aa:	e79f      	b.n	135ec <__aeabi_ddiv+0x48>
   136ac:	4651      	mov	r1, sl
   136ae:	465a      	mov	r2, fp
   136b0:	4311      	orrs	r1, r2
   136b2:	d129      	bne.n	13708 <__aeabi_ddiv+0x164>
   136b4:	2200      	movs	r2, #0
   136b6:	4693      	mov	fp, r2
   136b8:	3202      	adds	r2, #2
   136ba:	e7b1      	b.n	13620 <__aeabi_ddiv+0x7c>
   136bc:	4659      	mov	r1, fp
   136be:	4301      	orrs	r1, r0
   136c0:	d01e      	beq.n	13700 <__aeabi_ddiv+0x15c>
   136c2:	465b      	mov	r3, fp
   136c4:	2b00      	cmp	r3, #0
   136c6:	d100      	bne.n	136ca <__aeabi_ddiv+0x126>
   136c8:	e19e      	b.n	13a08 <__aeabi_ddiv+0x464>
   136ca:	4658      	mov	r0, fp
   136cc:	f001 f9fc 	bl	14ac8 <__clzsi2>
   136d0:	0003      	movs	r3, r0
   136d2:	3b0b      	subs	r3, #11
   136d4:	2b1c      	cmp	r3, #28
   136d6:	dd00      	ble.n	136da <__aeabi_ddiv+0x136>
   136d8:	e18f      	b.n	139fa <__aeabi_ddiv+0x456>
   136da:	0002      	movs	r2, r0
   136dc:	4659      	mov	r1, fp
   136de:	3a08      	subs	r2, #8
   136e0:	4091      	lsls	r1, r2
   136e2:	468b      	mov	fp, r1
   136e4:	211d      	movs	r1, #29
   136e6:	1acb      	subs	r3, r1, r3
   136e8:	4651      	mov	r1, sl
   136ea:	40d9      	lsrs	r1, r3
   136ec:	000b      	movs	r3, r1
   136ee:	4659      	mov	r1, fp
   136f0:	430b      	orrs	r3, r1
   136f2:	4651      	mov	r1, sl
   136f4:	469b      	mov	fp, r3
   136f6:	4091      	lsls	r1, r2
   136f8:	4b26      	ldr	r3, [pc, #152]	; (13794 <__aeabi_ddiv+0x1f0>)
   136fa:	2200      	movs	r2, #0
   136fc:	1a1b      	subs	r3, r3, r0
   136fe:	e78f      	b.n	13620 <__aeabi_ddiv+0x7c>
   13700:	2300      	movs	r3, #0
   13702:	2201      	movs	r2, #1
   13704:	469b      	mov	fp, r3
   13706:	e78b      	b.n	13620 <__aeabi_ddiv+0x7c>
   13708:	4651      	mov	r1, sl
   1370a:	2203      	movs	r2, #3
   1370c:	e788      	b.n	13620 <__aeabi_ddiv+0x7c>
   1370e:	2300      	movs	r3, #0
   13710:	4698      	mov	r8, r3
   13712:	3301      	adds	r3, #1
   13714:	2604      	movs	r6, #4
   13716:	2400      	movs	r4, #0
   13718:	9303      	str	r3, [sp, #12]
   1371a:	e767      	b.n	135ec <__aeabi_ddiv+0x48>
   1371c:	2303      	movs	r3, #3
   1371e:	46b1      	mov	r9, r6
   13720:	9303      	str	r3, [sp, #12]
   13722:	260c      	movs	r6, #12
   13724:	e762      	b.n	135ec <__aeabi_ddiv+0x48>
   13726:	2a03      	cmp	r2, #3
   13728:	d100      	bne.n	1372c <__aeabi_ddiv+0x188>
   1372a:	e25c      	b.n	13be6 <__aeabi_ddiv+0x642>
   1372c:	9b01      	ldr	r3, [sp, #4]
   1372e:	2a01      	cmp	r2, #1
   13730:	d000      	beq.n	13734 <__aeabi_ddiv+0x190>
   13732:	e1e4      	b.n	13afe <__aeabi_ddiv+0x55a>
   13734:	4013      	ands	r3, r2
   13736:	469c      	mov	ip, r3
   13738:	2300      	movs	r3, #0
   1373a:	2400      	movs	r4, #0
   1373c:	2200      	movs	r2, #0
   1373e:	4698      	mov	r8, r3
   13740:	2100      	movs	r1, #0
   13742:	0312      	lsls	r2, r2, #12
   13744:	0b13      	lsrs	r3, r2, #12
   13746:	0d0a      	lsrs	r2, r1, #20
   13748:	0512      	lsls	r2, r2, #20
   1374a:	431a      	orrs	r2, r3
   1374c:	0523      	lsls	r3, r4, #20
   1374e:	4c12      	ldr	r4, [pc, #72]	; (13798 <__aeabi_ddiv+0x1f4>)
   13750:	4640      	mov	r0, r8
   13752:	4022      	ands	r2, r4
   13754:	4313      	orrs	r3, r2
   13756:	4662      	mov	r2, ip
   13758:	005b      	lsls	r3, r3, #1
   1375a:	07d2      	lsls	r2, r2, #31
   1375c:	085b      	lsrs	r3, r3, #1
   1375e:	4313      	orrs	r3, r2
   13760:	0019      	movs	r1, r3
   13762:	b007      	add	sp, #28
   13764:	bc3c      	pop	{r2, r3, r4, r5}
   13766:	4690      	mov	r8, r2
   13768:	4699      	mov	r9, r3
   1376a:	46a2      	mov	sl, r4
   1376c:	46ab      	mov	fp, r5
   1376e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13770:	2300      	movs	r3, #0
   13772:	2280      	movs	r2, #128	; 0x80
   13774:	469c      	mov	ip, r3
   13776:	0312      	lsls	r2, r2, #12
   13778:	4698      	mov	r8, r3
   1377a:	4c03      	ldr	r4, [pc, #12]	; (13788 <__aeabi_ddiv+0x1e4>)
   1377c:	e7e0      	b.n	13740 <__aeabi_ddiv+0x19c>
   1377e:	2300      	movs	r3, #0
   13780:	4c01      	ldr	r4, [pc, #4]	; (13788 <__aeabi_ddiv+0x1e4>)
   13782:	2200      	movs	r2, #0
   13784:	4698      	mov	r8, r3
   13786:	e7db      	b.n	13740 <__aeabi_ddiv+0x19c>
   13788:	000007ff 	.word	0x000007ff
   1378c:	fffffc01 	.word	0xfffffc01
   13790:	00017468 	.word	0x00017468
   13794:	fffffc0d 	.word	0xfffffc0d
   13798:	800fffff 	.word	0x800fffff
   1379c:	45d9      	cmp	r9, fp
   1379e:	d900      	bls.n	137a2 <__aeabi_ddiv+0x1fe>
   137a0:	e139      	b.n	13a16 <__aeabi_ddiv+0x472>
   137a2:	d100      	bne.n	137a6 <__aeabi_ddiv+0x202>
   137a4:	e134      	b.n	13a10 <__aeabi_ddiv+0x46c>
   137a6:	2300      	movs	r3, #0
   137a8:	4646      	mov	r6, r8
   137aa:	464d      	mov	r5, r9
   137ac:	469a      	mov	sl, r3
   137ae:	3c01      	subs	r4, #1
   137b0:	465b      	mov	r3, fp
   137b2:	0e0a      	lsrs	r2, r1, #24
   137b4:	021b      	lsls	r3, r3, #8
   137b6:	431a      	orrs	r2, r3
   137b8:	020b      	lsls	r3, r1, #8
   137ba:	0c17      	lsrs	r7, r2, #16
   137bc:	9303      	str	r3, [sp, #12]
   137be:	0413      	lsls	r3, r2, #16
   137c0:	0c1b      	lsrs	r3, r3, #16
   137c2:	0039      	movs	r1, r7
   137c4:	0028      	movs	r0, r5
   137c6:	4690      	mov	r8, r2
   137c8:	9301      	str	r3, [sp, #4]
   137ca:	f7fe f9d7 	bl	11b7c <__udivsi3>
   137ce:	0002      	movs	r2, r0
   137d0:	9b01      	ldr	r3, [sp, #4]
   137d2:	4683      	mov	fp, r0
   137d4:	435a      	muls	r2, r3
   137d6:	0028      	movs	r0, r5
   137d8:	0039      	movs	r1, r7
   137da:	4691      	mov	r9, r2
   137dc:	f7fe fa54 	bl	11c88 <__aeabi_uidivmod>
   137e0:	0c35      	lsrs	r5, r6, #16
   137e2:	0409      	lsls	r1, r1, #16
   137e4:	430d      	orrs	r5, r1
   137e6:	45a9      	cmp	r9, r5
   137e8:	d90d      	bls.n	13806 <__aeabi_ddiv+0x262>
   137ea:	465b      	mov	r3, fp
   137ec:	4445      	add	r5, r8
   137ee:	3b01      	subs	r3, #1
   137f0:	45a8      	cmp	r8, r5
   137f2:	d900      	bls.n	137f6 <__aeabi_ddiv+0x252>
   137f4:	e13a      	b.n	13a6c <__aeabi_ddiv+0x4c8>
   137f6:	45a9      	cmp	r9, r5
   137f8:	d800      	bhi.n	137fc <__aeabi_ddiv+0x258>
   137fa:	e137      	b.n	13a6c <__aeabi_ddiv+0x4c8>
   137fc:	2302      	movs	r3, #2
   137fe:	425b      	negs	r3, r3
   13800:	469c      	mov	ip, r3
   13802:	4445      	add	r5, r8
   13804:	44e3      	add	fp, ip
   13806:	464b      	mov	r3, r9
   13808:	1aeb      	subs	r3, r5, r3
   1380a:	0039      	movs	r1, r7
   1380c:	0018      	movs	r0, r3
   1380e:	9304      	str	r3, [sp, #16]
   13810:	f7fe f9b4 	bl	11b7c <__udivsi3>
   13814:	9b01      	ldr	r3, [sp, #4]
   13816:	0005      	movs	r5, r0
   13818:	4343      	muls	r3, r0
   1381a:	0039      	movs	r1, r7
   1381c:	9804      	ldr	r0, [sp, #16]
   1381e:	4699      	mov	r9, r3
   13820:	f7fe fa32 	bl	11c88 <__aeabi_uidivmod>
   13824:	0433      	lsls	r3, r6, #16
   13826:	0409      	lsls	r1, r1, #16
   13828:	0c1b      	lsrs	r3, r3, #16
   1382a:	430b      	orrs	r3, r1
   1382c:	4599      	cmp	r9, r3
   1382e:	d909      	bls.n	13844 <__aeabi_ddiv+0x2a0>
   13830:	4443      	add	r3, r8
   13832:	1e6a      	subs	r2, r5, #1
   13834:	4598      	cmp	r8, r3
   13836:	d900      	bls.n	1383a <__aeabi_ddiv+0x296>
   13838:	e11a      	b.n	13a70 <__aeabi_ddiv+0x4cc>
   1383a:	4599      	cmp	r9, r3
   1383c:	d800      	bhi.n	13840 <__aeabi_ddiv+0x29c>
   1383e:	e117      	b.n	13a70 <__aeabi_ddiv+0x4cc>
   13840:	3d02      	subs	r5, #2
   13842:	4443      	add	r3, r8
   13844:	464a      	mov	r2, r9
   13846:	1a9b      	subs	r3, r3, r2
   13848:	465a      	mov	r2, fp
   1384a:	0412      	lsls	r2, r2, #16
   1384c:	432a      	orrs	r2, r5
   1384e:	9903      	ldr	r1, [sp, #12]
   13850:	4693      	mov	fp, r2
   13852:	0c10      	lsrs	r0, r2, #16
   13854:	0c0a      	lsrs	r2, r1, #16
   13856:	4691      	mov	r9, r2
   13858:	0409      	lsls	r1, r1, #16
   1385a:	465a      	mov	r2, fp
   1385c:	0c09      	lsrs	r1, r1, #16
   1385e:	464e      	mov	r6, r9
   13860:	000d      	movs	r5, r1
   13862:	0412      	lsls	r2, r2, #16
   13864:	0c12      	lsrs	r2, r2, #16
   13866:	4345      	muls	r5, r0
   13868:	9105      	str	r1, [sp, #20]
   1386a:	4351      	muls	r1, r2
   1386c:	4372      	muls	r2, r6
   1386e:	4370      	muls	r0, r6
   13870:	1952      	adds	r2, r2, r5
   13872:	0c0e      	lsrs	r6, r1, #16
   13874:	18b2      	adds	r2, r6, r2
   13876:	4295      	cmp	r5, r2
   13878:	d903      	bls.n	13882 <__aeabi_ddiv+0x2de>
   1387a:	2580      	movs	r5, #128	; 0x80
   1387c:	026d      	lsls	r5, r5, #9
   1387e:	46ac      	mov	ip, r5
   13880:	4460      	add	r0, ip
   13882:	0c15      	lsrs	r5, r2, #16
   13884:	0409      	lsls	r1, r1, #16
   13886:	0412      	lsls	r2, r2, #16
   13888:	0c09      	lsrs	r1, r1, #16
   1388a:	1828      	adds	r0, r5, r0
   1388c:	1852      	adds	r2, r2, r1
   1388e:	4283      	cmp	r3, r0
   13890:	d200      	bcs.n	13894 <__aeabi_ddiv+0x2f0>
   13892:	e0ce      	b.n	13a32 <__aeabi_ddiv+0x48e>
   13894:	d100      	bne.n	13898 <__aeabi_ddiv+0x2f4>
   13896:	e0c8      	b.n	13a2a <__aeabi_ddiv+0x486>
   13898:	1a1d      	subs	r5, r3, r0
   1389a:	4653      	mov	r3, sl
   1389c:	1a9e      	subs	r6, r3, r2
   1389e:	45b2      	cmp	sl, r6
   138a0:	4192      	sbcs	r2, r2
   138a2:	4252      	negs	r2, r2
   138a4:	1aab      	subs	r3, r5, r2
   138a6:	469a      	mov	sl, r3
   138a8:	4598      	cmp	r8, r3
   138aa:	d100      	bne.n	138ae <__aeabi_ddiv+0x30a>
   138ac:	e117      	b.n	13ade <__aeabi_ddiv+0x53a>
   138ae:	0039      	movs	r1, r7
   138b0:	0018      	movs	r0, r3
   138b2:	f7fe f963 	bl	11b7c <__udivsi3>
   138b6:	9b01      	ldr	r3, [sp, #4]
   138b8:	0005      	movs	r5, r0
   138ba:	4343      	muls	r3, r0
   138bc:	0039      	movs	r1, r7
   138be:	4650      	mov	r0, sl
   138c0:	9304      	str	r3, [sp, #16]
   138c2:	f7fe f9e1 	bl	11c88 <__aeabi_uidivmod>
   138c6:	9804      	ldr	r0, [sp, #16]
   138c8:	040b      	lsls	r3, r1, #16
   138ca:	0c31      	lsrs	r1, r6, #16
   138cc:	4319      	orrs	r1, r3
   138ce:	4288      	cmp	r0, r1
   138d0:	d909      	bls.n	138e6 <__aeabi_ddiv+0x342>
   138d2:	4441      	add	r1, r8
   138d4:	1e6b      	subs	r3, r5, #1
   138d6:	4588      	cmp	r8, r1
   138d8:	d900      	bls.n	138dc <__aeabi_ddiv+0x338>
   138da:	e107      	b.n	13aec <__aeabi_ddiv+0x548>
   138dc:	4288      	cmp	r0, r1
   138de:	d800      	bhi.n	138e2 <__aeabi_ddiv+0x33e>
   138e0:	e104      	b.n	13aec <__aeabi_ddiv+0x548>
   138e2:	3d02      	subs	r5, #2
   138e4:	4441      	add	r1, r8
   138e6:	9b04      	ldr	r3, [sp, #16]
   138e8:	1acb      	subs	r3, r1, r3
   138ea:	0018      	movs	r0, r3
   138ec:	0039      	movs	r1, r7
   138ee:	9304      	str	r3, [sp, #16]
   138f0:	f7fe f944 	bl	11b7c <__udivsi3>
   138f4:	9b01      	ldr	r3, [sp, #4]
   138f6:	4682      	mov	sl, r0
   138f8:	4343      	muls	r3, r0
   138fa:	0039      	movs	r1, r7
   138fc:	9804      	ldr	r0, [sp, #16]
   138fe:	9301      	str	r3, [sp, #4]
   13900:	f7fe f9c2 	bl	11c88 <__aeabi_uidivmod>
   13904:	9801      	ldr	r0, [sp, #4]
   13906:	040b      	lsls	r3, r1, #16
   13908:	0431      	lsls	r1, r6, #16
   1390a:	0c09      	lsrs	r1, r1, #16
   1390c:	4319      	orrs	r1, r3
   1390e:	4288      	cmp	r0, r1
   13910:	d90d      	bls.n	1392e <__aeabi_ddiv+0x38a>
   13912:	4653      	mov	r3, sl
   13914:	4441      	add	r1, r8
   13916:	3b01      	subs	r3, #1
   13918:	4588      	cmp	r8, r1
   1391a:	d900      	bls.n	1391e <__aeabi_ddiv+0x37a>
   1391c:	e0e8      	b.n	13af0 <__aeabi_ddiv+0x54c>
   1391e:	4288      	cmp	r0, r1
   13920:	d800      	bhi.n	13924 <__aeabi_ddiv+0x380>
   13922:	e0e5      	b.n	13af0 <__aeabi_ddiv+0x54c>
   13924:	2302      	movs	r3, #2
   13926:	425b      	negs	r3, r3
   13928:	469c      	mov	ip, r3
   1392a:	4441      	add	r1, r8
   1392c:	44e2      	add	sl, ip
   1392e:	9b01      	ldr	r3, [sp, #4]
   13930:	042d      	lsls	r5, r5, #16
   13932:	1ace      	subs	r6, r1, r3
   13934:	4651      	mov	r1, sl
   13936:	4329      	orrs	r1, r5
   13938:	9d05      	ldr	r5, [sp, #20]
   1393a:	464f      	mov	r7, r9
   1393c:	002a      	movs	r2, r5
   1393e:	040b      	lsls	r3, r1, #16
   13940:	0c08      	lsrs	r0, r1, #16
   13942:	0c1b      	lsrs	r3, r3, #16
   13944:	435a      	muls	r2, r3
   13946:	4345      	muls	r5, r0
   13948:	437b      	muls	r3, r7
   1394a:	4378      	muls	r0, r7
   1394c:	195b      	adds	r3, r3, r5
   1394e:	0c17      	lsrs	r7, r2, #16
   13950:	18fb      	adds	r3, r7, r3
   13952:	429d      	cmp	r5, r3
   13954:	d903      	bls.n	1395e <__aeabi_ddiv+0x3ba>
   13956:	2580      	movs	r5, #128	; 0x80
   13958:	026d      	lsls	r5, r5, #9
   1395a:	46ac      	mov	ip, r5
   1395c:	4460      	add	r0, ip
   1395e:	0c1d      	lsrs	r5, r3, #16
   13960:	0412      	lsls	r2, r2, #16
   13962:	041b      	lsls	r3, r3, #16
   13964:	0c12      	lsrs	r2, r2, #16
   13966:	1828      	adds	r0, r5, r0
   13968:	189b      	adds	r3, r3, r2
   1396a:	4286      	cmp	r6, r0
   1396c:	d200      	bcs.n	13970 <__aeabi_ddiv+0x3cc>
   1396e:	e093      	b.n	13a98 <__aeabi_ddiv+0x4f4>
   13970:	d100      	bne.n	13974 <__aeabi_ddiv+0x3d0>
   13972:	e08e      	b.n	13a92 <__aeabi_ddiv+0x4ee>
   13974:	2301      	movs	r3, #1
   13976:	4319      	orrs	r1, r3
   13978:	4ba0      	ldr	r3, [pc, #640]	; (13bfc <__aeabi_ddiv+0x658>)
   1397a:	18e3      	adds	r3, r4, r3
   1397c:	2b00      	cmp	r3, #0
   1397e:	dc00      	bgt.n	13982 <__aeabi_ddiv+0x3de>
   13980:	e099      	b.n	13ab6 <__aeabi_ddiv+0x512>
   13982:	074a      	lsls	r2, r1, #29
   13984:	d000      	beq.n	13988 <__aeabi_ddiv+0x3e4>
   13986:	e09e      	b.n	13ac6 <__aeabi_ddiv+0x522>
   13988:	465a      	mov	r2, fp
   1398a:	01d2      	lsls	r2, r2, #7
   1398c:	d506      	bpl.n	1399c <__aeabi_ddiv+0x3f8>
   1398e:	465a      	mov	r2, fp
   13990:	4b9b      	ldr	r3, [pc, #620]	; (13c00 <__aeabi_ddiv+0x65c>)
   13992:	401a      	ands	r2, r3
   13994:	2380      	movs	r3, #128	; 0x80
   13996:	4693      	mov	fp, r2
   13998:	00db      	lsls	r3, r3, #3
   1399a:	18e3      	adds	r3, r4, r3
   1399c:	4a99      	ldr	r2, [pc, #612]	; (13c04 <__aeabi_ddiv+0x660>)
   1399e:	4293      	cmp	r3, r2
   139a0:	dd68      	ble.n	13a74 <__aeabi_ddiv+0x4d0>
   139a2:	2301      	movs	r3, #1
   139a4:	9a02      	ldr	r2, [sp, #8]
   139a6:	4c98      	ldr	r4, [pc, #608]	; (13c08 <__aeabi_ddiv+0x664>)
   139a8:	401a      	ands	r2, r3
   139aa:	2300      	movs	r3, #0
   139ac:	4694      	mov	ip, r2
   139ae:	4698      	mov	r8, r3
   139b0:	2200      	movs	r2, #0
   139b2:	e6c5      	b.n	13740 <__aeabi_ddiv+0x19c>
   139b4:	2280      	movs	r2, #128	; 0x80
   139b6:	464b      	mov	r3, r9
   139b8:	0312      	lsls	r2, r2, #12
   139ba:	4213      	tst	r3, r2
   139bc:	d00a      	beq.n	139d4 <__aeabi_ddiv+0x430>
   139be:	465b      	mov	r3, fp
   139c0:	4213      	tst	r3, r2
   139c2:	d106      	bne.n	139d2 <__aeabi_ddiv+0x42e>
   139c4:	431a      	orrs	r2, r3
   139c6:	0312      	lsls	r2, r2, #12
   139c8:	0b12      	lsrs	r2, r2, #12
   139ca:	46ac      	mov	ip, r5
   139cc:	4688      	mov	r8, r1
   139ce:	4c8e      	ldr	r4, [pc, #568]	; (13c08 <__aeabi_ddiv+0x664>)
   139d0:	e6b6      	b.n	13740 <__aeabi_ddiv+0x19c>
   139d2:	464b      	mov	r3, r9
   139d4:	431a      	orrs	r2, r3
   139d6:	0312      	lsls	r2, r2, #12
   139d8:	0b12      	lsrs	r2, r2, #12
   139da:	46bc      	mov	ip, r7
   139dc:	4c8a      	ldr	r4, [pc, #552]	; (13c08 <__aeabi_ddiv+0x664>)
   139de:	e6af      	b.n	13740 <__aeabi_ddiv+0x19c>
   139e0:	0003      	movs	r3, r0
   139e2:	465a      	mov	r2, fp
   139e4:	3b28      	subs	r3, #40	; 0x28
   139e6:	409a      	lsls	r2, r3
   139e8:	2300      	movs	r3, #0
   139ea:	4691      	mov	r9, r2
   139ec:	4698      	mov	r8, r3
   139ee:	e657      	b.n	136a0 <__aeabi_ddiv+0xfc>
   139f0:	4658      	mov	r0, fp
   139f2:	f001 f869 	bl	14ac8 <__clzsi2>
   139f6:	3020      	adds	r0, #32
   139f8:	e640      	b.n	1367c <__aeabi_ddiv+0xd8>
   139fa:	0003      	movs	r3, r0
   139fc:	4652      	mov	r2, sl
   139fe:	3b28      	subs	r3, #40	; 0x28
   13a00:	409a      	lsls	r2, r3
   13a02:	2100      	movs	r1, #0
   13a04:	4693      	mov	fp, r2
   13a06:	e677      	b.n	136f8 <__aeabi_ddiv+0x154>
   13a08:	f001 f85e 	bl	14ac8 <__clzsi2>
   13a0c:	3020      	adds	r0, #32
   13a0e:	e65f      	b.n	136d0 <__aeabi_ddiv+0x12c>
   13a10:	4588      	cmp	r8, r1
   13a12:	d200      	bcs.n	13a16 <__aeabi_ddiv+0x472>
   13a14:	e6c7      	b.n	137a6 <__aeabi_ddiv+0x202>
   13a16:	464b      	mov	r3, r9
   13a18:	07de      	lsls	r6, r3, #31
   13a1a:	085d      	lsrs	r5, r3, #1
   13a1c:	4643      	mov	r3, r8
   13a1e:	085b      	lsrs	r3, r3, #1
   13a20:	431e      	orrs	r6, r3
   13a22:	4643      	mov	r3, r8
   13a24:	07db      	lsls	r3, r3, #31
   13a26:	469a      	mov	sl, r3
   13a28:	e6c2      	b.n	137b0 <__aeabi_ddiv+0x20c>
   13a2a:	2500      	movs	r5, #0
   13a2c:	4592      	cmp	sl, r2
   13a2e:	d300      	bcc.n	13a32 <__aeabi_ddiv+0x48e>
   13a30:	e733      	b.n	1389a <__aeabi_ddiv+0x2f6>
   13a32:	9e03      	ldr	r6, [sp, #12]
   13a34:	4659      	mov	r1, fp
   13a36:	46b4      	mov	ip, r6
   13a38:	44e2      	add	sl, ip
   13a3a:	45b2      	cmp	sl, r6
   13a3c:	41ad      	sbcs	r5, r5
   13a3e:	426d      	negs	r5, r5
   13a40:	4445      	add	r5, r8
   13a42:	18eb      	adds	r3, r5, r3
   13a44:	3901      	subs	r1, #1
   13a46:	4598      	cmp	r8, r3
   13a48:	d207      	bcs.n	13a5a <__aeabi_ddiv+0x4b6>
   13a4a:	4298      	cmp	r0, r3
   13a4c:	d900      	bls.n	13a50 <__aeabi_ddiv+0x4ac>
   13a4e:	e07f      	b.n	13b50 <__aeabi_ddiv+0x5ac>
   13a50:	d100      	bne.n	13a54 <__aeabi_ddiv+0x4b0>
   13a52:	e0bc      	b.n	13bce <__aeabi_ddiv+0x62a>
   13a54:	1a1d      	subs	r5, r3, r0
   13a56:	468b      	mov	fp, r1
   13a58:	e71f      	b.n	1389a <__aeabi_ddiv+0x2f6>
   13a5a:	4598      	cmp	r8, r3
   13a5c:	d1fa      	bne.n	13a54 <__aeabi_ddiv+0x4b0>
   13a5e:	9d03      	ldr	r5, [sp, #12]
   13a60:	4555      	cmp	r5, sl
   13a62:	d9f2      	bls.n	13a4a <__aeabi_ddiv+0x4a6>
   13a64:	4643      	mov	r3, r8
   13a66:	468b      	mov	fp, r1
   13a68:	1a1d      	subs	r5, r3, r0
   13a6a:	e716      	b.n	1389a <__aeabi_ddiv+0x2f6>
   13a6c:	469b      	mov	fp, r3
   13a6e:	e6ca      	b.n	13806 <__aeabi_ddiv+0x262>
   13a70:	0015      	movs	r5, r2
   13a72:	e6e7      	b.n	13844 <__aeabi_ddiv+0x2a0>
   13a74:	465a      	mov	r2, fp
   13a76:	08c9      	lsrs	r1, r1, #3
   13a78:	0752      	lsls	r2, r2, #29
   13a7a:	430a      	orrs	r2, r1
   13a7c:	055b      	lsls	r3, r3, #21
   13a7e:	4690      	mov	r8, r2
   13a80:	0d5c      	lsrs	r4, r3, #21
   13a82:	465a      	mov	r2, fp
   13a84:	2301      	movs	r3, #1
   13a86:	9902      	ldr	r1, [sp, #8]
   13a88:	0252      	lsls	r2, r2, #9
   13a8a:	4019      	ands	r1, r3
   13a8c:	0b12      	lsrs	r2, r2, #12
   13a8e:	468c      	mov	ip, r1
   13a90:	e656      	b.n	13740 <__aeabi_ddiv+0x19c>
   13a92:	2b00      	cmp	r3, #0
   13a94:	d100      	bne.n	13a98 <__aeabi_ddiv+0x4f4>
   13a96:	e76f      	b.n	13978 <__aeabi_ddiv+0x3d4>
   13a98:	4446      	add	r6, r8
   13a9a:	1e4a      	subs	r2, r1, #1
   13a9c:	45b0      	cmp	r8, r6
   13a9e:	d929      	bls.n	13af4 <__aeabi_ddiv+0x550>
   13aa0:	0011      	movs	r1, r2
   13aa2:	4286      	cmp	r6, r0
   13aa4:	d000      	beq.n	13aa8 <__aeabi_ddiv+0x504>
   13aa6:	e765      	b.n	13974 <__aeabi_ddiv+0x3d0>
   13aa8:	9a03      	ldr	r2, [sp, #12]
   13aaa:	4293      	cmp	r3, r2
   13aac:	d000      	beq.n	13ab0 <__aeabi_ddiv+0x50c>
   13aae:	e761      	b.n	13974 <__aeabi_ddiv+0x3d0>
   13ab0:	e762      	b.n	13978 <__aeabi_ddiv+0x3d4>
   13ab2:	2101      	movs	r1, #1
   13ab4:	4249      	negs	r1, r1
   13ab6:	2001      	movs	r0, #1
   13ab8:	1ac2      	subs	r2, r0, r3
   13aba:	2a38      	cmp	r2, #56	; 0x38
   13abc:	dd21      	ble.n	13b02 <__aeabi_ddiv+0x55e>
   13abe:	9b02      	ldr	r3, [sp, #8]
   13ac0:	4003      	ands	r3, r0
   13ac2:	469c      	mov	ip, r3
   13ac4:	e638      	b.n	13738 <__aeabi_ddiv+0x194>
   13ac6:	220f      	movs	r2, #15
   13ac8:	400a      	ands	r2, r1
   13aca:	2a04      	cmp	r2, #4
   13acc:	d100      	bne.n	13ad0 <__aeabi_ddiv+0x52c>
   13ace:	e75b      	b.n	13988 <__aeabi_ddiv+0x3e4>
   13ad0:	000a      	movs	r2, r1
   13ad2:	1d11      	adds	r1, r2, #4
   13ad4:	4291      	cmp	r1, r2
   13ad6:	4192      	sbcs	r2, r2
   13ad8:	4252      	negs	r2, r2
   13ada:	4493      	add	fp, r2
   13adc:	e754      	b.n	13988 <__aeabi_ddiv+0x3e4>
   13ade:	4b47      	ldr	r3, [pc, #284]	; (13bfc <__aeabi_ddiv+0x658>)
   13ae0:	18e3      	adds	r3, r4, r3
   13ae2:	2b00      	cmp	r3, #0
   13ae4:	dde5      	ble.n	13ab2 <__aeabi_ddiv+0x50e>
   13ae6:	2201      	movs	r2, #1
   13ae8:	4252      	negs	r2, r2
   13aea:	e7f2      	b.n	13ad2 <__aeabi_ddiv+0x52e>
   13aec:	001d      	movs	r5, r3
   13aee:	e6fa      	b.n	138e6 <__aeabi_ddiv+0x342>
   13af0:	469a      	mov	sl, r3
   13af2:	e71c      	b.n	1392e <__aeabi_ddiv+0x38a>
   13af4:	42b0      	cmp	r0, r6
   13af6:	d839      	bhi.n	13b6c <__aeabi_ddiv+0x5c8>
   13af8:	d06e      	beq.n	13bd8 <__aeabi_ddiv+0x634>
   13afa:	0011      	movs	r1, r2
   13afc:	e73a      	b.n	13974 <__aeabi_ddiv+0x3d0>
   13afe:	9302      	str	r3, [sp, #8]
   13b00:	e73a      	b.n	13978 <__aeabi_ddiv+0x3d4>
   13b02:	2a1f      	cmp	r2, #31
   13b04:	dc3c      	bgt.n	13b80 <__aeabi_ddiv+0x5dc>
   13b06:	2320      	movs	r3, #32
   13b08:	1a9b      	subs	r3, r3, r2
   13b0a:	000c      	movs	r4, r1
   13b0c:	4658      	mov	r0, fp
   13b0e:	4099      	lsls	r1, r3
   13b10:	4098      	lsls	r0, r3
   13b12:	1e4b      	subs	r3, r1, #1
   13b14:	4199      	sbcs	r1, r3
   13b16:	465b      	mov	r3, fp
   13b18:	40d4      	lsrs	r4, r2
   13b1a:	40d3      	lsrs	r3, r2
   13b1c:	4320      	orrs	r0, r4
   13b1e:	4308      	orrs	r0, r1
   13b20:	001a      	movs	r2, r3
   13b22:	0743      	lsls	r3, r0, #29
   13b24:	d009      	beq.n	13b3a <__aeabi_ddiv+0x596>
   13b26:	230f      	movs	r3, #15
   13b28:	4003      	ands	r3, r0
   13b2a:	2b04      	cmp	r3, #4
   13b2c:	d005      	beq.n	13b3a <__aeabi_ddiv+0x596>
   13b2e:	0001      	movs	r1, r0
   13b30:	1d08      	adds	r0, r1, #4
   13b32:	4288      	cmp	r0, r1
   13b34:	419b      	sbcs	r3, r3
   13b36:	425b      	negs	r3, r3
   13b38:	18d2      	adds	r2, r2, r3
   13b3a:	0213      	lsls	r3, r2, #8
   13b3c:	d53a      	bpl.n	13bb4 <__aeabi_ddiv+0x610>
   13b3e:	2301      	movs	r3, #1
   13b40:	9a02      	ldr	r2, [sp, #8]
   13b42:	2401      	movs	r4, #1
   13b44:	401a      	ands	r2, r3
   13b46:	2300      	movs	r3, #0
   13b48:	4694      	mov	ip, r2
   13b4a:	4698      	mov	r8, r3
   13b4c:	2200      	movs	r2, #0
   13b4e:	e5f7      	b.n	13740 <__aeabi_ddiv+0x19c>
   13b50:	2102      	movs	r1, #2
   13b52:	4249      	negs	r1, r1
   13b54:	468c      	mov	ip, r1
   13b56:	9d03      	ldr	r5, [sp, #12]
   13b58:	44e3      	add	fp, ip
   13b5a:	46ac      	mov	ip, r5
   13b5c:	44e2      	add	sl, ip
   13b5e:	45aa      	cmp	sl, r5
   13b60:	41ad      	sbcs	r5, r5
   13b62:	426d      	negs	r5, r5
   13b64:	4445      	add	r5, r8
   13b66:	18ed      	adds	r5, r5, r3
   13b68:	1a2d      	subs	r5, r5, r0
   13b6a:	e696      	b.n	1389a <__aeabi_ddiv+0x2f6>
   13b6c:	1e8a      	subs	r2, r1, #2
   13b6e:	9903      	ldr	r1, [sp, #12]
   13b70:	004d      	lsls	r5, r1, #1
   13b72:	428d      	cmp	r5, r1
   13b74:	4189      	sbcs	r1, r1
   13b76:	4249      	negs	r1, r1
   13b78:	4441      	add	r1, r8
   13b7a:	1876      	adds	r6, r6, r1
   13b7c:	9503      	str	r5, [sp, #12]
   13b7e:	e78f      	b.n	13aa0 <__aeabi_ddiv+0x4fc>
   13b80:	201f      	movs	r0, #31
   13b82:	4240      	negs	r0, r0
   13b84:	1ac3      	subs	r3, r0, r3
   13b86:	4658      	mov	r0, fp
   13b88:	40d8      	lsrs	r0, r3
   13b8a:	0003      	movs	r3, r0
   13b8c:	2a20      	cmp	r2, #32
   13b8e:	d028      	beq.n	13be2 <__aeabi_ddiv+0x63e>
   13b90:	2040      	movs	r0, #64	; 0x40
   13b92:	465d      	mov	r5, fp
   13b94:	1a82      	subs	r2, r0, r2
   13b96:	4095      	lsls	r5, r2
   13b98:	4329      	orrs	r1, r5
   13b9a:	1e4a      	subs	r2, r1, #1
   13b9c:	4191      	sbcs	r1, r2
   13b9e:	4319      	orrs	r1, r3
   13ba0:	2307      	movs	r3, #7
   13ba2:	2200      	movs	r2, #0
   13ba4:	400b      	ands	r3, r1
   13ba6:	d009      	beq.n	13bbc <__aeabi_ddiv+0x618>
   13ba8:	230f      	movs	r3, #15
   13baa:	2200      	movs	r2, #0
   13bac:	400b      	ands	r3, r1
   13bae:	0008      	movs	r0, r1
   13bb0:	2b04      	cmp	r3, #4
   13bb2:	d1bd      	bne.n	13b30 <__aeabi_ddiv+0x58c>
   13bb4:	0001      	movs	r1, r0
   13bb6:	0753      	lsls	r3, r2, #29
   13bb8:	0252      	lsls	r2, r2, #9
   13bba:	0b12      	lsrs	r2, r2, #12
   13bbc:	08c9      	lsrs	r1, r1, #3
   13bbe:	4319      	orrs	r1, r3
   13bc0:	2301      	movs	r3, #1
   13bc2:	4688      	mov	r8, r1
   13bc4:	9902      	ldr	r1, [sp, #8]
   13bc6:	2400      	movs	r4, #0
   13bc8:	4019      	ands	r1, r3
   13bca:	468c      	mov	ip, r1
   13bcc:	e5b8      	b.n	13740 <__aeabi_ddiv+0x19c>
   13bce:	4552      	cmp	r2, sl
   13bd0:	d8be      	bhi.n	13b50 <__aeabi_ddiv+0x5ac>
   13bd2:	468b      	mov	fp, r1
   13bd4:	2500      	movs	r5, #0
   13bd6:	e660      	b.n	1389a <__aeabi_ddiv+0x2f6>
   13bd8:	9d03      	ldr	r5, [sp, #12]
   13bda:	429d      	cmp	r5, r3
   13bdc:	d3c6      	bcc.n	13b6c <__aeabi_ddiv+0x5c8>
   13bde:	0011      	movs	r1, r2
   13be0:	e762      	b.n	13aa8 <__aeabi_ddiv+0x504>
   13be2:	2500      	movs	r5, #0
   13be4:	e7d8      	b.n	13b98 <__aeabi_ddiv+0x5f4>
   13be6:	2280      	movs	r2, #128	; 0x80
   13be8:	465b      	mov	r3, fp
   13bea:	0312      	lsls	r2, r2, #12
   13bec:	431a      	orrs	r2, r3
   13bee:	9b01      	ldr	r3, [sp, #4]
   13bf0:	0312      	lsls	r2, r2, #12
   13bf2:	0b12      	lsrs	r2, r2, #12
   13bf4:	469c      	mov	ip, r3
   13bf6:	4688      	mov	r8, r1
   13bf8:	4c03      	ldr	r4, [pc, #12]	; (13c08 <__aeabi_ddiv+0x664>)
   13bfa:	e5a1      	b.n	13740 <__aeabi_ddiv+0x19c>
   13bfc:	000003ff 	.word	0x000003ff
   13c00:	feffffff 	.word	0xfeffffff
   13c04:	000007fe 	.word	0x000007fe
   13c08:	000007ff 	.word	0x000007ff

00013c0c <__aeabi_dmul>:
   13c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   13c0e:	4657      	mov	r7, sl
   13c10:	4645      	mov	r5, r8
   13c12:	46de      	mov	lr, fp
   13c14:	464e      	mov	r6, r9
   13c16:	b5e0      	push	{r5, r6, r7, lr}
   13c18:	030c      	lsls	r4, r1, #12
   13c1a:	4698      	mov	r8, r3
   13c1c:	004e      	lsls	r6, r1, #1
   13c1e:	0b23      	lsrs	r3, r4, #12
   13c20:	b087      	sub	sp, #28
   13c22:	0007      	movs	r7, r0
   13c24:	4692      	mov	sl, r2
   13c26:	469b      	mov	fp, r3
   13c28:	0d76      	lsrs	r6, r6, #21
   13c2a:	0fcd      	lsrs	r5, r1, #31
   13c2c:	2e00      	cmp	r6, #0
   13c2e:	d06b      	beq.n	13d08 <__aeabi_dmul+0xfc>
   13c30:	4b6d      	ldr	r3, [pc, #436]	; (13de8 <__aeabi_dmul+0x1dc>)
   13c32:	429e      	cmp	r6, r3
   13c34:	d035      	beq.n	13ca2 <__aeabi_dmul+0x96>
   13c36:	2480      	movs	r4, #128	; 0x80
   13c38:	465b      	mov	r3, fp
   13c3a:	0f42      	lsrs	r2, r0, #29
   13c3c:	0424      	lsls	r4, r4, #16
   13c3e:	00db      	lsls	r3, r3, #3
   13c40:	4314      	orrs	r4, r2
   13c42:	431c      	orrs	r4, r3
   13c44:	00c3      	lsls	r3, r0, #3
   13c46:	4699      	mov	r9, r3
   13c48:	4b68      	ldr	r3, [pc, #416]	; (13dec <__aeabi_dmul+0x1e0>)
   13c4a:	46a3      	mov	fp, r4
   13c4c:	469c      	mov	ip, r3
   13c4e:	2300      	movs	r3, #0
   13c50:	2700      	movs	r7, #0
   13c52:	4466      	add	r6, ip
   13c54:	9302      	str	r3, [sp, #8]
   13c56:	4643      	mov	r3, r8
   13c58:	031c      	lsls	r4, r3, #12
   13c5a:	005a      	lsls	r2, r3, #1
   13c5c:	0fdb      	lsrs	r3, r3, #31
   13c5e:	4650      	mov	r0, sl
   13c60:	0b24      	lsrs	r4, r4, #12
   13c62:	0d52      	lsrs	r2, r2, #21
   13c64:	4698      	mov	r8, r3
   13c66:	d100      	bne.n	13c6a <__aeabi_dmul+0x5e>
   13c68:	e076      	b.n	13d58 <__aeabi_dmul+0x14c>
   13c6a:	4b5f      	ldr	r3, [pc, #380]	; (13de8 <__aeabi_dmul+0x1dc>)
   13c6c:	429a      	cmp	r2, r3
   13c6e:	d06d      	beq.n	13d4c <__aeabi_dmul+0x140>
   13c70:	2380      	movs	r3, #128	; 0x80
   13c72:	0f41      	lsrs	r1, r0, #29
   13c74:	041b      	lsls	r3, r3, #16
   13c76:	430b      	orrs	r3, r1
   13c78:	495c      	ldr	r1, [pc, #368]	; (13dec <__aeabi_dmul+0x1e0>)
   13c7a:	00e4      	lsls	r4, r4, #3
   13c7c:	468c      	mov	ip, r1
   13c7e:	431c      	orrs	r4, r3
   13c80:	00c3      	lsls	r3, r0, #3
   13c82:	2000      	movs	r0, #0
   13c84:	4462      	add	r2, ip
   13c86:	4641      	mov	r1, r8
   13c88:	18b6      	adds	r6, r6, r2
   13c8a:	4069      	eors	r1, r5
   13c8c:	1c72      	adds	r2, r6, #1
   13c8e:	9101      	str	r1, [sp, #4]
   13c90:	4694      	mov	ip, r2
   13c92:	4307      	orrs	r7, r0
   13c94:	2f0f      	cmp	r7, #15
   13c96:	d900      	bls.n	13c9a <__aeabi_dmul+0x8e>
   13c98:	e0b0      	b.n	13dfc <__aeabi_dmul+0x1f0>
   13c9a:	4a55      	ldr	r2, [pc, #340]	; (13df0 <__aeabi_dmul+0x1e4>)
   13c9c:	00bf      	lsls	r7, r7, #2
   13c9e:	59d2      	ldr	r2, [r2, r7]
   13ca0:	4697      	mov	pc, r2
   13ca2:	465b      	mov	r3, fp
   13ca4:	4303      	orrs	r3, r0
   13ca6:	4699      	mov	r9, r3
   13ca8:	d000      	beq.n	13cac <__aeabi_dmul+0xa0>
   13caa:	e087      	b.n	13dbc <__aeabi_dmul+0x1b0>
   13cac:	2300      	movs	r3, #0
   13cae:	469b      	mov	fp, r3
   13cb0:	3302      	adds	r3, #2
   13cb2:	2708      	movs	r7, #8
   13cb4:	9302      	str	r3, [sp, #8]
   13cb6:	e7ce      	b.n	13c56 <__aeabi_dmul+0x4a>
   13cb8:	4642      	mov	r2, r8
   13cba:	9201      	str	r2, [sp, #4]
   13cbc:	2802      	cmp	r0, #2
   13cbe:	d067      	beq.n	13d90 <__aeabi_dmul+0x184>
   13cc0:	2803      	cmp	r0, #3
   13cc2:	d100      	bne.n	13cc6 <__aeabi_dmul+0xba>
   13cc4:	e20e      	b.n	140e4 <__aeabi_dmul+0x4d8>
   13cc6:	2801      	cmp	r0, #1
   13cc8:	d000      	beq.n	13ccc <__aeabi_dmul+0xc0>
   13cca:	e162      	b.n	13f92 <__aeabi_dmul+0x386>
   13ccc:	2300      	movs	r3, #0
   13cce:	2400      	movs	r4, #0
   13cd0:	2200      	movs	r2, #0
   13cd2:	4699      	mov	r9, r3
   13cd4:	9901      	ldr	r1, [sp, #4]
   13cd6:	4001      	ands	r1, r0
   13cd8:	b2cd      	uxtb	r5, r1
   13cda:	2100      	movs	r1, #0
   13cdc:	0312      	lsls	r2, r2, #12
   13cde:	0d0b      	lsrs	r3, r1, #20
   13ce0:	0b12      	lsrs	r2, r2, #12
   13ce2:	051b      	lsls	r3, r3, #20
   13ce4:	4313      	orrs	r3, r2
   13ce6:	4a43      	ldr	r2, [pc, #268]	; (13df4 <__aeabi_dmul+0x1e8>)
   13ce8:	0524      	lsls	r4, r4, #20
   13cea:	4013      	ands	r3, r2
   13cec:	431c      	orrs	r4, r3
   13cee:	0064      	lsls	r4, r4, #1
   13cf0:	07ed      	lsls	r5, r5, #31
   13cf2:	0864      	lsrs	r4, r4, #1
   13cf4:	432c      	orrs	r4, r5
   13cf6:	4648      	mov	r0, r9
   13cf8:	0021      	movs	r1, r4
   13cfa:	b007      	add	sp, #28
   13cfc:	bc3c      	pop	{r2, r3, r4, r5}
   13cfe:	4690      	mov	r8, r2
   13d00:	4699      	mov	r9, r3
   13d02:	46a2      	mov	sl, r4
   13d04:	46ab      	mov	fp, r5
   13d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13d08:	4303      	orrs	r3, r0
   13d0a:	4699      	mov	r9, r3
   13d0c:	d04f      	beq.n	13dae <__aeabi_dmul+0x1a2>
   13d0e:	465b      	mov	r3, fp
   13d10:	2b00      	cmp	r3, #0
   13d12:	d100      	bne.n	13d16 <__aeabi_dmul+0x10a>
   13d14:	e189      	b.n	1402a <__aeabi_dmul+0x41e>
   13d16:	4658      	mov	r0, fp
   13d18:	f000 fed6 	bl	14ac8 <__clzsi2>
   13d1c:	0003      	movs	r3, r0
   13d1e:	3b0b      	subs	r3, #11
   13d20:	2b1c      	cmp	r3, #28
   13d22:	dd00      	ble.n	13d26 <__aeabi_dmul+0x11a>
   13d24:	e17a      	b.n	1401c <__aeabi_dmul+0x410>
   13d26:	221d      	movs	r2, #29
   13d28:	1ad3      	subs	r3, r2, r3
   13d2a:	003a      	movs	r2, r7
   13d2c:	0001      	movs	r1, r0
   13d2e:	465c      	mov	r4, fp
   13d30:	40da      	lsrs	r2, r3
   13d32:	3908      	subs	r1, #8
   13d34:	408c      	lsls	r4, r1
   13d36:	0013      	movs	r3, r2
   13d38:	408f      	lsls	r7, r1
   13d3a:	4323      	orrs	r3, r4
   13d3c:	469b      	mov	fp, r3
   13d3e:	46b9      	mov	r9, r7
   13d40:	2300      	movs	r3, #0
   13d42:	4e2d      	ldr	r6, [pc, #180]	; (13df8 <__aeabi_dmul+0x1ec>)
   13d44:	2700      	movs	r7, #0
   13d46:	1a36      	subs	r6, r6, r0
   13d48:	9302      	str	r3, [sp, #8]
   13d4a:	e784      	b.n	13c56 <__aeabi_dmul+0x4a>
   13d4c:	4653      	mov	r3, sl
   13d4e:	4323      	orrs	r3, r4
   13d50:	d12a      	bne.n	13da8 <__aeabi_dmul+0x19c>
   13d52:	2400      	movs	r4, #0
   13d54:	2002      	movs	r0, #2
   13d56:	e796      	b.n	13c86 <__aeabi_dmul+0x7a>
   13d58:	4653      	mov	r3, sl
   13d5a:	4323      	orrs	r3, r4
   13d5c:	d020      	beq.n	13da0 <__aeabi_dmul+0x194>
   13d5e:	2c00      	cmp	r4, #0
   13d60:	d100      	bne.n	13d64 <__aeabi_dmul+0x158>
   13d62:	e157      	b.n	14014 <__aeabi_dmul+0x408>
   13d64:	0020      	movs	r0, r4
   13d66:	f000 feaf 	bl	14ac8 <__clzsi2>
   13d6a:	0003      	movs	r3, r0
   13d6c:	3b0b      	subs	r3, #11
   13d6e:	2b1c      	cmp	r3, #28
   13d70:	dd00      	ble.n	13d74 <__aeabi_dmul+0x168>
   13d72:	e149      	b.n	14008 <__aeabi_dmul+0x3fc>
   13d74:	211d      	movs	r1, #29
   13d76:	1acb      	subs	r3, r1, r3
   13d78:	4651      	mov	r1, sl
   13d7a:	0002      	movs	r2, r0
   13d7c:	40d9      	lsrs	r1, r3
   13d7e:	4653      	mov	r3, sl
   13d80:	3a08      	subs	r2, #8
   13d82:	4094      	lsls	r4, r2
   13d84:	4093      	lsls	r3, r2
   13d86:	430c      	orrs	r4, r1
   13d88:	4a1b      	ldr	r2, [pc, #108]	; (13df8 <__aeabi_dmul+0x1ec>)
   13d8a:	1a12      	subs	r2, r2, r0
   13d8c:	2000      	movs	r0, #0
   13d8e:	e77a      	b.n	13c86 <__aeabi_dmul+0x7a>
   13d90:	2501      	movs	r5, #1
   13d92:	9b01      	ldr	r3, [sp, #4]
   13d94:	4c14      	ldr	r4, [pc, #80]	; (13de8 <__aeabi_dmul+0x1dc>)
   13d96:	401d      	ands	r5, r3
   13d98:	2300      	movs	r3, #0
   13d9a:	2200      	movs	r2, #0
   13d9c:	4699      	mov	r9, r3
   13d9e:	e79c      	b.n	13cda <__aeabi_dmul+0xce>
   13da0:	2400      	movs	r4, #0
   13da2:	2200      	movs	r2, #0
   13da4:	2001      	movs	r0, #1
   13da6:	e76e      	b.n	13c86 <__aeabi_dmul+0x7a>
   13da8:	4653      	mov	r3, sl
   13daa:	2003      	movs	r0, #3
   13dac:	e76b      	b.n	13c86 <__aeabi_dmul+0x7a>
   13dae:	2300      	movs	r3, #0
   13db0:	469b      	mov	fp, r3
   13db2:	3301      	adds	r3, #1
   13db4:	2704      	movs	r7, #4
   13db6:	2600      	movs	r6, #0
   13db8:	9302      	str	r3, [sp, #8]
   13dba:	e74c      	b.n	13c56 <__aeabi_dmul+0x4a>
   13dbc:	2303      	movs	r3, #3
   13dbe:	4681      	mov	r9, r0
   13dc0:	270c      	movs	r7, #12
   13dc2:	9302      	str	r3, [sp, #8]
   13dc4:	e747      	b.n	13c56 <__aeabi_dmul+0x4a>
   13dc6:	2280      	movs	r2, #128	; 0x80
   13dc8:	2300      	movs	r3, #0
   13dca:	2500      	movs	r5, #0
   13dcc:	0312      	lsls	r2, r2, #12
   13dce:	4699      	mov	r9, r3
   13dd0:	4c05      	ldr	r4, [pc, #20]	; (13de8 <__aeabi_dmul+0x1dc>)
   13dd2:	e782      	b.n	13cda <__aeabi_dmul+0xce>
   13dd4:	465c      	mov	r4, fp
   13dd6:	464b      	mov	r3, r9
   13dd8:	9802      	ldr	r0, [sp, #8]
   13dda:	e76f      	b.n	13cbc <__aeabi_dmul+0xb0>
   13ddc:	465c      	mov	r4, fp
   13dde:	464b      	mov	r3, r9
   13de0:	9501      	str	r5, [sp, #4]
   13de2:	9802      	ldr	r0, [sp, #8]
   13de4:	e76a      	b.n	13cbc <__aeabi_dmul+0xb0>
   13de6:	46c0      	nop			; (mov r8, r8)
   13de8:	000007ff 	.word	0x000007ff
   13dec:	fffffc01 	.word	0xfffffc01
   13df0:	000174a8 	.word	0x000174a8
   13df4:	800fffff 	.word	0x800fffff
   13df8:	fffffc0d 	.word	0xfffffc0d
   13dfc:	464a      	mov	r2, r9
   13dfe:	4649      	mov	r1, r9
   13e00:	0c17      	lsrs	r7, r2, #16
   13e02:	0c1a      	lsrs	r2, r3, #16
   13e04:	041b      	lsls	r3, r3, #16
   13e06:	0c1b      	lsrs	r3, r3, #16
   13e08:	0408      	lsls	r0, r1, #16
   13e0a:	0019      	movs	r1, r3
   13e0c:	0c00      	lsrs	r0, r0, #16
   13e0e:	4341      	muls	r1, r0
   13e10:	0015      	movs	r5, r2
   13e12:	4688      	mov	r8, r1
   13e14:	0019      	movs	r1, r3
   13e16:	437d      	muls	r5, r7
   13e18:	4379      	muls	r1, r7
   13e1a:	9503      	str	r5, [sp, #12]
   13e1c:	4689      	mov	r9, r1
   13e1e:	0029      	movs	r1, r5
   13e20:	0015      	movs	r5, r2
   13e22:	4345      	muls	r5, r0
   13e24:	444d      	add	r5, r9
   13e26:	9502      	str	r5, [sp, #8]
   13e28:	4645      	mov	r5, r8
   13e2a:	0c2d      	lsrs	r5, r5, #16
   13e2c:	46aa      	mov	sl, r5
   13e2e:	9d02      	ldr	r5, [sp, #8]
   13e30:	4455      	add	r5, sl
   13e32:	45a9      	cmp	r9, r5
   13e34:	d906      	bls.n	13e44 <__aeabi_dmul+0x238>
   13e36:	468a      	mov	sl, r1
   13e38:	2180      	movs	r1, #128	; 0x80
   13e3a:	0249      	lsls	r1, r1, #9
   13e3c:	4689      	mov	r9, r1
   13e3e:	44ca      	add	sl, r9
   13e40:	4651      	mov	r1, sl
   13e42:	9103      	str	r1, [sp, #12]
   13e44:	0c29      	lsrs	r1, r5, #16
   13e46:	9104      	str	r1, [sp, #16]
   13e48:	4641      	mov	r1, r8
   13e4a:	0409      	lsls	r1, r1, #16
   13e4c:	042d      	lsls	r5, r5, #16
   13e4e:	0c09      	lsrs	r1, r1, #16
   13e50:	4688      	mov	r8, r1
   13e52:	0029      	movs	r1, r5
   13e54:	0c25      	lsrs	r5, r4, #16
   13e56:	0424      	lsls	r4, r4, #16
   13e58:	4441      	add	r1, r8
   13e5a:	0c24      	lsrs	r4, r4, #16
   13e5c:	9105      	str	r1, [sp, #20]
   13e5e:	0021      	movs	r1, r4
   13e60:	4341      	muls	r1, r0
   13e62:	4688      	mov	r8, r1
   13e64:	0021      	movs	r1, r4
   13e66:	4379      	muls	r1, r7
   13e68:	468a      	mov	sl, r1
   13e6a:	4368      	muls	r0, r5
   13e6c:	4641      	mov	r1, r8
   13e6e:	4450      	add	r0, sl
   13e70:	4681      	mov	r9, r0
   13e72:	0c08      	lsrs	r0, r1, #16
   13e74:	4448      	add	r0, r9
   13e76:	436f      	muls	r7, r5
   13e78:	4582      	cmp	sl, r0
   13e7a:	d903      	bls.n	13e84 <__aeabi_dmul+0x278>
   13e7c:	2180      	movs	r1, #128	; 0x80
   13e7e:	0249      	lsls	r1, r1, #9
   13e80:	4689      	mov	r9, r1
   13e82:	444f      	add	r7, r9
   13e84:	0c01      	lsrs	r1, r0, #16
   13e86:	4689      	mov	r9, r1
   13e88:	0039      	movs	r1, r7
   13e8a:	4449      	add	r1, r9
   13e8c:	9102      	str	r1, [sp, #8]
   13e8e:	4641      	mov	r1, r8
   13e90:	040f      	lsls	r7, r1, #16
   13e92:	9904      	ldr	r1, [sp, #16]
   13e94:	0c3f      	lsrs	r7, r7, #16
   13e96:	4688      	mov	r8, r1
   13e98:	0400      	lsls	r0, r0, #16
   13e9a:	19c0      	adds	r0, r0, r7
   13e9c:	4480      	add	r8, r0
   13e9e:	4641      	mov	r1, r8
   13ea0:	9104      	str	r1, [sp, #16]
   13ea2:	4659      	mov	r1, fp
   13ea4:	0c0f      	lsrs	r7, r1, #16
   13ea6:	0409      	lsls	r1, r1, #16
   13ea8:	0c09      	lsrs	r1, r1, #16
   13eaa:	4688      	mov	r8, r1
   13eac:	4359      	muls	r1, r3
   13eae:	468a      	mov	sl, r1
   13eb0:	0039      	movs	r1, r7
   13eb2:	4351      	muls	r1, r2
   13eb4:	4689      	mov	r9, r1
   13eb6:	4641      	mov	r1, r8
   13eb8:	434a      	muls	r2, r1
   13eba:	4651      	mov	r1, sl
   13ebc:	0c09      	lsrs	r1, r1, #16
   13ebe:	468b      	mov	fp, r1
   13ec0:	437b      	muls	r3, r7
   13ec2:	18d2      	adds	r2, r2, r3
   13ec4:	445a      	add	r2, fp
   13ec6:	4293      	cmp	r3, r2
   13ec8:	d903      	bls.n	13ed2 <__aeabi_dmul+0x2c6>
   13eca:	2380      	movs	r3, #128	; 0x80
   13ecc:	025b      	lsls	r3, r3, #9
   13ece:	469b      	mov	fp, r3
   13ed0:	44d9      	add	r9, fp
   13ed2:	4651      	mov	r1, sl
   13ed4:	0409      	lsls	r1, r1, #16
   13ed6:	0c09      	lsrs	r1, r1, #16
   13ed8:	468a      	mov	sl, r1
   13eda:	4641      	mov	r1, r8
   13edc:	4361      	muls	r1, r4
   13ede:	437c      	muls	r4, r7
   13ee0:	0c13      	lsrs	r3, r2, #16
   13ee2:	0412      	lsls	r2, r2, #16
   13ee4:	444b      	add	r3, r9
   13ee6:	4452      	add	r2, sl
   13ee8:	46a1      	mov	r9, r4
   13eea:	468a      	mov	sl, r1
   13eec:	003c      	movs	r4, r7
   13eee:	4641      	mov	r1, r8
   13ef0:	436c      	muls	r4, r5
   13ef2:	434d      	muls	r5, r1
   13ef4:	4651      	mov	r1, sl
   13ef6:	444d      	add	r5, r9
   13ef8:	0c0f      	lsrs	r7, r1, #16
   13efa:	197d      	adds	r5, r7, r5
   13efc:	45a9      	cmp	r9, r5
   13efe:	d903      	bls.n	13f08 <__aeabi_dmul+0x2fc>
   13f00:	2180      	movs	r1, #128	; 0x80
   13f02:	0249      	lsls	r1, r1, #9
   13f04:	4688      	mov	r8, r1
   13f06:	4444      	add	r4, r8
   13f08:	9f04      	ldr	r7, [sp, #16]
   13f0a:	9903      	ldr	r1, [sp, #12]
   13f0c:	46b8      	mov	r8, r7
   13f0e:	4441      	add	r1, r8
   13f10:	468b      	mov	fp, r1
   13f12:	4583      	cmp	fp, r0
   13f14:	4180      	sbcs	r0, r0
   13f16:	4241      	negs	r1, r0
   13f18:	4688      	mov	r8, r1
   13f1a:	4651      	mov	r1, sl
   13f1c:	0408      	lsls	r0, r1, #16
   13f1e:	042f      	lsls	r7, r5, #16
   13f20:	0c00      	lsrs	r0, r0, #16
   13f22:	183f      	adds	r7, r7, r0
   13f24:	4658      	mov	r0, fp
   13f26:	9902      	ldr	r1, [sp, #8]
   13f28:	1810      	adds	r0, r2, r0
   13f2a:	4689      	mov	r9, r1
   13f2c:	4290      	cmp	r0, r2
   13f2e:	4192      	sbcs	r2, r2
   13f30:	444f      	add	r7, r9
   13f32:	46ba      	mov	sl, r7
   13f34:	4252      	negs	r2, r2
   13f36:	4699      	mov	r9, r3
   13f38:	4693      	mov	fp, r2
   13f3a:	44c2      	add	sl, r8
   13f3c:	44d1      	add	r9, sl
   13f3e:	44cb      	add	fp, r9
   13f40:	428f      	cmp	r7, r1
   13f42:	41bf      	sbcs	r7, r7
   13f44:	45c2      	cmp	sl, r8
   13f46:	4189      	sbcs	r1, r1
   13f48:	4599      	cmp	r9, r3
   13f4a:	419b      	sbcs	r3, r3
   13f4c:	4593      	cmp	fp, r2
   13f4e:	4192      	sbcs	r2, r2
   13f50:	427f      	negs	r7, r7
   13f52:	4249      	negs	r1, r1
   13f54:	0c2d      	lsrs	r5, r5, #16
   13f56:	4252      	negs	r2, r2
   13f58:	430f      	orrs	r7, r1
   13f5a:	425b      	negs	r3, r3
   13f5c:	4313      	orrs	r3, r2
   13f5e:	197f      	adds	r7, r7, r5
   13f60:	18ff      	adds	r7, r7, r3
   13f62:	465b      	mov	r3, fp
   13f64:	193c      	adds	r4, r7, r4
   13f66:	0ddb      	lsrs	r3, r3, #23
   13f68:	9a05      	ldr	r2, [sp, #20]
   13f6a:	0264      	lsls	r4, r4, #9
   13f6c:	431c      	orrs	r4, r3
   13f6e:	0243      	lsls	r3, r0, #9
   13f70:	4313      	orrs	r3, r2
   13f72:	1e5d      	subs	r5, r3, #1
   13f74:	41ab      	sbcs	r3, r5
   13f76:	465a      	mov	r2, fp
   13f78:	0dc0      	lsrs	r0, r0, #23
   13f7a:	4303      	orrs	r3, r0
   13f7c:	0252      	lsls	r2, r2, #9
   13f7e:	4313      	orrs	r3, r2
   13f80:	01e2      	lsls	r2, r4, #7
   13f82:	d556      	bpl.n	14032 <__aeabi_dmul+0x426>
   13f84:	2001      	movs	r0, #1
   13f86:	085a      	lsrs	r2, r3, #1
   13f88:	4003      	ands	r3, r0
   13f8a:	4313      	orrs	r3, r2
   13f8c:	07e2      	lsls	r2, r4, #31
   13f8e:	4313      	orrs	r3, r2
   13f90:	0864      	lsrs	r4, r4, #1
   13f92:	485a      	ldr	r0, [pc, #360]	; (140fc <__aeabi_dmul+0x4f0>)
   13f94:	4460      	add	r0, ip
   13f96:	2800      	cmp	r0, #0
   13f98:	dd4d      	ble.n	14036 <__aeabi_dmul+0x42a>
   13f9a:	075a      	lsls	r2, r3, #29
   13f9c:	d009      	beq.n	13fb2 <__aeabi_dmul+0x3a6>
   13f9e:	220f      	movs	r2, #15
   13fa0:	401a      	ands	r2, r3
   13fa2:	2a04      	cmp	r2, #4
   13fa4:	d005      	beq.n	13fb2 <__aeabi_dmul+0x3a6>
   13fa6:	1d1a      	adds	r2, r3, #4
   13fa8:	429a      	cmp	r2, r3
   13faa:	419b      	sbcs	r3, r3
   13fac:	425b      	negs	r3, r3
   13fae:	18e4      	adds	r4, r4, r3
   13fb0:	0013      	movs	r3, r2
   13fb2:	01e2      	lsls	r2, r4, #7
   13fb4:	d504      	bpl.n	13fc0 <__aeabi_dmul+0x3b4>
   13fb6:	2080      	movs	r0, #128	; 0x80
   13fb8:	4a51      	ldr	r2, [pc, #324]	; (14100 <__aeabi_dmul+0x4f4>)
   13fba:	00c0      	lsls	r0, r0, #3
   13fbc:	4014      	ands	r4, r2
   13fbe:	4460      	add	r0, ip
   13fc0:	4a50      	ldr	r2, [pc, #320]	; (14104 <__aeabi_dmul+0x4f8>)
   13fc2:	4290      	cmp	r0, r2
   13fc4:	dd00      	ble.n	13fc8 <__aeabi_dmul+0x3bc>
   13fc6:	e6e3      	b.n	13d90 <__aeabi_dmul+0x184>
   13fc8:	2501      	movs	r5, #1
   13fca:	08db      	lsrs	r3, r3, #3
   13fcc:	0762      	lsls	r2, r4, #29
   13fce:	431a      	orrs	r2, r3
   13fd0:	0264      	lsls	r4, r4, #9
   13fd2:	9b01      	ldr	r3, [sp, #4]
   13fd4:	4691      	mov	r9, r2
   13fd6:	0b22      	lsrs	r2, r4, #12
   13fd8:	0544      	lsls	r4, r0, #21
   13fda:	0d64      	lsrs	r4, r4, #21
   13fdc:	401d      	ands	r5, r3
   13fde:	e67c      	b.n	13cda <__aeabi_dmul+0xce>
   13fe0:	2280      	movs	r2, #128	; 0x80
   13fe2:	4659      	mov	r1, fp
   13fe4:	0312      	lsls	r2, r2, #12
   13fe6:	4211      	tst	r1, r2
   13fe8:	d008      	beq.n	13ffc <__aeabi_dmul+0x3f0>
   13fea:	4214      	tst	r4, r2
   13fec:	d106      	bne.n	13ffc <__aeabi_dmul+0x3f0>
   13fee:	4322      	orrs	r2, r4
   13ff0:	0312      	lsls	r2, r2, #12
   13ff2:	0b12      	lsrs	r2, r2, #12
   13ff4:	4645      	mov	r5, r8
   13ff6:	4699      	mov	r9, r3
   13ff8:	4c43      	ldr	r4, [pc, #268]	; (14108 <__aeabi_dmul+0x4fc>)
   13ffa:	e66e      	b.n	13cda <__aeabi_dmul+0xce>
   13ffc:	465b      	mov	r3, fp
   13ffe:	431a      	orrs	r2, r3
   14000:	0312      	lsls	r2, r2, #12
   14002:	0b12      	lsrs	r2, r2, #12
   14004:	4c40      	ldr	r4, [pc, #256]	; (14108 <__aeabi_dmul+0x4fc>)
   14006:	e668      	b.n	13cda <__aeabi_dmul+0xce>
   14008:	0003      	movs	r3, r0
   1400a:	4654      	mov	r4, sl
   1400c:	3b28      	subs	r3, #40	; 0x28
   1400e:	409c      	lsls	r4, r3
   14010:	2300      	movs	r3, #0
   14012:	e6b9      	b.n	13d88 <__aeabi_dmul+0x17c>
   14014:	f000 fd58 	bl	14ac8 <__clzsi2>
   14018:	3020      	adds	r0, #32
   1401a:	e6a6      	b.n	13d6a <__aeabi_dmul+0x15e>
   1401c:	0003      	movs	r3, r0
   1401e:	3b28      	subs	r3, #40	; 0x28
   14020:	409f      	lsls	r7, r3
   14022:	2300      	movs	r3, #0
   14024:	46bb      	mov	fp, r7
   14026:	4699      	mov	r9, r3
   14028:	e68a      	b.n	13d40 <__aeabi_dmul+0x134>
   1402a:	f000 fd4d 	bl	14ac8 <__clzsi2>
   1402e:	3020      	adds	r0, #32
   14030:	e674      	b.n	13d1c <__aeabi_dmul+0x110>
   14032:	46b4      	mov	ip, r6
   14034:	e7ad      	b.n	13f92 <__aeabi_dmul+0x386>
   14036:	2501      	movs	r5, #1
   14038:	1a2a      	subs	r2, r5, r0
   1403a:	2a38      	cmp	r2, #56	; 0x38
   1403c:	dd06      	ble.n	1404c <__aeabi_dmul+0x440>
   1403e:	9b01      	ldr	r3, [sp, #4]
   14040:	2400      	movs	r4, #0
   14042:	401d      	ands	r5, r3
   14044:	2300      	movs	r3, #0
   14046:	2200      	movs	r2, #0
   14048:	4699      	mov	r9, r3
   1404a:	e646      	b.n	13cda <__aeabi_dmul+0xce>
   1404c:	2a1f      	cmp	r2, #31
   1404e:	dc21      	bgt.n	14094 <__aeabi_dmul+0x488>
   14050:	2520      	movs	r5, #32
   14052:	0020      	movs	r0, r4
   14054:	1aad      	subs	r5, r5, r2
   14056:	001e      	movs	r6, r3
   14058:	40ab      	lsls	r3, r5
   1405a:	40a8      	lsls	r0, r5
   1405c:	40d6      	lsrs	r6, r2
   1405e:	1e5d      	subs	r5, r3, #1
   14060:	41ab      	sbcs	r3, r5
   14062:	4330      	orrs	r0, r6
   14064:	4318      	orrs	r0, r3
   14066:	40d4      	lsrs	r4, r2
   14068:	0743      	lsls	r3, r0, #29
   1406a:	d009      	beq.n	14080 <__aeabi_dmul+0x474>
   1406c:	230f      	movs	r3, #15
   1406e:	4003      	ands	r3, r0
   14070:	2b04      	cmp	r3, #4
   14072:	d005      	beq.n	14080 <__aeabi_dmul+0x474>
   14074:	0003      	movs	r3, r0
   14076:	1d18      	adds	r0, r3, #4
   14078:	4298      	cmp	r0, r3
   1407a:	419b      	sbcs	r3, r3
   1407c:	425b      	negs	r3, r3
   1407e:	18e4      	adds	r4, r4, r3
   14080:	0223      	lsls	r3, r4, #8
   14082:	d521      	bpl.n	140c8 <__aeabi_dmul+0x4bc>
   14084:	2501      	movs	r5, #1
   14086:	9b01      	ldr	r3, [sp, #4]
   14088:	2401      	movs	r4, #1
   1408a:	401d      	ands	r5, r3
   1408c:	2300      	movs	r3, #0
   1408e:	2200      	movs	r2, #0
   14090:	4699      	mov	r9, r3
   14092:	e622      	b.n	13cda <__aeabi_dmul+0xce>
   14094:	251f      	movs	r5, #31
   14096:	0021      	movs	r1, r4
   14098:	426d      	negs	r5, r5
   1409a:	1a28      	subs	r0, r5, r0
   1409c:	40c1      	lsrs	r1, r0
   1409e:	0008      	movs	r0, r1
   140a0:	2a20      	cmp	r2, #32
   140a2:	d01d      	beq.n	140e0 <__aeabi_dmul+0x4d4>
   140a4:	355f      	adds	r5, #95	; 0x5f
   140a6:	1aaa      	subs	r2, r5, r2
   140a8:	4094      	lsls	r4, r2
   140aa:	4323      	orrs	r3, r4
   140ac:	1e5c      	subs	r4, r3, #1
   140ae:	41a3      	sbcs	r3, r4
   140b0:	2507      	movs	r5, #7
   140b2:	4303      	orrs	r3, r0
   140b4:	401d      	ands	r5, r3
   140b6:	2200      	movs	r2, #0
   140b8:	2d00      	cmp	r5, #0
   140ba:	d009      	beq.n	140d0 <__aeabi_dmul+0x4c4>
   140bc:	220f      	movs	r2, #15
   140be:	2400      	movs	r4, #0
   140c0:	401a      	ands	r2, r3
   140c2:	0018      	movs	r0, r3
   140c4:	2a04      	cmp	r2, #4
   140c6:	d1d6      	bne.n	14076 <__aeabi_dmul+0x46a>
   140c8:	0003      	movs	r3, r0
   140ca:	0765      	lsls	r5, r4, #29
   140cc:	0264      	lsls	r4, r4, #9
   140ce:	0b22      	lsrs	r2, r4, #12
   140d0:	08db      	lsrs	r3, r3, #3
   140d2:	432b      	orrs	r3, r5
   140d4:	2501      	movs	r5, #1
   140d6:	4699      	mov	r9, r3
   140d8:	9b01      	ldr	r3, [sp, #4]
   140da:	2400      	movs	r4, #0
   140dc:	401d      	ands	r5, r3
   140de:	e5fc      	b.n	13cda <__aeabi_dmul+0xce>
   140e0:	2400      	movs	r4, #0
   140e2:	e7e2      	b.n	140aa <__aeabi_dmul+0x49e>
   140e4:	2280      	movs	r2, #128	; 0x80
   140e6:	2501      	movs	r5, #1
   140e8:	0312      	lsls	r2, r2, #12
   140ea:	4322      	orrs	r2, r4
   140ec:	9901      	ldr	r1, [sp, #4]
   140ee:	0312      	lsls	r2, r2, #12
   140f0:	0b12      	lsrs	r2, r2, #12
   140f2:	400d      	ands	r5, r1
   140f4:	4699      	mov	r9, r3
   140f6:	4c04      	ldr	r4, [pc, #16]	; (14108 <__aeabi_dmul+0x4fc>)
   140f8:	e5ef      	b.n	13cda <__aeabi_dmul+0xce>
   140fa:	46c0      	nop			; (mov r8, r8)
   140fc:	000003ff 	.word	0x000003ff
   14100:	feffffff 	.word	0xfeffffff
   14104:	000007fe 	.word	0x000007fe
   14108:	000007ff 	.word	0x000007ff

0001410c <__aeabi_dsub>:
   1410c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1410e:	4646      	mov	r6, r8
   14110:	46d6      	mov	lr, sl
   14112:	464f      	mov	r7, r9
   14114:	030c      	lsls	r4, r1, #12
   14116:	b5c0      	push	{r6, r7, lr}
   14118:	0fcd      	lsrs	r5, r1, #31
   1411a:	004e      	lsls	r6, r1, #1
   1411c:	0a61      	lsrs	r1, r4, #9
   1411e:	0f44      	lsrs	r4, r0, #29
   14120:	430c      	orrs	r4, r1
   14122:	00c1      	lsls	r1, r0, #3
   14124:	0058      	lsls	r0, r3, #1
   14126:	0d40      	lsrs	r0, r0, #21
   14128:	4684      	mov	ip, r0
   1412a:	468a      	mov	sl, r1
   1412c:	000f      	movs	r7, r1
   1412e:	0319      	lsls	r1, r3, #12
   14130:	0f50      	lsrs	r0, r2, #29
   14132:	0a49      	lsrs	r1, r1, #9
   14134:	4301      	orrs	r1, r0
   14136:	48c6      	ldr	r0, [pc, #792]	; (14450 <__aeabi_dsub+0x344>)
   14138:	0d76      	lsrs	r6, r6, #21
   1413a:	46a8      	mov	r8, r5
   1413c:	0fdb      	lsrs	r3, r3, #31
   1413e:	00d2      	lsls	r2, r2, #3
   14140:	4584      	cmp	ip, r0
   14142:	d100      	bne.n	14146 <__aeabi_dsub+0x3a>
   14144:	e0d8      	b.n	142f8 <__aeabi_dsub+0x1ec>
   14146:	2001      	movs	r0, #1
   14148:	4043      	eors	r3, r0
   1414a:	42ab      	cmp	r3, r5
   1414c:	d100      	bne.n	14150 <__aeabi_dsub+0x44>
   1414e:	e0a6      	b.n	1429e <__aeabi_dsub+0x192>
   14150:	4660      	mov	r0, ip
   14152:	1a35      	subs	r5, r6, r0
   14154:	2d00      	cmp	r5, #0
   14156:	dc00      	bgt.n	1415a <__aeabi_dsub+0x4e>
   14158:	e105      	b.n	14366 <__aeabi_dsub+0x25a>
   1415a:	2800      	cmp	r0, #0
   1415c:	d110      	bne.n	14180 <__aeabi_dsub+0x74>
   1415e:	000b      	movs	r3, r1
   14160:	4313      	orrs	r3, r2
   14162:	d100      	bne.n	14166 <__aeabi_dsub+0x5a>
   14164:	e0d7      	b.n	14316 <__aeabi_dsub+0x20a>
   14166:	1e6b      	subs	r3, r5, #1
   14168:	2b00      	cmp	r3, #0
   1416a:	d000      	beq.n	1416e <__aeabi_dsub+0x62>
   1416c:	e14b      	b.n	14406 <__aeabi_dsub+0x2fa>
   1416e:	4653      	mov	r3, sl
   14170:	1a9f      	subs	r7, r3, r2
   14172:	45ba      	cmp	sl, r7
   14174:	4180      	sbcs	r0, r0
   14176:	1a64      	subs	r4, r4, r1
   14178:	4240      	negs	r0, r0
   1417a:	1a24      	subs	r4, r4, r0
   1417c:	2601      	movs	r6, #1
   1417e:	e01e      	b.n	141be <__aeabi_dsub+0xb2>
   14180:	4bb3      	ldr	r3, [pc, #716]	; (14450 <__aeabi_dsub+0x344>)
   14182:	429e      	cmp	r6, r3
   14184:	d048      	beq.n	14218 <__aeabi_dsub+0x10c>
   14186:	2380      	movs	r3, #128	; 0x80
   14188:	041b      	lsls	r3, r3, #16
   1418a:	4319      	orrs	r1, r3
   1418c:	2d38      	cmp	r5, #56	; 0x38
   1418e:	dd00      	ble.n	14192 <__aeabi_dsub+0x86>
   14190:	e119      	b.n	143c6 <__aeabi_dsub+0x2ba>
   14192:	2d1f      	cmp	r5, #31
   14194:	dd00      	ble.n	14198 <__aeabi_dsub+0x8c>
   14196:	e14c      	b.n	14432 <__aeabi_dsub+0x326>
   14198:	2320      	movs	r3, #32
   1419a:	000f      	movs	r7, r1
   1419c:	1b5b      	subs	r3, r3, r5
   1419e:	0010      	movs	r0, r2
   141a0:	409a      	lsls	r2, r3
   141a2:	409f      	lsls	r7, r3
   141a4:	40e8      	lsrs	r0, r5
   141a6:	1e53      	subs	r3, r2, #1
   141a8:	419a      	sbcs	r2, r3
   141aa:	40e9      	lsrs	r1, r5
   141ac:	4307      	orrs	r7, r0
   141ae:	4317      	orrs	r7, r2
   141b0:	4653      	mov	r3, sl
   141b2:	1bdf      	subs	r7, r3, r7
   141b4:	1a61      	subs	r1, r4, r1
   141b6:	45ba      	cmp	sl, r7
   141b8:	41a4      	sbcs	r4, r4
   141ba:	4264      	negs	r4, r4
   141bc:	1b0c      	subs	r4, r1, r4
   141be:	0223      	lsls	r3, r4, #8
   141c0:	d400      	bmi.n	141c4 <__aeabi_dsub+0xb8>
   141c2:	e0c5      	b.n	14350 <__aeabi_dsub+0x244>
   141c4:	0264      	lsls	r4, r4, #9
   141c6:	0a65      	lsrs	r5, r4, #9
   141c8:	2d00      	cmp	r5, #0
   141ca:	d100      	bne.n	141ce <__aeabi_dsub+0xc2>
   141cc:	e0f6      	b.n	143bc <__aeabi_dsub+0x2b0>
   141ce:	0028      	movs	r0, r5
   141d0:	f000 fc7a 	bl	14ac8 <__clzsi2>
   141d4:	0003      	movs	r3, r0
   141d6:	3b08      	subs	r3, #8
   141d8:	2b1f      	cmp	r3, #31
   141da:	dd00      	ble.n	141de <__aeabi_dsub+0xd2>
   141dc:	e0e9      	b.n	143b2 <__aeabi_dsub+0x2a6>
   141de:	2220      	movs	r2, #32
   141e0:	003c      	movs	r4, r7
   141e2:	1ad2      	subs	r2, r2, r3
   141e4:	409d      	lsls	r5, r3
   141e6:	40d4      	lsrs	r4, r2
   141e8:	409f      	lsls	r7, r3
   141ea:	4325      	orrs	r5, r4
   141ec:	429e      	cmp	r6, r3
   141ee:	dd00      	ble.n	141f2 <__aeabi_dsub+0xe6>
   141f0:	e0db      	b.n	143aa <__aeabi_dsub+0x29e>
   141f2:	1b9e      	subs	r6, r3, r6
   141f4:	1c73      	adds	r3, r6, #1
   141f6:	2b1f      	cmp	r3, #31
   141f8:	dd00      	ble.n	141fc <__aeabi_dsub+0xf0>
   141fa:	e10a      	b.n	14412 <__aeabi_dsub+0x306>
   141fc:	2220      	movs	r2, #32
   141fe:	0038      	movs	r0, r7
   14200:	1ad2      	subs	r2, r2, r3
   14202:	0029      	movs	r1, r5
   14204:	4097      	lsls	r7, r2
   14206:	002c      	movs	r4, r5
   14208:	4091      	lsls	r1, r2
   1420a:	40d8      	lsrs	r0, r3
   1420c:	1e7a      	subs	r2, r7, #1
   1420e:	4197      	sbcs	r7, r2
   14210:	40dc      	lsrs	r4, r3
   14212:	2600      	movs	r6, #0
   14214:	4301      	orrs	r1, r0
   14216:	430f      	orrs	r7, r1
   14218:	077b      	lsls	r3, r7, #29
   1421a:	d009      	beq.n	14230 <__aeabi_dsub+0x124>
   1421c:	230f      	movs	r3, #15
   1421e:	403b      	ands	r3, r7
   14220:	2b04      	cmp	r3, #4
   14222:	d005      	beq.n	14230 <__aeabi_dsub+0x124>
   14224:	1d3b      	adds	r3, r7, #4
   14226:	42bb      	cmp	r3, r7
   14228:	41bf      	sbcs	r7, r7
   1422a:	427f      	negs	r7, r7
   1422c:	19e4      	adds	r4, r4, r7
   1422e:	001f      	movs	r7, r3
   14230:	0223      	lsls	r3, r4, #8
   14232:	d525      	bpl.n	14280 <__aeabi_dsub+0x174>
   14234:	4b86      	ldr	r3, [pc, #536]	; (14450 <__aeabi_dsub+0x344>)
   14236:	3601      	adds	r6, #1
   14238:	429e      	cmp	r6, r3
   1423a:	d100      	bne.n	1423e <__aeabi_dsub+0x132>
   1423c:	e0af      	b.n	1439e <__aeabi_dsub+0x292>
   1423e:	4b85      	ldr	r3, [pc, #532]	; (14454 <__aeabi_dsub+0x348>)
   14240:	2501      	movs	r5, #1
   14242:	401c      	ands	r4, r3
   14244:	4643      	mov	r3, r8
   14246:	0762      	lsls	r2, r4, #29
   14248:	08ff      	lsrs	r7, r7, #3
   1424a:	0264      	lsls	r4, r4, #9
   1424c:	0576      	lsls	r6, r6, #21
   1424e:	4317      	orrs	r7, r2
   14250:	0b24      	lsrs	r4, r4, #12
   14252:	0d76      	lsrs	r6, r6, #21
   14254:	401d      	ands	r5, r3
   14256:	2100      	movs	r1, #0
   14258:	0324      	lsls	r4, r4, #12
   1425a:	0b23      	lsrs	r3, r4, #12
   1425c:	0d0c      	lsrs	r4, r1, #20
   1425e:	4a7e      	ldr	r2, [pc, #504]	; (14458 <__aeabi_dsub+0x34c>)
   14260:	0524      	lsls	r4, r4, #20
   14262:	431c      	orrs	r4, r3
   14264:	4014      	ands	r4, r2
   14266:	0533      	lsls	r3, r6, #20
   14268:	4323      	orrs	r3, r4
   1426a:	005b      	lsls	r3, r3, #1
   1426c:	07ed      	lsls	r5, r5, #31
   1426e:	085b      	lsrs	r3, r3, #1
   14270:	432b      	orrs	r3, r5
   14272:	0038      	movs	r0, r7
   14274:	0019      	movs	r1, r3
   14276:	bc1c      	pop	{r2, r3, r4}
   14278:	4690      	mov	r8, r2
   1427a:	4699      	mov	r9, r3
   1427c:	46a2      	mov	sl, r4
   1427e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14280:	2501      	movs	r5, #1
   14282:	4643      	mov	r3, r8
   14284:	0762      	lsls	r2, r4, #29
   14286:	08ff      	lsrs	r7, r7, #3
   14288:	4317      	orrs	r7, r2
   1428a:	08e4      	lsrs	r4, r4, #3
   1428c:	401d      	ands	r5, r3
   1428e:	4b70      	ldr	r3, [pc, #448]	; (14450 <__aeabi_dsub+0x344>)
   14290:	429e      	cmp	r6, r3
   14292:	d036      	beq.n	14302 <__aeabi_dsub+0x1f6>
   14294:	0324      	lsls	r4, r4, #12
   14296:	0576      	lsls	r6, r6, #21
   14298:	0b24      	lsrs	r4, r4, #12
   1429a:	0d76      	lsrs	r6, r6, #21
   1429c:	e7db      	b.n	14256 <__aeabi_dsub+0x14a>
   1429e:	4663      	mov	r3, ip
   142a0:	1af3      	subs	r3, r6, r3
   142a2:	2b00      	cmp	r3, #0
   142a4:	dc00      	bgt.n	142a8 <__aeabi_dsub+0x19c>
   142a6:	e094      	b.n	143d2 <__aeabi_dsub+0x2c6>
   142a8:	4660      	mov	r0, ip
   142aa:	2800      	cmp	r0, #0
   142ac:	d035      	beq.n	1431a <__aeabi_dsub+0x20e>
   142ae:	4868      	ldr	r0, [pc, #416]	; (14450 <__aeabi_dsub+0x344>)
   142b0:	4286      	cmp	r6, r0
   142b2:	d0b1      	beq.n	14218 <__aeabi_dsub+0x10c>
   142b4:	2780      	movs	r7, #128	; 0x80
   142b6:	043f      	lsls	r7, r7, #16
   142b8:	4339      	orrs	r1, r7
   142ba:	2b38      	cmp	r3, #56	; 0x38
   142bc:	dc00      	bgt.n	142c0 <__aeabi_dsub+0x1b4>
   142be:	e0fd      	b.n	144bc <__aeabi_dsub+0x3b0>
   142c0:	430a      	orrs	r2, r1
   142c2:	0017      	movs	r7, r2
   142c4:	2100      	movs	r1, #0
   142c6:	1e7a      	subs	r2, r7, #1
   142c8:	4197      	sbcs	r7, r2
   142ca:	4457      	add	r7, sl
   142cc:	4557      	cmp	r7, sl
   142ce:	4180      	sbcs	r0, r0
   142d0:	1909      	adds	r1, r1, r4
   142d2:	4244      	negs	r4, r0
   142d4:	190c      	adds	r4, r1, r4
   142d6:	0223      	lsls	r3, r4, #8
   142d8:	d53a      	bpl.n	14350 <__aeabi_dsub+0x244>
   142da:	4b5d      	ldr	r3, [pc, #372]	; (14450 <__aeabi_dsub+0x344>)
   142dc:	3601      	adds	r6, #1
   142de:	429e      	cmp	r6, r3
   142e0:	d100      	bne.n	142e4 <__aeabi_dsub+0x1d8>
   142e2:	e14b      	b.n	1457c <__aeabi_dsub+0x470>
   142e4:	2201      	movs	r2, #1
   142e6:	4b5b      	ldr	r3, [pc, #364]	; (14454 <__aeabi_dsub+0x348>)
   142e8:	401c      	ands	r4, r3
   142ea:	087b      	lsrs	r3, r7, #1
   142ec:	4017      	ands	r7, r2
   142ee:	431f      	orrs	r7, r3
   142f0:	07e2      	lsls	r2, r4, #31
   142f2:	4317      	orrs	r7, r2
   142f4:	0864      	lsrs	r4, r4, #1
   142f6:	e78f      	b.n	14218 <__aeabi_dsub+0x10c>
   142f8:	0008      	movs	r0, r1
   142fa:	4310      	orrs	r0, r2
   142fc:	d000      	beq.n	14300 <__aeabi_dsub+0x1f4>
   142fe:	e724      	b.n	1414a <__aeabi_dsub+0x3e>
   14300:	e721      	b.n	14146 <__aeabi_dsub+0x3a>
   14302:	0023      	movs	r3, r4
   14304:	433b      	orrs	r3, r7
   14306:	d100      	bne.n	1430a <__aeabi_dsub+0x1fe>
   14308:	e1b9      	b.n	1467e <__aeabi_dsub+0x572>
   1430a:	2280      	movs	r2, #128	; 0x80
   1430c:	0312      	lsls	r2, r2, #12
   1430e:	4314      	orrs	r4, r2
   14310:	0324      	lsls	r4, r4, #12
   14312:	0b24      	lsrs	r4, r4, #12
   14314:	e79f      	b.n	14256 <__aeabi_dsub+0x14a>
   14316:	002e      	movs	r6, r5
   14318:	e77e      	b.n	14218 <__aeabi_dsub+0x10c>
   1431a:	0008      	movs	r0, r1
   1431c:	4310      	orrs	r0, r2
   1431e:	d100      	bne.n	14322 <__aeabi_dsub+0x216>
   14320:	e0ca      	b.n	144b8 <__aeabi_dsub+0x3ac>
   14322:	1e58      	subs	r0, r3, #1
   14324:	4684      	mov	ip, r0
   14326:	2800      	cmp	r0, #0
   14328:	d000      	beq.n	1432c <__aeabi_dsub+0x220>
   1432a:	e0e7      	b.n	144fc <__aeabi_dsub+0x3f0>
   1432c:	4452      	add	r2, sl
   1432e:	4552      	cmp	r2, sl
   14330:	4180      	sbcs	r0, r0
   14332:	1864      	adds	r4, r4, r1
   14334:	4240      	negs	r0, r0
   14336:	1824      	adds	r4, r4, r0
   14338:	0017      	movs	r7, r2
   1433a:	2601      	movs	r6, #1
   1433c:	0223      	lsls	r3, r4, #8
   1433e:	d507      	bpl.n	14350 <__aeabi_dsub+0x244>
   14340:	2602      	movs	r6, #2
   14342:	e7cf      	b.n	142e4 <__aeabi_dsub+0x1d8>
   14344:	4664      	mov	r4, ip
   14346:	432c      	orrs	r4, r5
   14348:	d100      	bne.n	1434c <__aeabi_dsub+0x240>
   1434a:	e1b3      	b.n	146b4 <__aeabi_dsub+0x5a8>
   1434c:	002c      	movs	r4, r5
   1434e:	4667      	mov	r7, ip
   14350:	077b      	lsls	r3, r7, #29
   14352:	d000      	beq.n	14356 <__aeabi_dsub+0x24a>
   14354:	e762      	b.n	1421c <__aeabi_dsub+0x110>
   14356:	0763      	lsls	r3, r4, #29
   14358:	08ff      	lsrs	r7, r7, #3
   1435a:	431f      	orrs	r7, r3
   1435c:	2501      	movs	r5, #1
   1435e:	4643      	mov	r3, r8
   14360:	08e4      	lsrs	r4, r4, #3
   14362:	401d      	ands	r5, r3
   14364:	e793      	b.n	1428e <__aeabi_dsub+0x182>
   14366:	2d00      	cmp	r5, #0
   14368:	d178      	bne.n	1445c <__aeabi_dsub+0x350>
   1436a:	1c75      	adds	r5, r6, #1
   1436c:	056d      	lsls	r5, r5, #21
   1436e:	0d6d      	lsrs	r5, r5, #21
   14370:	2d01      	cmp	r5, #1
   14372:	dc00      	bgt.n	14376 <__aeabi_dsub+0x26a>
   14374:	e0f2      	b.n	1455c <__aeabi_dsub+0x450>
   14376:	4650      	mov	r0, sl
   14378:	1a80      	subs	r0, r0, r2
   1437a:	4582      	cmp	sl, r0
   1437c:	41bf      	sbcs	r7, r7
   1437e:	1a65      	subs	r5, r4, r1
   14380:	427f      	negs	r7, r7
   14382:	1bed      	subs	r5, r5, r7
   14384:	4684      	mov	ip, r0
   14386:	0228      	lsls	r0, r5, #8
   14388:	d400      	bmi.n	1438c <__aeabi_dsub+0x280>
   1438a:	e08c      	b.n	144a6 <__aeabi_dsub+0x39a>
   1438c:	4650      	mov	r0, sl
   1438e:	1a17      	subs	r7, r2, r0
   14390:	42ba      	cmp	r2, r7
   14392:	4192      	sbcs	r2, r2
   14394:	1b0c      	subs	r4, r1, r4
   14396:	4255      	negs	r5, r2
   14398:	1b65      	subs	r5, r4, r5
   1439a:	4698      	mov	r8, r3
   1439c:	e714      	b.n	141c8 <__aeabi_dsub+0xbc>
   1439e:	2501      	movs	r5, #1
   143a0:	4643      	mov	r3, r8
   143a2:	2400      	movs	r4, #0
   143a4:	401d      	ands	r5, r3
   143a6:	2700      	movs	r7, #0
   143a8:	e755      	b.n	14256 <__aeabi_dsub+0x14a>
   143aa:	4c2a      	ldr	r4, [pc, #168]	; (14454 <__aeabi_dsub+0x348>)
   143ac:	1af6      	subs	r6, r6, r3
   143ae:	402c      	ands	r4, r5
   143b0:	e732      	b.n	14218 <__aeabi_dsub+0x10c>
   143b2:	003d      	movs	r5, r7
   143b4:	3828      	subs	r0, #40	; 0x28
   143b6:	4085      	lsls	r5, r0
   143b8:	2700      	movs	r7, #0
   143ba:	e717      	b.n	141ec <__aeabi_dsub+0xe0>
   143bc:	0038      	movs	r0, r7
   143be:	f000 fb83 	bl	14ac8 <__clzsi2>
   143c2:	3020      	adds	r0, #32
   143c4:	e706      	b.n	141d4 <__aeabi_dsub+0xc8>
   143c6:	430a      	orrs	r2, r1
   143c8:	0017      	movs	r7, r2
   143ca:	2100      	movs	r1, #0
   143cc:	1e7a      	subs	r2, r7, #1
   143ce:	4197      	sbcs	r7, r2
   143d0:	e6ee      	b.n	141b0 <__aeabi_dsub+0xa4>
   143d2:	2b00      	cmp	r3, #0
   143d4:	d000      	beq.n	143d8 <__aeabi_dsub+0x2cc>
   143d6:	e0e5      	b.n	145a4 <__aeabi_dsub+0x498>
   143d8:	1c73      	adds	r3, r6, #1
   143da:	469c      	mov	ip, r3
   143dc:	055b      	lsls	r3, r3, #21
   143de:	0d5b      	lsrs	r3, r3, #21
   143e0:	2b01      	cmp	r3, #1
   143e2:	dc00      	bgt.n	143e6 <__aeabi_dsub+0x2da>
   143e4:	e09f      	b.n	14526 <__aeabi_dsub+0x41a>
   143e6:	4b1a      	ldr	r3, [pc, #104]	; (14450 <__aeabi_dsub+0x344>)
   143e8:	459c      	cmp	ip, r3
   143ea:	d100      	bne.n	143ee <__aeabi_dsub+0x2e2>
   143ec:	e0c5      	b.n	1457a <__aeabi_dsub+0x46e>
   143ee:	4452      	add	r2, sl
   143f0:	4552      	cmp	r2, sl
   143f2:	4180      	sbcs	r0, r0
   143f4:	1864      	adds	r4, r4, r1
   143f6:	4240      	negs	r0, r0
   143f8:	1824      	adds	r4, r4, r0
   143fa:	07e7      	lsls	r7, r4, #31
   143fc:	0852      	lsrs	r2, r2, #1
   143fe:	4317      	orrs	r7, r2
   14400:	0864      	lsrs	r4, r4, #1
   14402:	4666      	mov	r6, ip
   14404:	e708      	b.n	14218 <__aeabi_dsub+0x10c>
   14406:	4812      	ldr	r0, [pc, #72]	; (14450 <__aeabi_dsub+0x344>)
   14408:	4285      	cmp	r5, r0
   1440a:	d100      	bne.n	1440e <__aeabi_dsub+0x302>
   1440c:	e085      	b.n	1451a <__aeabi_dsub+0x40e>
   1440e:	001d      	movs	r5, r3
   14410:	e6bc      	b.n	1418c <__aeabi_dsub+0x80>
   14412:	0029      	movs	r1, r5
   14414:	3e1f      	subs	r6, #31
   14416:	40f1      	lsrs	r1, r6
   14418:	2b20      	cmp	r3, #32
   1441a:	d100      	bne.n	1441e <__aeabi_dsub+0x312>
   1441c:	e07f      	b.n	1451e <__aeabi_dsub+0x412>
   1441e:	2240      	movs	r2, #64	; 0x40
   14420:	1ad3      	subs	r3, r2, r3
   14422:	409d      	lsls	r5, r3
   14424:	432f      	orrs	r7, r5
   14426:	1e7d      	subs	r5, r7, #1
   14428:	41af      	sbcs	r7, r5
   1442a:	2400      	movs	r4, #0
   1442c:	430f      	orrs	r7, r1
   1442e:	2600      	movs	r6, #0
   14430:	e78e      	b.n	14350 <__aeabi_dsub+0x244>
   14432:	002b      	movs	r3, r5
   14434:	000f      	movs	r7, r1
   14436:	3b20      	subs	r3, #32
   14438:	40df      	lsrs	r7, r3
   1443a:	2d20      	cmp	r5, #32
   1443c:	d071      	beq.n	14522 <__aeabi_dsub+0x416>
   1443e:	2340      	movs	r3, #64	; 0x40
   14440:	1b5d      	subs	r5, r3, r5
   14442:	40a9      	lsls	r1, r5
   14444:	430a      	orrs	r2, r1
   14446:	1e51      	subs	r1, r2, #1
   14448:	418a      	sbcs	r2, r1
   1444a:	2100      	movs	r1, #0
   1444c:	4317      	orrs	r7, r2
   1444e:	e6af      	b.n	141b0 <__aeabi_dsub+0xa4>
   14450:	000007ff 	.word	0x000007ff
   14454:	ff7fffff 	.word	0xff7fffff
   14458:	800fffff 	.word	0x800fffff
   1445c:	2e00      	cmp	r6, #0
   1445e:	d03e      	beq.n	144de <__aeabi_dsub+0x3d2>
   14460:	4eb3      	ldr	r6, [pc, #716]	; (14730 <__aeabi_dsub+0x624>)
   14462:	45b4      	cmp	ip, r6
   14464:	d045      	beq.n	144f2 <__aeabi_dsub+0x3e6>
   14466:	2680      	movs	r6, #128	; 0x80
   14468:	0436      	lsls	r6, r6, #16
   1446a:	426d      	negs	r5, r5
   1446c:	4334      	orrs	r4, r6
   1446e:	2d38      	cmp	r5, #56	; 0x38
   14470:	dd00      	ble.n	14474 <__aeabi_dsub+0x368>
   14472:	e0a8      	b.n	145c6 <__aeabi_dsub+0x4ba>
   14474:	2d1f      	cmp	r5, #31
   14476:	dd00      	ble.n	1447a <__aeabi_dsub+0x36e>
   14478:	e11f      	b.n	146ba <__aeabi_dsub+0x5ae>
   1447a:	2620      	movs	r6, #32
   1447c:	0027      	movs	r7, r4
   1447e:	4650      	mov	r0, sl
   14480:	1b76      	subs	r6, r6, r5
   14482:	40b7      	lsls	r7, r6
   14484:	40e8      	lsrs	r0, r5
   14486:	4307      	orrs	r7, r0
   14488:	4650      	mov	r0, sl
   1448a:	40b0      	lsls	r0, r6
   1448c:	1e46      	subs	r6, r0, #1
   1448e:	41b0      	sbcs	r0, r6
   14490:	40ec      	lsrs	r4, r5
   14492:	4338      	orrs	r0, r7
   14494:	1a17      	subs	r7, r2, r0
   14496:	42ba      	cmp	r2, r7
   14498:	4192      	sbcs	r2, r2
   1449a:	1b0c      	subs	r4, r1, r4
   1449c:	4252      	negs	r2, r2
   1449e:	1aa4      	subs	r4, r4, r2
   144a0:	4666      	mov	r6, ip
   144a2:	4698      	mov	r8, r3
   144a4:	e68b      	b.n	141be <__aeabi_dsub+0xb2>
   144a6:	4664      	mov	r4, ip
   144a8:	4667      	mov	r7, ip
   144aa:	432c      	orrs	r4, r5
   144ac:	d000      	beq.n	144b0 <__aeabi_dsub+0x3a4>
   144ae:	e68b      	b.n	141c8 <__aeabi_dsub+0xbc>
   144b0:	2500      	movs	r5, #0
   144b2:	2600      	movs	r6, #0
   144b4:	2700      	movs	r7, #0
   144b6:	e6ea      	b.n	1428e <__aeabi_dsub+0x182>
   144b8:	001e      	movs	r6, r3
   144ba:	e6ad      	b.n	14218 <__aeabi_dsub+0x10c>
   144bc:	2b1f      	cmp	r3, #31
   144be:	dc60      	bgt.n	14582 <__aeabi_dsub+0x476>
   144c0:	2720      	movs	r7, #32
   144c2:	1af8      	subs	r0, r7, r3
   144c4:	000f      	movs	r7, r1
   144c6:	4684      	mov	ip, r0
   144c8:	4087      	lsls	r7, r0
   144ca:	0010      	movs	r0, r2
   144cc:	40d8      	lsrs	r0, r3
   144ce:	4307      	orrs	r7, r0
   144d0:	4660      	mov	r0, ip
   144d2:	4082      	lsls	r2, r0
   144d4:	1e50      	subs	r0, r2, #1
   144d6:	4182      	sbcs	r2, r0
   144d8:	40d9      	lsrs	r1, r3
   144da:	4317      	orrs	r7, r2
   144dc:	e6f5      	b.n	142ca <__aeabi_dsub+0x1be>
   144de:	0026      	movs	r6, r4
   144e0:	4650      	mov	r0, sl
   144e2:	4306      	orrs	r6, r0
   144e4:	d005      	beq.n	144f2 <__aeabi_dsub+0x3e6>
   144e6:	43ed      	mvns	r5, r5
   144e8:	2d00      	cmp	r5, #0
   144ea:	d0d3      	beq.n	14494 <__aeabi_dsub+0x388>
   144ec:	4e90      	ldr	r6, [pc, #576]	; (14730 <__aeabi_dsub+0x624>)
   144ee:	45b4      	cmp	ip, r6
   144f0:	d1bd      	bne.n	1446e <__aeabi_dsub+0x362>
   144f2:	000c      	movs	r4, r1
   144f4:	0017      	movs	r7, r2
   144f6:	4666      	mov	r6, ip
   144f8:	4698      	mov	r8, r3
   144fa:	e68d      	b.n	14218 <__aeabi_dsub+0x10c>
   144fc:	488c      	ldr	r0, [pc, #560]	; (14730 <__aeabi_dsub+0x624>)
   144fe:	4283      	cmp	r3, r0
   14500:	d00b      	beq.n	1451a <__aeabi_dsub+0x40e>
   14502:	4663      	mov	r3, ip
   14504:	e6d9      	b.n	142ba <__aeabi_dsub+0x1ae>
   14506:	2d00      	cmp	r5, #0
   14508:	d000      	beq.n	1450c <__aeabi_dsub+0x400>
   1450a:	e096      	b.n	1463a <__aeabi_dsub+0x52e>
   1450c:	0008      	movs	r0, r1
   1450e:	4310      	orrs	r0, r2
   14510:	d100      	bne.n	14514 <__aeabi_dsub+0x408>
   14512:	e0e2      	b.n	146da <__aeabi_dsub+0x5ce>
   14514:	000c      	movs	r4, r1
   14516:	0017      	movs	r7, r2
   14518:	4698      	mov	r8, r3
   1451a:	4e85      	ldr	r6, [pc, #532]	; (14730 <__aeabi_dsub+0x624>)
   1451c:	e67c      	b.n	14218 <__aeabi_dsub+0x10c>
   1451e:	2500      	movs	r5, #0
   14520:	e780      	b.n	14424 <__aeabi_dsub+0x318>
   14522:	2100      	movs	r1, #0
   14524:	e78e      	b.n	14444 <__aeabi_dsub+0x338>
   14526:	0023      	movs	r3, r4
   14528:	4650      	mov	r0, sl
   1452a:	4303      	orrs	r3, r0
   1452c:	2e00      	cmp	r6, #0
   1452e:	d000      	beq.n	14532 <__aeabi_dsub+0x426>
   14530:	e0a8      	b.n	14684 <__aeabi_dsub+0x578>
   14532:	2b00      	cmp	r3, #0
   14534:	d100      	bne.n	14538 <__aeabi_dsub+0x42c>
   14536:	e0de      	b.n	146f6 <__aeabi_dsub+0x5ea>
   14538:	000b      	movs	r3, r1
   1453a:	4313      	orrs	r3, r2
   1453c:	d100      	bne.n	14540 <__aeabi_dsub+0x434>
   1453e:	e66b      	b.n	14218 <__aeabi_dsub+0x10c>
   14540:	4452      	add	r2, sl
   14542:	4552      	cmp	r2, sl
   14544:	4180      	sbcs	r0, r0
   14546:	1864      	adds	r4, r4, r1
   14548:	4240      	negs	r0, r0
   1454a:	1824      	adds	r4, r4, r0
   1454c:	0017      	movs	r7, r2
   1454e:	0223      	lsls	r3, r4, #8
   14550:	d400      	bmi.n	14554 <__aeabi_dsub+0x448>
   14552:	e6fd      	b.n	14350 <__aeabi_dsub+0x244>
   14554:	4b77      	ldr	r3, [pc, #476]	; (14734 <__aeabi_dsub+0x628>)
   14556:	4666      	mov	r6, ip
   14558:	401c      	ands	r4, r3
   1455a:	e65d      	b.n	14218 <__aeabi_dsub+0x10c>
   1455c:	0025      	movs	r5, r4
   1455e:	4650      	mov	r0, sl
   14560:	4305      	orrs	r5, r0
   14562:	2e00      	cmp	r6, #0
   14564:	d1cf      	bne.n	14506 <__aeabi_dsub+0x3fa>
   14566:	2d00      	cmp	r5, #0
   14568:	d14f      	bne.n	1460a <__aeabi_dsub+0x4fe>
   1456a:	000c      	movs	r4, r1
   1456c:	4314      	orrs	r4, r2
   1456e:	d100      	bne.n	14572 <__aeabi_dsub+0x466>
   14570:	e0a0      	b.n	146b4 <__aeabi_dsub+0x5a8>
   14572:	000c      	movs	r4, r1
   14574:	0017      	movs	r7, r2
   14576:	4698      	mov	r8, r3
   14578:	e64e      	b.n	14218 <__aeabi_dsub+0x10c>
   1457a:	4666      	mov	r6, ip
   1457c:	2400      	movs	r4, #0
   1457e:	2700      	movs	r7, #0
   14580:	e685      	b.n	1428e <__aeabi_dsub+0x182>
   14582:	001f      	movs	r7, r3
   14584:	0008      	movs	r0, r1
   14586:	3f20      	subs	r7, #32
   14588:	40f8      	lsrs	r0, r7
   1458a:	0007      	movs	r7, r0
   1458c:	2b20      	cmp	r3, #32
   1458e:	d100      	bne.n	14592 <__aeabi_dsub+0x486>
   14590:	e08e      	b.n	146b0 <__aeabi_dsub+0x5a4>
   14592:	2040      	movs	r0, #64	; 0x40
   14594:	1ac3      	subs	r3, r0, r3
   14596:	4099      	lsls	r1, r3
   14598:	430a      	orrs	r2, r1
   1459a:	1e51      	subs	r1, r2, #1
   1459c:	418a      	sbcs	r2, r1
   1459e:	2100      	movs	r1, #0
   145a0:	4317      	orrs	r7, r2
   145a2:	e692      	b.n	142ca <__aeabi_dsub+0x1be>
   145a4:	2e00      	cmp	r6, #0
   145a6:	d114      	bne.n	145d2 <__aeabi_dsub+0x4c6>
   145a8:	0026      	movs	r6, r4
   145aa:	4650      	mov	r0, sl
   145ac:	4306      	orrs	r6, r0
   145ae:	d062      	beq.n	14676 <__aeabi_dsub+0x56a>
   145b0:	43db      	mvns	r3, r3
   145b2:	2b00      	cmp	r3, #0
   145b4:	d15c      	bne.n	14670 <__aeabi_dsub+0x564>
   145b6:	1887      	adds	r7, r0, r2
   145b8:	4297      	cmp	r7, r2
   145ba:	4192      	sbcs	r2, r2
   145bc:	1864      	adds	r4, r4, r1
   145be:	4252      	negs	r2, r2
   145c0:	18a4      	adds	r4, r4, r2
   145c2:	4666      	mov	r6, ip
   145c4:	e687      	b.n	142d6 <__aeabi_dsub+0x1ca>
   145c6:	4650      	mov	r0, sl
   145c8:	4320      	orrs	r0, r4
   145ca:	1e44      	subs	r4, r0, #1
   145cc:	41a0      	sbcs	r0, r4
   145ce:	2400      	movs	r4, #0
   145d0:	e760      	b.n	14494 <__aeabi_dsub+0x388>
   145d2:	4e57      	ldr	r6, [pc, #348]	; (14730 <__aeabi_dsub+0x624>)
   145d4:	45b4      	cmp	ip, r6
   145d6:	d04e      	beq.n	14676 <__aeabi_dsub+0x56a>
   145d8:	2680      	movs	r6, #128	; 0x80
   145da:	0436      	lsls	r6, r6, #16
   145dc:	425b      	negs	r3, r3
   145de:	4334      	orrs	r4, r6
   145e0:	2b38      	cmp	r3, #56	; 0x38
   145e2:	dd00      	ble.n	145e6 <__aeabi_dsub+0x4da>
   145e4:	e07f      	b.n	146e6 <__aeabi_dsub+0x5da>
   145e6:	2b1f      	cmp	r3, #31
   145e8:	dd00      	ble.n	145ec <__aeabi_dsub+0x4e0>
   145ea:	e08b      	b.n	14704 <__aeabi_dsub+0x5f8>
   145ec:	2620      	movs	r6, #32
   145ee:	0027      	movs	r7, r4
   145f0:	4650      	mov	r0, sl
   145f2:	1af6      	subs	r6, r6, r3
   145f4:	40b7      	lsls	r7, r6
   145f6:	40d8      	lsrs	r0, r3
   145f8:	4307      	orrs	r7, r0
   145fa:	4650      	mov	r0, sl
   145fc:	40b0      	lsls	r0, r6
   145fe:	1e46      	subs	r6, r0, #1
   14600:	41b0      	sbcs	r0, r6
   14602:	4307      	orrs	r7, r0
   14604:	40dc      	lsrs	r4, r3
   14606:	18bf      	adds	r7, r7, r2
   14608:	e7d6      	b.n	145b8 <__aeabi_dsub+0x4ac>
   1460a:	000d      	movs	r5, r1
   1460c:	4315      	orrs	r5, r2
   1460e:	d100      	bne.n	14612 <__aeabi_dsub+0x506>
   14610:	e602      	b.n	14218 <__aeabi_dsub+0x10c>
   14612:	4650      	mov	r0, sl
   14614:	1a80      	subs	r0, r0, r2
   14616:	4582      	cmp	sl, r0
   14618:	41bf      	sbcs	r7, r7
   1461a:	1a65      	subs	r5, r4, r1
   1461c:	427f      	negs	r7, r7
   1461e:	1bed      	subs	r5, r5, r7
   14620:	4684      	mov	ip, r0
   14622:	0228      	lsls	r0, r5, #8
   14624:	d400      	bmi.n	14628 <__aeabi_dsub+0x51c>
   14626:	e68d      	b.n	14344 <__aeabi_dsub+0x238>
   14628:	4650      	mov	r0, sl
   1462a:	1a17      	subs	r7, r2, r0
   1462c:	42ba      	cmp	r2, r7
   1462e:	4192      	sbcs	r2, r2
   14630:	1b0c      	subs	r4, r1, r4
   14632:	4252      	negs	r2, r2
   14634:	1aa4      	subs	r4, r4, r2
   14636:	4698      	mov	r8, r3
   14638:	e5ee      	b.n	14218 <__aeabi_dsub+0x10c>
   1463a:	000d      	movs	r5, r1
   1463c:	4315      	orrs	r5, r2
   1463e:	d100      	bne.n	14642 <__aeabi_dsub+0x536>
   14640:	e76b      	b.n	1451a <__aeabi_dsub+0x40e>
   14642:	4650      	mov	r0, sl
   14644:	0767      	lsls	r7, r4, #29
   14646:	08c0      	lsrs	r0, r0, #3
   14648:	4307      	orrs	r7, r0
   1464a:	2080      	movs	r0, #128	; 0x80
   1464c:	08e4      	lsrs	r4, r4, #3
   1464e:	0300      	lsls	r0, r0, #12
   14650:	4204      	tst	r4, r0
   14652:	d007      	beq.n	14664 <__aeabi_dsub+0x558>
   14654:	08cd      	lsrs	r5, r1, #3
   14656:	4205      	tst	r5, r0
   14658:	d104      	bne.n	14664 <__aeabi_dsub+0x558>
   1465a:	002c      	movs	r4, r5
   1465c:	4698      	mov	r8, r3
   1465e:	08d7      	lsrs	r7, r2, #3
   14660:	0749      	lsls	r1, r1, #29
   14662:	430f      	orrs	r7, r1
   14664:	0f7b      	lsrs	r3, r7, #29
   14666:	00e4      	lsls	r4, r4, #3
   14668:	431c      	orrs	r4, r3
   1466a:	00ff      	lsls	r7, r7, #3
   1466c:	4e30      	ldr	r6, [pc, #192]	; (14730 <__aeabi_dsub+0x624>)
   1466e:	e5d3      	b.n	14218 <__aeabi_dsub+0x10c>
   14670:	4e2f      	ldr	r6, [pc, #188]	; (14730 <__aeabi_dsub+0x624>)
   14672:	45b4      	cmp	ip, r6
   14674:	d1b4      	bne.n	145e0 <__aeabi_dsub+0x4d4>
   14676:	000c      	movs	r4, r1
   14678:	0017      	movs	r7, r2
   1467a:	4666      	mov	r6, ip
   1467c:	e5cc      	b.n	14218 <__aeabi_dsub+0x10c>
   1467e:	2700      	movs	r7, #0
   14680:	2400      	movs	r4, #0
   14682:	e5e8      	b.n	14256 <__aeabi_dsub+0x14a>
   14684:	2b00      	cmp	r3, #0
   14686:	d039      	beq.n	146fc <__aeabi_dsub+0x5f0>
   14688:	000b      	movs	r3, r1
   1468a:	4313      	orrs	r3, r2
   1468c:	d100      	bne.n	14690 <__aeabi_dsub+0x584>
   1468e:	e744      	b.n	1451a <__aeabi_dsub+0x40e>
   14690:	08c0      	lsrs	r0, r0, #3
   14692:	0767      	lsls	r7, r4, #29
   14694:	4307      	orrs	r7, r0
   14696:	2080      	movs	r0, #128	; 0x80
   14698:	08e4      	lsrs	r4, r4, #3
   1469a:	0300      	lsls	r0, r0, #12
   1469c:	4204      	tst	r4, r0
   1469e:	d0e1      	beq.n	14664 <__aeabi_dsub+0x558>
   146a0:	08cb      	lsrs	r3, r1, #3
   146a2:	4203      	tst	r3, r0
   146a4:	d1de      	bne.n	14664 <__aeabi_dsub+0x558>
   146a6:	08d7      	lsrs	r7, r2, #3
   146a8:	0749      	lsls	r1, r1, #29
   146aa:	430f      	orrs	r7, r1
   146ac:	001c      	movs	r4, r3
   146ae:	e7d9      	b.n	14664 <__aeabi_dsub+0x558>
   146b0:	2100      	movs	r1, #0
   146b2:	e771      	b.n	14598 <__aeabi_dsub+0x48c>
   146b4:	2500      	movs	r5, #0
   146b6:	2700      	movs	r7, #0
   146b8:	e5e9      	b.n	1428e <__aeabi_dsub+0x182>
   146ba:	002e      	movs	r6, r5
   146bc:	0027      	movs	r7, r4
   146be:	3e20      	subs	r6, #32
   146c0:	40f7      	lsrs	r7, r6
   146c2:	2d20      	cmp	r5, #32
   146c4:	d02f      	beq.n	14726 <__aeabi_dsub+0x61a>
   146c6:	2640      	movs	r6, #64	; 0x40
   146c8:	1b75      	subs	r5, r6, r5
   146ca:	40ac      	lsls	r4, r5
   146cc:	4650      	mov	r0, sl
   146ce:	4320      	orrs	r0, r4
   146d0:	1e44      	subs	r4, r0, #1
   146d2:	41a0      	sbcs	r0, r4
   146d4:	2400      	movs	r4, #0
   146d6:	4338      	orrs	r0, r7
   146d8:	e6dc      	b.n	14494 <__aeabi_dsub+0x388>
   146da:	2480      	movs	r4, #128	; 0x80
   146dc:	2500      	movs	r5, #0
   146de:	0324      	lsls	r4, r4, #12
   146e0:	4e13      	ldr	r6, [pc, #76]	; (14730 <__aeabi_dsub+0x624>)
   146e2:	2700      	movs	r7, #0
   146e4:	e5d3      	b.n	1428e <__aeabi_dsub+0x182>
   146e6:	4650      	mov	r0, sl
   146e8:	4320      	orrs	r0, r4
   146ea:	0007      	movs	r7, r0
   146ec:	1e78      	subs	r0, r7, #1
   146ee:	4187      	sbcs	r7, r0
   146f0:	2400      	movs	r4, #0
   146f2:	18bf      	adds	r7, r7, r2
   146f4:	e760      	b.n	145b8 <__aeabi_dsub+0x4ac>
   146f6:	000c      	movs	r4, r1
   146f8:	0017      	movs	r7, r2
   146fa:	e58d      	b.n	14218 <__aeabi_dsub+0x10c>
   146fc:	000c      	movs	r4, r1
   146fe:	0017      	movs	r7, r2
   14700:	4e0b      	ldr	r6, [pc, #44]	; (14730 <__aeabi_dsub+0x624>)
   14702:	e589      	b.n	14218 <__aeabi_dsub+0x10c>
   14704:	001e      	movs	r6, r3
   14706:	0027      	movs	r7, r4
   14708:	3e20      	subs	r6, #32
   1470a:	40f7      	lsrs	r7, r6
   1470c:	2b20      	cmp	r3, #32
   1470e:	d00c      	beq.n	1472a <__aeabi_dsub+0x61e>
   14710:	2640      	movs	r6, #64	; 0x40
   14712:	1af3      	subs	r3, r6, r3
   14714:	409c      	lsls	r4, r3
   14716:	4650      	mov	r0, sl
   14718:	4320      	orrs	r0, r4
   1471a:	1e44      	subs	r4, r0, #1
   1471c:	41a0      	sbcs	r0, r4
   1471e:	4307      	orrs	r7, r0
   14720:	2400      	movs	r4, #0
   14722:	18bf      	adds	r7, r7, r2
   14724:	e748      	b.n	145b8 <__aeabi_dsub+0x4ac>
   14726:	2400      	movs	r4, #0
   14728:	e7d0      	b.n	146cc <__aeabi_dsub+0x5c0>
   1472a:	2400      	movs	r4, #0
   1472c:	e7f3      	b.n	14716 <__aeabi_dsub+0x60a>
   1472e:	46c0      	nop			; (mov r8, r8)
   14730:	000007ff 	.word	0x000007ff
   14734:	ff7fffff 	.word	0xff7fffff

00014738 <__aeabi_d2iz>:
   14738:	b530      	push	{r4, r5, lr}
   1473a:	4d13      	ldr	r5, [pc, #76]	; (14788 <__aeabi_d2iz+0x50>)
   1473c:	030a      	lsls	r2, r1, #12
   1473e:	004b      	lsls	r3, r1, #1
   14740:	0b12      	lsrs	r2, r2, #12
   14742:	0d5b      	lsrs	r3, r3, #21
   14744:	0fc9      	lsrs	r1, r1, #31
   14746:	2400      	movs	r4, #0
   14748:	42ab      	cmp	r3, r5
   1474a:	dd10      	ble.n	1476e <__aeabi_d2iz+0x36>
   1474c:	4c0f      	ldr	r4, [pc, #60]	; (1478c <__aeabi_d2iz+0x54>)
   1474e:	42a3      	cmp	r3, r4
   14750:	dc0f      	bgt.n	14772 <__aeabi_d2iz+0x3a>
   14752:	2480      	movs	r4, #128	; 0x80
   14754:	4d0e      	ldr	r5, [pc, #56]	; (14790 <__aeabi_d2iz+0x58>)
   14756:	0364      	lsls	r4, r4, #13
   14758:	4322      	orrs	r2, r4
   1475a:	1aed      	subs	r5, r5, r3
   1475c:	2d1f      	cmp	r5, #31
   1475e:	dd0b      	ble.n	14778 <__aeabi_d2iz+0x40>
   14760:	480c      	ldr	r0, [pc, #48]	; (14794 <__aeabi_d2iz+0x5c>)
   14762:	1ac3      	subs	r3, r0, r3
   14764:	40da      	lsrs	r2, r3
   14766:	4254      	negs	r4, r2
   14768:	2900      	cmp	r1, #0
   1476a:	d100      	bne.n	1476e <__aeabi_d2iz+0x36>
   1476c:	0014      	movs	r4, r2
   1476e:	0020      	movs	r0, r4
   14770:	bd30      	pop	{r4, r5, pc}
   14772:	4b09      	ldr	r3, [pc, #36]	; (14798 <__aeabi_d2iz+0x60>)
   14774:	18cc      	adds	r4, r1, r3
   14776:	e7fa      	b.n	1476e <__aeabi_d2iz+0x36>
   14778:	4c08      	ldr	r4, [pc, #32]	; (1479c <__aeabi_d2iz+0x64>)
   1477a:	40e8      	lsrs	r0, r5
   1477c:	46a4      	mov	ip, r4
   1477e:	4463      	add	r3, ip
   14780:	409a      	lsls	r2, r3
   14782:	4302      	orrs	r2, r0
   14784:	e7ef      	b.n	14766 <__aeabi_d2iz+0x2e>
   14786:	46c0      	nop			; (mov r8, r8)
   14788:	000003fe 	.word	0x000003fe
   1478c:	0000041d 	.word	0x0000041d
   14790:	00000433 	.word	0x00000433
   14794:	00000413 	.word	0x00000413
   14798:	7fffffff 	.word	0x7fffffff
   1479c:	fffffbed 	.word	0xfffffbed

000147a0 <__aeabi_i2d>:
   147a0:	b570      	push	{r4, r5, r6, lr}
   147a2:	2800      	cmp	r0, #0
   147a4:	d030      	beq.n	14808 <__aeabi_i2d+0x68>
   147a6:	17c3      	asrs	r3, r0, #31
   147a8:	18c4      	adds	r4, r0, r3
   147aa:	405c      	eors	r4, r3
   147ac:	0fc5      	lsrs	r5, r0, #31
   147ae:	0020      	movs	r0, r4
   147b0:	f000 f98a 	bl	14ac8 <__clzsi2>
   147b4:	4b17      	ldr	r3, [pc, #92]	; (14814 <__aeabi_i2d+0x74>)
   147b6:	4a18      	ldr	r2, [pc, #96]	; (14818 <__aeabi_i2d+0x78>)
   147b8:	1a1b      	subs	r3, r3, r0
   147ba:	1ad2      	subs	r2, r2, r3
   147bc:	2a1f      	cmp	r2, #31
   147be:	dd18      	ble.n	147f2 <__aeabi_i2d+0x52>
   147c0:	4a16      	ldr	r2, [pc, #88]	; (1481c <__aeabi_i2d+0x7c>)
   147c2:	1ad2      	subs	r2, r2, r3
   147c4:	4094      	lsls	r4, r2
   147c6:	2200      	movs	r2, #0
   147c8:	0324      	lsls	r4, r4, #12
   147ca:	055b      	lsls	r3, r3, #21
   147cc:	0b24      	lsrs	r4, r4, #12
   147ce:	0d5b      	lsrs	r3, r3, #21
   147d0:	2100      	movs	r1, #0
   147d2:	0010      	movs	r0, r2
   147d4:	0324      	lsls	r4, r4, #12
   147d6:	0d0a      	lsrs	r2, r1, #20
   147d8:	0b24      	lsrs	r4, r4, #12
   147da:	0512      	lsls	r2, r2, #20
   147dc:	4322      	orrs	r2, r4
   147de:	4c10      	ldr	r4, [pc, #64]	; (14820 <__aeabi_i2d+0x80>)
   147e0:	051b      	lsls	r3, r3, #20
   147e2:	4022      	ands	r2, r4
   147e4:	4313      	orrs	r3, r2
   147e6:	005b      	lsls	r3, r3, #1
   147e8:	07ed      	lsls	r5, r5, #31
   147ea:	085b      	lsrs	r3, r3, #1
   147ec:	432b      	orrs	r3, r5
   147ee:	0019      	movs	r1, r3
   147f0:	bd70      	pop	{r4, r5, r6, pc}
   147f2:	0021      	movs	r1, r4
   147f4:	4091      	lsls	r1, r2
   147f6:	000a      	movs	r2, r1
   147f8:	210b      	movs	r1, #11
   147fa:	1a08      	subs	r0, r1, r0
   147fc:	40c4      	lsrs	r4, r0
   147fe:	055b      	lsls	r3, r3, #21
   14800:	0324      	lsls	r4, r4, #12
   14802:	0b24      	lsrs	r4, r4, #12
   14804:	0d5b      	lsrs	r3, r3, #21
   14806:	e7e3      	b.n	147d0 <__aeabi_i2d+0x30>
   14808:	2500      	movs	r5, #0
   1480a:	2300      	movs	r3, #0
   1480c:	2400      	movs	r4, #0
   1480e:	2200      	movs	r2, #0
   14810:	e7de      	b.n	147d0 <__aeabi_i2d+0x30>
   14812:	46c0      	nop			; (mov r8, r8)
   14814:	0000041e 	.word	0x0000041e
   14818:	00000433 	.word	0x00000433
   1481c:	00000413 	.word	0x00000413
   14820:	800fffff 	.word	0x800fffff

00014824 <__aeabi_ui2d>:
   14824:	b510      	push	{r4, lr}
   14826:	1e04      	subs	r4, r0, #0
   14828:	d028      	beq.n	1487c <__aeabi_ui2d+0x58>
   1482a:	f000 f94d 	bl	14ac8 <__clzsi2>
   1482e:	4b15      	ldr	r3, [pc, #84]	; (14884 <__aeabi_ui2d+0x60>)
   14830:	4a15      	ldr	r2, [pc, #84]	; (14888 <__aeabi_ui2d+0x64>)
   14832:	1a1b      	subs	r3, r3, r0
   14834:	1ad2      	subs	r2, r2, r3
   14836:	2a1f      	cmp	r2, #31
   14838:	dd15      	ble.n	14866 <__aeabi_ui2d+0x42>
   1483a:	4a14      	ldr	r2, [pc, #80]	; (1488c <__aeabi_ui2d+0x68>)
   1483c:	1ad2      	subs	r2, r2, r3
   1483e:	4094      	lsls	r4, r2
   14840:	2200      	movs	r2, #0
   14842:	0324      	lsls	r4, r4, #12
   14844:	055b      	lsls	r3, r3, #21
   14846:	0b24      	lsrs	r4, r4, #12
   14848:	0d5b      	lsrs	r3, r3, #21
   1484a:	2100      	movs	r1, #0
   1484c:	0010      	movs	r0, r2
   1484e:	0324      	lsls	r4, r4, #12
   14850:	0d0a      	lsrs	r2, r1, #20
   14852:	0b24      	lsrs	r4, r4, #12
   14854:	0512      	lsls	r2, r2, #20
   14856:	4322      	orrs	r2, r4
   14858:	4c0d      	ldr	r4, [pc, #52]	; (14890 <__aeabi_ui2d+0x6c>)
   1485a:	051b      	lsls	r3, r3, #20
   1485c:	4022      	ands	r2, r4
   1485e:	4313      	orrs	r3, r2
   14860:	005b      	lsls	r3, r3, #1
   14862:	0859      	lsrs	r1, r3, #1
   14864:	bd10      	pop	{r4, pc}
   14866:	0021      	movs	r1, r4
   14868:	4091      	lsls	r1, r2
   1486a:	000a      	movs	r2, r1
   1486c:	210b      	movs	r1, #11
   1486e:	1a08      	subs	r0, r1, r0
   14870:	40c4      	lsrs	r4, r0
   14872:	055b      	lsls	r3, r3, #21
   14874:	0324      	lsls	r4, r4, #12
   14876:	0b24      	lsrs	r4, r4, #12
   14878:	0d5b      	lsrs	r3, r3, #21
   1487a:	e7e6      	b.n	1484a <__aeabi_ui2d+0x26>
   1487c:	2300      	movs	r3, #0
   1487e:	2400      	movs	r4, #0
   14880:	2200      	movs	r2, #0
   14882:	e7e2      	b.n	1484a <__aeabi_ui2d+0x26>
   14884:	0000041e 	.word	0x0000041e
   14888:	00000433 	.word	0x00000433
   1488c:	00000413 	.word	0x00000413
   14890:	800fffff 	.word	0x800fffff

00014894 <__aeabi_f2d>:
   14894:	0041      	lsls	r1, r0, #1
   14896:	0e09      	lsrs	r1, r1, #24
   14898:	1c4b      	adds	r3, r1, #1
   1489a:	b570      	push	{r4, r5, r6, lr}
   1489c:	b2db      	uxtb	r3, r3
   1489e:	0246      	lsls	r6, r0, #9
   148a0:	0a75      	lsrs	r5, r6, #9
   148a2:	0fc4      	lsrs	r4, r0, #31
   148a4:	2b01      	cmp	r3, #1
   148a6:	dd14      	ble.n	148d2 <__aeabi_f2d+0x3e>
   148a8:	23e0      	movs	r3, #224	; 0xe0
   148aa:	009b      	lsls	r3, r3, #2
   148ac:	076d      	lsls	r5, r5, #29
   148ae:	0b36      	lsrs	r6, r6, #12
   148b0:	18cb      	adds	r3, r1, r3
   148b2:	2100      	movs	r1, #0
   148b4:	0d0a      	lsrs	r2, r1, #20
   148b6:	0028      	movs	r0, r5
   148b8:	0512      	lsls	r2, r2, #20
   148ba:	4d1c      	ldr	r5, [pc, #112]	; (1492c <__aeabi_f2d+0x98>)
   148bc:	4332      	orrs	r2, r6
   148be:	055b      	lsls	r3, r3, #21
   148c0:	402a      	ands	r2, r5
   148c2:	085b      	lsrs	r3, r3, #1
   148c4:	4313      	orrs	r3, r2
   148c6:	005b      	lsls	r3, r3, #1
   148c8:	07e4      	lsls	r4, r4, #31
   148ca:	085b      	lsrs	r3, r3, #1
   148cc:	4323      	orrs	r3, r4
   148ce:	0019      	movs	r1, r3
   148d0:	bd70      	pop	{r4, r5, r6, pc}
   148d2:	2900      	cmp	r1, #0
   148d4:	d114      	bne.n	14900 <__aeabi_f2d+0x6c>
   148d6:	2d00      	cmp	r5, #0
   148d8:	d01e      	beq.n	14918 <__aeabi_f2d+0x84>
   148da:	0028      	movs	r0, r5
   148dc:	f000 f8f4 	bl	14ac8 <__clzsi2>
   148e0:	280a      	cmp	r0, #10
   148e2:	dc1c      	bgt.n	1491e <__aeabi_f2d+0x8a>
   148e4:	230b      	movs	r3, #11
   148e6:	002a      	movs	r2, r5
   148e8:	1a1b      	subs	r3, r3, r0
   148ea:	40da      	lsrs	r2, r3
   148ec:	0003      	movs	r3, r0
   148ee:	3315      	adds	r3, #21
   148f0:	409d      	lsls	r5, r3
   148f2:	4b0f      	ldr	r3, [pc, #60]	; (14930 <__aeabi_f2d+0x9c>)
   148f4:	0312      	lsls	r2, r2, #12
   148f6:	1a1b      	subs	r3, r3, r0
   148f8:	055b      	lsls	r3, r3, #21
   148fa:	0b16      	lsrs	r6, r2, #12
   148fc:	0d5b      	lsrs	r3, r3, #21
   148fe:	e7d8      	b.n	148b2 <__aeabi_f2d+0x1e>
   14900:	2d00      	cmp	r5, #0
   14902:	d006      	beq.n	14912 <__aeabi_f2d+0x7e>
   14904:	0b32      	lsrs	r2, r6, #12
   14906:	2680      	movs	r6, #128	; 0x80
   14908:	0336      	lsls	r6, r6, #12
   1490a:	076d      	lsls	r5, r5, #29
   1490c:	4316      	orrs	r6, r2
   1490e:	4b09      	ldr	r3, [pc, #36]	; (14934 <__aeabi_f2d+0xa0>)
   14910:	e7cf      	b.n	148b2 <__aeabi_f2d+0x1e>
   14912:	4b08      	ldr	r3, [pc, #32]	; (14934 <__aeabi_f2d+0xa0>)
   14914:	2600      	movs	r6, #0
   14916:	e7cc      	b.n	148b2 <__aeabi_f2d+0x1e>
   14918:	2300      	movs	r3, #0
   1491a:	2600      	movs	r6, #0
   1491c:	e7c9      	b.n	148b2 <__aeabi_f2d+0x1e>
   1491e:	0003      	movs	r3, r0
   14920:	002a      	movs	r2, r5
   14922:	3b0b      	subs	r3, #11
   14924:	409a      	lsls	r2, r3
   14926:	2500      	movs	r5, #0
   14928:	e7e3      	b.n	148f2 <__aeabi_f2d+0x5e>
   1492a:	46c0      	nop			; (mov r8, r8)
   1492c:	800fffff 	.word	0x800fffff
   14930:	00000389 	.word	0x00000389
   14934:	000007ff 	.word	0x000007ff

00014938 <__aeabi_d2f>:
   14938:	b5f0      	push	{r4, r5, r6, r7, lr}
   1493a:	004c      	lsls	r4, r1, #1
   1493c:	0d64      	lsrs	r4, r4, #21
   1493e:	030b      	lsls	r3, r1, #12
   14940:	1c62      	adds	r2, r4, #1
   14942:	0f45      	lsrs	r5, r0, #29
   14944:	0a5b      	lsrs	r3, r3, #9
   14946:	0552      	lsls	r2, r2, #21
   14948:	432b      	orrs	r3, r5
   1494a:	0fc9      	lsrs	r1, r1, #31
   1494c:	00c5      	lsls	r5, r0, #3
   1494e:	0d52      	lsrs	r2, r2, #21
   14950:	2a01      	cmp	r2, #1
   14952:	dd28      	ble.n	149a6 <__aeabi_d2f+0x6e>
   14954:	4a3a      	ldr	r2, [pc, #232]	; (14a40 <__aeabi_d2f+0x108>)
   14956:	18a6      	adds	r6, r4, r2
   14958:	2efe      	cmp	r6, #254	; 0xfe
   1495a:	dc1b      	bgt.n	14994 <__aeabi_d2f+0x5c>
   1495c:	2e00      	cmp	r6, #0
   1495e:	dd3e      	ble.n	149de <__aeabi_d2f+0xa6>
   14960:	0180      	lsls	r0, r0, #6
   14962:	0002      	movs	r2, r0
   14964:	1e50      	subs	r0, r2, #1
   14966:	4182      	sbcs	r2, r0
   14968:	0f6d      	lsrs	r5, r5, #29
   1496a:	432a      	orrs	r2, r5
   1496c:	00db      	lsls	r3, r3, #3
   1496e:	4313      	orrs	r3, r2
   14970:	075a      	lsls	r2, r3, #29
   14972:	d004      	beq.n	1497e <__aeabi_d2f+0x46>
   14974:	220f      	movs	r2, #15
   14976:	401a      	ands	r2, r3
   14978:	2a04      	cmp	r2, #4
   1497a:	d000      	beq.n	1497e <__aeabi_d2f+0x46>
   1497c:	3304      	adds	r3, #4
   1497e:	2280      	movs	r2, #128	; 0x80
   14980:	04d2      	lsls	r2, r2, #19
   14982:	401a      	ands	r2, r3
   14984:	d05a      	beq.n	14a3c <__aeabi_d2f+0x104>
   14986:	3601      	adds	r6, #1
   14988:	2eff      	cmp	r6, #255	; 0xff
   1498a:	d003      	beq.n	14994 <__aeabi_d2f+0x5c>
   1498c:	019b      	lsls	r3, r3, #6
   1498e:	0a5b      	lsrs	r3, r3, #9
   14990:	b2f4      	uxtb	r4, r6
   14992:	e001      	b.n	14998 <__aeabi_d2f+0x60>
   14994:	24ff      	movs	r4, #255	; 0xff
   14996:	2300      	movs	r3, #0
   14998:	0258      	lsls	r0, r3, #9
   1499a:	05e4      	lsls	r4, r4, #23
   1499c:	0a40      	lsrs	r0, r0, #9
   1499e:	07c9      	lsls	r1, r1, #31
   149a0:	4320      	orrs	r0, r4
   149a2:	4308      	orrs	r0, r1
   149a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   149a6:	2c00      	cmp	r4, #0
   149a8:	d007      	beq.n	149ba <__aeabi_d2f+0x82>
   149aa:	431d      	orrs	r5, r3
   149ac:	d0f2      	beq.n	14994 <__aeabi_d2f+0x5c>
   149ae:	2080      	movs	r0, #128	; 0x80
   149b0:	00db      	lsls	r3, r3, #3
   149b2:	0480      	lsls	r0, r0, #18
   149b4:	4303      	orrs	r3, r0
   149b6:	26ff      	movs	r6, #255	; 0xff
   149b8:	e7da      	b.n	14970 <__aeabi_d2f+0x38>
   149ba:	432b      	orrs	r3, r5
   149bc:	d003      	beq.n	149c6 <__aeabi_d2f+0x8e>
   149be:	2305      	movs	r3, #5
   149c0:	08db      	lsrs	r3, r3, #3
   149c2:	2cff      	cmp	r4, #255	; 0xff
   149c4:	d003      	beq.n	149ce <__aeabi_d2f+0x96>
   149c6:	025b      	lsls	r3, r3, #9
   149c8:	0a5b      	lsrs	r3, r3, #9
   149ca:	b2e4      	uxtb	r4, r4
   149cc:	e7e4      	b.n	14998 <__aeabi_d2f+0x60>
   149ce:	2b00      	cmp	r3, #0
   149d0:	d032      	beq.n	14a38 <__aeabi_d2f+0x100>
   149d2:	2080      	movs	r0, #128	; 0x80
   149d4:	03c0      	lsls	r0, r0, #15
   149d6:	4303      	orrs	r3, r0
   149d8:	025b      	lsls	r3, r3, #9
   149da:	0a5b      	lsrs	r3, r3, #9
   149dc:	e7dc      	b.n	14998 <__aeabi_d2f+0x60>
   149de:	0032      	movs	r2, r6
   149e0:	3217      	adds	r2, #23
   149e2:	db14      	blt.n	14a0e <__aeabi_d2f+0xd6>
   149e4:	2280      	movs	r2, #128	; 0x80
   149e6:	271e      	movs	r7, #30
   149e8:	0412      	lsls	r2, r2, #16
   149ea:	4313      	orrs	r3, r2
   149ec:	1bbf      	subs	r7, r7, r6
   149ee:	2f1f      	cmp	r7, #31
   149f0:	dc0f      	bgt.n	14a12 <__aeabi_d2f+0xda>
   149f2:	4a14      	ldr	r2, [pc, #80]	; (14a44 <__aeabi_d2f+0x10c>)
   149f4:	4694      	mov	ip, r2
   149f6:	4464      	add	r4, ip
   149f8:	002a      	movs	r2, r5
   149fa:	40a5      	lsls	r5, r4
   149fc:	002e      	movs	r6, r5
   149fe:	40a3      	lsls	r3, r4
   14a00:	1e75      	subs	r5, r6, #1
   14a02:	41ae      	sbcs	r6, r5
   14a04:	40fa      	lsrs	r2, r7
   14a06:	4333      	orrs	r3, r6
   14a08:	4313      	orrs	r3, r2
   14a0a:	2600      	movs	r6, #0
   14a0c:	e7b0      	b.n	14970 <__aeabi_d2f+0x38>
   14a0e:	2400      	movs	r4, #0
   14a10:	e7d5      	b.n	149be <__aeabi_d2f+0x86>
   14a12:	2202      	movs	r2, #2
   14a14:	4252      	negs	r2, r2
   14a16:	1b96      	subs	r6, r2, r6
   14a18:	001a      	movs	r2, r3
   14a1a:	40f2      	lsrs	r2, r6
   14a1c:	2f20      	cmp	r7, #32
   14a1e:	d009      	beq.n	14a34 <__aeabi_d2f+0xfc>
   14a20:	4809      	ldr	r0, [pc, #36]	; (14a48 <__aeabi_d2f+0x110>)
   14a22:	4684      	mov	ip, r0
   14a24:	4464      	add	r4, ip
   14a26:	40a3      	lsls	r3, r4
   14a28:	432b      	orrs	r3, r5
   14a2a:	1e5d      	subs	r5, r3, #1
   14a2c:	41ab      	sbcs	r3, r5
   14a2e:	2600      	movs	r6, #0
   14a30:	4313      	orrs	r3, r2
   14a32:	e79d      	b.n	14970 <__aeabi_d2f+0x38>
   14a34:	2300      	movs	r3, #0
   14a36:	e7f7      	b.n	14a28 <__aeabi_d2f+0xf0>
   14a38:	2300      	movs	r3, #0
   14a3a:	e7ad      	b.n	14998 <__aeabi_d2f+0x60>
   14a3c:	0034      	movs	r4, r6
   14a3e:	e7bf      	b.n	149c0 <__aeabi_d2f+0x88>
   14a40:	fffffc80 	.word	0xfffffc80
   14a44:	fffffc82 	.word	0xfffffc82
   14a48:	fffffca2 	.word	0xfffffca2

00014a4c <__aeabi_cdrcmple>:
   14a4c:	4684      	mov	ip, r0
   14a4e:	1c10      	adds	r0, r2, #0
   14a50:	4662      	mov	r2, ip
   14a52:	468c      	mov	ip, r1
   14a54:	1c19      	adds	r1, r3, #0
   14a56:	4663      	mov	r3, ip
   14a58:	e000      	b.n	14a5c <__aeabi_cdcmpeq>
   14a5a:	46c0      	nop			; (mov r8, r8)

00014a5c <__aeabi_cdcmpeq>:
   14a5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   14a5e:	f000 f8fb 	bl	14c58 <__ledf2>
   14a62:	2800      	cmp	r0, #0
   14a64:	d401      	bmi.n	14a6a <__aeabi_cdcmpeq+0xe>
   14a66:	2100      	movs	r1, #0
   14a68:	42c8      	cmn	r0, r1
   14a6a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00014a6c <__aeabi_dcmpeq>:
   14a6c:	b510      	push	{r4, lr}
   14a6e:	f000 f855 	bl	14b1c <__eqdf2>
   14a72:	4240      	negs	r0, r0
   14a74:	3001      	adds	r0, #1
   14a76:	bd10      	pop	{r4, pc}

00014a78 <__aeabi_dcmplt>:
   14a78:	b510      	push	{r4, lr}
   14a7a:	f000 f8ed 	bl	14c58 <__ledf2>
   14a7e:	2800      	cmp	r0, #0
   14a80:	db01      	blt.n	14a86 <__aeabi_dcmplt+0xe>
   14a82:	2000      	movs	r0, #0
   14a84:	bd10      	pop	{r4, pc}
   14a86:	2001      	movs	r0, #1
   14a88:	bd10      	pop	{r4, pc}
   14a8a:	46c0      	nop			; (mov r8, r8)

00014a8c <__aeabi_dcmple>:
   14a8c:	b510      	push	{r4, lr}
   14a8e:	f000 f8e3 	bl	14c58 <__ledf2>
   14a92:	2800      	cmp	r0, #0
   14a94:	dd01      	ble.n	14a9a <__aeabi_dcmple+0xe>
   14a96:	2000      	movs	r0, #0
   14a98:	bd10      	pop	{r4, pc}
   14a9a:	2001      	movs	r0, #1
   14a9c:	bd10      	pop	{r4, pc}
   14a9e:	46c0      	nop			; (mov r8, r8)

00014aa0 <__aeabi_dcmpgt>:
   14aa0:	b510      	push	{r4, lr}
   14aa2:	f000 f875 	bl	14b90 <__gedf2>
   14aa6:	2800      	cmp	r0, #0
   14aa8:	dc01      	bgt.n	14aae <__aeabi_dcmpgt+0xe>
   14aaa:	2000      	movs	r0, #0
   14aac:	bd10      	pop	{r4, pc}
   14aae:	2001      	movs	r0, #1
   14ab0:	bd10      	pop	{r4, pc}
   14ab2:	46c0      	nop			; (mov r8, r8)

00014ab4 <__aeabi_dcmpge>:
   14ab4:	b510      	push	{r4, lr}
   14ab6:	f000 f86b 	bl	14b90 <__gedf2>
   14aba:	2800      	cmp	r0, #0
   14abc:	da01      	bge.n	14ac2 <__aeabi_dcmpge+0xe>
   14abe:	2000      	movs	r0, #0
   14ac0:	bd10      	pop	{r4, pc}
   14ac2:	2001      	movs	r0, #1
   14ac4:	bd10      	pop	{r4, pc}
   14ac6:	46c0      	nop			; (mov r8, r8)

00014ac8 <__clzsi2>:
   14ac8:	211c      	movs	r1, #28
   14aca:	2301      	movs	r3, #1
   14acc:	041b      	lsls	r3, r3, #16
   14ace:	4298      	cmp	r0, r3
   14ad0:	d301      	bcc.n	14ad6 <__clzsi2+0xe>
   14ad2:	0c00      	lsrs	r0, r0, #16
   14ad4:	3910      	subs	r1, #16
   14ad6:	0a1b      	lsrs	r3, r3, #8
   14ad8:	4298      	cmp	r0, r3
   14ada:	d301      	bcc.n	14ae0 <__clzsi2+0x18>
   14adc:	0a00      	lsrs	r0, r0, #8
   14ade:	3908      	subs	r1, #8
   14ae0:	091b      	lsrs	r3, r3, #4
   14ae2:	4298      	cmp	r0, r3
   14ae4:	d301      	bcc.n	14aea <__clzsi2+0x22>
   14ae6:	0900      	lsrs	r0, r0, #4
   14ae8:	3904      	subs	r1, #4
   14aea:	a202      	add	r2, pc, #8	; (adr r2, 14af4 <__clzsi2+0x2c>)
   14aec:	5c10      	ldrb	r0, [r2, r0]
   14aee:	1840      	adds	r0, r0, r1
   14af0:	4770      	bx	lr
   14af2:	46c0      	nop			; (mov r8, r8)
   14af4:	02020304 	.word	0x02020304
   14af8:	01010101 	.word	0x01010101
	...

00014b04 <__clzdi2>:
   14b04:	b510      	push	{r4, lr}
   14b06:	2900      	cmp	r1, #0
   14b08:	d103      	bne.n	14b12 <__clzdi2+0xe>
   14b0a:	f7ff ffdd 	bl	14ac8 <__clzsi2>
   14b0e:	3020      	adds	r0, #32
   14b10:	e002      	b.n	14b18 <__clzdi2+0x14>
   14b12:	1c08      	adds	r0, r1, #0
   14b14:	f7ff ffd8 	bl	14ac8 <__clzsi2>
   14b18:	bd10      	pop	{r4, pc}
   14b1a:	46c0      	nop			; (mov r8, r8)

00014b1c <__eqdf2>:
   14b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   14b1e:	464f      	mov	r7, r9
   14b20:	4646      	mov	r6, r8
   14b22:	46d6      	mov	lr, sl
   14b24:	005c      	lsls	r4, r3, #1
   14b26:	b5c0      	push	{r6, r7, lr}
   14b28:	031f      	lsls	r7, r3, #12
   14b2a:	0fdb      	lsrs	r3, r3, #31
   14b2c:	469a      	mov	sl, r3
   14b2e:	4b17      	ldr	r3, [pc, #92]	; (14b8c <__eqdf2+0x70>)
   14b30:	030e      	lsls	r6, r1, #12
   14b32:	004d      	lsls	r5, r1, #1
   14b34:	4684      	mov	ip, r0
   14b36:	4680      	mov	r8, r0
   14b38:	0b36      	lsrs	r6, r6, #12
   14b3a:	0d6d      	lsrs	r5, r5, #21
   14b3c:	0fc9      	lsrs	r1, r1, #31
   14b3e:	4691      	mov	r9, r2
   14b40:	0b3f      	lsrs	r7, r7, #12
   14b42:	0d64      	lsrs	r4, r4, #21
   14b44:	2001      	movs	r0, #1
   14b46:	429d      	cmp	r5, r3
   14b48:	d008      	beq.n	14b5c <__eqdf2+0x40>
   14b4a:	429c      	cmp	r4, r3
   14b4c:	d001      	beq.n	14b52 <__eqdf2+0x36>
   14b4e:	42a5      	cmp	r5, r4
   14b50:	d00b      	beq.n	14b6a <__eqdf2+0x4e>
   14b52:	bc1c      	pop	{r2, r3, r4}
   14b54:	4690      	mov	r8, r2
   14b56:	4699      	mov	r9, r3
   14b58:	46a2      	mov	sl, r4
   14b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14b5c:	4663      	mov	r3, ip
   14b5e:	4333      	orrs	r3, r6
   14b60:	d1f7      	bne.n	14b52 <__eqdf2+0x36>
   14b62:	42ac      	cmp	r4, r5
   14b64:	d1f5      	bne.n	14b52 <__eqdf2+0x36>
   14b66:	433a      	orrs	r2, r7
   14b68:	d1f3      	bne.n	14b52 <__eqdf2+0x36>
   14b6a:	2001      	movs	r0, #1
   14b6c:	42be      	cmp	r6, r7
   14b6e:	d1f0      	bne.n	14b52 <__eqdf2+0x36>
   14b70:	45c8      	cmp	r8, r9
   14b72:	d1ee      	bne.n	14b52 <__eqdf2+0x36>
   14b74:	4551      	cmp	r1, sl
   14b76:	d007      	beq.n	14b88 <__eqdf2+0x6c>
   14b78:	2d00      	cmp	r5, #0
   14b7a:	d1ea      	bne.n	14b52 <__eqdf2+0x36>
   14b7c:	4663      	mov	r3, ip
   14b7e:	431e      	orrs	r6, r3
   14b80:	0030      	movs	r0, r6
   14b82:	1e46      	subs	r6, r0, #1
   14b84:	41b0      	sbcs	r0, r6
   14b86:	e7e4      	b.n	14b52 <__eqdf2+0x36>
   14b88:	2000      	movs	r0, #0
   14b8a:	e7e2      	b.n	14b52 <__eqdf2+0x36>
   14b8c:	000007ff 	.word	0x000007ff

00014b90 <__gedf2>:
   14b90:	b5f0      	push	{r4, r5, r6, r7, lr}
   14b92:	4645      	mov	r5, r8
   14b94:	46de      	mov	lr, fp
   14b96:	4657      	mov	r7, sl
   14b98:	464e      	mov	r6, r9
   14b9a:	b5e0      	push	{r5, r6, r7, lr}
   14b9c:	031f      	lsls	r7, r3, #12
   14b9e:	0b3d      	lsrs	r5, r7, #12
   14ba0:	4f2c      	ldr	r7, [pc, #176]	; (14c54 <__gedf2+0xc4>)
   14ba2:	030e      	lsls	r6, r1, #12
   14ba4:	004c      	lsls	r4, r1, #1
   14ba6:	46ab      	mov	fp, r5
   14ba8:	005d      	lsls	r5, r3, #1
   14baa:	4684      	mov	ip, r0
   14bac:	0b36      	lsrs	r6, r6, #12
   14bae:	0d64      	lsrs	r4, r4, #21
   14bb0:	0fc9      	lsrs	r1, r1, #31
   14bb2:	4690      	mov	r8, r2
   14bb4:	0d6d      	lsrs	r5, r5, #21
   14bb6:	0fdb      	lsrs	r3, r3, #31
   14bb8:	42bc      	cmp	r4, r7
   14bba:	d02a      	beq.n	14c12 <__gedf2+0x82>
   14bbc:	4f25      	ldr	r7, [pc, #148]	; (14c54 <__gedf2+0xc4>)
   14bbe:	42bd      	cmp	r5, r7
   14bc0:	d02d      	beq.n	14c1e <__gedf2+0x8e>
   14bc2:	2c00      	cmp	r4, #0
   14bc4:	d10f      	bne.n	14be6 <__gedf2+0x56>
   14bc6:	4330      	orrs	r0, r6
   14bc8:	0007      	movs	r7, r0
   14bca:	4681      	mov	r9, r0
   14bcc:	4278      	negs	r0, r7
   14bce:	4178      	adcs	r0, r7
   14bd0:	b2c0      	uxtb	r0, r0
   14bd2:	2d00      	cmp	r5, #0
   14bd4:	d117      	bne.n	14c06 <__gedf2+0x76>
   14bd6:	465f      	mov	r7, fp
   14bd8:	433a      	orrs	r2, r7
   14bda:	d114      	bne.n	14c06 <__gedf2+0x76>
   14bdc:	464b      	mov	r3, r9
   14bde:	2000      	movs	r0, #0
   14be0:	2b00      	cmp	r3, #0
   14be2:	d00a      	beq.n	14bfa <__gedf2+0x6a>
   14be4:	e006      	b.n	14bf4 <__gedf2+0x64>
   14be6:	2d00      	cmp	r5, #0
   14be8:	d102      	bne.n	14bf0 <__gedf2+0x60>
   14bea:	4658      	mov	r0, fp
   14bec:	4302      	orrs	r2, r0
   14bee:	d001      	beq.n	14bf4 <__gedf2+0x64>
   14bf0:	4299      	cmp	r1, r3
   14bf2:	d018      	beq.n	14c26 <__gedf2+0x96>
   14bf4:	4248      	negs	r0, r1
   14bf6:	2101      	movs	r1, #1
   14bf8:	4308      	orrs	r0, r1
   14bfa:	bc3c      	pop	{r2, r3, r4, r5}
   14bfc:	4690      	mov	r8, r2
   14bfe:	4699      	mov	r9, r3
   14c00:	46a2      	mov	sl, r4
   14c02:	46ab      	mov	fp, r5
   14c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14c06:	2800      	cmp	r0, #0
   14c08:	d0f2      	beq.n	14bf0 <__gedf2+0x60>
   14c0a:	2001      	movs	r0, #1
   14c0c:	3b01      	subs	r3, #1
   14c0e:	4318      	orrs	r0, r3
   14c10:	e7f3      	b.n	14bfa <__gedf2+0x6a>
   14c12:	0037      	movs	r7, r6
   14c14:	4307      	orrs	r7, r0
   14c16:	d0d1      	beq.n	14bbc <__gedf2+0x2c>
   14c18:	2002      	movs	r0, #2
   14c1a:	4240      	negs	r0, r0
   14c1c:	e7ed      	b.n	14bfa <__gedf2+0x6a>
   14c1e:	465f      	mov	r7, fp
   14c20:	4317      	orrs	r7, r2
   14c22:	d0ce      	beq.n	14bc2 <__gedf2+0x32>
   14c24:	e7f8      	b.n	14c18 <__gedf2+0x88>
   14c26:	42ac      	cmp	r4, r5
   14c28:	dce4      	bgt.n	14bf4 <__gedf2+0x64>
   14c2a:	da03      	bge.n	14c34 <__gedf2+0xa4>
   14c2c:	1e48      	subs	r0, r1, #1
   14c2e:	2101      	movs	r1, #1
   14c30:	4308      	orrs	r0, r1
   14c32:	e7e2      	b.n	14bfa <__gedf2+0x6a>
   14c34:	455e      	cmp	r6, fp
   14c36:	d8dd      	bhi.n	14bf4 <__gedf2+0x64>
   14c38:	d006      	beq.n	14c48 <__gedf2+0xb8>
   14c3a:	2000      	movs	r0, #0
   14c3c:	455e      	cmp	r6, fp
   14c3e:	d2dc      	bcs.n	14bfa <__gedf2+0x6a>
   14c40:	2301      	movs	r3, #1
   14c42:	1e48      	subs	r0, r1, #1
   14c44:	4318      	orrs	r0, r3
   14c46:	e7d8      	b.n	14bfa <__gedf2+0x6a>
   14c48:	45c4      	cmp	ip, r8
   14c4a:	d8d3      	bhi.n	14bf4 <__gedf2+0x64>
   14c4c:	2000      	movs	r0, #0
   14c4e:	45c4      	cmp	ip, r8
   14c50:	d3f6      	bcc.n	14c40 <__gedf2+0xb0>
   14c52:	e7d2      	b.n	14bfa <__gedf2+0x6a>
   14c54:	000007ff 	.word	0x000007ff

00014c58 <__ledf2>:
   14c58:	b5f0      	push	{r4, r5, r6, r7, lr}
   14c5a:	464e      	mov	r6, r9
   14c5c:	4645      	mov	r5, r8
   14c5e:	46de      	mov	lr, fp
   14c60:	4657      	mov	r7, sl
   14c62:	005c      	lsls	r4, r3, #1
   14c64:	b5e0      	push	{r5, r6, r7, lr}
   14c66:	031f      	lsls	r7, r3, #12
   14c68:	0fdb      	lsrs	r3, r3, #31
   14c6a:	4699      	mov	r9, r3
   14c6c:	4b2a      	ldr	r3, [pc, #168]	; (14d18 <__ledf2+0xc0>)
   14c6e:	030e      	lsls	r6, r1, #12
   14c70:	004d      	lsls	r5, r1, #1
   14c72:	0fc9      	lsrs	r1, r1, #31
   14c74:	4684      	mov	ip, r0
   14c76:	0b36      	lsrs	r6, r6, #12
   14c78:	0d6d      	lsrs	r5, r5, #21
   14c7a:	468b      	mov	fp, r1
   14c7c:	4690      	mov	r8, r2
   14c7e:	0b3f      	lsrs	r7, r7, #12
   14c80:	0d64      	lsrs	r4, r4, #21
   14c82:	429d      	cmp	r5, r3
   14c84:	d020      	beq.n	14cc8 <__ledf2+0x70>
   14c86:	4b24      	ldr	r3, [pc, #144]	; (14d18 <__ledf2+0xc0>)
   14c88:	429c      	cmp	r4, r3
   14c8a:	d022      	beq.n	14cd2 <__ledf2+0x7a>
   14c8c:	2d00      	cmp	r5, #0
   14c8e:	d112      	bne.n	14cb6 <__ledf2+0x5e>
   14c90:	4330      	orrs	r0, r6
   14c92:	4243      	negs	r3, r0
   14c94:	4143      	adcs	r3, r0
   14c96:	b2db      	uxtb	r3, r3
   14c98:	2c00      	cmp	r4, #0
   14c9a:	d01f      	beq.n	14cdc <__ledf2+0x84>
   14c9c:	2b00      	cmp	r3, #0
   14c9e:	d00c      	beq.n	14cba <__ledf2+0x62>
   14ca0:	464b      	mov	r3, r9
   14ca2:	2001      	movs	r0, #1
   14ca4:	3b01      	subs	r3, #1
   14ca6:	4303      	orrs	r3, r0
   14ca8:	0018      	movs	r0, r3
   14caa:	bc3c      	pop	{r2, r3, r4, r5}
   14cac:	4690      	mov	r8, r2
   14cae:	4699      	mov	r9, r3
   14cb0:	46a2      	mov	sl, r4
   14cb2:	46ab      	mov	fp, r5
   14cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14cb6:	2c00      	cmp	r4, #0
   14cb8:	d016      	beq.n	14ce8 <__ledf2+0x90>
   14cba:	45cb      	cmp	fp, r9
   14cbc:	d017      	beq.n	14cee <__ledf2+0x96>
   14cbe:	465b      	mov	r3, fp
   14cc0:	4259      	negs	r1, r3
   14cc2:	2301      	movs	r3, #1
   14cc4:	430b      	orrs	r3, r1
   14cc6:	e7ef      	b.n	14ca8 <__ledf2+0x50>
   14cc8:	0031      	movs	r1, r6
   14cca:	2302      	movs	r3, #2
   14ccc:	4301      	orrs	r1, r0
   14cce:	d1eb      	bne.n	14ca8 <__ledf2+0x50>
   14cd0:	e7d9      	b.n	14c86 <__ledf2+0x2e>
   14cd2:	0039      	movs	r1, r7
   14cd4:	2302      	movs	r3, #2
   14cd6:	4311      	orrs	r1, r2
   14cd8:	d1e6      	bne.n	14ca8 <__ledf2+0x50>
   14cda:	e7d7      	b.n	14c8c <__ledf2+0x34>
   14cdc:	433a      	orrs	r2, r7
   14cde:	d1dd      	bne.n	14c9c <__ledf2+0x44>
   14ce0:	2300      	movs	r3, #0
   14ce2:	2800      	cmp	r0, #0
   14ce4:	d0e0      	beq.n	14ca8 <__ledf2+0x50>
   14ce6:	e7ea      	b.n	14cbe <__ledf2+0x66>
   14ce8:	433a      	orrs	r2, r7
   14cea:	d1e6      	bne.n	14cba <__ledf2+0x62>
   14cec:	e7e7      	b.n	14cbe <__ledf2+0x66>
   14cee:	42a5      	cmp	r5, r4
   14cf0:	dce5      	bgt.n	14cbe <__ledf2+0x66>
   14cf2:	db05      	blt.n	14d00 <__ledf2+0xa8>
   14cf4:	42be      	cmp	r6, r7
   14cf6:	d8e2      	bhi.n	14cbe <__ledf2+0x66>
   14cf8:	d007      	beq.n	14d0a <__ledf2+0xb2>
   14cfa:	2300      	movs	r3, #0
   14cfc:	42be      	cmp	r6, r7
   14cfe:	d2d3      	bcs.n	14ca8 <__ledf2+0x50>
   14d00:	4659      	mov	r1, fp
   14d02:	2301      	movs	r3, #1
   14d04:	3901      	subs	r1, #1
   14d06:	430b      	orrs	r3, r1
   14d08:	e7ce      	b.n	14ca8 <__ledf2+0x50>
   14d0a:	45c4      	cmp	ip, r8
   14d0c:	d8d7      	bhi.n	14cbe <__ledf2+0x66>
   14d0e:	2300      	movs	r3, #0
   14d10:	45c4      	cmp	ip, r8
   14d12:	d3f5      	bcc.n	14d00 <__ledf2+0xa8>
   14d14:	e7c8      	b.n	14ca8 <__ledf2+0x50>
   14d16:	46c0      	nop			; (mov r8, r8)
   14d18:	000007ff 	.word	0x000007ff

00014d1c <__assert_func>:
   14d1c:	b530      	push	{r4, r5, lr}
   14d1e:	001c      	movs	r4, r3
   14d20:	4b09      	ldr	r3, [pc, #36]	; (14d48 <__assert_func+0x2c>)
   14d22:	0005      	movs	r5, r0
   14d24:	681b      	ldr	r3, [r3, #0]
   14d26:	b085      	sub	sp, #20
   14d28:	68d8      	ldr	r0, [r3, #12]
   14d2a:	4b08      	ldr	r3, [pc, #32]	; (14d4c <__assert_func+0x30>)
   14d2c:	2a00      	cmp	r2, #0
   14d2e:	d101      	bne.n	14d34 <__assert_func+0x18>
   14d30:	4b07      	ldr	r3, [pc, #28]	; (14d50 <__assert_func+0x34>)
   14d32:	001a      	movs	r2, r3
   14d34:	9202      	str	r2, [sp, #8]
   14d36:	9301      	str	r3, [sp, #4]
   14d38:	9100      	str	r1, [sp, #0]
   14d3a:	002b      	movs	r3, r5
   14d3c:	0022      	movs	r2, r4
   14d3e:	4905      	ldr	r1, [pc, #20]	; (14d54 <__assert_func+0x38>)
   14d40:	f000 f80a 	bl	14d58 <fiprintf>
   14d44:	f000 fdde 	bl	15904 <abort>
   14d48:	20000028 	.word	0x20000028
   14d4c:	000174e8 	.word	0x000174e8
   14d50:	00017523 	.word	0x00017523
   14d54:	000174f5 	.word	0x000174f5

00014d58 <fiprintf>:
   14d58:	b40e      	push	{r1, r2, r3}
   14d5a:	b503      	push	{r0, r1, lr}
   14d5c:	0001      	movs	r1, r0
   14d5e:	ab03      	add	r3, sp, #12
   14d60:	4804      	ldr	r0, [pc, #16]	; (14d74 <fiprintf+0x1c>)
   14d62:	cb04      	ldmia	r3!, {r2}
   14d64:	6800      	ldr	r0, [r0, #0]
   14d66:	9301      	str	r3, [sp, #4]
   14d68:	f000 f872 	bl	14e50 <_vfiprintf_r>
   14d6c:	b002      	add	sp, #8
   14d6e:	bc08      	pop	{r3}
   14d70:	b003      	add	sp, #12
   14d72:	4718      	bx	r3
   14d74:	20000028 	.word	0x20000028

00014d78 <__libc_init_array>:
   14d78:	b570      	push	{r4, r5, r6, lr}
   14d7a:	2600      	movs	r6, #0
   14d7c:	4d0c      	ldr	r5, [pc, #48]	; (14db0 <__libc_init_array+0x38>)
   14d7e:	4c0d      	ldr	r4, [pc, #52]	; (14db4 <__libc_init_array+0x3c>)
   14d80:	1b64      	subs	r4, r4, r5
   14d82:	10a4      	asrs	r4, r4, #2
   14d84:	42a6      	cmp	r6, r4
   14d86:	d109      	bne.n	14d9c <__libc_init_array+0x24>
   14d88:	2600      	movs	r6, #0
   14d8a:	f002 fc17 	bl	175bc <_init>
   14d8e:	4d0a      	ldr	r5, [pc, #40]	; (14db8 <__libc_init_array+0x40>)
   14d90:	4c0a      	ldr	r4, [pc, #40]	; (14dbc <__libc_init_array+0x44>)
   14d92:	1b64      	subs	r4, r4, r5
   14d94:	10a4      	asrs	r4, r4, #2
   14d96:	42a6      	cmp	r6, r4
   14d98:	d105      	bne.n	14da6 <__libc_init_array+0x2e>
   14d9a:	bd70      	pop	{r4, r5, r6, pc}
   14d9c:	00b3      	lsls	r3, r6, #2
   14d9e:	58eb      	ldr	r3, [r5, r3]
   14da0:	4798      	blx	r3
   14da2:	3601      	adds	r6, #1
   14da4:	e7ee      	b.n	14d84 <__libc_init_array+0xc>
   14da6:	00b3      	lsls	r3, r6, #2
   14da8:	58eb      	ldr	r3, [r5, r3]
   14daa:	4798      	blx	r3
   14dac:	3601      	adds	r6, #1
   14dae:	e7f2      	b.n	14d96 <__libc_init_array+0x1e>
   14db0:	000175c8 	.word	0x000175c8
   14db4:	000175c8 	.word	0x000175c8
   14db8:	000175c8 	.word	0x000175c8
   14dbc:	000175cc 	.word	0x000175cc

00014dc0 <memcmp>:
   14dc0:	b530      	push	{r4, r5, lr}
   14dc2:	2400      	movs	r4, #0
   14dc4:	42a2      	cmp	r2, r4
   14dc6:	d101      	bne.n	14dcc <memcmp+0xc>
   14dc8:	2000      	movs	r0, #0
   14dca:	e005      	b.n	14dd8 <memcmp+0x18>
   14dcc:	5d03      	ldrb	r3, [r0, r4]
   14dce:	1c65      	adds	r5, r4, #1
   14dd0:	5d0c      	ldrb	r4, [r1, r4]
   14dd2:	42a3      	cmp	r3, r4
   14dd4:	d001      	beq.n	14dda <memcmp+0x1a>
   14dd6:	1b18      	subs	r0, r3, r4
   14dd8:	bd30      	pop	{r4, r5, pc}
   14dda:	002c      	movs	r4, r5
   14ddc:	e7f2      	b.n	14dc4 <memcmp+0x4>

00014dde <memcpy>:
   14dde:	2300      	movs	r3, #0
   14de0:	b510      	push	{r4, lr}
   14de2:	429a      	cmp	r2, r3
   14de4:	d100      	bne.n	14de8 <memcpy+0xa>
   14de6:	bd10      	pop	{r4, pc}
   14de8:	5ccc      	ldrb	r4, [r1, r3]
   14dea:	54c4      	strb	r4, [r0, r3]
   14dec:	3301      	adds	r3, #1
   14dee:	e7f8      	b.n	14de2 <memcpy+0x4>

00014df0 <memset>:
   14df0:	0003      	movs	r3, r0
   14df2:	1882      	adds	r2, r0, r2
   14df4:	4293      	cmp	r3, r2
   14df6:	d100      	bne.n	14dfa <memset+0xa>
   14df8:	4770      	bx	lr
   14dfa:	7019      	strb	r1, [r3, #0]
   14dfc:	3301      	adds	r3, #1
   14dfe:	e7f9      	b.n	14df4 <memset+0x4>

00014e00 <__sfputc_r>:
   14e00:	6893      	ldr	r3, [r2, #8]
   14e02:	b510      	push	{r4, lr}
   14e04:	3b01      	subs	r3, #1
   14e06:	6093      	str	r3, [r2, #8]
   14e08:	2b00      	cmp	r3, #0
   14e0a:	da05      	bge.n	14e18 <__sfputc_r+0x18>
   14e0c:	6994      	ldr	r4, [r2, #24]
   14e0e:	42a3      	cmp	r3, r4
   14e10:	db08      	blt.n	14e24 <__sfputc_r+0x24>
   14e12:	b2cb      	uxtb	r3, r1
   14e14:	2b0a      	cmp	r3, #10
   14e16:	d005      	beq.n	14e24 <__sfputc_r+0x24>
   14e18:	6813      	ldr	r3, [r2, #0]
   14e1a:	1c58      	adds	r0, r3, #1
   14e1c:	6010      	str	r0, [r2, #0]
   14e1e:	7019      	strb	r1, [r3, #0]
   14e20:	b2c8      	uxtb	r0, r1
   14e22:	bd10      	pop	{r4, pc}
   14e24:	f000 fca2 	bl	1576c <__swbuf_r>
   14e28:	e7fb      	b.n	14e22 <__sfputc_r+0x22>

00014e2a <__sfputs_r>:
   14e2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14e2c:	0006      	movs	r6, r0
   14e2e:	000f      	movs	r7, r1
   14e30:	0014      	movs	r4, r2
   14e32:	18d5      	adds	r5, r2, r3
   14e34:	42ac      	cmp	r4, r5
   14e36:	d101      	bne.n	14e3c <__sfputs_r+0x12>
   14e38:	2000      	movs	r0, #0
   14e3a:	e007      	b.n	14e4c <__sfputs_r+0x22>
   14e3c:	7821      	ldrb	r1, [r4, #0]
   14e3e:	003a      	movs	r2, r7
   14e40:	0030      	movs	r0, r6
   14e42:	f7ff ffdd 	bl	14e00 <__sfputc_r>
   14e46:	3401      	adds	r4, #1
   14e48:	1c43      	adds	r3, r0, #1
   14e4a:	d1f3      	bne.n	14e34 <__sfputs_r+0xa>
   14e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14e4e:	Address 0x00014e4e is out of bounds.


00014e50 <_vfiprintf_r>:
   14e50:	b5f0      	push	{r4, r5, r6, r7, lr}
   14e52:	b09f      	sub	sp, #124	; 0x7c
   14e54:	0006      	movs	r6, r0
   14e56:	000f      	movs	r7, r1
   14e58:	0014      	movs	r4, r2
   14e5a:	9305      	str	r3, [sp, #20]
   14e5c:	2800      	cmp	r0, #0
   14e5e:	d004      	beq.n	14e6a <_vfiprintf_r+0x1a>
   14e60:	6983      	ldr	r3, [r0, #24]
   14e62:	2b00      	cmp	r3, #0
   14e64:	d101      	bne.n	14e6a <_vfiprintf_r+0x1a>
   14e66:	f000 fe4d 	bl	15b04 <__sinit>
   14e6a:	4b7f      	ldr	r3, [pc, #508]	; (15068 <_vfiprintf_r+0x218>)
   14e6c:	429f      	cmp	r7, r3
   14e6e:	d15c      	bne.n	14f2a <_vfiprintf_r+0xda>
   14e70:	6877      	ldr	r7, [r6, #4]
   14e72:	89bb      	ldrh	r3, [r7, #12]
   14e74:	071b      	lsls	r3, r3, #28
   14e76:	d562      	bpl.n	14f3e <_vfiprintf_r+0xee>
   14e78:	693b      	ldr	r3, [r7, #16]
   14e7a:	2b00      	cmp	r3, #0
   14e7c:	d05f      	beq.n	14f3e <_vfiprintf_r+0xee>
   14e7e:	2300      	movs	r3, #0
   14e80:	ad06      	add	r5, sp, #24
   14e82:	616b      	str	r3, [r5, #20]
   14e84:	3320      	adds	r3, #32
   14e86:	766b      	strb	r3, [r5, #25]
   14e88:	3310      	adds	r3, #16
   14e8a:	76ab      	strb	r3, [r5, #26]
   14e8c:	9402      	str	r4, [sp, #8]
   14e8e:	9c02      	ldr	r4, [sp, #8]
   14e90:	7823      	ldrb	r3, [r4, #0]
   14e92:	2b00      	cmp	r3, #0
   14e94:	d15d      	bne.n	14f52 <_vfiprintf_r+0x102>
   14e96:	9b02      	ldr	r3, [sp, #8]
   14e98:	1ae3      	subs	r3, r4, r3
   14e9a:	9304      	str	r3, [sp, #16]
   14e9c:	d00d      	beq.n	14eba <_vfiprintf_r+0x6a>
   14e9e:	9b04      	ldr	r3, [sp, #16]
   14ea0:	9a02      	ldr	r2, [sp, #8]
   14ea2:	0039      	movs	r1, r7
   14ea4:	0030      	movs	r0, r6
   14ea6:	f7ff ffc0 	bl	14e2a <__sfputs_r>
   14eaa:	1c43      	adds	r3, r0, #1
   14eac:	d100      	bne.n	14eb0 <_vfiprintf_r+0x60>
   14eae:	e0cc      	b.n	1504a <_vfiprintf_r+0x1fa>
   14eb0:	696a      	ldr	r2, [r5, #20]
   14eb2:	9b04      	ldr	r3, [sp, #16]
   14eb4:	4694      	mov	ip, r2
   14eb6:	4463      	add	r3, ip
   14eb8:	616b      	str	r3, [r5, #20]
   14eba:	7823      	ldrb	r3, [r4, #0]
   14ebc:	2b00      	cmp	r3, #0
   14ebe:	d100      	bne.n	14ec2 <_vfiprintf_r+0x72>
   14ec0:	e0c3      	b.n	1504a <_vfiprintf_r+0x1fa>
   14ec2:	2201      	movs	r2, #1
   14ec4:	2300      	movs	r3, #0
   14ec6:	4252      	negs	r2, r2
   14ec8:	606a      	str	r2, [r5, #4]
   14eca:	a902      	add	r1, sp, #8
   14ecc:	3254      	adds	r2, #84	; 0x54
   14ece:	1852      	adds	r2, r2, r1
   14ed0:	3401      	adds	r4, #1
   14ed2:	602b      	str	r3, [r5, #0]
   14ed4:	60eb      	str	r3, [r5, #12]
   14ed6:	60ab      	str	r3, [r5, #8]
   14ed8:	7013      	strb	r3, [r2, #0]
   14eda:	65ab      	str	r3, [r5, #88]	; 0x58
   14edc:	7821      	ldrb	r1, [r4, #0]
   14ede:	2205      	movs	r2, #5
   14ee0:	4862      	ldr	r0, [pc, #392]	; (1506c <_vfiprintf_r+0x21c>)
   14ee2:	f000 ff1b 	bl	15d1c <memchr>
   14ee6:	1c63      	adds	r3, r4, #1
   14ee8:	469c      	mov	ip, r3
   14eea:	2800      	cmp	r0, #0
   14eec:	d135      	bne.n	14f5a <_vfiprintf_r+0x10a>
   14eee:	6829      	ldr	r1, [r5, #0]
   14ef0:	06cb      	lsls	r3, r1, #27
   14ef2:	d504      	bpl.n	14efe <_vfiprintf_r+0xae>
   14ef4:	2353      	movs	r3, #83	; 0x53
   14ef6:	aa02      	add	r2, sp, #8
   14ef8:	3020      	adds	r0, #32
   14efa:	189b      	adds	r3, r3, r2
   14efc:	7018      	strb	r0, [r3, #0]
   14efe:	070b      	lsls	r3, r1, #28
   14f00:	d504      	bpl.n	14f0c <_vfiprintf_r+0xbc>
   14f02:	2353      	movs	r3, #83	; 0x53
   14f04:	202b      	movs	r0, #43	; 0x2b
   14f06:	aa02      	add	r2, sp, #8
   14f08:	189b      	adds	r3, r3, r2
   14f0a:	7018      	strb	r0, [r3, #0]
   14f0c:	7823      	ldrb	r3, [r4, #0]
   14f0e:	2b2a      	cmp	r3, #42	; 0x2a
   14f10:	d02c      	beq.n	14f6c <_vfiprintf_r+0x11c>
   14f12:	2000      	movs	r0, #0
   14f14:	210a      	movs	r1, #10
   14f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14f18:	7822      	ldrb	r2, [r4, #0]
   14f1a:	3a30      	subs	r2, #48	; 0x30
   14f1c:	2a09      	cmp	r2, #9
   14f1e:	d800      	bhi.n	14f22 <_vfiprintf_r+0xd2>
   14f20:	e06b      	b.n	14ffa <_vfiprintf_r+0x1aa>
   14f22:	2800      	cmp	r0, #0
   14f24:	d02a      	beq.n	14f7c <_vfiprintf_r+0x12c>
   14f26:	9309      	str	r3, [sp, #36]	; 0x24
   14f28:	e028      	b.n	14f7c <_vfiprintf_r+0x12c>
   14f2a:	4b51      	ldr	r3, [pc, #324]	; (15070 <_vfiprintf_r+0x220>)
   14f2c:	429f      	cmp	r7, r3
   14f2e:	d101      	bne.n	14f34 <_vfiprintf_r+0xe4>
   14f30:	68b7      	ldr	r7, [r6, #8]
   14f32:	e79e      	b.n	14e72 <_vfiprintf_r+0x22>
   14f34:	4b4f      	ldr	r3, [pc, #316]	; (15074 <_vfiprintf_r+0x224>)
   14f36:	429f      	cmp	r7, r3
   14f38:	d19b      	bne.n	14e72 <_vfiprintf_r+0x22>
   14f3a:	68f7      	ldr	r7, [r6, #12]
   14f3c:	e799      	b.n	14e72 <_vfiprintf_r+0x22>
   14f3e:	0039      	movs	r1, r7
   14f40:	0030      	movs	r0, r6
   14f42:	f000 fc69 	bl	15818 <__swsetup_r>
   14f46:	2800      	cmp	r0, #0
   14f48:	d099      	beq.n	14e7e <_vfiprintf_r+0x2e>
   14f4a:	2001      	movs	r0, #1
   14f4c:	4240      	negs	r0, r0
   14f4e:	b01f      	add	sp, #124	; 0x7c
   14f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14f52:	2b25      	cmp	r3, #37	; 0x25
   14f54:	d09f      	beq.n	14e96 <_vfiprintf_r+0x46>
   14f56:	3401      	adds	r4, #1
   14f58:	e79a      	b.n	14e90 <_vfiprintf_r+0x40>
   14f5a:	4b44      	ldr	r3, [pc, #272]	; (1506c <_vfiprintf_r+0x21c>)
   14f5c:	6829      	ldr	r1, [r5, #0]
   14f5e:	1ac0      	subs	r0, r0, r3
   14f60:	2301      	movs	r3, #1
   14f62:	4083      	lsls	r3, r0
   14f64:	430b      	orrs	r3, r1
   14f66:	602b      	str	r3, [r5, #0]
   14f68:	4664      	mov	r4, ip
   14f6a:	e7b7      	b.n	14edc <_vfiprintf_r+0x8c>
   14f6c:	9b05      	ldr	r3, [sp, #20]
   14f6e:	1d18      	adds	r0, r3, #4
   14f70:	681b      	ldr	r3, [r3, #0]
   14f72:	9005      	str	r0, [sp, #20]
   14f74:	2b00      	cmp	r3, #0
   14f76:	db3a      	blt.n	14fee <_vfiprintf_r+0x19e>
   14f78:	9309      	str	r3, [sp, #36]	; 0x24
   14f7a:	4664      	mov	r4, ip
   14f7c:	7823      	ldrb	r3, [r4, #0]
   14f7e:	2b2e      	cmp	r3, #46	; 0x2e
   14f80:	d10b      	bne.n	14f9a <_vfiprintf_r+0x14a>
   14f82:	7863      	ldrb	r3, [r4, #1]
   14f84:	1c62      	adds	r2, r4, #1
   14f86:	2b2a      	cmp	r3, #42	; 0x2a
   14f88:	d13f      	bne.n	1500a <_vfiprintf_r+0x1ba>
   14f8a:	9b05      	ldr	r3, [sp, #20]
   14f8c:	3402      	adds	r4, #2
   14f8e:	1d1a      	adds	r2, r3, #4
   14f90:	681b      	ldr	r3, [r3, #0]
   14f92:	9205      	str	r2, [sp, #20]
   14f94:	2b00      	cmp	r3, #0
   14f96:	db35      	blt.n	15004 <_vfiprintf_r+0x1b4>
   14f98:	9307      	str	r3, [sp, #28]
   14f9a:	7821      	ldrb	r1, [r4, #0]
   14f9c:	2203      	movs	r2, #3
   14f9e:	4836      	ldr	r0, [pc, #216]	; (15078 <_vfiprintf_r+0x228>)
   14fa0:	f000 febc 	bl	15d1c <memchr>
   14fa4:	2800      	cmp	r0, #0
   14fa6:	d007      	beq.n	14fb8 <_vfiprintf_r+0x168>
   14fa8:	4b33      	ldr	r3, [pc, #204]	; (15078 <_vfiprintf_r+0x228>)
   14faa:	682a      	ldr	r2, [r5, #0]
   14fac:	1ac0      	subs	r0, r0, r3
   14fae:	2340      	movs	r3, #64	; 0x40
   14fb0:	4083      	lsls	r3, r0
   14fb2:	4313      	orrs	r3, r2
   14fb4:	602b      	str	r3, [r5, #0]
   14fb6:	3401      	adds	r4, #1
   14fb8:	7821      	ldrb	r1, [r4, #0]
   14fba:	1c63      	adds	r3, r4, #1
   14fbc:	2206      	movs	r2, #6
   14fbe:	482f      	ldr	r0, [pc, #188]	; (1507c <_vfiprintf_r+0x22c>)
   14fc0:	9302      	str	r3, [sp, #8]
   14fc2:	7629      	strb	r1, [r5, #24]
   14fc4:	f000 feaa 	bl	15d1c <memchr>
   14fc8:	2800      	cmp	r0, #0
   14fca:	d044      	beq.n	15056 <_vfiprintf_r+0x206>
   14fcc:	4b2c      	ldr	r3, [pc, #176]	; (15080 <_vfiprintf_r+0x230>)
   14fce:	2b00      	cmp	r3, #0
   14fd0:	d12f      	bne.n	15032 <_vfiprintf_r+0x1e2>
   14fd2:	6829      	ldr	r1, [r5, #0]
   14fd4:	9b05      	ldr	r3, [sp, #20]
   14fd6:	2207      	movs	r2, #7
   14fd8:	05c9      	lsls	r1, r1, #23
   14fda:	d528      	bpl.n	1502e <_vfiprintf_r+0x1de>
   14fdc:	189b      	adds	r3, r3, r2
   14fde:	4393      	bics	r3, r2
   14fe0:	3308      	adds	r3, #8
   14fe2:	9305      	str	r3, [sp, #20]
   14fe4:	696b      	ldr	r3, [r5, #20]
   14fe6:	9a03      	ldr	r2, [sp, #12]
   14fe8:	189b      	adds	r3, r3, r2
   14fea:	616b      	str	r3, [r5, #20]
   14fec:	e74f      	b.n	14e8e <_vfiprintf_r+0x3e>
   14fee:	425b      	negs	r3, r3
   14ff0:	60eb      	str	r3, [r5, #12]
   14ff2:	2302      	movs	r3, #2
   14ff4:	430b      	orrs	r3, r1
   14ff6:	602b      	str	r3, [r5, #0]
   14ff8:	e7bf      	b.n	14f7a <_vfiprintf_r+0x12a>
   14ffa:	434b      	muls	r3, r1
   14ffc:	3401      	adds	r4, #1
   14ffe:	189b      	adds	r3, r3, r2
   15000:	2001      	movs	r0, #1
   15002:	e789      	b.n	14f18 <_vfiprintf_r+0xc8>
   15004:	2301      	movs	r3, #1
   15006:	425b      	negs	r3, r3
   15008:	e7c6      	b.n	14f98 <_vfiprintf_r+0x148>
   1500a:	2300      	movs	r3, #0
   1500c:	0014      	movs	r4, r2
   1500e:	200a      	movs	r0, #10
   15010:	001a      	movs	r2, r3
   15012:	606b      	str	r3, [r5, #4]
   15014:	7821      	ldrb	r1, [r4, #0]
   15016:	3930      	subs	r1, #48	; 0x30
   15018:	2909      	cmp	r1, #9
   1501a:	d903      	bls.n	15024 <_vfiprintf_r+0x1d4>
   1501c:	2b00      	cmp	r3, #0
   1501e:	d0bc      	beq.n	14f9a <_vfiprintf_r+0x14a>
   15020:	9207      	str	r2, [sp, #28]
   15022:	e7ba      	b.n	14f9a <_vfiprintf_r+0x14a>
   15024:	4342      	muls	r2, r0
   15026:	3401      	adds	r4, #1
   15028:	1852      	adds	r2, r2, r1
   1502a:	2301      	movs	r3, #1
   1502c:	e7f2      	b.n	15014 <_vfiprintf_r+0x1c4>
   1502e:	3307      	adds	r3, #7
   15030:	e7d5      	b.n	14fde <_vfiprintf_r+0x18e>
   15032:	ab05      	add	r3, sp, #20
   15034:	9300      	str	r3, [sp, #0]
   15036:	003a      	movs	r2, r7
   15038:	4b12      	ldr	r3, [pc, #72]	; (15084 <_vfiprintf_r+0x234>)
   1503a:	0029      	movs	r1, r5
   1503c:	0030      	movs	r0, r6
   1503e:	e000      	b.n	15042 <_vfiprintf_r+0x1f2>
   15040:	bf00      	nop
   15042:	9003      	str	r0, [sp, #12]
   15044:	9b03      	ldr	r3, [sp, #12]
   15046:	3301      	adds	r3, #1
   15048:	d1cc      	bne.n	14fe4 <_vfiprintf_r+0x194>
   1504a:	89bb      	ldrh	r3, [r7, #12]
   1504c:	065b      	lsls	r3, r3, #25
   1504e:	d500      	bpl.n	15052 <_vfiprintf_r+0x202>
   15050:	e77b      	b.n	14f4a <_vfiprintf_r+0xfa>
   15052:	980b      	ldr	r0, [sp, #44]	; 0x2c
   15054:	e77b      	b.n	14f4e <_vfiprintf_r+0xfe>
   15056:	ab05      	add	r3, sp, #20
   15058:	9300      	str	r3, [sp, #0]
   1505a:	003a      	movs	r2, r7
   1505c:	4b09      	ldr	r3, [pc, #36]	; (15084 <_vfiprintf_r+0x234>)
   1505e:	0029      	movs	r1, r5
   15060:	0030      	movs	r0, r6
   15062:	f000 f87f 	bl	15164 <_printf_i>
   15066:	e7ec      	b.n	15042 <_vfiprintf_r+0x1f2>
   15068:	0001757c 	.word	0x0001757c
   1506c:	00017528 	.word	0x00017528
   15070:	0001759c 	.word	0x0001759c
   15074:	0001755c 	.word	0x0001755c
   15078:	0001752e 	.word	0x0001752e
   1507c:	00017532 	.word	0x00017532
   15080:	00000000 	.word	0x00000000
   15084:	00014e2b 	.word	0x00014e2b

00015088 <_printf_common>:
   15088:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1508a:	0015      	movs	r5, r2
   1508c:	9301      	str	r3, [sp, #4]
   1508e:	688a      	ldr	r2, [r1, #8]
   15090:	690b      	ldr	r3, [r1, #16]
   15092:	9000      	str	r0, [sp, #0]
   15094:	000c      	movs	r4, r1
   15096:	4293      	cmp	r3, r2
   15098:	da00      	bge.n	1509c <_printf_common+0x14>
   1509a:	0013      	movs	r3, r2
   1509c:	0022      	movs	r2, r4
   1509e:	602b      	str	r3, [r5, #0]
   150a0:	3243      	adds	r2, #67	; 0x43
   150a2:	7812      	ldrb	r2, [r2, #0]
   150a4:	2a00      	cmp	r2, #0
   150a6:	d001      	beq.n	150ac <_printf_common+0x24>
   150a8:	3301      	adds	r3, #1
   150aa:	602b      	str	r3, [r5, #0]
   150ac:	6823      	ldr	r3, [r4, #0]
   150ae:	069b      	lsls	r3, r3, #26
   150b0:	d502      	bpl.n	150b8 <_printf_common+0x30>
   150b2:	682b      	ldr	r3, [r5, #0]
   150b4:	3302      	adds	r3, #2
   150b6:	602b      	str	r3, [r5, #0]
   150b8:	2706      	movs	r7, #6
   150ba:	6823      	ldr	r3, [r4, #0]
   150bc:	401f      	ands	r7, r3
   150be:	d027      	beq.n	15110 <_printf_common+0x88>
   150c0:	0023      	movs	r3, r4
   150c2:	3343      	adds	r3, #67	; 0x43
   150c4:	781b      	ldrb	r3, [r3, #0]
   150c6:	1e5a      	subs	r2, r3, #1
   150c8:	4193      	sbcs	r3, r2
   150ca:	6822      	ldr	r2, [r4, #0]
   150cc:	0692      	lsls	r2, r2, #26
   150ce:	d430      	bmi.n	15132 <_printf_common+0xaa>
   150d0:	0022      	movs	r2, r4
   150d2:	9901      	ldr	r1, [sp, #4]
   150d4:	3243      	adds	r2, #67	; 0x43
   150d6:	9800      	ldr	r0, [sp, #0]
   150d8:	9e08      	ldr	r6, [sp, #32]
   150da:	47b0      	blx	r6
   150dc:	1c43      	adds	r3, r0, #1
   150de:	d025      	beq.n	1512c <_printf_common+0xa4>
   150e0:	2306      	movs	r3, #6
   150e2:	6820      	ldr	r0, [r4, #0]
   150e4:	682a      	ldr	r2, [r5, #0]
   150e6:	68e1      	ldr	r1, [r4, #12]
   150e8:	4003      	ands	r3, r0
   150ea:	2500      	movs	r5, #0
   150ec:	2b04      	cmp	r3, #4
   150ee:	d103      	bne.n	150f8 <_printf_common+0x70>
   150f0:	1a8d      	subs	r5, r1, r2
   150f2:	43eb      	mvns	r3, r5
   150f4:	17db      	asrs	r3, r3, #31
   150f6:	401d      	ands	r5, r3
   150f8:	68a3      	ldr	r3, [r4, #8]
   150fa:	6922      	ldr	r2, [r4, #16]
   150fc:	4293      	cmp	r3, r2
   150fe:	dd01      	ble.n	15104 <_printf_common+0x7c>
   15100:	1a9b      	subs	r3, r3, r2
   15102:	18ed      	adds	r5, r5, r3
   15104:	2700      	movs	r7, #0
   15106:	42bd      	cmp	r5, r7
   15108:	d120      	bne.n	1514c <_printf_common+0xc4>
   1510a:	2000      	movs	r0, #0
   1510c:	e010      	b.n	15130 <_printf_common+0xa8>
   1510e:	3701      	adds	r7, #1
   15110:	68e3      	ldr	r3, [r4, #12]
   15112:	682a      	ldr	r2, [r5, #0]
   15114:	1a9b      	subs	r3, r3, r2
   15116:	429f      	cmp	r7, r3
   15118:	dad2      	bge.n	150c0 <_printf_common+0x38>
   1511a:	0022      	movs	r2, r4
   1511c:	2301      	movs	r3, #1
   1511e:	3219      	adds	r2, #25
   15120:	9901      	ldr	r1, [sp, #4]
   15122:	9800      	ldr	r0, [sp, #0]
   15124:	9e08      	ldr	r6, [sp, #32]
   15126:	47b0      	blx	r6
   15128:	1c43      	adds	r3, r0, #1
   1512a:	d1f0      	bne.n	1510e <_printf_common+0x86>
   1512c:	2001      	movs	r0, #1
   1512e:	4240      	negs	r0, r0
   15130:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   15132:	2030      	movs	r0, #48	; 0x30
   15134:	18e1      	adds	r1, r4, r3
   15136:	3143      	adds	r1, #67	; 0x43
   15138:	7008      	strb	r0, [r1, #0]
   1513a:	0021      	movs	r1, r4
   1513c:	1c5a      	adds	r2, r3, #1
   1513e:	3145      	adds	r1, #69	; 0x45
   15140:	7809      	ldrb	r1, [r1, #0]
   15142:	18a2      	adds	r2, r4, r2
   15144:	3243      	adds	r2, #67	; 0x43
   15146:	3302      	adds	r3, #2
   15148:	7011      	strb	r1, [r2, #0]
   1514a:	e7c1      	b.n	150d0 <_printf_common+0x48>
   1514c:	0022      	movs	r2, r4
   1514e:	2301      	movs	r3, #1
   15150:	321a      	adds	r2, #26
   15152:	9901      	ldr	r1, [sp, #4]
   15154:	9800      	ldr	r0, [sp, #0]
   15156:	9e08      	ldr	r6, [sp, #32]
   15158:	47b0      	blx	r6
   1515a:	1c43      	adds	r3, r0, #1
   1515c:	d0e6      	beq.n	1512c <_printf_common+0xa4>
   1515e:	3701      	adds	r7, #1
   15160:	e7d1      	b.n	15106 <_printf_common+0x7e>
   15162:	Address 0x00015162 is out of bounds.


00015164 <_printf_i>:
   15164:	b5f0      	push	{r4, r5, r6, r7, lr}
   15166:	b08b      	sub	sp, #44	; 0x2c
   15168:	9206      	str	r2, [sp, #24]
   1516a:	000a      	movs	r2, r1
   1516c:	3243      	adds	r2, #67	; 0x43
   1516e:	9307      	str	r3, [sp, #28]
   15170:	9005      	str	r0, [sp, #20]
   15172:	9204      	str	r2, [sp, #16]
   15174:	7e0a      	ldrb	r2, [r1, #24]
   15176:	000c      	movs	r4, r1
   15178:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1517a:	2a6e      	cmp	r2, #110	; 0x6e
   1517c:	d100      	bne.n	15180 <_printf_i+0x1c>
   1517e:	e08f      	b.n	152a0 <_printf_i+0x13c>
   15180:	d817      	bhi.n	151b2 <_printf_i+0x4e>
   15182:	2a63      	cmp	r2, #99	; 0x63
   15184:	d02c      	beq.n	151e0 <_printf_i+0x7c>
   15186:	d808      	bhi.n	1519a <_printf_i+0x36>
   15188:	2a00      	cmp	r2, #0
   1518a:	d100      	bne.n	1518e <_printf_i+0x2a>
   1518c:	e099      	b.n	152c2 <_printf_i+0x15e>
   1518e:	2a58      	cmp	r2, #88	; 0x58
   15190:	d054      	beq.n	1523c <_printf_i+0xd8>
   15192:	0026      	movs	r6, r4
   15194:	3642      	adds	r6, #66	; 0x42
   15196:	7032      	strb	r2, [r6, #0]
   15198:	e029      	b.n	151ee <_printf_i+0x8a>
   1519a:	2a64      	cmp	r2, #100	; 0x64
   1519c:	d001      	beq.n	151a2 <_printf_i+0x3e>
   1519e:	2a69      	cmp	r2, #105	; 0x69
   151a0:	d1f7      	bne.n	15192 <_printf_i+0x2e>
   151a2:	6821      	ldr	r1, [r4, #0]
   151a4:	681a      	ldr	r2, [r3, #0]
   151a6:	0608      	lsls	r0, r1, #24
   151a8:	d523      	bpl.n	151f2 <_printf_i+0x8e>
   151aa:	1d11      	adds	r1, r2, #4
   151ac:	6019      	str	r1, [r3, #0]
   151ae:	6815      	ldr	r5, [r2, #0]
   151b0:	e025      	b.n	151fe <_printf_i+0x9a>
   151b2:	2a73      	cmp	r2, #115	; 0x73
   151b4:	d100      	bne.n	151b8 <_printf_i+0x54>
   151b6:	e088      	b.n	152ca <_printf_i+0x166>
   151b8:	d808      	bhi.n	151cc <_printf_i+0x68>
   151ba:	2a6f      	cmp	r2, #111	; 0x6f
   151bc:	d029      	beq.n	15212 <_printf_i+0xae>
   151be:	2a70      	cmp	r2, #112	; 0x70
   151c0:	d1e7      	bne.n	15192 <_printf_i+0x2e>
   151c2:	2220      	movs	r2, #32
   151c4:	6809      	ldr	r1, [r1, #0]
   151c6:	430a      	orrs	r2, r1
   151c8:	6022      	str	r2, [r4, #0]
   151ca:	e003      	b.n	151d4 <_printf_i+0x70>
   151cc:	2a75      	cmp	r2, #117	; 0x75
   151ce:	d020      	beq.n	15212 <_printf_i+0xae>
   151d0:	2a78      	cmp	r2, #120	; 0x78
   151d2:	d1de      	bne.n	15192 <_printf_i+0x2e>
   151d4:	0022      	movs	r2, r4
   151d6:	2178      	movs	r1, #120	; 0x78
   151d8:	3245      	adds	r2, #69	; 0x45
   151da:	7011      	strb	r1, [r2, #0]
   151dc:	4a6c      	ldr	r2, [pc, #432]	; (15390 <_printf_i+0x22c>)
   151de:	e030      	b.n	15242 <_printf_i+0xde>
   151e0:	000e      	movs	r6, r1
   151e2:	681a      	ldr	r2, [r3, #0]
   151e4:	3642      	adds	r6, #66	; 0x42
   151e6:	1d11      	adds	r1, r2, #4
   151e8:	6019      	str	r1, [r3, #0]
   151ea:	6813      	ldr	r3, [r2, #0]
   151ec:	7033      	strb	r3, [r6, #0]
   151ee:	2301      	movs	r3, #1
   151f0:	e079      	b.n	152e6 <_printf_i+0x182>
   151f2:	0649      	lsls	r1, r1, #25
   151f4:	d5d9      	bpl.n	151aa <_printf_i+0x46>
   151f6:	1d11      	adds	r1, r2, #4
   151f8:	6019      	str	r1, [r3, #0]
   151fa:	2300      	movs	r3, #0
   151fc:	5ed5      	ldrsh	r5, [r2, r3]
   151fe:	2d00      	cmp	r5, #0
   15200:	da03      	bge.n	1520a <_printf_i+0xa6>
   15202:	232d      	movs	r3, #45	; 0x2d
   15204:	9a04      	ldr	r2, [sp, #16]
   15206:	426d      	negs	r5, r5
   15208:	7013      	strb	r3, [r2, #0]
   1520a:	4b62      	ldr	r3, [pc, #392]	; (15394 <_printf_i+0x230>)
   1520c:	270a      	movs	r7, #10
   1520e:	9303      	str	r3, [sp, #12]
   15210:	e02f      	b.n	15272 <_printf_i+0x10e>
   15212:	6820      	ldr	r0, [r4, #0]
   15214:	6819      	ldr	r1, [r3, #0]
   15216:	0605      	lsls	r5, r0, #24
   15218:	d503      	bpl.n	15222 <_printf_i+0xbe>
   1521a:	1d08      	adds	r0, r1, #4
   1521c:	6018      	str	r0, [r3, #0]
   1521e:	680d      	ldr	r5, [r1, #0]
   15220:	e005      	b.n	1522e <_printf_i+0xca>
   15222:	0640      	lsls	r0, r0, #25
   15224:	d5f9      	bpl.n	1521a <_printf_i+0xb6>
   15226:	680d      	ldr	r5, [r1, #0]
   15228:	1d08      	adds	r0, r1, #4
   1522a:	6018      	str	r0, [r3, #0]
   1522c:	b2ad      	uxth	r5, r5
   1522e:	4b59      	ldr	r3, [pc, #356]	; (15394 <_printf_i+0x230>)
   15230:	2708      	movs	r7, #8
   15232:	9303      	str	r3, [sp, #12]
   15234:	2a6f      	cmp	r2, #111	; 0x6f
   15236:	d018      	beq.n	1526a <_printf_i+0x106>
   15238:	270a      	movs	r7, #10
   1523a:	e016      	b.n	1526a <_printf_i+0x106>
   1523c:	3145      	adds	r1, #69	; 0x45
   1523e:	700a      	strb	r2, [r1, #0]
   15240:	4a54      	ldr	r2, [pc, #336]	; (15394 <_printf_i+0x230>)
   15242:	9203      	str	r2, [sp, #12]
   15244:	681a      	ldr	r2, [r3, #0]
   15246:	6821      	ldr	r1, [r4, #0]
   15248:	1d10      	adds	r0, r2, #4
   1524a:	6018      	str	r0, [r3, #0]
   1524c:	6815      	ldr	r5, [r2, #0]
   1524e:	0608      	lsls	r0, r1, #24
   15250:	d522      	bpl.n	15298 <_printf_i+0x134>
   15252:	07cb      	lsls	r3, r1, #31
   15254:	d502      	bpl.n	1525c <_printf_i+0xf8>
   15256:	2320      	movs	r3, #32
   15258:	4319      	orrs	r1, r3
   1525a:	6021      	str	r1, [r4, #0]
   1525c:	2710      	movs	r7, #16
   1525e:	2d00      	cmp	r5, #0
   15260:	d103      	bne.n	1526a <_printf_i+0x106>
   15262:	2320      	movs	r3, #32
   15264:	6822      	ldr	r2, [r4, #0]
   15266:	439a      	bics	r2, r3
   15268:	6022      	str	r2, [r4, #0]
   1526a:	0023      	movs	r3, r4
   1526c:	2200      	movs	r2, #0
   1526e:	3343      	adds	r3, #67	; 0x43
   15270:	701a      	strb	r2, [r3, #0]
   15272:	6863      	ldr	r3, [r4, #4]
   15274:	60a3      	str	r3, [r4, #8]
   15276:	2b00      	cmp	r3, #0
   15278:	db5c      	blt.n	15334 <_printf_i+0x1d0>
   1527a:	2204      	movs	r2, #4
   1527c:	6821      	ldr	r1, [r4, #0]
   1527e:	4391      	bics	r1, r2
   15280:	6021      	str	r1, [r4, #0]
   15282:	2d00      	cmp	r5, #0
   15284:	d158      	bne.n	15338 <_printf_i+0x1d4>
   15286:	9e04      	ldr	r6, [sp, #16]
   15288:	2b00      	cmp	r3, #0
   1528a:	d064      	beq.n	15356 <_printf_i+0x1f2>
   1528c:	0026      	movs	r6, r4
   1528e:	9b03      	ldr	r3, [sp, #12]
   15290:	3642      	adds	r6, #66	; 0x42
   15292:	781b      	ldrb	r3, [r3, #0]
   15294:	7033      	strb	r3, [r6, #0]
   15296:	e05e      	b.n	15356 <_printf_i+0x1f2>
   15298:	0648      	lsls	r0, r1, #25
   1529a:	d5da      	bpl.n	15252 <_printf_i+0xee>
   1529c:	b2ad      	uxth	r5, r5
   1529e:	e7d8      	b.n	15252 <_printf_i+0xee>
   152a0:	6809      	ldr	r1, [r1, #0]
   152a2:	681a      	ldr	r2, [r3, #0]
   152a4:	0608      	lsls	r0, r1, #24
   152a6:	d505      	bpl.n	152b4 <_printf_i+0x150>
   152a8:	1d11      	adds	r1, r2, #4
   152aa:	6019      	str	r1, [r3, #0]
   152ac:	6813      	ldr	r3, [r2, #0]
   152ae:	6962      	ldr	r2, [r4, #20]
   152b0:	601a      	str	r2, [r3, #0]
   152b2:	e006      	b.n	152c2 <_printf_i+0x15e>
   152b4:	0649      	lsls	r1, r1, #25
   152b6:	d5f7      	bpl.n	152a8 <_printf_i+0x144>
   152b8:	1d11      	adds	r1, r2, #4
   152ba:	6019      	str	r1, [r3, #0]
   152bc:	6813      	ldr	r3, [r2, #0]
   152be:	8aa2      	ldrh	r2, [r4, #20]
   152c0:	801a      	strh	r2, [r3, #0]
   152c2:	2300      	movs	r3, #0
   152c4:	9e04      	ldr	r6, [sp, #16]
   152c6:	6123      	str	r3, [r4, #16]
   152c8:	e054      	b.n	15374 <_printf_i+0x210>
   152ca:	681a      	ldr	r2, [r3, #0]
   152cc:	1d11      	adds	r1, r2, #4
   152ce:	6019      	str	r1, [r3, #0]
   152d0:	6816      	ldr	r6, [r2, #0]
   152d2:	2100      	movs	r1, #0
   152d4:	6862      	ldr	r2, [r4, #4]
   152d6:	0030      	movs	r0, r6
   152d8:	f000 fd20 	bl	15d1c <memchr>
   152dc:	2800      	cmp	r0, #0
   152de:	d001      	beq.n	152e4 <_printf_i+0x180>
   152e0:	1b80      	subs	r0, r0, r6
   152e2:	6060      	str	r0, [r4, #4]
   152e4:	6863      	ldr	r3, [r4, #4]
   152e6:	6123      	str	r3, [r4, #16]
   152e8:	2300      	movs	r3, #0
   152ea:	9a04      	ldr	r2, [sp, #16]
   152ec:	7013      	strb	r3, [r2, #0]
   152ee:	e041      	b.n	15374 <_printf_i+0x210>
   152f0:	6923      	ldr	r3, [r4, #16]
   152f2:	0032      	movs	r2, r6
   152f4:	9906      	ldr	r1, [sp, #24]
   152f6:	9805      	ldr	r0, [sp, #20]
   152f8:	9d07      	ldr	r5, [sp, #28]
   152fa:	47a8      	blx	r5
   152fc:	1c43      	adds	r3, r0, #1
   152fe:	d043      	beq.n	15388 <_printf_i+0x224>
   15300:	6823      	ldr	r3, [r4, #0]
   15302:	2500      	movs	r5, #0
   15304:	079b      	lsls	r3, r3, #30
   15306:	d40f      	bmi.n	15328 <_printf_i+0x1c4>
   15308:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1530a:	68e0      	ldr	r0, [r4, #12]
   1530c:	4298      	cmp	r0, r3
   1530e:	da3d      	bge.n	1538c <_printf_i+0x228>
   15310:	0018      	movs	r0, r3
   15312:	e03b      	b.n	1538c <_printf_i+0x228>
   15314:	0022      	movs	r2, r4
   15316:	2301      	movs	r3, #1
   15318:	3219      	adds	r2, #25
   1531a:	9906      	ldr	r1, [sp, #24]
   1531c:	9805      	ldr	r0, [sp, #20]
   1531e:	9e07      	ldr	r6, [sp, #28]
   15320:	47b0      	blx	r6
   15322:	1c43      	adds	r3, r0, #1
   15324:	d030      	beq.n	15388 <_printf_i+0x224>
   15326:	3501      	adds	r5, #1
   15328:	68e3      	ldr	r3, [r4, #12]
   1532a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1532c:	1a9b      	subs	r3, r3, r2
   1532e:	429d      	cmp	r5, r3
   15330:	dbf0      	blt.n	15314 <_printf_i+0x1b0>
   15332:	e7e9      	b.n	15308 <_printf_i+0x1a4>
   15334:	2d00      	cmp	r5, #0
   15336:	d0a9      	beq.n	1528c <_printf_i+0x128>
   15338:	9e04      	ldr	r6, [sp, #16]
   1533a:	0028      	movs	r0, r5
   1533c:	0039      	movs	r1, r7
   1533e:	f7fc fca3 	bl	11c88 <__aeabi_uidivmod>
   15342:	9b03      	ldr	r3, [sp, #12]
   15344:	3e01      	subs	r6, #1
   15346:	5c5b      	ldrb	r3, [r3, r1]
   15348:	0028      	movs	r0, r5
   1534a:	7033      	strb	r3, [r6, #0]
   1534c:	0039      	movs	r1, r7
   1534e:	f7fc fc15 	bl	11b7c <__udivsi3>
   15352:	1e05      	subs	r5, r0, #0
   15354:	d1f1      	bne.n	1533a <_printf_i+0x1d6>
   15356:	2f08      	cmp	r7, #8
   15358:	d109      	bne.n	1536e <_printf_i+0x20a>
   1535a:	6823      	ldr	r3, [r4, #0]
   1535c:	07db      	lsls	r3, r3, #31
   1535e:	d506      	bpl.n	1536e <_printf_i+0x20a>
   15360:	6863      	ldr	r3, [r4, #4]
   15362:	6922      	ldr	r2, [r4, #16]
   15364:	4293      	cmp	r3, r2
   15366:	dc02      	bgt.n	1536e <_printf_i+0x20a>
   15368:	2330      	movs	r3, #48	; 0x30
   1536a:	3e01      	subs	r6, #1
   1536c:	7033      	strb	r3, [r6, #0]
   1536e:	9b04      	ldr	r3, [sp, #16]
   15370:	1b9b      	subs	r3, r3, r6
   15372:	6123      	str	r3, [r4, #16]
   15374:	9b07      	ldr	r3, [sp, #28]
   15376:	aa09      	add	r2, sp, #36	; 0x24
   15378:	9300      	str	r3, [sp, #0]
   1537a:	0021      	movs	r1, r4
   1537c:	9b06      	ldr	r3, [sp, #24]
   1537e:	9805      	ldr	r0, [sp, #20]
   15380:	f7ff fe82 	bl	15088 <_printf_common>
   15384:	1c43      	adds	r3, r0, #1
   15386:	d1b3      	bne.n	152f0 <_printf_i+0x18c>
   15388:	2001      	movs	r0, #1
   1538a:	4240      	negs	r0, r0
   1538c:	b00b      	add	sp, #44	; 0x2c
   1538e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15390:	0001754a 	.word	0x0001754a
   15394:	00017539 	.word	0x00017539

00015398 <iprintf>:
   15398:	b40f      	push	{r0, r1, r2, r3}
   1539a:	4b0b      	ldr	r3, [pc, #44]	; (153c8 <iprintf+0x30>)
   1539c:	b513      	push	{r0, r1, r4, lr}
   1539e:	681c      	ldr	r4, [r3, #0]
   153a0:	2c00      	cmp	r4, #0
   153a2:	d005      	beq.n	153b0 <iprintf+0x18>
   153a4:	69a3      	ldr	r3, [r4, #24]
   153a6:	2b00      	cmp	r3, #0
   153a8:	d102      	bne.n	153b0 <iprintf+0x18>
   153aa:	0020      	movs	r0, r4
   153ac:	f000 fbaa 	bl	15b04 <__sinit>
   153b0:	ab05      	add	r3, sp, #20
   153b2:	9a04      	ldr	r2, [sp, #16]
   153b4:	68a1      	ldr	r1, [r4, #8]
   153b6:	0020      	movs	r0, r4
   153b8:	9301      	str	r3, [sp, #4]
   153ba:	f7ff fd49 	bl	14e50 <_vfiprintf_r>
   153be:	bc16      	pop	{r1, r2, r4}
   153c0:	bc08      	pop	{r3}
   153c2:	b004      	add	sp, #16
   153c4:	4718      	bx	r3
   153c6:	46c0      	nop			; (mov r8, r8)
   153c8:	20000028 	.word	0x20000028

000153cc <putchar>:
   153cc:	4b08      	ldr	r3, [pc, #32]	; (153f0 <putchar+0x24>)
   153ce:	b570      	push	{r4, r5, r6, lr}
   153d0:	681c      	ldr	r4, [r3, #0]
   153d2:	0005      	movs	r5, r0
   153d4:	2c00      	cmp	r4, #0
   153d6:	d005      	beq.n	153e4 <putchar+0x18>
   153d8:	69a3      	ldr	r3, [r4, #24]
   153da:	2b00      	cmp	r3, #0
   153dc:	d102      	bne.n	153e4 <putchar+0x18>
   153de:	0020      	movs	r0, r4
   153e0:	f000 fb90 	bl	15b04 <__sinit>
   153e4:	0029      	movs	r1, r5
   153e6:	68a2      	ldr	r2, [r4, #8]
   153e8:	0020      	movs	r0, r4
   153ea:	f000 fee9 	bl	161c0 <_putc_r>
   153ee:	bd70      	pop	{r4, r5, r6, pc}
   153f0:	20000028 	.word	0x20000028

000153f4 <_puts_r>:
   153f4:	b570      	push	{r4, r5, r6, lr}
   153f6:	0005      	movs	r5, r0
   153f8:	000e      	movs	r6, r1
   153fa:	2800      	cmp	r0, #0
   153fc:	d004      	beq.n	15408 <_puts_r+0x14>
   153fe:	6983      	ldr	r3, [r0, #24]
   15400:	2b00      	cmp	r3, #0
   15402:	d101      	bne.n	15408 <_puts_r+0x14>
   15404:	f000 fb7e 	bl	15b04 <__sinit>
   15408:	69ab      	ldr	r3, [r5, #24]
   1540a:	68ac      	ldr	r4, [r5, #8]
   1540c:	2b00      	cmp	r3, #0
   1540e:	d102      	bne.n	15416 <_puts_r+0x22>
   15410:	0028      	movs	r0, r5
   15412:	f000 fb77 	bl	15b04 <__sinit>
   15416:	4b24      	ldr	r3, [pc, #144]	; (154a8 <_puts_r+0xb4>)
   15418:	429c      	cmp	r4, r3
   1541a:	d10f      	bne.n	1543c <_puts_r+0x48>
   1541c:	686c      	ldr	r4, [r5, #4]
   1541e:	89a3      	ldrh	r3, [r4, #12]
   15420:	071b      	lsls	r3, r3, #28
   15422:	d502      	bpl.n	1542a <_puts_r+0x36>
   15424:	6923      	ldr	r3, [r4, #16]
   15426:	2b00      	cmp	r3, #0
   15428:	d120      	bne.n	1546c <_puts_r+0x78>
   1542a:	0021      	movs	r1, r4
   1542c:	0028      	movs	r0, r5
   1542e:	f000 f9f3 	bl	15818 <__swsetup_r>
   15432:	2800      	cmp	r0, #0
   15434:	d01a      	beq.n	1546c <_puts_r+0x78>
   15436:	2001      	movs	r0, #1
   15438:	4240      	negs	r0, r0
   1543a:	bd70      	pop	{r4, r5, r6, pc}
   1543c:	4b1b      	ldr	r3, [pc, #108]	; (154ac <_puts_r+0xb8>)
   1543e:	429c      	cmp	r4, r3
   15440:	d101      	bne.n	15446 <_puts_r+0x52>
   15442:	68ac      	ldr	r4, [r5, #8]
   15444:	e7eb      	b.n	1541e <_puts_r+0x2a>
   15446:	4b1a      	ldr	r3, [pc, #104]	; (154b0 <_puts_r+0xbc>)
   15448:	429c      	cmp	r4, r3
   1544a:	d1e8      	bne.n	1541e <_puts_r+0x2a>
   1544c:	68ec      	ldr	r4, [r5, #12]
   1544e:	e7e6      	b.n	1541e <_puts_r+0x2a>
   15450:	3b01      	subs	r3, #1
   15452:	3601      	adds	r6, #1
   15454:	60a3      	str	r3, [r4, #8]
   15456:	2b00      	cmp	r3, #0
   15458:	da04      	bge.n	15464 <_puts_r+0x70>
   1545a:	69a2      	ldr	r2, [r4, #24]
   1545c:	4293      	cmp	r3, r2
   1545e:	db16      	blt.n	1548e <_puts_r+0x9a>
   15460:	290a      	cmp	r1, #10
   15462:	d014      	beq.n	1548e <_puts_r+0x9a>
   15464:	6823      	ldr	r3, [r4, #0]
   15466:	1c5a      	adds	r2, r3, #1
   15468:	6022      	str	r2, [r4, #0]
   1546a:	7019      	strb	r1, [r3, #0]
   1546c:	7831      	ldrb	r1, [r6, #0]
   1546e:	68a3      	ldr	r3, [r4, #8]
   15470:	2900      	cmp	r1, #0
   15472:	d1ed      	bne.n	15450 <_puts_r+0x5c>
   15474:	3b01      	subs	r3, #1
   15476:	60a3      	str	r3, [r4, #8]
   15478:	2b00      	cmp	r3, #0
   1547a:	da0f      	bge.n	1549c <_puts_r+0xa8>
   1547c:	0022      	movs	r2, r4
   1547e:	310a      	adds	r1, #10
   15480:	0028      	movs	r0, r5
   15482:	f000 f973 	bl	1576c <__swbuf_r>
   15486:	1c43      	adds	r3, r0, #1
   15488:	d0d5      	beq.n	15436 <_puts_r+0x42>
   1548a:	200a      	movs	r0, #10
   1548c:	e7d5      	b.n	1543a <_puts_r+0x46>
   1548e:	0022      	movs	r2, r4
   15490:	0028      	movs	r0, r5
   15492:	f000 f96b 	bl	1576c <__swbuf_r>
   15496:	1c43      	adds	r3, r0, #1
   15498:	d1e8      	bne.n	1546c <_puts_r+0x78>
   1549a:	e7cc      	b.n	15436 <_puts_r+0x42>
   1549c:	200a      	movs	r0, #10
   1549e:	6823      	ldr	r3, [r4, #0]
   154a0:	1c5a      	adds	r2, r3, #1
   154a2:	6022      	str	r2, [r4, #0]
   154a4:	7018      	strb	r0, [r3, #0]
   154a6:	e7c8      	b.n	1543a <_puts_r+0x46>
   154a8:	0001757c 	.word	0x0001757c
   154ac:	0001759c 	.word	0x0001759c
   154b0:	0001755c 	.word	0x0001755c

000154b4 <puts>:
   154b4:	b510      	push	{r4, lr}
   154b6:	4b03      	ldr	r3, [pc, #12]	; (154c4 <puts+0x10>)
   154b8:	0001      	movs	r1, r0
   154ba:	6818      	ldr	r0, [r3, #0]
   154bc:	f7ff ff9a 	bl	153f4 <_puts_r>
   154c0:	bd10      	pop	{r4, pc}
   154c2:	46c0      	nop			; (mov r8, r8)
   154c4:	20000028 	.word	0x20000028

000154c8 <srand>:
   154c8:	4b10      	ldr	r3, [pc, #64]	; (1550c <srand+0x44>)
   154ca:	b570      	push	{r4, r5, r6, lr}
   154cc:	681c      	ldr	r4, [r3, #0]
   154ce:	0005      	movs	r5, r0
   154d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   154d2:	2b00      	cmp	r3, #0
   154d4:	d115      	bne.n	15502 <srand+0x3a>
   154d6:	2018      	movs	r0, #24
   154d8:	f000 fc16 	bl	15d08 <malloc>
   154dc:	4b0c      	ldr	r3, [pc, #48]	; (15510 <srand+0x48>)
   154de:	63a0      	str	r0, [r4, #56]	; 0x38
   154e0:	8003      	strh	r3, [r0, #0]
   154e2:	4b0c      	ldr	r3, [pc, #48]	; (15514 <srand+0x4c>)
   154e4:	2201      	movs	r2, #1
   154e6:	8043      	strh	r3, [r0, #2]
   154e8:	4b0b      	ldr	r3, [pc, #44]	; (15518 <srand+0x50>)
   154ea:	8083      	strh	r3, [r0, #4]
   154ec:	4b0b      	ldr	r3, [pc, #44]	; (1551c <srand+0x54>)
   154ee:	80c3      	strh	r3, [r0, #6]
   154f0:	4b0b      	ldr	r3, [pc, #44]	; (15520 <srand+0x58>)
   154f2:	8103      	strh	r3, [r0, #8]
   154f4:	2305      	movs	r3, #5
   154f6:	8143      	strh	r3, [r0, #10]
   154f8:	3306      	adds	r3, #6
   154fa:	8183      	strh	r3, [r0, #12]
   154fc:	2300      	movs	r3, #0
   154fe:	6102      	str	r2, [r0, #16]
   15500:	6143      	str	r3, [r0, #20]
   15502:	2200      	movs	r2, #0
   15504:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   15506:	611d      	str	r5, [r3, #16]
   15508:	615a      	str	r2, [r3, #20]
   1550a:	bd70      	pop	{r4, r5, r6, pc}
   1550c:	20000028 	.word	0x20000028
   15510:	0000330e 	.word	0x0000330e
   15514:	ffffabcd 	.word	0xffffabcd
   15518:	00001234 	.word	0x00001234
   1551c:	ffffe66d 	.word	0xffffe66d
   15520:	ffffdeec 	.word	0xffffdeec

00015524 <rand>:
   15524:	4b15      	ldr	r3, [pc, #84]	; (1557c <rand+0x58>)
   15526:	b510      	push	{r4, lr}
   15528:	681c      	ldr	r4, [r3, #0]
   1552a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1552c:	2b00      	cmp	r3, #0
   1552e:	d115      	bne.n	1555c <rand+0x38>
   15530:	2018      	movs	r0, #24
   15532:	f000 fbe9 	bl	15d08 <malloc>
   15536:	4b12      	ldr	r3, [pc, #72]	; (15580 <rand+0x5c>)
   15538:	63a0      	str	r0, [r4, #56]	; 0x38
   1553a:	8003      	strh	r3, [r0, #0]
   1553c:	4b11      	ldr	r3, [pc, #68]	; (15584 <rand+0x60>)
   1553e:	2201      	movs	r2, #1
   15540:	8043      	strh	r3, [r0, #2]
   15542:	4b11      	ldr	r3, [pc, #68]	; (15588 <rand+0x64>)
   15544:	8083      	strh	r3, [r0, #4]
   15546:	4b11      	ldr	r3, [pc, #68]	; (1558c <rand+0x68>)
   15548:	80c3      	strh	r3, [r0, #6]
   1554a:	4b11      	ldr	r3, [pc, #68]	; (15590 <rand+0x6c>)
   1554c:	8103      	strh	r3, [r0, #8]
   1554e:	2305      	movs	r3, #5
   15550:	8143      	strh	r3, [r0, #10]
   15552:	3306      	adds	r3, #6
   15554:	8183      	strh	r3, [r0, #12]
   15556:	2300      	movs	r3, #0
   15558:	6102      	str	r2, [r0, #16]
   1555a:	6143      	str	r3, [r0, #20]
   1555c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   1555e:	4a0d      	ldr	r2, [pc, #52]	; (15594 <rand+0x70>)
   15560:	6920      	ldr	r0, [r4, #16]
   15562:	6961      	ldr	r1, [r4, #20]
   15564:	4b0c      	ldr	r3, [pc, #48]	; (15598 <rand+0x74>)
   15566:	f7fc fcd9 	bl	11f1c <__aeabi_lmul>
   1556a:	2201      	movs	r2, #1
   1556c:	2300      	movs	r3, #0
   1556e:	1880      	adds	r0, r0, r2
   15570:	4159      	adcs	r1, r3
   15572:	6120      	str	r0, [r4, #16]
   15574:	6161      	str	r1, [r4, #20]
   15576:	0048      	lsls	r0, r1, #1
   15578:	0840      	lsrs	r0, r0, #1
   1557a:	bd10      	pop	{r4, pc}
   1557c:	20000028 	.word	0x20000028
   15580:	0000330e 	.word	0x0000330e
   15584:	ffffabcd 	.word	0xffffabcd
   15588:	00001234 	.word	0x00001234
   1558c:	ffffe66d 	.word	0xffffe66d
   15590:	ffffdeec 	.word	0xffffdeec
   15594:	4c957f2d 	.word	0x4c957f2d
   15598:	5851f42d 	.word	0x5851f42d

0001559c <setbuf>:
   1559c:	424a      	negs	r2, r1
   1559e:	414a      	adcs	r2, r1
   155a0:	2380      	movs	r3, #128	; 0x80
   155a2:	b510      	push	{r4, lr}
   155a4:	0052      	lsls	r2, r2, #1
   155a6:	00db      	lsls	r3, r3, #3
   155a8:	f000 f802 	bl	155b0 <setvbuf>
   155ac:	bd10      	pop	{r4, pc}
   155ae:	Address 0x000155ae is out of bounds.


000155b0 <setvbuf>:
   155b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   155b2:	001d      	movs	r5, r3
   155b4:	4b4f      	ldr	r3, [pc, #316]	; (156f4 <setvbuf+0x144>)
   155b6:	b085      	sub	sp, #20
   155b8:	681e      	ldr	r6, [r3, #0]
   155ba:	0004      	movs	r4, r0
   155bc:	000f      	movs	r7, r1
   155be:	9200      	str	r2, [sp, #0]
   155c0:	2e00      	cmp	r6, #0
   155c2:	d005      	beq.n	155d0 <setvbuf+0x20>
   155c4:	69b3      	ldr	r3, [r6, #24]
   155c6:	2b00      	cmp	r3, #0
   155c8:	d102      	bne.n	155d0 <setvbuf+0x20>
   155ca:	0030      	movs	r0, r6
   155cc:	f000 fa9a 	bl	15b04 <__sinit>
   155d0:	4b49      	ldr	r3, [pc, #292]	; (156f8 <setvbuf+0x148>)
   155d2:	429c      	cmp	r4, r3
   155d4:	d150      	bne.n	15678 <setvbuf+0xc8>
   155d6:	6874      	ldr	r4, [r6, #4]
   155d8:	9b00      	ldr	r3, [sp, #0]
   155da:	2b02      	cmp	r3, #2
   155dc:	d005      	beq.n	155ea <setvbuf+0x3a>
   155de:	2b01      	cmp	r3, #1
   155e0:	d900      	bls.n	155e4 <setvbuf+0x34>
   155e2:	e084      	b.n	156ee <setvbuf+0x13e>
   155e4:	2d00      	cmp	r5, #0
   155e6:	da00      	bge.n	155ea <setvbuf+0x3a>
   155e8:	e081      	b.n	156ee <setvbuf+0x13e>
   155ea:	0021      	movs	r1, r4
   155ec:	0030      	movs	r0, r6
   155ee:	f000 fa1b 	bl	15a28 <_fflush_r>
   155f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   155f4:	2900      	cmp	r1, #0
   155f6:	d008      	beq.n	1560a <setvbuf+0x5a>
   155f8:	0023      	movs	r3, r4
   155fa:	3344      	adds	r3, #68	; 0x44
   155fc:	4299      	cmp	r1, r3
   155fe:	d002      	beq.n	15606 <setvbuf+0x56>
   15600:	0030      	movs	r0, r6
   15602:	f000 fba9 	bl	15d58 <_free_r>
   15606:	2300      	movs	r3, #0
   15608:	6363      	str	r3, [r4, #52]	; 0x34
   1560a:	2300      	movs	r3, #0
   1560c:	61a3      	str	r3, [r4, #24]
   1560e:	6063      	str	r3, [r4, #4]
   15610:	89a3      	ldrh	r3, [r4, #12]
   15612:	061b      	lsls	r3, r3, #24
   15614:	d503      	bpl.n	1561e <setvbuf+0x6e>
   15616:	6921      	ldr	r1, [r4, #16]
   15618:	0030      	movs	r0, r6
   1561a:	f000 fb9d 	bl	15d58 <_free_r>
   1561e:	89a3      	ldrh	r3, [r4, #12]
   15620:	4a36      	ldr	r2, [pc, #216]	; (156fc <setvbuf+0x14c>)
   15622:	4013      	ands	r3, r2
   15624:	81a3      	strh	r3, [r4, #12]
   15626:	9b00      	ldr	r3, [sp, #0]
   15628:	2b02      	cmp	r3, #2
   1562a:	d05a      	beq.n	156e2 <setvbuf+0x132>
   1562c:	ab03      	add	r3, sp, #12
   1562e:	aa02      	add	r2, sp, #8
   15630:	0021      	movs	r1, r4
   15632:	0030      	movs	r0, r6
   15634:	f000 fafc 	bl	15c30 <__swhatbuf_r>
   15638:	89a3      	ldrh	r3, [r4, #12]
   1563a:	4318      	orrs	r0, r3
   1563c:	81a0      	strh	r0, [r4, #12]
   1563e:	2d00      	cmp	r5, #0
   15640:	d124      	bne.n	1568c <setvbuf+0xdc>
   15642:	9d02      	ldr	r5, [sp, #8]
   15644:	0028      	movs	r0, r5
   15646:	f000 fb5f 	bl	15d08 <malloc>
   1564a:	9501      	str	r5, [sp, #4]
   1564c:	1e07      	subs	r7, r0, #0
   1564e:	d142      	bne.n	156d6 <setvbuf+0x126>
   15650:	9b02      	ldr	r3, [sp, #8]
   15652:	9301      	str	r3, [sp, #4]
   15654:	42ab      	cmp	r3, r5
   15656:	d139      	bne.n	156cc <setvbuf+0x11c>
   15658:	2001      	movs	r0, #1
   1565a:	4240      	negs	r0, r0
   1565c:	2302      	movs	r3, #2
   1565e:	89a2      	ldrh	r2, [r4, #12]
   15660:	4313      	orrs	r3, r2
   15662:	81a3      	strh	r3, [r4, #12]
   15664:	2300      	movs	r3, #0
   15666:	60a3      	str	r3, [r4, #8]
   15668:	0023      	movs	r3, r4
   1566a:	3347      	adds	r3, #71	; 0x47
   1566c:	6023      	str	r3, [r4, #0]
   1566e:	6123      	str	r3, [r4, #16]
   15670:	2301      	movs	r3, #1
   15672:	6163      	str	r3, [r4, #20]
   15674:	b005      	add	sp, #20
   15676:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15678:	4b21      	ldr	r3, [pc, #132]	; (15700 <setvbuf+0x150>)
   1567a:	429c      	cmp	r4, r3
   1567c:	d101      	bne.n	15682 <setvbuf+0xd2>
   1567e:	68b4      	ldr	r4, [r6, #8]
   15680:	e7aa      	b.n	155d8 <setvbuf+0x28>
   15682:	4b20      	ldr	r3, [pc, #128]	; (15704 <setvbuf+0x154>)
   15684:	429c      	cmp	r4, r3
   15686:	d1a7      	bne.n	155d8 <setvbuf+0x28>
   15688:	68f4      	ldr	r4, [r6, #12]
   1568a:	e7a5      	b.n	155d8 <setvbuf+0x28>
   1568c:	2f00      	cmp	r7, #0
   1568e:	d0d9      	beq.n	15644 <setvbuf+0x94>
   15690:	69b3      	ldr	r3, [r6, #24]
   15692:	2b00      	cmp	r3, #0
   15694:	d102      	bne.n	1569c <setvbuf+0xec>
   15696:	0030      	movs	r0, r6
   15698:	f000 fa34 	bl	15b04 <__sinit>
   1569c:	9b00      	ldr	r3, [sp, #0]
   1569e:	2b01      	cmp	r3, #1
   156a0:	d103      	bne.n	156aa <setvbuf+0xfa>
   156a2:	89a3      	ldrh	r3, [r4, #12]
   156a4:	9a00      	ldr	r2, [sp, #0]
   156a6:	431a      	orrs	r2, r3
   156a8:	81a2      	strh	r2, [r4, #12]
   156aa:	2008      	movs	r0, #8
   156ac:	89a3      	ldrh	r3, [r4, #12]
   156ae:	6027      	str	r7, [r4, #0]
   156b0:	6127      	str	r7, [r4, #16]
   156b2:	6165      	str	r5, [r4, #20]
   156b4:	4018      	ands	r0, r3
   156b6:	d018      	beq.n	156ea <setvbuf+0x13a>
   156b8:	2001      	movs	r0, #1
   156ba:	4018      	ands	r0, r3
   156bc:	2300      	movs	r3, #0
   156be:	4298      	cmp	r0, r3
   156c0:	d011      	beq.n	156e6 <setvbuf+0x136>
   156c2:	426d      	negs	r5, r5
   156c4:	60a3      	str	r3, [r4, #8]
   156c6:	61a5      	str	r5, [r4, #24]
   156c8:	0018      	movs	r0, r3
   156ca:	e7d3      	b.n	15674 <setvbuf+0xc4>
   156cc:	9801      	ldr	r0, [sp, #4]
   156ce:	f000 fb1b 	bl	15d08 <malloc>
   156d2:	1e07      	subs	r7, r0, #0
   156d4:	d0c0      	beq.n	15658 <setvbuf+0xa8>
   156d6:	2380      	movs	r3, #128	; 0x80
   156d8:	89a2      	ldrh	r2, [r4, #12]
   156da:	9d01      	ldr	r5, [sp, #4]
   156dc:	4313      	orrs	r3, r2
   156de:	81a3      	strh	r3, [r4, #12]
   156e0:	e7d6      	b.n	15690 <setvbuf+0xe0>
   156e2:	2000      	movs	r0, #0
   156e4:	e7ba      	b.n	1565c <setvbuf+0xac>
   156e6:	60a5      	str	r5, [r4, #8]
   156e8:	e7c4      	b.n	15674 <setvbuf+0xc4>
   156ea:	60a0      	str	r0, [r4, #8]
   156ec:	e7c2      	b.n	15674 <setvbuf+0xc4>
   156ee:	2001      	movs	r0, #1
   156f0:	4240      	negs	r0, r0
   156f2:	e7bf      	b.n	15674 <setvbuf+0xc4>
   156f4:	20000028 	.word	0x20000028
   156f8:	0001757c 	.word	0x0001757c
   156fc:	fffff35c 	.word	0xfffff35c
   15700:	0001759c 	.word	0x0001759c
   15704:	0001755c 	.word	0x0001755c

00015708 <sniprintf>:
   15708:	b40c      	push	{r2, r3}
   1570a:	b530      	push	{r4, r5, lr}
   1570c:	4b16      	ldr	r3, [pc, #88]	; (15768 <sniprintf+0x60>)
   1570e:	b09d      	sub	sp, #116	; 0x74
   15710:	1e0c      	subs	r4, r1, #0
   15712:	681d      	ldr	r5, [r3, #0]
   15714:	da08      	bge.n	15728 <sniprintf+0x20>
   15716:	238b      	movs	r3, #139	; 0x8b
   15718:	2001      	movs	r0, #1
   1571a:	602b      	str	r3, [r5, #0]
   1571c:	4240      	negs	r0, r0
   1571e:	b01d      	add	sp, #116	; 0x74
   15720:	bc30      	pop	{r4, r5}
   15722:	bc08      	pop	{r3}
   15724:	b002      	add	sp, #8
   15726:	4718      	bx	r3
   15728:	2382      	movs	r3, #130	; 0x82
   1572a:	a902      	add	r1, sp, #8
   1572c:	009b      	lsls	r3, r3, #2
   1572e:	818b      	strh	r3, [r1, #12]
   15730:	2300      	movs	r3, #0
   15732:	9002      	str	r0, [sp, #8]
   15734:	6108      	str	r0, [r1, #16]
   15736:	429c      	cmp	r4, r3
   15738:	d000      	beq.n	1573c <sniprintf+0x34>
   1573a:	1e63      	subs	r3, r4, #1
   1573c:	608b      	str	r3, [r1, #8]
   1573e:	614b      	str	r3, [r1, #20]
   15740:	2301      	movs	r3, #1
   15742:	425b      	negs	r3, r3
   15744:	81cb      	strh	r3, [r1, #14]
   15746:	9a20      	ldr	r2, [sp, #128]	; 0x80
   15748:	ab21      	add	r3, sp, #132	; 0x84
   1574a:	0028      	movs	r0, r5
   1574c:	9301      	str	r3, [sp, #4]
   1574e:	f000 fc33 	bl	15fb8 <_svfiprintf_r>
   15752:	1c43      	adds	r3, r0, #1
   15754:	da01      	bge.n	1575a <sniprintf+0x52>
   15756:	238b      	movs	r3, #139	; 0x8b
   15758:	602b      	str	r3, [r5, #0]
   1575a:	2c00      	cmp	r4, #0
   1575c:	d0df      	beq.n	1571e <sniprintf+0x16>
   1575e:	2300      	movs	r3, #0
   15760:	9a02      	ldr	r2, [sp, #8]
   15762:	7013      	strb	r3, [r2, #0]
   15764:	e7db      	b.n	1571e <sniprintf+0x16>
   15766:	46c0      	nop			; (mov r8, r8)
   15768:	20000028 	.word	0x20000028

0001576c <__swbuf_r>:
   1576c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1576e:	0005      	movs	r5, r0
   15770:	000e      	movs	r6, r1
   15772:	0014      	movs	r4, r2
   15774:	2800      	cmp	r0, #0
   15776:	d004      	beq.n	15782 <__swbuf_r+0x16>
   15778:	6983      	ldr	r3, [r0, #24]
   1577a:	2b00      	cmp	r3, #0
   1577c:	d101      	bne.n	15782 <__swbuf_r+0x16>
   1577e:	f000 f9c1 	bl	15b04 <__sinit>
   15782:	4b22      	ldr	r3, [pc, #136]	; (1580c <__swbuf_r+0xa0>)
   15784:	429c      	cmp	r4, r3
   15786:	d12d      	bne.n	157e4 <__swbuf_r+0x78>
   15788:	686c      	ldr	r4, [r5, #4]
   1578a:	69a3      	ldr	r3, [r4, #24]
   1578c:	60a3      	str	r3, [r4, #8]
   1578e:	89a3      	ldrh	r3, [r4, #12]
   15790:	071b      	lsls	r3, r3, #28
   15792:	d531      	bpl.n	157f8 <__swbuf_r+0x8c>
   15794:	6923      	ldr	r3, [r4, #16]
   15796:	2b00      	cmp	r3, #0
   15798:	d02e      	beq.n	157f8 <__swbuf_r+0x8c>
   1579a:	6823      	ldr	r3, [r4, #0]
   1579c:	6922      	ldr	r2, [r4, #16]
   1579e:	b2f7      	uxtb	r7, r6
   157a0:	1a98      	subs	r0, r3, r2
   157a2:	6963      	ldr	r3, [r4, #20]
   157a4:	b2f6      	uxtb	r6, r6
   157a6:	4298      	cmp	r0, r3
   157a8:	db05      	blt.n	157b6 <__swbuf_r+0x4a>
   157aa:	0021      	movs	r1, r4
   157ac:	0028      	movs	r0, r5
   157ae:	f000 f93b 	bl	15a28 <_fflush_r>
   157b2:	2800      	cmp	r0, #0
   157b4:	d126      	bne.n	15804 <__swbuf_r+0x98>
   157b6:	68a3      	ldr	r3, [r4, #8]
   157b8:	3001      	adds	r0, #1
   157ba:	3b01      	subs	r3, #1
   157bc:	60a3      	str	r3, [r4, #8]
   157be:	6823      	ldr	r3, [r4, #0]
   157c0:	1c5a      	adds	r2, r3, #1
   157c2:	6022      	str	r2, [r4, #0]
   157c4:	701f      	strb	r7, [r3, #0]
   157c6:	6963      	ldr	r3, [r4, #20]
   157c8:	4298      	cmp	r0, r3
   157ca:	d004      	beq.n	157d6 <__swbuf_r+0x6a>
   157cc:	89a3      	ldrh	r3, [r4, #12]
   157ce:	07db      	lsls	r3, r3, #31
   157d0:	d51a      	bpl.n	15808 <__swbuf_r+0x9c>
   157d2:	2e0a      	cmp	r6, #10
   157d4:	d118      	bne.n	15808 <__swbuf_r+0x9c>
   157d6:	0021      	movs	r1, r4
   157d8:	0028      	movs	r0, r5
   157da:	f000 f925 	bl	15a28 <_fflush_r>
   157de:	2800      	cmp	r0, #0
   157e0:	d012      	beq.n	15808 <__swbuf_r+0x9c>
   157e2:	e00f      	b.n	15804 <__swbuf_r+0x98>
   157e4:	4b0a      	ldr	r3, [pc, #40]	; (15810 <__swbuf_r+0xa4>)
   157e6:	429c      	cmp	r4, r3
   157e8:	d101      	bne.n	157ee <__swbuf_r+0x82>
   157ea:	68ac      	ldr	r4, [r5, #8]
   157ec:	e7cd      	b.n	1578a <__swbuf_r+0x1e>
   157ee:	4b09      	ldr	r3, [pc, #36]	; (15814 <__swbuf_r+0xa8>)
   157f0:	429c      	cmp	r4, r3
   157f2:	d1ca      	bne.n	1578a <__swbuf_r+0x1e>
   157f4:	68ec      	ldr	r4, [r5, #12]
   157f6:	e7c8      	b.n	1578a <__swbuf_r+0x1e>
   157f8:	0021      	movs	r1, r4
   157fa:	0028      	movs	r0, r5
   157fc:	f000 f80c 	bl	15818 <__swsetup_r>
   15800:	2800      	cmp	r0, #0
   15802:	d0ca      	beq.n	1579a <__swbuf_r+0x2e>
   15804:	2601      	movs	r6, #1
   15806:	4276      	negs	r6, r6
   15808:	0030      	movs	r0, r6
   1580a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1580c:	0001757c 	.word	0x0001757c
   15810:	0001759c 	.word	0x0001759c
   15814:	0001755c 	.word	0x0001755c

00015818 <__swsetup_r>:
   15818:	4b36      	ldr	r3, [pc, #216]	; (158f4 <__swsetup_r+0xdc>)
   1581a:	b570      	push	{r4, r5, r6, lr}
   1581c:	681d      	ldr	r5, [r3, #0]
   1581e:	0006      	movs	r6, r0
   15820:	000c      	movs	r4, r1
   15822:	2d00      	cmp	r5, #0
   15824:	d005      	beq.n	15832 <__swsetup_r+0x1a>
   15826:	69ab      	ldr	r3, [r5, #24]
   15828:	2b00      	cmp	r3, #0
   1582a:	d102      	bne.n	15832 <__swsetup_r+0x1a>
   1582c:	0028      	movs	r0, r5
   1582e:	f000 f969 	bl	15b04 <__sinit>
   15832:	4b31      	ldr	r3, [pc, #196]	; (158f8 <__swsetup_r+0xe0>)
   15834:	429c      	cmp	r4, r3
   15836:	d10f      	bne.n	15858 <__swsetup_r+0x40>
   15838:	686c      	ldr	r4, [r5, #4]
   1583a:	230c      	movs	r3, #12
   1583c:	5ee2      	ldrsh	r2, [r4, r3]
   1583e:	b293      	uxth	r3, r2
   15840:	0719      	lsls	r1, r3, #28
   15842:	d42d      	bmi.n	158a0 <__swsetup_r+0x88>
   15844:	06d9      	lsls	r1, r3, #27
   15846:	d411      	bmi.n	1586c <__swsetup_r+0x54>
   15848:	2309      	movs	r3, #9
   1584a:	2001      	movs	r0, #1
   1584c:	6033      	str	r3, [r6, #0]
   1584e:	3337      	adds	r3, #55	; 0x37
   15850:	4313      	orrs	r3, r2
   15852:	81a3      	strh	r3, [r4, #12]
   15854:	4240      	negs	r0, r0
   15856:	bd70      	pop	{r4, r5, r6, pc}
   15858:	4b28      	ldr	r3, [pc, #160]	; (158fc <__swsetup_r+0xe4>)
   1585a:	429c      	cmp	r4, r3
   1585c:	d101      	bne.n	15862 <__swsetup_r+0x4a>
   1585e:	68ac      	ldr	r4, [r5, #8]
   15860:	e7eb      	b.n	1583a <__swsetup_r+0x22>
   15862:	4b27      	ldr	r3, [pc, #156]	; (15900 <__swsetup_r+0xe8>)
   15864:	429c      	cmp	r4, r3
   15866:	d1e8      	bne.n	1583a <__swsetup_r+0x22>
   15868:	68ec      	ldr	r4, [r5, #12]
   1586a:	e7e6      	b.n	1583a <__swsetup_r+0x22>
   1586c:	075b      	lsls	r3, r3, #29
   1586e:	d513      	bpl.n	15898 <__swsetup_r+0x80>
   15870:	6b61      	ldr	r1, [r4, #52]	; 0x34
   15872:	2900      	cmp	r1, #0
   15874:	d008      	beq.n	15888 <__swsetup_r+0x70>
   15876:	0023      	movs	r3, r4
   15878:	3344      	adds	r3, #68	; 0x44
   1587a:	4299      	cmp	r1, r3
   1587c:	d002      	beq.n	15884 <__swsetup_r+0x6c>
   1587e:	0030      	movs	r0, r6
   15880:	f000 fa6a 	bl	15d58 <_free_r>
   15884:	2300      	movs	r3, #0
   15886:	6363      	str	r3, [r4, #52]	; 0x34
   15888:	2224      	movs	r2, #36	; 0x24
   1588a:	89a3      	ldrh	r3, [r4, #12]
   1588c:	4393      	bics	r3, r2
   1588e:	81a3      	strh	r3, [r4, #12]
   15890:	2300      	movs	r3, #0
   15892:	6063      	str	r3, [r4, #4]
   15894:	6923      	ldr	r3, [r4, #16]
   15896:	6023      	str	r3, [r4, #0]
   15898:	2308      	movs	r3, #8
   1589a:	89a2      	ldrh	r2, [r4, #12]
   1589c:	4313      	orrs	r3, r2
   1589e:	81a3      	strh	r3, [r4, #12]
   158a0:	6923      	ldr	r3, [r4, #16]
   158a2:	2b00      	cmp	r3, #0
   158a4:	d10b      	bne.n	158be <__swsetup_r+0xa6>
   158a6:	21a0      	movs	r1, #160	; 0xa0
   158a8:	2280      	movs	r2, #128	; 0x80
   158aa:	89a3      	ldrh	r3, [r4, #12]
   158ac:	0089      	lsls	r1, r1, #2
   158ae:	0092      	lsls	r2, r2, #2
   158b0:	400b      	ands	r3, r1
   158b2:	4293      	cmp	r3, r2
   158b4:	d003      	beq.n	158be <__swsetup_r+0xa6>
   158b6:	0021      	movs	r1, r4
   158b8:	0030      	movs	r0, r6
   158ba:	f000 f9e1 	bl	15c80 <__smakebuf_r>
   158be:	2301      	movs	r3, #1
   158c0:	89a2      	ldrh	r2, [r4, #12]
   158c2:	4013      	ands	r3, r2
   158c4:	d011      	beq.n	158ea <__swsetup_r+0xd2>
   158c6:	2300      	movs	r3, #0
   158c8:	60a3      	str	r3, [r4, #8]
   158ca:	6963      	ldr	r3, [r4, #20]
   158cc:	425b      	negs	r3, r3
   158ce:	61a3      	str	r3, [r4, #24]
   158d0:	2000      	movs	r0, #0
   158d2:	6923      	ldr	r3, [r4, #16]
   158d4:	4283      	cmp	r3, r0
   158d6:	d1be      	bne.n	15856 <__swsetup_r+0x3e>
   158d8:	230c      	movs	r3, #12
   158da:	5ee2      	ldrsh	r2, [r4, r3]
   158dc:	0613      	lsls	r3, r2, #24
   158de:	d5ba      	bpl.n	15856 <__swsetup_r+0x3e>
   158e0:	2340      	movs	r3, #64	; 0x40
   158e2:	4313      	orrs	r3, r2
   158e4:	81a3      	strh	r3, [r4, #12]
   158e6:	3801      	subs	r0, #1
   158e8:	e7b5      	b.n	15856 <__swsetup_r+0x3e>
   158ea:	0792      	lsls	r2, r2, #30
   158ec:	d400      	bmi.n	158f0 <__swsetup_r+0xd8>
   158ee:	6963      	ldr	r3, [r4, #20]
   158f0:	60a3      	str	r3, [r4, #8]
   158f2:	e7ed      	b.n	158d0 <__swsetup_r+0xb8>
   158f4:	20000028 	.word	0x20000028
   158f8:	0001757c 	.word	0x0001757c
   158fc:	0001759c 	.word	0x0001759c
   15900:	0001755c 	.word	0x0001755c

00015904 <abort>:
   15904:	b510      	push	{r4, lr}
   15906:	2006      	movs	r0, #6
   15908:	f000 fccc 	bl	162a4 <raise>
   1590c:	2001      	movs	r0, #1
   1590e:	f7f1 fc61 	bl	71d4 <_exit>
   15912:	Address 0x00015912 is out of bounds.


00015914 <__sflush_r>:
   15914:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15916:	898a      	ldrh	r2, [r1, #12]
   15918:	0005      	movs	r5, r0
   1591a:	000c      	movs	r4, r1
   1591c:	0713      	lsls	r3, r2, #28
   1591e:	d460      	bmi.n	159e2 <__sflush_r+0xce>
   15920:	684b      	ldr	r3, [r1, #4]
   15922:	2b00      	cmp	r3, #0
   15924:	dc04      	bgt.n	15930 <__sflush_r+0x1c>
   15926:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   15928:	2b00      	cmp	r3, #0
   1592a:	dc01      	bgt.n	15930 <__sflush_r+0x1c>
   1592c:	2000      	movs	r0, #0
   1592e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   15930:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   15932:	2f00      	cmp	r7, #0
   15934:	d0fa      	beq.n	1592c <__sflush_r+0x18>
   15936:	2300      	movs	r3, #0
   15938:	682e      	ldr	r6, [r5, #0]
   1593a:	602b      	str	r3, [r5, #0]
   1593c:	2380      	movs	r3, #128	; 0x80
   1593e:	015b      	lsls	r3, r3, #5
   15940:	401a      	ands	r2, r3
   15942:	d034      	beq.n	159ae <__sflush_r+0x9a>
   15944:	6d60      	ldr	r0, [r4, #84]	; 0x54
   15946:	89a3      	ldrh	r3, [r4, #12]
   15948:	075b      	lsls	r3, r3, #29
   1594a:	d506      	bpl.n	1595a <__sflush_r+0x46>
   1594c:	6863      	ldr	r3, [r4, #4]
   1594e:	1ac0      	subs	r0, r0, r3
   15950:	6b63      	ldr	r3, [r4, #52]	; 0x34
   15952:	2b00      	cmp	r3, #0
   15954:	d001      	beq.n	1595a <__sflush_r+0x46>
   15956:	6c23      	ldr	r3, [r4, #64]	; 0x40
   15958:	1ac0      	subs	r0, r0, r3
   1595a:	0002      	movs	r2, r0
   1595c:	6a21      	ldr	r1, [r4, #32]
   1595e:	2300      	movs	r3, #0
   15960:	0028      	movs	r0, r5
   15962:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   15964:	47b8      	blx	r7
   15966:	89a1      	ldrh	r1, [r4, #12]
   15968:	1c43      	adds	r3, r0, #1
   1596a:	d106      	bne.n	1597a <__sflush_r+0x66>
   1596c:	682b      	ldr	r3, [r5, #0]
   1596e:	2b1d      	cmp	r3, #29
   15970:	d831      	bhi.n	159d6 <__sflush_r+0xc2>
   15972:	4a2c      	ldr	r2, [pc, #176]	; (15a24 <__sflush_r+0x110>)
   15974:	40da      	lsrs	r2, r3
   15976:	07d3      	lsls	r3, r2, #31
   15978:	d52d      	bpl.n	159d6 <__sflush_r+0xc2>
   1597a:	2300      	movs	r3, #0
   1597c:	6063      	str	r3, [r4, #4]
   1597e:	6923      	ldr	r3, [r4, #16]
   15980:	6023      	str	r3, [r4, #0]
   15982:	04cb      	lsls	r3, r1, #19
   15984:	d505      	bpl.n	15992 <__sflush_r+0x7e>
   15986:	1c43      	adds	r3, r0, #1
   15988:	d102      	bne.n	15990 <__sflush_r+0x7c>
   1598a:	682b      	ldr	r3, [r5, #0]
   1598c:	2b00      	cmp	r3, #0
   1598e:	d100      	bne.n	15992 <__sflush_r+0x7e>
   15990:	6560      	str	r0, [r4, #84]	; 0x54
   15992:	6b61      	ldr	r1, [r4, #52]	; 0x34
   15994:	602e      	str	r6, [r5, #0]
   15996:	2900      	cmp	r1, #0
   15998:	d0c8      	beq.n	1592c <__sflush_r+0x18>
   1599a:	0023      	movs	r3, r4
   1599c:	3344      	adds	r3, #68	; 0x44
   1599e:	4299      	cmp	r1, r3
   159a0:	d002      	beq.n	159a8 <__sflush_r+0x94>
   159a2:	0028      	movs	r0, r5
   159a4:	f000 f9d8 	bl	15d58 <_free_r>
   159a8:	2000      	movs	r0, #0
   159aa:	6360      	str	r0, [r4, #52]	; 0x34
   159ac:	e7bf      	b.n	1592e <__sflush_r+0x1a>
   159ae:	2301      	movs	r3, #1
   159b0:	6a21      	ldr	r1, [r4, #32]
   159b2:	0028      	movs	r0, r5
   159b4:	47b8      	blx	r7
   159b6:	1c43      	adds	r3, r0, #1
   159b8:	d1c5      	bne.n	15946 <__sflush_r+0x32>
   159ba:	682b      	ldr	r3, [r5, #0]
   159bc:	2b00      	cmp	r3, #0
   159be:	d0c2      	beq.n	15946 <__sflush_r+0x32>
   159c0:	2b1d      	cmp	r3, #29
   159c2:	d001      	beq.n	159c8 <__sflush_r+0xb4>
   159c4:	2b16      	cmp	r3, #22
   159c6:	d101      	bne.n	159cc <__sflush_r+0xb8>
   159c8:	602e      	str	r6, [r5, #0]
   159ca:	e7af      	b.n	1592c <__sflush_r+0x18>
   159cc:	2340      	movs	r3, #64	; 0x40
   159ce:	89a2      	ldrh	r2, [r4, #12]
   159d0:	4313      	orrs	r3, r2
   159d2:	81a3      	strh	r3, [r4, #12]
   159d4:	e7ab      	b.n	1592e <__sflush_r+0x1a>
   159d6:	2340      	movs	r3, #64	; 0x40
   159d8:	430b      	orrs	r3, r1
   159da:	2001      	movs	r0, #1
   159dc:	81a3      	strh	r3, [r4, #12]
   159de:	4240      	negs	r0, r0
   159e0:	e7a5      	b.n	1592e <__sflush_r+0x1a>
   159e2:	690f      	ldr	r7, [r1, #16]
   159e4:	2f00      	cmp	r7, #0
   159e6:	d0a1      	beq.n	1592c <__sflush_r+0x18>
   159e8:	680b      	ldr	r3, [r1, #0]
   159ea:	600f      	str	r7, [r1, #0]
   159ec:	1bdb      	subs	r3, r3, r7
   159ee:	9301      	str	r3, [sp, #4]
   159f0:	2300      	movs	r3, #0
   159f2:	0792      	lsls	r2, r2, #30
   159f4:	d100      	bne.n	159f8 <__sflush_r+0xe4>
   159f6:	694b      	ldr	r3, [r1, #20]
   159f8:	60a3      	str	r3, [r4, #8]
   159fa:	9b01      	ldr	r3, [sp, #4]
   159fc:	2b00      	cmp	r3, #0
   159fe:	dc00      	bgt.n	15a02 <__sflush_r+0xee>
   15a00:	e794      	b.n	1592c <__sflush_r+0x18>
   15a02:	9b01      	ldr	r3, [sp, #4]
   15a04:	003a      	movs	r2, r7
   15a06:	6a21      	ldr	r1, [r4, #32]
   15a08:	0028      	movs	r0, r5
   15a0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   15a0c:	47b0      	blx	r6
   15a0e:	2800      	cmp	r0, #0
   15a10:	dc03      	bgt.n	15a1a <__sflush_r+0x106>
   15a12:	2340      	movs	r3, #64	; 0x40
   15a14:	89a2      	ldrh	r2, [r4, #12]
   15a16:	4313      	orrs	r3, r2
   15a18:	e7df      	b.n	159da <__sflush_r+0xc6>
   15a1a:	9b01      	ldr	r3, [sp, #4]
   15a1c:	183f      	adds	r7, r7, r0
   15a1e:	1a1b      	subs	r3, r3, r0
   15a20:	9301      	str	r3, [sp, #4]
   15a22:	e7ea      	b.n	159fa <__sflush_r+0xe6>
   15a24:	20400001 	.word	0x20400001

00015a28 <_fflush_r>:
   15a28:	690b      	ldr	r3, [r1, #16]
   15a2a:	b570      	push	{r4, r5, r6, lr}
   15a2c:	0005      	movs	r5, r0
   15a2e:	000c      	movs	r4, r1
   15a30:	2b00      	cmp	r3, #0
   15a32:	d101      	bne.n	15a38 <_fflush_r+0x10>
   15a34:	2000      	movs	r0, #0
   15a36:	bd70      	pop	{r4, r5, r6, pc}
   15a38:	2800      	cmp	r0, #0
   15a3a:	d004      	beq.n	15a46 <_fflush_r+0x1e>
   15a3c:	6983      	ldr	r3, [r0, #24]
   15a3e:	2b00      	cmp	r3, #0
   15a40:	d101      	bne.n	15a46 <_fflush_r+0x1e>
   15a42:	f000 f85f 	bl	15b04 <__sinit>
   15a46:	4b0b      	ldr	r3, [pc, #44]	; (15a74 <_fflush_r+0x4c>)
   15a48:	429c      	cmp	r4, r3
   15a4a:	d109      	bne.n	15a60 <_fflush_r+0x38>
   15a4c:	686c      	ldr	r4, [r5, #4]
   15a4e:	220c      	movs	r2, #12
   15a50:	5ea3      	ldrsh	r3, [r4, r2]
   15a52:	2b00      	cmp	r3, #0
   15a54:	d0ee      	beq.n	15a34 <_fflush_r+0xc>
   15a56:	0021      	movs	r1, r4
   15a58:	0028      	movs	r0, r5
   15a5a:	f7ff ff5b 	bl	15914 <__sflush_r>
   15a5e:	e7ea      	b.n	15a36 <_fflush_r+0xe>
   15a60:	4b05      	ldr	r3, [pc, #20]	; (15a78 <_fflush_r+0x50>)
   15a62:	429c      	cmp	r4, r3
   15a64:	d101      	bne.n	15a6a <_fflush_r+0x42>
   15a66:	68ac      	ldr	r4, [r5, #8]
   15a68:	e7f1      	b.n	15a4e <_fflush_r+0x26>
   15a6a:	4b04      	ldr	r3, [pc, #16]	; (15a7c <_fflush_r+0x54>)
   15a6c:	429c      	cmp	r4, r3
   15a6e:	d1ee      	bne.n	15a4e <_fflush_r+0x26>
   15a70:	68ec      	ldr	r4, [r5, #12]
   15a72:	e7ec      	b.n	15a4e <_fflush_r+0x26>
   15a74:	0001757c 	.word	0x0001757c
   15a78:	0001759c 	.word	0x0001759c
   15a7c:	0001755c 	.word	0x0001755c

00015a80 <_cleanup_r>:
   15a80:	b510      	push	{r4, lr}
   15a82:	4902      	ldr	r1, [pc, #8]	; (15a8c <_cleanup_r+0xc>)
   15a84:	f000 f8b2 	bl	15bec <_fwalk_reent>
   15a88:	bd10      	pop	{r4, pc}
   15a8a:	46c0      	nop			; (mov r8, r8)
   15a8c:	00015a29 	.word	0x00015a29

00015a90 <std.isra.0>:
   15a90:	2300      	movs	r3, #0
   15a92:	b510      	push	{r4, lr}
   15a94:	0004      	movs	r4, r0
   15a96:	6003      	str	r3, [r0, #0]
   15a98:	6043      	str	r3, [r0, #4]
   15a9a:	6083      	str	r3, [r0, #8]
   15a9c:	8181      	strh	r1, [r0, #12]
   15a9e:	6643      	str	r3, [r0, #100]	; 0x64
   15aa0:	81c2      	strh	r2, [r0, #14]
   15aa2:	6103      	str	r3, [r0, #16]
   15aa4:	6143      	str	r3, [r0, #20]
   15aa6:	6183      	str	r3, [r0, #24]
   15aa8:	0019      	movs	r1, r3
   15aaa:	2208      	movs	r2, #8
   15aac:	305c      	adds	r0, #92	; 0x5c
   15aae:	f7ff f99f 	bl	14df0 <memset>
   15ab2:	4b05      	ldr	r3, [pc, #20]	; (15ac8 <std.isra.0+0x38>)
   15ab4:	6224      	str	r4, [r4, #32]
   15ab6:	6263      	str	r3, [r4, #36]	; 0x24
   15ab8:	4b04      	ldr	r3, [pc, #16]	; (15acc <std.isra.0+0x3c>)
   15aba:	62a3      	str	r3, [r4, #40]	; 0x28
   15abc:	4b04      	ldr	r3, [pc, #16]	; (15ad0 <std.isra.0+0x40>)
   15abe:	62e3      	str	r3, [r4, #44]	; 0x2c
   15ac0:	4b04      	ldr	r3, [pc, #16]	; (15ad4 <std.isra.0+0x44>)
   15ac2:	6323      	str	r3, [r4, #48]	; 0x30
   15ac4:	bd10      	pop	{r4, pc}
   15ac6:	46c0      	nop			; (mov r8, r8)
   15ac8:	000162e5 	.word	0x000162e5
   15acc:	0001630d 	.word	0x0001630d
   15ad0:	00016345 	.word	0x00016345
   15ad4:	00016371 	.word	0x00016371

00015ad8 <__sfmoreglue>:
   15ad8:	b570      	push	{r4, r5, r6, lr}
   15ada:	2568      	movs	r5, #104	; 0x68
   15adc:	1e4a      	subs	r2, r1, #1
   15ade:	4355      	muls	r5, r2
   15ae0:	000e      	movs	r6, r1
   15ae2:	0029      	movs	r1, r5
   15ae4:	3174      	adds	r1, #116	; 0x74
   15ae6:	f000 f981 	bl	15dec <_malloc_r>
   15aea:	1e04      	subs	r4, r0, #0
   15aec:	d008      	beq.n	15b00 <__sfmoreglue+0x28>
   15aee:	2100      	movs	r1, #0
   15af0:	002a      	movs	r2, r5
   15af2:	6001      	str	r1, [r0, #0]
   15af4:	6046      	str	r6, [r0, #4]
   15af6:	300c      	adds	r0, #12
   15af8:	60a0      	str	r0, [r4, #8]
   15afa:	3268      	adds	r2, #104	; 0x68
   15afc:	f7ff f978 	bl	14df0 <memset>
   15b00:	0020      	movs	r0, r4
   15b02:	bd70      	pop	{r4, r5, r6, pc}

00015b04 <__sinit>:
   15b04:	6983      	ldr	r3, [r0, #24]
   15b06:	b513      	push	{r0, r1, r4, lr}
   15b08:	0004      	movs	r4, r0
   15b0a:	2b00      	cmp	r3, #0
   15b0c:	d128      	bne.n	15b60 <__sinit+0x5c>
   15b0e:	6483      	str	r3, [r0, #72]	; 0x48
   15b10:	64c3      	str	r3, [r0, #76]	; 0x4c
   15b12:	6503      	str	r3, [r0, #80]	; 0x50
   15b14:	4b13      	ldr	r3, [pc, #76]	; (15b64 <__sinit+0x60>)
   15b16:	4a14      	ldr	r2, [pc, #80]	; (15b68 <__sinit+0x64>)
   15b18:	681b      	ldr	r3, [r3, #0]
   15b1a:	6282      	str	r2, [r0, #40]	; 0x28
   15b1c:	9301      	str	r3, [sp, #4]
   15b1e:	4298      	cmp	r0, r3
   15b20:	d101      	bne.n	15b26 <__sinit+0x22>
   15b22:	2301      	movs	r3, #1
   15b24:	6183      	str	r3, [r0, #24]
   15b26:	0020      	movs	r0, r4
   15b28:	f000 f820 	bl	15b6c <__sfp>
   15b2c:	6060      	str	r0, [r4, #4]
   15b2e:	0020      	movs	r0, r4
   15b30:	f000 f81c 	bl	15b6c <__sfp>
   15b34:	60a0      	str	r0, [r4, #8]
   15b36:	0020      	movs	r0, r4
   15b38:	f000 f818 	bl	15b6c <__sfp>
   15b3c:	2200      	movs	r2, #0
   15b3e:	60e0      	str	r0, [r4, #12]
   15b40:	2104      	movs	r1, #4
   15b42:	6860      	ldr	r0, [r4, #4]
   15b44:	f7ff ffa4 	bl	15a90 <std.isra.0>
   15b48:	2201      	movs	r2, #1
   15b4a:	2109      	movs	r1, #9
   15b4c:	68a0      	ldr	r0, [r4, #8]
   15b4e:	f7ff ff9f 	bl	15a90 <std.isra.0>
   15b52:	2202      	movs	r2, #2
   15b54:	2112      	movs	r1, #18
   15b56:	68e0      	ldr	r0, [r4, #12]
   15b58:	f7ff ff9a 	bl	15a90 <std.isra.0>
   15b5c:	2301      	movs	r3, #1
   15b5e:	61a3      	str	r3, [r4, #24]
   15b60:	bd13      	pop	{r0, r1, r4, pc}
   15b62:	46c0      	nop			; (mov r8, r8)
   15b64:	00017524 	.word	0x00017524
   15b68:	00015a81 	.word	0x00015a81

00015b6c <__sfp>:
   15b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15b6e:	4b1e      	ldr	r3, [pc, #120]	; (15be8 <__sfp+0x7c>)
   15b70:	0007      	movs	r7, r0
   15b72:	681e      	ldr	r6, [r3, #0]
   15b74:	69b3      	ldr	r3, [r6, #24]
   15b76:	2b00      	cmp	r3, #0
   15b78:	d102      	bne.n	15b80 <__sfp+0x14>
   15b7a:	0030      	movs	r0, r6
   15b7c:	f7ff ffc2 	bl	15b04 <__sinit>
   15b80:	3648      	adds	r6, #72	; 0x48
   15b82:	68b4      	ldr	r4, [r6, #8]
   15b84:	6873      	ldr	r3, [r6, #4]
   15b86:	3b01      	subs	r3, #1
   15b88:	d504      	bpl.n	15b94 <__sfp+0x28>
   15b8a:	6833      	ldr	r3, [r6, #0]
   15b8c:	2b00      	cmp	r3, #0
   15b8e:	d007      	beq.n	15ba0 <__sfp+0x34>
   15b90:	6836      	ldr	r6, [r6, #0]
   15b92:	e7f6      	b.n	15b82 <__sfp+0x16>
   15b94:	220c      	movs	r2, #12
   15b96:	5ea5      	ldrsh	r5, [r4, r2]
   15b98:	2d00      	cmp	r5, #0
   15b9a:	d00d      	beq.n	15bb8 <__sfp+0x4c>
   15b9c:	3468      	adds	r4, #104	; 0x68
   15b9e:	e7f2      	b.n	15b86 <__sfp+0x1a>
   15ba0:	2104      	movs	r1, #4
   15ba2:	0038      	movs	r0, r7
   15ba4:	f7ff ff98 	bl	15ad8 <__sfmoreglue>
   15ba8:	6030      	str	r0, [r6, #0]
   15baa:	2800      	cmp	r0, #0
   15bac:	d1f0      	bne.n	15b90 <__sfp+0x24>
   15bae:	230c      	movs	r3, #12
   15bb0:	0004      	movs	r4, r0
   15bb2:	603b      	str	r3, [r7, #0]
   15bb4:	0020      	movs	r0, r4
   15bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15bb8:	2301      	movs	r3, #1
   15bba:	0020      	movs	r0, r4
   15bbc:	425b      	negs	r3, r3
   15bbe:	81e3      	strh	r3, [r4, #14]
   15bc0:	3302      	adds	r3, #2
   15bc2:	81a3      	strh	r3, [r4, #12]
   15bc4:	6665      	str	r5, [r4, #100]	; 0x64
   15bc6:	6025      	str	r5, [r4, #0]
   15bc8:	60a5      	str	r5, [r4, #8]
   15bca:	6065      	str	r5, [r4, #4]
   15bcc:	6125      	str	r5, [r4, #16]
   15bce:	6165      	str	r5, [r4, #20]
   15bd0:	61a5      	str	r5, [r4, #24]
   15bd2:	2208      	movs	r2, #8
   15bd4:	0029      	movs	r1, r5
   15bd6:	305c      	adds	r0, #92	; 0x5c
   15bd8:	f7ff f90a 	bl	14df0 <memset>
   15bdc:	6365      	str	r5, [r4, #52]	; 0x34
   15bde:	63a5      	str	r5, [r4, #56]	; 0x38
   15be0:	64a5      	str	r5, [r4, #72]	; 0x48
   15be2:	64e5      	str	r5, [r4, #76]	; 0x4c
   15be4:	e7e6      	b.n	15bb4 <__sfp+0x48>
   15be6:	46c0      	nop			; (mov r8, r8)
   15be8:	00017524 	.word	0x00017524

00015bec <_fwalk_reent>:
   15bec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15bee:	0004      	movs	r4, r0
   15bf0:	0007      	movs	r7, r0
   15bf2:	2600      	movs	r6, #0
   15bf4:	9101      	str	r1, [sp, #4]
   15bf6:	3448      	adds	r4, #72	; 0x48
   15bf8:	2c00      	cmp	r4, #0
   15bfa:	d101      	bne.n	15c00 <_fwalk_reent+0x14>
   15bfc:	0030      	movs	r0, r6
   15bfe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   15c00:	6863      	ldr	r3, [r4, #4]
   15c02:	68a5      	ldr	r5, [r4, #8]
   15c04:	9300      	str	r3, [sp, #0]
   15c06:	9b00      	ldr	r3, [sp, #0]
   15c08:	3b01      	subs	r3, #1
   15c0a:	9300      	str	r3, [sp, #0]
   15c0c:	d501      	bpl.n	15c12 <_fwalk_reent+0x26>
   15c0e:	6824      	ldr	r4, [r4, #0]
   15c10:	e7f2      	b.n	15bf8 <_fwalk_reent+0xc>
   15c12:	89ab      	ldrh	r3, [r5, #12]
   15c14:	2b01      	cmp	r3, #1
   15c16:	d908      	bls.n	15c2a <_fwalk_reent+0x3e>
   15c18:	220e      	movs	r2, #14
   15c1a:	5eab      	ldrsh	r3, [r5, r2]
   15c1c:	3301      	adds	r3, #1
   15c1e:	d004      	beq.n	15c2a <_fwalk_reent+0x3e>
   15c20:	0029      	movs	r1, r5
   15c22:	0038      	movs	r0, r7
   15c24:	9b01      	ldr	r3, [sp, #4]
   15c26:	4798      	blx	r3
   15c28:	4306      	orrs	r6, r0
   15c2a:	3568      	adds	r5, #104	; 0x68
   15c2c:	e7eb      	b.n	15c06 <_fwalk_reent+0x1a>
   15c2e:	Address 0x00015c2e is out of bounds.


00015c30 <__swhatbuf_r>:
   15c30:	b570      	push	{r4, r5, r6, lr}
   15c32:	000e      	movs	r6, r1
   15c34:	001d      	movs	r5, r3
   15c36:	230e      	movs	r3, #14
   15c38:	5ec9      	ldrsh	r1, [r1, r3]
   15c3a:	b090      	sub	sp, #64	; 0x40
   15c3c:	0014      	movs	r4, r2
   15c3e:	2900      	cmp	r1, #0
   15c40:	da07      	bge.n	15c52 <__swhatbuf_r+0x22>
   15c42:	2300      	movs	r3, #0
   15c44:	602b      	str	r3, [r5, #0]
   15c46:	89b3      	ldrh	r3, [r6, #12]
   15c48:	061b      	lsls	r3, r3, #24
   15c4a:	d411      	bmi.n	15c70 <__swhatbuf_r+0x40>
   15c4c:	2380      	movs	r3, #128	; 0x80
   15c4e:	00db      	lsls	r3, r3, #3
   15c50:	e00f      	b.n	15c72 <__swhatbuf_r+0x42>
   15c52:	aa01      	add	r2, sp, #4
   15c54:	f000 fbb8 	bl	163c8 <_fstat_r>
   15c58:	2800      	cmp	r0, #0
   15c5a:	dbf2      	blt.n	15c42 <__swhatbuf_r+0x12>
   15c5c:	22f0      	movs	r2, #240	; 0xf0
   15c5e:	9b02      	ldr	r3, [sp, #8]
   15c60:	0212      	lsls	r2, r2, #8
   15c62:	4013      	ands	r3, r2
   15c64:	4a05      	ldr	r2, [pc, #20]	; (15c7c <__swhatbuf_r+0x4c>)
   15c66:	189b      	adds	r3, r3, r2
   15c68:	425a      	negs	r2, r3
   15c6a:	4153      	adcs	r3, r2
   15c6c:	602b      	str	r3, [r5, #0]
   15c6e:	e7ed      	b.n	15c4c <__swhatbuf_r+0x1c>
   15c70:	2340      	movs	r3, #64	; 0x40
   15c72:	2000      	movs	r0, #0
   15c74:	6023      	str	r3, [r4, #0]
   15c76:	b010      	add	sp, #64	; 0x40
   15c78:	bd70      	pop	{r4, r5, r6, pc}
   15c7a:	46c0      	nop			; (mov r8, r8)
   15c7c:	ffffe000 	.word	0xffffe000

00015c80 <__smakebuf_r>:
   15c80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15c82:	2602      	movs	r6, #2
   15c84:	898b      	ldrh	r3, [r1, #12]
   15c86:	0005      	movs	r5, r0
   15c88:	000c      	movs	r4, r1
   15c8a:	4233      	tst	r3, r6
   15c8c:	d006      	beq.n	15c9c <__smakebuf_r+0x1c>
   15c8e:	0023      	movs	r3, r4
   15c90:	3347      	adds	r3, #71	; 0x47
   15c92:	6023      	str	r3, [r4, #0]
   15c94:	6123      	str	r3, [r4, #16]
   15c96:	2301      	movs	r3, #1
   15c98:	6163      	str	r3, [r4, #20]
   15c9a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   15c9c:	ab01      	add	r3, sp, #4
   15c9e:	466a      	mov	r2, sp
   15ca0:	f7ff ffc6 	bl	15c30 <__swhatbuf_r>
   15ca4:	9900      	ldr	r1, [sp, #0]
   15ca6:	0007      	movs	r7, r0
   15ca8:	0028      	movs	r0, r5
   15caa:	f000 f89f 	bl	15dec <_malloc_r>
   15cae:	2800      	cmp	r0, #0
   15cb0:	d108      	bne.n	15cc4 <__smakebuf_r+0x44>
   15cb2:	220c      	movs	r2, #12
   15cb4:	5ea3      	ldrsh	r3, [r4, r2]
   15cb6:	059a      	lsls	r2, r3, #22
   15cb8:	d4ef      	bmi.n	15c9a <__smakebuf_r+0x1a>
   15cba:	2203      	movs	r2, #3
   15cbc:	4393      	bics	r3, r2
   15cbe:	431e      	orrs	r6, r3
   15cc0:	81a6      	strh	r6, [r4, #12]
   15cc2:	e7e4      	b.n	15c8e <__smakebuf_r+0xe>
   15cc4:	4b0f      	ldr	r3, [pc, #60]	; (15d04 <__smakebuf_r+0x84>)
   15cc6:	62ab      	str	r3, [r5, #40]	; 0x28
   15cc8:	2380      	movs	r3, #128	; 0x80
   15cca:	89a2      	ldrh	r2, [r4, #12]
   15ccc:	6020      	str	r0, [r4, #0]
   15cce:	4313      	orrs	r3, r2
   15cd0:	81a3      	strh	r3, [r4, #12]
   15cd2:	9b00      	ldr	r3, [sp, #0]
   15cd4:	6120      	str	r0, [r4, #16]
   15cd6:	6163      	str	r3, [r4, #20]
   15cd8:	9b01      	ldr	r3, [sp, #4]
   15cda:	2b00      	cmp	r3, #0
   15cdc:	d00d      	beq.n	15cfa <__smakebuf_r+0x7a>
   15cde:	230e      	movs	r3, #14
   15ce0:	5ee1      	ldrsh	r1, [r4, r3]
   15ce2:	0028      	movs	r0, r5
   15ce4:	f000 fb82 	bl	163ec <_isatty_r>
   15ce8:	2800      	cmp	r0, #0
   15cea:	d006      	beq.n	15cfa <__smakebuf_r+0x7a>
   15cec:	2203      	movs	r2, #3
   15cee:	89a3      	ldrh	r3, [r4, #12]
   15cf0:	4393      	bics	r3, r2
   15cf2:	001a      	movs	r2, r3
   15cf4:	2301      	movs	r3, #1
   15cf6:	4313      	orrs	r3, r2
   15cf8:	81a3      	strh	r3, [r4, #12]
   15cfa:	89a0      	ldrh	r0, [r4, #12]
   15cfc:	4338      	orrs	r0, r7
   15cfe:	81a0      	strh	r0, [r4, #12]
   15d00:	e7cb      	b.n	15c9a <__smakebuf_r+0x1a>
   15d02:	46c0      	nop			; (mov r8, r8)
   15d04:	00015a81 	.word	0x00015a81

00015d08 <malloc>:
   15d08:	b510      	push	{r4, lr}
   15d0a:	4b03      	ldr	r3, [pc, #12]	; (15d18 <malloc+0x10>)
   15d0c:	0001      	movs	r1, r0
   15d0e:	6818      	ldr	r0, [r3, #0]
   15d10:	f000 f86c 	bl	15dec <_malloc_r>
   15d14:	bd10      	pop	{r4, pc}
   15d16:	46c0      	nop			; (mov r8, r8)
   15d18:	20000028 	.word	0x20000028

00015d1c <memchr>:
   15d1c:	b2c9      	uxtb	r1, r1
   15d1e:	1882      	adds	r2, r0, r2
   15d20:	4290      	cmp	r0, r2
   15d22:	d101      	bne.n	15d28 <memchr+0xc>
   15d24:	2000      	movs	r0, #0
   15d26:	4770      	bx	lr
   15d28:	7803      	ldrb	r3, [r0, #0]
   15d2a:	428b      	cmp	r3, r1
   15d2c:	d0fb      	beq.n	15d26 <memchr+0xa>
   15d2e:	3001      	adds	r0, #1
   15d30:	e7f6      	b.n	15d20 <memchr+0x4>

00015d32 <memmove>:
   15d32:	b510      	push	{r4, lr}
   15d34:	4288      	cmp	r0, r1
   15d36:	d902      	bls.n	15d3e <memmove+0xc>
   15d38:	188b      	adds	r3, r1, r2
   15d3a:	4298      	cmp	r0, r3
   15d3c:	d308      	bcc.n	15d50 <memmove+0x1e>
   15d3e:	2300      	movs	r3, #0
   15d40:	429a      	cmp	r2, r3
   15d42:	d007      	beq.n	15d54 <memmove+0x22>
   15d44:	5ccc      	ldrb	r4, [r1, r3]
   15d46:	54c4      	strb	r4, [r0, r3]
   15d48:	3301      	adds	r3, #1
   15d4a:	e7f9      	b.n	15d40 <memmove+0xe>
   15d4c:	5c8b      	ldrb	r3, [r1, r2]
   15d4e:	5483      	strb	r3, [r0, r2]
   15d50:	3a01      	subs	r2, #1
   15d52:	d2fb      	bcs.n	15d4c <memmove+0x1a>
   15d54:	bd10      	pop	{r4, pc}
   15d56:	Address 0x00015d56 is out of bounds.


00015d58 <_free_r>:
   15d58:	b570      	push	{r4, r5, r6, lr}
   15d5a:	0005      	movs	r5, r0
   15d5c:	2900      	cmp	r1, #0
   15d5e:	d010      	beq.n	15d82 <_free_r+0x2a>
   15d60:	1f0c      	subs	r4, r1, #4
   15d62:	6823      	ldr	r3, [r4, #0]
   15d64:	2b00      	cmp	r3, #0
   15d66:	da00      	bge.n	15d6a <_free_r+0x12>
   15d68:	18e4      	adds	r4, r4, r3
   15d6a:	0028      	movs	r0, r5
   15d6c:	f000 fb64 	bl	16438 <__malloc_lock>
   15d70:	4a1d      	ldr	r2, [pc, #116]	; (15de8 <_free_r+0x90>)
   15d72:	6813      	ldr	r3, [r2, #0]
   15d74:	2b00      	cmp	r3, #0
   15d76:	d105      	bne.n	15d84 <_free_r+0x2c>
   15d78:	6063      	str	r3, [r4, #4]
   15d7a:	6014      	str	r4, [r2, #0]
   15d7c:	0028      	movs	r0, r5
   15d7e:	f000 fb5c 	bl	1643a <__malloc_unlock>
   15d82:	bd70      	pop	{r4, r5, r6, pc}
   15d84:	42a3      	cmp	r3, r4
   15d86:	d909      	bls.n	15d9c <_free_r+0x44>
   15d88:	6821      	ldr	r1, [r4, #0]
   15d8a:	1860      	adds	r0, r4, r1
   15d8c:	4283      	cmp	r3, r0
   15d8e:	d1f3      	bne.n	15d78 <_free_r+0x20>
   15d90:	6818      	ldr	r0, [r3, #0]
   15d92:	685b      	ldr	r3, [r3, #4]
   15d94:	1841      	adds	r1, r0, r1
   15d96:	6021      	str	r1, [r4, #0]
   15d98:	e7ee      	b.n	15d78 <_free_r+0x20>
   15d9a:	0013      	movs	r3, r2
   15d9c:	685a      	ldr	r2, [r3, #4]
   15d9e:	2a00      	cmp	r2, #0
   15da0:	d001      	beq.n	15da6 <_free_r+0x4e>
   15da2:	42a2      	cmp	r2, r4
   15da4:	d9f9      	bls.n	15d9a <_free_r+0x42>
   15da6:	6819      	ldr	r1, [r3, #0]
   15da8:	1858      	adds	r0, r3, r1
   15daa:	42a0      	cmp	r0, r4
   15dac:	d10b      	bne.n	15dc6 <_free_r+0x6e>
   15dae:	6820      	ldr	r0, [r4, #0]
   15db0:	1809      	adds	r1, r1, r0
   15db2:	1858      	adds	r0, r3, r1
   15db4:	6019      	str	r1, [r3, #0]
   15db6:	4282      	cmp	r2, r0
   15db8:	d1e0      	bne.n	15d7c <_free_r+0x24>
   15dba:	6810      	ldr	r0, [r2, #0]
   15dbc:	6852      	ldr	r2, [r2, #4]
   15dbe:	1841      	adds	r1, r0, r1
   15dc0:	6019      	str	r1, [r3, #0]
   15dc2:	605a      	str	r2, [r3, #4]
   15dc4:	e7da      	b.n	15d7c <_free_r+0x24>
   15dc6:	42a0      	cmp	r0, r4
   15dc8:	d902      	bls.n	15dd0 <_free_r+0x78>
   15dca:	230c      	movs	r3, #12
   15dcc:	602b      	str	r3, [r5, #0]
   15dce:	e7d5      	b.n	15d7c <_free_r+0x24>
   15dd0:	6821      	ldr	r1, [r4, #0]
   15dd2:	1860      	adds	r0, r4, r1
   15dd4:	4282      	cmp	r2, r0
   15dd6:	d103      	bne.n	15de0 <_free_r+0x88>
   15dd8:	6810      	ldr	r0, [r2, #0]
   15dda:	6852      	ldr	r2, [r2, #4]
   15ddc:	1841      	adds	r1, r0, r1
   15dde:	6021      	str	r1, [r4, #0]
   15de0:	6062      	str	r2, [r4, #4]
   15de2:	605c      	str	r4, [r3, #4]
   15de4:	e7ca      	b.n	15d7c <_free_r+0x24>
   15de6:	46c0      	nop			; (mov r8, r8)
   15de8:	20002094 	.word	0x20002094

00015dec <_malloc_r>:
   15dec:	2303      	movs	r3, #3
   15dee:	b570      	push	{r4, r5, r6, lr}
   15df0:	1ccd      	adds	r5, r1, #3
   15df2:	439d      	bics	r5, r3
   15df4:	3508      	adds	r5, #8
   15df6:	0006      	movs	r6, r0
   15df8:	2d0c      	cmp	r5, #12
   15dfa:	d21e      	bcs.n	15e3a <_malloc_r+0x4e>
   15dfc:	250c      	movs	r5, #12
   15dfe:	42a9      	cmp	r1, r5
   15e00:	d81d      	bhi.n	15e3e <_malloc_r+0x52>
   15e02:	0030      	movs	r0, r6
   15e04:	f000 fb18 	bl	16438 <__malloc_lock>
   15e08:	4a25      	ldr	r2, [pc, #148]	; (15ea0 <_malloc_r+0xb4>)
   15e0a:	6814      	ldr	r4, [r2, #0]
   15e0c:	0021      	movs	r1, r4
   15e0e:	2900      	cmp	r1, #0
   15e10:	d119      	bne.n	15e46 <_malloc_r+0x5a>
   15e12:	4c24      	ldr	r4, [pc, #144]	; (15ea4 <_malloc_r+0xb8>)
   15e14:	6823      	ldr	r3, [r4, #0]
   15e16:	2b00      	cmp	r3, #0
   15e18:	d103      	bne.n	15e22 <_malloc_r+0x36>
   15e1a:	0030      	movs	r0, r6
   15e1c:	f000 fa06 	bl	1622c <_sbrk_r>
   15e20:	6020      	str	r0, [r4, #0]
   15e22:	0029      	movs	r1, r5
   15e24:	0030      	movs	r0, r6
   15e26:	f000 fa01 	bl	1622c <_sbrk_r>
   15e2a:	1c43      	adds	r3, r0, #1
   15e2c:	d12c      	bne.n	15e88 <_malloc_r+0x9c>
   15e2e:	230c      	movs	r3, #12
   15e30:	0030      	movs	r0, r6
   15e32:	6033      	str	r3, [r6, #0]
   15e34:	f000 fb01 	bl	1643a <__malloc_unlock>
   15e38:	e003      	b.n	15e42 <_malloc_r+0x56>
   15e3a:	2d00      	cmp	r5, #0
   15e3c:	dadf      	bge.n	15dfe <_malloc_r+0x12>
   15e3e:	230c      	movs	r3, #12
   15e40:	6033      	str	r3, [r6, #0]
   15e42:	2000      	movs	r0, #0
   15e44:	bd70      	pop	{r4, r5, r6, pc}
   15e46:	680b      	ldr	r3, [r1, #0]
   15e48:	1b5b      	subs	r3, r3, r5
   15e4a:	d41a      	bmi.n	15e82 <_malloc_r+0x96>
   15e4c:	2b0b      	cmp	r3, #11
   15e4e:	d903      	bls.n	15e58 <_malloc_r+0x6c>
   15e50:	600b      	str	r3, [r1, #0]
   15e52:	18cc      	adds	r4, r1, r3
   15e54:	6025      	str	r5, [r4, #0]
   15e56:	e003      	b.n	15e60 <_malloc_r+0x74>
   15e58:	428c      	cmp	r4, r1
   15e5a:	d10e      	bne.n	15e7a <_malloc_r+0x8e>
   15e5c:	6863      	ldr	r3, [r4, #4]
   15e5e:	6013      	str	r3, [r2, #0]
   15e60:	0030      	movs	r0, r6
   15e62:	f000 faea 	bl	1643a <__malloc_unlock>
   15e66:	0020      	movs	r0, r4
   15e68:	2207      	movs	r2, #7
   15e6a:	300b      	adds	r0, #11
   15e6c:	1d23      	adds	r3, r4, #4
   15e6e:	4390      	bics	r0, r2
   15e70:	1ac3      	subs	r3, r0, r3
   15e72:	d0e7      	beq.n	15e44 <_malloc_r+0x58>
   15e74:	425a      	negs	r2, r3
   15e76:	50e2      	str	r2, [r4, r3]
   15e78:	e7e4      	b.n	15e44 <_malloc_r+0x58>
   15e7a:	684b      	ldr	r3, [r1, #4]
   15e7c:	6063      	str	r3, [r4, #4]
   15e7e:	000c      	movs	r4, r1
   15e80:	e7ee      	b.n	15e60 <_malloc_r+0x74>
   15e82:	000c      	movs	r4, r1
   15e84:	6849      	ldr	r1, [r1, #4]
   15e86:	e7c2      	b.n	15e0e <_malloc_r+0x22>
   15e88:	2303      	movs	r3, #3
   15e8a:	1cc4      	adds	r4, r0, #3
   15e8c:	439c      	bics	r4, r3
   15e8e:	42a0      	cmp	r0, r4
   15e90:	d0e0      	beq.n	15e54 <_malloc_r+0x68>
   15e92:	1a21      	subs	r1, r4, r0
   15e94:	0030      	movs	r0, r6
   15e96:	f000 f9c9 	bl	1622c <_sbrk_r>
   15e9a:	1c43      	adds	r3, r0, #1
   15e9c:	d1da      	bne.n	15e54 <_malloc_r+0x68>
   15e9e:	e7c6      	b.n	15e2e <_malloc_r+0x42>
   15ea0:	20002094 	.word	0x20002094
   15ea4:	20002098 	.word	0x20002098

00015ea8 <_realloc_r>:
   15ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15eaa:	0007      	movs	r7, r0
   15eac:	000d      	movs	r5, r1
   15eae:	0016      	movs	r6, r2
   15eb0:	2900      	cmp	r1, #0
   15eb2:	d105      	bne.n	15ec0 <_realloc_r+0x18>
   15eb4:	0011      	movs	r1, r2
   15eb6:	f7ff ff99 	bl	15dec <_malloc_r>
   15eba:	0004      	movs	r4, r0
   15ebc:	0020      	movs	r0, r4
   15ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15ec0:	2a00      	cmp	r2, #0
   15ec2:	d103      	bne.n	15ecc <_realloc_r+0x24>
   15ec4:	f7ff ff48 	bl	15d58 <_free_r>
   15ec8:	0034      	movs	r4, r6
   15eca:	e7f7      	b.n	15ebc <_realloc_r+0x14>
   15ecc:	f000 fab6 	bl	1643c <_malloc_usable_size_r>
   15ed0:	002c      	movs	r4, r5
   15ed2:	4286      	cmp	r6, r0
   15ed4:	d9f2      	bls.n	15ebc <_realloc_r+0x14>
   15ed6:	0031      	movs	r1, r6
   15ed8:	0038      	movs	r0, r7
   15eda:	f7ff ff87 	bl	15dec <_malloc_r>
   15ede:	1e04      	subs	r4, r0, #0
   15ee0:	d0ec      	beq.n	15ebc <_realloc_r+0x14>
   15ee2:	0029      	movs	r1, r5
   15ee4:	0032      	movs	r2, r6
   15ee6:	f7fe ff7a 	bl	14dde <memcpy>
   15eea:	0029      	movs	r1, r5
   15eec:	0038      	movs	r0, r7
   15eee:	f7ff ff33 	bl	15d58 <_free_r>
   15ef2:	e7e3      	b.n	15ebc <_realloc_r+0x14>

00015ef4 <__ssputs_r>:
   15ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
   15ef6:	688e      	ldr	r6, [r1, #8]
   15ef8:	b085      	sub	sp, #20
   15efa:	0007      	movs	r7, r0
   15efc:	000c      	movs	r4, r1
   15efe:	9203      	str	r2, [sp, #12]
   15f00:	9301      	str	r3, [sp, #4]
   15f02:	429e      	cmp	r6, r3
   15f04:	d839      	bhi.n	15f7a <__ssputs_r+0x86>
   15f06:	2390      	movs	r3, #144	; 0x90
   15f08:	898a      	ldrh	r2, [r1, #12]
   15f0a:	00db      	lsls	r3, r3, #3
   15f0c:	421a      	tst	r2, r3
   15f0e:	d034      	beq.n	15f7a <__ssputs_r+0x86>
   15f10:	2503      	movs	r5, #3
   15f12:	6909      	ldr	r1, [r1, #16]
   15f14:	6823      	ldr	r3, [r4, #0]
   15f16:	1a5b      	subs	r3, r3, r1
   15f18:	9302      	str	r3, [sp, #8]
   15f1a:	6963      	ldr	r3, [r4, #20]
   15f1c:	9802      	ldr	r0, [sp, #8]
   15f1e:	435d      	muls	r5, r3
   15f20:	0feb      	lsrs	r3, r5, #31
   15f22:	195d      	adds	r5, r3, r5
   15f24:	9b01      	ldr	r3, [sp, #4]
   15f26:	106d      	asrs	r5, r5, #1
   15f28:	3301      	adds	r3, #1
   15f2a:	181b      	adds	r3, r3, r0
   15f2c:	42ab      	cmp	r3, r5
   15f2e:	d900      	bls.n	15f32 <__ssputs_r+0x3e>
   15f30:	001d      	movs	r5, r3
   15f32:	0553      	lsls	r3, r2, #21
   15f34:	d532      	bpl.n	15f9c <__ssputs_r+0xa8>
   15f36:	0029      	movs	r1, r5
   15f38:	0038      	movs	r0, r7
   15f3a:	f7ff ff57 	bl	15dec <_malloc_r>
   15f3e:	1e06      	subs	r6, r0, #0
   15f40:	d109      	bne.n	15f56 <__ssputs_r+0x62>
   15f42:	230c      	movs	r3, #12
   15f44:	603b      	str	r3, [r7, #0]
   15f46:	2340      	movs	r3, #64	; 0x40
   15f48:	2001      	movs	r0, #1
   15f4a:	89a2      	ldrh	r2, [r4, #12]
   15f4c:	4240      	negs	r0, r0
   15f4e:	4313      	orrs	r3, r2
   15f50:	81a3      	strh	r3, [r4, #12]
   15f52:	b005      	add	sp, #20
   15f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15f56:	9a02      	ldr	r2, [sp, #8]
   15f58:	6921      	ldr	r1, [r4, #16]
   15f5a:	f7fe ff40 	bl	14dde <memcpy>
   15f5e:	89a3      	ldrh	r3, [r4, #12]
   15f60:	4a14      	ldr	r2, [pc, #80]	; (15fb4 <__ssputs_r+0xc0>)
   15f62:	401a      	ands	r2, r3
   15f64:	2380      	movs	r3, #128	; 0x80
   15f66:	4313      	orrs	r3, r2
   15f68:	81a3      	strh	r3, [r4, #12]
   15f6a:	9b02      	ldr	r3, [sp, #8]
   15f6c:	6126      	str	r6, [r4, #16]
   15f6e:	18f6      	adds	r6, r6, r3
   15f70:	6026      	str	r6, [r4, #0]
   15f72:	6165      	str	r5, [r4, #20]
   15f74:	9e01      	ldr	r6, [sp, #4]
   15f76:	1aed      	subs	r5, r5, r3
   15f78:	60a5      	str	r5, [r4, #8]
   15f7a:	9b01      	ldr	r3, [sp, #4]
   15f7c:	42b3      	cmp	r3, r6
   15f7e:	d200      	bcs.n	15f82 <__ssputs_r+0x8e>
   15f80:	001e      	movs	r6, r3
   15f82:	0032      	movs	r2, r6
   15f84:	9903      	ldr	r1, [sp, #12]
   15f86:	6820      	ldr	r0, [r4, #0]
   15f88:	f7ff fed3 	bl	15d32 <memmove>
   15f8c:	68a3      	ldr	r3, [r4, #8]
   15f8e:	2000      	movs	r0, #0
   15f90:	1b9b      	subs	r3, r3, r6
   15f92:	60a3      	str	r3, [r4, #8]
   15f94:	6823      	ldr	r3, [r4, #0]
   15f96:	199e      	adds	r6, r3, r6
   15f98:	6026      	str	r6, [r4, #0]
   15f9a:	e7da      	b.n	15f52 <__ssputs_r+0x5e>
   15f9c:	002a      	movs	r2, r5
   15f9e:	0038      	movs	r0, r7
   15fa0:	f7ff ff82 	bl	15ea8 <_realloc_r>
   15fa4:	1e06      	subs	r6, r0, #0
   15fa6:	d1e0      	bne.n	15f6a <__ssputs_r+0x76>
   15fa8:	6921      	ldr	r1, [r4, #16]
   15faa:	0038      	movs	r0, r7
   15fac:	f7ff fed4 	bl	15d58 <_free_r>
   15fb0:	e7c7      	b.n	15f42 <__ssputs_r+0x4e>
   15fb2:	46c0      	nop			; (mov r8, r8)
   15fb4:	fffffb7f 	.word	0xfffffb7f

00015fb8 <_svfiprintf_r>:
   15fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   15fba:	b09f      	sub	sp, #124	; 0x7c
   15fbc:	9002      	str	r0, [sp, #8]
   15fbe:	9305      	str	r3, [sp, #20]
   15fc0:	898b      	ldrh	r3, [r1, #12]
   15fc2:	000f      	movs	r7, r1
   15fc4:	0016      	movs	r6, r2
   15fc6:	061b      	lsls	r3, r3, #24
   15fc8:	d511      	bpl.n	15fee <_svfiprintf_r+0x36>
   15fca:	690b      	ldr	r3, [r1, #16]
   15fcc:	2b00      	cmp	r3, #0
   15fce:	d10e      	bne.n	15fee <_svfiprintf_r+0x36>
   15fd0:	2140      	movs	r1, #64	; 0x40
   15fd2:	f7ff ff0b 	bl	15dec <_malloc_r>
   15fd6:	6038      	str	r0, [r7, #0]
   15fd8:	6138      	str	r0, [r7, #16]
   15fda:	2800      	cmp	r0, #0
   15fdc:	d105      	bne.n	15fea <_svfiprintf_r+0x32>
   15fde:	230c      	movs	r3, #12
   15fe0:	9a02      	ldr	r2, [sp, #8]
   15fe2:	3801      	subs	r0, #1
   15fe4:	6013      	str	r3, [r2, #0]
   15fe6:	b01f      	add	sp, #124	; 0x7c
   15fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15fea:	2340      	movs	r3, #64	; 0x40
   15fec:	617b      	str	r3, [r7, #20]
   15fee:	2300      	movs	r3, #0
   15ff0:	ad06      	add	r5, sp, #24
   15ff2:	616b      	str	r3, [r5, #20]
   15ff4:	3320      	adds	r3, #32
   15ff6:	766b      	strb	r3, [r5, #25]
   15ff8:	3310      	adds	r3, #16
   15ffa:	76ab      	strb	r3, [r5, #26]
   15ffc:	0034      	movs	r4, r6
   15ffe:	7823      	ldrb	r3, [r4, #0]
   16000:	2b00      	cmp	r3, #0
   16002:	d147      	bne.n	16094 <_svfiprintf_r+0xdc>
   16004:	1ba3      	subs	r3, r4, r6
   16006:	9304      	str	r3, [sp, #16]
   16008:	d00d      	beq.n	16026 <_svfiprintf_r+0x6e>
   1600a:	1ba3      	subs	r3, r4, r6
   1600c:	0032      	movs	r2, r6
   1600e:	0039      	movs	r1, r7
   16010:	9802      	ldr	r0, [sp, #8]
   16012:	f7ff ff6f 	bl	15ef4 <__ssputs_r>
   16016:	1c43      	adds	r3, r0, #1
   16018:	d100      	bne.n	1601c <_svfiprintf_r+0x64>
   1601a:	e0b5      	b.n	16188 <_svfiprintf_r+0x1d0>
   1601c:	696a      	ldr	r2, [r5, #20]
   1601e:	9b04      	ldr	r3, [sp, #16]
   16020:	4694      	mov	ip, r2
   16022:	4463      	add	r3, ip
   16024:	616b      	str	r3, [r5, #20]
   16026:	7823      	ldrb	r3, [r4, #0]
   16028:	2b00      	cmp	r3, #0
   1602a:	d100      	bne.n	1602e <_svfiprintf_r+0x76>
   1602c:	e0ac      	b.n	16188 <_svfiprintf_r+0x1d0>
   1602e:	2201      	movs	r2, #1
   16030:	2300      	movs	r3, #0
   16032:	4252      	negs	r2, r2
   16034:	606a      	str	r2, [r5, #4]
   16036:	a902      	add	r1, sp, #8
   16038:	3254      	adds	r2, #84	; 0x54
   1603a:	1852      	adds	r2, r2, r1
   1603c:	3401      	adds	r4, #1
   1603e:	602b      	str	r3, [r5, #0]
   16040:	60eb      	str	r3, [r5, #12]
   16042:	60ab      	str	r3, [r5, #8]
   16044:	7013      	strb	r3, [r2, #0]
   16046:	65ab      	str	r3, [r5, #88]	; 0x58
   16048:	4e58      	ldr	r6, [pc, #352]	; (161ac <_svfiprintf_r+0x1f4>)
   1604a:	2205      	movs	r2, #5
   1604c:	7821      	ldrb	r1, [r4, #0]
   1604e:	0030      	movs	r0, r6
   16050:	f7ff fe64 	bl	15d1c <memchr>
   16054:	1c62      	adds	r2, r4, #1
   16056:	2800      	cmp	r0, #0
   16058:	d120      	bne.n	1609c <_svfiprintf_r+0xe4>
   1605a:	6829      	ldr	r1, [r5, #0]
   1605c:	06cb      	lsls	r3, r1, #27
   1605e:	d504      	bpl.n	1606a <_svfiprintf_r+0xb2>
   16060:	2353      	movs	r3, #83	; 0x53
   16062:	ae02      	add	r6, sp, #8
   16064:	3020      	adds	r0, #32
   16066:	199b      	adds	r3, r3, r6
   16068:	7018      	strb	r0, [r3, #0]
   1606a:	070b      	lsls	r3, r1, #28
   1606c:	d504      	bpl.n	16078 <_svfiprintf_r+0xc0>
   1606e:	2353      	movs	r3, #83	; 0x53
   16070:	202b      	movs	r0, #43	; 0x2b
   16072:	ae02      	add	r6, sp, #8
   16074:	199b      	adds	r3, r3, r6
   16076:	7018      	strb	r0, [r3, #0]
   16078:	7823      	ldrb	r3, [r4, #0]
   1607a:	2b2a      	cmp	r3, #42	; 0x2a
   1607c:	d016      	beq.n	160ac <_svfiprintf_r+0xf4>
   1607e:	2000      	movs	r0, #0
   16080:	210a      	movs	r1, #10
   16082:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16084:	7822      	ldrb	r2, [r4, #0]
   16086:	3a30      	subs	r2, #48	; 0x30
   16088:	2a09      	cmp	r2, #9
   1608a:	d955      	bls.n	16138 <_svfiprintf_r+0x180>
   1608c:	2800      	cmp	r0, #0
   1608e:	d015      	beq.n	160bc <_svfiprintf_r+0x104>
   16090:	9309      	str	r3, [sp, #36]	; 0x24
   16092:	e013      	b.n	160bc <_svfiprintf_r+0x104>
   16094:	2b25      	cmp	r3, #37	; 0x25
   16096:	d0b5      	beq.n	16004 <_svfiprintf_r+0x4c>
   16098:	3401      	adds	r4, #1
   1609a:	e7b0      	b.n	15ffe <_svfiprintf_r+0x46>
   1609c:	2301      	movs	r3, #1
   1609e:	1b80      	subs	r0, r0, r6
   160a0:	4083      	lsls	r3, r0
   160a2:	6829      	ldr	r1, [r5, #0]
   160a4:	0014      	movs	r4, r2
   160a6:	430b      	orrs	r3, r1
   160a8:	602b      	str	r3, [r5, #0]
   160aa:	e7cd      	b.n	16048 <_svfiprintf_r+0x90>
   160ac:	9b05      	ldr	r3, [sp, #20]
   160ae:	1d18      	adds	r0, r3, #4
   160b0:	681b      	ldr	r3, [r3, #0]
   160b2:	9005      	str	r0, [sp, #20]
   160b4:	2b00      	cmp	r3, #0
   160b6:	db39      	blt.n	1612c <_svfiprintf_r+0x174>
   160b8:	9309      	str	r3, [sp, #36]	; 0x24
   160ba:	0014      	movs	r4, r2
   160bc:	7823      	ldrb	r3, [r4, #0]
   160be:	2b2e      	cmp	r3, #46	; 0x2e
   160c0:	d10b      	bne.n	160da <_svfiprintf_r+0x122>
   160c2:	7863      	ldrb	r3, [r4, #1]
   160c4:	1c62      	adds	r2, r4, #1
   160c6:	2b2a      	cmp	r3, #42	; 0x2a
   160c8:	d13e      	bne.n	16148 <_svfiprintf_r+0x190>
   160ca:	9b05      	ldr	r3, [sp, #20]
   160cc:	3402      	adds	r4, #2
   160ce:	1d1a      	adds	r2, r3, #4
   160d0:	681b      	ldr	r3, [r3, #0]
   160d2:	9205      	str	r2, [sp, #20]
   160d4:	2b00      	cmp	r3, #0
   160d6:	db34      	blt.n	16142 <_svfiprintf_r+0x18a>
   160d8:	9307      	str	r3, [sp, #28]
   160da:	4e35      	ldr	r6, [pc, #212]	; (161b0 <_svfiprintf_r+0x1f8>)
   160dc:	7821      	ldrb	r1, [r4, #0]
   160de:	2203      	movs	r2, #3
   160e0:	0030      	movs	r0, r6
   160e2:	f7ff fe1b 	bl	15d1c <memchr>
   160e6:	2800      	cmp	r0, #0
   160e8:	d006      	beq.n	160f8 <_svfiprintf_r+0x140>
   160ea:	2340      	movs	r3, #64	; 0x40
   160ec:	1b80      	subs	r0, r0, r6
   160ee:	4083      	lsls	r3, r0
   160f0:	682a      	ldr	r2, [r5, #0]
   160f2:	3401      	adds	r4, #1
   160f4:	4313      	orrs	r3, r2
   160f6:	602b      	str	r3, [r5, #0]
   160f8:	7821      	ldrb	r1, [r4, #0]
   160fa:	2206      	movs	r2, #6
   160fc:	482d      	ldr	r0, [pc, #180]	; (161b4 <_svfiprintf_r+0x1fc>)
   160fe:	1c66      	adds	r6, r4, #1
   16100:	7629      	strb	r1, [r5, #24]
   16102:	f7ff fe0b 	bl	15d1c <memchr>
   16106:	2800      	cmp	r0, #0
   16108:	d046      	beq.n	16198 <_svfiprintf_r+0x1e0>
   1610a:	4b2b      	ldr	r3, [pc, #172]	; (161b8 <_svfiprintf_r+0x200>)
   1610c:	2b00      	cmp	r3, #0
   1610e:	d12f      	bne.n	16170 <_svfiprintf_r+0x1b8>
   16110:	6829      	ldr	r1, [r5, #0]
   16112:	9b05      	ldr	r3, [sp, #20]
   16114:	2207      	movs	r2, #7
   16116:	05c9      	lsls	r1, r1, #23
   16118:	d528      	bpl.n	1616c <_svfiprintf_r+0x1b4>
   1611a:	189b      	adds	r3, r3, r2
   1611c:	4393      	bics	r3, r2
   1611e:	3308      	adds	r3, #8
   16120:	9305      	str	r3, [sp, #20]
   16122:	696b      	ldr	r3, [r5, #20]
   16124:	9a03      	ldr	r2, [sp, #12]
   16126:	189b      	adds	r3, r3, r2
   16128:	616b      	str	r3, [r5, #20]
   1612a:	e767      	b.n	15ffc <_svfiprintf_r+0x44>
   1612c:	425b      	negs	r3, r3
   1612e:	60eb      	str	r3, [r5, #12]
   16130:	2302      	movs	r3, #2
   16132:	430b      	orrs	r3, r1
   16134:	602b      	str	r3, [r5, #0]
   16136:	e7c0      	b.n	160ba <_svfiprintf_r+0x102>
   16138:	434b      	muls	r3, r1
   1613a:	3401      	adds	r4, #1
   1613c:	189b      	adds	r3, r3, r2
   1613e:	2001      	movs	r0, #1
   16140:	e7a0      	b.n	16084 <_svfiprintf_r+0xcc>
   16142:	2301      	movs	r3, #1
   16144:	425b      	negs	r3, r3
   16146:	e7c7      	b.n	160d8 <_svfiprintf_r+0x120>
   16148:	2300      	movs	r3, #0
   1614a:	0014      	movs	r4, r2
   1614c:	200a      	movs	r0, #10
   1614e:	001a      	movs	r2, r3
   16150:	606b      	str	r3, [r5, #4]
   16152:	7821      	ldrb	r1, [r4, #0]
   16154:	3930      	subs	r1, #48	; 0x30
   16156:	2909      	cmp	r1, #9
   16158:	d903      	bls.n	16162 <_svfiprintf_r+0x1aa>
   1615a:	2b00      	cmp	r3, #0
   1615c:	d0bd      	beq.n	160da <_svfiprintf_r+0x122>
   1615e:	9207      	str	r2, [sp, #28]
   16160:	e7bb      	b.n	160da <_svfiprintf_r+0x122>
   16162:	4342      	muls	r2, r0
   16164:	3401      	adds	r4, #1
   16166:	1852      	adds	r2, r2, r1
   16168:	2301      	movs	r3, #1
   1616a:	e7f2      	b.n	16152 <_svfiprintf_r+0x19a>
   1616c:	3307      	adds	r3, #7
   1616e:	e7d5      	b.n	1611c <_svfiprintf_r+0x164>
   16170:	ab05      	add	r3, sp, #20
   16172:	9300      	str	r3, [sp, #0]
   16174:	003a      	movs	r2, r7
   16176:	4b11      	ldr	r3, [pc, #68]	; (161bc <_svfiprintf_r+0x204>)
   16178:	0029      	movs	r1, r5
   1617a:	9802      	ldr	r0, [sp, #8]
   1617c:	e000      	b.n	16180 <_svfiprintf_r+0x1c8>
   1617e:	bf00      	nop
   16180:	9003      	str	r0, [sp, #12]
   16182:	9b03      	ldr	r3, [sp, #12]
   16184:	3301      	adds	r3, #1
   16186:	d1cc      	bne.n	16122 <_svfiprintf_r+0x16a>
   16188:	89bb      	ldrh	r3, [r7, #12]
   1618a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1618c:	065b      	lsls	r3, r3, #25
   1618e:	d400      	bmi.n	16192 <_svfiprintf_r+0x1da>
   16190:	e729      	b.n	15fe6 <_svfiprintf_r+0x2e>
   16192:	2001      	movs	r0, #1
   16194:	4240      	negs	r0, r0
   16196:	e726      	b.n	15fe6 <_svfiprintf_r+0x2e>
   16198:	ab05      	add	r3, sp, #20
   1619a:	9300      	str	r3, [sp, #0]
   1619c:	003a      	movs	r2, r7
   1619e:	4b07      	ldr	r3, [pc, #28]	; (161bc <_svfiprintf_r+0x204>)
   161a0:	0029      	movs	r1, r5
   161a2:	9802      	ldr	r0, [sp, #8]
   161a4:	f7fe ffde 	bl	15164 <_printf_i>
   161a8:	e7ea      	b.n	16180 <_svfiprintf_r+0x1c8>
   161aa:	46c0      	nop			; (mov r8, r8)
   161ac:	00017528 	.word	0x00017528
   161b0:	0001752e 	.word	0x0001752e
   161b4:	00017532 	.word	0x00017532
   161b8:	00000000 	.word	0x00000000
   161bc:	00015ef5 	.word	0x00015ef5

000161c0 <_putc_r>:
   161c0:	b570      	push	{r4, r5, r6, lr}
   161c2:	0006      	movs	r6, r0
   161c4:	000d      	movs	r5, r1
   161c6:	0014      	movs	r4, r2
   161c8:	2800      	cmp	r0, #0
   161ca:	d004      	beq.n	161d6 <_putc_r+0x16>
   161cc:	6983      	ldr	r3, [r0, #24]
   161ce:	2b00      	cmp	r3, #0
   161d0:	d101      	bne.n	161d6 <_putc_r+0x16>
   161d2:	f7ff fc97 	bl	15b04 <__sinit>
   161d6:	4b12      	ldr	r3, [pc, #72]	; (16220 <_putc_r+0x60>)
   161d8:	429c      	cmp	r4, r3
   161da:	d111      	bne.n	16200 <_putc_r+0x40>
   161dc:	6874      	ldr	r4, [r6, #4]
   161de:	68a3      	ldr	r3, [r4, #8]
   161e0:	3b01      	subs	r3, #1
   161e2:	60a3      	str	r3, [r4, #8]
   161e4:	2b00      	cmp	r3, #0
   161e6:	da05      	bge.n	161f4 <_putc_r+0x34>
   161e8:	69a2      	ldr	r2, [r4, #24]
   161ea:	4293      	cmp	r3, r2
   161ec:	db12      	blt.n	16214 <_putc_r+0x54>
   161ee:	b2eb      	uxtb	r3, r5
   161f0:	2b0a      	cmp	r3, #10
   161f2:	d00f      	beq.n	16214 <_putc_r+0x54>
   161f4:	6823      	ldr	r3, [r4, #0]
   161f6:	b2e8      	uxtb	r0, r5
   161f8:	1c5a      	adds	r2, r3, #1
   161fa:	6022      	str	r2, [r4, #0]
   161fc:	701d      	strb	r5, [r3, #0]
   161fe:	bd70      	pop	{r4, r5, r6, pc}
   16200:	4b08      	ldr	r3, [pc, #32]	; (16224 <_putc_r+0x64>)
   16202:	429c      	cmp	r4, r3
   16204:	d101      	bne.n	1620a <_putc_r+0x4a>
   16206:	68b4      	ldr	r4, [r6, #8]
   16208:	e7e9      	b.n	161de <_putc_r+0x1e>
   1620a:	4b07      	ldr	r3, [pc, #28]	; (16228 <_putc_r+0x68>)
   1620c:	429c      	cmp	r4, r3
   1620e:	d1e6      	bne.n	161de <_putc_r+0x1e>
   16210:	68f4      	ldr	r4, [r6, #12]
   16212:	e7e4      	b.n	161de <_putc_r+0x1e>
   16214:	0022      	movs	r2, r4
   16216:	0029      	movs	r1, r5
   16218:	0030      	movs	r0, r6
   1621a:	f7ff faa7 	bl	1576c <__swbuf_r>
   1621e:	e7ee      	b.n	161fe <_putc_r+0x3e>
   16220:	0001757c 	.word	0x0001757c
   16224:	0001759c 	.word	0x0001759c
   16228:	0001755c 	.word	0x0001755c

0001622c <_sbrk_r>:
   1622c:	2300      	movs	r3, #0
   1622e:	b570      	push	{r4, r5, r6, lr}
   16230:	4c06      	ldr	r4, [pc, #24]	; (1624c <_sbrk_r+0x20>)
   16232:	0005      	movs	r5, r0
   16234:	0008      	movs	r0, r1
   16236:	6023      	str	r3, [r4, #0]
   16238:	f7f0 ffae 	bl	7198 <_sbrk>
   1623c:	1c43      	adds	r3, r0, #1
   1623e:	d103      	bne.n	16248 <_sbrk_r+0x1c>
   16240:	6823      	ldr	r3, [r4, #0]
   16242:	2b00      	cmp	r3, #0
   16244:	d000      	beq.n	16248 <_sbrk_r+0x1c>
   16246:	602b      	str	r3, [r5, #0]
   16248:	bd70      	pop	{r4, r5, r6, pc}
   1624a:	46c0      	nop			; (mov r8, r8)
   1624c:	200032b8 	.word	0x200032b8

00016250 <_raise_r>:
   16250:	b570      	push	{r4, r5, r6, lr}
   16252:	0004      	movs	r4, r0
   16254:	000d      	movs	r5, r1
   16256:	291f      	cmp	r1, #31
   16258:	d904      	bls.n	16264 <_raise_r+0x14>
   1625a:	2316      	movs	r3, #22
   1625c:	6003      	str	r3, [r0, #0]
   1625e:	2001      	movs	r0, #1
   16260:	4240      	negs	r0, r0
   16262:	bd70      	pop	{r4, r5, r6, pc}
   16264:	6c43      	ldr	r3, [r0, #68]	; 0x44
   16266:	2b00      	cmp	r3, #0
   16268:	d004      	beq.n	16274 <_raise_r+0x24>
   1626a:	008a      	lsls	r2, r1, #2
   1626c:	189b      	adds	r3, r3, r2
   1626e:	681a      	ldr	r2, [r3, #0]
   16270:	2a00      	cmp	r2, #0
   16272:	d108      	bne.n	16286 <_raise_r+0x36>
   16274:	0020      	movs	r0, r4
   16276:	f000 f831 	bl	162dc <_getpid_r>
   1627a:	002a      	movs	r2, r5
   1627c:	0001      	movs	r1, r0
   1627e:	0020      	movs	r0, r4
   16280:	f000 f81a 	bl	162b8 <_kill_r>
   16284:	e7ed      	b.n	16262 <_raise_r+0x12>
   16286:	2000      	movs	r0, #0
   16288:	2a01      	cmp	r2, #1
   1628a:	d0ea      	beq.n	16262 <_raise_r+0x12>
   1628c:	1c51      	adds	r1, r2, #1
   1628e:	d103      	bne.n	16298 <_raise_r+0x48>
   16290:	2316      	movs	r3, #22
   16292:	3001      	adds	r0, #1
   16294:	6023      	str	r3, [r4, #0]
   16296:	e7e4      	b.n	16262 <_raise_r+0x12>
   16298:	2400      	movs	r4, #0
   1629a:	0028      	movs	r0, r5
   1629c:	601c      	str	r4, [r3, #0]
   1629e:	4790      	blx	r2
   162a0:	0020      	movs	r0, r4
   162a2:	e7de      	b.n	16262 <_raise_r+0x12>

000162a4 <raise>:
   162a4:	b510      	push	{r4, lr}
   162a6:	4b03      	ldr	r3, [pc, #12]	; (162b4 <raise+0x10>)
   162a8:	0001      	movs	r1, r0
   162aa:	6818      	ldr	r0, [r3, #0]
   162ac:	f7ff ffd0 	bl	16250 <_raise_r>
   162b0:	bd10      	pop	{r4, pc}
   162b2:	46c0      	nop			; (mov r8, r8)
   162b4:	20000028 	.word	0x20000028

000162b8 <_kill_r>:
   162b8:	2300      	movs	r3, #0
   162ba:	b570      	push	{r4, r5, r6, lr}
   162bc:	4c06      	ldr	r4, [pc, #24]	; (162d8 <_kill_r+0x20>)
   162be:	0005      	movs	r5, r0
   162c0:	0008      	movs	r0, r1
   162c2:	0011      	movs	r1, r2
   162c4:	6023      	str	r3, [r4, #0]
   162c6:	f7f0 ff87 	bl	71d8 <_kill>
   162ca:	1c43      	adds	r3, r0, #1
   162cc:	d103      	bne.n	162d6 <_kill_r+0x1e>
   162ce:	6823      	ldr	r3, [r4, #0]
   162d0:	2b00      	cmp	r3, #0
   162d2:	d000      	beq.n	162d6 <_kill_r+0x1e>
   162d4:	602b      	str	r3, [r5, #0]
   162d6:	bd70      	pop	{r4, r5, r6, pc}
   162d8:	200032b8 	.word	0x200032b8

000162dc <_getpid_r>:
   162dc:	b510      	push	{r4, lr}
   162de:	f7f0 ff7c 	bl	71da <_getpid>
   162e2:	bd10      	pop	{r4, pc}

000162e4 <__sread>:
   162e4:	b570      	push	{r4, r5, r6, lr}
   162e6:	000c      	movs	r4, r1
   162e8:	250e      	movs	r5, #14
   162ea:	5f49      	ldrsh	r1, [r1, r5]
   162ec:	f000 f8ae 	bl	1644c <_read_r>
   162f0:	2800      	cmp	r0, #0
   162f2:	db03      	blt.n	162fc <__sread+0x18>
   162f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
   162f6:	181b      	adds	r3, r3, r0
   162f8:	6563      	str	r3, [r4, #84]	; 0x54
   162fa:	bd70      	pop	{r4, r5, r6, pc}
   162fc:	89a3      	ldrh	r3, [r4, #12]
   162fe:	4a02      	ldr	r2, [pc, #8]	; (16308 <__sread+0x24>)
   16300:	4013      	ands	r3, r2
   16302:	81a3      	strh	r3, [r4, #12]
   16304:	e7f9      	b.n	162fa <__sread+0x16>
   16306:	46c0      	nop			; (mov r8, r8)
   16308:	ffffefff 	.word	0xffffefff

0001630c <__swrite>:
   1630c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1630e:	001f      	movs	r7, r3
   16310:	898b      	ldrh	r3, [r1, #12]
   16312:	0005      	movs	r5, r0
   16314:	000c      	movs	r4, r1
   16316:	0016      	movs	r6, r2
   16318:	05db      	lsls	r3, r3, #23
   1631a:	d505      	bpl.n	16328 <__swrite+0x1c>
   1631c:	230e      	movs	r3, #14
   1631e:	5ec9      	ldrsh	r1, [r1, r3]
   16320:	2200      	movs	r2, #0
   16322:	2302      	movs	r3, #2
   16324:	f000 f874 	bl	16410 <_lseek_r>
   16328:	89a3      	ldrh	r3, [r4, #12]
   1632a:	4a05      	ldr	r2, [pc, #20]	; (16340 <__swrite+0x34>)
   1632c:	0028      	movs	r0, r5
   1632e:	4013      	ands	r3, r2
   16330:	81a3      	strh	r3, [r4, #12]
   16332:	0032      	movs	r2, r6
   16334:	230e      	movs	r3, #14
   16336:	5ee1      	ldrsh	r1, [r4, r3]
   16338:	003b      	movs	r3, r7
   1633a:	f000 f81f 	bl	1637c <_write_r>
   1633e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16340:	ffffefff 	.word	0xffffefff

00016344 <__sseek>:
   16344:	b570      	push	{r4, r5, r6, lr}
   16346:	000c      	movs	r4, r1
   16348:	250e      	movs	r5, #14
   1634a:	5f49      	ldrsh	r1, [r1, r5]
   1634c:	f000 f860 	bl	16410 <_lseek_r>
   16350:	89a3      	ldrh	r3, [r4, #12]
   16352:	1c42      	adds	r2, r0, #1
   16354:	d103      	bne.n	1635e <__sseek+0x1a>
   16356:	4a05      	ldr	r2, [pc, #20]	; (1636c <__sseek+0x28>)
   16358:	4013      	ands	r3, r2
   1635a:	81a3      	strh	r3, [r4, #12]
   1635c:	bd70      	pop	{r4, r5, r6, pc}
   1635e:	2280      	movs	r2, #128	; 0x80
   16360:	0152      	lsls	r2, r2, #5
   16362:	4313      	orrs	r3, r2
   16364:	81a3      	strh	r3, [r4, #12]
   16366:	6560      	str	r0, [r4, #84]	; 0x54
   16368:	e7f8      	b.n	1635c <__sseek+0x18>
   1636a:	46c0      	nop			; (mov r8, r8)
   1636c:	ffffefff 	.word	0xffffefff

00016370 <__sclose>:
   16370:	b510      	push	{r4, lr}
   16372:	230e      	movs	r3, #14
   16374:	5ec9      	ldrsh	r1, [r1, r3]
   16376:	f000 f815 	bl	163a4 <_close_r>
   1637a:	bd10      	pop	{r4, pc}

0001637c <_write_r>:
   1637c:	b570      	push	{r4, r5, r6, lr}
   1637e:	0005      	movs	r5, r0
   16380:	0008      	movs	r0, r1
   16382:	0011      	movs	r1, r2
   16384:	2200      	movs	r2, #0
   16386:	4c06      	ldr	r4, [pc, #24]	; (163a0 <_write_r+0x24>)
   16388:	6022      	str	r2, [r4, #0]
   1638a:	001a      	movs	r2, r3
   1638c:	f7f0 fedc 	bl	7148 <_write>
   16390:	1c43      	adds	r3, r0, #1
   16392:	d103      	bne.n	1639c <_write_r+0x20>
   16394:	6823      	ldr	r3, [r4, #0]
   16396:	2b00      	cmp	r3, #0
   16398:	d000      	beq.n	1639c <_write_r+0x20>
   1639a:	602b      	str	r3, [r5, #0]
   1639c:	bd70      	pop	{r4, r5, r6, pc}
   1639e:	46c0      	nop			; (mov r8, r8)
   163a0:	200032b8 	.word	0x200032b8

000163a4 <_close_r>:
   163a4:	2300      	movs	r3, #0
   163a6:	b570      	push	{r4, r5, r6, lr}
   163a8:	4c06      	ldr	r4, [pc, #24]	; (163c4 <_close_r+0x20>)
   163aa:	0005      	movs	r5, r0
   163ac:	0008      	movs	r0, r1
   163ae:	6023      	str	r3, [r4, #0]
   163b0:	f7f0 ff04 	bl	71bc <_close>
   163b4:	1c43      	adds	r3, r0, #1
   163b6:	d103      	bne.n	163c0 <_close_r+0x1c>
   163b8:	6823      	ldr	r3, [r4, #0]
   163ba:	2b00      	cmp	r3, #0
   163bc:	d000      	beq.n	163c0 <_close_r+0x1c>
   163be:	602b      	str	r3, [r5, #0]
   163c0:	bd70      	pop	{r4, r5, r6, pc}
   163c2:	46c0      	nop			; (mov r8, r8)
   163c4:	200032b8 	.word	0x200032b8

000163c8 <_fstat_r>:
   163c8:	2300      	movs	r3, #0
   163ca:	b570      	push	{r4, r5, r6, lr}
   163cc:	4c06      	ldr	r4, [pc, #24]	; (163e8 <_fstat_r+0x20>)
   163ce:	0005      	movs	r5, r0
   163d0:	0008      	movs	r0, r1
   163d2:	0011      	movs	r1, r2
   163d4:	6023      	str	r3, [r4, #0]
   163d6:	f7f0 fef4 	bl	71c2 <_fstat>
   163da:	1c43      	adds	r3, r0, #1
   163dc:	d103      	bne.n	163e6 <_fstat_r+0x1e>
   163de:	6823      	ldr	r3, [r4, #0]
   163e0:	2b00      	cmp	r3, #0
   163e2:	d000      	beq.n	163e6 <_fstat_r+0x1e>
   163e4:	602b      	str	r3, [r5, #0]
   163e6:	bd70      	pop	{r4, r5, r6, pc}
   163e8:	200032b8 	.word	0x200032b8

000163ec <_isatty_r>:
   163ec:	2300      	movs	r3, #0
   163ee:	b570      	push	{r4, r5, r6, lr}
   163f0:	4c06      	ldr	r4, [pc, #24]	; (1640c <_isatty_r+0x20>)
   163f2:	0005      	movs	r5, r0
   163f4:	0008      	movs	r0, r1
   163f6:	6023      	str	r3, [r4, #0]
   163f8:	f7f0 fee8 	bl	71cc <_isatty>
   163fc:	1c43      	adds	r3, r0, #1
   163fe:	d103      	bne.n	16408 <_isatty_r+0x1c>
   16400:	6823      	ldr	r3, [r4, #0]
   16402:	2b00      	cmp	r3, #0
   16404:	d000      	beq.n	16408 <_isatty_r+0x1c>
   16406:	602b      	str	r3, [r5, #0]
   16408:	bd70      	pop	{r4, r5, r6, pc}
   1640a:	46c0      	nop			; (mov r8, r8)
   1640c:	200032b8 	.word	0x200032b8

00016410 <_lseek_r>:
   16410:	b570      	push	{r4, r5, r6, lr}
   16412:	0005      	movs	r5, r0
   16414:	0008      	movs	r0, r1
   16416:	0011      	movs	r1, r2
   16418:	2200      	movs	r2, #0
   1641a:	4c06      	ldr	r4, [pc, #24]	; (16434 <_lseek_r+0x24>)
   1641c:	6022      	str	r2, [r4, #0]
   1641e:	001a      	movs	r2, r3
   16420:	f7f0 fed6 	bl	71d0 <_lseek>
   16424:	1c43      	adds	r3, r0, #1
   16426:	d103      	bne.n	16430 <_lseek_r+0x20>
   16428:	6823      	ldr	r3, [r4, #0]
   1642a:	2b00      	cmp	r3, #0
   1642c:	d000      	beq.n	16430 <_lseek_r+0x20>
   1642e:	602b      	str	r3, [r5, #0]
   16430:	bd70      	pop	{r4, r5, r6, pc}
   16432:	46c0      	nop			; (mov r8, r8)
   16434:	200032b8 	.word	0x200032b8

00016438 <__malloc_lock>:
   16438:	4770      	bx	lr

0001643a <__malloc_unlock>:
   1643a:	4770      	bx	lr

0001643c <_malloc_usable_size_r>:
   1643c:	1f0b      	subs	r3, r1, #4
   1643e:	681b      	ldr	r3, [r3, #0]
   16440:	1f18      	subs	r0, r3, #4
   16442:	2b00      	cmp	r3, #0
   16444:	da01      	bge.n	1644a <_malloc_usable_size_r+0xe>
   16446:	580b      	ldr	r3, [r1, r0]
   16448:	18c0      	adds	r0, r0, r3
   1644a:	4770      	bx	lr

0001644c <_read_r>:
   1644c:	b570      	push	{r4, r5, r6, lr}
   1644e:	0005      	movs	r5, r0
   16450:	0008      	movs	r0, r1
   16452:	0011      	movs	r1, r2
   16454:	2200      	movs	r2, #0
   16456:	4c06      	ldr	r4, [pc, #24]	; (16470 <_read_r+0x24>)
   16458:	6022      	str	r2, [r4, #0]
   1645a:	001a      	movs	r2, r3
   1645c:	f7f0 fe52 	bl	7104 <_read>
   16460:	1c43      	adds	r3, r0, #1
   16462:	d103      	bne.n	1646c <_read_r+0x20>
   16464:	6823      	ldr	r3, [r4, #0]
   16466:	2b00      	cmp	r3, #0
   16468:	d000      	beq.n	1646c <_read_r+0x20>
   1646a:	602b      	str	r3, [r5, #0]
   1646c:	bd70      	pop	{r4, r5, r6, pc}
   1646e:	46c0      	nop			; (mov r8, r8)
   16470:	200032b8 	.word	0x200032b8

00016474 <sysfont_glyphs>:
   16474:	00000000 20000000 20202020 50502000     .......     . PP
   16484:	00000050 f8505000 5050f850 70a07820     P....PP.P.PP x.p
   16494:	c020f028 402010c8 90601898 90a840a0     (. ... @..`..@..
   164a4:	40206068 00000000 40402010 40102040     h` @..... @@@ .@
   164b4:	10101020 50004020 5020f820 20200000      ... @.P . P..  
   164c4:	002020f8 00000000 00402060 00f80000     .  .....` @.....
   164d4:	00000000 60000000 10080060 00804020     .......``... @..
   164e4:	a8988870 207088c8 20202060 88707020     p.....p `    pp.
   164f4:	40201008 2010f8f8 70880810 90503010     .. @... ...p.0P.
   16504:	f81010f8 0808f080 40307088 8888f080     .........p0@....
   16514:	1008f870 40404020 70888870 70708888     p... @@@p..p..pp
   16524:	08788888 60006010 60600060 60600000     ..x..`.``.``..``
   16534:	40206000 40201008 00081020 f800f800     .` @.. @ .......
   16544:	40800000 40201020 08887080 20002010     ...@ . @.p... . 
   16554:	68088870 7070a8a8 f8888888 88f08888     p..h..pp........
   16564:	8888f088 808870f0 70888080 888890e0     .....p.....p....
   16574:	f8e09088 80f08080 80f8f880 8080e080     ................
   16584:	80887080 70889880 f8888888 70888888     .p.....p.......p
   16594:	20202020 10387020 90101010 a0908860          p8.....`...
   165a4:	8890a0c0 80808080 88f88080 8888a8d8     ................
   165b4:	88888888 8898a8c8 88887088 70888888     .........p.....p
   165c4:	f08888f0 70808080 a8888888 88f06890     .......p.....h..
   165d4:	90a0f088 80807888 f0080870 202020f8     .....x..p....   
   165e4:	88202020 88888888 88887088 50888888        ......p.....P
   165f4:	88888820 88d8a8a8 20508888 88888850      .........P P...
   16604:	20205088 08f82020 80402010 202038f8     .P    ... @..8  
   16614:	38202020 20408000 e0000810 20202020        8..@ ....    
   16624:	5020e020 00000088 00000000 f8000000      . P............
   16634:	00102040 00000000 78087000 80807888     @ .......p.x.x..
   16644:	8888c8b0 700000f0 70888080 98680808     .......p...p..h.
   16654:	00788888 f8887000 48307080 4040e040     ..x..p...p0H@.@@
   16664:	78000040 30087888 c8b08080 20888888     @..x.x.0....... 
   16674:	20206000 00107020 90101030 48404060     .`   p..0...`@@H
   16684:	48506050 20202060 00702020 a8a8d000     P`PH`     p.....
   16694:	00008888 8888c8b0 70000088 70888888     ...........p...p
   166a4:	88f00000 008080f0 78986800 00000808     .........h.x....
   166b4:	8080c8b0 70000080 f0087080 40e04040     .......p.p..@@.@
   166c4:	00304840 88888800 00006898 50888888     @H0......h.....P
   166d4:	88000020 50a8a888 50880000 00885020      ......P...P P..
   166e4:	78888800 00007008 402010f8 202010f8     ...x.p.... @..  
   166f4:	10202040 20202020 40202020 20102020     @  .       @  . 
   16704:	ffff4020 00004fd2 00004fd2 00004fae      @...O...O...O..
   16714:	00004fd2 00004fae 00004f94 00004f94     .O...O...O...O..
   16724:	00004fd2 00004fd2 00004fd2 00004fd2     .O...O...O...O..
   16734:	00004fd2 00004fd2 00004fd2 00004fd2     .O...O...O...O..
   16744:	00004fd2 00004fd2 00004fd2 00004fd2     .O...O...O...O..
   16754:	00004fd2 00004fd2 00004fd2 00004fd2     .O...O...O...O..
   16764:	00004fd2 00004fd2 00004fd2 00004fae     .O...O...O...O..
   16774:	00004fd2 00004fae 00004fd2 00004fd2     .O...O...O...O..
   16784:	00004fd2 00004fd2 00004fd2 00004fd2     .O...O...O...O..
   16794:	00004fd2 00004fd2 00004fd2 00004fd2     .O...O...O...O..
   167a4:	00004fd2 00004fd2 00004fd2 00004fd2     .O...O...O...O..
   167b4:	00004fd2 00004fd2 00004fd2 00004fd2     .O...O...O...O..
   167c4:	00004fd2 00004fd2 00004fd2 00004fd2     .O...O...O...O..
   167d4:	00004fd2 00004fd2 00004fd2 00004fd2     .O...O...O...O..
   167e4:	00004fd2 00004fd2 00004fd2 00004fd2     .O...O...O...O..
   167f4:	00004fd2 00004fd2 00004fd2 00004fd2     .O...O...O...O..
   16804:	00004fd2 00004fae 00004fae 00004fb6     .O...O...O...O..
   16814:	00004fb6 00004fb6 00004fb6 42000000     .O...O...O.....B
   16824:	42000400 42000800 42000c00 42001000     ...B...B...B...B
   16834:	43000400 00006426 00006422 00006422     ...C&d.."d.."d..
   16844:	00006488 00006488 0000643c 0000642c     .d...d..<d..,d..
   16854:	00006442 00006476 000065a4 00006584     Bd..vd...e...e..
   16864:	00006584 0000661e 00006596 000065b2     .e...f...e...e..
   16874:	00006588 000065c0 00006602 0000665c     .e...e...f..\f..
   16884:	0000669e 0000669e 0000669e 0000664e     .f...f...f..Nf..
   16894:	0000666a 00006640 00006678 0000668e     jf..@f..xf...f..
   168a4:	00006d9a 00006e90 00006e9a 00006ea4     .m...n...n...n..
   168b4:	00006eae 00006ee0 00006eea 00006ef4     .n...n...n...n..
   168c4:	00006efe 00006f08 42002000 42002400     .n...o... .B.$.B
   168d4:	42002800 42002c00 43000800 00000002     .(.B.,.B...C....
   168e4:	00000100 00000002 00000200 00000002     ................
   168f4:	00000400 00000002 00000800 00000003     ................
   16904:	00000004 72420a0d 6364616f 20747361     ......Broadcast 
   16914:	6c696146 000d6465 6f724220 61636461     Failed.. Broadca
   16924:	46207473 656c6961 ffff0064 6e6e6f43     st Failed...Conn
   16934:	69746365 5020676e 20726565 0a206e6f     ecting Peer on .
   16944:	61684320 6c656e6e 00000020 6f430a0d      Channel .....Co
   16954:	63656e6e 676e6974 65655020 6e6f2072     nnecting Peer on
   16964:	61684320 6c656e6e 00000020 00006425      Channel ...%d..
   16974:	6e6e6f43 65746365 65502064 6f207265     Connected Peer o
   16984:	200a206e 6e616843 206c656e 00000000     n . Channel ....
   16994:	6f430a0d 63656e6e 20646574 72656550     ..Connected Peer
   169a4:	206e6f20 6e616843 206c656e ffffff00      on Channel ....
   169b4:	65530a0d 7463656c 206e6f69 6320666f     ..Selection of c
   169c4:	6e6e6168 00206c65 20736920 20746f6e     hannel . is not 
   169d4:	70707573 6574726f 6e692064 72756320     supported in cur
   169e4:	746e6572 6e6f6320 75676966 69746172     rent configurati
   169f4:	0d2e6e6f ffffff00 706d6953 4c20656c     on......Simple L
   16a04:	2061526f 20503250 6f6d6544 206e6f20     oRa P2P Demo on 
   16a14:	4153200a 3433524d 646f4e20 00002065     . SAMR34 Node ..
   16a24:	74530a0d 69747261 4e20676e 2065646f     ..Starting Node 
   16a34:	666f2031 6d695320 20656c70 6f6d6544     1 of Simple Demo
   16a44:	726f6620 526f4c20 32502061 74532050      for LoRa P2P St
   16a54:	206b6361 002e2e2e 75460a0d 46206c6c     ack ......Full F
   16a64:	74636e75 206e6f69 69766544 28206563     unction Device (
   16a74:	29444646 65706f20 69746172 00736e6f     FFD) operations.
   16a84:	20200a0d 52202020 72542046 63736e61     ..     RF Transc
   16a94:	65766965 53203a72 32315f58 00003637     eiver: SX_1276..
   16aa4:	20200a0d 44202020 206f6d65 74736e49     ..     Demo Inst
   16ab4:	74637572 3a6e6f69 00000000 20200a0d     ruction:......  
   16ac4:	20202020 20202020 20202020 20202020                     
   16ad4:	50202020 7265776f 206e6f20 20656874        Power on the 
   16ae4:	72616f62 6e752064 206c6974 2044454c     board until LED 
   16af4:	696c2031 73746867 00707520 20200a0d     1 lights up...  
   16b04:	20202020 20202020 20202020 20202020                     
   16b14:	74202020 6e69206f 61636964 63206574        to indicate c
   16b24:	656e6e6f 6e697463 69772067 70206874     onnecting with p
   16b34:	2e726565 00000000 20200a0d 20202020     eer.......      
   16b44:	20202020 20202020 20202020 50202020                    P
   16b54:	20687375 74747542 31206e6f 206f7420     ush Button 1 to 
   16b64:	616f7262 73616364 656d2074 67617373     broadcast messag
   16b74:	00002e65 20200a0d 20202020 20202020     e.....          
   16b84:	20202020 20202020 4c202020 31204445                LED 1
   16b94:	6c697720 6562206c 676f7420 64656c67      will be toggled
   16ba4:	6f707520 6572206e 76696563 20676e69      upon receiving 
   16bb4:	7373656d 73656761 0000202e 000d0a0d     messages. ......
   16bc4:	75636553 20646572 00000000 616f7242     Secured ....Broa
   16bd4:	73616364 61502074 74656b63 74697720     dcast Packet wit
   16be4:	53522068 00204953 63696e55 20747361     h RSSI .Unicast 
   16bf4:	6b636150 77207465 20687469 49535352     Packet with RSSI
   16c04:	00000020 78323025 00000000 6f726620      ...%02x.... fro
   16c14:	0000206d 00007825 ff00203a 20205753     m ..%x..: ..SW  
   16c24:	3a202020 6f724220 61636461 0a207473        : Broadcast .
   16c34:	54545542 3a314e4f 696e5520 74736163     BUTTON1: Unicast
   16c44:	ffffff00 6e550a0d 73616369 61462074     ......Unicast Fa
   16c54:	64656c69 0000000d 696e5520 74736163     iled.... Unicast
   16c64:	69614620 0064656c 6b636150 72207465      Failed.Packet r
   16c74:	69656365 20646576 6d6f7266 68746f20     eceived from oth
   16c84:	53207265 6372756f 41502065 4449204e     er Source PAN ID
   16c94:	30203a20 25782578 000a0d78 7461440a      : 0x%x%x....Dat
   16ca4:	6f432061 7269666e 48203a6d 6c646e61     a Confirm: Handl
   16cb4:	25203a65 74732064 73757461 2064253a     e: %d status:%d 
   16cc4:	ff000a0d 253a5753 2d643230 78323025     ....SW:%02d-%02x
   16cd4:	78323025 78323025 55420a20 4e4f5454     %02x%02x .BUTTON
   16ce4:	43203a31 676e6168 6f6e2065 ff006564     1: Change node..
   16cf4:	6f430a0d 63656e6e 704f2074 74617265     ..Connect Operat
   16d04:	206e6f69 74617453 203a7375 00000000     ion Status: ....
   16d14:	000a6425 0944490a 69766544 41206563     %d...ID.Device A
   16d24:	65726464 09207373 70614309 6c696261     ddress ..Capabil
   16d34:	20797469 4e415009 20444920 61684309     ity .PAN ID .Cha
   16d44:	6c656e6e 00000020 00000909 53200a0d     nnel ......... S
   16d54:	206e6163 7265704f 6f697461 7453206e     can Operation St
   16d64:	73757461 6425203a 76656420 20656369     atus: %d device 
   16d74:	6e756f66 ffff0064 4d205854 61737365     found...TX Messa
   16d84:	3a736567 20642520 2058520a 7373654d     ges: %d .RX Mess
   16d94:	73656761 6425203a ffffff00 626d756e     ages: %d....numb
   16da4:	664f7265 65747942 00000073 732f2e2e     erOfBytes...../s
   16db4:	412f6372 742f4653 64726968 74726170     rc/ASF/thirdpart
   16dc4:	69772f79 656c6572 4c2f7373 5f61526f     y/wireless/LoRa_
   16dd4:	2f503250 76726573 73656369 7364702f     P2P/services/pds
   16de4:	6372732f 2f766e2f 764e5f44 0000632e     /src/nv/D_Nv.c..
   16df4:	72646461 20737365 44203d3c 5f564e5f     address <= D_NV_
   16e04:	4f4d454d 455f5952 0000444e 64646128     MEMORY_END..(add
   16e14:	73736572 6e202b20 65626d75 42664f72     ress + numberOfB
   16e24:	73657479 3d3c2029 5f442820 4d5f564e     ytes) <= (D_NV_M
   16e34:	524f4d45 4e455f59 202b2044 00295531     EMORY_END + 1U).
   16e44:	66666f28 20746573 756e202b 7265626d     (offset + number
   16e54:	7942664f 29736574 203d3c20 564e5f44     OfBytes) <= D_NV
   16e64:	4345535f 5f524f54 455a4953 ffffff00     _SECTOR_SIZE....

00016e74 <__func__.13289>:
   16e74:	764e5f44 6165525f 6d495f64 ff006c70     D_Nv_Read_Impl..

00016e84 <__func__.13302>:
   16e84:	764e5f44 6972575f 495f6574 006c706d     D_Nv_Write_Impl.

00016e94 <__func__.13314>:
   16e94:	764e5f44 6172455f 65536573 726f7463     D_Nv_EraseSector
   16ea4:	706d495f ffff006c                       _Impl...

00016eac <__func__.13327>:
   16eac:	706d6f43 44657261 00617461 68636163     CompareData.cach
   16ebc:	3d212065 4c554e20 ffff004c 736c6166     e != NULL...fals
   16ecc:	ffff0065 646e6946 6d657449 68636143     e...FindItemCach
   16edc:	64692865 3d3d2029 4c554e20 0000004c     e(id) == NULL...
   16eec:	74695f73 6f436d65 20746e75 414d203c     s_itemCount < MA
   16efc:	54495f58 435f4d45 544e554f ffffff00     X_ITEM_COUNT....
   16f0c:	68636163 6c3e2d65 42747361 6b636f6c     cache->lastBlock
   16f1c:	203d2120 30307830 00003030 732f2e2e      != 0x0000..../s
   16f2c:	412f6372 742f4653 64726968 74726170     rc/ASF/thirdpart
   16f3c:	69772f79 656c6572 4c2f7373 5f61526f     y/wireless/LoRa_
   16f4c:	2f503250 76726573 73656369 7364702f     P2P/services/pds
   16f5c:	6372732f 2f766e2f 764e5f53 6d61532d     /src/nv/S_Nv-Sam
   16f6c:	2e313252 ffff0063 20646928 30203d21     R21.c...(id != 0
   16f7c:	26202975 69282026 203c2064 30467830     u) && (id < 0xF0
   16f8c:	29753030 20262620 65746928 6e654c6d     00u) && (itemLen
   16f9c:	20687467 4d203d3c 495f5841 5f4d4554     gth <= MAX_ITEM_
   16fac:	474e454c 00294854 21206469 7530203d     LENGTH).id != 0u
   16fbc:	ffffff00 20646928 30203d21 26202975     ....(id != 0u) &
   16fcc:	70282026 61746144 203d2120 4c4c554e     & (pData != NULL
   16fdc:	ffff0029                                )...

00016fe0 <__func__.13287>:
   16fe0:	706d6f63 53746361 6f746365 6d695472     compactSectorTim
   16ff0:	69467265 00646572                       erFired.

00016ff8 <__func__.13323>:
   16ff8:	646e6946 6d657449 68636143 ffff0065     FindItemCache...

00017008 <__func__.13330>:
   17008:	61657243 74496574 61436d65 00656863     CreateItemCache.

00017018 <__func__.13450>:
   17018:	706d6f43 53746361 6f746365 ffff0072     CompactSector...

00017028 <__func__.13470>:
   17028:	706d6f43 53746361 6f746365 4e664972     CompactSectorIfN
   17038:	65646565 ffff0064                       eeded...

00017040 <__func__.13477>:
   17040:	706d6f43 49746361 006d6574              CompactItem.

0001704c <__func__.13511>:
   1704c:	764e5f53 6574495f 696e496d 6d495f74     S_Nv_ItemInit_Im
   1705c:	ff006c70                                pl..

00017060 <__func__.13524>:
   17060:	764e5f53 6972575f 495f6574 006c706d     S_Nv_Write_Impl.

00017070 <__func__.13535>:
   17070:	764e5f53 6165525f 6d495f64 ff006c70     S_Nv_Read_Impl..

00017080 <__func__.13540>:
   17080:	764e5f53 6574495f 6e654c6d 5f687467     S_Nv_ItemLength_
   17090:	6c706d49 ffffff00 20553028 69203d21     Impl....(0U != i
   170a0:	446d6574 72637365 6574692e 7a69536d     temDescr.itemSiz
   170b0:	26202965 4e282026 204c4c55 69203d21     e) && (NULL != i
   170c0:	446d6574 72637365 6574692e 7461446d     temDescr.itemDat
   170d0:	00002961 732f2e2e 412f6372 742f4653     a)..../src/ASF/t
   170e0:	64726968 74726170 69772f79 656c6572     hirdparty/wirele
   170f0:	4c2f7373 5f61526f 2f503250 76726573     ss/LoRa_P2P/serv
   17100:	73656369 7364702f 6372732f 2f6c772f     ices/pds/src/wl/
   17110:	64506c77 74614473 72655361 2e726576     wlPdsDataServer.
   17120:	00000063 4e5f5328 65525f76 6e727574     c...(S_Nv_Return
   17130:	756c6156 69445f65 746f4e64 73697845     Value_DidNotExis
   17140:	3d3d2074 74657220 7c7c2029 5f532820     t == ret) || (S_
   17150:	525f764e 72757465 6c61566e 4f5f6575     Nv_ReturnValue_O
   17160:	3d3d206b 74657220 ffff0029              k == ret)...

0001716c <__func__.13202>:
   1716c:	53736470 65726f74 6d657449 6b736154     pdsStoreItemTask
   1717c:	646e6148 0072656c                       Handler.

00017184 <__func__.13222>:
   17184:	53736470 65726f74 6d657449 ffffff00     pdsStoreItem....
   17194:	20746572 53203d3d 5f764e5f 75746552     ret == S_Nv_Retu
   171a4:	61566e72 5f65756c ff006b4f              rnValue_Ok..

000171b0 <mySecurityKey>:
   171b0:	03020100 07060504 0b0a0908 0f0e0d0c     ................
   171c0:	0000a0a4 0000a0b4 0000a0ba 0000a0c0     ................
   171d0:	0000a0c6 0000a0cc 0000a0d2 0000a0d8     ................
   171e0:	0000a0de 0000a0e4 0000a0ea 0000a0f0     ................
   171f0:	0000a0f6 0000a0fc 0000a102 0000a108     ................
   17200:	0000a10e 0000a114 0000a11a 0000a120     ............ ...
   17210:	0000a126 0000a12c 0000a132 0000a138     &...,...2...8...
   17220:	0000a13e 0000a144 0000a288 0000a1e8     >...D...........
   17230:	0000a268 0000a288 0000a268 0000a288     h.......h.......
   17240:	0000a288 0000a288 0000a1e8 0000a288     ................
   17250:	0000a288 0000a288 0000a288 0000a288     ................
   17260:	0000a288 0000a288 0000a2b0 0a0d0a0d     ................
   17270:	4120794d 65726464 203a7373 00007830     My Address: 0x..
   17280:	41502020 3a44494e 00783020 68432020       PANID: 0x.  Ch
   17290:	656e6e61 00203a6c 6f430a0d 63656e6e     annel: ...Connec
   172a0:	6e6f6974 65500920 6f4c7265 6441676e     tion .PeerLongAd
   172b0:	73657264 50092073 49726565 206f666e     dress .PeerInfo 
   172c0:	4f785209 6174536e 31737574 0000000d     .RxOnStatus1....
   172d0:	00090909 0000742f 0a0d0a0d 6e6e6f43     ..../t......Conn
   172e0:	69746365 20206e6f 50202020 4c726565     ection     PeerL
   172f0:	41676e6f 65726464 20207373 50202020     ongAddress     P
   17300:	49726565 096f666e 6e4f7852 74617453     eerInfo.RxOnStat
   17310:	000d7375 20202020 20202020 20202020     us..            
   17320:	00000020 20202020 ffffff00 63530a0d      ...    ......Sc
   17330:	43206e61 6e6e6168 00206c65 41200a0d     an Channel ... A
   17340:	54206b63 6f656d69 000d7475              ck Timeout..

0001734c <taskHandlers>:
   1734c:	0000ca2d 0000ddfd 0000d3f5 00008fd5     -...............
   1735c:	000074d9                                .t..

00017360 <tc_interrupt_vectors.13447>:
   17360:	00151211 ffffff00                       ........

00017368 <lorawanHandlers>:
   17368:	0000d2a9 0000d1bd 0000d37d fffffffd     ........}.......

00017378 <radioTaskHandlers>:
   17378:	0000e9f1 0000eaf1 0000e811 0000e095     ................
   17388:	000118e1                                ....

0001738c <FskSyncWordBuff>:
   1738c:	01c194c1                                         ...

0001738f <macEndDevCmdReplyLen>:
   1738f:	02010201 01010203 0c0a0802                       .........

00017398 <maxEIRPTable>:
   17398:	0d0c0a08 1412100e 1b1a1815 24211e1d     ..............!$
   173a8:	0001264c 0001261c 0001262e 00012570     L&...&...&..p%..
   173b8:	0001262e 00012612 0001262e 00012570     .&...&...&..p%..
   173c8:	0001261c 0001261c 00012612 00012570     .&...&...&..p%..
   173d8:	00012578 00012578 00012578 00012634     x%..x%..x%..4&..
   173e8:	0001261c 0001261c 000125f0 000126d4     .&...&...%...&..
   173f8:	000125f0 00012612 000125f0 000126d4     .%...&...%...&..
   17408:	0001261c 0001261c 00012612 000126d4     .&...&...&...&..
   17418:	00012578 00012578 00012578 000126de     x%..x%..x%...&..
   17428:	000129cc 0001291c 0001291c 0001291a     .)...)...)...)..
   17438:	000129be 000129be 000129b4 0001291a     .)...)...)...)..
   17448:	000129be 000129b4 000129be 0001291a     .)...)...)...)..
   17458:	000129c4 000129c4 000129c4 00012a54     .)...)...)..T*..
   17468:	0001379c 0001377e 00013738 00013656     .7..~7..87..V6..
   17478:	00013738 00013770 00013738 00013656     87..p7..87..V6..
   17488:	0001377e 0001377e 00013770 00013656     ~7..~7..p7..V6..
   17498:	0001364e 0001364e 0001364e 000139b4     N6..N6..N6...9..
   174a8:	00013dfc 00013cbc 00013cbc 00013cb8     .=...<...<...<..
   174b8:	00013dd4 00013dd4 00013dc6 00013cb8     .=...=...=...<..
   174c8:	00013dd4 00013dc6 00013dd4 00013cb8     .=...=...=...<..
   174d8:	00013ddc 00013ddc 00013ddc 00013fe0     .=...=...=...?..
   174e8:	7566202c 6974636e 203a6e6f 73736100     , function: .ass
   174f8:	69747265 22206e6f 20227325 6c696166     ertion "%s" fail
   17508:	203a6465 656c6966 73252220 6c202c22     ed: file "%s", l
   17518:	20656e69 73256425 000a7325              ine %d%s%s..

00017524 <_global_impure_ptr>:
   17524:	2000002c 2b302d23 6c680020 6665004c     ,.. #-0+ .hlL.ef
   17534:	47464567 32313000 36353433 41393837     gEFG.0123456789A
   17544:	45444342 31300046 35343332 39383736     BCDEF.0123456789
   17554:	64636261 ff006665                       abcdef..

0001755c <__sf_fake_stderr>:
	...

0001757c <__sf_fake_stdin>:
	...

0001759c <__sf_fake_stdout>:
	...

000175bc <_init>:
   175bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   175be:	46c0      	nop			; (mov r8, r8)
   175c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   175c2:	bc08      	pop	{r3}
   175c4:	469e      	mov	lr, r3
   175c6:	4770      	bx	lr

000175c8 <__init_array_start>:
   175c8:	00004429 	.word	0x00004429

000175cc <_fini>:
   175cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   175ce:	46c0      	nop			; (mov r8, r8)
   175d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   175d2:	bc08      	pop	{r3}
   175d4:	469e      	mov	lr, r3
   175d6:	4770      	bx	lr

000175d8 <__fini_array_start>:
   175d8:	00004401 	.word	0x00004401
