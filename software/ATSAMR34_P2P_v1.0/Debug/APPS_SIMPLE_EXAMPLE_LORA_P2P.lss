
APPS_SIMPLE_EXAMPLE_LORA_P2P.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00017df8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00017df8  00017df8  00027df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000090  20000000  00017e00  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  00030090  2**0
                  CONTENTS
  4 .bss          00003338  20000090  00017e90  00030090  2**3
                  ALLOC
  5 .stack        00002000  200033c8  0001b1c8  00030090  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
  7 .comment      0000008c  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
  8 .debug_info   0009c217  00000000  00000000  00030144  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000d436  00000000  00000000  000cc35b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001eaa5  00000000  00000000  000d9791  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000018d0  00000000  00000000  000f8236  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002630  00000000  00000000  000f9b06  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003280c  00000000  00000000  000fc136  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00035bf2  00000000  00000000  0012e942  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b4ba3  00000000  00000000  00164534  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000052a0  00000000  00000000  002190d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c8 53 00 20 b9 76 00 00 b5 76 00 00 b5 76 00 00     .S. .v...v...v..
	...
      2c:	b5 76 00 00 00 00 00 00 00 00 00 00 b5 76 00 00     .v...........v..
      3c:	b5 76 00 00 b5 76 00 00 b5 76 00 00 f1 51 00 00     .v...v...v...Q..
      4c:	ad 4d 00 00 b5 76 00 00 b5 76 00 00 b5 76 00 00     .M...v...v...v..
      5c:	b5 76 00 00 c9 5c 00 00 d9 5c 00 00 e9 5c 00 00     .v...\...\...\..
      6c:	f9 5c 00 00 09 5d 00 00 19 5d 00 00 b5 76 00 00     .\...]...]...v..
      7c:	b5 76 00 00 b5 76 00 00 89 72 00 00 99 72 00 00     .v...v...r...r..
      8c:	b5 76 00 00 b5 76 00 00 a9 72 00 00 b5 76 00 00     .v...v...r...v..
      9c:	b5 76 00 00 b5 76 00 00 b5 76 00 00 25 4d 00 00     .v...v...v..%M..
      ac:	b5 76 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .v..............
	...

00000400 <__d_nv_mem_start>:
     400:	ffffffff 	.word	0xffffffff
     404:	ffffffff 	.word	0xffffffff
     408:	ffffffff 	.word	0xffffffff
     40c:	ffffffff 	.word	0xffffffff
     410:	ffffffff 	.word	0xffffffff
     414:	ffffffff 	.word	0xffffffff
     418:	ffffffff 	.word	0xffffffff
     41c:	ffffffff 	.word	0xffffffff
     420:	ffffffff 	.word	0xffffffff
     424:	ffffffff 	.word	0xffffffff
     428:	ffffffff 	.word	0xffffffff
     42c:	ffffffff 	.word	0xffffffff
     430:	ffffffff 	.word	0xffffffff
     434:	ffffffff 	.word	0xffffffff
     438:	ffffffff 	.word	0xffffffff
     43c:	ffffffff 	.word	0xffffffff
     440:	ffffffff 	.word	0xffffffff
     444:	ffffffff 	.word	0xffffffff
     448:	ffffffff 	.word	0xffffffff
     44c:	ffffffff 	.word	0xffffffff
     450:	ffffffff 	.word	0xffffffff
     454:	ffffffff 	.word	0xffffffff
     458:	ffffffff 	.word	0xffffffff
     45c:	ffffffff 	.word	0xffffffff
     460:	ffffffff 	.word	0xffffffff
     464:	ffffffff 	.word	0xffffffff
     468:	ffffffff 	.word	0xffffffff
     46c:	ffffffff 	.word	0xffffffff
     470:	ffffffff 	.word	0xffffffff
     474:	ffffffff 	.word	0xffffffff
     478:	ffffffff 	.word	0xffffffff
     47c:	ffffffff 	.word	0xffffffff
     480:	ffffffff 	.word	0xffffffff
     484:	ffffffff 	.word	0xffffffff
     488:	ffffffff 	.word	0xffffffff
     48c:	ffffffff 	.word	0xffffffff
     490:	ffffffff 	.word	0xffffffff
     494:	ffffffff 	.word	0xffffffff
     498:	ffffffff 	.word	0xffffffff
     49c:	ffffffff 	.word	0xffffffff
     4a0:	ffffffff 	.word	0xffffffff
     4a4:	ffffffff 	.word	0xffffffff
     4a8:	ffffffff 	.word	0xffffffff
     4ac:	ffffffff 	.word	0xffffffff
     4b0:	ffffffff 	.word	0xffffffff
     4b4:	ffffffff 	.word	0xffffffff
     4b8:	ffffffff 	.word	0xffffffff
     4bc:	ffffffff 	.word	0xffffffff
     4c0:	ffffffff 	.word	0xffffffff
     4c4:	ffffffff 	.word	0xffffffff
     4c8:	ffffffff 	.word	0xffffffff
     4cc:	ffffffff 	.word	0xffffffff
     4d0:	ffffffff 	.word	0xffffffff
     4d4:	ffffffff 	.word	0xffffffff
     4d8:	ffffffff 	.word	0xffffffff
     4dc:	ffffffff 	.word	0xffffffff
     4e0:	ffffffff 	.word	0xffffffff
     4e4:	ffffffff 	.word	0xffffffff
     4e8:	ffffffff 	.word	0xffffffff
     4ec:	ffffffff 	.word	0xffffffff
     4f0:	ffffffff 	.word	0xffffffff
     4f4:	ffffffff 	.word	0xffffffff
     4f8:	ffffffff 	.word	0xffffffff
     4fc:	ffffffff 	.word	0xffffffff
     500:	ffffffff 	.word	0xffffffff
     504:	ffffffff 	.word	0xffffffff
     508:	ffffffff 	.word	0xffffffff
     50c:	ffffffff 	.word	0xffffffff
     510:	ffffffff 	.word	0xffffffff
     514:	ffffffff 	.word	0xffffffff
     518:	ffffffff 	.word	0xffffffff
     51c:	ffffffff 	.word	0xffffffff
     520:	ffffffff 	.word	0xffffffff
     524:	ffffffff 	.word	0xffffffff
     528:	ffffffff 	.word	0xffffffff
     52c:	ffffffff 	.word	0xffffffff
     530:	ffffffff 	.word	0xffffffff
     534:	ffffffff 	.word	0xffffffff
     538:	ffffffff 	.word	0xffffffff
     53c:	ffffffff 	.word	0xffffffff
     540:	ffffffff 	.word	0xffffffff
     544:	ffffffff 	.word	0xffffffff
     548:	ffffffff 	.word	0xffffffff
     54c:	ffffffff 	.word	0xffffffff
     550:	ffffffff 	.word	0xffffffff
     554:	ffffffff 	.word	0xffffffff
     558:	ffffffff 	.word	0xffffffff
     55c:	ffffffff 	.word	0xffffffff
     560:	ffffffff 	.word	0xffffffff
     564:	ffffffff 	.word	0xffffffff
     568:	ffffffff 	.word	0xffffffff
     56c:	ffffffff 	.word	0xffffffff
     570:	ffffffff 	.word	0xffffffff
     574:	ffffffff 	.word	0xffffffff
     578:	ffffffff 	.word	0xffffffff
     57c:	ffffffff 	.word	0xffffffff
     580:	ffffffff 	.word	0xffffffff
     584:	ffffffff 	.word	0xffffffff
     588:	ffffffff 	.word	0xffffffff
     58c:	ffffffff 	.word	0xffffffff
     590:	ffffffff 	.word	0xffffffff
     594:	ffffffff 	.word	0xffffffff
     598:	ffffffff 	.word	0xffffffff
     59c:	ffffffff 	.word	0xffffffff
     5a0:	ffffffff 	.word	0xffffffff
     5a4:	ffffffff 	.word	0xffffffff
     5a8:	ffffffff 	.word	0xffffffff
     5ac:	ffffffff 	.word	0xffffffff
     5b0:	ffffffff 	.word	0xffffffff
     5b4:	ffffffff 	.word	0xffffffff
     5b8:	ffffffff 	.word	0xffffffff
     5bc:	ffffffff 	.word	0xffffffff
     5c0:	ffffffff 	.word	0xffffffff
     5c4:	ffffffff 	.word	0xffffffff
     5c8:	ffffffff 	.word	0xffffffff
     5cc:	ffffffff 	.word	0xffffffff
     5d0:	ffffffff 	.word	0xffffffff
     5d4:	ffffffff 	.word	0xffffffff
     5d8:	ffffffff 	.word	0xffffffff
     5dc:	ffffffff 	.word	0xffffffff
     5e0:	ffffffff 	.word	0xffffffff
     5e4:	ffffffff 	.word	0xffffffff
     5e8:	ffffffff 	.word	0xffffffff
     5ec:	ffffffff 	.word	0xffffffff
     5f0:	ffffffff 	.word	0xffffffff
     5f4:	ffffffff 	.word	0xffffffff
     5f8:	ffffffff 	.word	0xffffffff
     5fc:	ffffffff 	.word	0xffffffff
     600:	ffffffff 	.word	0xffffffff
     604:	ffffffff 	.word	0xffffffff
     608:	ffffffff 	.word	0xffffffff
     60c:	ffffffff 	.word	0xffffffff
     610:	ffffffff 	.word	0xffffffff
     614:	ffffffff 	.word	0xffffffff
     618:	ffffffff 	.word	0xffffffff
     61c:	ffffffff 	.word	0xffffffff
     620:	ffffffff 	.word	0xffffffff
     624:	ffffffff 	.word	0xffffffff
     628:	ffffffff 	.word	0xffffffff
     62c:	ffffffff 	.word	0xffffffff
     630:	ffffffff 	.word	0xffffffff
     634:	ffffffff 	.word	0xffffffff
     638:	ffffffff 	.word	0xffffffff
     63c:	ffffffff 	.word	0xffffffff
     640:	ffffffff 	.word	0xffffffff
     644:	ffffffff 	.word	0xffffffff
     648:	ffffffff 	.word	0xffffffff
     64c:	ffffffff 	.word	0xffffffff
     650:	ffffffff 	.word	0xffffffff
     654:	ffffffff 	.word	0xffffffff
     658:	ffffffff 	.word	0xffffffff
     65c:	ffffffff 	.word	0xffffffff
     660:	ffffffff 	.word	0xffffffff
     664:	ffffffff 	.word	0xffffffff
     668:	ffffffff 	.word	0xffffffff
     66c:	ffffffff 	.word	0xffffffff
     670:	ffffffff 	.word	0xffffffff
     674:	ffffffff 	.word	0xffffffff
     678:	ffffffff 	.word	0xffffffff
     67c:	ffffffff 	.word	0xffffffff
     680:	ffffffff 	.word	0xffffffff
     684:	ffffffff 	.word	0xffffffff
     688:	ffffffff 	.word	0xffffffff
     68c:	ffffffff 	.word	0xffffffff
     690:	ffffffff 	.word	0xffffffff
     694:	ffffffff 	.word	0xffffffff
     698:	ffffffff 	.word	0xffffffff
     69c:	ffffffff 	.word	0xffffffff
     6a0:	ffffffff 	.word	0xffffffff
     6a4:	ffffffff 	.word	0xffffffff
     6a8:	ffffffff 	.word	0xffffffff
     6ac:	ffffffff 	.word	0xffffffff
     6b0:	ffffffff 	.word	0xffffffff
     6b4:	ffffffff 	.word	0xffffffff
     6b8:	ffffffff 	.word	0xffffffff
     6bc:	ffffffff 	.word	0xffffffff
     6c0:	ffffffff 	.word	0xffffffff
     6c4:	ffffffff 	.word	0xffffffff
     6c8:	ffffffff 	.word	0xffffffff
     6cc:	ffffffff 	.word	0xffffffff
     6d0:	ffffffff 	.word	0xffffffff
     6d4:	ffffffff 	.word	0xffffffff
     6d8:	ffffffff 	.word	0xffffffff
     6dc:	ffffffff 	.word	0xffffffff
     6e0:	ffffffff 	.word	0xffffffff
     6e4:	ffffffff 	.word	0xffffffff
     6e8:	ffffffff 	.word	0xffffffff
     6ec:	ffffffff 	.word	0xffffffff
     6f0:	ffffffff 	.word	0xffffffff
     6f4:	ffffffff 	.word	0xffffffff
     6f8:	ffffffff 	.word	0xffffffff
     6fc:	ffffffff 	.word	0xffffffff
     700:	ffffffff 	.word	0xffffffff
     704:	ffffffff 	.word	0xffffffff
     708:	ffffffff 	.word	0xffffffff
     70c:	ffffffff 	.word	0xffffffff
     710:	ffffffff 	.word	0xffffffff
     714:	ffffffff 	.word	0xffffffff
     718:	ffffffff 	.word	0xffffffff
     71c:	ffffffff 	.word	0xffffffff
     720:	ffffffff 	.word	0xffffffff
     724:	ffffffff 	.word	0xffffffff
     728:	ffffffff 	.word	0xffffffff
     72c:	ffffffff 	.word	0xffffffff
     730:	ffffffff 	.word	0xffffffff
     734:	ffffffff 	.word	0xffffffff
     738:	ffffffff 	.word	0xffffffff
     73c:	ffffffff 	.word	0xffffffff
     740:	ffffffff 	.word	0xffffffff
     744:	ffffffff 	.word	0xffffffff
     748:	ffffffff 	.word	0xffffffff
     74c:	ffffffff 	.word	0xffffffff
     750:	ffffffff 	.word	0xffffffff
     754:	ffffffff 	.word	0xffffffff
     758:	ffffffff 	.word	0xffffffff
     75c:	ffffffff 	.word	0xffffffff
     760:	ffffffff 	.word	0xffffffff
     764:	ffffffff 	.word	0xffffffff
     768:	ffffffff 	.word	0xffffffff
     76c:	ffffffff 	.word	0xffffffff
     770:	ffffffff 	.word	0xffffffff
     774:	ffffffff 	.word	0xffffffff
     778:	ffffffff 	.word	0xffffffff
     77c:	ffffffff 	.word	0xffffffff
     780:	ffffffff 	.word	0xffffffff
     784:	ffffffff 	.word	0xffffffff
     788:	ffffffff 	.word	0xffffffff
     78c:	ffffffff 	.word	0xffffffff
     790:	ffffffff 	.word	0xffffffff
     794:	ffffffff 	.word	0xffffffff
     798:	ffffffff 	.word	0xffffffff
     79c:	ffffffff 	.word	0xffffffff
     7a0:	ffffffff 	.word	0xffffffff
     7a4:	ffffffff 	.word	0xffffffff
     7a8:	ffffffff 	.word	0xffffffff
     7ac:	ffffffff 	.word	0xffffffff
     7b0:	ffffffff 	.word	0xffffffff
     7b4:	ffffffff 	.word	0xffffffff
     7b8:	ffffffff 	.word	0xffffffff
     7bc:	ffffffff 	.word	0xffffffff
     7c0:	ffffffff 	.word	0xffffffff
     7c4:	ffffffff 	.word	0xffffffff
     7c8:	ffffffff 	.word	0xffffffff
     7cc:	ffffffff 	.word	0xffffffff
     7d0:	ffffffff 	.word	0xffffffff
     7d4:	ffffffff 	.word	0xffffffff
     7d8:	ffffffff 	.word	0xffffffff
     7dc:	ffffffff 	.word	0xffffffff
     7e0:	ffffffff 	.word	0xffffffff
     7e4:	ffffffff 	.word	0xffffffff
     7e8:	ffffffff 	.word	0xffffffff
     7ec:	ffffffff 	.word	0xffffffff
     7f0:	ffffffff 	.word	0xffffffff
     7f4:	ffffffff 	.word	0xffffffff
     7f8:	ffffffff 	.word	0xffffffff
     7fc:	ffffffff 	.word	0xffffffff
     800:	ffffffff 	.word	0xffffffff
     804:	ffffffff 	.word	0xffffffff
     808:	ffffffff 	.word	0xffffffff
     80c:	ffffffff 	.word	0xffffffff
     810:	ffffffff 	.word	0xffffffff
     814:	ffffffff 	.word	0xffffffff
     818:	ffffffff 	.word	0xffffffff
     81c:	ffffffff 	.word	0xffffffff
     820:	ffffffff 	.word	0xffffffff
     824:	ffffffff 	.word	0xffffffff
     828:	ffffffff 	.word	0xffffffff
     82c:	ffffffff 	.word	0xffffffff
     830:	ffffffff 	.word	0xffffffff
     834:	ffffffff 	.word	0xffffffff
     838:	ffffffff 	.word	0xffffffff
     83c:	ffffffff 	.word	0xffffffff
     840:	ffffffff 	.word	0xffffffff
     844:	ffffffff 	.word	0xffffffff
     848:	ffffffff 	.word	0xffffffff
     84c:	ffffffff 	.word	0xffffffff
     850:	ffffffff 	.word	0xffffffff
     854:	ffffffff 	.word	0xffffffff
     858:	ffffffff 	.word	0xffffffff
     85c:	ffffffff 	.word	0xffffffff
     860:	ffffffff 	.word	0xffffffff
     864:	ffffffff 	.word	0xffffffff
     868:	ffffffff 	.word	0xffffffff
     86c:	ffffffff 	.word	0xffffffff
     870:	ffffffff 	.word	0xffffffff
     874:	ffffffff 	.word	0xffffffff
     878:	ffffffff 	.word	0xffffffff
     87c:	ffffffff 	.word	0xffffffff
     880:	ffffffff 	.word	0xffffffff
     884:	ffffffff 	.word	0xffffffff
     888:	ffffffff 	.word	0xffffffff
     88c:	ffffffff 	.word	0xffffffff
     890:	ffffffff 	.word	0xffffffff
     894:	ffffffff 	.word	0xffffffff
     898:	ffffffff 	.word	0xffffffff
     89c:	ffffffff 	.word	0xffffffff
     8a0:	ffffffff 	.word	0xffffffff
     8a4:	ffffffff 	.word	0xffffffff
     8a8:	ffffffff 	.word	0xffffffff
     8ac:	ffffffff 	.word	0xffffffff
     8b0:	ffffffff 	.word	0xffffffff
     8b4:	ffffffff 	.word	0xffffffff
     8b8:	ffffffff 	.word	0xffffffff
     8bc:	ffffffff 	.word	0xffffffff
     8c0:	ffffffff 	.word	0xffffffff
     8c4:	ffffffff 	.word	0xffffffff
     8c8:	ffffffff 	.word	0xffffffff
     8cc:	ffffffff 	.word	0xffffffff
     8d0:	ffffffff 	.word	0xffffffff
     8d4:	ffffffff 	.word	0xffffffff
     8d8:	ffffffff 	.word	0xffffffff
     8dc:	ffffffff 	.word	0xffffffff
     8e0:	ffffffff 	.word	0xffffffff
     8e4:	ffffffff 	.word	0xffffffff
     8e8:	ffffffff 	.word	0xffffffff
     8ec:	ffffffff 	.word	0xffffffff
     8f0:	ffffffff 	.word	0xffffffff
     8f4:	ffffffff 	.word	0xffffffff
     8f8:	ffffffff 	.word	0xffffffff
     8fc:	ffffffff 	.word	0xffffffff
     900:	ffffffff 	.word	0xffffffff
     904:	ffffffff 	.word	0xffffffff
     908:	ffffffff 	.word	0xffffffff
     90c:	ffffffff 	.word	0xffffffff
     910:	ffffffff 	.word	0xffffffff
     914:	ffffffff 	.word	0xffffffff
     918:	ffffffff 	.word	0xffffffff
     91c:	ffffffff 	.word	0xffffffff
     920:	ffffffff 	.word	0xffffffff
     924:	ffffffff 	.word	0xffffffff
     928:	ffffffff 	.word	0xffffffff
     92c:	ffffffff 	.word	0xffffffff
     930:	ffffffff 	.word	0xffffffff
     934:	ffffffff 	.word	0xffffffff
     938:	ffffffff 	.word	0xffffffff
     93c:	ffffffff 	.word	0xffffffff
     940:	ffffffff 	.word	0xffffffff
     944:	ffffffff 	.word	0xffffffff
     948:	ffffffff 	.word	0xffffffff
     94c:	ffffffff 	.word	0xffffffff
     950:	ffffffff 	.word	0xffffffff
     954:	ffffffff 	.word	0xffffffff
     958:	ffffffff 	.word	0xffffffff
     95c:	ffffffff 	.word	0xffffffff
     960:	ffffffff 	.word	0xffffffff
     964:	ffffffff 	.word	0xffffffff
     968:	ffffffff 	.word	0xffffffff
     96c:	ffffffff 	.word	0xffffffff
     970:	ffffffff 	.word	0xffffffff
     974:	ffffffff 	.word	0xffffffff
     978:	ffffffff 	.word	0xffffffff
     97c:	ffffffff 	.word	0xffffffff
     980:	ffffffff 	.word	0xffffffff
     984:	ffffffff 	.word	0xffffffff
     988:	ffffffff 	.word	0xffffffff
     98c:	ffffffff 	.word	0xffffffff
     990:	ffffffff 	.word	0xffffffff
     994:	ffffffff 	.word	0xffffffff
     998:	ffffffff 	.word	0xffffffff
     99c:	ffffffff 	.word	0xffffffff
     9a0:	ffffffff 	.word	0xffffffff
     9a4:	ffffffff 	.word	0xffffffff
     9a8:	ffffffff 	.word	0xffffffff
     9ac:	ffffffff 	.word	0xffffffff
     9b0:	ffffffff 	.word	0xffffffff
     9b4:	ffffffff 	.word	0xffffffff
     9b8:	ffffffff 	.word	0xffffffff
     9bc:	ffffffff 	.word	0xffffffff
     9c0:	ffffffff 	.word	0xffffffff
     9c4:	ffffffff 	.word	0xffffffff
     9c8:	ffffffff 	.word	0xffffffff
     9cc:	ffffffff 	.word	0xffffffff
     9d0:	ffffffff 	.word	0xffffffff
     9d4:	ffffffff 	.word	0xffffffff
     9d8:	ffffffff 	.word	0xffffffff
     9dc:	ffffffff 	.word	0xffffffff
     9e0:	ffffffff 	.word	0xffffffff
     9e4:	ffffffff 	.word	0xffffffff
     9e8:	ffffffff 	.word	0xffffffff
     9ec:	ffffffff 	.word	0xffffffff
     9f0:	ffffffff 	.word	0xffffffff
     9f4:	ffffffff 	.word	0xffffffff
     9f8:	ffffffff 	.word	0xffffffff
     9fc:	ffffffff 	.word	0xffffffff
     a00:	ffffffff 	.word	0xffffffff
     a04:	ffffffff 	.word	0xffffffff
     a08:	ffffffff 	.word	0xffffffff
     a0c:	ffffffff 	.word	0xffffffff
     a10:	ffffffff 	.word	0xffffffff
     a14:	ffffffff 	.word	0xffffffff
     a18:	ffffffff 	.word	0xffffffff
     a1c:	ffffffff 	.word	0xffffffff
     a20:	ffffffff 	.word	0xffffffff
     a24:	ffffffff 	.word	0xffffffff
     a28:	ffffffff 	.word	0xffffffff
     a2c:	ffffffff 	.word	0xffffffff
     a30:	ffffffff 	.word	0xffffffff
     a34:	ffffffff 	.word	0xffffffff
     a38:	ffffffff 	.word	0xffffffff
     a3c:	ffffffff 	.word	0xffffffff
     a40:	ffffffff 	.word	0xffffffff
     a44:	ffffffff 	.word	0xffffffff
     a48:	ffffffff 	.word	0xffffffff
     a4c:	ffffffff 	.word	0xffffffff
     a50:	ffffffff 	.word	0xffffffff
     a54:	ffffffff 	.word	0xffffffff
     a58:	ffffffff 	.word	0xffffffff
     a5c:	ffffffff 	.word	0xffffffff
     a60:	ffffffff 	.word	0xffffffff
     a64:	ffffffff 	.word	0xffffffff
     a68:	ffffffff 	.word	0xffffffff
     a6c:	ffffffff 	.word	0xffffffff
     a70:	ffffffff 	.word	0xffffffff
     a74:	ffffffff 	.word	0xffffffff
     a78:	ffffffff 	.word	0xffffffff
     a7c:	ffffffff 	.word	0xffffffff
     a80:	ffffffff 	.word	0xffffffff
     a84:	ffffffff 	.word	0xffffffff
     a88:	ffffffff 	.word	0xffffffff
     a8c:	ffffffff 	.word	0xffffffff
     a90:	ffffffff 	.word	0xffffffff
     a94:	ffffffff 	.word	0xffffffff
     a98:	ffffffff 	.word	0xffffffff
     a9c:	ffffffff 	.word	0xffffffff
     aa0:	ffffffff 	.word	0xffffffff
     aa4:	ffffffff 	.word	0xffffffff
     aa8:	ffffffff 	.word	0xffffffff
     aac:	ffffffff 	.word	0xffffffff
     ab0:	ffffffff 	.word	0xffffffff
     ab4:	ffffffff 	.word	0xffffffff
     ab8:	ffffffff 	.word	0xffffffff
     abc:	ffffffff 	.word	0xffffffff
     ac0:	ffffffff 	.word	0xffffffff
     ac4:	ffffffff 	.word	0xffffffff
     ac8:	ffffffff 	.word	0xffffffff
     acc:	ffffffff 	.word	0xffffffff
     ad0:	ffffffff 	.word	0xffffffff
     ad4:	ffffffff 	.word	0xffffffff
     ad8:	ffffffff 	.word	0xffffffff
     adc:	ffffffff 	.word	0xffffffff
     ae0:	ffffffff 	.word	0xffffffff
     ae4:	ffffffff 	.word	0xffffffff
     ae8:	ffffffff 	.word	0xffffffff
     aec:	ffffffff 	.word	0xffffffff
     af0:	ffffffff 	.word	0xffffffff
     af4:	ffffffff 	.word	0xffffffff
     af8:	ffffffff 	.word	0xffffffff
     afc:	ffffffff 	.word	0xffffffff
     b00:	ffffffff 	.word	0xffffffff
     b04:	ffffffff 	.word	0xffffffff
     b08:	ffffffff 	.word	0xffffffff
     b0c:	ffffffff 	.word	0xffffffff
     b10:	ffffffff 	.word	0xffffffff
     b14:	ffffffff 	.word	0xffffffff
     b18:	ffffffff 	.word	0xffffffff
     b1c:	ffffffff 	.word	0xffffffff
     b20:	ffffffff 	.word	0xffffffff
     b24:	ffffffff 	.word	0xffffffff
     b28:	ffffffff 	.word	0xffffffff
     b2c:	ffffffff 	.word	0xffffffff
     b30:	ffffffff 	.word	0xffffffff
     b34:	ffffffff 	.word	0xffffffff
     b38:	ffffffff 	.word	0xffffffff
     b3c:	ffffffff 	.word	0xffffffff
     b40:	ffffffff 	.word	0xffffffff
     b44:	ffffffff 	.word	0xffffffff
     b48:	ffffffff 	.word	0xffffffff
     b4c:	ffffffff 	.word	0xffffffff
     b50:	ffffffff 	.word	0xffffffff
     b54:	ffffffff 	.word	0xffffffff
     b58:	ffffffff 	.word	0xffffffff
     b5c:	ffffffff 	.word	0xffffffff
     b60:	ffffffff 	.word	0xffffffff
     b64:	ffffffff 	.word	0xffffffff
     b68:	ffffffff 	.word	0xffffffff
     b6c:	ffffffff 	.word	0xffffffff
     b70:	ffffffff 	.word	0xffffffff
     b74:	ffffffff 	.word	0xffffffff
     b78:	ffffffff 	.word	0xffffffff
     b7c:	ffffffff 	.word	0xffffffff
     b80:	ffffffff 	.word	0xffffffff
     b84:	ffffffff 	.word	0xffffffff
     b88:	ffffffff 	.word	0xffffffff
     b8c:	ffffffff 	.word	0xffffffff
     b90:	ffffffff 	.word	0xffffffff
     b94:	ffffffff 	.word	0xffffffff
     b98:	ffffffff 	.word	0xffffffff
     b9c:	ffffffff 	.word	0xffffffff
     ba0:	ffffffff 	.word	0xffffffff
     ba4:	ffffffff 	.word	0xffffffff
     ba8:	ffffffff 	.word	0xffffffff
     bac:	ffffffff 	.word	0xffffffff
     bb0:	ffffffff 	.word	0xffffffff
     bb4:	ffffffff 	.word	0xffffffff
     bb8:	ffffffff 	.word	0xffffffff
     bbc:	ffffffff 	.word	0xffffffff
     bc0:	ffffffff 	.word	0xffffffff
     bc4:	ffffffff 	.word	0xffffffff
     bc8:	ffffffff 	.word	0xffffffff
     bcc:	ffffffff 	.word	0xffffffff
     bd0:	ffffffff 	.word	0xffffffff
     bd4:	ffffffff 	.word	0xffffffff
     bd8:	ffffffff 	.word	0xffffffff
     bdc:	ffffffff 	.word	0xffffffff
     be0:	ffffffff 	.word	0xffffffff
     be4:	ffffffff 	.word	0xffffffff
     be8:	ffffffff 	.word	0xffffffff
     bec:	ffffffff 	.word	0xffffffff
     bf0:	ffffffff 	.word	0xffffffff
     bf4:	ffffffff 	.word	0xffffffff
     bf8:	ffffffff 	.word	0xffffffff
     bfc:	ffffffff 	.word	0xffffffff
     c00:	ffffffff 	.word	0xffffffff
     c04:	ffffffff 	.word	0xffffffff
     c08:	ffffffff 	.word	0xffffffff
     c0c:	ffffffff 	.word	0xffffffff
     c10:	ffffffff 	.word	0xffffffff
     c14:	ffffffff 	.word	0xffffffff
     c18:	ffffffff 	.word	0xffffffff
     c1c:	ffffffff 	.word	0xffffffff
     c20:	ffffffff 	.word	0xffffffff
     c24:	ffffffff 	.word	0xffffffff
     c28:	ffffffff 	.word	0xffffffff
     c2c:	ffffffff 	.word	0xffffffff
     c30:	ffffffff 	.word	0xffffffff
     c34:	ffffffff 	.word	0xffffffff
     c38:	ffffffff 	.word	0xffffffff
     c3c:	ffffffff 	.word	0xffffffff
     c40:	ffffffff 	.word	0xffffffff
     c44:	ffffffff 	.word	0xffffffff
     c48:	ffffffff 	.word	0xffffffff
     c4c:	ffffffff 	.word	0xffffffff
     c50:	ffffffff 	.word	0xffffffff
     c54:	ffffffff 	.word	0xffffffff
     c58:	ffffffff 	.word	0xffffffff
     c5c:	ffffffff 	.word	0xffffffff
     c60:	ffffffff 	.word	0xffffffff
     c64:	ffffffff 	.word	0xffffffff
     c68:	ffffffff 	.word	0xffffffff
     c6c:	ffffffff 	.word	0xffffffff
     c70:	ffffffff 	.word	0xffffffff
     c74:	ffffffff 	.word	0xffffffff
     c78:	ffffffff 	.word	0xffffffff
     c7c:	ffffffff 	.word	0xffffffff
     c80:	ffffffff 	.word	0xffffffff
     c84:	ffffffff 	.word	0xffffffff
     c88:	ffffffff 	.word	0xffffffff
     c8c:	ffffffff 	.word	0xffffffff
     c90:	ffffffff 	.word	0xffffffff
     c94:	ffffffff 	.word	0xffffffff
     c98:	ffffffff 	.word	0xffffffff
     c9c:	ffffffff 	.word	0xffffffff
     ca0:	ffffffff 	.word	0xffffffff
     ca4:	ffffffff 	.word	0xffffffff
     ca8:	ffffffff 	.word	0xffffffff
     cac:	ffffffff 	.word	0xffffffff
     cb0:	ffffffff 	.word	0xffffffff
     cb4:	ffffffff 	.word	0xffffffff
     cb8:	ffffffff 	.word	0xffffffff
     cbc:	ffffffff 	.word	0xffffffff
     cc0:	ffffffff 	.word	0xffffffff
     cc4:	ffffffff 	.word	0xffffffff
     cc8:	ffffffff 	.word	0xffffffff
     ccc:	ffffffff 	.word	0xffffffff
     cd0:	ffffffff 	.word	0xffffffff
     cd4:	ffffffff 	.word	0xffffffff
     cd8:	ffffffff 	.word	0xffffffff
     cdc:	ffffffff 	.word	0xffffffff
     ce0:	ffffffff 	.word	0xffffffff
     ce4:	ffffffff 	.word	0xffffffff
     ce8:	ffffffff 	.word	0xffffffff
     cec:	ffffffff 	.word	0xffffffff
     cf0:	ffffffff 	.word	0xffffffff
     cf4:	ffffffff 	.word	0xffffffff
     cf8:	ffffffff 	.word	0xffffffff
     cfc:	ffffffff 	.word	0xffffffff
     d00:	ffffffff 	.word	0xffffffff
     d04:	ffffffff 	.word	0xffffffff
     d08:	ffffffff 	.word	0xffffffff
     d0c:	ffffffff 	.word	0xffffffff
     d10:	ffffffff 	.word	0xffffffff
     d14:	ffffffff 	.word	0xffffffff
     d18:	ffffffff 	.word	0xffffffff
     d1c:	ffffffff 	.word	0xffffffff
     d20:	ffffffff 	.word	0xffffffff
     d24:	ffffffff 	.word	0xffffffff
     d28:	ffffffff 	.word	0xffffffff
     d2c:	ffffffff 	.word	0xffffffff
     d30:	ffffffff 	.word	0xffffffff
     d34:	ffffffff 	.word	0xffffffff
     d38:	ffffffff 	.word	0xffffffff
     d3c:	ffffffff 	.word	0xffffffff
     d40:	ffffffff 	.word	0xffffffff
     d44:	ffffffff 	.word	0xffffffff
     d48:	ffffffff 	.word	0xffffffff
     d4c:	ffffffff 	.word	0xffffffff
     d50:	ffffffff 	.word	0xffffffff
     d54:	ffffffff 	.word	0xffffffff
     d58:	ffffffff 	.word	0xffffffff
     d5c:	ffffffff 	.word	0xffffffff
     d60:	ffffffff 	.word	0xffffffff
     d64:	ffffffff 	.word	0xffffffff
     d68:	ffffffff 	.word	0xffffffff
     d6c:	ffffffff 	.word	0xffffffff
     d70:	ffffffff 	.word	0xffffffff
     d74:	ffffffff 	.word	0xffffffff
     d78:	ffffffff 	.word	0xffffffff
     d7c:	ffffffff 	.word	0xffffffff
     d80:	ffffffff 	.word	0xffffffff
     d84:	ffffffff 	.word	0xffffffff
     d88:	ffffffff 	.word	0xffffffff
     d8c:	ffffffff 	.word	0xffffffff
     d90:	ffffffff 	.word	0xffffffff
     d94:	ffffffff 	.word	0xffffffff
     d98:	ffffffff 	.word	0xffffffff
     d9c:	ffffffff 	.word	0xffffffff
     da0:	ffffffff 	.word	0xffffffff
     da4:	ffffffff 	.word	0xffffffff
     da8:	ffffffff 	.word	0xffffffff
     dac:	ffffffff 	.word	0xffffffff
     db0:	ffffffff 	.word	0xffffffff
     db4:	ffffffff 	.word	0xffffffff
     db8:	ffffffff 	.word	0xffffffff
     dbc:	ffffffff 	.word	0xffffffff
     dc0:	ffffffff 	.word	0xffffffff
     dc4:	ffffffff 	.word	0xffffffff
     dc8:	ffffffff 	.word	0xffffffff
     dcc:	ffffffff 	.word	0xffffffff
     dd0:	ffffffff 	.word	0xffffffff
     dd4:	ffffffff 	.word	0xffffffff
     dd8:	ffffffff 	.word	0xffffffff
     ddc:	ffffffff 	.word	0xffffffff
     de0:	ffffffff 	.word	0xffffffff
     de4:	ffffffff 	.word	0xffffffff
     de8:	ffffffff 	.word	0xffffffff
     dec:	ffffffff 	.word	0xffffffff
     df0:	ffffffff 	.word	0xffffffff
     df4:	ffffffff 	.word	0xffffffff
     df8:	ffffffff 	.word	0xffffffff
     dfc:	ffffffff 	.word	0xffffffff
     e00:	ffffffff 	.word	0xffffffff
     e04:	ffffffff 	.word	0xffffffff
     e08:	ffffffff 	.word	0xffffffff
     e0c:	ffffffff 	.word	0xffffffff
     e10:	ffffffff 	.word	0xffffffff
     e14:	ffffffff 	.word	0xffffffff
     e18:	ffffffff 	.word	0xffffffff
     e1c:	ffffffff 	.word	0xffffffff
     e20:	ffffffff 	.word	0xffffffff
     e24:	ffffffff 	.word	0xffffffff
     e28:	ffffffff 	.word	0xffffffff
     e2c:	ffffffff 	.word	0xffffffff
     e30:	ffffffff 	.word	0xffffffff
     e34:	ffffffff 	.word	0xffffffff
     e38:	ffffffff 	.word	0xffffffff
     e3c:	ffffffff 	.word	0xffffffff
     e40:	ffffffff 	.word	0xffffffff
     e44:	ffffffff 	.word	0xffffffff
     e48:	ffffffff 	.word	0xffffffff
     e4c:	ffffffff 	.word	0xffffffff
     e50:	ffffffff 	.word	0xffffffff
     e54:	ffffffff 	.word	0xffffffff
     e58:	ffffffff 	.word	0xffffffff
     e5c:	ffffffff 	.word	0xffffffff
     e60:	ffffffff 	.word	0xffffffff
     e64:	ffffffff 	.word	0xffffffff
     e68:	ffffffff 	.word	0xffffffff
     e6c:	ffffffff 	.word	0xffffffff
     e70:	ffffffff 	.word	0xffffffff
     e74:	ffffffff 	.word	0xffffffff
     e78:	ffffffff 	.word	0xffffffff
     e7c:	ffffffff 	.word	0xffffffff
     e80:	ffffffff 	.word	0xffffffff
     e84:	ffffffff 	.word	0xffffffff
     e88:	ffffffff 	.word	0xffffffff
     e8c:	ffffffff 	.word	0xffffffff
     e90:	ffffffff 	.word	0xffffffff
     e94:	ffffffff 	.word	0xffffffff
     e98:	ffffffff 	.word	0xffffffff
     e9c:	ffffffff 	.word	0xffffffff
     ea0:	ffffffff 	.word	0xffffffff
     ea4:	ffffffff 	.word	0xffffffff
     ea8:	ffffffff 	.word	0xffffffff
     eac:	ffffffff 	.word	0xffffffff
     eb0:	ffffffff 	.word	0xffffffff
     eb4:	ffffffff 	.word	0xffffffff
     eb8:	ffffffff 	.word	0xffffffff
     ebc:	ffffffff 	.word	0xffffffff
     ec0:	ffffffff 	.word	0xffffffff
     ec4:	ffffffff 	.word	0xffffffff
     ec8:	ffffffff 	.word	0xffffffff
     ecc:	ffffffff 	.word	0xffffffff
     ed0:	ffffffff 	.word	0xffffffff
     ed4:	ffffffff 	.word	0xffffffff
     ed8:	ffffffff 	.word	0xffffffff
     edc:	ffffffff 	.word	0xffffffff
     ee0:	ffffffff 	.word	0xffffffff
     ee4:	ffffffff 	.word	0xffffffff
     ee8:	ffffffff 	.word	0xffffffff
     eec:	ffffffff 	.word	0xffffffff
     ef0:	ffffffff 	.word	0xffffffff
     ef4:	ffffffff 	.word	0xffffffff
     ef8:	ffffffff 	.word	0xffffffff
     efc:	ffffffff 	.word	0xffffffff
     f00:	ffffffff 	.word	0xffffffff
     f04:	ffffffff 	.word	0xffffffff
     f08:	ffffffff 	.word	0xffffffff
     f0c:	ffffffff 	.word	0xffffffff
     f10:	ffffffff 	.word	0xffffffff
     f14:	ffffffff 	.word	0xffffffff
     f18:	ffffffff 	.word	0xffffffff
     f1c:	ffffffff 	.word	0xffffffff
     f20:	ffffffff 	.word	0xffffffff
     f24:	ffffffff 	.word	0xffffffff
     f28:	ffffffff 	.word	0xffffffff
     f2c:	ffffffff 	.word	0xffffffff
     f30:	ffffffff 	.word	0xffffffff
     f34:	ffffffff 	.word	0xffffffff
     f38:	ffffffff 	.word	0xffffffff
     f3c:	ffffffff 	.word	0xffffffff
     f40:	ffffffff 	.word	0xffffffff
     f44:	ffffffff 	.word	0xffffffff
     f48:	ffffffff 	.word	0xffffffff
     f4c:	ffffffff 	.word	0xffffffff
     f50:	ffffffff 	.word	0xffffffff
     f54:	ffffffff 	.word	0xffffffff
     f58:	ffffffff 	.word	0xffffffff
     f5c:	ffffffff 	.word	0xffffffff
     f60:	ffffffff 	.word	0xffffffff
     f64:	ffffffff 	.word	0xffffffff
     f68:	ffffffff 	.word	0xffffffff
     f6c:	ffffffff 	.word	0xffffffff
     f70:	ffffffff 	.word	0xffffffff
     f74:	ffffffff 	.word	0xffffffff
     f78:	ffffffff 	.word	0xffffffff
     f7c:	ffffffff 	.word	0xffffffff
     f80:	ffffffff 	.word	0xffffffff
     f84:	ffffffff 	.word	0xffffffff
     f88:	ffffffff 	.word	0xffffffff
     f8c:	ffffffff 	.word	0xffffffff
     f90:	ffffffff 	.word	0xffffffff
     f94:	ffffffff 	.word	0xffffffff
     f98:	ffffffff 	.word	0xffffffff
     f9c:	ffffffff 	.word	0xffffffff
     fa0:	ffffffff 	.word	0xffffffff
     fa4:	ffffffff 	.word	0xffffffff
     fa8:	ffffffff 	.word	0xffffffff
     fac:	ffffffff 	.word	0xffffffff
     fb0:	ffffffff 	.word	0xffffffff
     fb4:	ffffffff 	.word	0xffffffff
     fb8:	ffffffff 	.word	0xffffffff
     fbc:	ffffffff 	.word	0xffffffff
     fc0:	ffffffff 	.word	0xffffffff
     fc4:	ffffffff 	.word	0xffffffff
     fc8:	ffffffff 	.word	0xffffffff
     fcc:	ffffffff 	.word	0xffffffff
     fd0:	ffffffff 	.word	0xffffffff
     fd4:	ffffffff 	.word	0xffffffff
     fd8:	ffffffff 	.word	0xffffffff
     fdc:	ffffffff 	.word	0xffffffff
     fe0:	ffffffff 	.word	0xffffffff
     fe4:	ffffffff 	.word	0xffffffff
     fe8:	ffffffff 	.word	0xffffffff
     fec:	ffffffff 	.word	0xffffffff
     ff0:	ffffffff 	.word	0xffffffff
     ff4:	ffffffff 	.word	0xffffffff
     ff8:	ffffffff 	.word	0xffffffff
     ffc:	ffffffff 	.word	0xffffffff
    1000:	ffffffff 	.word	0xffffffff
    1004:	ffffffff 	.word	0xffffffff
    1008:	ffffffff 	.word	0xffffffff
    100c:	ffffffff 	.word	0xffffffff
    1010:	ffffffff 	.word	0xffffffff
    1014:	ffffffff 	.word	0xffffffff
    1018:	ffffffff 	.word	0xffffffff
    101c:	ffffffff 	.word	0xffffffff
    1020:	ffffffff 	.word	0xffffffff
    1024:	ffffffff 	.word	0xffffffff
    1028:	ffffffff 	.word	0xffffffff
    102c:	ffffffff 	.word	0xffffffff
    1030:	ffffffff 	.word	0xffffffff
    1034:	ffffffff 	.word	0xffffffff
    1038:	ffffffff 	.word	0xffffffff
    103c:	ffffffff 	.word	0xffffffff
    1040:	ffffffff 	.word	0xffffffff
    1044:	ffffffff 	.word	0xffffffff
    1048:	ffffffff 	.word	0xffffffff
    104c:	ffffffff 	.word	0xffffffff
    1050:	ffffffff 	.word	0xffffffff
    1054:	ffffffff 	.word	0xffffffff
    1058:	ffffffff 	.word	0xffffffff
    105c:	ffffffff 	.word	0xffffffff
    1060:	ffffffff 	.word	0xffffffff
    1064:	ffffffff 	.word	0xffffffff
    1068:	ffffffff 	.word	0xffffffff
    106c:	ffffffff 	.word	0xffffffff
    1070:	ffffffff 	.word	0xffffffff
    1074:	ffffffff 	.word	0xffffffff
    1078:	ffffffff 	.word	0xffffffff
    107c:	ffffffff 	.word	0xffffffff
    1080:	ffffffff 	.word	0xffffffff
    1084:	ffffffff 	.word	0xffffffff
    1088:	ffffffff 	.word	0xffffffff
    108c:	ffffffff 	.word	0xffffffff
    1090:	ffffffff 	.word	0xffffffff
    1094:	ffffffff 	.word	0xffffffff
    1098:	ffffffff 	.word	0xffffffff
    109c:	ffffffff 	.word	0xffffffff
    10a0:	ffffffff 	.word	0xffffffff
    10a4:	ffffffff 	.word	0xffffffff
    10a8:	ffffffff 	.word	0xffffffff
    10ac:	ffffffff 	.word	0xffffffff
    10b0:	ffffffff 	.word	0xffffffff
    10b4:	ffffffff 	.word	0xffffffff
    10b8:	ffffffff 	.word	0xffffffff
    10bc:	ffffffff 	.word	0xffffffff
    10c0:	ffffffff 	.word	0xffffffff
    10c4:	ffffffff 	.word	0xffffffff
    10c8:	ffffffff 	.word	0xffffffff
    10cc:	ffffffff 	.word	0xffffffff
    10d0:	ffffffff 	.word	0xffffffff
    10d4:	ffffffff 	.word	0xffffffff
    10d8:	ffffffff 	.word	0xffffffff
    10dc:	ffffffff 	.word	0xffffffff
    10e0:	ffffffff 	.word	0xffffffff
    10e4:	ffffffff 	.word	0xffffffff
    10e8:	ffffffff 	.word	0xffffffff
    10ec:	ffffffff 	.word	0xffffffff
    10f0:	ffffffff 	.word	0xffffffff
    10f4:	ffffffff 	.word	0xffffffff
    10f8:	ffffffff 	.word	0xffffffff
    10fc:	ffffffff 	.word	0xffffffff
    1100:	ffffffff 	.word	0xffffffff
    1104:	ffffffff 	.word	0xffffffff
    1108:	ffffffff 	.word	0xffffffff
    110c:	ffffffff 	.word	0xffffffff
    1110:	ffffffff 	.word	0xffffffff
    1114:	ffffffff 	.word	0xffffffff
    1118:	ffffffff 	.word	0xffffffff
    111c:	ffffffff 	.word	0xffffffff
    1120:	ffffffff 	.word	0xffffffff
    1124:	ffffffff 	.word	0xffffffff
    1128:	ffffffff 	.word	0xffffffff
    112c:	ffffffff 	.word	0xffffffff
    1130:	ffffffff 	.word	0xffffffff
    1134:	ffffffff 	.word	0xffffffff
    1138:	ffffffff 	.word	0xffffffff
    113c:	ffffffff 	.word	0xffffffff
    1140:	ffffffff 	.word	0xffffffff
    1144:	ffffffff 	.word	0xffffffff
    1148:	ffffffff 	.word	0xffffffff
    114c:	ffffffff 	.word	0xffffffff
    1150:	ffffffff 	.word	0xffffffff
    1154:	ffffffff 	.word	0xffffffff
    1158:	ffffffff 	.word	0xffffffff
    115c:	ffffffff 	.word	0xffffffff
    1160:	ffffffff 	.word	0xffffffff
    1164:	ffffffff 	.word	0xffffffff
    1168:	ffffffff 	.word	0xffffffff
    116c:	ffffffff 	.word	0xffffffff
    1170:	ffffffff 	.word	0xffffffff
    1174:	ffffffff 	.word	0xffffffff
    1178:	ffffffff 	.word	0xffffffff
    117c:	ffffffff 	.word	0xffffffff
    1180:	ffffffff 	.word	0xffffffff
    1184:	ffffffff 	.word	0xffffffff
    1188:	ffffffff 	.word	0xffffffff
    118c:	ffffffff 	.word	0xffffffff
    1190:	ffffffff 	.word	0xffffffff
    1194:	ffffffff 	.word	0xffffffff
    1198:	ffffffff 	.word	0xffffffff
    119c:	ffffffff 	.word	0xffffffff
    11a0:	ffffffff 	.word	0xffffffff
    11a4:	ffffffff 	.word	0xffffffff
    11a8:	ffffffff 	.word	0xffffffff
    11ac:	ffffffff 	.word	0xffffffff
    11b0:	ffffffff 	.word	0xffffffff
    11b4:	ffffffff 	.word	0xffffffff
    11b8:	ffffffff 	.word	0xffffffff
    11bc:	ffffffff 	.word	0xffffffff
    11c0:	ffffffff 	.word	0xffffffff
    11c4:	ffffffff 	.word	0xffffffff
    11c8:	ffffffff 	.word	0xffffffff
    11cc:	ffffffff 	.word	0xffffffff
    11d0:	ffffffff 	.word	0xffffffff
    11d4:	ffffffff 	.word	0xffffffff
    11d8:	ffffffff 	.word	0xffffffff
    11dc:	ffffffff 	.word	0xffffffff
    11e0:	ffffffff 	.word	0xffffffff
    11e4:	ffffffff 	.word	0xffffffff
    11e8:	ffffffff 	.word	0xffffffff
    11ec:	ffffffff 	.word	0xffffffff
    11f0:	ffffffff 	.word	0xffffffff
    11f4:	ffffffff 	.word	0xffffffff
    11f8:	ffffffff 	.word	0xffffffff
    11fc:	ffffffff 	.word	0xffffffff
    1200:	ffffffff 	.word	0xffffffff
    1204:	ffffffff 	.word	0xffffffff
    1208:	ffffffff 	.word	0xffffffff
    120c:	ffffffff 	.word	0xffffffff
    1210:	ffffffff 	.word	0xffffffff
    1214:	ffffffff 	.word	0xffffffff
    1218:	ffffffff 	.word	0xffffffff
    121c:	ffffffff 	.word	0xffffffff
    1220:	ffffffff 	.word	0xffffffff
    1224:	ffffffff 	.word	0xffffffff
    1228:	ffffffff 	.word	0xffffffff
    122c:	ffffffff 	.word	0xffffffff
    1230:	ffffffff 	.word	0xffffffff
    1234:	ffffffff 	.word	0xffffffff
    1238:	ffffffff 	.word	0xffffffff
    123c:	ffffffff 	.word	0xffffffff
    1240:	ffffffff 	.word	0xffffffff
    1244:	ffffffff 	.word	0xffffffff
    1248:	ffffffff 	.word	0xffffffff
    124c:	ffffffff 	.word	0xffffffff
    1250:	ffffffff 	.word	0xffffffff
    1254:	ffffffff 	.word	0xffffffff
    1258:	ffffffff 	.word	0xffffffff
    125c:	ffffffff 	.word	0xffffffff
    1260:	ffffffff 	.word	0xffffffff
    1264:	ffffffff 	.word	0xffffffff
    1268:	ffffffff 	.word	0xffffffff
    126c:	ffffffff 	.word	0xffffffff
    1270:	ffffffff 	.word	0xffffffff
    1274:	ffffffff 	.word	0xffffffff
    1278:	ffffffff 	.word	0xffffffff
    127c:	ffffffff 	.word	0xffffffff
    1280:	ffffffff 	.word	0xffffffff
    1284:	ffffffff 	.word	0xffffffff
    1288:	ffffffff 	.word	0xffffffff
    128c:	ffffffff 	.word	0xffffffff
    1290:	ffffffff 	.word	0xffffffff
    1294:	ffffffff 	.word	0xffffffff
    1298:	ffffffff 	.word	0xffffffff
    129c:	ffffffff 	.word	0xffffffff
    12a0:	ffffffff 	.word	0xffffffff
    12a4:	ffffffff 	.word	0xffffffff
    12a8:	ffffffff 	.word	0xffffffff
    12ac:	ffffffff 	.word	0xffffffff
    12b0:	ffffffff 	.word	0xffffffff
    12b4:	ffffffff 	.word	0xffffffff
    12b8:	ffffffff 	.word	0xffffffff
    12bc:	ffffffff 	.word	0xffffffff
    12c0:	ffffffff 	.word	0xffffffff
    12c4:	ffffffff 	.word	0xffffffff
    12c8:	ffffffff 	.word	0xffffffff
    12cc:	ffffffff 	.word	0xffffffff
    12d0:	ffffffff 	.word	0xffffffff
    12d4:	ffffffff 	.word	0xffffffff
    12d8:	ffffffff 	.word	0xffffffff
    12dc:	ffffffff 	.word	0xffffffff
    12e0:	ffffffff 	.word	0xffffffff
    12e4:	ffffffff 	.word	0xffffffff
    12e8:	ffffffff 	.word	0xffffffff
    12ec:	ffffffff 	.word	0xffffffff
    12f0:	ffffffff 	.word	0xffffffff
    12f4:	ffffffff 	.word	0xffffffff
    12f8:	ffffffff 	.word	0xffffffff
    12fc:	ffffffff 	.word	0xffffffff
    1300:	ffffffff 	.word	0xffffffff
    1304:	ffffffff 	.word	0xffffffff
    1308:	ffffffff 	.word	0xffffffff
    130c:	ffffffff 	.word	0xffffffff
    1310:	ffffffff 	.word	0xffffffff
    1314:	ffffffff 	.word	0xffffffff
    1318:	ffffffff 	.word	0xffffffff
    131c:	ffffffff 	.word	0xffffffff
    1320:	ffffffff 	.word	0xffffffff
    1324:	ffffffff 	.word	0xffffffff
    1328:	ffffffff 	.word	0xffffffff
    132c:	ffffffff 	.word	0xffffffff
    1330:	ffffffff 	.word	0xffffffff
    1334:	ffffffff 	.word	0xffffffff
    1338:	ffffffff 	.word	0xffffffff
    133c:	ffffffff 	.word	0xffffffff
    1340:	ffffffff 	.word	0xffffffff
    1344:	ffffffff 	.word	0xffffffff
    1348:	ffffffff 	.word	0xffffffff
    134c:	ffffffff 	.word	0xffffffff
    1350:	ffffffff 	.word	0xffffffff
    1354:	ffffffff 	.word	0xffffffff
    1358:	ffffffff 	.word	0xffffffff
    135c:	ffffffff 	.word	0xffffffff
    1360:	ffffffff 	.word	0xffffffff
    1364:	ffffffff 	.word	0xffffffff
    1368:	ffffffff 	.word	0xffffffff
    136c:	ffffffff 	.word	0xffffffff
    1370:	ffffffff 	.word	0xffffffff
    1374:	ffffffff 	.word	0xffffffff
    1378:	ffffffff 	.word	0xffffffff
    137c:	ffffffff 	.word	0xffffffff
    1380:	ffffffff 	.word	0xffffffff
    1384:	ffffffff 	.word	0xffffffff
    1388:	ffffffff 	.word	0xffffffff
    138c:	ffffffff 	.word	0xffffffff
    1390:	ffffffff 	.word	0xffffffff
    1394:	ffffffff 	.word	0xffffffff
    1398:	ffffffff 	.word	0xffffffff
    139c:	ffffffff 	.word	0xffffffff
    13a0:	ffffffff 	.word	0xffffffff
    13a4:	ffffffff 	.word	0xffffffff
    13a8:	ffffffff 	.word	0xffffffff
    13ac:	ffffffff 	.word	0xffffffff
    13b0:	ffffffff 	.word	0xffffffff
    13b4:	ffffffff 	.word	0xffffffff
    13b8:	ffffffff 	.word	0xffffffff
    13bc:	ffffffff 	.word	0xffffffff
    13c0:	ffffffff 	.word	0xffffffff
    13c4:	ffffffff 	.word	0xffffffff
    13c8:	ffffffff 	.word	0xffffffff
    13cc:	ffffffff 	.word	0xffffffff
    13d0:	ffffffff 	.word	0xffffffff
    13d4:	ffffffff 	.word	0xffffffff
    13d8:	ffffffff 	.word	0xffffffff
    13dc:	ffffffff 	.word	0xffffffff
    13e0:	ffffffff 	.word	0xffffffff
    13e4:	ffffffff 	.word	0xffffffff
    13e8:	ffffffff 	.word	0xffffffff
    13ec:	ffffffff 	.word	0xffffffff
    13f0:	ffffffff 	.word	0xffffffff
    13f4:	ffffffff 	.word	0xffffffff
    13f8:	ffffffff 	.word	0xffffffff
    13fc:	ffffffff 	.word	0xffffffff
    1400:	ffffffff 	.word	0xffffffff
    1404:	ffffffff 	.word	0xffffffff
    1408:	ffffffff 	.word	0xffffffff
    140c:	ffffffff 	.word	0xffffffff
    1410:	ffffffff 	.word	0xffffffff
    1414:	ffffffff 	.word	0xffffffff
    1418:	ffffffff 	.word	0xffffffff
    141c:	ffffffff 	.word	0xffffffff
    1420:	ffffffff 	.word	0xffffffff
    1424:	ffffffff 	.word	0xffffffff
    1428:	ffffffff 	.word	0xffffffff
    142c:	ffffffff 	.word	0xffffffff
    1430:	ffffffff 	.word	0xffffffff
    1434:	ffffffff 	.word	0xffffffff
    1438:	ffffffff 	.word	0xffffffff
    143c:	ffffffff 	.word	0xffffffff
    1440:	ffffffff 	.word	0xffffffff
    1444:	ffffffff 	.word	0xffffffff
    1448:	ffffffff 	.word	0xffffffff
    144c:	ffffffff 	.word	0xffffffff
    1450:	ffffffff 	.word	0xffffffff
    1454:	ffffffff 	.word	0xffffffff
    1458:	ffffffff 	.word	0xffffffff
    145c:	ffffffff 	.word	0xffffffff
    1460:	ffffffff 	.word	0xffffffff
    1464:	ffffffff 	.word	0xffffffff
    1468:	ffffffff 	.word	0xffffffff
    146c:	ffffffff 	.word	0xffffffff
    1470:	ffffffff 	.word	0xffffffff
    1474:	ffffffff 	.word	0xffffffff
    1478:	ffffffff 	.word	0xffffffff
    147c:	ffffffff 	.word	0xffffffff
    1480:	ffffffff 	.word	0xffffffff
    1484:	ffffffff 	.word	0xffffffff
    1488:	ffffffff 	.word	0xffffffff
    148c:	ffffffff 	.word	0xffffffff
    1490:	ffffffff 	.word	0xffffffff
    1494:	ffffffff 	.word	0xffffffff
    1498:	ffffffff 	.word	0xffffffff
    149c:	ffffffff 	.word	0xffffffff
    14a0:	ffffffff 	.word	0xffffffff
    14a4:	ffffffff 	.word	0xffffffff
    14a8:	ffffffff 	.word	0xffffffff
    14ac:	ffffffff 	.word	0xffffffff
    14b0:	ffffffff 	.word	0xffffffff
    14b4:	ffffffff 	.word	0xffffffff
    14b8:	ffffffff 	.word	0xffffffff
    14bc:	ffffffff 	.word	0xffffffff
    14c0:	ffffffff 	.word	0xffffffff
    14c4:	ffffffff 	.word	0xffffffff
    14c8:	ffffffff 	.word	0xffffffff
    14cc:	ffffffff 	.word	0xffffffff
    14d0:	ffffffff 	.word	0xffffffff
    14d4:	ffffffff 	.word	0xffffffff
    14d8:	ffffffff 	.word	0xffffffff
    14dc:	ffffffff 	.word	0xffffffff
    14e0:	ffffffff 	.word	0xffffffff
    14e4:	ffffffff 	.word	0xffffffff
    14e8:	ffffffff 	.word	0xffffffff
    14ec:	ffffffff 	.word	0xffffffff
    14f0:	ffffffff 	.word	0xffffffff
    14f4:	ffffffff 	.word	0xffffffff
    14f8:	ffffffff 	.word	0xffffffff
    14fc:	ffffffff 	.word	0xffffffff
    1500:	ffffffff 	.word	0xffffffff
    1504:	ffffffff 	.word	0xffffffff
    1508:	ffffffff 	.word	0xffffffff
    150c:	ffffffff 	.word	0xffffffff
    1510:	ffffffff 	.word	0xffffffff
    1514:	ffffffff 	.word	0xffffffff
    1518:	ffffffff 	.word	0xffffffff
    151c:	ffffffff 	.word	0xffffffff
    1520:	ffffffff 	.word	0xffffffff
    1524:	ffffffff 	.word	0xffffffff
    1528:	ffffffff 	.word	0xffffffff
    152c:	ffffffff 	.word	0xffffffff
    1530:	ffffffff 	.word	0xffffffff
    1534:	ffffffff 	.word	0xffffffff
    1538:	ffffffff 	.word	0xffffffff
    153c:	ffffffff 	.word	0xffffffff
    1540:	ffffffff 	.word	0xffffffff
    1544:	ffffffff 	.word	0xffffffff
    1548:	ffffffff 	.word	0xffffffff
    154c:	ffffffff 	.word	0xffffffff
    1550:	ffffffff 	.word	0xffffffff
    1554:	ffffffff 	.word	0xffffffff
    1558:	ffffffff 	.word	0xffffffff
    155c:	ffffffff 	.word	0xffffffff
    1560:	ffffffff 	.word	0xffffffff
    1564:	ffffffff 	.word	0xffffffff
    1568:	ffffffff 	.word	0xffffffff
    156c:	ffffffff 	.word	0xffffffff
    1570:	ffffffff 	.word	0xffffffff
    1574:	ffffffff 	.word	0xffffffff
    1578:	ffffffff 	.word	0xffffffff
    157c:	ffffffff 	.word	0xffffffff
    1580:	ffffffff 	.word	0xffffffff
    1584:	ffffffff 	.word	0xffffffff
    1588:	ffffffff 	.word	0xffffffff
    158c:	ffffffff 	.word	0xffffffff
    1590:	ffffffff 	.word	0xffffffff
    1594:	ffffffff 	.word	0xffffffff
    1598:	ffffffff 	.word	0xffffffff
    159c:	ffffffff 	.word	0xffffffff
    15a0:	ffffffff 	.word	0xffffffff
    15a4:	ffffffff 	.word	0xffffffff
    15a8:	ffffffff 	.word	0xffffffff
    15ac:	ffffffff 	.word	0xffffffff
    15b0:	ffffffff 	.word	0xffffffff
    15b4:	ffffffff 	.word	0xffffffff
    15b8:	ffffffff 	.word	0xffffffff
    15bc:	ffffffff 	.word	0xffffffff
    15c0:	ffffffff 	.word	0xffffffff
    15c4:	ffffffff 	.word	0xffffffff
    15c8:	ffffffff 	.word	0xffffffff
    15cc:	ffffffff 	.word	0xffffffff
    15d0:	ffffffff 	.word	0xffffffff
    15d4:	ffffffff 	.word	0xffffffff
    15d8:	ffffffff 	.word	0xffffffff
    15dc:	ffffffff 	.word	0xffffffff
    15e0:	ffffffff 	.word	0xffffffff
    15e4:	ffffffff 	.word	0xffffffff
    15e8:	ffffffff 	.word	0xffffffff
    15ec:	ffffffff 	.word	0xffffffff
    15f0:	ffffffff 	.word	0xffffffff
    15f4:	ffffffff 	.word	0xffffffff
    15f8:	ffffffff 	.word	0xffffffff
    15fc:	ffffffff 	.word	0xffffffff
    1600:	ffffffff 	.word	0xffffffff
    1604:	ffffffff 	.word	0xffffffff
    1608:	ffffffff 	.word	0xffffffff
    160c:	ffffffff 	.word	0xffffffff
    1610:	ffffffff 	.word	0xffffffff
    1614:	ffffffff 	.word	0xffffffff
    1618:	ffffffff 	.word	0xffffffff
    161c:	ffffffff 	.word	0xffffffff
    1620:	ffffffff 	.word	0xffffffff
    1624:	ffffffff 	.word	0xffffffff
    1628:	ffffffff 	.word	0xffffffff
    162c:	ffffffff 	.word	0xffffffff
    1630:	ffffffff 	.word	0xffffffff
    1634:	ffffffff 	.word	0xffffffff
    1638:	ffffffff 	.word	0xffffffff
    163c:	ffffffff 	.word	0xffffffff
    1640:	ffffffff 	.word	0xffffffff
    1644:	ffffffff 	.word	0xffffffff
    1648:	ffffffff 	.word	0xffffffff
    164c:	ffffffff 	.word	0xffffffff
    1650:	ffffffff 	.word	0xffffffff
    1654:	ffffffff 	.word	0xffffffff
    1658:	ffffffff 	.word	0xffffffff
    165c:	ffffffff 	.word	0xffffffff
    1660:	ffffffff 	.word	0xffffffff
    1664:	ffffffff 	.word	0xffffffff
    1668:	ffffffff 	.word	0xffffffff
    166c:	ffffffff 	.word	0xffffffff
    1670:	ffffffff 	.word	0xffffffff
    1674:	ffffffff 	.word	0xffffffff
    1678:	ffffffff 	.word	0xffffffff
    167c:	ffffffff 	.word	0xffffffff
    1680:	ffffffff 	.word	0xffffffff
    1684:	ffffffff 	.word	0xffffffff
    1688:	ffffffff 	.word	0xffffffff
    168c:	ffffffff 	.word	0xffffffff
    1690:	ffffffff 	.word	0xffffffff
    1694:	ffffffff 	.word	0xffffffff
    1698:	ffffffff 	.word	0xffffffff
    169c:	ffffffff 	.word	0xffffffff
    16a0:	ffffffff 	.word	0xffffffff
    16a4:	ffffffff 	.word	0xffffffff
    16a8:	ffffffff 	.word	0xffffffff
    16ac:	ffffffff 	.word	0xffffffff
    16b0:	ffffffff 	.word	0xffffffff
    16b4:	ffffffff 	.word	0xffffffff
    16b8:	ffffffff 	.word	0xffffffff
    16bc:	ffffffff 	.word	0xffffffff
    16c0:	ffffffff 	.word	0xffffffff
    16c4:	ffffffff 	.word	0xffffffff
    16c8:	ffffffff 	.word	0xffffffff
    16cc:	ffffffff 	.word	0xffffffff
    16d0:	ffffffff 	.word	0xffffffff
    16d4:	ffffffff 	.word	0xffffffff
    16d8:	ffffffff 	.word	0xffffffff
    16dc:	ffffffff 	.word	0xffffffff
    16e0:	ffffffff 	.word	0xffffffff
    16e4:	ffffffff 	.word	0xffffffff
    16e8:	ffffffff 	.word	0xffffffff
    16ec:	ffffffff 	.word	0xffffffff
    16f0:	ffffffff 	.word	0xffffffff
    16f4:	ffffffff 	.word	0xffffffff
    16f8:	ffffffff 	.word	0xffffffff
    16fc:	ffffffff 	.word	0xffffffff
    1700:	ffffffff 	.word	0xffffffff
    1704:	ffffffff 	.word	0xffffffff
    1708:	ffffffff 	.word	0xffffffff
    170c:	ffffffff 	.word	0xffffffff
    1710:	ffffffff 	.word	0xffffffff
    1714:	ffffffff 	.word	0xffffffff
    1718:	ffffffff 	.word	0xffffffff
    171c:	ffffffff 	.word	0xffffffff
    1720:	ffffffff 	.word	0xffffffff
    1724:	ffffffff 	.word	0xffffffff
    1728:	ffffffff 	.word	0xffffffff
    172c:	ffffffff 	.word	0xffffffff
    1730:	ffffffff 	.word	0xffffffff
    1734:	ffffffff 	.word	0xffffffff
    1738:	ffffffff 	.word	0xffffffff
    173c:	ffffffff 	.word	0xffffffff
    1740:	ffffffff 	.word	0xffffffff
    1744:	ffffffff 	.word	0xffffffff
    1748:	ffffffff 	.word	0xffffffff
    174c:	ffffffff 	.word	0xffffffff
    1750:	ffffffff 	.word	0xffffffff
    1754:	ffffffff 	.word	0xffffffff
    1758:	ffffffff 	.word	0xffffffff
    175c:	ffffffff 	.word	0xffffffff
    1760:	ffffffff 	.word	0xffffffff
    1764:	ffffffff 	.word	0xffffffff
    1768:	ffffffff 	.word	0xffffffff
    176c:	ffffffff 	.word	0xffffffff
    1770:	ffffffff 	.word	0xffffffff
    1774:	ffffffff 	.word	0xffffffff
    1778:	ffffffff 	.word	0xffffffff
    177c:	ffffffff 	.word	0xffffffff
    1780:	ffffffff 	.word	0xffffffff
    1784:	ffffffff 	.word	0xffffffff
    1788:	ffffffff 	.word	0xffffffff
    178c:	ffffffff 	.word	0xffffffff
    1790:	ffffffff 	.word	0xffffffff
    1794:	ffffffff 	.word	0xffffffff
    1798:	ffffffff 	.word	0xffffffff
    179c:	ffffffff 	.word	0xffffffff
    17a0:	ffffffff 	.word	0xffffffff
    17a4:	ffffffff 	.word	0xffffffff
    17a8:	ffffffff 	.word	0xffffffff
    17ac:	ffffffff 	.word	0xffffffff
    17b0:	ffffffff 	.word	0xffffffff
    17b4:	ffffffff 	.word	0xffffffff
    17b8:	ffffffff 	.word	0xffffffff
    17bc:	ffffffff 	.word	0xffffffff
    17c0:	ffffffff 	.word	0xffffffff
    17c4:	ffffffff 	.word	0xffffffff
    17c8:	ffffffff 	.word	0xffffffff
    17cc:	ffffffff 	.word	0xffffffff
    17d0:	ffffffff 	.word	0xffffffff
    17d4:	ffffffff 	.word	0xffffffff
    17d8:	ffffffff 	.word	0xffffffff
    17dc:	ffffffff 	.word	0xffffffff
    17e0:	ffffffff 	.word	0xffffffff
    17e4:	ffffffff 	.word	0xffffffff
    17e8:	ffffffff 	.word	0xffffffff
    17ec:	ffffffff 	.word	0xffffffff
    17f0:	ffffffff 	.word	0xffffffff
    17f4:	ffffffff 	.word	0xffffffff
    17f8:	ffffffff 	.word	0xffffffff
    17fc:	ffffffff 	.word	0xffffffff
    1800:	ffffffff 	.word	0xffffffff
    1804:	ffffffff 	.word	0xffffffff
    1808:	ffffffff 	.word	0xffffffff
    180c:	ffffffff 	.word	0xffffffff
    1810:	ffffffff 	.word	0xffffffff
    1814:	ffffffff 	.word	0xffffffff
    1818:	ffffffff 	.word	0xffffffff
    181c:	ffffffff 	.word	0xffffffff
    1820:	ffffffff 	.word	0xffffffff
    1824:	ffffffff 	.word	0xffffffff
    1828:	ffffffff 	.word	0xffffffff
    182c:	ffffffff 	.word	0xffffffff
    1830:	ffffffff 	.word	0xffffffff
    1834:	ffffffff 	.word	0xffffffff
    1838:	ffffffff 	.word	0xffffffff
    183c:	ffffffff 	.word	0xffffffff
    1840:	ffffffff 	.word	0xffffffff
    1844:	ffffffff 	.word	0xffffffff
    1848:	ffffffff 	.word	0xffffffff
    184c:	ffffffff 	.word	0xffffffff
    1850:	ffffffff 	.word	0xffffffff
    1854:	ffffffff 	.word	0xffffffff
    1858:	ffffffff 	.word	0xffffffff
    185c:	ffffffff 	.word	0xffffffff
    1860:	ffffffff 	.word	0xffffffff
    1864:	ffffffff 	.word	0xffffffff
    1868:	ffffffff 	.word	0xffffffff
    186c:	ffffffff 	.word	0xffffffff
    1870:	ffffffff 	.word	0xffffffff
    1874:	ffffffff 	.word	0xffffffff
    1878:	ffffffff 	.word	0xffffffff
    187c:	ffffffff 	.word	0xffffffff
    1880:	ffffffff 	.word	0xffffffff
    1884:	ffffffff 	.word	0xffffffff
    1888:	ffffffff 	.word	0xffffffff
    188c:	ffffffff 	.word	0xffffffff
    1890:	ffffffff 	.word	0xffffffff
    1894:	ffffffff 	.word	0xffffffff
    1898:	ffffffff 	.word	0xffffffff
    189c:	ffffffff 	.word	0xffffffff
    18a0:	ffffffff 	.word	0xffffffff
    18a4:	ffffffff 	.word	0xffffffff
    18a8:	ffffffff 	.word	0xffffffff
    18ac:	ffffffff 	.word	0xffffffff
    18b0:	ffffffff 	.word	0xffffffff
    18b4:	ffffffff 	.word	0xffffffff
    18b8:	ffffffff 	.word	0xffffffff
    18bc:	ffffffff 	.word	0xffffffff
    18c0:	ffffffff 	.word	0xffffffff
    18c4:	ffffffff 	.word	0xffffffff
    18c8:	ffffffff 	.word	0xffffffff
    18cc:	ffffffff 	.word	0xffffffff
    18d0:	ffffffff 	.word	0xffffffff
    18d4:	ffffffff 	.word	0xffffffff
    18d8:	ffffffff 	.word	0xffffffff
    18dc:	ffffffff 	.word	0xffffffff
    18e0:	ffffffff 	.word	0xffffffff
    18e4:	ffffffff 	.word	0xffffffff
    18e8:	ffffffff 	.word	0xffffffff
    18ec:	ffffffff 	.word	0xffffffff
    18f0:	ffffffff 	.word	0xffffffff
    18f4:	ffffffff 	.word	0xffffffff
    18f8:	ffffffff 	.word	0xffffffff
    18fc:	ffffffff 	.word	0xffffffff
    1900:	ffffffff 	.word	0xffffffff
    1904:	ffffffff 	.word	0xffffffff
    1908:	ffffffff 	.word	0xffffffff
    190c:	ffffffff 	.word	0xffffffff
    1910:	ffffffff 	.word	0xffffffff
    1914:	ffffffff 	.word	0xffffffff
    1918:	ffffffff 	.word	0xffffffff
    191c:	ffffffff 	.word	0xffffffff
    1920:	ffffffff 	.word	0xffffffff
    1924:	ffffffff 	.word	0xffffffff
    1928:	ffffffff 	.word	0xffffffff
    192c:	ffffffff 	.word	0xffffffff
    1930:	ffffffff 	.word	0xffffffff
    1934:	ffffffff 	.word	0xffffffff
    1938:	ffffffff 	.word	0xffffffff
    193c:	ffffffff 	.word	0xffffffff
    1940:	ffffffff 	.word	0xffffffff
    1944:	ffffffff 	.word	0xffffffff
    1948:	ffffffff 	.word	0xffffffff
    194c:	ffffffff 	.word	0xffffffff
    1950:	ffffffff 	.word	0xffffffff
    1954:	ffffffff 	.word	0xffffffff
    1958:	ffffffff 	.word	0xffffffff
    195c:	ffffffff 	.word	0xffffffff
    1960:	ffffffff 	.word	0xffffffff
    1964:	ffffffff 	.word	0xffffffff
    1968:	ffffffff 	.word	0xffffffff
    196c:	ffffffff 	.word	0xffffffff
    1970:	ffffffff 	.word	0xffffffff
    1974:	ffffffff 	.word	0xffffffff
    1978:	ffffffff 	.word	0xffffffff
    197c:	ffffffff 	.word	0xffffffff
    1980:	ffffffff 	.word	0xffffffff
    1984:	ffffffff 	.word	0xffffffff
    1988:	ffffffff 	.word	0xffffffff
    198c:	ffffffff 	.word	0xffffffff
    1990:	ffffffff 	.word	0xffffffff
    1994:	ffffffff 	.word	0xffffffff
    1998:	ffffffff 	.word	0xffffffff
    199c:	ffffffff 	.word	0xffffffff
    19a0:	ffffffff 	.word	0xffffffff
    19a4:	ffffffff 	.word	0xffffffff
    19a8:	ffffffff 	.word	0xffffffff
    19ac:	ffffffff 	.word	0xffffffff
    19b0:	ffffffff 	.word	0xffffffff
    19b4:	ffffffff 	.word	0xffffffff
    19b8:	ffffffff 	.word	0xffffffff
    19bc:	ffffffff 	.word	0xffffffff
    19c0:	ffffffff 	.word	0xffffffff
    19c4:	ffffffff 	.word	0xffffffff
    19c8:	ffffffff 	.word	0xffffffff
    19cc:	ffffffff 	.word	0xffffffff
    19d0:	ffffffff 	.word	0xffffffff
    19d4:	ffffffff 	.word	0xffffffff
    19d8:	ffffffff 	.word	0xffffffff
    19dc:	ffffffff 	.word	0xffffffff
    19e0:	ffffffff 	.word	0xffffffff
    19e4:	ffffffff 	.word	0xffffffff
    19e8:	ffffffff 	.word	0xffffffff
    19ec:	ffffffff 	.word	0xffffffff
    19f0:	ffffffff 	.word	0xffffffff
    19f4:	ffffffff 	.word	0xffffffff
    19f8:	ffffffff 	.word	0xffffffff
    19fc:	ffffffff 	.word	0xffffffff
    1a00:	ffffffff 	.word	0xffffffff
    1a04:	ffffffff 	.word	0xffffffff
    1a08:	ffffffff 	.word	0xffffffff
    1a0c:	ffffffff 	.word	0xffffffff
    1a10:	ffffffff 	.word	0xffffffff
    1a14:	ffffffff 	.word	0xffffffff
    1a18:	ffffffff 	.word	0xffffffff
    1a1c:	ffffffff 	.word	0xffffffff
    1a20:	ffffffff 	.word	0xffffffff
    1a24:	ffffffff 	.word	0xffffffff
    1a28:	ffffffff 	.word	0xffffffff
    1a2c:	ffffffff 	.word	0xffffffff
    1a30:	ffffffff 	.word	0xffffffff
    1a34:	ffffffff 	.word	0xffffffff
    1a38:	ffffffff 	.word	0xffffffff
    1a3c:	ffffffff 	.word	0xffffffff
    1a40:	ffffffff 	.word	0xffffffff
    1a44:	ffffffff 	.word	0xffffffff
    1a48:	ffffffff 	.word	0xffffffff
    1a4c:	ffffffff 	.word	0xffffffff
    1a50:	ffffffff 	.word	0xffffffff
    1a54:	ffffffff 	.word	0xffffffff
    1a58:	ffffffff 	.word	0xffffffff
    1a5c:	ffffffff 	.word	0xffffffff
    1a60:	ffffffff 	.word	0xffffffff
    1a64:	ffffffff 	.word	0xffffffff
    1a68:	ffffffff 	.word	0xffffffff
    1a6c:	ffffffff 	.word	0xffffffff
    1a70:	ffffffff 	.word	0xffffffff
    1a74:	ffffffff 	.word	0xffffffff
    1a78:	ffffffff 	.word	0xffffffff
    1a7c:	ffffffff 	.word	0xffffffff
    1a80:	ffffffff 	.word	0xffffffff
    1a84:	ffffffff 	.word	0xffffffff
    1a88:	ffffffff 	.word	0xffffffff
    1a8c:	ffffffff 	.word	0xffffffff
    1a90:	ffffffff 	.word	0xffffffff
    1a94:	ffffffff 	.word	0xffffffff
    1a98:	ffffffff 	.word	0xffffffff
    1a9c:	ffffffff 	.word	0xffffffff
    1aa0:	ffffffff 	.word	0xffffffff
    1aa4:	ffffffff 	.word	0xffffffff
    1aa8:	ffffffff 	.word	0xffffffff
    1aac:	ffffffff 	.word	0xffffffff
    1ab0:	ffffffff 	.word	0xffffffff
    1ab4:	ffffffff 	.word	0xffffffff
    1ab8:	ffffffff 	.word	0xffffffff
    1abc:	ffffffff 	.word	0xffffffff
    1ac0:	ffffffff 	.word	0xffffffff
    1ac4:	ffffffff 	.word	0xffffffff
    1ac8:	ffffffff 	.word	0xffffffff
    1acc:	ffffffff 	.word	0xffffffff
    1ad0:	ffffffff 	.word	0xffffffff
    1ad4:	ffffffff 	.word	0xffffffff
    1ad8:	ffffffff 	.word	0xffffffff
    1adc:	ffffffff 	.word	0xffffffff
    1ae0:	ffffffff 	.word	0xffffffff
    1ae4:	ffffffff 	.word	0xffffffff
    1ae8:	ffffffff 	.word	0xffffffff
    1aec:	ffffffff 	.word	0xffffffff
    1af0:	ffffffff 	.word	0xffffffff
    1af4:	ffffffff 	.word	0xffffffff
    1af8:	ffffffff 	.word	0xffffffff
    1afc:	ffffffff 	.word	0xffffffff
    1b00:	ffffffff 	.word	0xffffffff
    1b04:	ffffffff 	.word	0xffffffff
    1b08:	ffffffff 	.word	0xffffffff
    1b0c:	ffffffff 	.word	0xffffffff
    1b10:	ffffffff 	.word	0xffffffff
    1b14:	ffffffff 	.word	0xffffffff
    1b18:	ffffffff 	.word	0xffffffff
    1b1c:	ffffffff 	.word	0xffffffff
    1b20:	ffffffff 	.word	0xffffffff
    1b24:	ffffffff 	.word	0xffffffff
    1b28:	ffffffff 	.word	0xffffffff
    1b2c:	ffffffff 	.word	0xffffffff
    1b30:	ffffffff 	.word	0xffffffff
    1b34:	ffffffff 	.word	0xffffffff
    1b38:	ffffffff 	.word	0xffffffff
    1b3c:	ffffffff 	.word	0xffffffff
    1b40:	ffffffff 	.word	0xffffffff
    1b44:	ffffffff 	.word	0xffffffff
    1b48:	ffffffff 	.word	0xffffffff
    1b4c:	ffffffff 	.word	0xffffffff
    1b50:	ffffffff 	.word	0xffffffff
    1b54:	ffffffff 	.word	0xffffffff
    1b58:	ffffffff 	.word	0xffffffff
    1b5c:	ffffffff 	.word	0xffffffff
    1b60:	ffffffff 	.word	0xffffffff
    1b64:	ffffffff 	.word	0xffffffff
    1b68:	ffffffff 	.word	0xffffffff
    1b6c:	ffffffff 	.word	0xffffffff
    1b70:	ffffffff 	.word	0xffffffff
    1b74:	ffffffff 	.word	0xffffffff
    1b78:	ffffffff 	.word	0xffffffff
    1b7c:	ffffffff 	.word	0xffffffff
    1b80:	ffffffff 	.word	0xffffffff
    1b84:	ffffffff 	.word	0xffffffff
    1b88:	ffffffff 	.word	0xffffffff
    1b8c:	ffffffff 	.word	0xffffffff
    1b90:	ffffffff 	.word	0xffffffff
    1b94:	ffffffff 	.word	0xffffffff
    1b98:	ffffffff 	.word	0xffffffff
    1b9c:	ffffffff 	.word	0xffffffff
    1ba0:	ffffffff 	.word	0xffffffff
    1ba4:	ffffffff 	.word	0xffffffff
    1ba8:	ffffffff 	.word	0xffffffff
    1bac:	ffffffff 	.word	0xffffffff
    1bb0:	ffffffff 	.word	0xffffffff
    1bb4:	ffffffff 	.word	0xffffffff
    1bb8:	ffffffff 	.word	0xffffffff
    1bbc:	ffffffff 	.word	0xffffffff
    1bc0:	ffffffff 	.word	0xffffffff
    1bc4:	ffffffff 	.word	0xffffffff
    1bc8:	ffffffff 	.word	0xffffffff
    1bcc:	ffffffff 	.word	0xffffffff
    1bd0:	ffffffff 	.word	0xffffffff
    1bd4:	ffffffff 	.word	0xffffffff
    1bd8:	ffffffff 	.word	0xffffffff
    1bdc:	ffffffff 	.word	0xffffffff
    1be0:	ffffffff 	.word	0xffffffff
    1be4:	ffffffff 	.word	0xffffffff
    1be8:	ffffffff 	.word	0xffffffff
    1bec:	ffffffff 	.word	0xffffffff
    1bf0:	ffffffff 	.word	0xffffffff
    1bf4:	ffffffff 	.word	0xffffffff
    1bf8:	ffffffff 	.word	0xffffffff
    1bfc:	ffffffff 	.word	0xffffffff
    1c00:	ffffffff 	.word	0xffffffff
    1c04:	ffffffff 	.word	0xffffffff
    1c08:	ffffffff 	.word	0xffffffff
    1c0c:	ffffffff 	.word	0xffffffff
    1c10:	ffffffff 	.word	0xffffffff
    1c14:	ffffffff 	.word	0xffffffff
    1c18:	ffffffff 	.word	0xffffffff
    1c1c:	ffffffff 	.word	0xffffffff
    1c20:	ffffffff 	.word	0xffffffff
    1c24:	ffffffff 	.word	0xffffffff
    1c28:	ffffffff 	.word	0xffffffff
    1c2c:	ffffffff 	.word	0xffffffff
    1c30:	ffffffff 	.word	0xffffffff
    1c34:	ffffffff 	.word	0xffffffff
    1c38:	ffffffff 	.word	0xffffffff
    1c3c:	ffffffff 	.word	0xffffffff
    1c40:	ffffffff 	.word	0xffffffff
    1c44:	ffffffff 	.word	0xffffffff
    1c48:	ffffffff 	.word	0xffffffff
    1c4c:	ffffffff 	.word	0xffffffff
    1c50:	ffffffff 	.word	0xffffffff
    1c54:	ffffffff 	.word	0xffffffff
    1c58:	ffffffff 	.word	0xffffffff
    1c5c:	ffffffff 	.word	0xffffffff
    1c60:	ffffffff 	.word	0xffffffff
    1c64:	ffffffff 	.word	0xffffffff
    1c68:	ffffffff 	.word	0xffffffff
    1c6c:	ffffffff 	.word	0xffffffff
    1c70:	ffffffff 	.word	0xffffffff
    1c74:	ffffffff 	.word	0xffffffff
    1c78:	ffffffff 	.word	0xffffffff
    1c7c:	ffffffff 	.word	0xffffffff
    1c80:	ffffffff 	.word	0xffffffff
    1c84:	ffffffff 	.word	0xffffffff
    1c88:	ffffffff 	.word	0xffffffff
    1c8c:	ffffffff 	.word	0xffffffff
    1c90:	ffffffff 	.word	0xffffffff
    1c94:	ffffffff 	.word	0xffffffff
    1c98:	ffffffff 	.word	0xffffffff
    1c9c:	ffffffff 	.word	0xffffffff
    1ca0:	ffffffff 	.word	0xffffffff
    1ca4:	ffffffff 	.word	0xffffffff
    1ca8:	ffffffff 	.word	0xffffffff
    1cac:	ffffffff 	.word	0xffffffff
    1cb0:	ffffffff 	.word	0xffffffff
    1cb4:	ffffffff 	.word	0xffffffff
    1cb8:	ffffffff 	.word	0xffffffff
    1cbc:	ffffffff 	.word	0xffffffff
    1cc0:	ffffffff 	.word	0xffffffff
    1cc4:	ffffffff 	.word	0xffffffff
    1cc8:	ffffffff 	.word	0xffffffff
    1ccc:	ffffffff 	.word	0xffffffff
    1cd0:	ffffffff 	.word	0xffffffff
    1cd4:	ffffffff 	.word	0xffffffff
    1cd8:	ffffffff 	.word	0xffffffff
    1cdc:	ffffffff 	.word	0xffffffff
    1ce0:	ffffffff 	.word	0xffffffff
    1ce4:	ffffffff 	.word	0xffffffff
    1ce8:	ffffffff 	.word	0xffffffff
    1cec:	ffffffff 	.word	0xffffffff
    1cf0:	ffffffff 	.word	0xffffffff
    1cf4:	ffffffff 	.word	0xffffffff
    1cf8:	ffffffff 	.word	0xffffffff
    1cfc:	ffffffff 	.word	0xffffffff
    1d00:	ffffffff 	.word	0xffffffff
    1d04:	ffffffff 	.word	0xffffffff
    1d08:	ffffffff 	.word	0xffffffff
    1d0c:	ffffffff 	.word	0xffffffff
    1d10:	ffffffff 	.word	0xffffffff
    1d14:	ffffffff 	.word	0xffffffff
    1d18:	ffffffff 	.word	0xffffffff
    1d1c:	ffffffff 	.word	0xffffffff
    1d20:	ffffffff 	.word	0xffffffff
    1d24:	ffffffff 	.word	0xffffffff
    1d28:	ffffffff 	.word	0xffffffff
    1d2c:	ffffffff 	.word	0xffffffff
    1d30:	ffffffff 	.word	0xffffffff
    1d34:	ffffffff 	.word	0xffffffff
    1d38:	ffffffff 	.word	0xffffffff
    1d3c:	ffffffff 	.word	0xffffffff
    1d40:	ffffffff 	.word	0xffffffff
    1d44:	ffffffff 	.word	0xffffffff
    1d48:	ffffffff 	.word	0xffffffff
    1d4c:	ffffffff 	.word	0xffffffff
    1d50:	ffffffff 	.word	0xffffffff
    1d54:	ffffffff 	.word	0xffffffff
    1d58:	ffffffff 	.word	0xffffffff
    1d5c:	ffffffff 	.word	0xffffffff
    1d60:	ffffffff 	.word	0xffffffff
    1d64:	ffffffff 	.word	0xffffffff
    1d68:	ffffffff 	.word	0xffffffff
    1d6c:	ffffffff 	.word	0xffffffff
    1d70:	ffffffff 	.word	0xffffffff
    1d74:	ffffffff 	.word	0xffffffff
    1d78:	ffffffff 	.word	0xffffffff
    1d7c:	ffffffff 	.word	0xffffffff
    1d80:	ffffffff 	.word	0xffffffff
    1d84:	ffffffff 	.word	0xffffffff
    1d88:	ffffffff 	.word	0xffffffff
    1d8c:	ffffffff 	.word	0xffffffff
    1d90:	ffffffff 	.word	0xffffffff
    1d94:	ffffffff 	.word	0xffffffff
    1d98:	ffffffff 	.word	0xffffffff
    1d9c:	ffffffff 	.word	0xffffffff
    1da0:	ffffffff 	.word	0xffffffff
    1da4:	ffffffff 	.word	0xffffffff
    1da8:	ffffffff 	.word	0xffffffff
    1dac:	ffffffff 	.word	0xffffffff
    1db0:	ffffffff 	.word	0xffffffff
    1db4:	ffffffff 	.word	0xffffffff
    1db8:	ffffffff 	.word	0xffffffff
    1dbc:	ffffffff 	.word	0xffffffff
    1dc0:	ffffffff 	.word	0xffffffff
    1dc4:	ffffffff 	.word	0xffffffff
    1dc8:	ffffffff 	.word	0xffffffff
    1dcc:	ffffffff 	.word	0xffffffff
    1dd0:	ffffffff 	.word	0xffffffff
    1dd4:	ffffffff 	.word	0xffffffff
    1dd8:	ffffffff 	.word	0xffffffff
    1ddc:	ffffffff 	.word	0xffffffff
    1de0:	ffffffff 	.word	0xffffffff
    1de4:	ffffffff 	.word	0xffffffff
    1de8:	ffffffff 	.word	0xffffffff
    1dec:	ffffffff 	.word	0xffffffff
    1df0:	ffffffff 	.word	0xffffffff
    1df4:	ffffffff 	.word	0xffffffff
    1df8:	ffffffff 	.word	0xffffffff
    1dfc:	ffffffff 	.word	0xffffffff
    1e00:	ffffffff 	.word	0xffffffff
    1e04:	ffffffff 	.word	0xffffffff
    1e08:	ffffffff 	.word	0xffffffff
    1e0c:	ffffffff 	.word	0xffffffff
    1e10:	ffffffff 	.word	0xffffffff
    1e14:	ffffffff 	.word	0xffffffff
    1e18:	ffffffff 	.word	0xffffffff
    1e1c:	ffffffff 	.word	0xffffffff
    1e20:	ffffffff 	.word	0xffffffff
    1e24:	ffffffff 	.word	0xffffffff
    1e28:	ffffffff 	.word	0xffffffff
    1e2c:	ffffffff 	.word	0xffffffff
    1e30:	ffffffff 	.word	0xffffffff
    1e34:	ffffffff 	.word	0xffffffff
    1e38:	ffffffff 	.word	0xffffffff
    1e3c:	ffffffff 	.word	0xffffffff
    1e40:	ffffffff 	.word	0xffffffff
    1e44:	ffffffff 	.word	0xffffffff
    1e48:	ffffffff 	.word	0xffffffff
    1e4c:	ffffffff 	.word	0xffffffff
    1e50:	ffffffff 	.word	0xffffffff
    1e54:	ffffffff 	.word	0xffffffff
    1e58:	ffffffff 	.word	0xffffffff
    1e5c:	ffffffff 	.word	0xffffffff
    1e60:	ffffffff 	.word	0xffffffff
    1e64:	ffffffff 	.word	0xffffffff
    1e68:	ffffffff 	.word	0xffffffff
    1e6c:	ffffffff 	.word	0xffffffff
    1e70:	ffffffff 	.word	0xffffffff
    1e74:	ffffffff 	.word	0xffffffff
    1e78:	ffffffff 	.word	0xffffffff
    1e7c:	ffffffff 	.word	0xffffffff
    1e80:	ffffffff 	.word	0xffffffff
    1e84:	ffffffff 	.word	0xffffffff
    1e88:	ffffffff 	.word	0xffffffff
    1e8c:	ffffffff 	.word	0xffffffff
    1e90:	ffffffff 	.word	0xffffffff
    1e94:	ffffffff 	.word	0xffffffff
    1e98:	ffffffff 	.word	0xffffffff
    1e9c:	ffffffff 	.word	0xffffffff
    1ea0:	ffffffff 	.word	0xffffffff
    1ea4:	ffffffff 	.word	0xffffffff
    1ea8:	ffffffff 	.word	0xffffffff
    1eac:	ffffffff 	.word	0xffffffff
    1eb0:	ffffffff 	.word	0xffffffff
    1eb4:	ffffffff 	.word	0xffffffff
    1eb8:	ffffffff 	.word	0xffffffff
    1ebc:	ffffffff 	.word	0xffffffff
    1ec0:	ffffffff 	.word	0xffffffff
    1ec4:	ffffffff 	.word	0xffffffff
    1ec8:	ffffffff 	.word	0xffffffff
    1ecc:	ffffffff 	.word	0xffffffff
    1ed0:	ffffffff 	.word	0xffffffff
    1ed4:	ffffffff 	.word	0xffffffff
    1ed8:	ffffffff 	.word	0xffffffff
    1edc:	ffffffff 	.word	0xffffffff
    1ee0:	ffffffff 	.word	0xffffffff
    1ee4:	ffffffff 	.word	0xffffffff
    1ee8:	ffffffff 	.word	0xffffffff
    1eec:	ffffffff 	.word	0xffffffff
    1ef0:	ffffffff 	.word	0xffffffff
    1ef4:	ffffffff 	.word	0xffffffff
    1ef8:	ffffffff 	.word	0xffffffff
    1efc:	ffffffff 	.word	0xffffffff
    1f00:	ffffffff 	.word	0xffffffff
    1f04:	ffffffff 	.word	0xffffffff
    1f08:	ffffffff 	.word	0xffffffff
    1f0c:	ffffffff 	.word	0xffffffff
    1f10:	ffffffff 	.word	0xffffffff
    1f14:	ffffffff 	.word	0xffffffff
    1f18:	ffffffff 	.word	0xffffffff
    1f1c:	ffffffff 	.word	0xffffffff
    1f20:	ffffffff 	.word	0xffffffff
    1f24:	ffffffff 	.word	0xffffffff
    1f28:	ffffffff 	.word	0xffffffff
    1f2c:	ffffffff 	.word	0xffffffff
    1f30:	ffffffff 	.word	0xffffffff
    1f34:	ffffffff 	.word	0xffffffff
    1f38:	ffffffff 	.word	0xffffffff
    1f3c:	ffffffff 	.word	0xffffffff
    1f40:	ffffffff 	.word	0xffffffff
    1f44:	ffffffff 	.word	0xffffffff
    1f48:	ffffffff 	.word	0xffffffff
    1f4c:	ffffffff 	.word	0xffffffff
    1f50:	ffffffff 	.word	0xffffffff
    1f54:	ffffffff 	.word	0xffffffff
    1f58:	ffffffff 	.word	0xffffffff
    1f5c:	ffffffff 	.word	0xffffffff
    1f60:	ffffffff 	.word	0xffffffff
    1f64:	ffffffff 	.word	0xffffffff
    1f68:	ffffffff 	.word	0xffffffff
    1f6c:	ffffffff 	.word	0xffffffff
    1f70:	ffffffff 	.word	0xffffffff
    1f74:	ffffffff 	.word	0xffffffff
    1f78:	ffffffff 	.word	0xffffffff
    1f7c:	ffffffff 	.word	0xffffffff
    1f80:	ffffffff 	.word	0xffffffff
    1f84:	ffffffff 	.word	0xffffffff
    1f88:	ffffffff 	.word	0xffffffff
    1f8c:	ffffffff 	.word	0xffffffff
    1f90:	ffffffff 	.word	0xffffffff
    1f94:	ffffffff 	.word	0xffffffff
    1f98:	ffffffff 	.word	0xffffffff
    1f9c:	ffffffff 	.word	0xffffffff
    1fa0:	ffffffff 	.word	0xffffffff
    1fa4:	ffffffff 	.word	0xffffffff
    1fa8:	ffffffff 	.word	0xffffffff
    1fac:	ffffffff 	.word	0xffffffff
    1fb0:	ffffffff 	.word	0xffffffff
    1fb4:	ffffffff 	.word	0xffffffff
    1fb8:	ffffffff 	.word	0xffffffff
    1fbc:	ffffffff 	.word	0xffffffff
    1fc0:	ffffffff 	.word	0xffffffff
    1fc4:	ffffffff 	.word	0xffffffff
    1fc8:	ffffffff 	.word	0xffffffff
    1fcc:	ffffffff 	.word	0xffffffff
    1fd0:	ffffffff 	.word	0xffffffff
    1fd4:	ffffffff 	.word	0xffffffff
    1fd8:	ffffffff 	.word	0xffffffff
    1fdc:	ffffffff 	.word	0xffffffff
    1fe0:	ffffffff 	.word	0xffffffff
    1fe4:	ffffffff 	.word	0xffffffff
    1fe8:	ffffffff 	.word	0xffffffff
    1fec:	ffffffff 	.word	0xffffffff
    1ff0:	ffffffff 	.word	0xffffffff
    1ff4:	ffffffff 	.word	0xffffffff
    1ff8:	ffffffff 	.word	0xffffffff
    1ffc:	ffffffff 	.word	0xffffffff
    2000:	ffffffff 	.word	0xffffffff
    2004:	ffffffff 	.word	0xffffffff
    2008:	ffffffff 	.word	0xffffffff
    200c:	ffffffff 	.word	0xffffffff
    2010:	ffffffff 	.word	0xffffffff
    2014:	ffffffff 	.word	0xffffffff
    2018:	ffffffff 	.word	0xffffffff
    201c:	ffffffff 	.word	0xffffffff
    2020:	ffffffff 	.word	0xffffffff
    2024:	ffffffff 	.word	0xffffffff
    2028:	ffffffff 	.word	0xffffffff
    202c:	ffffffff 	.word	0xffffffff
    2030:	ffffffff 	.word	0xffffffff
    2034:	ffffffff 	.word	0xffffffff
    2038:	ffffffff 	.word	0xffffffff
    203c:	ffffffff 	.word	0xffffffff
    2040:	ffffffff 	.word	0xffffffff
    2044:	ffffffff 	.word	0xffffffff
    2048:	ffffffff 	.word	0xffffffff
    204c:	ffffffff 	.word	0xffffffff
    2050:	ffffffff 	.word	0xffffffff
    2054:	ffffffff 	.word	0xffffffff
    2058:	ffffffff 	.word	0xffffffff
    205c:	ffffffff 	.word	0xffffffff
    2060:	ffffffff 	.word	0xffffffff
    2064:	ffffffff 	.word	0xffffffff
    2068:	ffffffff 	.word	0xffffffff
    206c:	ffffffff 	.word	0xffffffff
    2070:	ffffffff 	.word	0xffffffff
    2074:	ffffffff 	.word	0xffffffff
    2078:	ffffffff 	.word	0xffffffff
    207c:	ffffffff 	.word	0xffffffff
    2080:	ffffffff 	.word	0xffffffff
    2084:	ffffffff 	.word	0xffffffff
    2088:	ffffffff 	.word	0xffffffff
    208c:	ffffffff 	.word	0xffffffff
    2090:	ffffffff 	.word	0xffffffff
    2094:	ffffffff 	.word	0xffffffff
    2098:	ffffffff 	.word	0xffffffff
    209c:	ffffffff 	.word	0xffffffff
    20a0:	ffffffff 	.word	0xffffffff
    20a4:	ffffffff 	.word	0xffffffff
    20a8:	ffffffff 	.word	0xffffffff
    20ac:	ffffffff 	.word	0xffffffff
    20b0:	ffffffff 	.word	0xffffffff
    20b4:	ffffffff 	.word	0xffffffff
    20b8:	ffffffff 	.word	0xffffffff
    20bc:	ffffffff 	.word	0xffffffff
    20c0:	ffffffff 	.word	0xffffffff
    20c4:	ffffffff 	.word	0xffffffff
    20c8:	ffffffff 	.word	0xffffffff
    20cc:	ffffffff 	.word	0xffffffff
    20d0:	ffffffff 	.word	0xffffffff
    20d4:	ffffffff 	.word	0xffffffff
    20d8:	ffffffff 	.word	0xffffffff
    20dc:	ffffffff 	.word	0xffffffff
    20e0:	ffffffff 	.word	0xffffffff
    20e4:	ffffffff 	.word	0xffffffff
    20e8:	ffffffff 	.word	0xffffffff
    20ec:	ffffffff 	.word	0xffffffff
    20f0:	ffffffff 	.word	0xffffffff
    20f4:	ffffffff 	.word	0xffffffff
    20f8:	ffffffff 	.word	0xffffffff
    20fc:	ffffffff 	.word	0xffffffff
    2100:	ffffffff 	.word	0xffffffff
    2104:	ffffffff 	.word	0xffffffff
    2108:	ffffffff 	.word	0xffffffff
    210c:	ffffffff 	.word	0xffffffff
    2110:	ffffffff 	.word	0xffffffff
    2114:	ffffffff 	.word	0xffffffff
    2118:	ffffffff 	.word	0xffffffff
    211c:	ffffffff 	.word	0xffffffff
    2120:	ffffffff 	.word	0xffffffff
    2124:	ffffffff 	.word	0xffffffff
    2128:	ffffffff 	.word	0xffffffff
    212c:	ffffffff 	.word	0xffffffff
    2130:	ffffffff 	.word	0xffffffff
    2134:	ffffffff 	.word	0xffffffff
    2138:	ffffffff 	.word	0xffffffff
    213c:	ffffffff 	.word	0xffffffff
    2140:	ffffffff 	.word	0xffffffff
    2144:	ffffffff 	.word	0xffffffff
    2148:	ffffffff 	.word	0xffffffff
    214c:	ffffffff 	.word	0xffffffff
    2150:	ffffffff 	.word	0xffffffff
    2154:	ffffffff 	.word	0xffffffff
    2158:	ffffffff 	.word	0xffffffff
    215c:	ffffffff 	.word	0xffffffff
    2160:	ffffffff 	.word	0xffffffff
    2164:	ffffffff 	.word	0xffffffff
    2168:	ffffffff 	.word	0xffffffff
    216c:	ffffffff 	.word	0xffffffff
    2170:	ffffffff 	.word	0xffffffff
    2174:	ffffffff 	.word	0xffffffff
    2178:	ffffffff 	.word	0xffffffff
    217c:	ffffffff 	.word	0xffffffff
    2180:	ffffffff 	.word	0xffffffff
    2184:	ffffffff 	.word	0xffffffff
    2188:	ffffffff 	.word	0xffffffff
    218c:	ffffffff 	.word	0xffffffff
    2190:	ffffffff 	.word	0xffffffff
    2194:	ffffffff 	.word	0xffffffff
    2198:	ffffffff 	.word	0xffffffff
    219c:	ffffffff 	.word	0xffffffff
    21a0:	ffffffff 	.word	0xffffffff
    21a4:	ffffffff 	.word	0xffffffff
    21a8:	ffffffff 	.word	0xffffffff
    21ac:	ffffffff 	.word	0xffffffff
    21b0:	ffffffff 	.word	0xffffffff
    21b4:	ffffffff 	.word	0xffffffff
    21b8:	ffffffff 	.word	0xffffffff
    21bc:	ffffffff 	.word	0xffffffff
    21c0:	ffffffff 	.word	0xffffffff
    21c4:	ffffffff 	.word	0xffffffff
    21c8:	ffffffff 	.word	0xffffffff
    21cc:	ffffffff 	.word	0xffffffff
    21d0:	ffffffff 	.word	0xffffffff
    21d4:	ffffffff 	.word	0xffffffff
    21d8:	ffffffff 	.word	0xffffffff
    21dc:	ffffffff 	.word	0xffffffff
    21e0:	ffffffff 	.word	0xffffffff
    21e4:	ffffffff 	.word	0xffffffff
    21e8:	ffffffff 	.word	0xffffffff
    21ec:	ffffffff 	.word	0xffffffff
    21f0:	ffffffff 	.word	0xffffffff
    21f4:	ffffffff 	.word	0xffffffff
    21f8:	ffffffff 	.word	0xffffffff
    21fc:	ffffffff 	.word	0xffffffff
    2200:	ffffffff 	.word	0xffffffff
    2204:	ffffffff 	.word	0xffffffff
    2208:	ffffffff 	.word	0xffffffff
    220c:	ffffffff 	.word	0xffffffff
    2210:	ffffffff 	.word	0xffffffff
    2214:	ffffffff 	.word	0xffffffff
    2218:	ffffffff 	.word	0xffffffff
    221c:	ffffffff 	.word	0xffffffff
    2220:	ffffffff 	.word	0xffffffff
    2224:	ffffffff 	.word	0xffffffff
    2228:	ffffffff 	.word	0xffffffff
    222c:	ffffffff 	.word	0xffffffff
    2230:	ffffffff 	.word	0xffffffff
    2234:	ffffffff 	.word	0xffffffff
    2238:	ffffffff 	.word	0xffffffff
    223c:	ffffffff 	.word	0xffffffff
    2240:	ffffffff 	.word	0xffffffff
    2244:	ffffffff 	.word	0xffffffff
    2248:	ffffffff 	.word	0xffffffff
    224c:	ffffffff 	.word	0xffffffff
    2250:	ffffffff 	.word	0xffffffff
    2254:	ffffffff 	.word	0xffffffff
    2258:	ffffffff 	.word	0xffffffff
    225c:	ffffffff 	.word	0xffffffff
    2260:	ffffffff 	.word	0xffffffff
    2264:	ffffffff 	.word	0xffffffff
    2268:	ffffffff 	.word	0xffffffff
    226c:	ffffffff 	.word	0xffffffff
    2270:	ffffffff 	.word	0xffffffff
    2274:	ffffffff 	.word	0xffffffff
    2278:	ffffffff 	.word	0xffffffff
    227c:	ffffffff 	.word	0xffffffff
    2280:	ffffffff 	.word	0xffffffff
    2284:	ffffffff 	.word	0xffffffff
    2288:	ffffffff 	.word	0xffffffff
    228c:	ffffffff 	.word	0xffffffff
    2290:	ffffffff 	.word	0xffffffff
    2294:	ffffffff 	.word	0xffffffff
    2298:	ffffffff 	.word	0xffffffff
    229c:	ffffffff 	.word	0xffffffff
    22a0:	ffffffff 	.word	0xffffffff
    22a4:	ffffffff 	.word	0xffffffff
    22a8:	ffffffff 	.word	0xffffffff
    22ac:	ffffffff 	.word	0xffffffff
    22b0:	ffffffff 	.word	0xffffffff
    22b4:	ffffffff 	.word	0xffffffff
    22b8:	ffffffff 	.word	0xffffffff
    22bc:	ffffffff 	.word	0xffffffff
    22c0:	ffffffff 	.word	0xffffffff
    22c4:	ffffffff 	.word	0xffffffff
    22c8:	ffffffff 	.word	0xffffffff
    22cc:	ffffffff 	.word	0xffffffff
    22d0:	ffffffff 	.word	0xffffffff
    22d4:	ffffffff 	.word	0xffffffff
    22d8:	ffffffff 	.word	0xffffffff
    22dc:	ffffffff 	.word	0xffffffff
    22e0:	ffffffff 	.word	0xffffffff
    22e4:	ffffffff 	.word	0xffffffff
    22e8:	ffffffff 	.word	0xffffffff
    22ec:	ffffffff 	.word	0xffffffff
    22f0:	ffffffff 	.word	0xffffffff
    22f4:	ffffffff 	.word	0xffffffff
    22f8:	ffffffff 	.word	0xffffffff
    22fc:	ffffffff 	.word	0xffffffff
    2300:	ffffffff 	.word	0xffffffff
    2304:	ffffffff 	.word	0xffffffff
    2308:	ffffffff 	.word	0xffffffff
    230c:	ffffffff 	.word	0xffffffff
    2310:	ffffffff 	.word	0xffffffff
    2314:	ffffffff 	.word	0xffffffff
    2318:	ffffffff 	.word	0xffffffff
    231c:	ffffffff 	.word	0xffffffff
    2320:	ffffffff 	.word	0xffffffff
    2324:	ffffffff 	.word	0xffffffff
    2328:	ffffffff 	.word	0xffffffff
    232c:	ffffffff 	.word	0xffffffff
    2330:	ffffffff 	.word	0xffffffff
    2334:	ffffffff 	.word	0xffffffff
    2338:	ffffffff 	.word	0xffffffff
    233c:	ffffffff 	.word	0xffffffff
    2340:	ffffffff 	.word	0xffffffff
    2344:	ffffffff 	.word	0xffffffff
    2348:	ffffffff 	.word	0xffffffff
    234c:	ffffffff 	.word	0xffffffff
    2350:	ffffffff 	.word	0xffffffff
    2354:	ffffffff 	.word	0xffffffff
    2358:	ffffffff 	.word	0xffffffff
    235c:	ffffffff 	.word	0xffffffff
    2360:	ffffffff 	.word	0xffffffff
    2364:	ffffffff 	.word	0xffffffff
    2368:	ffffffff 	.word	0xffffffff
    236c:	ffffffff 	.word	0xffffffff
    2370:	ffffffff 	.word	0xffffffff
    2374:	ffffffff 	.word	0xffffffff
    2378:	ffffffff 	.word	0xffffffff
    237c:	ffffffff 	.word	0xffffffff
    2380:	ffffffff 	.word	0xffffffff
    2384:	ffffffff 	.word	0xffffffff
    2388:	ffffffff 	.word	0xffffffff
    238c:	ffffffff 	.word	0xffffffff
    2390:	ffffffff 	.word	0xffffffff
    2394:	ffffffff 	.word	0xffffffff
    2398:	ffffffff 	.word	0xffffffff
    239c:	ffffffff 	.word	0xffffffff
    23a0:	ffffffff 	.word	0xffffffff
    23a4:	ffffffff 	.word	0xffffffff
    23a8:	ffffffff 	.word	0xffffffff
    23ac:	ffffffff 	.word	0xffffffff
    23b0:	ffffffff 	.word	0xffffffff
    23b4:	ffffffff 	.word	0xffffffff
    23b8:	ffffffff 	.word	0xffffffff
    23bc:	ffffffff 	.word	0xffffffff
    23c0:	ffffffff 	.word	0xffffffff
    23c4:	ffffffff 	.word	0xffffffff
    23c8:	ffffffff 	.word	0xffffffff
    23cc:	ffffffff 	.word	0xffffffff
    23d0:	ffffffff 	.word	0xffffffff
    23d4:	ffffffff 	.word	0xffffffff
    23d8:	ffffffff 	.word	0xffffffff
    23dc:	ffffffff 	.word	0xffffffff
    23e0:	ffffffff 	.word	0xffffffff
    23e4:	ffffffff 	.word	0xffffffff
    23e8:	ffffffff 	.word	0xffffffff
    23ec:	ffffffff 	.word	0xffffffff
    23f0:	ffffffff 	.word	0xffffffff
    23f4:	ffffffff 	.word	0xffffffff
    23f8:	ffffffff 	.word	0xffffffff
    23fc:	ffffffff 	.word	0xffffffff
    2400:	ffffffff 	.word	0xffffffff
    2404:	ffffffff 	.word	0xffffffff
    2408:	ffffffff 	.word	0xffffffff
    240c:	ffffffff 	.word	0xffffffff
    2410:	ffffffff 	.word	0xffffffff
    2414:	ffffffff 	.word	0xffffffff
    2418:	ffffffff 	.word	0xffffffff
    241c:	ffffffff 	.word	0xffffffff
    2420:	ffffffff 	.word	0xffffffff
    2424:	ffffffff 	.word	0xffffffff
    2428:	ffffffff 	.word	0xffffffff
    242c:	ffffffff 	.word	0xffffffff
    2430:	ffffffff 	.word	0xffffffff
    2434:	ffffffff 	.word	0xffffffff
    2438:	ffffffff 	.word	0xffffffff
    243c:	ffffffff 	.word	0xffffffff
    2440:	ffffffff 	.word	0xffffffff
    2444:	ffffffff 	.word	0xffffffff
    2448:	ffffffff 	.word	0xffffffff
    244c:	ffffffff 	.word	0xffffffff
    2450:	ffffffff 	.word	0xffffffff
    2454:	ffffffff 	.word	0xffffffff
    2458:	ffffffff 	.word	0xffffffff
    245c:	ffffffff 	.word	0xffffffff
    2460:	ffffffff 	.word	0xffffffff
    2464:	ffffffff 	.word	0xffffffff
    2468:	ffffffff 	.word	0xffffffff
    246c:	ffffffff 	.word	0xffffffff
    2470:	ffffffff 	.word	0xffffffff
    2474:	ffffffff 	.word	0xffffffff
    2478:	ffffffff 	.word	0xffffffff
    247c:	ffffffff 	.word	0xffffffff
    2480:	ffffffff 	.word	0xffffffff
    2484:	ffffffff 	.word	0xffffffff
    2488:	ffffffff 	.word	0xffffffff
    248c:	ffffffff 	.word	0xffffffff
    2490:	ffffffff 	.word	0xffffffff
    2494:	ffffffff 	.word	0xffffffff
    2498:	ffffffff 	.word	0xffffffff
    249c:	ffffffff 	.word	0xffffffff
    24a0:	ffffffff 	.word	0xffffffff
    24a4:	ffffffff 	.word	0xffffffff
    24a8:	ffffffff 	.word	0xffffffff
    24ac:	ffffffff 	.word	0xffffffff
    24b0:	ffffffff 	.word	0xffffffff
    24b4:	ffffffff 	.word	0xffffffff
    24b8:	ffffffff 	.word	0xffffffff
    24bc:	ffffffff 	.word	0xffffffff
    24c0:	ffffffff 	.word	0xffffffff
    24c4:	ffffffff 	.word	0xffffffff
    24c8:	ffffffff 	.word	0xffffffff
    24cc:	ffffffff 	.word	0xffffffff
    24d0:	ffffffff 	.word	0xffffffff
    24d4:	ffffffff 	.word	0xffffffff
    24d8:	ffffffff 	.word	0xffffffff
    24dc:	ffffffff 	.word	0xffffffff
    24e0:	ffffffff 	.word	0xffffffff
    24e4:	ffffffff 	.word	0xffffffff
    24e8:	ffffffff 	.word	0xffffffff
    24ec:	ffffffff 	.word	0xffffffff
    24f0:	ffffffff 	.word	0xffffffff
    24f4:	ffffffff 	.word	0xffffffff
    24f8:	ffffffff 	.word	0xffffffff
    24fc:	ffffffff 	.word	0xffffffff
    2500:	ffffffff 	.word	0xffffffff
    2504:	ffffffff 	.word	0xffffffff
    2508:	ffffffff 	.word	0xffffffff
    250c:	ffffffff 	.word	0xffffffff
    2510:	ffffffff 	.word	0xffffffff
    2514:	ffffffff 	.word	0xffffffff
    2518:	ffffffff 	.word	0xffffffff
    251c:	ffffffff 	.word	0xffffffff
    2520:	ffffffff 	.word	0xffffffff
    2524:	ffffffff 	.word	0xffffffff
    2528:	ffffffff 	.word	0xffffffff
    252c:	ffffffff 	.word	0xffffffff
    2530:	ffffffff 	.word	0xffffffff
    2534:	ffffffff 	.word	0xffffffff
    2538:	ffffffff 	.word	0xffffffff
    253c:	ffffffff 	.word	0xffffffff
    2540:	ffffffff 	.word	0xffffffff
    2544:	ffffffff 	.word	0xffffffff
    2548:	ffffffff 	.word	0xffffffff
    254c:	ffffffff 	.word	0xffffffff
    2550:	ffffffff 	.word	0xffffffff
    2554:	ffffffff 	.word	0xffffffff
    2558:	ffffffff 	.word	0xffffffff
    255c:	ffffffff 	.word	0xffffffff
    2560:	ffffffff 	.word	0xffffffff
    2564:	ffffffff 	.word	0xffffffff
    2568:	ffffffff 	.word	0xffffffff
    256c:	ffffffff 	.word	0xffffffff
    2570:	ffffffff 	.word	0xffffffff
    2574:	ffffffff 	.word	0xffffffff
    2578:	ffffffff 	.word	0xffffffff
    257c:	ffffffff 	.word	0xffffffff
    2580:	ffffffff 	.word	0xffffffff
    2584:	ffffffff 	.word	0xffffffff
    2588:	ffffffff 	.word	0xffffffff
    258c:	ffffffff 	.word	0xffffffff
    2590:	ffffffff 	.word	0xffffffff
    2594:	ffffffff 	.word	0xffffffff
    2598:	ffffffff 	.word	0xffffffff
    259c:	ffffffff 	.word	0xffffffff
    25a0:	ffffffff 	.word	0xffffffff
    25a4:	ffffffff 	.word	0xffffffff
    25a8:	ffffffff 	.word	0xffffffff
    25ac:	ffffffff 	.word	0xffffffff
    25b0:	ffffffff 	.word	0xffffffff
    25b4:	ffffffff 	.word	0xffffffff
    25b8:	ffffffff 	.word	0xffffffff
    25bc:	ffffffff 	.word	0xffffffff
    25c0:	ffffffff 	.word	0xffffffff
    25c4:	ffffffff 	.word	0xffffffff
    25c8:	ffffffff 	.word	0xffffffff
    25cc:	ffffffff 	.word	0xffffffff
    25d0:	ffffffff 	.word	0xffffffff
    25d4:	ffffffff 	.word	0xffffffff
    25d8:	ffffffff 	.word	0xffffffff
    25dc:	ffffffff 	.word	0xffffffff
    25e0:	ffffffff 	.word	0xffffffff
    25e4:	ffffffff 	.word	0xffffffff
    25e8:	ffffffff 	.word	0xffffffff
    25ec:	ffffffff 	.word	0xffffffff
    25f0:	ffffffff 	.word	0xffffffff
    25f4:	ffffffff 	.word	0xffffffff
    25f8:	ffffffff 	.word	0xffffffff
    25fc:	ffffffff 	.word	0xffffffff
    2600:	ffffffff 	.word	0xffffffff
    2604:	ffffffff 	.word	0xffffffff
    2608:	ffffffff 	.word	0xffffffff
    260c:	ffffffff 	.word	0xffffffff
    2610:	ffffffff 	.word	0xffffffff
    2614:	ffffffff 	.word	0xffffffff
    2618:	ffffffff 	.word	0xffffffff
    261c:	ffffffff 	.word	0xffffffff
    2620:	ffffffff 	.word	0xffffffff
    2624:	ffffffff 	.word	0xffffffff
    2628:	ffffffff 	.word	0xffffffff
    262c:	ffffffff 	.word	0xffffffff
    2630:	ffffffff 	.word	0xffffffff
    2634:	ffffffff 	.word	0xffffffff
    2638:	ffffffff 	.word	0xffffffff
    263c:	ffffffff 	.word	0xffffffff
    2640:	ffffffff 	.word	0xffffffff
    2644:	ffffffff 	.word	0xffffffff
    2648:	ffffffff 	.word	0xffffffff
    264c:	ffffffff 	.word	0xffffffff
    2650:	ffffffff 	.word	0xffffffff
    2654:	ffffffff 	.word	0xffffffff
    2658:	ffffffff 	.word	0xffffffff
    265c:	ffffffff 	.word	0xffffffff
    2660:	ffffffff 	.word	0xffffffff
    2664:	ffffffff 	.word	0xffffffff
    2668:	ffffffff 	.word	0xffffffff
    266c:	ffffffff 	.word	0xffffffff
    2670:	ffffffff 	.word	0xffffffff
    2674:	ffffffff 	.word	0xffffffff
    2678:	ffffffff 	.word	0xffffffff
    267c:	ffffffff 	.word	0xffffffff
    2680:	ffffffff 	.word	0xffffffff
    2684:	ffffffff 	.word	0xffffffff
    2688:	ffffffff 	.word	0xffffffff
    268c:	ffffffff 	.word	0xffffffff
    2690:	ffffffff 	.word	0xffffffff
    2694:	ffffffff 	.word	0xffffffff
    2698:	ffffffff 	.word	0xffffffff
    269c:	ffffffff 	.word	0xffffffff
    26a0:	ffffffff 	.word	0xffffffff
    26a4:	ffffffff 	.word	0xffffffff
    26a8:	ffffffff 	.word	0xffffffff
    26ac:	ffffffff 	.word	0xffffffff
    26b0:	ffffffff 	.word	0xffffffff
    26b4:	ffffffff 	.word	0xffffffff
    26b8:	ffffffff 	.word	0xffffffff
    26bc:	ffffffff 	.word	0xffffffff
    26c0:	ffffffff 	.word	0xffffffff
    26c4:	ffffffff 	.word	0xffffffff
    26c8:	ffffffff 	.word	0xffffffff
    26cc:	ffffffff 	.word	0xffffffff
    26d0:	ffffffff 	.word	0xffffffff
    26d4:	ffffffff 	.word	0xffffffff
    26d8:	ffffffff 	.word	0xffffffff
    26dc:	ffffffff 	.word	0xffffffff
    26e0:	ffffffff 	.word	0xffffffff
    26e4:	ffffffff 	.word	0xffffffff
    26e8:	ffffffff 	.word	0xffffffff
    26ec:	ffffffff 	.word	0xffffffff
    26f0:	ffffffff 	.word	0xffffffff
    26f4:	ffffffff 	.word	0xffffffff
    26f8:	ffffffff 	.word	0xffffffff
    26fc:	ffffffff 	.word	0xffffffff
    2700:	ffffffff 	.word	0xffffffff
    2704:	ffffffff 	.word	0xffffffff
    2708:	ffffffff 	.word	0xffffffff
    270c:	ffffffff 	.word	0xffffffff
    2710:	ffffffff 	.word	0xffffffff
    2714:	ffffffff 	.word	0xffffffff
    2718:	ffffffff 	.word	0xffffffff
    271c:	ffffffff 	.word	0xffffffff
    2720:	ffffffff 	.word	0xffffffff
    2724:	ffffffff 	.word	0xffffffff
    2728:	ffffffff 	.word	0xffffffff
    272c:	ffffffff 	.word	0xffffffff
    2730:	ffffffff 	.word	0xffffffff
    2734:	ffffffff 	.word	0xffffffff
    2738:	ffffffff 	.word	0xffffffff
    273c:	ffffffff 	.word	0xffffffff
    2740:	ffffffff 	.word	0xffffffff
    2744:	ffffffff 	.word	0xffffffff
    2748:	ffffffff 	.word	0xffffffff
    274c:	ffffffff 	.word	0xffffffff
    2750:	ffffffff 	.word	0xffffffff
    2754:	ffffffff 	.word	0xffffffff
    2758:	ffffffff 	.word	0xffffffff
    275c:	ffffffff 	.word	0xffffffff
    2760:	ffffffff 	.word	0xffffffff
    2764:	ffffffff 	.word	0xffffffff
    2768:	ffffffff 	.word	0xffffffff
    276c:	ffffffff 	.word	0xffffffff
    2770:	ffffffff 	.word	0xffffffff
    2774:	ffffffff 	.word	0xffffffff
    2778:	ffffffff 	.word	0xffffffff
    277c:	ffffffff 	.word	0xffffffff
    2780:	ffffffff 	.word	0xffffffff
    2784:	ffffffff 	.word	0xffffffff
    2788:	ffffffff 	.word	0xffffffff
    278c:	ffffffff 	.word	0xffffffff
    2790:	ffffffff 	.word	0xffffffff
    2794:	ffffffff 	.word	0xffffffff
    2798:	ffffffff 	.word	0xffffffff
    279c:	ffffffff 	.word	0xffffffff
    27a0:	ffffffff 	.word	0xffffffff
    27a4:	ffffffff 	.word	0xffffffff
    27a8:	ffffffff 	.word	0xffffffff
    27ac:	ffffffff 	.word	0xffffffff
    27b0:	ffffffff 	.word	0xffffffff
    27b4:	ffffffff 	.word	0xffffffff
    27b8:	ffffffff 	.word	0xffffffff
    27bc:	ffffffff 	.word	0xffffffff
    27c0:	ffffffff 	.word	0xffffffff
    27c4:	ffffffff 	.word	0xffffffff
    27c8:	ffffffff 	.word	0xffffffff
    27cc:	ffffffff 	.word	0xffffffff
    27d0:	ffffffff 	.word	0xffffffff
    27d4:	ffffffff 	.word	0xffffffff
    27d8:	ffffffff 	.word	0xffffffff
    27dc:	ffffffff 	.word	0xffffffff
    27e0:	ffffffff 	.word	0xffffffff
    27e4:	ffffffff 	.word	0xffffffff
    27e8:	ffffffff 	.word	0xffffffff
    27ec:	ffffffff 	.word	0xffffffff
    27f0:	ffffffff 	.word	0xffffffff
    27f4:	ffffffff 	.word	0xffffffff
    27f8:	ffffffff 	.word	0xffffffff
    27fc:	ffffffff 	.word	0xffffffff
    2800:	ffffffff 	.word	0xffffffff
    2804:	ffffffff 	.word	0xffffffff
    2808:	ffffffff 	.word	0xffffffff
    280c:	ffffffff 	.word	0xffffffff
    2810:	ffffffff 	.word	0xffffffff
    2814:	ffffffff 	.word	0xffffffff
    2818:	ffffffff 	.word	0xffffffff
    281c:	ffffffff 	.word	0xffffffff
    2820:	ffffffff 	.word	0xffffffff
    2824:	ffffffff 	.word	0xffffffff
    2828:	ffffffff 	.word	0xffffffff
    282c:	ffffffff 	.word	0xffffffff
    2830:	ffffffff 	.word	0xffffffff
    2834:	ffffffff 	.word	0xffffffff
    2838:	ffffffff 	.word	0xffffffff
    283c:	ffffffff 	.word	0xffffffff
    2840:	ffffffff 	.word	0xffffffff
    2844:	ffffffff 	.word	0xffffffff
    2848:	ffffffff 	.word	0xffffffff
    284c:	ffffffff 	.word	0xffffffff
    2850:	ffffffff 	.word	0xffffffff
    2854:	ffffffff 	.word	0xffffffff
    2858:	ffffffff 	.word	0xffffffff
    285c:	ffffffff 	.word	0xffffffff
    2860:	ffffffff 	.word	0xffffffff
    2864:	ffffffff 	.word	0xffffffff
    2868:	ffffffff 	.word	0xffffffff
    286c:	ffffffff 	.word	0xffffffff
    2870:	ffffffff 	.word	0xffffffff
    2874:	ffffffff 	.word	0xffffffff
    2878:	ffffffff 	.word	0xffffffff
    287c:	ffffffff 	.word	0xffffffff
    2880:	ffffffff 	.word	0xffffffff
    2884:	ffffffff 	.word	0xffffffff
    2888:	ffffffff 	.word	0xffffffff
    288c:	ffffffff 	.word	0xffffffff
    2890:	ffffffff 	.word	0xffffffff
    2894:	ffffffff 	.word	0xffffffff
    2898:	ffffffff 	.word	0xffffffff
    289c:	ffffffff 	.word	0xffffffff
    28a0:	ffffffff 	.word	0xffffffff
    28a4:	ffffffff 	.word	0xffffffff
    28a8:	ffffffff 	.word	0xffffffff
    28ac:	ffffffff 	.word	0xffffffff
    28b0:	ffffffff 	.word	0xffffffff
    28b4:	ffffffff 	.word	0xffffffff
    28b8:	ffffffff 	.word	0xffffffff
    28bc:	ffffffff 	.word	0xffffffff
    28c0:	ffffffff 	.word	0xffffffff
    28c4:	ffffffff 	.word	0xffffffff
    28c8:	ffffffff 	.word	0xffffffff
    28cc:	ffffffff 	.word	0xffffffff
    28d0:	ffffffff 	.word	0xffffffff
    28d4:	ffffffff 	.word	0xffffffff
    28d8:	ffffffff 	.word	0xffffffff
    28dc:	ffffffff 	.word	0xffffffff
    28e0:	ffffffff 	.word	0xffffffff
    28e4:	ffffffff 	.word	0xffffffff
    28e8:	ffffffff 	.word	0xffffffff
    28ec:	ffffffff 	.word	0xffffffff
    28f0:	ffffffff 	.word	0xffffffff
    28f4:	ffffffff 	.word	0xffffffff
    28f8:	ffffffff 	.word	0xffffffff
    28fc:	ffffffff 	.word	0xffffffff
    2900:	ffffffff 	.word	0xffffffff
    2904:	ffffffff 	.word	0xffffffff
    2908:	ffffffff 	.word	0xffffffff
    290c:	ffffffff 	.word	0xffffffff
    2910:	ffffffff 	.word	0xffffffff
    2914:	ffffffff 	.word	0xffffffff
    2918:	ffffffff 	.word	0xffffffff
    291c:	ffffffff 	.word	0xffffffff
    2920:	ffffffff 	.word	0xffffffff
    2924:	ffffffff 	.word	0xffffffff
    2928:	ffffffff 	.word	0xffffffff
    292c:	ffffffff 	.word	0xffffffff
    2930:	ffffffff 	.word	0xffffffff
    2934:	ffffffff 	.word	0xffffffff
    2938:	ffffffff 	.word	0xffffffff
    293c:	ffffffff 	.word	0xffffffff
    2940:	ffffffff 	.word	0xffffffff
    2944:	ffffffff 	.word	0xffffffff
    2948:	ffffffff 	.word	0xffffffff
    294c:	ffffffff 	.word	0xffffffff
    2950:	ffffffff 	.word	0xffffffff
    2954:	ffffffff 	.word	0xffffffff
    2958:	ffffffff 	.word	0xffffffff
    295c:	ffffffff 	.word	0xffffffff
    2960:	ffffffff 	.word	0xffffffff
    2964:	ffffffff 	.word	0xffffffff
    2968:	ffffffff 	.word	0xffffffff
    296c:	ffffffff 	.word	0xffffffff
    2970:	ffffffff 	.word	0xffffffff
    2974:	ffffffff 	.word	0xffffffff
    2978:	ffffffff 	.word	0xffffffff
    297c:	ffffffff 	.word	0xffffffff
    2980:	ffffffff 	.word	0xffffffff
    2984:	ffffffff 	.word	0xffffffff
    2988:	ffffffff 	.word	0xffffffff
    298c:	ffffffff 	.word	0xffffffff
    2990:	ffffffff 	.word	0xffffffff
    2994:	ffffffff 	.word	0xffffffff
    2998:	ffffffff 	.word	0xffffffff
    299c:	ffffffff 	.word	0xffffffff
    29a0:	ffffffff 	.word	0xffffffff
    29a4:	ffffffff 	.word	0xffffffff
    29a8:	ffffffff 	.word	0xffffffff
    29ac:	ffffffff 	.word	0xffffffff
    29b0:	ffffffff 	.word	0xffffffff
    29b4:	ffffffff 	.word	0xffffffff
    29b8:	ffffffff 	.word	0xffffffff
    29bc:	ffffffff 	.word	0xffffffff
    29c0:	ffffffff 	.word	0xffffffff
    29c4:	ffffffff 	.word	0xffffffff
    29c8:	ffffffff 	.word	0xffffffff
    29cc:	ffffffff 	.word	0xffffffff
    29d0:	ffffffff 	.word	0xffffffff
    29d4:	ffffffff 	.word	0xffffffff
    29d8:	ffffffff 	.word	0xffffffff
    29dc:	ffffffff 	.word	0xffffffff
    29e0:	ffffffff 	.word	0xffffffff
    29e4:	ffffffff 	.word	0xffffffff
    29e8:	ffffffff 	.word	0xffffffff
    29ec:	ffffffff 	.word	0xffffffff
    29f0:	ffffffff 	.word	0xffffffff
    29f4:	ffffffff 	.word	0xffffffff
    29f8:	ffffffff 	.word	0xffffffff
    29fc:	ffffffff 	.word	0xffffffff
    2a00:	ffffffff 	.word	0xffffffff
    2a04:	ffffffff 	.word	0xffffffff
    2a08:	ffffffff 	.word	0xffffffff
    2a0c:	ffffffff 	.word	0xffffffff
    2a10:	ffffffff 	.word	0xffffffff
    2a14:	ffffffff 	.word	0xffffffff
    2a18:	ffffffff 	.word	0xffffffff
    2a1c:	ffffffff 	.word	0xffffffff
    2a20:	ffffffff 	.word	0xffffffff
    2a24:	ffffffff 	.word	0xffffffff
    2a28:	ffffffff 	.word	0xffffffff
    2a2c:	ffffffff 	.word	0xffffffff
    2a30:	ffffffff 	.word	0xffffffff
    2a34:	ffffffff 	.word	0xffffffff
    2a38:	ffffffff 	.word	0xffffffff
    2a3c:	ffffffff 	.word	0xffffffff
    2a40:	ffffffff 	.word	0xffffffff
    2a44:	ffffffff 	.word	0xffffffff
    2a48:	ffffffff 	.word	0xffffffff
    2a4c:	ffffffff 	.word	0xffffffff
    2a50:	ffffffff 	.word	0xffffffff
    2a54:	ffffffff 	.word	0xffffffff
    2a58:	ffffffff 	.word	0xffffffff
    2a5c:	ffffffff 	.word	0xffffffff
    2a60:	ffffffff 	.word	0xffffffff
    2a64:	ffffffff 	.word	0xffffffff
    2a68:	ffffffff 	.word	0xffffffff
    2a6c:	ffffffff 	.word	0xffffffff
    2a70:	ffffffff 	.word	0xffffffff
    2a74:	ffffffff 	.word	0xffffffff
    2a78:	ffffffff 	.word	0xffffffff
    2a7c:	ffffffff 	.word	0xffffffff
    2a80:	ffffffff 	.word	0xffffffff
    2a84:	ffffffff 	.word	0xffffffff
    2a88:	ffffffff 	.word	0xffffffff
    2a8c:	ffffffff 	.word	0xffffffff
    2a90:	ffffffff 	.word	0xffffffff
    2a94:	ffffffff 	.word	0xffffffff
    2a98:	ffffffff 	.word	0xffffffff
    2a9c:	ffffffff 	.word	0xffffffff
    2aa0:	ffffffff 	.word	0xffffffff
    2aa4:	ffffffff 	.word	0xffffffff
    2aa8:	ffffffff 	.word	0xffffffff
    2aac:	ffffffff 	.word	0xffffffff
    2ab0:	ffffffff 	.word	0xffffffff
    2ab4:	ffffffff 	.word	0xffffffff
    2ab8:	ffffffff 	.word	0xffffffff
    2abc:	ffffffff 	.word	0xffffffff
    2ac0:	ffffffff 	.word	0xffffffff
    2ac4:	ffffffff 	.word	0xffffffff
    2ac8:	ffffffff 	.word	0xffffffff
    2acc:	ffffffff 	.word	0xffffffff
    2ad0:	ffffffff 	.word	0xffffffff
    2ad4:	ffffffff 	.word	0xffffffff
    2ad8:	ffffffff 	.word	0xffffffff
    2adc:	ffffffff 	.word	0xffffffff
    2ae0:	ffffffff 	.word	0xffffffff
    2ae4:	ffffffff 	.word	0xffffffff
    2ae8:	ffffffff 	.word	0xffffffff
    2aec:	ffffffff 	.word	0xffffffff
    2af0:	ffffffff 	.word	0xffffffff
    2af4:	ffffffff 	.word	0xffffffff
    2af8:	ffffffff 	.word	0xffffffff
    2afc:	ffffffff 	.word	0xffffffff
    2b00:	ffffffff 	.word	0xffffffff
    2b04:	ffffffff 	.word	0xffffffff
    2b08:	ffffffff 	.word	0xffffffff
    2b0c:	ffffffff 	.word	0xffffffff
    2b10:	ffffffff 	.word	0xffffffff
    2b14:	ffffffff 	.word	0xffffffff
    2b18:	ffffffff 	.word	0xffffffff
    2b1c:	ffffffff 	.word	0xffffffff
    2b20:	ffffffff 	.word	0xffffffff
    2b24:	ffffffff 	.word	0xffffffff
    2b28:	ffffffff 	.word	0xffffffff
    2b2c:	ffffffff 	.word	0xffffffff
    2b30:	ffffffff 	.word	0xffffffff
    2b34:	ffffffff 	.word	0xffffffff
    2b38:	ffffffff 	.word	0xffffffff
    2b3c:	ffffffff 	.word	0xffffffff
    2b40:	ffffffff 	.word	0xffffffff
    2b44:	ffffffff 	.word	0xffffffff
    2b48:	ffffffff 	.word	0xffffffff
    2b4c:	ffffffff 	.word	0xffffffff
    2b50:	ffffffff 	.word	0xffffffff
    2b54:	ffffffff 	.word	0xffffffff
    2b58:	ffffffff 	.word	0xffffffff
    2b5c:	ffffffff 	.word	0xffffffff
    2b60:	ffffffff 	.word	0xffffffff
    2b64:	ffffffff 	.word	0xffffffff
    2b68:	ffffffff 	.word	0xffffffff
    2b6c:	ffffffff 	.word	0xffffffff
    2b70:	ffffffff 	.word	0xffffffff
    2b74:	ffffffff 	.word	0xffffffff
    2b78:	ffffffff 	.word	0xffffffff
    2b7c:	ffffffff 	.word	0xffffffff
    2b80:	ffffffff 	.word	0xffffffff
    2b84:	ffffffff 	.word	0xffffffff
    2b88:	ffffffff 	.word	0xffffffff
    2b8c:	ffffffff 	.word	0xffffffff
    2b90:	ffffffff 	.word	0xffffffff
    2b94:	ffffffff 	.word	0xffffffff
    2b98:	ffffffff 	.word	0xffffffff
    2b9c:	ffffffff 	.word	0xffffffff
    2ba0:	ffffffff 	.word	0xffffffff
    2ba4:	ffffffff 	.word	0xffffffff
    2ba8:	ffffffff 	.word	0xffffffff
    2bac:	ffffffff 	.word	0xffffffff
    2bb0:	ffffffff 	.word	0xffffffff
    2bb4:	ffffffff 	.word	0xffffffff
    2bb8:	ffffffff 	.word	0xffffffff
    2bbc:	ffffffff 	.word	0xffffffff
    2bc0:	ffffffff 	.word	0xffffffff
    2bc4:	ffffffff 	.word	0xffffffff
    2bc8:	ffffffff 	.word	0xffffffff
    2bcc:	ffffffff 	.word	0xffffffff
    2bd0:	ffffffff 	.word	0xffffffff
    2bd4:	ffffffff 	.word	0xffffffff
    2bd8:	ffffffff 	.word	0xffffffff
    2bdc:	ffffffff 	.word	0xffffffff
    2be0:	ffffffff 	.word	0xffffffff
    2be4:	ffffffff 	.word	0xffffffff
    2be8:	ffffffff 	.word	0xffffffff
    2bec:	ffffffff 	.word	0xffffffff
    2bf0:	ffffffff 	.word	0xffffffff
    2bf4:	ffffffff 	.word	0xffffffff
    2bf8:	ffffffff 	.word	0xffffffff
    2bfc:	ffffffff 	.word	0xffffffff
    2c00:	ffffffff 	.word	0xffffffff
    2c04:	ffffffff 	.word	0xffffffff
    2c08:	ffffffff 	.word	0xffffffff
    2c0c:	ffffffff 	.word	0xffffffff
    2c10:	ffffffff 	.word	0xffffffff
    2c14:	ffffffff 	.word	0xffffffff
    2c18:	ffffffff 	.word	0xffffffff
    2c1c:	ffffffff 	.word	0xffffffff
    2c20:	ffffffff 	.word	0xffffffff
    2c24:	ffffffff 	.word	0xffffffff
    2c28:	ffffffff 	.word	0xffffffff
    2c2c:	ffffffff 	.word	0xffffffff
    2c30:	ffffffff 	.word	0xffffffff
    2c34:	ffffffff 	.word	0xffffffff
    2c38:	ffffffff 	.word	0xffffffff
    2c3c:	ffffffff 	.word	0xffffffff
    2c40:	ffffffff 	.word	0xffffffff
    2c44:	ffffffff 	.word	0xffffffff
    2c48:	ffffffff 	.word	0xffffffff
    2c4c:	ffffffff 	.word	0xffffffff
    2c50:	ffffffff 	.word	0xffffffff
    2c54:	ffffffff 	.word	0xffffffff
    2c58:	ffffffff 	.word	0xffffffff
    2c5c:	ffffffff 	.word	0xffffffff
    2c60:	ffffffff 	.word	0xffffffff
    2c64:	ffffffff 	.word	0xffffffff
    2c68:	ffffffff 	.word	0xffffffff
    2c6c:	ffffffff 	.word	0xffffffff
    2c70:	ffffffff 	.word	0xffffffff
    2c74:	ffffffff 	.word	0xffffffff
    2c78:	ffffffff 	.word	0xffffffff
    2c7c:	ffffffff 	.word	0xffffffff
    2c80:	ffffffff 	.word	0xffffffff
    2c84:	ffffffff 	.word	0xffffffff
    2c88:	ffffffff 	.word	0xffffffff
    2c8c:	ffffffff 	.word	0xffffffff
    2c90:	ffffffff 	.word	0xffffffff
    2c94:	ffffffff 	.word	0xffffffff
    2c98:	ffffffff 	.word	0xffffffff
    2c9c:	ffffffff 	.word	0xffffffff
    2ca0:	ffffffff 	.word	0xffffffff
    2ca4:	ffffffff 	.word	0xffffffff
    2ca8:	ffffffff 	.word	0xffffffff
    2cac:	ffffffff 	.word	0xffffffff
    2cb0:	ffffffff 	.word	0xffffffff
    2cb4:	ffffffff 	.word	0xffffffff
    2cb8:	ffffffff 	.word	0xffffffff
    2cbc:	ffffffff 	.word	0xffffffff
    2cc0:	ffffffff 	.word	0xffffffff
    2cc4:	ffffffff 	.word	0xffffffff
    2cc8:	ffffffff 	.word	0xffffffff
    2ccc:	ffffffff 	.word	0xffffffff
    2cd0:	ffffffff 	.word	0xffffffff
    2cd4:	ffffffff 	.word	0xffffffff
    2cd8:	ffffffff 	.word	0xffffffff
    2cdc:	ffffffff 	.word	0xffffffff
    2ce0:	ffffffff 	.word	0xffffffff
    2ce4:	ffffffff 	.word	0xffffffff
    2ce8:	ffffffff 	.word	0xffffffff
    2cec:	ffffffff 	.word	0xffffffff
    2cf0:	ffffffff 	.word	0xffffffff
    2cf4:	ffffffff 	.word	0xffffffff
    2cf8:	ffffffff 	.word	0xffffffff
    2cfc:	ffffffff 	.word	0xffffffff
    2d00:	ffffffff 	.word	0xffffffff
    2d04:	ffffffff 	.word	0xffffffff
    2d08:	ffffffff 	.word	0xffffffff
    2d0c:	ffffffff 	.word	0xffffffff
    2d10:	ffffffff 	.word	0xffffffff
    2d14:	ffffffff 	.word	0xffffffff
    2d18:	ffffffff 	.word	0xffffffff
    2d1c:	ffffffff 	.word	0xffffffff
    2d20:	ffffffff 	.word	0xffffffff
    2d24:	ffffffff 	.word	0xffffffff
    2d28:	ffffffff 	.word	0xffffffff
    2d2c:	ffffffff 	.word	0xffffffff
    2d30:	ffffffff 	.word	0xffffffff
    2d34:	ffffffff 	.word	0xffffffff
    2d38:	ffffffff 	.word	0xffffffff
    2d3c:	ffffffff 	.word	0xffffffff
    2d40:	ffffffff 	.word	0xffffffff
    2d44:	ffffffff 	.word	0xffffffff
    2d48:	ffffffff 	.word	0xffffffff
    2d4c:	ffffffff 	.word	0xffffffff
    2d50:	ffffffff 	.word	0xffffffff
    2d54:	ffffffff 	.word	0xffffffff
    2d58:	ffffffff 	.word	0xffffffff
    2d5c:	ffffffff 	.word	0xffffffff
    2d60:	ffffffff 	.word	0xffffffff
    2d64:	ffffffff 	.word	0xffffffff
    2d68:	ffffffff 	.word	0xffffffff
    2d6c:	ffffffff 	.word	0xffffffff
    2d70:	ffffffff 	.word	0xffffffff
    2d74:	ffffffff 	.word	0xffffffff
    2d78:	ffffffff 	.word	0xffffffff
    2d7c:	ffffffff 	.word	0xffffffff
    2d80:	ffffffff 	.word	0xffffffff
    2d84:	ffffffff 	.word	0xffffffff
    2d88:	ffffffff 	.word	0xffffffff
    2d8c:	ffffffff 	.word	0xffffffff
    2d90:	ffffffff 	.word	0xffffffff
    2d94:	ffffffff 	.word	0xffffffff
    2d98:	ffffffff 	.word	0xffffffff
    2d9c:	ffffffff 	.word	0xffffffff
    2da0:	ffffffff 	.word	0xffffffff
    2da4:	ffffffff 	.word	0xffffffff
    2da8:	ffffffff 	.word	0xffffffff
    2dac:	ffffffff 	.word	0xffffffff
    2db0:	ffffffff 	.word	0xffffffff
    2db4:	ffffffff 	.word	0xffffffff
    2db8:	ffffffff 	.word	0xffffffff
    2dbc:	ffffffff 	.word	0xffffffff
    2dc0:	ffffffff 	.word	0xffffffff
    2dc4:	ffffffff 	.word	0xffffffff
    2dc8:	ffffffff 	.word	0xffffffff
    2dcc:	ffffffff 	.word	0xffffffff
    2dd0:	ffffffff 	.word	0xffffffff
    2dd4:	ffffffff 	.word	0xffffffff
    2dd8:	ffffffff 	.word	0xffffffff
    2ddc:	ffffffff 	.word	0xffffffff
    2de0:	ffffffff 	.word	0xffffffff
    2de4:	ffffffff 	.word	0xffffffff
    2de8:	ffffffff 	.word	0xffffffff
    2dec:	ffffffff 	.word	0xffffffff
    2df0:	ffffffff 	.word	0xffffffff
    2df4:	ffffffff 	.word	0xffffffff
    2df8:	ffffffff 	.word	0xffffffff
    2dfc:	ffffffff 	.word	0xffffffff
    2e00:	ffffffff 	.word	0xffffffff
    2e04:	ffffffff 	.word	0xffffffff
    2e08:	ffffffff 	.word	0xffffffff
    2e0c:	ffffffff 	.word	0xffffffff
    2e10:	ffffffff 	.word	0xffffffff
    2e14:	ffffffff 	.word	0xffffffff
    2e18:	ffffffff 	.word	0xffffffff
    2e1c:	ffffffff 	.word	0xffffffff
    2e20:	ffffffff 	.word	0xffffffff
    2e24:	ffffffff 	.word	0xffffffff
    2e28:	ffffffff 	.word	0xffffffff
    2e2c:	ffffffff 	.word	0xffffffff
    2e30:	ffffffff 	.word	0xffffffff
    2e34:	ffffffff 	.word	0xffffffff
    2e38:	ffffffff 	.word	0xffffffff
    2e3c:	ffffffff 	.word	0xffffffff
    2e40:	ffffffff 	.word	0xffffffff
    2e44:	ffffffff 	.word	0xffffffff
    2e48:	ffffffff 	.word	0xffffffff
    2e4c:	ffffffff 	.word	0xffffffff
    2e50:	ffffffff 	.word	0xffffffff
    2e54:	ffffffff 	.word	0xffffffff
    2e58:	ffffffff 	.word	0xffffffff
    2e5c:	ffffffff 	.word	0xffffffff
    2e60:	ffffffff 	.word	0xffffffff
    2e64:	ffffffff 	.word	0xffffffff
    2e68:	ffffffff 	.word	0xffffffff
    2e6c:	ffffffff 	.word	0xffffffff
    2e70:	ffffffff 	.word	0xffffffff
    2e74:	ffffffff 	.word	0xffffffff
    2e78:	ffffffff 	.word	0xffffffff
    2e7c:	ffffffff 	.word	0xffffffff
    2e80:	ffffffff 	.word	0xffffffff
    2e84:	ffffffff 	.word	0xffffffff
    2e88:	ffffffff 	.word	0xffffffff
    2e8c:	ffffffff 	.word	0xffffffff
    2e90:	ffffffff 	.word	0xffffffff
    2e94:	ffffffff 	.word	0xffffffff
    2e98:	ffffffff 	.word	0xffffffff
    2e9c:	ffffffff 	.word	0xffffffff
    2ea0:	ffffffff 	.word	0xffffffff
    2ea4:	ffffffff 	.word	0xffffffff
    2ea8:	ffffffff 	.word	0xffffffff
    2eac:	ffffffff 	.word	0xffffffff
    2eb0:	ffffffff 	.word	0xffffffff
    2eb4:	ffffffff 	.word	0xffffffff
    2eb8:	ffffffff 	.word	0xffffffff
    2ebc:	ffffffff 	.word	0xffffffff
    2ec0:	ffffffff 	.word	0xffffffff
    2ec4:	ffffffff 	.word	0xffffffff
    2ec8:	ffffffff 	.word	0xffffffff
    2ecc:	ffffffff 	.word	0xffffffff
    2ed0:	ffffffff 	.word	0xffffffff
    2ed4:	ffffffff 	.word	0xffffffff
    2ed8:	ffffffff 	.word	0xffffffff
    2edc:	ffffffff 	.word	0xffffffff
    2ee0:	ffffffff 	.word	0xffffffff
    2ee4:	ffffffff 	.word	0xffffffff
    2ee8:	ffffffff 	.word	0xffffffff
    2eec:	ffffffff 	.word	0xffffffff
    2ef0:	ffffffff 	.word	0xffffffff
    2ef4:	ffffffff 	.word	0xffffffff
    2ef8:	ffffffff 	.word	0xffffffff
    2efc:	ffffffff 	.word	0xffffffff
    2f00:	ffffffff 	.word	0xffffffff
    2f04:	ffffffff 	.word	0xffffffff
    2f08:	ffffffff 	.word	0xffffffff
    2f0c:	ffffffff 	.word	0xffffffff
    2f10:	ffffffff 	.word	0xffffffff
    2f14:	ffffffff 	.word	0xffffffff
    2f18:	ffffffff 	.word	0xffffffff
    2f1c:	ffffffff 	.word	0xffffffff
    2f20:	ffffffff 	.word	0xffffffff
    2f24:	ffffffff 	.word	0xffffffff
    2f28:	ffffffff 	.word	0xffffffff
    2f2c:	ffffffff 	.word	0xffffffff
    2f30:	ffffffff 	.word	0xffffffff
    2f34:	ffffffff 	.word	0xffffffff
    2f38:	ffffffff 	.word	0xffffffff
    2f3c:	ffffffff 	.word	0xffffffff
    2f40:	ffffffff 	.word	0xffffffff
    2f44:	ffffffff 	.word	0xffffffff
    2f48:	ffffffff 	.word	0xffffffff
    2f4c:	ffffffff 	.word	0xffffffff
    2f50:	ffffffff 	.word	0xffffffff
    2f54:	ffffffff 	.word	0xffffffff
    2f58:	ffffffff 	.word	0xffffffff
    2f5c:	ffffffff 	.word	0xffffffff
    2f60:	ffffffff 	.word	0xffffffff
    2f64:	ffffffff 	.word	0xffffffff
    2f68:	ffffffff 	.word	0xffffffff
    2f6c:	ffffffff 	.word	0xffffffff
    2f70:	ffffffff 	.word	0xffffffff
    2f74:	ffffffff 	.word	0xffffffff
    2f78:	ffffffff 	.word	0xffffffff
    2f7c:	ffffffff 	.word	0xffffffff
    2f80:	ffffffff 	.word	0xffffffff
    2f84:	ffffffff 	.word	0xffffffff
    2f88:	ffffffff 	.word	0xffffffff
    2f8c:	ffffffff 	.word	0xffffffff
    2f90:	ffffffff 	.word	0xffffffff
    2f94:	ffffffff 	.word	0xffffffff
    2f98:	ffffffff 	.word	0xffffffff
    2f9c:	ffffffff 	.word	0xffffffff
    2fa0:	ffffffff 	.word	0xffffffff
    2fa4:	ffffffff 	.word	0xffffffff
    2fa8:	ffffffff 	.word	0xffffffff
    2fac:	ffffffff 	.word	0xffffffff
    2fb0:	ffffffff 	.word	0xffffffff
    2fb4:	ffffffff 	.word	0xffffffff
    2fb8:	ffffffff 	.word	0xffffffff
    2fbc:	ffffffff 	.word	0xffffffff
    2fc0:	ffffffff 	.word	0xffffffff
    2fc4:	ffffffff 	.word	0xffffffff
    2fc8:	ffffffff 	.word	0xffffffff
    2fcc:	ffffffff 	.word	0xffffffff
    2fd0:	ffffffff 	.word	0xffffffff
    2fd4:	ffffffff 	.word	0xffffffff
    2fd8:	ffffffff 	.word	0xffffffff
    2fdc:	ffffffff 	.word	0xffffffff
    2fe0:	ffffffff 	.word	0xffffffff
    2fe4:	ffffffff 	.word	0xffffffff
    2fe8:	ffffffff 	.word	0xffffffff
    2fec:	ffffffff 	.word	0xffffffff
    2ff0:	ffffffff 	.word	0xffffffff
    2ff4:	ffffffff 	.word	0xffffffff
    2ff8:	ffffffff 	.word	0xffffffff
    2ffc:	ffffffff 	.word	0xffffffff
    3000:	ffffffff 	.word	0xffffffff
    3004:	ffffffff 	.word	0xffffffff
    3008:	ffffffff 	.word	0xffffffff
    300c:	ffffffff 	.word	0xffffffff
    3010:	ffffffff 	.word	0xffffffff
    3014:	ffffffff 	.word	0xffffffff
    3018:	ffffffff 	.word	0xffffffff
    301c:	ffffffff 	.word	0xffffffff
    3020:	ffffffff 	.word	0xffffffff
    3024:	ffffffff 	.word	0xffffffff
    3028:	ffffffff 	.word	0xffffffff
    302c:	ffffffff 	.word	0xffffffff
    3030:	ffffffff 	.word	0xffffffff
    3034:	ffffffff 	.word	0xffffffff
    3038:	ffffffff 	.word	0xffffffff
    303c:	ffffffff 	.word	0xffffffff
    3040:	ffffffff 	.word	0xffffffff
    3044:	ffffffff 	.word	0xffffffff
    3048:	ffffffff 	.word	0xffffffff
    304c:	ffffffff 	.word	0xffffffff
    3050:	ffffffff 	.word	0xffffffff
    3054:	ffffffff 	.word	0xffffffff
    3058:	ffffffff 	.word	0xffffffff
    305c:	ffffffff 	.word	0xffffffff
    3060:	ffffffff 	.word	0xffffffff
    3064:	ffffffff 	.word	0xffffffff
    3068:	ffffffff 	.word	0xffffffff
    306c:	ffffffff 	.word	0xffffffff
    3070:	ffffffff 	.word	0xffffffff
    3074:	ffffffff 	.word	0xffffffff
    3078:	ffffffff 	.word	0xffffffff
    307c:	ffffffff 	.word	0xffffffff
    3080:	ffffffff 	.word	0xffffffff
    3084:	ffffffff 	.word	0xffffffff
    3088:	ffffffff 	.word	0xffffffff
    308c:	ffffffff 	.word	0xffffffff
    3090:	ffffffff 	.word	0xffffffff
    3094:	ffffffff 	.word	0xffffffff
    3098:	ffffffff 	.word	0xffffffff
    309c:	ffffffff 	.word	0xffffffff
    30a0:	ffffffff 	.word	0xffffffff
    30a4:	ffffffff 	.word	0xffffffff
    30a8:	ffffffff 	.word	0xffffffff
    30ac:	ffffffff 	.word	0xffffffff
    30b0:	ffffffff 	.word	0xffffffff
    30b4:	ffffffff 	.word	0xffffffff
    30b8:	ffffffff 	.word	0xffffffff
    30bc:	ffffffff 	.word	0xffffffff
    30c0:	ffffffff 	.word	0xffffffff
    30c4:	ffffffff 	.word	0xffffffff
    30c8:	ffffffff 	.word	0xffffffff
    30cc:	ffffffff 	.word	0xffffffff
    30d0:	ffffffff 	.word	0xffffffff
    30d4:	ffffffff 	.word	0xffffffff
    30d8:	ffffffff 	.word	0xffffffff
    30dc:	ffffffff 	.word	0xffffffff
    30e0:	ffffffff 	.word	0xffffffff
    30e4:	ffffffff 	.word	0xffffffff
    30e8:	ffffffff 	.word	0xffffffff
    30ec:	ffffffff 	.word	0xffffffff
    30f0:	ffffffff 	.word	0xffffffff
    30f4:	ffffffff 	.word	0xffffffff
    30f8:	ffffffff 	.word	0xffffffff
    30fc:	ffffffff 	.word	0xffffffff
    3100:	ffffffff 	.word	0xffffffff
    3104:	ffffffff 	.word	0xffffffff
    3108:	ffffffff 	.word	0xffffffff
    310c:	ffffffff 	.word	0xffffffff
    3110:	ffffffff 	.word	0xffffffff
    3114:	ffffffff 	.word	0xffffffff
    3118:	ffffffff 	.word	0xffffffff
    311c:	ffffffff 	.word	0xffffffff
    3120:	ffffffff 	.word	0xffffffff
    3124:	ffffffff 	.word	0xffffffff
    3128:	ffffffff 	.word	0xffffffff
    312c:	ffffffff 	.word	0xffffffff
    3130:	ffffffff 	.word	0xffffffff
    3134:	ffffffff 	.word	0xffffffff
    3138:	ffffffff 	.word	0xffffffff
    313c:	ffffffff 	.word	0xffffffff
    3140:	ffffffff 	.word	0xffffffff
    3144:	ffffffff 	.word	0xffffffff
    3148:	ffffffff 	.word	0xffffffff
    314c:	ffffffff 	.word	0xffffffff
    3150:	ffffffff 	.word	0xffffffff
    3154:	ffffffff 	.word	0xffffffff
    3158:	ffffffff 	.word	0xffffffff
    315c:	ffffffff 	.word	0xffffffff
    3160:	ffffffff 	.word	0xffffffff
    3164:	ffffffff 	.word	0xffffffff
    3168:	ffffffff 	.word	0xffffffff
    316c:	ffffffff 	.word	0xffffffff
    3170:	ffffffff 	.word	0xffffffff
    3174:	ffffffff 	.word	0xffffffff
    3178:	ffffffff 	.word	0xffffffff
    317c:	ffffffff 	.word	0xffffffff
    3180:	ffffffff 	.word	0xffffffff
    3184:	ffffffff 	.word	0xffffffff
    3188:	ffffffff 	.word	0xffffffff
    318c:	ffffffff 	.word	0xffffffff
    3190:	ffffffff 	.word	0xffffffff
    3194:	ffffffff 	.word	0xffffffff
    3198:	ffffffff 	.word	0xffffffff
    319c:	ffffffff 	.word	0xffffffff
    31a0:	ffffffff 	.word	0xffffffff
    31a4:	ffffffff 	.word	0xffffffff
    31a8:	ffffffff 	.word	0xffffffff
    31ac:	ffffffff 	.word	0xffffffff
    31b0:	ffffffff 	.word	0xffffffff
    31b4:	ffffffff 	.word	0xffffffff
    31b8:	ffffffff 	.word	0xffffffff
    31bc:	ffffffff 	.word	0xffffffff
    31c0:	ffffffff 	.word	0xffffffff
    31c4:	ffffffff 	.word	0xffffffff
    31c8:	ffffffff 	.word	0xffffffff
    31cc:	ffffffff 	.word	0xffffffff
    31d0:	ffffffff 	.word	0xffffffff
    31d4:	ffffffff 	.word	0xffffffff
    31d8:	ffffffff 	.word	0xffffffff
    31dc:	ffffffff 	.word	0xffffffff
    31e0:	ffffffff 	.word	0xffffffff
    31e4:	ffffffff 	.word	0xffffffff
    31e8:	ffffffff 	.word	0xffffffff
    31ec:	ffffffff 	.word	0xffffffff
    31f0:	ffffffff 	.word	0xffffffff
    31f4:	ffffffff 	.word	0xffffffff
    31f8:	ffffffff 	.word	0xffffffff
    31fc:	ffffffff 	.word	0xffffffff
    3200:	ffffffff 	.word	0xffffffff
    3204:	ffffffff 	.word	0xffffffff
    3208:	ffffffff 	.word	0xffffffff
    320c:	ffffffff 	.word	0xffffffff
    3210:	ffffffff 	.word	0xffffffff
    3214:	ffffffff 	.word	0xffffffff
    3218:	ffffffff 	.word	0xffffffff
    321c:	ffffffff 	.word	0xffffffff
    3220:	ffffffff 	.word	0xffffffff
    3224:	ffffffff 	.word	0xffffffff
    3228:	ffffffff 	.word	0xffffffff
    322c:	ffffffff 	.word	0xffffffff
    3230:	ffffffff 	.word	0xffffffff
    3234:	ffffffff 	.word	0xffffffff
    3238:	ffffffff 	.word	0xffffffff
    323c:	ffffffff 	.word	0xffffffff
    3240:	ffffffff 	.word	0xffffffff
    3244:	ffffffff 	.word	0xffffffff
    3248:	ffffffff 	.word	0xffffffff
    324c:	ffffffff 	.word	0xffffffff
    3250:	ffffffff 	.word	0xffffffff
    3254:	ffffffff 	.word	0xffffffff
    3258:	ffffffff 	.word	0xffffffff
    325c:	ffffffff 	.word	0xffffffff
    3260:	ffffffff 	.word	0xffffffff
    3264:	ffffffff 	.word	0xffffffff
    3268:	ffffffff 	.word	0xffffffff
    326c:	ffffffff 	.word	0xffffffff
    3270:	ffffffff 	.word	0xffffffff
    3274:	ffffffff 	.word	0xffffffff
    3278:	ffffffff 	.word	0xffffffff
    327c:	ffffffff 	.word	0xffffffff
    3280:	ffffffff 	.word	0xffffffff
    3284:	ffffffff 	.word	0xffffffff
    3288:	ffffffff 	.word	0xffffffff
    328c:	ffffffff 	.word	0xffffffff
    3290:	ffffffff 	.word	0xffffffff
    3294:	ffffffff 	.word	0xffffffff
    3298:	ffffffff 	.word	0xffffffff
    329c:	ffffffff 	.word	0xffffffff
    32a0:	ffffffff 	.word	0xffffffff
    32a4:	ffffffff 	.word	0xffffffff
    32a8:	ffffffff 	.word	0xffffffff
    32ac:	ffffffff 	.word	0xffffffff
    32b0:	ffffffff 	.word	0xffffffff
    32b4:	ffffffff 	.word	0xffffffff
    32b8:	ffffffff 	.word	0xffffffff
    32bc:	ffffffff 	.word	0xffffffff
    32c0:	ffffffff 	.word	0xffffffff
    32c4:	ffffffff 	.word	0xffffffff
    32c8:	ffffffff 	.word	0xffffffff
    32cc:	ffffffff 	.word	0xffffffff
    32d0:	ffffffff 	.word	0xffffffff
    32d4:	ffffffff 	.word	0xffffffff
    32d8:	ffffffff 	.word	0xffffffff
    32dc:	ffffffff 	.word	0xffffffff
    32e0:	ffffffff 	.word	0xffffffff
    32e4:	ffffffff 	.word	0xffffffff
    32e8:	ffffffff 	.word	0xffffffff
    32ec:	ffffffff 	.word	0xffffffff
    32f0:	ffffffff 	.word	0xffffffff
    32f4:	ffffffff 	.word	0xffffffff
    32f8:	ffffffff 	.word	0xffffffff
    32fc:	ffffffff 	.word	0xffffffff
    3300:	ffffffff 	.word	0xffffffff
    3304:	ffffffff 	.word	0xffffffff
    3308:	ffffffff 	.word	0xffffffff
    330c:	ffffffff 	.word	0xffffffff
    3310:	ffffffff 	.word	0xffffffff
    3314:	ffffffff 	.word	0xffffffff
    3318:	ffffffff 	.word	0xffffffff
    331c:	ffffffff 	.word	0xffffffff
    3320:	ffffffff 	.word	0xffffffff
    3324:	ffffffff 	.word	0xffffffff
    3328:	ffffffff 	.word	0xffffffff
    332c:	ffffffff 	.word	0xffffffff
    3330:	ffffffff 	.word	0xffffffff
    3334:	ffffffff 	.word	0xffffffff
    3338:	ffffffff 	.word	0xffffffff
    333c:	ffffffff 	.word	0xffffffff
    3340:	ffffffff 	.word	0xffffffff
    3344:	ffffffff 	.word	0xffffffff
    3348:	ffffffff 	.word	0xffffffff
    334c:	ffffffff 	.word	0xffffffff
    3350:	ffffffff 	.word	0xffffffff
    3354:	ffffffff 	.word	0xffffffff
    3358:	ffffffff 	.word	0xffffffff
    335c:	ffffffff 	.word	0xffffffff
    3360:	ffffffff 	.word	0xffffffff
    3364:	ffffffff 	.word	0xffffffff
    3368:	ffffffff 	.word	0xffffffff
    336c:	ffffffff 	.word	0xffffffff
    3370:	ffffffff 	.word	0xffffffff
    3374:	ffffffff 	.word	0xffffffff
    3378:	ffffffff 	.word	0xffffffff
    337c:	ffffffff 	.word	0xffffffff
    3380:	ffffffff 	.word	0xffffffff
    3384:	ffffffff 	.word	0xffffffff
    3388:	ffffffff 	.word	0xffffffff
    338c:	ffffffff 	.word	0xffffffff
    3390:	ffffffff 	.word	0xffffffff
    3394:	ffffffff 	.word	0xffffffff
    3398:	ffffffff 	.word	0xffffffff
    339c:	ffffffff 	.word	0xffffffff
    33a0:	ffffffff 	.word	0xffffffff
    33a4:	ffffffff 	.word	0xffffffff
    33a8:	ffffffff 	.word	0xffffffff
    33ac:	ffffffff 	.word	0xffffffff
    33b0:	ffffffff 	.word	0xffffffff
    33b4:	ffffffff 	.word	0xffffffff
    33b8:	ffffffff 	.word	0xffffffff
    33bc:	ffffffff 	.word	0xffffffff
    33c0:	ffffffff 	.word	0xffffffff
    33c4:	ffffffff 	.word	0xffffffff
    33c8:	ffffffff 	.word	0xffffffff
    33cc:	ffffffff 	.word	0xffffffff
    33d0:	ffffffff 	.word	0xffffffff
    33d4:	ffffffff 	.word	0xffffffff
    33d8:	ffffffff 	.word	0xffffffff
    33dc:	ffffffff 	.word	0xffffffff
    33e0:	ffffffff 	.word	0xffffffff
    33e4:	ffffffff 	.word	0xffffffff
    33e8:	ffffffff 	.word	0xffffffff
    33ec:	ffffffff 	.word	0xffffffff
    33f0:	ffffffff 	.word	0xffffffff
    33f4:	ffffffff 	.word	0xffffffff
    33f8:	ffffffff 	.word	0xffffffff
    33fc:	ffffffff 	.word	0xffffffff
    3400:	ffffffff 	.word	0xffffffff
    3404:	ffffffff 	.word	0xffffffff
    3408:	ffffffff 	.word	0xffffffff
    340c:	ffffffff 	.word	0xffffffff
    3410:	ffffffff 	.word	0xffffffff
    3414:	ffffffff 	.word	0xffffffff
    3418:	ffffffff 	.word	0xffffffff
    341c:	ffffffff 	.word	0xffffffff
    3420:	ffffffff 	.word	0xffffffff
    3424:	ffffffff 	.word	0xffffffff
    3428:	ffffffff 	.word	0xffffffff
    342c:	ffffffff 	.word	0xffffffff
    3430:	ffffffff 	.word	0xffffffff
    3434:	ffffffff 	.word	0xffffffff
    3438:	ffffffff 	.word	0xffffffff
    343c:	ffffffff 	.word	0xffffffff
    3440:	ffffffff 	.word	0xffffffff
    3444:	ffffffff 	.word	0xffffffff
    3448:	ffffffff 	.word	0xffffffff
    344c:	ffffffff 	.word	0xffffffff
    3450:	ffffffff 	.word	0xffffffff
    3454:	ffffffff 	.word	0xffffffff
    3458:	ffffffff 	.word	0xffffffff
    345c:	ffffffff 	.word	0xffffffff
    3460:	ffffffff 	.word	0xffffffff
    3464:	ffffffff 	.word	0xffffffff
    3468:	ffffffff 	.word	0xffffffff
    346c:	ffffffff 	.word	0xffffffff
    3470:	ffffffff 	.word	0xffffffff
    3474:	ffffffff 	.word	0xffffffff
    3478:	ffffffff 	.word	0xffffffff
    347c:	ffffffff 	.word	0xffffffff
    3480:	ffffffff 	.word	0xffffffff
    3484:	ffffffff 	.word	0xffffffff
    3488:	ffffffff 	.word	0xffffffff
    348c:	ffffffff 	.word	0xffffffff
    3490:	ffffffff 	.word	0xffffffff
    3494:	ffffffff 	.word	0xffffffff
    3498:	ffffffff 	.word	0xffffffff
    349c:	ffffffff 	.word	0xffffffff
    34a0:	ffffffff 	.word	0xffffffff
    34a4:	ffffffff 	.word	0xffffffff
    34a8:	ffffffff 	.word	0xffffffff
    34ac:	ffffffff 	.word	0xffffffff
    34b0:	ffffffff 	.word	0xffffffff
    34b4:	ffffffff 	.word	0xffffffff
    34b8:	ffffffff 	.word	0xffffffff
    34bc:	ffffffff 	.word	0xffffffff
    34c0:	ffffffff 	.word	0xffffffff
    34c4:	ffffffff 	.word	0xffffffff
    34c8:	ffffffff 	.word	0xffffffff
    34cc:	ffffffff 	.word	0xffffffff
    34d0:	ffffffff 	.word	0xffffffff
    34d4:	ffffffff 	.word	0xffffffff
    34d8:	ffffffff 	.word	0xffffffff
    34dc:	ffffffff 	.word	0xffffffff
    34e0:	ffffffff 	.word	0xffffffff
    34e4:	ffffffff 	.word	0xffffffff
    34e8:	ffffffff 	.word	0xffffffff
    34ec:	ffffffff 	.word	0xffffffff
    34f0:	ffffffff 	.word	0xffffffff
    34f4:	ffffffff 	.word	0xffffffff
    34f8:	ffffffff 	.word	0xffffffff
    34fc:	ffffffff 	.word	0xffffffff
    3500:	ffffffff 	.word	0xffffffff
    3504:	ffffffff 	.word	0xffffffff
    3508:	ffffffff 	.word	0xffffffff
    350c:	ffffffff 	.word	0xffffffff
    3510:	ffffffff 	.word	0xffffffff
    3514:	ffffffff 	.word	0xffffffff
    3518:	ffffffff 	.word	0xffffffff
    351c:	ffffffff 	.word	0xffffffff
    3520:	ffffffff 	.word	0xffffffff
    3524:	ffffffff 	.word	0xffffffff
    3528:	ffffffff 	.word	0xffffffff
    352c:	ffffffff 	.word	0xffffffff
    3530:	ffffffff 	.word	0xffffffff
    3534:	ffffffff 	.word	0xffffffff
    3538:	ffffffff 	.word	0xffffffff
    353c:	ffffffff 	.word	0xffffffff
    3540:	ffffffff 	.word	0xffffffff
    3544:	ffffffff 	.word	0xffffffff
    3548:	ffffffff 	.word	0xffffffff
    354c:	ffffffff 	.word	0xffffffff
    3550:	ffffffff 	.word	0xffffffff
    3554:	ffffffff 	.word	0xffffffff
    3558:	ffffffff 	.word	0xffffffff
    355c:	ffffffff 	.word	0xffffffff
    3560:	ffffffff 	.word	0xffffffff
    3564:	ffffffff 	.word	0xffffffff
    3568:	ffffffff 	.word	0xffffffff
    356c:	ffffffff 	.word	0xffffffff
    3570:	ffffffff 	.word	0xffffffff
    3574:	ffffffff 	.word	0xffffffff
    3578:	ffffffff 	.word	0xffffffff
    357c:	ffffffff 	.word	0xffffffff
    3580:	ffffffff 	.word	0xffffffff
    3584:	ffffffff 	.word	0xffffffff
    3588:	ffffffff 	.word	0xffffffff
    358c:	ffffffff 	.word	0xffffffff
    3590:	ffffffff 	.word	0xffffffff
    3594:	ffffffff 	.word	0xffffffff
    3598:	ffffffff 	.word	0xffffffff
    359c:	ffffffff 	.word	0xffffffff
    35a0:	ffffffff 	.word	0xffffffff
    35a4:	ffffffff 	.word	0xffffffff
    35a8:	ffffffff 	.word	0xffffffff
    35ac:	ffffffff 	.word	0xffffffff
    35b0:	ffffffff 	.word	0xffffffff
    35b4:	ffffffff 	.word	0xffffffff
    35b8:	ffffffff 	.word	0xffffffff
    35bc:	ffffffff 	.word	0xffffffff
    35c0:	ffffffff 	.word	0xffffffff
    35c4:	ffffffff 	.word	0xffffffff
    35c8:	ffffffff 	.word	0xffffffff
    35cc:	ffffffff 	.word	0xffffffff
    35d0:	ffffffff 	.word	0xffffffff
    35d4:	ffffffff 	.word	0xffffffff
    35d8:	ffffffff 	.word	0xffffffff
    35dc:	ffffffff 	.word	0xffffffff
    35e0:	ffffffff 	.word	0xffffffff
    35e4:	ffffffff 	.word	0xffffffff
    35e8:	ffffffff 	.word	0xffffffff
    35ec:	ffffffff 	.word	0xffffffff
    35f0:	ffffffff 	.word	0xffffffff
    35f4:	ffffffff 	.word	0xffffffff
    35f8:	ffffffff 	.word	0xffffffff
    35fc:	ffffffff 	.word	0xffffffff
    3600:	ffffffff 	.word	0xffffffff
    3604:	ffffffff 	.word	0xffffffff
    3608:	ffffffff 	.word	0xffffffff
    360c:	ffffffff 	.word	0xffffffff
    3610:	ffffffff 	.word	0xffffffff
    3614:	ffffffff 	.word	0xffffffff
    3618:	ffffffff 	.word	0xffffffff
    361c:	ffffffff 	.word	0xffffffff
    3620:	ffffffff 	.word	0xffffffff
    3624:	ffffffff 	.word	0xffffffff
    3628:	ffffffff 	.word	0xffffffff
    362c:	ffffffff 	.word	0xffffffff
    3630:	ffffffff 	.word	0xffffffff
    3634:	ffffffff 	.word	0xffffffff
    3638:	ffffffff 	.word	0xffffffff
    363c:	ffffffff 	.word	0xffffffff
    3640:	ffffffff 	.word	0xffffffff
    3644:	ffffffff 	.word	0xffffffff
    3648:	ffffffff 	.word	0xffffffff
    364c:	ffffffff 	.word	0xffffffff
    3650:	ffffffff 	.word	0xffffffff
    3654:	ffffffff 	.word	0xffffffff
    3658:	ffffffff 	.word	0xffffffff
    365c:	ffffffff 	.word	0xffffffff
    3660:	ffffffff 	.word	0xffffffff
    3664:	ffffffff 	.word	0xffffffff
    3668:	ffffffff 	.word	0xffffffff
    366c:	ffffffff 	.word	0xffffffff
    3670:	ffffffff 	.word	0xffffffff
    3674:	ffffffff 	.word	0xffffffff
    3678:	ffffffff 	.word	0xffffffff
    367c:	ffffffff 	.word	0xffffffff
    3680:	ffffffff 	.word	0xffffffff
    3684:	ffffffff 	.word	0xffffffff
    3688:	ffffffff 	.word	0xffffffff
    368c:	ffffffff 	.word	0xffffffff
    3690:	ffffffff 	.word	0xffffffff
    3694:	ffffffff 	.word	0xffffffff
    3698:	ffffffff 	.word	0xffffffff
    369c:	ffffffff 	.word	0xffffffff
    36a0:	ffffffff 	.word	0xffffffff
    36a4:	ffffffff 	.word	0xffffffff
    36a8:	ffffffff 	.word	0xffffffff
    36ac:	ffffffff 	.word	0xffffffff
    36b0:	ffffffff 	.word	0xffffffff
    36b4:	ffffffff 	.word	0xffffffff
    36b8:	ffffffff 	.word	0xffffffff
    36bc:	ffffffff 	.word	0xffffffff
    36c0:	ffffffff 	.word	0xffffffff
    36c4:	ffffffff 	.word	0xffffffff
    36c8:	ffffffff 	.word	0xffffffff
    36cc:	ffffffff 	.word	0xffffffff
    36d0:	ffffffff 	.word	0xffffffff
    36d4:	ffffffff 	.word	0xffffffff
    36d8:	ffffffff 	.word	0xffffffff
    36dc:	ffffffff 	.word	0xffffffff
    36e0:	ffffffff 	.word	0xffffffff
    36e4:	ffffffff 	.word	0xffffffff
    36e8:	ffffffff 	.word	0xffffffff
    36ec:	ffffffff 	.word	0xffffffff
    36f0:	ffffffff 	.word	0xffffffff
    36f4:	ffffffff 	.word	0xffffffff
    36f8:	ffffffff 	.word	0xffffffff
    36fc:	ffffffff 	.word	0xffffffff
    3700:	ffffffff 	.word	0xffffffff
    3704:	ffffffff 	.word	0xffffffff
    3708:	ffffffff 	.word	0xffffffff
    370c:	ffffffff 	.word	0xffffffff
    3710:	ffffffff 	.word	0xffffffff
    3714:	ffffffff 	.word	0xffffffff
    3718:	ffffffff 	.word	0xffffffff
    371c:	ffffffff 	.word	0xffffffff
    3720:	ffffffff 	.word	0xffffffff
    3724:	ffffffff 	.word	0xffffffff
    3728:	ffffffff 	.word	0xffffffff
    372c:	ffffffff 	.word	0xffffffff
    3730:	ffffffff 	.word	0xffffffff
    3734:	ffffffff 	.word	0xffffffff
    3738:	ffffffff 	.word	0xffffffff
    373c:	ffffffff 	.word	0xffffffff
    3740:	ffffffff 	.word	0xffffffff
    3744:	ffffffff 	.word	0xffffffff
    3748:	ffffffff 	.word	0xffffffff
    374c:	ffffffff 	.word	0xffffffff
    3750:	ffffffff 	.word	0xffffffff
    3754:	ffffffff 	.word	0xffffffff
    3758:	ffffffff 	.word	0xffffffff
    375c:	ffffffff 	.word	0xffffffff
    3760:	ffffffff 	.word	0xffffffff
    3764:	ffffffff 	.word	0xffffffff
    3768:	ffffffff 	.word	0xffffffff
    376c:	ffffffff 	.word	0xffffffff
    3770:	ffffffff 	.word	0xffffffff
    3774:	ffffffff 	.word	0xffffffff
    3778:	ffffffff 	.word	0xffffffff
    377c:	ffffffff 	.word	0xffffffff
    3780:	ffffffff 	.word	0xffffffff
    3784:	ffffffff 	.word	0xffffffff
    3788:	ffffffff 	.word	0xffffffff
    378c:	ffffffff 	.word	0xffffffff
    3790:	ffffffff 	.word	0xffffffff
    3794:	ffffffff 	.word	0xffffffff
    3798:	ffffffff 	.word	0xffffffff
    379c:	ffffffff 	.word	0xffffffff
    37a0:	ffffffff 	.word	0xffffffff
    37a4:	ffffffff 	.word	0xffffffff
    37a8:	ffffffff 	.word	0xffffffff
    37ac:	ffffffff 	.word	0xffffffff
    37b0:	ffffffff 	.word	0xffffffff
    37b4:	ffffffff 	.word	0xffffffff
    37b8:	ffffffff 	.word	0xffffffff
    37bc:	ffffffff 	.word	0xffffffff
    37c0:	ffffffff 	.word	0xffffffff
    37c4:	ffffffff 	.word	0xffffffff
    37c8:	ffffffff 	.word	0xffffffff
    37cc:	ffffffff 	.word	0xffffffff
    37d0:	ffffffff 	.word	0xffffffff
    37d4:	ffffffff 	.word	0xffffffff
    37d8:	ffffffff 	.word	0xffffffff
    37dc:	ffffffff 	.word	0xffffffff
    37e0:	ffffffff 	.word	0xffffffff
    37e4:	ffffffff 	.word	0xffffffff
    37e8:	ffffffff 	.word	0xffffffff
    37ec:	ffffffff 	.word	0xffffffff
    37f0:	ffffffff 	.word	0xffffffff
    37f4:	ffffffff 	.word	0xffffffff
    37f8:	ffffffff 	.word	0xffffffff
    37fc:	ffffffff 	.word	0xffffffff
    3800:	ffffffff 	.word	0xffffffff
    3804:	ffffffff 	.word	0xffffffff
    3808:	ffffffff 	.word	0xffffffff
    380c:	ffffffff 	.word	0xffffffff
    3810:	ffffffff 	.word	0xffffffff
    3814:	ffffffff 	.word	0xffffffff
    3818:	ffffffff 	.word	0xffffffff
    381c:	ffffffff 	.word	0xffffffff
    3820:	ffffffff 	.word	0xffffffff
    3824:	ffffffff 	.word	0xffffffff
    3828:	ffffffff 	.word	0xffffffff
    382c:	ffffffff 	.word	0xffffffff
    3830:	ffffffff 	.word	0xffffffff
    3834:	ffffffff 	.word	0xffffffff
    3838:	ffffffff 	.word	0xffffffff
    383c:	ffffffff 	.word	0xffffffff
    3840:	ffffffff 	.word	0xffffffff
    3844:	ffffffff 	.word	0xffffffff
    3848:	ffffffff 	.word	0xffffffff
    384c:	ffffffff 	.word	0xffffffff
    3850:	ffffffff 	.word	0xffffffff
    3854:	ffffffff 	.word	0xffffffff
    3858:	ffffffff 	.word	0xffffffff
    385c:	ffffffff 	.word	0xffffffff
    3860:	ffffffff 	.word	0xffffffff
    3864:	ffffffff 	.word	0xffffffff
    3868:	ffffffff 	.word	0xffffffff
    386c:	ffffffff 	.word	0xffffffff
    3870:	ffffffff 	.word	0xffffffff
    3874:	ffffffff 	.word	0xffffffff
    3878:	ffffffff 	.word	0xffffffff
    387c:	ffffffff 	.word	0xffffffff
    3880:	ffffffff 	.word	0xffffffff
    3884:	ffffffff 	.word	0xffffffff
    3888:	ffffffff 	.word	0xffffffff
    388c:	ffffffff 	.word	0xffffffff
    3890:	ffffffff 	.word	0xffffffff
    3894:	ffffffff 	.word	0xffffffff
    3898:	ffffffff 	.word	0xffffffff
    389c:	ffffffff 	.word	0xffffffff
    38a0:	ffffffff 	.word	0xffffffff
    38a4:	ffffffff 	.word	0xffffffff
    38a8:	ffffffff 	.word	0xffffffff
    38ac:	ffffffff 	.word	0xffffffff
    38b0:	ffffffff 	.word	0xffffffff
    38b4:	ffffffff 	.word	0xffffffff
    38b8:	ffffffff 	.word	0xffffffff
    38bc:	ffffffff 	.word	0xffffffff
    38c0:	ffffffff 	.word	0xffffffff
    38c4:	ffffffff 	.word	0xffffffff
    38c8:	ffffffff 	.word	0xffffffff
    38cc:	ffffffff 	.word	0xffffffff
    38d0:	ffffffff 	.word	0xffffffff
    38d4:	ffffffff 	.word	0xffffffff
    38d8:	ffffffff 	.word	0xffffffff
    38dc:	ffffffff 	.word	0xffffffff
    38e0:	ffffffff 	.word	0xffffffff
    38e4:	ffffffff 	.word	0xffffffff
    38e8:	ffffffff 	.word	0xffffffff
    38ec:	ffffffff 	.word	0xffffffff
    38f0:	ffffffff 	.word	0xffffffff
    38f4:	ffffffff 	.word	0xffffffff
    38f8:	ffffffff 	.word	0xffffffff
    38fc:	ffffffff 	.word	0xffffffff
    3900:	ffffffff 	.word	0xffffffff
    3904:	ffffffff 	.word	0xffffffff
    3908:	ffffffff 	.word	0xffffffff
    390c:	ffffffff 	.word	0xffffffff
    3910:	ffffffff 	.word	0xffffffff
    3914:	ffffffff 	.word	0xffffffff
    3918:	ffffffff 	.word	0xffffffff
    391c:	ffffffff 	.word	0xffffffff
    3920:	ffffffff 	.word	0xffffffff
    3924:	ffffffff 	.word	0xffffffff
    3928:	ffffffff 	.word	0xffffffff
    392c:	ffffffff 	.word	0xffffffff
    3930:	ffffffff 	.word	0xffffffff
    3934:	ffffffff 	.word	0xffffffff
    3938:	ffffffff 	.word	0xffffffff
    393c:	ffffffff 	.word	0xffffffff
    3940:	ffffffff 	.word	0xffffffff
    3944:	ffffffff 	.word	0xffffffff
    3948:	ffffffff 	.word	0xffffffff
    394c:	ffffffff 	.word	0xffffffff
    3950:	ffffffff 	.word	0xffffffff
    3954:	ffffffff 	.word	0xffffffff
    3958:	ffffffff 	.word	0xffffffff
    395c:	ffffffff 	.word	0xffffffff
    3960:	ffffffff 	.word	0xffffffff
    3964:	ffffffff 	.word	0xffffffff
    3968:	ffffffff 	.word	0xffffffff
    396c:	ffffffff 	.word	0xffffffff
    3970:	ffffffff 	.word	0xffffffff
    3974:	ffffffff 	.word	0xffffffff
    3978:	ffffffff 	.word	0xffffffff
    397c:	ffffffff 	.word	0xffffffff
    3980:	ffffffff 	.word	0xffffffff
    3984:	ffffffff 	.word	0xffffffff
    3988:	ffffffff 	.word	0xffffffff
    398c:	ffffffff 	.word	0xffffffff
    3990:	ffffffff 	.word	0xffffffff
    3994:	ffffffff 	.word	0xffffffff
    3998:	ffffffff 	.word	0xffffffff
    399c:	ffffffff 	.word	0xffffffff
    39a0:	ffffffff 	.word	0xffffffff
    39a4:	ffffffff 	.word	0xffffffff
    39a8:	ffffffff 	.word	0xffffffff
    39ac:	ffffffff 	.word	0xffffffff
    39b0:	ffffffff 	.word	0xffffffff
    39b4:	ffffffff 	.word	0xffffffff
    39b8:	ffffffff 	.word	0xffffffff
    39bc:	ffffffff 	.word	0xffffffff
    39c0:	ffffffff 	.word	0xffffffff
    39c4:	ffffffff 	.word	0xffffffff
    39c8:	ffffffff 	.word	0xffffffff
    39cc:	ffffffff 	.word	0xffffffff
    39d0:	ffffffff 	.word	0xffffffff
    39d4:	ffffffff 	.word	0xffffffff
    39d8:	ffffffff 	.word	0xffffffff
    39dc:	ffffffff 	.word	0xffffffff
    39e0:	ffffffff 	.word	0xffffffff
    39e4:	ffffffff 	.word	0xffffffff
    39e8:	ffffffff 	.word	0xffffffff
    39ec:	ffffffff 	.word	0xffffffff
    39f0:	ffffffff 	.word	0xffffffff
    39f4:	ffffffff 	.word	0xffffffff
    39f8:	ffffffff 	.word	0xffffffff
    39fc:	ffffffff 	.word	0xffffffff
    3a00:	ffffffff 	.word	0xffffffff
    3a04:	ffffffff 	.word	0xffffffff
    3a08:	ffffffff 	.word	0xffffffff
    3a0c:	ffffffff 	.word	0xffffffff
    3a10:	ffffffff 	.word	0xffffffff
    3a14:	ffffffff 	.word	0xffffffff
    3a18:	ffffffff 	.word	0xffffffff
    3a1c:	ffffffff 	.word	0xffffffff
    3a20:	ffffffff 	.word	0xffffffff
    3a24:	ffffffff 	.word	0xffffffff
    3a28:	ffffffff 	.word	0xffffffff
    3a2c:	ffffffff 	.word	0xffffffff
    3a30:	ffffffff 	.word	0xffffffff
    3a34:	ffffffff 	.word	0xffffffff
    3a38:	ffffffff 	.word	0xffffffff
    3a3c:	ffffffff 	.word	0xffffffff
    3a40:	ffffffff 	.word	0xffffffff
    3a44:	ffffffff 	.word	0xffffffff
    3a48:	ffffffff 	.word	0xffffffff
    3a4c:	ffffffff 	.word	0xffffffff
    3a50:	ffffffff 	.word	0xffffffff
    3a54:	ffffffff 	.word	0xffffffff
    3a58:	ffffffff 	.word	0xffffffff
    3a5c:	ffffffff 	.word	0xffffffff
    3a60:	ffffffff 	.word	0xffffffff
    3a64:	ffffffff 	.word	0xffffffff
    3a68:	ffffffff 	.word	0xffffffff
    3a6c:	ffffffff 	.word	0xffffffff
    3a70:	ffffffff 	.word	0xffffffff
    3a74:	ffffffff 	.word	0xffffffff
    3a78:	ffffffff 	.word	0xffffffff
    3a7c:	ffffffff 	.word	0xffffffff
    3a80:	ffffffff 	.word	0xffffffff
    3a84:	ffffffff 	.word	0xffffffff
    3a88:	ffffffff 	.word	0xffffffff
    3a8c:	ffffffff 	.word	0xffffffff
    3a90:	ffffffff 	.word	0xffffffff
    3a94:	ffffffff 	.word	0xffffffff
    3a98:	ffffffff 	.word	0xffffffff
    3a9c:	ffffffff 	.word	0xffffffff
    3aa0:	ffffffff 	.word	0xffffffff
    3aa4:	ffffffff 	.word	0xffffffff
    3aa8:	ffffffff 	.word	0xffffffff
    3aac:	ffffffff 	.word	0xffffffff
    3ab0:	ffffffff 	.word	0xffffffff
    3ab4:	ffffffff 	.word	0xffffffff
    3ab8:	ffffffff 	.word	0xffffffff
    3abc:	ffffffff 	.word	0xffffffff
    3ac0:	ffffffff 	.word	0xffffffff
    3ac4:	ffffffff 	.word	0xffffffff
    3ac8:	ffffffff 	.word	0xffffffff
    3acc:	ffffffff 	.word	0xffffffff
    3ad0:	ffffffff 	.word	0xffffffff
    3ad4:	ffffffff 	.word	0xffffffff
    3ad8:	ffffffff 	.word	0xffffffff
    3adc:	ffffffff 	.word	0xffffffff
    3ae0:	ffffffff 	.word	0xffffffff
    3ae4:	ffffffff 	.word	0xffffffff
    3ae8:	ffffffff 	.word	0xffffffff
    3aec:	ffffffff 	.word	0xffffffff
    3af0:	ffffffff 	.word	0xffffffff
    3af4:	ffffffff 	.word	0xffffffff
    3af8:	ffffffff 	.word	0xffffffff
    3afc:	ffffffff 	.word	0xffffffff
    3b00:	ffffffff 	.word	0xffffffff
    3b04:	ffffffff 	.word	0xffffffff
    3b08:	ffffffff 	.word	0xffffffff
    3b0c:	ffffffff 	.word	0xffffffff
    3b10:	ffffffff 	.word	0xffffffff
    3b14:	ffffffff 	.word	0xffffffff
    3b18:	ffffffff 	.word	0xffffffff
    3b1c:	ffffffff 	.word	0xffffffff
    3b20:	ffffffff 	.word	0xffffffff
    3b24:	ffffffff 	.word	0xffffffff
    3b28:	ffffffff 	.word	0xffffffff
    3b2c:	ffffffff 	.word	0xffffffff
    3b30:	ffffffff 	.word	0xffffffff
    3b34:	ffffffff 	.word	0xffffffff
    3b38:	ffffffff 	.word	0xffffffff
    3b3c:	ffffffff 	.word	0xffffffff
    3b40:	ffffffff 	.word	0xffffffff
    3b44:	ffffffff 	.word	0xffffffff
    3b48:	ffffffff 	.word	0xffffffff
    3b4c:	ffffffff 	.word	0xffffffff
    3b50:	ffffffff 	.word	0xffffffff
    3b54:	ffffffff 	.word	0xffffffff
    3b58:	ffffffff 	.word	0xffffffff
    3b5c:	ffffffff 	.word	0xffffffff
    3b60:	ffffffff 	.word	0xffffffff
    3b64:	ffffffff 	.word	0xffffffff
    3b68:	ffffffff 	.word	0xffffffff
    3b6c:	ffffffff 	.word	0xffffffff
    3b70:	ffffffff 	.word	0xffffffff
    3b74:	ffffffff 	.word	0xffffffff
    3b78:	ffffffff 	.word	0xffffffff
    3b7c:	ffffffff 	.word	0xffffffff
    3b80:	ffffffff 	.word	0xffffffff
    3b84:	ffffffff 	.word	0xffffffff
    3b88:	ffffffff 	.word	0xffffffff
    3b8c:	ffffffff 	.word	0xffffffff
    3b90:	ffffffff 	.word	0xffffffff
    3b94:	ffffffff 	.word	0xffffffff
    3b98:	ffffffff 	.word	0xffffffff
    3b9c:	ffffffff 	.word	0xffffffff
    3ba0:	ffffffff 	.word	0xffffffff
    3ba4:	ffffffff 	.word	0xffffffff
    3ba8:	ffffffff 	.word	0xffffffff
    3bac:	ffffffff 	.word	0xffffffff
    3bb0:	ffffffff 	.word	0xffffffff
    3bb4:	ffffffff 	.word	0xffffffff
    3bb8:	ffffffff 	.word	0xffffffff
    3bbc:	ffffffff 	.word	0xffffffff
    3bc0:	ffffffff 	.word	0xffffffff
    3bc4:	ffffffff 	.word	0xffffffff
    3bc8:	ffffffff 	.word	0xffffffff
    3bcc:	ffffffff 	.word	0xffffffff
    3bd0:	ffffffff 	.word	0xffffffff
    3bd4:	ffffffff 	.word	0xffffffff
    3bd8:	ffffffff 	.word	0xffffffff
    3bdc:	ffffffff 	.word	0xffffffff
    3be0:	ffffffff 	.word	0xffffffff
    3be4:	ffffffff 	.word	0xffffffff
    3be8:	ffffffff 	.word	0xffffffff
    3bec:	ffffffff 	.word	0xffffffff
    3bf0:	ffffffff 	.word	0xffffffff
    3bf4:	ffffffff 	.word	0xffffffff
    3bf8:	ffffffff 	.word	0xffffffff
    3bfc:	ffffffff 	.word	0xffffffff
    3c00:	ffffffff 	.word	0xffffffff
    3c04:	ffffffff 	.word	0xffffffff
    3c08:	ffffffff 	.word	0xffffffff
    3c0c:	ffffffff 	.word	0xffffffff
    3c10:	ffffffff 	.word	0xffffffff
    3c14:	ffffffff 	.word	0xffffffff
    3c18:	ffffffff 	.word	0xffffffff
    3c1c:	ffffffff 	.word	0xffffffff
    3c20:	ffffffff 	.word	0xffffffff
    3c24:	ffffffff 	.word	0xffffffff
    3c28:	ffffffff 	.word	0xffffffff
    3c2c:	ffffffff 	.word	0xffffffff
    3c30:	ffffffff 	.word	0xffffffff
    3c34:	ffffffff 	.word	0xffffffff
    3c38:	ffffffff 	.word	0xffffffff
    3c3c:	ffffffff 	.word	0xffffffff
    3c40:	ffffffff 	.word	0xffffffff
    3c44:	ffffffff 	.word	0xffffffff
    3c48:	ffffffff 	.word	0xffffffff
    3c4c:	ffffffff 	.word	0xffffffff
    3c50:	ffffffff 	.word	0xffffffff
    3c54:	ffffffff 	.word	0xffffffff
    3c58:	ffffffff 	.word	0xffffffff
    3c5c:	ffffffff 	.word	0xffffffff
    3c60:	ffffffff 	.word	0xffffffff
    3c64:	ffffffff 	.word	0xffffffff
    3c68:	ffffffff 	.word	0xffffffff
    3c6c:	ffffffff 	.word	0xffffffff
    3c70:	ffffffff 	.word	0xffffffff
    3c74:	ffffffff 	.word	0xffffffff
    3c78:	ffffffff 	.word	0xffffffff
    3c7c:	ffffffff 	.word	0xffffffff
    3c80:	ffffffff 	.word	0xffffffff
    3c84:	ffffffff 	.word	0xffffffff
    3c88:	ffffffff 	.word	0xffffffff
    3c8c:	ffffffff 	.word	0xffffffff
    3c90:	ffffffff 	.word	0xffffffff
    3c94:	ffffffff 	.word	0xffffffff
    3c98:	ffffffff 	.word	0xffffffff
    3c9c:	ffffffff 	.word	0xffffffff
    3ca0:	ffffffff 	.word	0xffffffff
    3ca4:	ffffffff 	.word	0xffffffff
    3ca8:	ffffffff 	.word	0xffffffff
    3cac:	ffffffff 	.word	0xffffffff
    3cb0:	ffffffff 	.word	0xffffffff
    3cb4:	ffffffff 	.word	0xffffffff
    3cb8:	ffffffff 	.word	0xffffffff
    3cbc:	ffffffff 	.word	0xffffffff
    3cc0:	ffffffff 	.word	0xffffffff
    3cc4:	ffffffff 	.word	0xffffffff
    3cc8:	ffffffff 	.word	0xffffffff
    3ccc:	ffffffff 	.word	0xffffffff
    3cd0:	ffffffff 	.word	0xffffffff
    3cd4:	ffffffff 	.word	0xffffffff
    3cd8:	ffffffff 	.word	0xffffffff
    3cdc:	ffffffff 	.word	0xffffffff
    3ce0:	ffffffff 	.word	0xffffffff
    3ce4:	ffffffff 	.word	0xffffffff
    3ce8:	ffffffff 	.word	0xffffffff
    3cec:	ffffffff 	.word	0xffffffff
    3cf0:	ffffffff 	.word	0xffffffff
    3cf4:	ffffffff 	.word	0xffffffff
    3cf8:	ffffffff 	.word	0xffffffff
    3cfc:	ffffffff 	.word	0xffffffff
    3d00:	ffffffff 	.word	0xffffffff
    3d04:	ffffffff 	.word	0xffffffff
    3d08:	ffffffff 	.word	0xffffffff
    3d0c:	ffffffff 	.word	0xffffffff
    3d10:	ffffffff 	.word	0xffffffff
    3d14:	ffffffff 	.word	0xffffffff
    3d18:	ffffffff 	.word	0xffffffff
    3d1c:	ffffffff 	.word	0xffffffff
    3d20:	ffffffff 	.word	0xffffffff
    3d24:	ffffffff 	.word	0xffffffff
    3d28:	ffffffff 	.word	0xffffffff
    3d2c:	ffffffff 	.word	0xffffffff
    3d30:	ffffffff 	.word	0xffffffff
    3d34:	ffffffff 	.word	0xffffffff
    3d38:	ffffffff 	.word	0xffffffff
    3d3c:	ffffffff 	.word	0xffffffff
    3d40:	ffffffff 	.word	0xffffffff
    3d44:	ffffffff 	.word	0xffffffff
    3d48:	ffffffff 	.word	0xffffffff
    3d4c:	ffffffff 	.word	0xffffffff
    3d50:	ffffffff 	.word	0xffffffff
    3d54:	ffffffff 	.word	0xffffffff
    3d58:	ffffffff 	.word	0xffffffff
    3d5c:	ffffffff 	.word	0xffffffff
    3d60:	ffffffff 	.word	0xffffffff
    3d64:	ffffffff 	.word	0xffffffff
    3d68:	ffffffff 	.word	0xffffffff
    3d6c:	ffffffff 	.word	0xffffffff
    3d70:	ffffffff 	.word	0xffffffff
    3d74:	ffffffff 	.word	0xffffffff
    3d78:	ffffffff 	.word	0xffffffff
    3d7c:	ffffffff 	.word	0xffffffff
    3d80:	ffffffff 	.word	0xffffffff
    3d84:	ffffffff 	.word	0xffffffff
    3d88:	ffffffff 	.word	0xffffffff
    3d8c:	ffffffff 	.word	0xffffffff
    3d90:	ffffffff 	.word	0xffffffff
    3d94:	ffffffff 	.word	0xffffffff
    3d98:	ffffffff 	.word	0xffffffff
    3d9c:	ffffffff 	.word	0xffffffff
    3da0:	ffffffff 	.word	0xffffffff
    3da4:	ffffffff 	.word	0xffffffff
    3da8:	ffffffff 	.word	0xffffffff
    3dac:	ffffffff 	.word	0xffffffff
    3db0:	ffffffff 	.word	0xffffffff
    3db4:	ffffffff 	.word	0xffffffff
    3db8:	ffffffff 	.word	0xffffffff
    3dbc:	ffffffff 	.word	0xffffffff
    3dc0:	ffffffff 	.word	0xffffffff
    3dc4:	ffffffff 	.word	0xffffffff
    3dc8:	ffffffff 	.word	0xffffffff
    3dcc:	ffffffff 	.word	0xffffffff
    3dd0:	ffffffff 	.word	0xffffffff
    3dd4:	ffffffff 	.word	0xffffffff
    3dd8:	ffffffff 	.word	0xffffffff
    3ddc:	ffffffff 	.word	0xffffffff
    3de0:	ffffffff 	.word	0xffffffff
    3de4:	ffffffff 	.word	0xffffffff
    3de8:	ffffffff 	.word	0xffffffff
    3dec:	ffffffff 	.word	0xffffffff
    3df0:	ffffffff 	.word	0xffffffff
    3df4:	ffffffff 	.word	0xffffffff
    3df8:	ffffffff 	.word	0xffffffff
    3dfc:	ffffffff 	.word	0xffffffff
    3e00:	ffffffff 	.word	0xffffffff
    3e04:	ffffffff 	.word	0xffffffff
    3e08:	ffffffff 	.word	0xffffffff
    3e0c:	ffffffff 	.word	0xffffffff
    3e10:	ffffffff 	.word	0xffffffff
    3e14:	ffffffff 	.word	0xffffffff
    3e18:	ffffffff 	.word	0xffffffff
    3e1c:	ffffffff 	.word	0xffffffff
    3e20:	ffffffff 	.word	0xffffffff
    3e24:	ffffffff 	.word	0xffffffff
    3e28:	ffffffff 	.word	0xffffffff
    3e2c:	ffffffff 	.word	0xffffffff
    3e30:	ffffffff 	.word	0xffffffff
    3e34:	ffffffff 	.word	0xffffffff
    3e38:	ffffffff 	.word	0xffffffff
    3e3c:	ffffffff 	.word	0xffffffff
    3e40:	ffffffff 	.word	0xffffffff
    3e44:	ffffffff 	.word	0xffffffff
    3e48:	ffffffff 	.word	0xffffffff
    3e4c:	ffffffff 	.word	0xffffffff
    3e50:	ffffffff 	.word	0xffffffff
    3e54:	ffffffff 	.word	0xffffffff
    3e58:	ffffffff 	.word	0xffffffff
    3e5c:	ffffffff 	.word	0xffffffff
    3e60:	ffffffff 	.word	0xffffffff
    3e64:	ffffffff 	.word	0xffffffff
    3e68:	ffffffff 	.word	0xffffffff
    3e6c:	ffffffff 	.word	0xffffffff
    3e70:	ffffffff 	.word	0xffffffff
    3e74:	ffffffff 	.word	0xffffffff
    3e78:	ffffffff 	.word	0xffffffff
    3e7c:	ffffffff 	.word	0xffffffff
    3e80:	ffffffff 	.word	0xffffffff
    3e84:	ffffffff 	.word	0xffffffff
    3e88:	ffffffff 	.word	0xffffffff
    3e8c:	ffffffff 	.word	0xffffffff
    3e90:	ffffffff 	.word	0xffffffff
    3e94:	ffffffff 	.word	0xffffffff
    3e98:	ffffffff 	.word	0xffffffff
    3e9c:	ffffffff 	.word	0xffffffff
    3ea0:	ffffffff 	.word	0xffffffff
    3ea4:	ffffffff 	.word	0xffffffff
    3ea8:	ffffffff 	.word	0xffffffff
    3eac:	ffffffff 	.word	0xffffffff
    3eb0:	ffffffff 	.word	0xffffffff
    3eb4:	ffffffff 	.word	0xffffffff
    3eb8:	ffffffff 	.word	0xffffffff
    3ebc:	ffffffff 	.word	0xffffffff
    3ec0:	ffffffff 	.word	0xffffffff
    3ec4:	ffffffff 	.word	0xffffffff
    3ec8:	ffffffff 	.word	0xffffffff
    3ecc:	ffffffff 	.word	0xffffffff
    3ed0:	ffffffff 	.word	0xffffffff
    3ed4:	ffffffff 	.word	0xffffffff
    3ed8:	ffffffff 	.word	0xffffffff
    3edc:	ffffffff 	.word	0xffffffff
    3ee0:	ffffffff 	.word	0xffffffff
    3ee4:	ffffffff 	.word	0xffffffff
    3ee8:	ffffffff 	.word	0xffffffff
    3eec:	ffffffff 	.word	0xffffffff
    3ef0:	ffffffff 	.word	0xffffffff
    3ef4:	ffffffff 	.word	0xffffffff
    3ef8:	ffffffff 	.word	0xffffffff
    3efc:	ffffffff 	.word	0xffffffff
    3f00:	ffffffff 	.word	0xffffffff
    3f04:	ffffffff 	.word	0xffffffff
    3f08:	ffffffff 	.word	0xffffffff
    3f0c:	ffffffff 	.word	0xffffffff
    3f10:	ffffffff 	.word	0xffffffff
    3f14:	ffffffff 	.word	0xffffffff
    3f18:	ffffffff 	.word	0xffffffff
    3f1c:	ffffffff 	.word	0xffffffff
    3f20:	ffffffff 	.word	0xffffffff
    3f24:	ffffffff 	.word	0xffffffff
    3f28:	ffffffff 	.word	0xffffffff
    3f2c:	ffffffff 	.word	0xffffffff
    3f30:	ffffffff 	.word	0xffffffff
    3f34:	ffffffff 	.word	0xffffffff
    3f38:	ffffffff 	.word	0xffffffff
    3f3c:	ffffffff 	.word	0xffffffff
    3f40:	ffffffff 	.word	0xffffffff
    3f44:	ffffffff 	.word	0xffffffff
    3f48:	ffffffff 	.word	0xffffffff
    3f4c:	ffffffff 	.word	0xffffffff
    3f50:	ffffffff 	.word	0xffffffff
    3f54:	ffffffff 	.word	0xffffffff
    3f58:	ffffffff 	.word	0xffffffff
    3f5c:	ffffffff 	.word	0xffffffff
    3f60:	ffffffff 	.word	0xffffffff
    3f64:	ffffffff 	.word	0xffffffff
    3f68:	ffffffff 	.word	0xffffffff
    3f6c:	ffffffff 	.word	0xffffffff
    3f70:	ffffffff 	.word	0xffffffff
    3f74:	ffffffff 	.word	0xffffffff
    3f78:	ffffffff 	.word	0xffffffff
    3f7c:	ffffffff 	.word	0xffffffff
    3f80:	ffffffff 	.word	0xffffffff
    3f84:	ffffffff 	.word	0xffffffff
    3f88:	ffffffff 	.word	0xffffffff
    3f8c:	ffffffff 	.word	0xffffffff
    3f90:	ffffffff 	.word	0xffffffff
    3f94:	ffffffff 	.word	0xffffffff
    3f98:	ffffffff 	.word	0xffffffff
    3f9c:	ffffffff 	.word	0xffffffff
    3fa0:	ffffffff 	.word	0xffffffff
    3fa4:	ffffffff 	.word	0xffffffff
    3fa8:	ffffffff 	.word	0xffffffff
    3fac:	ffffffff 	.word	0xffffffff
    3fb0:	ffffffff 	.word	0xffffffff
    3fb4:	ffffffff 	.word	0xffffffff
    3fb8:	ffffffff 	.word	0xffffffff
    3fbc:	ffffffff 	.word	0xffffffff
    3fc0:	ffffffff 	.word	0xffffffff
    3fc4:	ffffffff 	.word	0xffffffff
    3fc8:	ffffffff 	.word	0xffffffff
    3fcc:	ffffffff 	.word	0xffffffff
    3fd0:	ffffffff 	.word	0xffffffff
    3fd4:	ffffffff 	.word	0xffffffff
    3fd8:	ffffffff 	.word	0xffffffff
    3fdc:	ffffffff 	.word	0xffffffff
    3fe0:	ffffffff 	.word	0xffffffff
    3fe4:	ffffffff 	.word	0xffffffff
    3fe8:	ffffffff 	.word	0xffffffff
    3fec:	ffffffff 	.word	0xffffffff
    3ff0:	ffffffff 	.word	0xffffffff
    3ff4:	ffffffff 	.word	0xffffffff
    3ff8:	ffffffff 	.word	0xffffffff
    3ffc:	ffffffff 	.word	0xffffffff
    4000:	ffffffff 	.word	0xffffffff
    4004:	ffffffff 	.word	0xffffffff
    4008:	ffffffff 	.word	0xffffffff
    400c:	ffffffff 	.word	0xffffffff
    4010:	ffffffff 	.word	0xffffffff
    4014:	ffffffff 	.word	0xffffffff
    4018:	ffffffff 	.word	0xffffffff
    401c:	ffffffff 	.word	0xffffffff
    4020:	ffffffff 	.word	0xffffffff
    4024:	ffffffff 	.word	0xffffffff
    4028:	ffffffff 	.word	0xffffffff
    402c:	ffffffff 	.word	0xffffffff
    4030:	ffffffff 	.word	0xffffffff
    4034:	ffffffff 	.word	0xffffffff
    4038:	ffffffff 	.word	0xffffffff
    403c:	ffffffff 	.word	0xffffffff
    4040:	ffffffff 	.word	0xffffffff
    4044:	ffffffff 	.word	0xffffffff
    4048:	ffffffff 	.word	0xffffffff
    404c:	ffffffff 	.word	0xffffffff
    4050:	ffffffff 	.word	0xffffffff
    4054:	ffffffff 	.word	0xffffffff
    4058:	ffffffff 	.word	0xffffffff
    405c:	ffffffff 	.word	0xffffffff
    4060:	ffffffff 	.word	0xffffffff
    4064:	ffffffff 	.word	0xffffffff
    4068:	ffffffff 	.word	0xffffffff
    406c:	ffffffff 	.word	0xffffffff
    4070:	ffffffff 	.word	0xffffffff
    4074:	ffffffff 	.word	0xffffffff
    4078:	ffffffff 	.word	0xffffffff
    407c:	ffffffff 	.word	0xffffffff
    4080:	ffffffff 	.word	0xffffffff
    4084:	ffffffff 	.word	0xffffffff
    4088:	ffffffff 	.word	0xffffffff
    408c:	ffffffff 	.word	0xffffffff
    4090:	ffffffff 	.word	0xffffffff
    4094:	ffffffff 	.word	0xffffffff
    4098:	ffffffff 	.word	0xffffffff
    409c:	ffffffff 	.word	0xffffffff
    40a0:	ffffffff 	.word	0xffffffff
    40a4:	ffffffff 	.word	0xffffffff
    40a8:	ffffffff 	.word	0xffffffff
    40ac:	ffffffff 	.word	0xffffffff
    40b0:	ffffffff 	.word	0xffffffff
    40b4:	ffffffff 	.word	0xffffffff
    40b8:	ffffffff 	.word	0xffffffff
    40bc:	ffffffff 	.word	0xffffffff
    40c0:	ffffffff 	.word	0xffffffff
    40c4:	ffffffff 	.word	0xffffffff
    40c8:	ffffffff 	.word	0xffffffff
    40cc:	ffffffff 	.word	0xffffffff
    40d0:	ffffffff 	.word	0xffffffff
    40d4:	ffffffff 	.word	0xffffffff
    40d8:	ffffffff 	.word	0xffffffff
    40dc:	ffffffff 	.word	0xffffffff
    40e0:	ffffffff 	.word	0xffffffff
    40e4:	ffffffff 	.word	0xffffffff
    40e8:	ffffffff 	.word	0xffffffff
    40ec:	ffffffff 	.word	0xffffffff
    40f0:	ffffffff 	.word	0xffffffff
    40f4:	ffffffff 	.word	0xffffffff
    40f8:	ffffffff 	.word	0xffffffff
    40fc:	ffffffff 	.word	0xffffffff
    4100:	ffffffff 	.word	0xffffffff
    4104:	ffffffff 	.word	0xffffffff
    4108:	ffffffff 	.word	0xffffffff
    410c:	ffffffff 	.word	0xffffffff
    4110:	ffffffff 	.word	0xffffffff
    4114:	ffffffff 	.word	0xffffffff
    4118:	ffffffff 	.word	0xffffffff
    411c:	ffffffff 	.word	0xffffffff
    4120:	ffffffff 	.word	0xffffffff
    4124:	ffffffff 	.word	0xffffffff
    4128:	ffffffff 	.word	0xffffffff
    412c:	ffffffff 	.word	0xffffffff
    4130:	ffffffff 	.word	0xffffffff
    4134:	ffffffff 	.word	0xffffffff
    4138:	ffffffff 	.word	0xffffffff
    413c:	ffffffff 	.word	0xffffffff
    4140:	ffffffff 	.word	0xffffffff
    4144:	ffffffff 	.word	0xffffffff
    4148:	ffffffff 	.word	0xffffffff
    414c:	ffffffff 	.word	0xffffffff
    4150:	ffffffff 	.word	0xffffffff
    4154:	ffffffff 	.word	0xffffffff
    4158:	ffffffff 	.word	0xffffffff
    415c:	ffffffff 	.word	0xffffffff
    4160:	ffffffff 	.word	0xffffffff
    4164:	ffffffff 	.word	0xffffffff
    4168:	ffffffff 	.word	0xffffffff
    416c:	ffffffff 	.word	0xffffffff
    4170:	ffffffff 	.word	0xffffffff
    4174:	ffffffff 	.word	0xffffffff
    4178:	ffffffff 	.word	0xffffffff
    417c:	ffffffff 	.word	0xffffffff
    4180:	ffffffff 	.word	0xffffffff
    4184:	ffffffff 	.word	0xffffffff
    4188:	ffffffff 	.word	0xffffffff
    418c:	ffffffff 	.word	0xffffffff
    4190:	ffffffff 	.word	0xffffffff
    4194:	ffffffff 	.word	0xffffffff
    4198:	ffffffff 	.word	0xffffffff
    419c:	ffffffff 	.word	0xffffffff
    41a0:	ffffffff 	.word	0xffffffff
    41a4:	ffffffff 	.word	0xffffffff
    41a8:	ffffffff 	.word	0xffffffff
    41ac:	ffffffff 	.word	0xffffffff
    41b0:	ffffffff 	.word	0xffffffff
    41b4:	ffffffff 	.word	0xffffffff
    41b8:	ffffffff 	.word	0xffffffff
    41bc:	ffffffff 	.word	0xffffffff
    41c0:	ffffffff 	.word	0xffffffff
    41c4:	ffffffff 	.word	0xffffffff
    41c8:	ffffffff 	.word	0xffffffff
    41cc:	ffffffff 	.word	0xffffffff
    41d0:	ffffffff 	.word	0xffffffff
    41d4:	ffffffff 	.word	0xffffffff
    41d8:	ffffffff 	.word	0xffffffff
    41dc:	ffffffff 	.word	0xffffffff
    41e0:	ffffffff 	.word	0xffffffff
    41e4:	ffffffff 	.word	0xffffffff
    41e8:	ffffffff 	.word	0xffffffff
    41ec:	ffffffff 	.word	0xffffffff
    41f0:	ffffffff 	.word	0xffffffff
    41f4:	ffffffff 	.word	0xffffffff
    41f8:	ffffffff 	.word	0xffffffff
    41fc:	ffffffff 	.word	0xffffffff
    4200:	ffffffff 	.word	0xffffffff
    4204:	ffffffff 	.word	0xffffffff
    4208:	ffffffff 	.word	0xffffffff
    420c:	ffffffff 	.word	0xffffffff
    4210:	ffffffff 	.word	0xffffffff
    4214:	ffffffff 	.word	0xffffffff
    4218:	ffffffff 	.word	0xffffffff
    421c:	ffffffff 	.word	0xffffffff
    4220:	ffffffff 	.word	0xffffffff
    4224:	ffffffff 	.word	0xffffffff
    4228:	ffffffff 	.word	0xffffffff
    422c:	ffffffff 	.word	0xffffffff
    4230:	ffffffff 	.word	0xffffffff
    4234:	ffffffff 	.word	0xffffffff
    4238:	ffffffff 	.word	0xffffffff
    423c:	ffffffff 	.word	0xffffffff
    4240:	ffffffff 	.word	0xffffffff
    4244:	ffffffff 	.word	0xffffffff
    4248:	ffffffff 	.word	0xffffffff
    424c:	ffffffff 	.word	0xffffffff
    4250:	ffffffff 	.word	0xffffffff
    4254:	ffffffff 	.word	0xffffffff
    4258:	ffffffff 	.word	0xffffffff
    425c:	ffffffff 	.word	0xffffffff
    4260:	ffffffff 	.word	0xffffffff
    4264:	ffffffff 	.word	0xffffffff
    4268:	ffffffff 	.word	0xffffffff
    426c:	ffffffff 	.word	0xffffffff
    4270:	ffffffff 	.word	0xffffffff
    4274:	ffffffff 	.word	0xffffffff
    4278:	ffffffff 	.word	0xffffffff
    427c:	ffffffff 	.word	0xffffffff
    4280:	ffffffff 	.word	0xffffffff
    4284:	ffffffff 	.word	0xffffffff
    4288:	ffffffff 	.word	0xffffffff
    428c:	ffffffff 	.word	0xffffffff
    4290:	ffffffff 	.word	0xffffffff
    4294:	ffffffff 	.word	0xffffffff
    4298:	ffffffff 	.word	0xffffffff
    429c:	ffffffff 	.word	0xffffffff
    42a0:	ffffffff 	.word	0xffffffff
    42a4:	ffffffff 	.word	0xffffffff
    42a8:	ffffffff 	.word	0xffffffff
    42ac:	ffffffff 	.word	0xffffffff
    42b0:	ffffffff 	.word	0xffffffff
    42b4:	ffffffff 	.word	0xffffffff
    42b8:	ffffffff 	.word	0xffffffff
    42bc:	ffffffff 	.word	0xffffffff
    42c0:	ffffffff 	.word	0xffffffff
    42c4:	ffffffff 	.word	0xffffffff
    42c8:	ffffffff 	.word	0xffffffff
    42cc:	ffffffff 	.word	0xffffffff
    42d0:	ffffffff 	.word	0xffffffff
    42d4:	ffffffff 	.word	0xffffffff
    42d8:	ffffffff 	.word	0xffffffff
    42dc:	ffffffff 	.word	0xffffffff
    42e0:	ffffffff 	.word	0xffffffff
    42e4:	ffffffff 	.word	0xffffffff
    42e8:	ffffffff 	.word	0xffffffff
    42ec:	ffffffff 	.word	0xffffffff
    42f0:	ffffffff 	.word	0xffffffff
    42f4:	ffffffff 	.word	0xffffffff
    42f8:	ffffffff 	.word	0xffffffff
    42fc:	ffffffff 	.word	0xffffffff
    4300:	ffffffff 	.word	0xffffffff
    4304:	ffffffff 	.word	0xffffffff
    4308:	ffffffff 	.word	0xffffffff
    430c:	ffffffff 	.word	0xffffffff
    4310:	ffffffff 	.word	0xffffffff
    4314:	ffffffff 	.word	0xffffffff
    4318:	ffffffff 	.word	0xffffffff
    431c:	ffffffff 	.word	0xffffffff
    4320:	ffffffff 	.word	0xffffffff
    4324:	ffffffff 	.word	0xffffffff
    4328:	ffffffff 	.word	0xffffffff
    432c:	ffffffff 	.word	0xffffffff
    4330:	ffffffff 	.word	0xffffffff
    4334:	ffffffff 	.word	0xffffffff
    4338:	ffffffff 	.word	0xffffffff
    433c:	ffffffff 	.word	0xffffffff
    4340:	ffffffff 	.word	0xffffffff
    4344:	ffffffff 	.word	0xffffffff
    4348:	ffffffff 	.word	0xffffffff
    434c:	ffffffff 	.word	0xffffffff
    4350:	ffffffff 	.word	0xffffffff
    4354:	ffffffff 	.word	0xffffffff
    4358:	ffffffff 	.word	0xffffffff
    435c:	ffffffff 	.word	0xffffffff
    4360:	ffffffff 	.word	0xffffffff
    4364:	ffffffff 	.word	0xffffffff
    4368:	ffffffff 	.word	0xffffffff
    436c:	ffffffff 	.word	0xffffffff
    4370:	ffffffff 	.word	0xffffffff
    4374:	ffffffff 	.word	0xffffffff
    4378:	ffffffff 	.word	0xffffffff
    437c:	ffffffff 	.word	0xffffffff
    4380:	ffffffff 	.word	0xffffffff
    4384:	ffffffff 	.word	0xffffffff
    4388:	ffffffff 	.word	0xffffffff
    438c:	ffffffff 	.word	0xffffffff
    4390:	ffffffff 	.word	0xffffffff
    4394:	ffffffff 	.word	0xffffffff
    4398:	ffffffff 	.word	0xffffffff
    439c:	ffffffff 	.word	0xffffffff
    43a0:	ffffffff 	.word	0xffffffff
    43a4:	ffffffff 	.word	0xffffffff
    43a8:	ffffffff 	.word	0xffffffff
    43ac:	ffffffff 	.word	0xffffffff
    43b0:	ffffffff 	.word	0xffffffff
    43b4:	ffffffff 	.word	0xffffffff
    43b8:	ffffffff 	.word	0xffffffff
    43bc:	ffffffff 	.word	0xffffffff
    43c0:	ffffffff 	.word	0xffffffff
    43c4:	ffffffff 	.word	0xffffffff
    43c8:	ffffffff 	.word	0xffffffff
    43cc:	ffffffff 	.word	0xffffffff
    43d0:	ffffffff 	.word	0xffffffff
    43d4:	ffffffff 	.word	0xffffffff
    43d8:	ffffffff 	.word	0xffffffff
    43dc:	ffffffff 	.word	0xffffffff
    43e0:	ffffffff 	.word	0xffffffff
    43e4:	ffffffff 	.word	0xffffffff
    43e8:	ffffffff 	.word	0xffffffff
    43ec:	ffffffff 	.word	0xffffffff
    43f0:	ffffffff 	.word	0xffffffff
    43f4:	ffffffff 	.word	0xffffffff
    43f8:	ffffffff 	.word	0xffffffff
    43fc:	ffffffff 	.word	0xffffffff

00004400 <__do_global_dtors_aux>:
    4400:	b510      	push	{r4, lr}
    4402:	4c06      	ldr	r4, [pc, #24]	; (441c <__do_global_dtors_aux+0x1c>)
    4404:	7823      	ldrb	r3, [r4, #0]
    4406:	2b00      	cmp	r3, #0
    4408:	d107      	bne.n	441a <__do_global_dtors_aux+0x1a>
    440a:	4b05      	ldr	r3, [pc, #20]	; (4420 <__do_global_dtors_aux+0x20>)
    440c:	2b00      	cmp	r3, #0
    440e:	d002      	beq.n	4416 <__do_global_dtors_aux+0x16>
    4410:	4804      	ldr	r0, [pc, #16]	; (4424 <__do_global_dtors_aux+0x24>)
    4412:	e000      	b.n	4416 <__do_global_dtors_aux+0x16>
    4414:	bf00      	nop
    4416:	2301      	movs	r3, #1
    4418:	7023      	strb	r3, [r4, #0]
    441a:	bd10      	pop	{r4, pc}
    441c:	20000090 	.word	0x20000090
    4420:	00000000 	.word	0x00000000
    4424:	00017e00 	.word	0x00017e00

00004428 <frame_dummy>:
    4428:	4b08      	ldr	r3, [pc, #32]	; (444c <frame_dummy+0x24>)
    442a:	b510      	push	{r4, lr}
    442c:	2b00      	cmp	r3, #0
    442e:	d003      	beq.n	4438 <frame_dummy+0x10>
    4430:	4907      	ldr	r1, [pc, #28]	; (4450 <frame_dummy+0x28>)
    4432:	4808      	ldr	r0, [pc, #32]	; (4454 <frame_dummy+0x2c>)
    4434:	e000      	b.n	4438 <frame_dummy+0x10>
    4436:	bf00      	nop
    4438:	4807      	ldr	r0, [pc, #28]	; (4458 <frame_dummy+0x30>)
    443a:	6803      	ldr	r3, [r0, #0]
    443c:	2b00      	cmp	r3, #0
    443e:	d100      	bne.n	4442 <frame_dummy+0x1a>
    4440:	bd10      	pop	{r4, pc}
    4442:	4b06      	ldr	r3, [pc, #24]	; (445c <frame_dummy+0x34>)
    4444:	2b00      	cmp	r3, #0
    4446:	d0fb      	beq.n	4440 <frame_dummy+0x18>
    4448:	4798      	blx	r3
    444a:	e7f9      	b.n	4440 <frame_dummy+0x18>
    444c:	00000000 	.word	0x00000000
    4450:	20000094 	.word	0x20000094
    4454:	00017e00 	.word	0x00017e00
    4458:	00017e00 	.word	0x00017e00
    445c:	00000000 	.word	0x00000000

00004460 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
    4460:	b5f0      	push	{r4, r5, r6, r7, lr}
    4462:	b083      	sub	sp, #12
    4464:	466b      	mov	r3, sp
    4466:	1ddf      	adds	r7, r3, #7
    4468:	71d8      	strb	r0, [r3, #7]
	spi_select_slave(&ssd1306_master, &ssd1306_slave, true);
    446a:	4e0b      	ldr	r6, [pc, #44]	; (4498 <ssd1306_write_command+0x38>)
    446c:	4c0b      	ldr	r4, [pc, #44]	; (449c <ssd1306_write_command+0x3c>)
    446e:	2201      	movs	r2, #1
    4470:	0031      	movs	r1, r6
    4472:	0020      	movs	r0, r4
    4474:	4d0a      	ldr	r5, [pc, #40]	; (44a0 <ssd1306_write_command+0x40>)
    4476:	47a8      	blx	r5

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4478:	2280      	movs	r2, #128	; 0x80
    447a:	0052      	lsls	r2, r2, #1
    447c:	4b09      	ldr	r3, [pc, #36]	; (44a4 <ssd1306_write_command+0x44>)
    447e:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(SSD1306_DC_PIN, false);
	spi_write_buffer_wait(&ssd1306_master, &command, 1);
    4480:	3aff      	subs	r2, #255	; 0xff
    4482:	0039      	movs	r1, r7
    4484:	0020      	movs	r0, r4
    4486:	4b08      	ldr	r3, [pc, #32]	; (44a8 <ssd1306_write_command+0x48>)
    4488:	4798      	blx	r3
	spi_select_slave(&ssd1306_master, &ssd1306_slave, false);
    448a:	2200      	movs	r2, #0
    448c:	0031      	movs	r1, r6
    448e:	0020      	movs	r0, r4
    4490:	47a8      	blx	r5
}
    4492:	b003      	add	sp, #12
    4494:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4496:	46c0      	nop			; (mov r8, r8)
    4498:	200020a8 	.word	0x200020a8
    449c:	2000209c 	.word	0x2000209c
    44a0:	00006075 	.word	0x00006075
    44a4:	40002800 	.word	0x40002800
    44a8:	00006169 	.word	0x00006169

000044ac <ssd1306_init>:
{
    44ac:	b530      	push	{r4, r5, lr}
    44ae:	b091      	sub	sp, #68	; 0x44
	delay_init();
    44b0:	4b5b      	ldr	r3, [pc, #364]	; (4620 <ssd1306_init+0x174>)
    44b2:	4798      	blx	r3
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    44b4:	4c5b      	ldr	r4, [pc, #364]	; (4624 <ssd1306_init+0x178>)
    44b6:	2317      	movs	r3, #23
    44b8:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    44ba:	2300      	movs	r3, #0
    44bc:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    44be:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    44c0:	a902      	add	r1, sp, #8
    44c2:	2201      	movs	r2, #1
    44c4:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    44c6:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    44c8:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    44ca:	2017      	movs	r0, #23
    44cc:	4b56      	ldr	r3, [pc, #344]	; (4628 <ssd1306_init+0x17c>)
    44ce:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    44d0:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    44d2:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    44d4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    44d6:	2900      	cmp	r1, #0
    44d8:	d104      	bne.n	44e4 <ssd1306_init+0x38>
		return &(ports[port_index]->Group[group_index]);
    44da:	0953      	lsrs	r3, r2, #5
    44dc:	01db      	lsls	r3, r3, #7
    44de:	4953      	ldr	r1, [pc, #332]	; (462c <ssd1306_init+0x180>)
    44e0:	468c      	mov	ip, r1
    44e2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    44e4:	211f      	movs	r1, #31
    44e6:	4011      	ands	r1, r2
    44e8:	2201      	movs	r2, #1
    44ea:	0010      	movs	r0, r2
    44ec:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    44ee:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    44f0:	ac02      	add	r4, sp, #8
    44f2:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    44f4:	2300      	movs	r3, #0
    44f6:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    44f8:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    44fa:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    44fc:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    44fe:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    4500:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    4502:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    4504:	3223      	adds	r2, #35	; 0x23
    4506:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    4508:	3a18      	subs	r2, #24
    450a:	2100      	movs	r1, #0
    450c:	a808      	add	r0, sp, #32
    450e:	4b48      	ldr	r3, [pc, #288]	; (4630 <ssd1306_init+0x184>)
    4510:	4798      	blx	r3
	config.mux_setting = SSD1306_SPI_PINMUX_SETTING;
    4512:	2380      	movs	r3, #128	; 0x80
    4514:	025b      	lsls	r3, r3, #9
    4516:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SSD1306_SPI_PINMUX_PAD0;
    4518:	4b46      	ldr	r3, [pc, #280]	; (4634 <ssd1306_init+0x188>)
    451a:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SSD1306_SPI_PINMUX_PAD1;
    451c:	4b46      	ldr	r3, [pc, #280]	; (4638 <ssd1306_init+0x18c>)
    451e:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SSD1306_SPI_PINMUX_PAD2;
    4520:	4b46      	ldr	r3, [pc, #280]	; (463c <ssd1306_init+0x190>)
    4522:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SSD1306_SPI_PINMUX_PAD3;
    4524:	4b46      	ldr	r3, [pc, #280]	; (4640 <ssd1306_init+0x194>)
    4526:	6363      	str	r3, [r4, #52]	; 0x34
	config.mode_specific.master.baudrate = SSD1306_CLOCK_SPEED;
    4528:	4b46      	ldr	r3, [pc, #280]	; (4644 <ssd1306_init+0x198>)
    452a:	61a3      	str	r3, [r4, #24]
	spi_init(&ssd1306_master, SSD1306_SPI, &config);
    452c:	4d46      	ldr	r5, [pc, #280]	; (4648 <ssd1306_init+0x19c>)
    452e:	0022      	movs	r2, r4
    4530:	4946      	ldr	r1, [pc, #280]	; (464c <ssd1306_init+0x1a0>)
    4532:	0028      	movs	r0, r5
    4534:	4b46      	ldr	r3, [pc, #280]	; (4650 <ssd1306_init+0x1a4>)
    4536:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4538:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    453a:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    453c:	2b00      	cmp	r3, #0
    453e:	d1fc      	bne.n	453a <ssd1306_init+0x8e>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    4540:	6813      	ldr	r3, [r2, #0]
    4542:	2102      	movs	r1, #2
    4544:	430b      	orrs	r3, r1
    4546:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    4548:	ac01      	add	r4, sp, #4
    454a:	2301      	movs	r3, #1
    454c:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    454e:	2200      	movs	r2, #0
    4550:	70a2      	strb	r2, [r4, #2]
	pin.direction = PORT_PIN_DIR_OUTPUT;
    4552:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(SSD1306_DC_PIN, &pin);
    4554:	0021      	movs	r1, r4
    4556:	2008      	movs	r0, #8
    4558:	4d33      	ldr	r5, [pc, #204]	; (4628 <ssd1306_init+0x17c>)
    455a:	47a8      	blx	r5
	port_pin_set_config(SSD1306_RES_PIN, &pin);
    455c:	0021      	movs	r1, r4
    455e:	200f      	movs	r0, #15
    4560:	47a8      	blx	r5
 *
 * This functions will reset the OLED controller by setting the reset pin low.
 */
static inline void ssd1306_hard_reset(void)
{
	uint32_t delay_10us = 10 * (system_gclk_gen_get_hz(0)/1000000);
    4562:	2000      	movs	r0, #0
    4564:	4b3b      	ldr	r3, [pc, #236]	; (4654 <ssd1306_init+0x1a8>)
    4566:	4798      	blx	r3
    4568:	4936      	ldr	r1, [pc, #216]	; (4644 <ssd1306_init+0x198>)
    456a:	4b3b      	ldr	r3, [pc, #236]	; (4658 <ssd1306_init+0x1ac>)
    456c:	4798      	blx	r3
    456e:	0083      	lsls	r3, r0, #2
    4570:	1818      	adds	r0, r3, r0
    4572:	0040      	lsls	r0, r0, #1
		port_base->OUTCLR.reg = pin_mask;
    4574:	2280      	movs	r2, #128	; 0x80
    4576:	0212      	lsls	r2, r2, #8
    4578:	4b2c      	ldr	r3, [pc, #176]	; (462c <ssd1306_init+0x180>)
    457a:	615a      	str	r2, [r3, #20]
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
    457c:	2800      	cmp	r0, #0
    457e:	d04a      	beq.n	4616 <ssd1306_init+0x16a>
		SysTick->LOAD = n;
    4580:	4b36      	ldr	r3, [pc, #216]	; (465c <ssd1306_init+0x1b0>)
    4582:	6058      	str	r0, [r3, #4]
		SysTick->VAL = 0;
    4584:	2200      	movs	r2, #0
    4586:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    4588:	0019      	movs	r1, r3
    458a:	2280      	movs	r2, #128	; 0x80
    458c:	0252      	lsls	r2, r2, #9
    458e:	680b      	ldr	r3, [r1, #0]
    4590:	4213      	tst	r3, r2
    4592:	d0fc      	beq.n	458e <ssd1306_init+0xe2>
		port_base->OUTSET.reg = pin_mask;
    4594:	2280      	movs	r2, #128	; 0x80
    4596:	0212      	lsls	r2, r2, #8
    4598:	4b24      	ldr	r3, [pc, #144]	; (462c <ssd1306_init+0x180>)
    459a:	619a      	str	r2, [r3, #24]
		SysTick->LOAD = n;
    459c:	4b2f      	ldr	r3, [pc, #188]	; (465c <ssd1306_init+0x1b0>)
    459e:	6058      	str	r0, [r3, #4]
		SysTick->VAL = 0;
    45a0:	2200      	movs	r2, #0
    45a2:	609a      	str	r2, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    45a4:	0019      	movs	r1, r3
    45a6:	2280      	movs	r2, #128	; 0x80
    45a8:	0252      	lsls	r2, r2, #9
    45aa:	680b      	ldr	r3, [r1, #0]
    45ac:	4213      	tst	r3, r2
    45ae:	d0fc      	beq.n	45aa <ssd1306_init+0xfe>
    45b0:	2280      	movs	r2, #128	; 0x80
    45b2:	0212      	lsls	r2, r2, #8
    45b4:	4b1d      	ldr	r3, [pc, #116]	; (462c <ssd1306_init+0x180>)
    45b6:	619a      	str	r2, [r3, #24]
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
    45b8:	20a8      	movs	r0, #168	; 0xa8
    45ba:	4c29      	ldr	r4, [pc, #164]	; (4660 <ssd1306_init+0x1b4>)
    45bc:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
    45be:	201f      	movs	r0, #31
    45c0:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
    45c2:	20d3      	movs	r0, #211	; 0xd3
    45c4:	47a0      	blx	r4
	ssd1306_write_command(0x00);
    45c6:	2000      	movs	r0, #0
    45c8:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
    45ca:	2040      	movs	r0, #64	; 0x40
    45cc:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
    45ce:	20a1      	movs	r0, #161	; 0xa1
    45d0:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
    45d2:	20c8      	movs	r0, #200	; 0xc8
    45d4:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
    45d6:	20da      	movs	r0, #218	; 0xda
    45d8:	47a0      	blx	r4
	ssd1306_write_command(0x02);
    45da:	2002      	movs	r0, #2
    45dc:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
    45de:	2081      	movs	r0, #129	; 0x81
    45e0:	47a0      	blx	r4
	ssd1306_write_command(contrast);
    45e2:	208f      	movs	r0, #143	; 0x8f
    45e4:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
    45e6:	20a4      	movs	r0, #164	; 0xa4
    45e8:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
    45ea:	20a6      	movs	r0, #166	; 0xa6
    45ec:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
    45ee:	20d5      	movs	r0, #213	; 0xd5
    45f0:	47a0      	blx	r4
	ssd1306_write_command(0x80);
    45f2:	2080      	movs	r0, #128	; 0x80
    45f4:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
    45f6:	208d      	movs	r0, #141	; 0x8d
    45f8:	47a0      	blx	r4
	ssd1306_write_command(0x14);
    45fa:	2014      	movs	r0, #20
    45fc:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
    45fe:	20db      	movs	r0, #219	; 0xdb
    4600:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
    4602:	2040      	movs	r0, #64	; 0x40
    4604:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
    4606:	20d9      	movs	r0, #217	; 0xd9
    4608:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
    460a:	20f1      	movs	r0, #241	; 0xf1
    460c:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
    460e:	20af      	movs	r0, #175	; 0xaf
    4610:	47a0      	blx	r4
}
    4612:	b011      	add	sp, #68	; 0x44
    4614:	bd30      	pop	{r4, r5, pc}
    4616:	2280      	movs	r2, #128	; 0x80
    4618:	0212      	lsls	r2, r2, #8
    461a:	4b04      	ldr	r3, [pc, #16]	; (462c <ssd1306_init+0x180>)
    461c:	619a      	str	r2, [r3, #24]
    461e:	e7c7      	b.n	45b0 <ssd1306_init+0x104>
    4620:	000046b1 	.word	0x000046b1
    4624:	200020a8 	.word	0x200020a8
    4628:	00005155 	.word	0x00005155
    462c:	40002800 	.word	0x40002800
    4630:	000155d1 	.word	0x000155d1
    4634:	00220003 	.word	0x00220003
    4638:	00170003 	.word	0x00170003
    463c:	00360003 	.word	0x00360003
    4640:	00370003 	.word	0x00370003
    4644:	000f4240 	.word	0x000f4240
    4648:	2000209c 	.word	0x2000209c
    464c:	43000400 	.word	0x43000400
    4650:	00005d29 	.word	0x00005d29
    4654:	00006fb9 	.word	0x00006fb9
    4658:	0001235d 	.word	0x0001235d
    465c:	e000e010 	.word	0xe000e010
    4660:	00004461 	.word	0x00004461

00004664 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
    4664:	b5f0      	push	{r4, r5, r6, r7, lr}
    4666:	b083      	sub	sp, #12
    4668:	466b      	mov	r3, sp
    466a:	1ddf      	adds	r7, r3, #7
    466c:	71d8      	strb	r0, [r3, #7]
	spi_select_slave(&ssd1306_master, &ssd1306_slave, true);
    466e:	4e0b      	ldr	r6, [pc, #44]	; (469c <ssd1306_write_data+0x38>)
    4670:	4c0b      	ldr	r4, [pc, #44]	; (46a0 <ssd1306_write_data+0x3c>)
    4672:	2201      	movs	r2, #1
    4674:	0031      	movs	r1, r6
    4676:	0020      	movs	r0, r4
    4678:	4d0a      	ldr	r5, [pc, #40]	; (46a4 <ssd1306_write_data+0x40>)
    467a:	47a8      	blx	r5
    467c:	2280      	movs	r2, #128	; 0x80
    467e:	0052      	lsls	r2, r2, #1
    4680:	4b09      	ldr	r3, [pc, #36]	; (46a8 <ssd1306_write_data+0x44>)
    4682:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(SSD1306_DC_PIN, true);
	spi_write_buffer_wait(&ssd1306_master, &data, 1);
    4684:	3aff      	subs	r2, #255	; 0xff
    4686:	0039      	movs	r1, r7
    4688:	0020      	movs	r0, r4
    468a:	4b08      	ldr	r3, [pc, #32]	; (46ac <ssd1306_write_data+0x48>)
    468c:	4798      	blx	r3
	spi_select_slave(&ssd1306_master, &ssd1306_slave, false);
    468e:	2200      	movs	r2, #0
    4690:	0031      	movs	r1, r6
    4692:	0020      	movs	r0, r4
    4694:	47a8      	blx	r5
}
    4696:	b003      	add	sp, #12
    4698:	bdf0      	pop	{r4, r5, r6, r7, pc}
    469a:	46c0      	nop			; (mov r8, r8)
    469c:	200020a8 	.word	0x200020a8
    46a0:	2000209c 	.word	0x2000209c
    46a4:	00006075 	.word	0x00006075
    46a8:	40002800 	.word	0x40002800
    46ac:	00006169 	.word	0x00006169

000046b0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    46b0:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    46b2:	2000      	movs	r0, #0
    46b4:	4b08      	ldr	r3, [pc, #32]	; (46d8 <delay_init+0x28>)
    46b6:	4798      	blx	r3
    46b8:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    46ba:	4c08      	ldr	r4, [pc, #32]	; (46dc <delay_init+0x2c>)
    46bc:	21fa      	movs	r1, #250	; 0xfa
    46be:	0089      	lsls	r1, r1, #2
    46c0:	47a0      	blx	r4
    46c2:	4b07      	ldr	r3, [pc, #28]	; (46e0 <delay_init+0x30>)
    46c4:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    46c6:	4907      	ldr	r1, [pc, #28]	; (46e4 <delay_init+0x34>)
    46c8:	0028      	movs	r0, r5
    46ca:	47a0      	blx	r4
    46cc:	4b06      	ldr	r3, [pc, #24]	; (46e8 <delay_init+0x38>)
    46ce:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    46d0:	2205      	movs	r2, #5
    46d2:	4b06      	ldr	r3, [pc, #24]	; (46ec <delay_init+0x3c>)
    46d4:	601a      	str	r2, [r3, #0]
}
    46d6:	bd70      	pop	{r4, r5, r6, pc}
    46d8:	00006fb9 	.word	0x00006fb9
    46dc:	0001235d 	.word	0x0001235d
    46e0:	20000000 	.word	0x20000000
    46e4:	000f4240 	.word	0x000f4240
    46e8:	20000004 	.word	0x20000004
    46ec:	e000e010 	.word	0xe000e010

000046f0 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    46f0:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    46f2:	4b08      	ldr	r3, [pc, #32]	; (4714 <delay_cycles_us+0x24>)
    46f4:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    46f6:	4a08      	ldr	r2, [pc, #32]	; (4718 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    46f8:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    46fa:	2180      	movs	r1, #128	; 0x80
    46fc:	0249      	lsls	r1, r1, #9
	while (n--) {
    46fe:	3801      	subs	r0, #1
    4700:	d307      	bcc.n	4712 <delay_cycles_us+0x22>
	if (n > 0) {
    4702:	2c00      	cmp	r4, #0
    4704:	d0fb      	beq.n	46fe <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    4706:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    4708:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    470a:	6813      	ldr	r3, [r2, #0]
    470c:	420b      	tst	r3, r1
    470e:	d0fc      	beq.n	470a <delay_cycles_us+0x1a>
    4710:	e7f5      	b.n	46fe <delay_cycles_us+0xe>
	}
}
    4712:	bd30      	pop	{r4, r5, pc}
    4714:	20000004 	.word	0x20000004
    4718:	e000e010 	.word	0xe000e010

0000471c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    471c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    471e:	4b08      	ldr	r3, [pc, #32]	; (4740 <delay_cycles_ms+0x24>)
    4720:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    4722:	4a08      	ldr	r2, [pc, #32]	; (4744 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    4724:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    4726:	2180      	movs	r1, #128	; 0x80
    4728:	0249      	lsls	r1, r1, #9
	while (n--) {
    472a:	3801      	subs	r0, #1
    472c:	d307      	bcc.n	473e <delay_cycles_ms+0x22>
	if (n > 0) {
    472e:	2c00      	cmp	r4, #0
    4730:	d0fb      	beq.n	472a <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    4732:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    4734:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    4736:	6813      	ldr	r3, [r2, #0]
    4738:	420b      	tst	r3, r1
    473a:	d0fc      	beq.n	4736 <delay_cycles_ms+0x1a>
    473c:	e7f5      	b.n	472a <delay_cycles_ms+0xe>
	}
}
    473e:	bd30      	pop	{r4, r5, pc}
    4740:	20000000 	.word	0x20000000
    4744:	e000e010 	.word	0xe000e010

00004748 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
    4748:	4b01      	ldr	r3, [pc, #4]	; (4750 <gfx_mono_set_framebuffer+0x8>)
    474a:	6018      	str	r0, [r3, #0]
}
    474c:	4770      	bx	lr
    474e:	46c0      	nop			; (mov r8, r8)
    4750:	200000ac 	.word	0x200000ac

00004754 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
    4754:	4b02      	ldr	r3, [pc, #8]	; (4760 <gfx_mono_framebuffer_put_byte+0xc>)
    4756:	681b      	ldr	r3, [r3, #0]
    4758:	01c0      	lsls	r0, r0, #7
    475a:	1818      	adds	r0, r3, r0
    475c:	5442      	strb	r2, [r0, r1]
}
    475e:	4770      	bx	lr
    4760:	200000ac 	.word	0x200000ac

00004764 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
    4764:	4b02      	ldr	r3, [pc, #8]	; (4770 <gfx_mono_framebuffer_get_byte+0xc>)
    4766:	681b      	ldr	r3, [r3, #0]
    4768:	01c0      	lsls	r0, r0, #7
    476a:	1818      	adds	r0, r3, r0
    476c:	5c40      	ldrb	r0, [r0, r1]
}
    476e:	4770      	bx	lr
    4770:	200000ac 	.word	0x200000ac

00004774 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
    4774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4776:	46ce      	mov	lr, r9
    4778:	4647      	mov	r7, r8
    477a:	b580      	push	{r7, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
    477c:	1884      	adds	r4, r0, r2
    477e:	2c80      	cmp	r4, #128	; 0x80
    4780:	dd03      	ble.n	478a <gfx_mono_generic_draw_horizontal_line+0x16>
		length = GFX_MONO_LCD_WIDTH - x;
    4782:	2280      	movs	r2, #128	; 0x80
    4784:	4252      	negs	r2, r2
    4786:	1a12      	subs	r2, r2, r0
    4788:	b2d2      	uxtb	r2, r2
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
    478a:	2a00      	cmp	r2, #0
    478c:	d037      	beq.n	47fe <gfx_mono_generic_draw_horizontal_line+0x8a>
	page = y / 8;
    478e:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
    4790:	00ec      	lsls	r4, r5, #3
    4792:	1b09      	subs	r1, r1, r4
    4794:	2701      	movs	r7, #1
    4796:	408f      	lsls	r7, r1
    4798:	0039      	movs	r1, r7
    479a:	b2ff      	uxtb	r7, r7
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
    479c:	2b01      	cmp	r3, #1
    479e:	d019      	beq.n	47d4 <gfx_mono_generic_draw_horizontal_line+0x60>
    47a0:	2b00      	cmp	r3, #0
    47a2:	d030      	beq.n	4806 <gfx_mono_generic_draw_horizontal_line+0x92>
    47a4:	2b02      	cmp	r3, #2
    47a6:	d12a      	bne.n	47fe <gfx_mono_generic_draw_horizontal_line+0x8a>
    47a8:	3801      	subs	r0, #1
    47aa:	b2c6      	uxtb	r6, r0
    47ac:	1992      	adds	r2, r2, r6
    47ae:	b2d4      	uxtb	r4, r2
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
    47b0:	4b20      	ldr	r3, [pc, #128]	; (4834 <gfx_mono_generic_draw_horizontal_line+0xc0>)
    47b2:	4699      	mov	r9, r3
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
    47b4:	4b20      	ldr	r3, [pc, #128]	; (4838 <gfx_mono_generic_draw_horizontal_line+0xc4>)
    47b6:	4698      	mov	r8, r3
			temp = gfx_mono_get_byte(page, x + length);
    47b8:	0021      	movs	r1, r4
    47ba:	0028      	movs	r0, r5
    47bc:	47c8      	blx	r9
			temp ^= pixelmask;
    47be:	4078      	eors	r0, r7
			gfx_mono_put_byte(page, x + length, temp);
    47c0:	b2c2      	uxtb	r2, r0
    47c2:	2300      	movs	r3, #0
    47c4:	0021      	movs	r1, r4
    47c6:	0028      	movs	r0, r5
    47c8:	47c0      	blx	r8
    47ca:	3c01      	subs	r4, #1
    47cc:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
    47ce:	42b4      	cmp	r4, r6
    47d0:	d1f2      	bne.n	47b8 <gfx_mono_generic_draw_horizontal_line+0x44>
    47d2:	e014      	b.n	47fe <gfx_mono_generic_draw_horizontal_line+0x8a>
    47d4:	3801      	subs	r0, #1
    47d6:	b2c6      	uxtb	r6, r0
    47d8:	1992      	adds	r2, r2, r6
    47da:	b2d4      	uxtb	r4, r2
			temp = gfx_mono_get_byte(page, x + length);
    47dc:	4b15      	ldr	r3, [pc, #84]	; (4834 <gfx_mono_generic_draw_horizontal_line+0xc0>)
    47de:	4699      	mov	r9, r3
			gfx_mono_put_byte(page, x + length, temp);
    47e0:	4b15      	ldr	r3, [pc, #84]	; (4838 <gfx_mono_generic_draw_horizontal_line+0xc4>)
    47e2:	4698      	mov	r8, r3
			temp = gfx_mono_get_byte(page, x + length);
    47e4:	0021      	movs	r1, r4
    47e6:	0028      	movs	r0, r5
    47e8:	47c8      	blx	r9
			temp |= pixelmask;
    47ea:	4338      	orrs	r0, r7
			gfx_mono_put_byte(page, x + length, temp);
    47ec:	b2c2      	uxtb	r2, r0
    47ee:	2300      	movs	r3, #0
    47f0:	0021      	movs	r1, r4
    47f2:	0028      	movs	r0, r5
    47f4:	47c0      	blx	r8
    47f6:	3c01      	subs	r4, #1
    47f8:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
    47fa:	42b4      	cmp	r4, r6
    47fc:	d1f2      	bne.n	47e4 <gfx_mono_generic_draw_horizontal_line+0x70>
		break;

	default:
		break;
	}
}
    47fe:	bc0c      	pop	{r2, r3}
    4800:	4690      	mov	r8, r2
    4802:	4699      	mov	r9, r3
    4804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4806:	3801      	subs	r0, #1
    4808:	b2c6      	uxtb	r6, r0
    480a:	1992      	adds	r2, r2, r6
    480c:	b2d4      	uxtb	r4, r2
			temp = gfx_mono_get_byte(page, x + length);
    480e:	4b09      	ldr	r3, [pc, #36]	; (4834 <gfx_mono_generic_draw_horizontal_line+0xc0>)
    4810:	4699      	mov	r9, r3
			temp &= ~pixelmask;
    4812:	43cf      	mvns	r7, r1
			gfx_mono_put_byte(page, x + length, temp);
    4814:	4b08      	ldr	r3, [pc, #32]	; (4838 <gfx_mono_generic_draw_horizontal_line+0xc4>)
    4816:	4698      	mov	r8, r3
			temp = gfx_mono_get_byte(page, x + length);
    4818:	0021      	movs	r1, r4
    481a:	0028      	movs	r0, r5
    481c:	47c8      	blx	r9
			temp &= ~pixelmask;
    481e:	4038      	ands	r0, r7
			gfx_mono_put_byte(page, x + length, temp);
    4820:	b2c2      	uxtb	r2, r0
    4822:	2300      	movs	r3, #0
    4824:	0021      	movs	r1, r4
    4826:	0028      	movs	r0, r5
    4828:	47c0      	blx	r8
    482a:	3c01      	subs	r4, #1
    482c:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
    482e:	42b4      	cmp	r4, r6
    4830:	d1f2      	bne.n	4818 <gfx_mono_generic_draw_horizontal_line+0xa4>
    4832:	e7e4      	b.n	47fe <gfx_mono_generic_draw_horizontal_line+0x8a>
    4834:	00004a99 	.word	0x00004a99
    4838:	00004991 	.word	0x00004991

0000483c <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
    483c:	b5f0      	push	{r4, r5, r6, r7, lr}
    483e:	b083      	sub	sp, #12
    4840:	9000      	str	r0, [sp, #0]
    4842:	9201      	str	r2, [sp, #4]
    4844:	aa08      	add	r2, sp, #32
    4846:	7817      	ldrb	r7, [r2, #0]
	if (height == 0) {
    4848:	2b00      	cmp	r3, #0
    484a:	d00d      	beq.n	4868 <gfx_mono_generic_draw_filled_rect+0x2c>
    484c:	3901      	subs	r1, #1
    484e:	b2ce      	uxtb	r6, r1
    4850:	199b      	adds	r3, r3, r6
    4852:	b2dc      	uxtb	r4, r3
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
    4854:	4d05      	ldr	r5, [pc, #20]	; (486c <gfx_mono_generic_draw_filled_rect+0x30>)
    4856:	003b      	movs	r3, r7
    4858:	9a01      	ldr	r2, [sp, #4]
    485a:	0021      	movs	r1, r4
    485c:	9800      	ldr	r0, [sp, #0]
    485e:	47a8      	blx	r5
    4860:	3c01      	subs	r4, #1
    4862:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
    4864:	42b4      	cmp	r4, r6
    4866:	d1f6      	bne.n	4856 <gfx_mono_generic_draw_filled_rect+0x1a>
	}
}
    4868:	b003      	add	sp, #12
    486a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    486c:	00004775 	.word	0x00004775

00004870 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    4870:	b5f0      	push	{r4, r5, r6, r7, lr}
    4872:	46de      	mov	lr, fp
    4874:	4657      	mov	r7, sl
    4876:	464e      	mov	r6, r9
    4878:	4645      	mov	r5, r8
    487a:	b5e0      	push	{r5, r6, r7, lr}
    487c:	b085      	sub	sp, #20
    487e:	0004      	movs	r4, r0
    4880:	4688      	mov	r8, r1
    4882:	0015      	movs	r5, r2
    4884:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    4886:	7a5b      	ldrb	r3, [r3, #9]
    4888:	465a      	mov	r2, fp
    488a:	7a12      	ldrb	r2, [r2, #8]
    488c:	2100      	movs	r1, #0
    488e:	9100      	str	r1, [sp, #0]
    4890:	0029      	movs	r1, r5
    4892:	4640      	mov	r0, r8
    4894:	4e28      	ldr	r6, [pc, #160]	; (4938 <gfx_mono_draw_char+0xc8>)
    4896:	47b0      	blx	r6
			GFX_PIXEL_CLR);

	switch (font->type) {
    4898:	465b      	mov	r3, fp
    489a:	781b      	ldrb	r3, [r3, #0]
    489c:	2b00      	cmp	r3, #0
    489e:	d006      	beq.n	48ae <gfx_mono_draw_char+0x3e>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    48a0:	b005      	add	sp, #20
    48a2:	bc3c      	pop	{r2, r3, r4, r5}
    48a4:	4690      	mov	r8, r2
    48a6:	4699      	mov	r9, r3
    48a8:	46a2      	mov	sl, r4
    48aa:	46ab      	mov	fp, r5
    48ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    48ae:	465b      	mov	r3, fp
    48b0:	7a1a      	ldrb	r2, [r3, #8]
    48b2:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    48b4:	0752      	lsls	r2, r2, #29
    48b6:	d000      	beq.n	48ba <gfx_mono_draw_char+0x4a>
		char_row_size++;
    48b8:	3301      	adds	r3, #1
	glyph_data_offset = char_row_size * font->height *
    48ba:	465a      	mov	r2, fp
    48bc:	7a52      	ldrb	r2, [r2, #9]
    48be:	4692      	mov	sl, r2
			((uint8_t)ch - font->first_char);
    48c0:	465a      	mov	r2, fp
    48c2:	7a97      	ldrb	r7, [r2, #10]
    48c4:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
    48c6:	4652      	mov	r2, sl
    48c8:	4357      	muls	r7, r2
    48ca:	435f      	muls	r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
    48cc:	b2bf      	uxth	r7, r7
    48ce:	465b      	mov	r3, fp
    48d0:	685b      	ldr	r3, [r3, #4]
    48d2:	469c      	mov	ip, r3
    48d4:	4467      	add	r7, ip
	gfx_coord_t inc_y = y;
    48d6:	9502      	str	r5, [sp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
    48d8:	4643      	mov	r3, r8
    48da:	9303      	str	r3, [sp, #12]
    48dc:	e020      	b.n	4920 <gfx_mono_draw_char+0xb0>
			if ((glyph_byte & 0x80)) {
    48de:	b26b      	sxtb	r3, r5
    48e0:	2b00      	cmp	r3, #0
    48e2:	db0d      	blt.n	4900 <gfx_mono_draw_char+0x90>
			inc_x += 1;
    48e4:	3401      	adds	r4, #1
    48e6:	b2e4      	uxtb	r4, r4
			glyph_byte <<= 1;
    48e8:	006d      	lsls	r5, r5, #1
    48ea:	b2ed      	uxtb	r5, r5
		for (i = 0; i < pixelsToDraw; i++) {
    48ec:	42a6      	cmp	r6, r4
    48ee:	d00d      	beq.n	490c <gfx_mono_draw_char+0x9c>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    48f0:	4643      	mov	r3, r8
    48f2:	1ae3      	subs	r3, r4, r3
    48f4:	464a      	mov	r2, r9
    48f6:	421a      	tst	r2, r3
    48f8:	d1f1      	bne.n	48de <gfx_mono_draw_char+0x6e>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    48fa:	783d      	ldrb	r5, [r7, #0]
				glyph_data++;
    48fc:	3701      	adds	r7, #1
    48fe:	e7ee      	b.n	48de <gfx_mono_draw_char+0x6e>
				gfx_mono_draw_pixel(inc_x, inc_y,
    4900:	2201      	movs	r2, #1
    4902:	9902      	ldr	r1, [sp, #8]
    4904:	0020      	movs	r0, r4
    4906:	4b0d      	ldr	r3, [pc, #52]	; (493c <gfx_mono_draw_char+0xcc>)
    4908:	4798      	blx	r3
    490a:	e7eb      	b.n	48e4 <gfx_mono_draw_char+0x74>
		inc_y += 1;
    490c:	9b02      	ldr	r3, [sp, #8]
    490e:	3301      	adds	r3, #1
    4910:	b2db      	uxtb	r3, r3
    4912:	9302      	str	r3, [sp, #8]
		rows_left--;
    4914:	4653      	mov	r3, sl
    4916:	3b01      	subs	r3, #1
    4918:	b2db      	uxtb	r3, r3
    491a:	469a      	mov	sl, r3
	} while (rows_left > 0);
    491c:	2b00      	cmp	r3, #0
    491e:	d0bf      	beq.n	48a0 <gfx_mono_draw_char+0x30>
		uint8_t pixelsToDraw = font->width;
    4920:	465b      	mov	r3, fp
    4922:	7a1e      	ldrb	r6, [r3, #8]
		for (i = 0; i < pixelsToDraw; i++) {
    4924:	2e00      	cmp	r6, #0
    4926:	d0f1      	beq.n	490c <gfx_mono_draw_char+0x9c>
    4928:	4446      	add	r6, r8
    492a:	b2f6      	uxtb	r6, r6
    492c:	9c03      	ldr	r4, [sp, #12]
    492e:	2500      	movs	r5, #0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    4930:	2307      	movs	r3, #7
    4932:	4699      	mov	r9, r3
    4934:	e7dc      	b.n	48f0 <gfx_mono_draw_char+0x80>
    4936:	46c0      	nop			; (mov r8, r8)
    4938:	0000483d 	.word	0x0000483d
    493c:	00004a31 	.word	0x00004a31

00004940 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    4940:	b5f0      	push	{r4, r5, r6, r7, lr}
    4942:	46c6      	mov	lr, r8
    4944:	b500      	push	{lr}
    4946:	b082      	sub	sp, #8
    4948:	0004      	movs	r4, r0
    494a:	4690      	mov	r8, r2
    494c:	001f      	movs	r7, r3
    494e:	000d      	movs	r5, r1

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    4950:	9101      	str	r1, [sp, #4]
    4952:	e009      	b.n	4968 <gfx_mono_draw_string+0x28>
			y += font->height + 1;
    4954:	7a7a      	ldrb	r2, [r7, #9]
    4956:	3201      	adds	r2, #1
    4958:	4442      	add	r2, r8
    495a:	b2d3      	uxtb	r3, r2
    495c:	4698      	mov	r8, r3
			x = start_of_string_position_x;
    495e:	9d01      	ldr	r5, [sp, #4]
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
			x += font->width;
		}
	} while (*(++str));
    4960:	3401      	adds	r4, #1
    4962:	7823      	ldrb	r3, [r4, #0]
    4964:	2b00      	cmp	r3, #0
    4966:	d00d      	beq.n	4984 <gfx_mono_draw_string+0x44>
		if (*str == '\n') {
    4968:	7820      	ldrb	r0, [r4, #0]
    496a:	280a      	cmp	r0, #10
    496c:	d0f2      	beq.n	4954 <gfx_mono_draw_string+0x14>
		} else if (*str == '\r') {
    496e:	280d      	cmp	r0, #13
    4970:	d0f6      	beq.n	4960 <gfx_mono_draw_string+0x20>
			gfx_mono_draw_char(*str, x, y, font);
    4972:	003b      	movs	r3, r7
    4974:	4642      	mov	r2, r8
    4976:	0029      	movs	r1, r5
    4978:	4e04      	ldr	r6, [pc, #16]	; (498c <gfx_mono_draw_string+0x4c>)
    497a:	47b0      	blx	r6
			x += font->width;
    497c:	7a3b      	ldrb	r3, [r7, #8]
    497e:	18ed      	adds	r5, r5, r3
    4980:	b2ed      	uxtb	r5, r5
    4982:	e7ed      	b.n	4960 <gfx_mono_draw_string+0x20>
}
    4984:	b002      	add	sp, #8
    4986:	bc04      	pop	{r2}
    4988:	4690      	mov	r8, r2
    498a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    498c:	00004871 	.word	0x00004871

00004990 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
    4990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4992:	0004      	movs	r4, r0
    4994:	000f      	movs	r7, r1
    4996:	0015      	movs	r5, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
    4998:	2b00      	cmp	r3, #0
    499a:	d103      	bne.n	49a4 <gfx_mono_ssd1306_put_byte+0x14>
    499c:	4b0d      	ldr	r3, [pc, #52]	; (49d4 <gfx_mono_ssd1306_put_byte+0x44>)
    499e:	4798      	blx	r3
    49a0:	42a8      	cmp	r0, r5
    49a2:	d015      	beq.n	49d0 <gfx_mono_ssd1306_put_byte+0x40>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
    49a4:	002a      	movs	r2, r5
    49a6:	0039      	movs	r1, r7
    49a8:	0020      	movs	r0, r4
    49aa:	4b0b      	ldr	r3, [pc, #44]	; (49d8 <gfx_mono_ssd1306_put_byte+0x48>)
    49ac:	4798      	blx	r3
	address &= 0x0F;
    49ae:	260f      	movs	r6, #15
    49b0:	4034      	ands	r4, r6
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
    49b2:	20b0      	movs	r0, #176	; 0xb0
    49b4:	4320      	orrs	r0, r4
    49b6:	4c09      	ldr	r4, [pc, #36]	; (49dc <gfx_mono_ssd1306_put_byte+0x4c>)
    49b8:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
    49ba:	0678      	lsls	r0, r7, #25
    49bc:	0f40      	lsrs	r0, r0, #29
    49be:	2310      	movs	r3, #16
    49c0:	4318      	orrs	r0, r3
    49c2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
    49c4:	0030      	movs	r0, r6
    49c6:	4038      	ands	r0, r7
    49c8:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
    49ca:	0028      	movs	r0, r5
    49cc:	4b04      	ldr	r3, [pc, #16]	; (49e0 <gfx_mono_ssd1306_put_byte+0x50>)
    49ce:	4798      	blx	r3
}
    49d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    49d2:	46c0      	nop			; (mov r8, r8)
    49d4:	00004765 	.word	0x00004765
    49d8:	00004755 	.word	0x00004755
    49dc:	00004461 	.word	0x00004461
    49e0:	00004665 	.word	0x00004665

000049e4 <gfx_mono_ssd1306_init>:
{
    49e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	gfx_mono_set_framebuffer(framebuffer);
    49e6:	480d      	ldr	r0, [pc, #52]	; (4a1c <gfx_mono_ssd1306_init+0x38>)
    49e8:	4b0d      	ldr	r3, [pc, #52]	; (4a20 <gfx_mono_ssd1306_init+0x3c>)
    49ea:	4798      	blx	r3
	ssd1306_init();
    49ec:	4b0d      	ldr	r3, [pc, #52]	; (4a24 <gfx_mono_ssd1306_init+0x40>)
    49ee:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
    49f0:	2040      	movs	r0, #64	; 0x40
    49f2:	4b0d      	ldr	r3, [pc, #52]	; (4a28 <gfx_mono_ssd1306_init+0x44>)
    49f4:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    49f6:	2500      	movs	r5, #0
{
    49f8:	2600      	movs	r6, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
    49fa:	4f0c      	ldr	r7, [pc, #48]	; (4a2c <gfx_mono_ssd1306_init+0x48>)
{
    49fc:	0034      	movs	r4, r6
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
    49fe:	2301      	movs	r3, #1
    4a00:	0032      	movs	r2, r6
    4a02:	0021      	movs	r1, r4
    4a04:	0028      	movs	r0, r5
    4a06:	47b8      	blx	r7
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
    4a08:	3401      	adds	r4, #1
    4a0a:	b2e4      	uxtb	r4, r4
    4a0c:	2c80      	cmp	r4, #128	; 0x80
    4a0e:	d1f6      	bne.n	49fe <gfx_mono_ssd1306_init+0x1a>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    4a10:	3501      	adds	r5, #1
    4a12:	b2ed      	uxtb	r5, r5
    4a14:	2d04      	cmp	r5, #4
    4a16:	d1f1      	bne.n	49fc <gfx_mono_ssd1306_init+0x18>
}
    4a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4a1a:	46c0      	nop			; (mov r8, r8)
    4a1c:	200000b0 	.word	0x200000b0
    4a20:	00004749 	.word	0x00004749
    4a24:	000044ad 	.word	0x000044ad
    4a28:	00004461 	.word	0x00004461
    4a2c:	00004991 	.word	0x00004991

00004a30 <gfx_mono_ssd1306_draw_pixel>:
{
    4a30:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a32:	46c6      	mov	lr, r8
    4a34:	b500      	push	{lr}
    4a36:	0004      	movs	r4, r0
    4a38:	0015      	movs	r5, r2
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
    4a3a:	b243      	sxtb	r3, r0
    4a3c:	2b00      	cmp	r3, #0
    4a3e:	db01      	blt.n	4a44 <gfx_mono_ssd1306_draw_pixel+0x14>
    4a40:	291f      	cmp	r1, #31
    4a42:	d902      	bls.n	4a4a <gfx_mono_ssd1306_draw_pixel+0x1a>
}
    4a44:	bc04      	pop	{r2}
    4a46:	4690      	mov	r8, r2
    4a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
    4a4a:	08cf      	lsrs	r7, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
    4a4c:	00fb      	lsls	r3, r7, #3
    4a4e:	1ac9      	subs	r1, r1, r3
    4a50:	2601      	movs	r6, #1
    4a52:	408e      	lsls	r6, r1
    4a54:	b2f3      	uxtb	r3, r6
    4a56:	4698      	mov	r8, r3
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
    4a58:	0001      	movs	r1, r0
    4a5a:	0038      	movs	r0, r7
    4a5c:	4b0c      	ldr	r3, [pc, #48]	; (4a90 <gfx_mono_ssd1306_draw_pixel+0x60>)
    4a5e:	4798      	blx	r3
    4a60:	0002      	movs	r2, r0
	switch (color) {
    4a62:	2d01      	cmp	r5, #1
    4a64:	d009      	beq.n	4a7a <gfx_mono_ssd1306_draw_pixel+0x4a>
    4a66:	2d00      	cmp	r5, #0
    4a68:	d00b      	beq.n	4a82 <gfx_mono_ssd1306_draw_pixel+0x52>
    4a6a:	2d02      	cmp	r5, #2
    4a6c:	d00c      	beq.n	4a88 <gfx_mono_ssd1306_draw_pixel+0x58>
	gfx_mono_put_byte(page, x, pixel_value);
    4a6e:	2300      	movs	r3, #0
    4a70:	0021      	movs	r1, r4
    4a72:	0038      	movs	r0, r7
    4a74:	4c07      	ldr	r4, [pc, #28]	; (4a94 <gfx_mono_ssd1306_draw_pixel+0x64>)
    4a76:	47a0      	blx	r4
    4a78:	e7e4      	b.n	4a44 <gfx_mono_ssd1306_draw_pixel+0x14>
		pixel_value |= pixel_mask;
    4a7a:	4643      	mov	r3, r8
    4a7c:	4303      	orrs	r3, r0
    4a7e:	b2da      	uxtb	r2, r3
		break;
    4a80:	e7f5      	b.n	4a6e <gfx_mono_ssd1306_draw_pixel+0x3e>
		pixel_value &= ~pixel_mask;
    4a82:	43b0      	bics	r0, r6
    4a84:	b2c2      	uxtb	r2, r0
		break;
    4a86:	e7f2      	b.n	4a6e <gfx_mono_ssd1306_draw_pixel+0x3e>
		pixel_value ^= pixel_mask;
    4a88:	4643      	mov	r3, r8
    4a8a:	4043      	eors	r3, r0
    4a8c:	b2da      	uxtb	r2, r3
		break;
    4a8e:	e7ee      	b.n	4a6e <gfx_mono_ssd1306_draw_pixel+0x3e>
    4a90:	00004765 	.word	0x00004765
    4a94:	00004991 	.word	0x00004991

00004a98 <gfx_mono_ssd1306_get_byte>:
{
    4a98:	b510      	push	{r4, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
    4a9a:	4b01      	ldr	r3, [pc, #4]	; (4aa0 <gfx_mono_ssd1306_get_byte+0x8>)
    4a9c:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
    4a9e:	bd10      	pop	{r4, pc}
    4aa0:	00004765 	.word	0x00004765

00004aa4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    4aa4:	4b0c      	ldr	r3, [pc, #48]	; (4ad8 <cpu_irq_enter_critical+0x34>)
    4aa6:	681b      	ldr	r3, [r3, #0]
    4aa8:	2b00      	cmp	r3, #0
    4aaa:	d106      	bne.n	4aba <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4aac:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    4ab0:	2b00      	cmp	r3, #0
    4ab2:	d007      	beq.n	4ac4 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    4ab4:	2200      	movs	r2, #0
    4ab6:	4b09      	ldr	r3, [pc, #36]	; (4adc <cpu_irq_enter_critical+0x38>)
    4ab8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    4aba:	4a07      	ldr	r2, [pc, #28]	; (4ad8 <cpu_irq_enter_critical+0x34>)
    4abc:	6813      	ldr	r3, [r2, #0]
    4abe:	3301      	adds	r3, #1
    4ac0:	6013      	str	r3, [r2, #0]
}
    4ac2:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    4ac4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    4ac6:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    4aca:	2200      	movs	r2, #0
    4acc:	4b04      	ldr	r3, [pc, #16]	; (4ae0 <cpu_irq_enter_critical+0x3c>)
    4ace:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    4ad0:	3201      	adds	r2, #1
    4ad2:	4b02      	ldr	r3, [pc, #8]	; (4adc <cpu_irq_enter_critical+0x38>)
    4ad4:	701a      	strb	r2, [r3, #0]
    4ad6:	e7f0      	b.n	4aba <cpu_irq_enter_critical+0x16>
    4ad8:	200002b0 	.word	0x200002b0
    4adc:	200002b4 	.word	0x200002b4
    4ae0:	20000014 	.word	0x20000014

00004ae4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4ae4:	4b08      	ldr	r3, [pc, #32]	; (4b08 <cpu_irq_leave_critical+0x24>)
    4ae6:	681a      	ldr	r2, [r3, #0]
    4ae8:	3a01      	subs	r2, #1
    4aea:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    4aec:	681b      	ldr	r3, [r3, #0]
    4aee:	2b00      	cmp	r3, #0
    4af0:	d109      	bne.n	4b06 <cpu_irq_leave_critical+0x22>
    4af2:	4b06      	ldr	r3, [pc, #24]	; (4b0c <cpu_irq_leave_critical+0x28>)
    4af4:	781b      	ldrb	r3, [r3, #0]
    4af6:	2b00      	cmp	r3, #0
    4af8:	d005      	beq.n	4b06 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    4afa:	2201      	movs	r2, #1
    4afc:	4b04      	ldr	r3, [pc, #16]	; (4b10 <cpu_irq_leave_critical+0x2c>)
    4afe:	701a      	strb	r2, [r3, #0]
    4b00:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4b04:	b662      	cpsie	i
	}
}
    4b06:	4770      	bx	lr
    4b08:	200002b0 	.word	0x200002b0
    4b0c:	200002b4 	.word	0x200002b4
    4b10:	20000014 	.word	0x20000014

00004b14 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    4b14:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b16:	46c6      	mov	lr, r8
    4b18:	b500      	push	{lr}
    4b1a:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
    4b1c:	ac01      	add	r4, sp, #4
    4b1e:	2501      	movs	r5, #1
    4b20:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    4b22:	2300      	movs	r3, #0
    4b24:	4698      	mov	r8, r3
    4b26:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4b28:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    4b2a:	0021      	movs	r1, r4
    4b2c:	2013      	movs	r0, #19
    4b2e:	4e12      	ldr	r6, [pc, #72]	; (4b78 <system_board_init+0x64>)
    4b30:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    4b32:	4f12      	ldr	r7, [pc, #72]	; (4b7c <system_board_init+0x68>)
    4b34:	2380      	movs	r3, #128	; 0x80
    4b36:	031b      	lsls	r3, r3, #12
    4b38:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4b3a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
    4b3c:	0021      	movs	r1, r4
    4b3e:	2012      	movs	r0, #18
    4b40:	47b0      	blx	r6
    4b42:	2380      	movs	r3, #128	; 0x80
    4b44:	02db      	lsls	r3, r3, #11
    4b46:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);
#ifdef RFSWITCH_ENABLE
	/* Configure RFSWITCH as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4b48:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(RF_SWITCH_PIN, &pin_conf);
    4b4a:	0021      	movs	r1, r4
    4b4c:	200d      	movs	r0, #13
    4b4e:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    4b50:	2380      	movs	r3, #128	; 0x80
    4b52:	019b      	lsls	r3, r3, #6
    4b54:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
#endif

#ifdef TCXO_ENABLE
	/* Configure TXPO PWR as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4b56:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(TCXO_PWR_PIN, &pin_conf);
    4b58:	0021      	movs	r1, r4
    4b5a:	2009      	movs	r0, #9
    4b5c:	47b0      	blx	r6
    4b5e:	2380      	movs	r3, #128	; 0x80
    4b60:	009b      	lsls	r3, r3, #2
    4b62:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    4b64:	4643      	mov	r3, r8
    4b66:	7023      	strb	r3, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    4b68:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    4b6a:	0021      	movs	r1, r4
    4b6c:	201c      	movs	r0, #28
    4b6e:	47b0      	blx	r6
		
}
    4b70:	b002      	add	sp, #8
    4b72:	bc04      	pop	{r2}
    4b74:	4690      	mov	r8, r2
    4b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b78:	00005155 	.word	0x00005155
    4b7c:	40002800 	.word	0x40002800

00004b80 <aes_get_config_defaults>:
		struct aes_config *const config)
{

	/* Sanity check arguments */
	Assert(config);
	config->encrypt_mode = AES_ENCRYPTION;
    4b80:	2301      	movs	r3, #1
    4b82:	7003      	strb	r3, [r0, #0]
	config->key_size = AES_KEY_SIZE_128;
    4b84:	2300      	movs	r3, #0
    4b86:	7043      	strb	r3, [r0, #1]
	config->start_mode = AES_MANUAL_START;
    4b88:	7083      	strb	r3, [r0, #2]
	config->opmode= AES_ECB_MODE;
    4b8a:	70c3      	strb	r3, [r0, #3]
	config->cfb_size = AES_CFB_SIZE_128;
    4b8c:	7103      	strb	r3, [r0, #4]
	config->ctype = AES_COUNTERMEASURE_TYPE_ALL;
    4b8e:	220f      	movs	r2, #15
    4b90:	7142      	strb	r2, [r0, #5]
	config->enable_xor_key = false;
    4b92:	7183      	strb	r3, [r0, #6]
	config->enable_key_gen = false;
    4b94:	71c3      	strb	r3, [r0, #7]
	config->lod = false;
    4b96:	7203      	strb	r3, [r0, #8]
}
    4b98:	4770      	bx	lr

00004b9a <aes_enable>:
 */
void aes_enable(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLA.reg |= AES_CTRLA_ENABLE;
    4b9a:	6802      	ldr	r2, [r0, #0]
    4b9c:	6813      	ldr	r3, [r2, #0]
    4b9e:	2102      	movs	r1, #2
    4ba0:	430b      	orrs	r3, r1
    4ba2:	6013      	str	r3, [r2, #0]

}
    4ba4:	4770      	bx	lr

00004ba6 <aes_disable>:
{
	Assert(module);
	Assert(module->hw);

	/* Disbale interrupt */
	module->hw->INTENCLR.reg = AES_INTENCLR_MASK;
    4ba6:	2303      	movs	r3, #3
    4ba8:	6802      	ldr	r2, [r0, #0]
    4baa:	7153      	strb	r3, [r2, #5]
	/* Clear interrupt flag */
	module->hw->INTFLAG.reg = AES_INTFLAG_MASK;
    4bac:	6802      	ldr	r2, [r0, #0]
    4bae:	71d3      	strb	r3, [r2, #7]

	module->hw->CTRLA.reg &= (~AES_CTRLA_ENABLE);
    4bb0:	6802      	ldr	r2, [r0, #0]
    4bb2:	6813      	ldr	r3, [r2, #0]
    4bb4:	2102      	movs	r1, #2
    4bb6:	438b      	bics	r3, r1
    4bb8:	6013      	str	r3, [r2, #0]
}
    4bba:	4770      	bx	lr

00004bbc <aes_set_config>:
 */
void aes_set_config(
		struct aes_module *const module,
		Aes *const hw,
		struct aes_config *const config)
{
    4bbc:	b570      	push	{r4, r5, r6, lr}
    4bbe:	0004      	movs	r4, r0
    4bc0:	000d      	movs	r5, r1
	/* Validate arguments. */
	Assert(hw);
	Assert(config);
	Assert(module);

	module->opmode = config->opmode;
    4bc2:	78d3      	ldrb	r3, [r2, #3]
    4bc4:	7103      	strb	r3, [r0, #4]
	module->hw = hw;
    4bc6:	6021      	str	r1, [r4, #0]
	module->key_size = config->key_size;
    4bc8:	7853      	ldrb	r3, [r2, #1]
    4bca:	7143      	strb	r3, [r0, #5]
	module->cfb_size = config->cfb_size;
    4bcc:	7913      	ldrb	r3, [r2, #4]
    4bce:	7183      	strb	r3, [r0, #6]

	ul_mode |= (config->encrypt_mode << AES_CTRLA_CIPHER_Pos)
    4bd0:	7813      	ldrb	r3, [r2, #0]
    4bd2:	029b      	lsls	r3, r3, #10
			 | (config->start_mode << AES_CTRLA_STARTMODE_Pos)
    4bd4:	7891      	ldrb	r1, [r2, #2]
    4bd6:	02c9      	lsls	r1, r1, #11
    4bd8:	430b      	orrs	r3, r1
			 | (config->key_size << AES_CTRLA_KEYSIZE_Pos)
    4bda:	7851      	ldrb	r1, [r2, #1]
    4bdc:	0209      	lsls	r1, r1, #8
    4bde:	430b      	orrs	r3, r1
			 | (config->opmode << AES_CTRLA_AESMODE_Pos)
    4be0:	78d1      	ldrb	r1, [r2, #3]
    4be2:	0089      	lsls	r1, r1, #2
    4be4:	430b      	orrs	r3, r1
			 | (config->cfb_size << AES_CTRLA_CFBS_Pos)
    4be6:	7911      	ldrb	r1, [r2, #4]
    4be8:	0149      	lsls	r1, r1, #5
    4bea:	430b      	orrs	r3, r1
			 | (AES_CTRLA_CTYPE(config->ctype))
			 | (config->enable_xor_key << AES_CTRLA_XORKEY_Pos)
    4bec:	7991      	ldrb	r1, [r2, #6]
    4bee:	0389      	lsls	r1, r1, #14
			 | (config->enable_key_gen << AES_CTRLA_KEYGEN_Pos)
    4bf0:	79d0      	ldrb	r0, [r2, #7]
    4bf2:	0340      	lsls	r0, r0, #13
			 | (config->lod << AES_CTRLA_LOD_Pos);
    4bf4:	4301      	orrs	r1, r0
    4bf6:	7a10      	ldrb	r0, [r2, #8]
    4bf8:	0300      	lsls	r0, r0, #12
    4bfa:	4301      	orrs	r1, r0
			 | (AES_CTRLA_CTYPE(config->ctype))
    4bfc:	7952      	ldrb	r2, [r2, #5]
    4bfe:	0412      	lsls	r2, r2, #16
    4c00:	20f0      	movs	r0, #240	; 0xf0
    4c02:	0300      	lsls	r0, r0, #12
    4c04:	4002      	ands	r2, r0
			 | (config->lod << AES_CTRLA_LOD_Pos);
    4c06:	430a      	orrs	r2, r1
    4c08:	4313      	orrs	r3, r2
    4c0a:	001e      	movs	r6, r3
	if (hw->CTRLA.reg & AES_CTRLA_ENABLE) {
    4c0c:	682b      	ldr	r3, [r5, #0]
    4c0e:	079b      	lsls	r3, r3, #30
    4c10:	d401      	bmi.n	4c16 <aes_set_config+0x5a>
		aes_disable(module);
		hw->CTRLA.reg = ul_mode;
		aes_enable(module);
	} else {
		hw->CTRLA.reg = ul_mode;
    4c12:	602e      	str	r6, [r5, #0]
	}
}
    4c14:	bd70      	pop	{r4, r5, r6, pc}
		aes_disable(module);
    4c16:	0020      	movs	r0, r4
    4c18:	4b03      	ldr	r3, [pc, #12]	; (4c28 <aes_set_config+0x6c>)
    4c1a:	4798      	blx	r3
		hw->CTRLA.reg = ul_mode;
    4c1c:	602e      	str	r6, [r5, #0]
		aes_enable(module);
    4c1e:	0020      	movs	r0, r4
    4c20:	4b02      	ldr	r3, [pc, #8]	; (4c2c <aes_set_config+0x70>)
    4c22:	4798      	blx	r3
    4c24:	e7f6      	b.n	4c14 <aes_set_config+0x58>
    4c26:	46c0      	nop			; (mov r8, r8)
    4c28:	00004ba7 	.word	0x00004ba7
    4c2c:	00004b9b 	.word	0x00004b9b

00004c30 <aes_init>:
{
    4c30:	b570      	push	{r4, r5, r6, lr}
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    4c32:	4c05      	ldr	r4, [pc, #20]	; (4c48 <aes_init+0x18>)
    4c34:	69e5      	ldr	r5, [r4, #28]
    4c36:	2380      	movs	r3, #128	; 0x80
    4c38:	019b      	lsls	r3, r3, #6
    4c3a:	432b      	orrs	r3, r5
    4c3c:	61e3      	str	r3, [r4, #28]
	hw->CTRLA.reg = AES_CTRLA_SWRST;
    4c3e:	2301      	movs	r3, #1
    4c40:	600b      	str	r3, [r1, #0]
	aes_set_config(module,hw, config);
    4c42:	4b02      	ldr	r3, [pc, #8]	; (4c4c <aes_init+0x1c>)
    4c44:	4798      	blx	r3
}
    4c46:	bd70      	pop	{r4, r5, r6, pc}
    4c48:	40000400 	.word	0x40000400
    4c4c:	00004bbd 	.word	0x00004bbd

00004c50 <aes_write_key>:
 * \note The key size depends on the current AES configuration.
 */
void aes_write_key(
		struct aes_module *const module,
		const uint32_t *key)
{
    4c50:	b570      	push	{r4, r5, r6, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(key);

	switch (module->key_size) {
    4c52:	7943      	ldrb	r3, [r0, #5]
    4c54:	2b01      	cmp	r3, #1
    4c56:	d005      	beq.n	4c64 <aes_write_key+0x14>
    4c58:	2b00      	cmp	r3, #0
    4c5a:	d010      	beq.n	4c7e <aes_write_key+0x2e>
    4c5c:	2b02      	cmp	r3, #2
    4c5e:	d10d      	bne.n	4c7c <aes_write_key+0x2c>
	case AES_KEY_SIZE_192:
		key_length = 6;
		break;

	case AES_KEY_SIZE_256:
		key_length = 8;
    4c60:	2508      	movs	r5, #8
    4c62:	e000      	b.n	4c66 <aes_write_key+0x16>
		key_length = 6;
    4c64:	2506      	movs	r5, #6
{
    4c66:	2300      	movs	r3, #0
	default:
		break;
	}

	for (i = 0; i < key_length; i++) {
		module->hw->KEYWORD[i].reg = *key;
    4c68:	c910      	ldmia	r1!, {r4}
    4c6a:	1c9a      	adds	r2, r3, #2
    4c6c:	0092      	lsls	r2, r2, #2
    4c6e:	6806      	ldr	r6, [r0, #0]
    4c70:	46b4      	mov	ip, r6
    4c72:	4462      	add	r2, ip
    4c74:	6054      	str	r4, [r2, #4]
	for (i = 0; i < key_length; i++) {
    4c76:	3301      	adds	r3, #1
    4c78:	42ab      	cmp	r3, r5
    4c7a:	d3f5      	bcc.n	4c68 <aes_write_key+0x18>
		key++;
	}
}
    4c7c:	bd70      	pop	{r4, r5, r6, pc}
		key_length = 4;
    4c7e:	2504      	movs	r5, #4
    4c80:	e7f1      	b.n	4c66 <aes_write_key+0x16>
    4c82:	Address 0x00004c82 is out of bounds.


00004c84 <aes_write_input_data>:
 * \param[in] input_data_buffer Pointer to an input data buffer
 */
void aes_write_input_data(
		struct aes_module *const module,
		const uint32_t *input_data_buffer)
{
    4c84:	b510      	push	{r4, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);;
	Assert(input_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    4c86:	2300      	movs	r3, #0
    4c88:	6802      	ldr	r2, [r0, #0]
    4c8a:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
    4c8c:	4b0f      	ldr	r3, [pc, #60]	; (4ccc <aes_write_input_data+0x48>)
    4c8e:	6842      	ldr	r2, [r0, #4]
    4c90:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
    4c92:	4a0f      	ldr	r2, [pc, #60]	; (4cd0 <aes_write_input_data+0x4c>)
    4c94:	4293      	cmp	r3, r2
    4c96:	d00a      	beq.n	4cae <aes_write_input_data+0x2a>
		for (i = 0; i < 2; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
			input_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
    4c98:	7903      	ldrb	r3, [r0, #4]
    4c9a:	2b03      	cmp	r3, #3
    4c9c:	d00e      	beq.n	4cbc <aes_write_input_data+0x38>
    4c9e:	000c      	movs	r4, r1
    4ca0:	3410      	adds	r4, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		module->hw->INDATA.reg = *input_data_buffer;
	} else {
		for (i = 0; i < 4; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
    4ca2:	6803      	ldr	r3, [r0, #0]
    4ca4:	c904      	ldmia	r1!, {r2}
    4ca6:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < 4; i++) {
    4ca8:	428c      	cmp	r4, r1
    4caa:	d1fa      	bne.n	4ca2 <aes_write_input_data+0x1e>
			input_data_buffer++;
		}
	}
}
    4cac:	bd10      	pop	{r4, pc}
			module->hw->INDATA.reg = *input_data_buffer;
    4cae:	6803      	ldr	r3, [r0, #0]
    4cb0:	680a      	ldr	r2, [r1, #0]
    4cb2:	639a      	str	r2, [r3, #56]	; 0x38
    4cb4:	6803      	ldr	r3, [r0, #0]
    4cb6:	684a      	ldr	r2, [r1, #4]
    4cb8:	639a      	str	r2, [r3, #56]	; 0x38
    4cba:	e7f7      	b.n	4cac <aes_write_input_data+0x28>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    4cbc:	7983      	ldrb	r3, [r0, #6]
    4cbe:	3b02      	subs	r3, #2
    4cc0:	2b01      	cmp	r3, #1
    4cc2:	d8ec      	bhi.n	4c9e <aes_write_input_data+0x1a>
		module->hw->INDATA.reg = *input_data_buffer;
    4cc4:	6803      	ldr	r3, [r0, #0]
    4cc6:	680a      	ldr	r2, [r1, #0]
    4cc8:	639a      	str	r2, [r3, #56]	; 0x38
    4cca:	e7ef      	b.n	4cac <aes_write_input_data+0x28>
    4ccc:	00ff00ff 	.word	0x00ff00ff
    4cd0:	00010003 	.word	0x00010003

00004cd4 <aes_read_output_data>:
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(output_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    4cd4:	2300      	movs	r3, #0
    4cd6:	6802      	ldr	r2, [r0, #0]
    4cd8:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
    4cda:	4b10      	ldr	r3, [pc, #64]	; (4d1c <aes_read_output_data+0x48>)
    4cdc:	6842      	ldr	r2, [r0, #4]
    4cde:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
    4ce0:	4a0f      	ldr	r2, [pc, #60]	; (4d20 <aes_read_output_data+0x4c>)
    4ce2:	4293      	cmp	r3, r2
    4ce4:	d00a      	beq.n	4cfc <aes_read_output_data+0x28>
		for (i = 0; i < 2; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
			output_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
    4ce6:	7903      	ldrb	r3, [r0, #4]
    4ce8:	2b03      	cmp	r3, #3
    4cea:	d00e      	beq.n	4d0a <aes_read_output_data+0x36>
    4cec:	000a      	movs	r2, r1
    4cee:	3210      	adds	r2, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		*output_data_buffer = module->hw->INDATA.reg;
	} else {
		for (i = 0; i < 4; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
    4cf0:	6803      	ldr	r3, [r0, #0]
    4cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4cf4:	c108      	stmia	r1!, {r3}
		for (i = 0; i < 4; i++) {
    4cf6:	428a      	cmp	r2, r1
    4cf8:	d1fa      	bne.n	4cf0 <aes_read_output_data+0x1c>
			output_data_buffer++;
		}
	}
}
    4cfa:	4770      	bx	lr
			*output_data_buffer = module->hw->INDATA.reg;
    4cfc:	6803      	ldr	r3, [r0, #0]
    4cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4d00:	600b      	str	r3, [r1, #0]
    4d02:	6803      	ldr	r3, [r0, #0]
    4d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4d06:	604b      	str	r3, [r1, #4]
    4d08:	e7f7      	b.n	4cfa <aes_read_output_data+0x26>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    4d0a:	7983      	ldrb	r3, [r0, #6]
    4d0c:	3b02      	subs	r3, #2
    4d0e:	2b01      	cmp	r3, #1
    4d10:	d8ec      	bhi.n	4cec <aes_read_output_data+0x18>
		*output_data_buffer = module->hw->INDATA.reg;
    4d12:	6803      	ldr	r3, [r0, #0]
    4d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4d16:	600b      	str	r3, [r1, #0]
    4d18:	e7ef      	b.n	4cfa <aes_read_output_data+0x26>
    4d1a:	46c0      	nop			; (mov r8, r8)
    4d1c:	00ff00ff 	.word	0x00ff00ff
    4d20:	00010003 	.word	0x00010003

00004d24 <AES_Handler>:

/**
* \internal The AES interrupt handler.
*/
void AES_Handler(void)
{
    4d24:	b510      	push	{r4, lr}
	uint32_t status = AES->INTFLAG.reg;
    4d26:	4b0c      	ldr	r3, [pc, #48]	; (4d58 <AES_Handler+0x34>)
    4d28:	79dc      	ldrb	r4, [r3, #7]
    4d2a:	b2e4      	uxtb	r4, r4

	if (status & AES_INTFLAG_ENCCMP) {
    4d2c:	07e3      	lsls	r3, r4, #31
    4d2e:	d507      	bpl.n	4d40 <AES_Handler+0x1c>
		if (aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]) {
    4d30:	4b0a      	ldr	r3, [pc, #40]	; (4d5c <AES_Handler+0x38>)
    4d32:	681b      	ldr	r3, [r3, #0]
    4d34:	2b00      	cmp	r3, #0
    4d36:	d00d      	beq.n	4d54 <AES_Handler+0x30>
			AES->INTFLAG.reg = AES_INTFLAG_ENCCMP;
    4d38:	2101      	movs	r1, #1
    4d3a:	4a07      	ldr	r2, [pc, #28]	; (4d58 <AES_Handler+0x34>)
    4d3c:	71d1      	strb	r1, [r2, #7]
			aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]();
    4d3e:	4798      	blx	r3
		}
	}

	if (status & AES_INTFLAG_GFMCMP) {
    4d40:	07a3      	lsls	r3, r4, #30
    4d42:	d507      	bpl.n	4d54 <AES_Handler+0x30>
		if (aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]) {
    4d44:	4b05      	ldr	r3, [pc, #20]	; (4d5c <AES_Handler+0x38>)
    4d46:	681b      	ldr	r3, [r3, #0]
    4d48:	2b00      	cmp	r3, #0
    4d4a:	d003      	beq.n	4d54 <AES_Handler+0x30>
			AES->INTFLAG.reg = AES_INTFLAG_GFMCMP;
    4d4c:	2102      	movs	r1, #2
    4d4e:	4a02      	ldr	r2, [pc, #8]	; (4d58 <AES_Handler+0x34>)
    4d50:	71d1      	strb	r1, [r2, #7]
			aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]();
    4d52:	4798      	blx	r3
		}
	}
}
    4d54:	bd10      	pop	{r4, pc}
    4d56:	46c0      	nop			; (mov r8, r8)
    4d58:	42003400 	.word	0x42003400
    4d5c:	200002b8 	.word	0x200002b8

00004d60 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4d60:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    4d62:	2a00      	cmp	r2, #0
    4d64:	d001      	beq.n	4d6a <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    4d66:	0018      	movs	r0, r3
    4d68:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    4d6a:	008b      	lsls	r3, r1, #2
    4d6c:	4a06      	ldr	r2, [pc, #24]	; (4d88 <extint_register_callback+0x28>)
    4d6e:	589b      	ldr	r3, [r3, r2]
    4d70:	2b00      	cmp	r3, #0
    4d72:	d003      	beq.n	4d7c <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    4d74:	4283      	cmp	r3, r0
    4d76:	d005      	beq.n	4d84 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    4d78:	231d      	movs	r3, #29
    4d7a:	e7f4      	b.n	4d66 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    4d7c:	0089      	lsls	r1, r1, #2
    4d7e:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    4d80:	2300      	movs	r3, #0
    4d82:	e7f0      	b.n	4d66 <extint_register_callback+0x6>
		return STATUS_OK;
    4d84:	2300      	movs	r3, #0
    4d86:	e7ee      	b.n	4d66 <extint_register_callback+0x6>
    4d88:	200020ac 	.word	0x200020ac

00004d8c <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4d8c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    4d8e:	2900      	cmp	r1, #0
    4d90:	d001      	beq.n	4d96 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    4d92:	0018      	movs	r0, r3
    4d94:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    4d96:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    4d98:	281f      	cmp	r0, #31
    4d9a:	d800      	bhi.n	4d9e <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    4d9c:	4a02      	ldr	r2, [pc, #8]	; (4da8 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    4d9e:	2301      	movs	r3, #1
    4da0:	4083      	lsls	r3, r0
    4da2:	6113      	str	r3, [r2, #16]
	return STATUS_OK;
    4da4:	2300      	movs	r3, #0
    4da6:	e7f4      	b.n	4d92 <extint_chan_enable_callback+0x6>
    4da8:	40002400 	.word	0x40002400

00004dac <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    4dac:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4dae:	2200      	movs	r2, #0
    4db0:	4b10      	ldr	r3, [pc, #64]	; (4df4 <EIC_Handler+0x48>)
    4db2:	701a      	strb	r2, [r3, #0]
    4db4:	2300      	movs	r3, #0
    4db6:	4910      	ldr	r1, [pc, #64]	; (4df8 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    4db8:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4dba:	4e10      	ldr	r6, [pc, #64]	; (4dfc <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4dbc:	4c0d      	ldr	r4, [pc, #52]	; (4df4 <EIC_Handler+0x48>)
    4dbe:	e00a      	b.n	4dd6 <EIC_Handler+0x2a>
		return eics[eic_index];
    4dc0:	490d      	ldr	r1, [pc, #52]	; (4df8 <EIC_Handler+0x4c>)
    4dc2:	e008      	b.n	4dd6 <EIC_Handler+0x2a>
    4dc4:	7823      	ldrb	r3, [r4, #0]
    4dc6:	3301      	adds	r3, #1
    4dc8:	b2db      	uxtb	r3, r3
    4dca:	7023      	strb	r3, [r4, #0]
    4dcc:	2b0f      	cmp	r3, #15
    4dce:	d810      	bhi.n	4df2 <EIC_Handler+0x46>
		return NULL;
    4dd0:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    4dd2:	2b1f      	cmp	r3, #31
    4dd4:	d9f4      	bls.n	4dc0 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    4dd6:	0028      	movs	r0, r5
    4dd8:	4018      	ands	r0, r3
    4dda:	2201      	movs	r2, #1
    4ddc:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    4dde:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    4de0:	4210      	tst	r0, r2
    4de2:	d0ef      	beq.n	4dc4 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    4de4:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4de6:	009b      	lsls	r3, r3, #2
    4de8:	599b      	ldr	r3, [r3, r6]
    4dea:	2b00      	cmp	r3, #0
    4dec:	d0ea      	beq.n	4dc4 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    4dee:	4798      	blx	r3
    4df0:	e7e8      	b.n	4dc4 <EIC_Handler+0x18>
			}
		}
	}
}
    4df2:	bd70      	pop	{r4, r5, r6, pc}
    4df4:	200020ab 	.word	0x200020ab
    4df8:	40002400 	.word	0x40002400
    4dfc:	200020ac 	.word	0x200020ac

00004e00 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4e00:	4a06      	ldr	r2, [pc, #24]	; (4e1c <_extint_enable+0x1c>)
    4e02:	7813      	ldrb	r3, [r2, #0]
    4e04:	2102      	movs	r1, #2
    4e06:	430b      	orrs	r3, r1
    4e08:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4e0a:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4e0c:	6853      	ldr	r3, [r2, #4]
    4e0e:	4219      	tst	r1, r3
    4e10:	d1fc      	bne.n	4e0c <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4e12:	6853      	ldr	r3, [r2, #4]
    4e14:	4218      	tst	r0, r3
    4e16:	d1f9      	bne.n	4e0c <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    4e18:	4770      	bx	lr
    4e1a:	46c0      	nop			; (mov r8, r8)
    4e1c:	40002400 	.word	0x40002400

00004e20 <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    4e20:	4a06      	ldr	r2, [pc, #24]	; (4e3c <_extint_disable+0x1c>)
    4e22:	7813      	ldrb	r3, [r2, #0]
    4e24:	2102      	movs	r1, #2
    4e26:	438b      	bics	r3, r1
    4e28:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4e2a:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4e2c:	6853      	ldr	r3, [r2, #4]
    4e2e:	4219      	tst	r1, r3
    4e30:	d1fc      	bne.n	4e2c <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4e32:	6853      	ldr	r3, [r2, #4]
    4e34:	4218      	tst	r0, r3
    4e36:	d1f9      	bne.n	4e2c <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    4e38:	4770      	bx	lr
    4e3a:	46c0      	nop			; (mov r8, r8)
    4e3c:	40002400 	.word	0x40002400

00004e40 <_system_extint_init>:
{
    4e40:	b510      	push	{r4, lr}
			MCLK->APBAMASK.reg |= mask;
    4e42:	4a12      	ldr	r2, [pc, #72]	; (4e8c <_system_extint_init+0x4c>)
    4e44:	6951      	ldr	r1, [r2, #20]
    4e46:	2380      	movs	r3, #128	; 0x80
    4e48:	009b      	lsls	r3, r3, #2
    4e4a:	430b      	orrs	r3, r1
    4e4c:	6153      	str	r3, [r2, #20]
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    4e4e:	4a10      	ldr	r2, [pc, #64]	; (4e90 <_system_extint_init+0x50>)
    4e50:	7813      	ldrb	r3, [r2, #0]
    4e52:	2101      	movs	r1, #1
    4e54:	430b      	orrs	r3, r1
    4e56:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4e58:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4e5a:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4e5c:	6853      	ldr	r3, [r2, #4]
    4e5e:	4219      	tst	r1, r3
    4e60:	d1fc      	bne.n	4e5c <_system_extint_init+0x1c>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4e62:	6853      	ldr	r3, [r2, #4]
    4e64:	4218      	tst	r0, r3
    4e66:	d1f9      	bne.n	4e5c <_system_extint_init+0x1c>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_ULP32K;
    4e68:	4a09      	ldr	r2, [pc, #36]	; (4e90 <_system_extint_init+0x50>)
    4e6a:	7813      	ldrb	r3, [r2, #0]
    4e6c:	2110      	movs	r1, #16
    4e6e:	430b      	orrs	r3, r1
    4e70:	7013      	strb	r3, [r2, #0]
    4e72:	4b08      	ldr	r3, [pc, #32]	; (4e94 <_system_extint_init+0x54>)
    4e74:	0019      	movs	r1, r3
    4e76:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    4e78:	2200      	movs	r2, #0
    4e7a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4e7c:	428b      	cmp	r3, r1
    4e7e:	d1fc      	bne.n	4e7a <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4e80:	2208      	movs	r2, #8
    4e82:	4b05      	ldr	r3, [pc, #20]	; (4e98 <_system_extint_init+0x58>)
    4e84:	601a      	str	r2, [r3, #0]
	_extint_enable();
    4e86:	4b05      	ldr	r3, [pc, #20]	; (4e9c <_system_extint_init+0x5c>)
    4e88:	4798      	blx	r3
}
    4e8a:	bd10      	pop	{r4, pc}
    4e8c:	40000400 	.word	0x40000400
    4e90:	40002400 	.word	0x40002400
    4e94:	200020ac 	.word	0x200020ac
    4e98:	e000e100 	.word	0xe000e100
    4e9c:	00004e01 	.word	0x00004e01

00004ea0 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    4ea0:	2300      	movs	r3, #0
    4ea2:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    4ea4:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    4ea6:	2201      	movs	r2, #1
    4ea8:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
    4eaa:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    4eac:	3201      	adds	r2, #1
    4eae:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
    4eb0:	7243      	strb	r3, [r0, #9]
}
    4eb2:	4770      	bx	lr

00004eb4 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    4eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4eb6:	b083      	sub	sp, #12
    4eb8:	0005      	movs	r5, r0
    4eba:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
    4ebc:	4b1c      	ldr	r3, [pc, #112]	; (4f30 <extint_chan_set_config+0x7c>)
    4ebe:	4798      	blx	r3
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4ec0:	a901      	add	r1, sp, #4
    4ec2:	2300      	movs	r3, #0
    4ec4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    4ec6:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    4ec8:	7923      	ldrb	r3, [r4, #4]
    4eca:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    4ecc:	7a23      	ldrb	r3, [r4, #8]
    4ece:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    4ed0:	7820      	ldrb	r0, [r4, #0]
    4ed2:	4b18      	ldr	r3, [pc, #96]	; (4f34 <extint_chan_set_config+0x80>)
    4ed4:	4798      	blx	r3
		return NULL;
    4ed6:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    4ed8:	2d1f      	cmp	r5, #31
    4eda:	d800      	bhi.n	4ede <extint_chan_set_config+0x2a>
		return eics[eic_index];
    4edc:	4916      	ldr	r1, [pc, #88]	; (4f38 <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    4ede:	2207      	movs	r2, #7
    4ee0:	402a      	ands	r2, r5
    4ee2:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    4ee4:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    4ee6:	7aa3      	ldrb	r3, [r4, #10]
    4ee8:	2b00      	cmp	r3, #0
    4eea:	d001      	beq.n	4ef0 <extint_chan_set_config+0x3c>
    4eec:	2308      	movs	r3, #8
    4eee:	431f      	orrs	r7, r3
    4ef0:	08eb      	lsrs	r3, r5, #3
    4ef2:	009b      	lsls	r3, r3, #2
    4ef4:	18cb      	adds	r3, r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    4ef6:	69d8      	ldr	r0, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4ef8:	260f      	movs	r6, #15
    4efa:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    4efc:	43b0      	bics	r0, r6
			(new_config << config_pos);
    4efe:	4097      	lsls	r7, r2
    4f00:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4f02:	4302      	orrs	r2, r0
		= (EIC_module->CONFIG[channel / 8].reg &
    4f04:	61da      	str	r2, [r3, #28]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
    4f06:	7a63      	ldrb	r3, [r4, #9]
    4f08:	2b00      	cmp	r3, #0
    4f0a:	d10b      	bne.n	4f24 <extint_chan_set_config+0x70>
		EIC_module->ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
    4f0c:	698a      	ldr	r2, [r1, #24]
    4f0e:	2301      	movs	r3, #1
    4f10:	40ab      	lsls	r3, r5
    4f12:	43db      	mvns	r3, r3
    4f14:	041b      	lsls	r3, r3, #16
    4f16:	0c1b      	lsrs	r3, r3, #16
    4f18:	4013      	ands	r3, r2
    4f1a:	618b      	str	r3, [r1, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
    4f1c:	4b07      	ldr	r3, [pc, #28]	; (4f3c <extint_chan_set_config+0x88>)
    4f1e:	4798      	blx	r3
}
    4f20:	b003      	add	sp, #12
    4f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->ASYNCH.reg |= (1UL << channel);
    4f24:	698a      	ldr	r2, [r1, #24]
    4f26:	2301      	movs	r3, #1
    4f28:	40ab      	lsls	r3, r5
    4f2a:	4313      	orrs	r3, r2
    4f2c:	618b      	str	r3, [r1, #24]
    4f2e:	e7f5      	b.n	4f1c <extint_chan_set_config+0x68>
    4f30:	00004e21 	.word	0x00004e21
    4f34:	00007191 	.word	0x00007191
    4f38:	40002400 	.word	0x40002400
    4f3c:	00004e01 	.word	0x00004e01

00004f40 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    4f40:	b530      	push	{r4, r5, lr}
    4f42:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    4f44:	4a25      	ldr	r2, [pc, #148]	; (4fdc <nvm_execute_command+0x9c>)
    4f46:	8810      	ldrh	r0, [r2, #0]
    4f48:	8853      	ldrh	r3, [r2, #2]
    4f4a:	4343      	muls	r3, r0
    4f4c:	428b      	cmp	r3, r1
    4f4e:	d20b      	bcs.n	4f68 <nvm_execute_command+0x28>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    4f50:	2280      	movs	r2, #128	; 0x80
    4f52:	0192      	lsls	r2, r2, #6
    4f54:	4b22      	ldr	r3, [pc, #136]	; (4fe0 <nvm_execute_command+0xa0>)
    4f56:	18cb      	adds	r3, r1, r3
    4f58:	4293      	cmp	r3, r2
    4f5a:	d905      	bls.n	4f68 <nvm_execute_command+0x28>
#ifdef FEATURE_NVM_RWWEE
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4f5c:	4a21      	ldr	r2, [pc, #132]	; (4fe4 <nvm_execute_command+0xa4>)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4f5e:	2018      	movs	r0, #24
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4f60:	4b21      	ldr	r3, [pc, #132]	; (4fe8 <nvm_execute_command+0xa8>)
    4f62:	18cb      	adds	r3, r1, r3
    4f64:	4293      	cmp	r3, r2
    4f66:	d80e      	bhi.n	4f86 <nvm_execute_command+0x46>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    4f68:	4b20      	ldr	r3, [pc, #128]	; (4fec <nvm_execute_command+0xac>)
    4f6a:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    4f6c:	2280      	movs	r2, #128	; 0x80
    4f6e:	02d2      	lsls	r2, r2, #11
    4f70:	432a      	orrs	r2, r5
    4f72:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4f74:	2220      	movs	r2, #32
    4f76:	32ff      	adds	r2, #255	; 0xff
    4f78:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    4f7a:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    4f7c:	07db      	lsls	r3, r3, #31
    4f7e:	d403      	bmi.n	4f88 <nvm_execute_command+0x48>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    4f80:	4b1a      	ldr	r3, [pc, #104]	; (4fec <nvm_execute_command+0xac>)
    4f82:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
    4f84:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    4f86:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    4f88:	2c45      	cmp	r4, #69	; 0x45
    4f8a:	d822      	bhi.n	4fd2 <nvm_execute_command+0x92>
    4f8c:	00a3      	lsls	r3, r4, #2
    4f8e:	4a18      	ldr	r2, [pc, #96]	; (4ff0 <nvm_execute_command+0xb0>)
    4f90:	58d3      	ldr	r3, [r2, r3]
    4f92:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    4f94:	4b15      	ldr	r3, [pc, #84]	; (4fec <nvm_execute_command+0xac>)
    4f96:	8b1b      	ldrh	r3, [r3, #24]
    4f98:	05db      	lsls	r3, r3, #23
    4f9a:	d503      	bpl.n	4fa4 <nvm_execute_command+0x64>
				nvm_module->CTRLB.reg = ctrlb_bak;
    4f9c:	4b13      	ldr	r3, [pc, #76]	; (4fec <nvm_execute_command+0xac>)
    4f9e:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
    4fa0:	2010      	movs	r0, #16
    4fa2:	e7f0      	b.n	4f86 <nvm_execute_command+0x46>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    4fa4:	0889      	lsrs	r1, r1, #2
    4fa6:	0049      	lsls	r1, r1, #1
    4fa8:	4b10      	ldr	r3, [pc, #64]	; (4fec <nvm_execute_command+0xac>)
    4faa:	61d9      	str	r1, [r3, #28]
			break;
    4fac:	e003      	b.n	4fb6 <nvm_execute_command+0x76>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    4fae:	0889      	lsrs	r1, r1, #2
    4fb0:	0049      	lsls	r1, r1, #1
    4fb2:	4b0e      	ldr	r3, [pc, #56]	; (4fec <nvm_execute_command+0xac>)
    4fb4:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    4fb6:	20a5      	movs	r0, #165	; 0xa5
    4fb8:	0200      	lsls	r0, r0, #8
    4fba:	4304      	orrs	r4, r0
    4fbc:	4b0b      	ldr	r3, [pc, #44]	; (4fec <nvm_execute_command+0xac>)
    4fbe:	801c      	strh	r4, [r3, #0]
    4fc0:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    4fc2:	2201      	movs	r2, #1
    4fc4:	7d0b      	ldrb	r3, [r1, #20]
    4fc6:	4213      	tst	r3, r2
    4fc8:	d0fc      	beq.n	4fc4 <nvm_execute_command+0x84>
	nvm_module->CTRLB.reg = ctrlb_bak;
    4fca:	4b08      	ldr	r3, [pc, #32]	; (4fec <nvm_execute_command+0xac>)
    4fcc:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
    4fce:	2000      	movs	r0, #0
    4fd0:	e7d9      	b.n	4f86 <nvm_execute_command+0x46>
			nvm_module->CTRLB.reg = ctrlb_bak;
    4fd2:	4b06      	ldr	r3, [pc, #24]	; (4fec <nvm_execute_command+0xac>)
    4fd4:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    4fd6:	2017      	movs	r0, #23
    4fd8:	e7d5      	b.n	4f86 <nvm_execute_command+0x46>
    4fda:	46c0      	nop			; (mov r8, r8)
    4fdc:	200002c0 	.word	0x200002c0
    4fe0:	ff7fc000 	.word	0xff7fc000
    4fe4:	00001fff 	.word	0x00001fff
    4fe8:	ffc00000 	.word	0xffc00000
    4fec:	41004000 	.word	0x41004000
    4ff0:	00016ee8 	.word	0x00016ee8

00004ff4 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    4ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    4ff6:	4b2f      	ldr	r3, [pc, #188]	; (50b4 <nvm_write_buffer+0xc0>)
    4ff8:	881c      	ldrh	r4, [r3, #0]
    4ffa:	885b      	ldrh	r3, [r3, #2]
    4ffc:	4363      	muls	r3, r4
	if (destination_address >
    4ffe:	4283      	cmp	r3, r0
    5000:	d207      	bcs.n	5012 <nvm_write_buffer+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    5002:	4e2d      	ldr	r6, [pc, #180]	; (50b8 <nvm_write_buffer+0xc4>)
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    5004:	2518      	movs	r5, #24
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    5006:	4b2d      	ldr	r3, [pc, #180]	; (50bc <nvm_write_buffer+0xc8>)
    5008:	18c3      	adds	r3, r0, r3
    500a:	42b3      	cmp	r3, r6
    500c:	d806      	bhi.n	501c <nvm_write_buffer+0x28>
		}
		is_rww_eeprom = true;
    500e:	2601      	movs	r6, #1
    5010:	e000      	b.n	5014 <nvm_write_buffer+0x20>
	bool is_rww_eeprom = false;
    5012:	2600      	movs	r6, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    5014:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
    5016:	2518      	movs	r5, #24
	if (destination_address & (_nvm_dev.page_size - 1)) {
    5018:	4218      	tst	r0, r3
    501a:	d001      	beq.n	5020 <nvm_write_buffer+0x2c>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    501c:	0028      	movs	r0, r5
    501e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    5020:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
    5022:	4294      	cmp	r4, r2
    5024:	d3fa      	bcc.n	501c <nvm_write_buffer+0x28>
    5026:	4b26      	ldr	r3, [pc, #152]	; (50c0 <nvm_write_buffer+0xcc>)
    5028:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    502a:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
    502c:	07db      	lsls	r3, r3, #31
    502e:	d5f5      	bpl.n	501c <nvm_write_buffer+0x28>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    5030:	4c24      	ldr	r4, [pc, #144]	; (50c4 <nvm_write_buffer+0xd0>)
    5032:	4b23      	ldr	r3, [pc, #140]	; (50c0 <nvm_write_buffer+0xcc>)
    5034:	801c      	strh	r4, [r3, #0]
    5036:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    5038:	2401      	movs	r4, #1
    503a:	7d2b      	ldrb	r3, [r5, #20]
    503c:	4223      	tst	r3, r4
    503e:	d0fc      	beq.n	503a <nvm_write_buffer+0x46>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    5040:	2420      	movs	r4, #32
    5042:	34ff      	adds	r4, #255	; 0xff
    5044:	4b1e      	ldr	r3, [pc, #120]	; (50c0 <nvm_write_buffer+0xcc>)
    5046:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    5048:	2a00      	cmp	r2, #0
    504a:	d02c      	beq.n	50a6 <nvm_write_buffer+0xb2>
    504c:	2301      	movs	r3, #1
    504e:	0005      	movs	r5, r0
    5050:	439d      	bics	r5, r3
    5052:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    5054:	1e54      	subs	r4, r2, #1
    5056:	46a4      	mov	ip, r4
    5058:	e009      	b.n	506e <nvm_write_buffer+0x7a>
			data |= (buffer[i + 1] << 8);
    505a:	18cf      	adds	r7, r1, r3
    505c:	787f      	ldrb	r7, [r7, #1]
    505e:	023f      	lsls	r7, r7, #8
    5060:	433c      	orrs	r4, r7
		NVM_MEMORY[nvm_address++] = data;
    5062:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    5064:	3302      	adds	r3, #2
    5066:	b29b      	uxth	r3, r3
    5068:	3502      	adds	r5, #2
    506a:	429a      	cmp	r2, r3
    506c:	d904      	bls.n	5078 <nvm_write_buffer+0x84>
		data = buffer[i];
    506e:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    5070:	4563      	cmp	r3, ip
    5072:	dbf2      	blt.n	505a <nvm_write_buffer+0x66>
		data = buffer[i];
    5074:	b2a4      	uxth	r4, r4
    5076:	e7f4      	b.n	5062 <nvm_write_buffer+0x6e>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    5078:	4b0e      	ldr	r3, [pc, #56]	; (50b4 <nvm_write_buffer+0xc0>)
    507a:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    507c:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    507e:	2b00      	cmp	r3, #0
    5080:	d1cc      	bne.n	501c <nvm_write_buffer+0x28>
    5082:	2a3f      	cmp	r2, #63	; 0x3f
    5084:	d8ca      	bhi.n	501c <nvm_write_buffer+0x28>
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
    5086:	2e00      	cmp	r6, #0
    5088:	d106      	bne.n	5098 <nvm_write_buffer+0xa4>
    508a:	2200      	movs	r2, #0
    508c:	0001      	movs	r1, r0
    508e:	2004      	movs	r0, #4
    5090:	4b0d      	ldr	r3, [pc, #52]	; (50c8 <nvm_write_buffer+0xd4>)
    5092:	4798      	blx	r3
    5094:	0005      	movs	r5, r0
    5096:	e7c1      	b.n	501c <nvm_write_buffer+0x28>
    5098:	2200      	movs	r2, #0
    509a:	0001      	movs	r1, r0
    509c:	201c      	movs	r0, #28
    509e:	4b0a      	ldr	r3, [pc, #40]	; (50c8 <nvm_write_buffer+0xd4>)
    50a0:	4798      	blx	r3
    50a2:	0005      	movs	r5, r0
    50a4:	e7ba      	b.n	501c <nvm_write_buffer+0x28>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    50a6:	4b03      	ldr	r3, [pc, #12]	; (50b4 <nvm_write_buffer+0xc0>)
    50a8:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    50aa:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    50ac:	2b00      	cmp	r3, #0
    50ae:	d0ea      	beq.n	5086 <nvm_write_buffer+0x92>
    50b0:	e7b4      	b.n	501c <nvm_write_buffer+0x28>
    50b2:	46c0      	nop			; (mov r8, r8)
    50b4:	200002c0 	.word	0x200002c0
    50b8:	00001fff 	.word	0x00001fff
    50bc:	ffc00000 	.word	0xffc00000
    50c0:	41004000 	.word	0x41004000
    50c4:	ffffa544 	.word	0xffffa544
    50c8:	00004f41 	.word	0x00004f41

000050cc <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    50cc:	b510      	push	{r4, lr}
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    50ce:	4a1b      	ldr	r2, [pc, #108]	; (513c <nvm_erase_row+0x70>)
    50d0:	8813      	ldrh	r3, [r2, #0]
    50d2:	8852      	ldrh	r2, [r2, #2]
    50d4:	435a      	muls	r2, r3
	if (row_address >
    50d6:	4282      	cmp	r2, r0
    50d8:	d207      	bcs.n	50ea <nvm_erase_row+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    50da:	4c19      	ldr	r4, [pc, #100]	; (5140 <nvm_erase_row+0x74>)
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    50dc:	2218      	movs	r2, #24
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    50de:	4919      	ldr	r1, [pc, #100]	; (5144 <nvm_erase_row+0x78>)
    50e0:	1841      	adds	r1, r0, r1
    50e2:	42a1      	cmp	r1, r4
    50e4:	d807      	bhi.n	50f6 <nvm_erase_row+0x2a>
		}
		is_rww_eeprom = true;
    50e6:	2101      	movs	r1, #1
    50e8:	e000      	b.n	50ec <nvm_erase_row+0x20>
		bool is_rww_eeprom = false;
    50ea:	2100      	movs	r1, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    50ec:	009b      	lsls	r3, r3, #2
    50ee:	3b01      	subs	r3, #1
		return STATUS_ERR_BAD_ADDRESS;
    50f0:	2218      	movs	r2, #24
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    50f2:	4218      	tst	r0, r3
    50f4:	d001      	beq.n	50fa <nvm_erase_row+0x2e>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    50f6:	0010      	movs	r0, r2
    50f8:	bd10      	pop	{r4, pc}
    50fa:	4b13      	ldr	r3, [pc, #76]	; (5148 <nvm_erase_row+0x7c>)
    50fc:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    50fe:	3a13      	subs	r2, #19
	if (!nvm_is_ready()) {
    5100:	07db      	lsls	r3, r3, #31
    5102:	d5f8      	bpl.n	50f6 <nvm_erase_row+0x2a>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    5104:	4b10      	ldr	r3, [pc, #64]	; (5148 <nvm_erase_row+0x7c>)
    5106:	2220      	movs	r2, #32
    5108:	32ff      	adds	r2, #255	; 0xff
    510a:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    510c:	0880      	lsrs	r0, r0, #2
    510e:	0040      	lsls	r0, r0, #1
    5110:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
    5112:	2900      	cmp	r1, #0
    5114:	d10f      	bne.n	5136 <nvm_erase_row+0x6a>
    5116:	4a0d      	ldr	r2, [pc, #52]	; (514c <nvm_erase_row+0x80>)
    5118:	4b0b      	ldr	r3, [pc, #44]	; (5148 <nvm_erase_row+0x7c>)
    511a:	801a      	strh	r2, [r3, #0]
    511c:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    511e:	2201      	movs	r2, #1
    5120:	7d0b      	ldrb	r3, [r1, #20]
    5122:	4213      	tst	r3, r2
    5124:	d0fc      	beq.n	5120 <nvm_erase_row+0x54>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    5126:	4b08      	ldr	r3, [pc, #32]	; (5148 <nvm_erase_row+0x7c>)
    5128:	8b1a      	ldrh	r2, [r3, #24]
    512a:	201c      	movs	r0, #28
    512c:	4002      	ands	r2, r0
	return STATUS_OK;
    512e:	1e50      	subs	r0, r2, #1
    5130:	4182      	sbcs	r2, r0
    5132:	0092      	lsls	r2, r2, #2
    5134:	e7df      	b.n	50f6 <nvm_erase_row+0x2a>
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
    5136:	4a06      	ldr	r2, [pc, #24]	; (5150 <nvm_erase_row+0x84>)
    5138:	e7ee      	b.n	5118 <nvm_erase_row+0x4c>
    513a:	46c0      	nop			; (mov r8, r8)
    513c:	200002c0 	.word	0x200002c0
    5140:	00001fff 	.word	0x00001fff
    5144:	ffc00000 	.word	0xffc00000
    5148:	41004000 	.word	0x41004000
    514c:	0000a502 	.word	0x0000a502
    5150:	0000a51a 	.word	0x0000a51a

00005154 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    5154:	b500      	push	{lr}
    5156:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5158:	ab01      	add	r3, sp, #4
    515a:	2280      	movs	r2, #128	; 0x80
    515c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    515e:	780a      	ldrb	r2, [r1, #0]
    5160:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    5162:	784a      	ldrb	r2, [r1, #1]
    5164:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    5166:	788a      	ldrb	r2, [r1, #2]
    5168:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    516a:	0019      	movs	r1, r3
    516c:	4b01      	ldr	r3, [pc, #4]	; (5174 <port_pin_set_config+0x20>)
    516e:	4798      	blx	r3
}
    5170:	b003      	add	sp, #12
    5172:	bd00      	pop	{pc}
    5174:	00007191 	.word	0x00007191

00005178 <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    5178:	6803      	ldr	r3, [r0, #0]

	if (rtc_module->MODE0.SYNCBUSY.reg) {
    517a:	6918      	ldr	r0, [r3, #16]
    517c:	1e43      	subs	r3, r0, #1
    517e:	4198      	sbcs	r0, r3
    5180:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
    5182:	4770      	bx	lr

00005184 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
    5184:	b570      	push	{r4, r5, r6, lr}
    5186:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    5188:	6806      	ldr	r6, [r0, #0]

	/* Initialize return value. */
	uint32_t ret_val;

	while (rtc_count_is_syncing(module)) {
    518a:	4d08      	ldr	r5, [pc, #32]	; (51ac <rtc_count_get_count+0x28>)
    518c:	0020      	movs	r0, r4
    518e:	47a8      	blx	r5
    5190:	2800      	cmp	r0, #0
    5192:	d1fb      	bne.n	518c <rtc_count_get_count+0x8>
		/* Wait for synchronization */
	}

	/* Read value based on mode. */
	switch (module->mode) {
    5194:	7923      	ldrb	r3, [r4, #4]
    5196:	2b00      	cmp	r3, #0
    5198:	d004      	beq.n	51a4 <rtc_count_get_count+0x20>
			break;

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
    519a:	2000      	movs	r0, #0
	switch (module->mode) {
    519c:	2b01      	cmp	r3, #1
    519e:	d100      	bne.n	51a2 <rtc_count_get_count+0x1e>
			ret_val = rtc_module->MODE0.COUNT.reg;
    51a0:	69b0      	ldr	r0, [r6, #24]
			break;
	}

	return ret_val;
}
    51a2:	bd70      	pop	{r4, r5, r6, pc}
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
    51a4:	8b30      	ldrh	r0, [r6, #24]
    51a6:	b280      	uxth	r0, r0
			break;
    51a8:	e7fb      	b.n	51a2 <rtc_count_get_count+0x1e>
    51aa:	46c0      	nop			; (mov r8, r8)
    51ac:	00005179 	.word	0x00005179

000051b0 <rtc_count_disable_callback>:
 * \param[in]     callback_type Callback type to disable
 */
void rtc_count_disable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    51b0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    51b2:	6802      	ldr	r2, [r0, #0]

	/* Disable interrupt */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    51b4:	290a      	cmp	r1, #10
    51b6:	d010      	beq.n	51da <rtc_count_disable_callback+0x2a>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if(callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    51b8:	2907      	cmp	r1, #7
    51ba:	d911      	bls.n	51e0 <rtc_count_disable_callback+0x30>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7){
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
	}else {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    51bc:	2380      	movs	r3, #128	; 0x80
    51be:	005b      	lsls	r3, r3, #1
    51c0:	000c      	movs	r4, r1
    51c2:	3c08      	subs	r4, #8
    51c4:	40a3      	lsls	r3, r4
    51c6:	24c0      	movs	r4, #192	; 0xc0
    51c8:	00a4      	lsls	r4, r4, #2
    51ca:	4023      	ands	r3, r4
    51cc:	8113      	strh	r3, [r2, #8]
	}

	/* Mark callback as disabled. */
	module->enabled_callback &= ~(1 << callback_type);
    51ce:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    51d0:	2201      	movs	r2, #1
    51d2:	408a      	lsls	r2, r1
    51d4:	4393      	bics	r3, r2
    51d6:	86c3      	strh	r3, [r0, #54]	; 0x36
}
    51d8:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
    51da:	4b04      	ldr	r3, [pc, #16]	; (51ec <rtc_count_disable_callback+0x3c>)
    51dc:	8113      	strh	r3, [r2, #8]
    51de:	e7f6      	b.n	51ce <rtc_count_disable_callback+0x1e>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
    51e0:	2401      	movs	r4, #1
    51e2:	408c      	lsls	r4, r1
    51e4:	23ff      	movs	r3, #255	; 0xff
    51e6:	4023      	ands	r3, r4
    51e8:	8113      	strh	r3, [r2, #8]
    51ea:	e7f0      	b.n	51ce <rtc_count_disable_callback+0x1e>
    51ec:	ffff8000 	.word	0xffff8000

000051f0 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    51f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    51f2:	46de      	mov	lr, fp
    51f4:	4657      	mov	r7, sl
    51f6:	464e      	mov	r6, r9
    51f8:	4645      	mov	r5, r8
    51fa:	b5e0      	push	{r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    51fc:	4b2b      	ldr	r3, [pc, #172]	; (52ac <RTC_Handler+0xbc>)
    51fe:	681b      	ldr	r3, [r3, #0]
    5200:	469a      	mov	sl, r3
	Rtc *const rtc_module = module->hw;
    5202:	681e      	ldr	r6, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
    5204:	8edb      	ldrh	r3, [r3, #54]	; 0x36
	callback_mask &= module->registered_callback;
    5206:	4652      	mov	r2, sl
    5208:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    520a:	401a      	ands	r2, r3
    520c:	4690      	mov	r8, r2
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    520e:	89b2      	ldrh	r2, [r6, #12]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    5210:	8973      	ldrh	r3, [r6, #10]
    5212:	4013      	ands	r3, r2
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    5214:	b21a      	sxth	r2, r3
    5216:	2a00      	cmp	r2, #0
    5218:	db08      	blt.n	522c <RTC_Handler+0x3c>
    521a:	27ff      	movs	r7, #255	; 0xff
    521c:	401f      	ands	r7, r3
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
    521e:	d02a      	beq.n	5276 <RTC_Handler+0x86>
    5220:	2400      	movs	r4, #0
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    5222:	2301      	movs	r3, #1
    5224:	4699      	mov	r9, r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    5226:	33fe      	adds	r3, #254	; 0xfe
    5228:	469b      	mov	fp, r3
    522a:	e014      	b.n	5256 <RTC_Handler+0x66>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    522c:	4643      	mov	r3, r8
    522e:	055b      	lsls	r3, r3, #21
    5230:	d407      	bmi.n	5242 <RTC_Handler+0x52>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    5232:	4b1f      	ldr	r3, [pc, #124]	; (52b0 <RTC_Handler+0xc0>)
    5234:	81b3      	strh	r3, [r6, #12]
	_rtc_interrupt_handler(0);
}
    5236:	bc3c      	pop	{r2, r3, r4, r5}
    5238:	4690      	mov	r8, r2
    523a:	4699      	mov	r9, r3
    523c:	46a2      	mov	sl, r4
    523e:	46ab      	mov	fp, r5
    5240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    5242:	4653      	mov	r3, sl
    5244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5246:	4798      	blx	r3
    5248:	e7f3      	b.n	5232 <RTC_Handler+0x42>
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    524a:	465b      	mov	r3, fp
    524c:	401d      	ands	r5, r3
    524e:	81b5      	strh	r5, [r6, #12]
    5250:	3401      	adds	r4, #1
		for ( i = 0;i < RTC_PER_NUM;i++) {
    5252:	2c08      	cmp	r4, #8
    5254:	d0ef      	beq.n	5236 <RTC_Handler+0x46>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    5256:	0023      	movs	r3, r4
    5258:	464d      	mov	r5, r9
    525a:	40a5      	lsls	r5, r4
    525c:	422f      	tst	r7, r5
    525e:	d0f4      	beq.n	524a <RTC_Handler+0x5a>
			  && (callback_mask & (1 << i))) {
    5260:	4642      	mov	r2, r8
    5262:	4122      	asrs	r2, r4
    5264:	4649      	mov	r1, r9
    5266:	4211      	tst	r1, r2
    5268:	d0ef      	beq.n	524a <RTC_Handler+0x5a>
				module->callbacks[i]();
    526a:	3302      	adds	r3, #2
    526c:	009b      	lsls	r3, r3, #2
    526e:	4652      	mov	r2, sl
    5270:	589b      	ldr	r3, [r3, r2]
    5272:	4798      	blx	r3
    5274:	e7e9      	b.n	524a <RTC_Handler+0x5a>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    5276:	05da      	lsls	r2, r3, #23
    5278:	d50a      	bpl.n	5290 <RTC_Handler+0xa0>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    527a:	4643      	mov	r3, r8
    527c:	05db      	lsls	r3, r3, #23
    527e:	d403      	bmi.n	5288 <RTC_Handler+0x98>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    5280:	2380      	movs	r3, #128	; 0x80
    5282:	005b      	lsls	r3, r3, #1
    5284:	81b3      	strh	r3, [r6, #12]
    5286:	e7d6      	b.n	5236 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    5288:	4653      	mov	r3, sl
    528a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    528c:	4798      	blx	r3
    528e:	e7f7      	b.n	5280 <RTC_Handler+0x90>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    5290:	059b      	lsls	r3, r3, #22
    5292:	d5d0      	bpl.n	5236 <RTC_Handler+0x46>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    5294:	4643      	mov	r3, r8
    5296:	059b      	lsls	r3, r3, #22
    5298:	d403      	bmi.n	52a2 <RTC_Handler+0xb2>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    529a:	2380      	movs	r3, #128	; 0x80
    529c:	009b      	lsls	r3, r3, #2
    529e:	81b3      	strh	r3, [r6, #12]
}
    52a0:	e7c9      	b.n	5236 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    52a2:	4653      	mov	r3, sl
    52a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    52a6:	4798      	blx	r3
    52a8:	e7f7      	b.n	529a <RTC_Handler+0xaa>
    52aa:	46c0      	nop			; (mov r8, r8)
    52ac:	200020ec 	.word	0x200020ec
    52b0:	ffff8000 	.word	0xffff8000

000052b4 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    52b4:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    52b6:	2207      	movs	r2, #7
    52b8:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    52ba:	421a      	tst	r2, r3
    52bc:	d1fc      	bne.n	52b8 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
    52be:	4770      	bx	lr

000052c0 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    52c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    52c2:	46d6      	mov	lr, sl
    52c4:	464f      	mov	r7, r9
    52c6:	4646      	mov	r6, r8
    52c8:	b5c0      	push	{r6, r7, lr}
    52ca:	b08a      	sub	sp, #40	; 0x28
    52cc:	0007      	movs	r7, r0
    52ce:	000e      	movs	r6, r1
    52d0:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    52d2:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    52d4:	0008      	movs	r0, r1
    52d6:	4b9c      	ldr	r3, [pc, #624]	; (5548 <i2c_master_init+0x288>)
    52d8:	4798      	blx	r3

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    52da:	2805      	cmp	r0, #5
    52dc:	d100      	bne.n	52e0 <i2c_master_init+0x20>
    52de:	e12b      	b.n	5538 <i2c_master_init+0x278>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    52e0:	0005      	movs	r5, r0
    52e2:	3512      	adds	r5, #18
			MCLK->APBCMASK.reg |= mask;
    52e4:	4a99      	ldr	r2, [pc, #612]	; (554c <i2c_master_init+0x28c>)
    52e6:	69d1      	ldr	r1, [r2, #28]
	/* Turn on module in PM */
#if (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    52e8:	2301      	movs	r3, #1
    52ea:	4083      	lsls	r3, r0
    52ec:	430b      	orrs	r3, r1
    52ee:	61d3      	str	r3, [r2, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    52f0:	a909      	add	r1, sp, #36	; 0x24
    52f2:	7b23      	ldrb	r3, [r4, #12]
    52f4:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    52f6:	b2ed      	uxtb	r5, r5
    52f8:	0028      	movs	r0, r5
    52fa:	4b95      	ldr	r3, [pc, #596]	; (5550 <i2c_master_init+0x290>)
    52fc:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    52fe:	0028      	movs	r0, r5
    5300:	4b94      	ldr	r3, [pc, #592]	; (5554 <i2c_master_init+0x294>)
    5302:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5304:	7b20      	ldrb	r0, [r4, #12]
    5306:	2100      	movs	r1, #0
    5308:	4b93      	ldr	r3, [pc, #588]	; (5558 <i2c_master_init+0x298>)
    530a:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    530c:	6833      	ldr	r3, [r6, #0]
		return STATUS_ERR_DENIED;
    530e:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    5310:	079b      	lsls	r3, r3, #30
    5312:	d505      	bpl.n	5320 <i2c_master_init+0x60>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    5314:	b00a      	add	sp, #40	; 0x28
    5316:	bc1c      	pop	{r2, r3, r4}
    5318:	4690      	mov	r8, r2
    531a:	4699      	mov	r9, r3
    531c:	46a2      	mov	sl, r4
    531e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    5320:	6833      	ldr	r3, [r6, #0]
		return STATUS_BUSY;
    5322:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    5324:	07db      	lsls	r3, r3, #31
    5326:	d4f5      	bmi.n	5314 <i2c_master_init+0x54>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    5328:	2314      	movs	r3, #20
    532a:	6033      	str	r3, [r6, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    532c:	683b      	ldr	r3, [r7, #0]
    532e:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    5330:	0018      	movs	r0, r3
    5332:	4b85      	ldr	r3, [pc, #532]	; (5548 <i2c_master_init+0x288>)
    5334:	4798      	blx	r3
    5336:	0005      	movs	r5, r0
    5338:	2380      	movs	r3, #128	; 0x80
    533a:	aa08      	add	r2, sp, #32
    533c:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    533e:	2300      	movs	r3, #0
    5340:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5342:	2201      	movs	r2, #1
    5344:	a908      	add	r1, sp, #32
    5346:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
    5348:	70cb      	strb	r3, [r1, #3]
	uint32_t pad0 = config->pinmux_pad0;
    534a:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    534c:	6a26      	ldr	r6, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    534e:	2800      	cmp	r0, #0
    5350:	d100      	bne.n	5354 <i2c_master_init+0x94>
    5352:	e0ae      	b.n	54b2 <i2c_master_init+0x1f2>
	pin_conf.mux_position = pad0 & 0xFFFF;
    5354:	ab08      	add	r3, sp, #32
    5356:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    5358:	2302      	movs	r3, #2
    535a:	aa08      	add	r2, sp, #32
    535c:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    535e:	0c00      	lsrs	r0, r0, #16
    5360:	b2c0      	uxtb	r0, r0
    5362:	0011      	movs	r1, r2
    5364:	4b7d      	ldr	r3, [pc, #500]	; (555c <i2c_master_init+0x29c>)
    5366:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    5368:	2e00      	cmp	r6, #0
    536a:	d100      	bne.n	536e <i2c_master_init+0xae>
    536c:	e0a6      	b.n	54bc <i2c_master_init+0x1fc>
	pin_conf.mux_position = pad1 & 0xFFFF;
    536e:	ab08      	add	r3, sp, #32
    5370:	701e      	strb	r6, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    5372:	2302      	movs	r3, #2
    5374:	aa08      	add	r2, sp, #32
    5376:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    5378:	0c36      	lsrs	r6, r6, #16
    537a:	b2f0      	uxtb	r0, r6
    537c:	0011      	movs	r1, r2
    537e:	4b77      	ldr	r3, [pc, #476]	; (555c <i2c_master_init+0x29c>)
    5380:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    5382:	8aa3      	ldrh	r3, [r4, #20]
    5384:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
    5386:	8ae3      	ldrh	r3, [r4, #22]
    5388:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    538a:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    538c:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    538e:	2b00      	cmp	r3, #0
    5390:	d104      	bne.n	539c <i2c_master_init+0xdc>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    5392:	4b73      	ldr	r3, [pc, #460]	; (5560 <i2c_master_init+0x2a0>)
    5394:	789b      	ldrb	r3, [r3, #2]
    5396:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    5398:	0fdb      	lsrs	r3, r3, #31
    539a:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    539c:	68a1      	ldr	r1, [r4, #8]
    539e:	6923      	ldr	r3, [r4, #16]
    53a0:	430b      	orrs	r3, r1
    53a2:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    53a4:	2224      	movs	r2, #36	; 0x24
    53a6:	5ca2      	ldrb	r2, [r4, r2]
    53a8:	2a00      	cmp	r2, #0
    53aa:	d002      	beq.n	53b2 <i2c_master_init+0xf2>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    53ac:	2280      	movs	r2, #128	; 0x80
    53ae:	05d2      	lsls	r2, r2, #23
    53b0:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    53b2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    53b4:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    53b6:	222c      	movs	r2, #44	; 0x2c
    53b8:	5ca2      	ldrb	r2, [r4, r2]
    53ba:	2a00      	cmp	r2, #0
    53bc:	d103      	bne.n	53c6 <i2c_master_init+0x106>
    53be:	2280      	movs	r2, #128	; 0x80
    53c0:	0492      	lsls	r2, r2, #18
    53c2:	4291      	cmp	r1, r2
    53c4:	d102      	bne.n	53cc <i2c_master_init+0x10c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    53c6:	2280      	movs	r2, #128	; 0x80
    53c8:	0512      	lsls	r2, r2, #20
    53ca:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    53cc:	222d      	movs	r2, #45	; 0x2d
    53ce:	5ca2      	ldrb	r2, [r4, r2]
    53d0:	2a00      	cmp	r2, #0
    53d2:	d002      	beq.n	53da <i2c_master_init+0x11a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    53d4:	2280      	movs	r2, #128	; 0x80
    53d6:	0412      	lsls	r2, r2, #16
    53d8:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    53da:	222e      	movs	r2, #46	; 0x2e
    53dc:	5ca2      	ldrb	r2, [r4, r2]
    53de:	2a00      	cmp	r2, #0
    53e0:	d002      	beq.n	53e8 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    53e2:	2280      	movs	r2, #128	; 0x80
    53e4:	03d2      	lsls	r2, r2, #15
    53e6:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    53e8:	4642      	mov	r2, r8
    53ea:	6812      	ldr	r2, [r2, #0]
    53ec:	4313      	orrs	r3, r2
    53ee:	4642      	mov	r2, r8
    53f0:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    53f2:	2380      	movs	r3, #128	; 0x80
    53f4:	005b      	lsls	r3, r3, #1
    53f6:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    53f8:	3512      	adds	r5, #18
    53fa:	b2e8      	uxtb	r0, r5
    53fc:	4b59      	ldr	r3, [pc, #356]	; (5564 <i2c_master_init+0x2a4>)
    53fe:	4798      	blx	r3
    5400:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    5402:	23fa      	movs	r3, #250	; 0xfa
    5404:	009b      	lsls	r3, r3, #2
    5406:	6822      	ldr	r2, [r4, #0]
    5408:	435a      	muls	r2, r3
    540a:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    540c:	6863      	ldr	r3, [r4, #4]
    540e:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    5410:	4d55      	ldr	r5, [pc, #340]	; (5568 <i2c_master_init+0x2a8>)
    5412:	47a8      	blx	r5
    5414:	9000      	str	r0, [sp, #0]
    5416:	9101      	str	r1, [sp, #4]
    5418:	464b      	mov	r3, r9
    541a:	0058      	lsls	r0, r3, #1
    541c:	47a8      	blx	r5
    541e:	9002      	str	r0, [sp, #8]
    5420:	9103      	str	r1, [sp, #12]
    5422:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    5424:	47a8      	blx	r5
    5426:	9004      	str	r0, [sp, #16]
    5428:	9105      	str	r1, [sp, #20]
    542a:	4f50      	ldr	r7, [pc, #320]	; (556c <i2c_master_init+0x2ac>)
    542c:	4a50      	ldr	r2, [pc, #320]	; (5570 <i2c_master_init+0x2b0>)
    542e:	4b51      	ldr	r3, [pc, #324]	; (5574 <i2c_master_init+0x2b4>)
    5430:	9800      	ldr	r0, [sp, #0]
    5432:	9901      	ldr	r1, [sp, #4]
    5434:	47b8      	blx	r7
    5436:	0002      	movs	r2, r0
    5438:	000b      	movs	r3, r1
    543a:	9804      	ldr	r0, [sp, #16]
    543c:	9905      	ldr	r1, [sp, #20]
    543e:	47b8      	blx	r7
    5440:	4e4d      	ldr	r6, [pc, #308]	; (5578 <i2c_master_init+0x2b8>)
    5442:	2200      	movs	r2, #0
    5444:	4b4d      	ldr	r3, [pc, #308]	; (557c <i2c_master_init+0x2bc>)
    5446:	47b0      	blx	r6
    5448:	9004      	str	r0, [sp, #16]
    544a:	9105      	str	r1, [sp, #20]
    544c:	4648      	mov	r0, r9
    544e:	47a8      	blx	r5
    5450:	0002      	movs	r2, r0
    5452:	000b      	movs	r3, r1
    5454:	9804      	ldr	r0, [sp, #16]
    5456:	9905      	ldr	r1, [sp, #20]
    5458:	47b8      	blx	r7
    545a:	0002      	movs	r2, r0
    545c:	000b      	movs	r3, r1
    545e:	4d48      	ldr	r5, [pc, #288]	; (5580 <i2c_master_init+0x2c0>)
    5460:	9800      	ldr	r0, [sp, #0]
    5462:	9901      	ldr	r1, [sp, #4]
    5464:	47a8      	blx	r5
    5466:	9a02      	ldr	r2, [sp, #8]
    5468:	9b03      	ldr	r3, [sp, #12]
    546a:	47b0      	blx	r6
    546c:	2200      	movs	r2, #0
    546e:	4b45      	ldr	r3, [pc, #276]	; (5584 <i2c_master_init+0x2c4>)
    5470:	47a8      	blx	r5
    5472:	9a02      	ldr	r2, [sp, #8]
    5474:	9b03      	ldr	r3, [sp, #12]
    5476:	4d44      	ldr	r5, [pc, #272]	; (5588 <i2c_master_init+0x2c8>)
    5478:	47a8      	blx	r5
    547a:	4b44      	ldr	r3, [pc, #272]	; (558c <i2c_master_init+0x2cc>)
    547c:	4798      	blx	r3
    547e:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    5480:	2380      	movs	r3, #128	; 0x80
    5482:	049b      	lsls	r3, r3, #18
    5484:	68a2      	ldr	r2, [r4, #8]
    5486:	429a      	cmp	r2, r3
    5488:	d01e      	beq.n	54c8 <i2c_master_init+0x208>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    548a:	0003      	movs	r3, r0
    548c:	2040      	movs	r0, #64	; 0x40
    548e:	2dff      	cmp	r5, #255	; 0xff
    5490:	d900      	bls.n	5494 <i2c_master_init+0x1d4>
    5492:	e73f      	b.n	5314 <i2c_master_init+0x54>
	int32_t tmp_baudlow_hs = 0;
    5494:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    5496:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    5498:	25ff      	movs	r5, #255	; 0xff
    549a:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    549c:	0624      	lsls	r4, r4, #24
    549e:	4325      	orrs	r5, r4
    54a0:	0400      	lsls	r0, r0, #16
    54a2:	23ff      	movs	r3, #255	; 0xff
    54a4:	041b      	lsls	r3, r3, #16
    54a6:	4018      	ands	r0, r3
    54a8:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    54aa:	4643      	mov	r3, r8
    54ac:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    54ae:	2000      	movs	r0, #0
    54b0:	e730      	b.n	5314 <i2c_master_init+0x54>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    54b2:	2100      	movs	r1, #0
    54b4:	4640      	mov	r0, r8
    54b6:	4b36      	ldr	r3, [pc, #216]	; (5590 <i2c_master_init+0x2d0>)
    54b8:	4798      	blx	r3
    54ba:	e74b      	b.n	5354 <i2c_master_init+0x94>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    54bc:	2101      	movs	r1, #1
    54be:	4640      	mov	r0, r8
    54c0:	4b33      	ldr	r3, [pc, #204]	; (5590 <i2c_master_init+0x2d0>)
    54c2:	4798      	blx	r3
    54c4:	0006      	movs	r6, r0
    54c6:	e752      	b.n	536e <i2c_master_init+0xae>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    54c8:	26fa      	movs	r6, #250	; 0xfa
    54ca:	00b6      	lsls	r6, r6, #2
    54cc:	4653      	mov	r3, sl
    54ce:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    54d0:	9800      	ldr	r0, [sp, #0]
    54d2:	9901      	ldr	r1, [sp, #4]
    54d4:	0002      	movs	r2, r0
    54d6:	000b      	movs	r3, r1
    54d8:	4c27      	ldr	r4, [pc, #156]	; (5578 <i2c_master_init+0x2b8>)
    54da:	47a0      	blx	r4
    54dc:	9000      	str	r0, [sp, #0]
    54de:	9101      	str	r1, [sp, #4]
    54e0:	0030      	movs	r0, r6
    54e2:	4b21      	ldr	r3, [pc, #132]	; (5568 <i2c_master_init+0x2a8>)
    54e4:	4798      	blx	r3
    54e6:	2200      	movs	r2, #0
    54e8:	4b2a      	ldr	r3, [pc, #168]	; (5594 <i2c_master_init+0x2d4>)
    54ea:	47b8      	blx	r7
    54ec:	0002      	movs	r2, r0
    54ee:	000b      	movs	r3, r1
    54f0:	9800      	ldr	r0, [sp, #0]
    54f2:	9901      	ldr	r1, [sp, #4]
    54f4:	4c24      	ldr	r4, [pc, #144]	; (5588 <i2c_master_init+0x2c8>)
    54f6:	47a0      	blx	r4
    54f8:	2200      	movs	r2, #0
    54fa:	4b22      	ldr	r3, [pc, #136]	; (5584 <i2c_master_init+0x2c4>)
    54fc:	4c20      	ldr	r4, [pc, #128]	; (5580 <i2c_master_init+0x2c0>)
    54fe:	47a0      	blx	r4
    5500:	4b22      	ldr	r3, [pc, #136]	; (558c <i2c_master_init+0x2cc>)
    5502:	4798      	blx	r3
    5504:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    5506:	d00c      	beq.n	5522 <i2c_master_init+0x262>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    5508:	0031      	movs	r1, r6
    550a:	9807      	ldr	r0, [sp, #28]
    550c:	4b22      	ldr	r3, [pc, #136]	; (5598 <i2c_master_init+0x2d8>)
    550e:	4798      	blx	r3
    5510:	3802      	subs	r0, #2
    5512:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    5514:	002b      	movs	r3, r5
    5516:	2dff      	cmp	r5, #255	; 0xff
    5518:	d80c      	bhi.n	5534 <i2c_master_init+0x274>
    551a:	28ff      	cmp	r0, #255	; 0xff
    551c:	d9bc      	bls.n	5498 <i2c_master_init+0x1d8>
    551e:	2040      	movs	r0, #64	; 0x40
    5520:	e6f8      	b.n	5314 <i2c_master_init+0x54>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    5522:	0071      	lsls	r1, r6, #1
    5524:	1e48      	subs	r0, r1, #1
    5526:	9b07      	ldr	r3, [sp, #28]
    5528:	469c      	mov	ip, r3
    552a:	4460      	add	r0, ip
    552c:	4b1a      	ldr	r3, [pc, #104]	; (5598 <i2c_master_init+0x2d8>)
    552e:	4798      	blx	r3
    5530:	3801      	subs	r0, #1
    5532:	e7ef      	b.n	5514 <i2c_master_init+0x254>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    5534:	2040      	movs	r0, #64	; 0x40
    5536:	e6ed      	b.n	5314 <i2c_master_init+0x54>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    5538:	4a04      	ldr	r2, [pc, #16]	; (554c <i2c_master_init+0x28c>)
    553a:	6a13      	ldr	r3, [r2, #32]
    553c:	2102      	movs	r1, #2
    553e:	430b      	orrs	r3, r1
    5540:	6213      	str	r3, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    5542:	2518      	movs	r5, #24
    5544:	e6d4      	b.n	52f0 <i2c_master_init+0x30>
    5546:	46c0      	nop			; (mov r8, r8)
    5548:	00005c21 	.word	0x00005c21
    554c:	40000400 	.word	0x40000400
    5550:	00007095 	.word	0x00007095
    5554:	00007025 	.word	0x00007025
    5558:	00005a79 	.word	0x00005a79
    555c:	00007191 	.word	0x00007191
    5560:	41002000 	.word	0x41002000
    5564:	000070b9 	.word	0x000070b9
    5568:	00015005 	.word	0x00015005
    556c:	000143ed 	.word	0x000143ed
    5570:	e826d695 	.word	0xe826d695
    5574:	3e112e0b 	.word	0x3e112e0b
    5578:	00013765 	.word	0x00013765
    557c:	40240000 	.word	0x40240000
    5580:	000148ed 	.word	0x000148ed
    5584:	3ff00000 	.word	0x3ff00000
    5588:	00013d85 	.word	0x00013d85
    558c:	00014f19 	.word	0x00014f19
    5590:	00005ac5 	.word	0x00005ac5
    5594:	40080000 	.word	0x40080000
    5598:	0001235d 	.word	0x0001235d

0000559c <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
    559c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    559e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    55a0:	6807      	ldr	r7, [r0, #0]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    55a2:	4e08      	ldr	r6, [pc, #32]	; (55c4 <i2c_master_reset+0x28>)
    55a4:	47b0      	blx	r6
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    55a6:	6825      	ldr	r5, [r4, #0]
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    55a8:	0020      	movs	r0, r4
    55aa:	47b0      	blx	r6

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    55ac:	2383      	movs	r3, #131	; 0x83
    55ae:	752b      	strb	r3, [r5, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    55b0:	762b      	strb	r3, [r5, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    55b2:	682b      	ldr	r3, [r5, #0]
    55b4:	2202      	movs	r2, #2
    55b6:	4393      	bics	r3, r2
    55b8:	602b      	str	r3, [r5, #0]
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
	system_interrupt_leave_critical_section();
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    55ba:	0020      	movs	r0, r4
    55bc:	47b0      	blx	r6

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
    55be:	2301      	movs	r3, #1
    55c0:	603b      	str	r3, [r7, #0]
}
    55c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    55c4:	000052b5 	.word	0x000052b5

000055c8 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    55c8:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    55ca:	7e1a      	ldrb	r2, [r3, #24]
    55cc:	0792      	lsls	r2, r2, #30
    55ce:	d507      	bpl.n	55e0 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    55d0:	2202      	movs	r2, #2
    55d2:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    55d4:	8b5b      	ldrh	r3, [r3, #26]
    55d6:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    55d8:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    55da:	17db      	asrs	r3, r3, #31
    55dc:	4018      	ands	r0, r3
}
    55de:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    55e0:	8b5a      	ldrh	r2, [r3, #26]
    55e2:	0752      	lsls	r2, r2, #29
    55e4:	d506      	bpl.n	55f4 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    55e6:	6859      	ldr	r1, [r3, #4]
    55e8:	22c0      	movs	r2, #192	; 0xc0
    55ea:	0292      	lsls	r2, r2, #10
    55ec:	430a      	orrs	r2, r1
    55ee:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    55f0:	2018      	movs	r0, #24
    55f2:	e7f4      	b.n	55de <_i2c_master_address_response+0x16>
	return STATUS_OK;
    55f4:	2000      	movs	r0, #0
    55f6:	e7f2      	b.n	55de <_i2c_master_address_response+0x16>

000055f8 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    55f8:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    55fa:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    55fc:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    55fe:	2401      	movs	r4, #1
    5600:	2502      	movs	r5, #2
    5602:	7e11      	ldrb	r1, [r2, #24]
    5604:	4221      	tst	r1, r4
    5606:	d10b      	bne.n	5620 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    5608:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    560a:	4229      	tst	r1, r5
    560c:	d106      	bne.n	561c <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    560e:	3301      	adds	r3, #1
    5610:	b29b      	uxth	r3, r3
    5612:	8901      	ldrh	r1, [r0, #8]
    5614:	4299      	cmp	r1, r3
    5616:	d8f4      	bhi.n	5602 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    5618:	2012      	movs	r0, #18
    561a:	e002      	b.n	5622 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    561c:	2000      	movs	r0, #0
    561e:	e000      	b.n	5622 <_i2c_master_wait_for_bus+0x2a>
    5620:	2000      	movs	r0, #0
}
    5622:	bd30      	pop	{r4, r5, pc}

00005624 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    5624:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5626:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5628:	6862      	ldr	r2, [r4, #4]
    562a:	2380      	movs	r3, #128	; 0x80
    562c:	02db      	lsls	r3, r3, #11
    562e:	4313      	orrs	r3, r2
    5630:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    5632:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    5634:	4b02      	ldr	r3, [pc, #8]	; (5640 <_i2c_master_send_hs_master_code+0x1c>)
    5636:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    5638:	2301      	movs	r3, #1
    563a:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    563c:	bd10      	pop	{r4, pc}
    563e:	46c0      	nop			; (mov r8, r8)
    5640:	000055f9 	.word	0x000055f9

00005644 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    5644:	b5f0      	push	{r4, r5, r6, r7, lr}
    5646:	46de      	mov	lr, fp
    5648:	4657      	mov	r7, sl
    564a:	464e      	mov	r6, r9
    564c:	4645      	mov	r5, r8
    564e:	b5e0      	push	{r5, r6, r7, lr}
    5650:	b083      	sub	sp, #12
    5652:	0006      	movs	r6, r0
    5654:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5656:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    5658:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    565a:	682b      	ldr	r3, [r5, #0]
    565c:	011b      	lsls	r3, r3, #4
    565e:	0fdb      	lsrs	r3, r3, #31
    5660:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    5662:	7a4b      	ldrb	r3, [r1, #9]
    5664:	2b00      	cmp	r3, #0
    5666:	d12b      	bne.n	56c0 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5668:	686b      	ldr	r3, [r5, #4]
    566a:	4a58      	ldr	r2, [pc, #352]	; (57cc <_i2c_master_read_packet+0x188>)
    566c:	4013      	ands	r3, r2
    566e:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    5670:	464b      	mov	r3, r9
    5672:	7a1b      	ldrb	r3, [r3, #8]
    5674:	2b00      	cmp	r3, #0
    5676:	d127      	bne.n	56c8 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    5678:	464b      	mov	r3, r9
    567a:	881b      	ldrh	r3, [r3, #0]
    567c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    567e:	464a      	mov	r2, r9
    5680:	7a52      	ldrb	r2, [r2, #9]
    5682:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    5684:	4313      	orrs	r3, r2
    5686:	2201      	movs	r2, #1
    5688:	4313      	orrs	r3, r2
    568a:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    568c:	0030      	movs	r0, r6
    568e:	4b50      	ldr	r3, [pc, #320]	; (57d0 <_i2c_master_read_packet+0x18c>)
    5690:	4798      	blx	r3
    5692:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    5694:	4653      	mov	r3, sl
    5696:	2b00      	cmp	r3, #0
    5698:	d003      	beq.n	56a2 <_i2c_master_read_packet+0x5e>
    569a:	464b      	mov	r3, r9
    569c:	885b      	ldrh	r3, [r3, #2]
    569e:	2b01      	cmp	r3, #1
    56a0:	d03b      	beq.n	571a <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    56a2:	686b      	ldr	r3, [r5, #4]
    56a4:	4a49      	ldr	r2, [pc, #292]	; (57cc <_i2c_master_read_packet+0x188>)
    56a6:	4013      	ands	r3, r2
    56a8:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    56aa:	9b01      	ldr	r3, [sp, #4]
    56ac:	2b00      	cmp	r3, #0
    56ae:	d03a      	beq.n	5726 <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    56b0:	9801      	ldr	r0, [sp, #4]
    56b2:	b003      	add	sp, #12
    56b4:	bc3c      	pop	{r2, r3, r4, r5}
    56b6:	4690      	mov	r8, r2
    56b8:	4699      	mov	r9, r3
    56ba:	46a2      	mov	sl, r4
    56bc:	46ab      	mov	fp, r5
    56be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    56c0:	7a89      	ldrb	r1, [r1, #10]
    56c2:	4b44      	ldr	r3, [pc, #272]	; (57d4 <_i2c_master_read_packet+0x190>)
    56c4:	4798      	blx	r3
    56c6:	e7cf      	b.n	5668 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
    56c8:	464b      	mov	r3, r9
    56ca:	881b      	ldrh	r3, [r3, #0]
    56cc:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    56ce:	464a      	mov	r2, r9
    56d0:	7a52      	ldrb	r2, [r2, #9]
    56d2:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    56d4:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    56d6:	2280      	movs	r2, #128	; 0x80
    56d8:	0212      	lsls	r2, r2, #8
    56da:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    56dc:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    56de:	0030      	movs	r0, r6
    56e0:	4b3b      	ldr	r3, [pc, #236]	; (57d0 <_i2c_master_read_packet+0x18c>)
    56e2:	4798      	blx	r3
    56e4:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    56e6:	686b      	ldr	r3, [r5, #4]
    56e8:	4a38      	ldr	r2, [pc, #224]	; (57cc <_i2c_master_read_packet+0x188>)
    56ea:	4013      	ands	r3, r2
    56ec:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
    56ee:	2800      	cmp	r0, #0
    56f0:	d1de      	bne.n	56b0 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
    56f2:	0030      	movs	r0, r6
    56f4:	4b38      	ldr	r3, [pc, #224]	; (57d8 <_i2c_master_read_packet+0x194>)
    56f6:	4798      	blx	r3
    56f8:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
    56fa:	2800      	cmp	r0, #0
    56fc:	d1d8      	bne.n	56b0 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    56fe:	464b      	mov	r3, r9
    5700:	881b      	ldrh	r3, [r3, #0]
    5702:	0a1b      	lsrs	r3, r3, #8
    5704:	2278      	movs	r2, #120	; 0x78
    5706:	4313      	orrs	r3, r2
    5708:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    570a:	464a      	mov	r2, r9
    570c:	7a52      	ldrb	r2, [r2, #9]
    570e:	0392      	lsls	r2, r2, #14
    5710:	2101      	movs	r1, #1
    5712:	430a      	orrs	r2, r1
    5714:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    5716:	626b      	str	r3, [r5, #36]	; 0x24
    5718:	e7b8      	b.n	568c <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    571a:	686a      	ldr	r2, [r5, #4]
    571c:	2380      	movs	r3, #128	; 0x80
    571e:	02db      	lsls	r3, r3, #11
    5720:	4313      	orrs	r3, r2
    5722:	606b      	str	r3, [r5, #4]
    5724:	e7c1      	b.n	56aa <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
    5726:	0030      	movs	r0, r6
    5728:	4b2b      	ldr	r3, [pc, #172]	; (57d8 <_i2c_master_read_packet+0x194>)
    572a:	4798      	blx	r3
    572c:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    572e:	2800      	cmp	r0, #0
    5730:	d1be      	bne.n	56b0 <_i2c_master_read_packet+0x6c>
    5732:	3c01      	subs	r4, #1
    5734:	b2a4      	uxth	r4, r4
    5736:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    5738:	4b28      	ldr	r3, [pc, #160]	; (57dc <_i2c_master_read_packet+0x198>)
    573a:	469b      	mov	fp, r3
    573c:	e015      	b.n	576a <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    573e:	2c01      	cmp	r4, #1
    5740:	d020      	beq.n	5784 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
    5742:	0030      	movs	r0, r6
    5744:	4b26      	ldr	r3, [pc, #152]	; (57e0 <_i2c_master_read_packet+0x19c>)
    5746:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    5748:	4643      	mov	r3, r8
    574a:	1c5f      	adds	r7, r3, #1
    574c:	b2bf      	uxth	r7, r7
    574e:	2328      	movs	r3, #40	; 0x28
    5750:	5ceb      	ldrb	r3, [r5, r3]
    5752:	464a      	mov	r2, r9
    5754:	6852      	ldr	r2, [r2, #4]
    5756:	4641      	mov	r1, r8
    5758:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    575a:	0030      	movs	r0, r6
    575c:	4b1c      	ldr	r3, [pc, #112]	; (57d0 <_i2c_master_read_packet+0x18c>)
    575e:	4798      	blx	r3
    5760:	3c01      	subs	r4, #1
    5762:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    5764:	2800      	cmp	r0, #0
    5766:	d115      	bne.n	5794 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
    5768:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    576a:	455c      	cmp	r4, fp
    576c:	d014      	beq.n	5798 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    576e:	8b6b      	ldrh	r3, [r5, #26]
    5770:	069b      	lsls	r3, r3, #26
    5772:	d527      	bpl.n	57c4 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    5774:	7af3      	ldrb	r3, [r6, #11]
    5776:	2b00      	cmp	r3, #0
    5778:	d0e3      	beq.n	5742 <_i2c_master_read_packet+0xfe>
    577a:	4653      	mov	r3, sl
    577c:	2b00      	cmp	r3, #0
    577e:	d1de      	bne.n	573e <_i2c_master_read_packet+0xfa>
    5780:	2c00      	cmp	r4, #0
    5782:	d1de      	bne.n	5742 <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5784:	686a      	ldr	r2, [r5, #4]
    5786:	2380      	movs	r3, #128	; 0x80
    5788:	02db      	lsls	r3, r3, #11
    578a:	4313      	orrs	r3, r2
    578c:	606b      	str	r3, [r5, #4]
    578e:	3c01      	subs	r4, #1
    5790:	b2a4      	uxth	r4, r4
    5792:	e7ea      	b.n	576a <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
    5794:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    5796:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    5798:	7ab3      	ldrb	r3, [r6, #10]
    579a:	2b00      	cmp	r3, #0
    579c:	d109      	bne.n	57b2 <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
    579e:	0030      	movs	r0, r6
    57a0:	4b0f      	ldr	r3, [pc, #60]	; (57e0 <_i2c_master_read_packet+0x19c>)
    57a2:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    57a4:	2328      	movs	r3, #40	; 0x28
    57a6:	5cea      	ldrb	r2, [r5, r3]
    57a8:	464b      	mov	r3, r9
    57aa:	685b      	ldr	r3, [r3, #4]
    57ac:	4641      	mov	r1, r8
    57ae:	545a      	strb	r2, [r3, r1]
    57b0:	e77e      	b.n	56b0 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
    57b2:	0030      	movs	r0, r6
    57b4:	4b0a      	ldr	r3, [pc, #40]	; (57e0 <_i2c_master_read_packet+0x19c>)
    57b6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    57b8:	686a      	ldr	r2, [r5, #4]
    57ba:	23c0      	movs	r3, #192	; 0xc0
    57bc:	029b      	lsls	r3, r3, #10
    57be:	4313      	orrs	r3, r2
    57c0:	606b      	str	r3, [r5, #4]
    57c2:	e7ec      	b.n	579e <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
    57c4:	2341      	movs	r3, #65	; 0x41
    57c6:	9301      	str	r3, [sp, #4]
    57c8:	e772      	b.n	56b0 <_i2c_master_read_packet+0x6c>
    57ca:	46c0      	nop			; (mov r8, r8)
    57cc:	fffbffff 	.word	0xfffbffff
    57d0:	000055f9 	.word	0x000055f9
    57d4:	00005625 	.word	0x00005625
    57d8:	000055c9 	.word	0x000055c9
    57dc:	0000ffff 	.word	0x0000ffff
    57e0:	000052b5 	.word	0x000052b5

000057e4 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    57e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    57e6:	46de      	mov	lr, fp
    57e8:	4657      	mov	r7, sl
    57ea:	464e      	mov	r6, r9
    57ec:	4645      	mov	r5, r8
    57ee:	b5e0      	push	{r5, r6, r7, lr}
    57f0:	b083      	sub	sp, #12
    57f2:	0006      	movs	r6, r0
    57f4:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    57f6:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    57f8:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    57fa:	4b32      	ldr	r3, [pc, #200]	; (58c4 <_i2c_master_write_packet+0xe0>)
    57fc:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    57fe:	7a7b      	ldrb	r3, [r7, #9]
    5800:	2b00      	cmp	r3, #0
    5802:	d11d      	bne.n	5840 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5804:	686b      	ldr	r3, [r5, #4]
    5806:	4a30      	ldr	r2, [pc, #192]	; (58c8 <_i2c_master_write_packet+0xe4>)
    5808:	4013      	ands	r3, r2
    580a:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    580c:	7a3b      	ldrb	r3, [r7, #8]
    580e:	2b00      	cmp	r3, #0
    5810:	d01b      	beq.n	584a <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    5812:	883b      	ldrh	r3, [r7, #0]
    5814:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5816:	7a7a      	ldrb	r2, [r7, #9]
    5818:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    581a:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    581c:	2280      	movs	r2, #128	; 0x80
    581e:	0212      	lsls	r2, r2, #8
    5820:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    5822:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    5824:	0030      	movs	r0, r6
    5826:	4b29      	ldr	r3, [pc, #164]	; (58cc <_i2c_master_write_packet+0xe8>)
    5828:	4798      	blx	r3
    582a:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    582c:	2800      	cmp	r0, #0
    582e:	d013      	beq.n	5858 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    5830:	9801      	ldr	r0, [sp, #4]
    5832:	b003      	add	sp, #12
    5834:	bc3c      	pop	{r2, r3, r4, r5}
    5836:	4690      	mov	r8, r2
    5838:	4699      	mov	r9, r3
    583a:	46a2      	mov	sl, r4
    583c:	46ab      	mov	fp, r5
    583e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    5840:	7ab9      	ldrb	r1, [r7, #10]
    5842:	0030      	movs	r0, r6
    5844:	4b22      	ldr	r3, [pc, #136]	; (58d0 <_i2c_master_write_packet+0xec>)
    5846:	4798      	blx	r3
    5848:	e7dc      	b.n	5804 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    584a:	883b      	ldrh	r3, [r7, #0]
    584c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    584e:	7a7a      	ldrb	r2, [r7, #9]
    5850:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    5852:	4313      	orrs	r3, r2
    5854:	626b      	str	r3, [r5, #36]	; 0x24
    5856:	e7e5      	b.n	5824 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    5858:	0030      	movs	r0, r6
    585a:	4b1e      	ldr	r3, [pc, #120]	; (58d4 <_i2c_master_write_packet+0xf0>)
    585c:	4798      	blx	r3
    585e:	1e03      	subs	r3, r0, #0
    5860:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    5862:	d1e5      	bne.n	5830 <_i2c_master_write_packet+0x4c>
    5864:	46a0      	mov	r8, r4
    5866:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    5868:	3320      	adds	r3, #32
    586a:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    586c:	4b15      	ldr	r3, [pc, #84]	; (58c4 <_i2c_master_write_packet+0xe0>)
    586e:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    5870:	4b16      	ldr	r3, [pc, #88]	; (58cc <_i2c_master_write_packet+0xe8>)
    5872:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    5874:	4544      	cmp	r4, r8
    5876:	d015      	beq.n	58a4 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    5878:	8b6b      	ldrh	r3, [r5, #26]
    587a:	464a      	mov	r2, r9
    587c:	4213      	tst	r3, r2
    587e:	d01d      	beq.n	58bc <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    5880:	0030      	movs	r0, r6
    5882:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    5884:	687b      	ldr	r3, [r7, #4]
    5886:	5d1a      	ldrb	r2, [r3, r4]
    5888:	2328      	movs	r3, #40	; 0x28
    588a:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    588c:	0030      	movs	r0, r6
    588e:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    5890:	2800      	cmp	r0, #0
    5892:	d106      	bne.n	58a2 <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    5894:	8b6b      	ldrh	r3, [r5, #26]
    5896:	3401      	adds	r4, #1
    5898:	075b      	lsls	r3, r3, #29
    589a:	d5eb      	bpl.n	5874 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    589c:	231e      	movs	r3, #30
    589e:	9301      	str	r3, [sp, #4]
    58a0:	e000      	b.n	58a4 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    58a2:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    58a4:	7ab3      	ldrb	r3, [r6, #10]
    58a6:	2b00      	cmp	r3, #0
    58a8:	d0c2      	beq.n	5830 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    58aa:	0030      	movs	r0, r6
    58ac:	4b05      	ldr	r3, [pc, #20]	; (58c4 <_i2c_master_write_packet+0xe0>)
    58ae:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    58b0:	686a      	ldr	r2, [r5, #4]
    58b2:	23c0      	movs	r3, #192	; 0xc0
    58b4:	029b      	lsls	r3, r3, #10
    58b6:	4313      	orrs	r3, r2
    58b8:	606b      	str	r3, [r5, #4]
    58ba:	e7b9      	b.n	5830 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    58bc:	2341      	movs	r3, #65	; 0x41
    58be:	9301      	str	r3, [sp, #4]
    58c0:	e7b6      	b.n	5830 <_i2c_master_write_packet+0x4c>
    58c2:	46c0      	nop			; (mov r8, r8)
    58c4:	000052b5 	.word	0x000052b5
    58c8:	fffbffff 	.word	0xfffbffff
    58cc:	000055f9 	.word	0x000055f9
    58d0:	00005625 	.word	0x00005625
    58d4:	000055c9 	.word	0x000055c9

000058d8 <i2c_master_read_packet_wait>:
{
    58d8:	b510      	push	{r4, lr}
	module->send_stop = true;
    58da:	2301      	movs	r3, #1
    58dc:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    58de:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    58e0:	4b01      	ldr	r3, [pc, #4]	; (58e8 <i2c_master_read_packet_wait+0x10>)
    58e2:	4798      	blx	r3
}
    58e4:	bd10      	pop	{r4, pc}
    58e6:	46c0      	nop			; (mov r8, r8)
    58e8:	00005645 	.word	0x00005645

000058ec <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    58ec:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = false;
    58ee:	2300      	movs	r3, #0
    58f0:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    58f2:	3301      	adds	r3, #1
    58f4:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
    58f6:	4b01      	ldr	r3, [pc, #4]	; (58fc <i2c_master_write_packet_wait_no_stop+0x10>)
    58f8:	4798      	blx	r3
}
    58fa:	bd10      	pop	{r4, pc}
    58fc:	000057e5 	.word	0x000057e5

00005900 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    5900:	b5f0      	push	{r4, r5, r6, r7, lr}
    5902:	46de      	mov	lr, fp
    5904:	4657      	mov	r7, sl
    5906:	464e      	mov	r6, r9
    5908:	4645      	mov	r5, r8
    590a:	b5e0      	push	{r5, r6, r7, lr}
    590c:	b087      	sub	sp, #28
    590e:	4680      	mov	r8, r0
    5910:	9104      	str	r1, [sp, #16]
    5912:	0016      	movs	r6, r2
    5914:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    5916:	2200      	movs	r2, #0
    5918:	2300      	movs	r3, #0
    591a:	2100      	movs	r1, #0
    591c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    591e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    5920:	2001      	movs	r0, #1
    5922:	0021      	movs	r1, r4
    5924:	9600      	str	r6, [sp, #0]
    5926:	9701      	str	r7, [sp, #4]
    5928:	465c      	mov	r4, fp
    592a:	9403      	str	r4, [sp, #12]
    592c:	4644      	mov	r4, r8
    592e:	9405      	str	r4, [sp, #20]
    5930:	e013      	b.n	595a <long_division+0x5a>
    5932:	2420      	movs	r4, #32
    5934:	1a64      	subs	r4, r4, r1
    5936:	0005      	movs	r5, r0
    5938:	40e5      	lsrs	r5, r4
    593a:	46a8      	mov	r8, r5
    593c:	e014      	b.n	5968 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    593e:	9c00      	ldr	r4, [sp, #0]
    5940:	9d01      	ldr	r5, [sp, #4]
    5942:	1b12      	subs	r2, r2, r4
    5944:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    5946:	465c      	mov	r4, fp
    5948:	464d      	mov	r5, r9
    594a:	432c      	orrs	r4, r5
    594c:	46a3      	mov	fp, r4
    594e:	9c03      	ldr	r4, [sp, #12]
    5950:	4645      	mov	r5, r8
    5952:	432c      	orrs	r4, r5
    5954:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    5956:	3901      	subs	r1, #1
    5958:	d325      	bcc.n	59a6 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    595a:	2420      	movs	r4, #32
    595c:	4264      	negs	r4, r4
    595e:	190c      	adds	r4, r1, r4
    5960:	d4e7      	bmi.n	5932 <long_division+0x32>
    5962:	0005      	movs	r5, r0
    5964:	40a5      	lsls	r5, r4
    5966:	46a8      	mov	r8, r5
    5968:	0004      	movs	r4, r0
    596a:	408c      	lsls	r4, r1
    596c:	46a1      	mov	r9, r4
		r = r << 1;
    596e:	1892      	adds	r2, r2, r2
    5970:	415b      	adcs	r3, r3
    5972:	0014      	movs	r4, r2
    5974:	001d      	movs	r5, r3
		if (n & bit_shift) {
    5976:	9e05      	ldr	r6, [sp, #20]
    5978:	464f      	mov	r7, r9
    597a:	403e      	ands	r6, r7
    597c:	46b4      	mov	ip, r6
    597e:	9e04      	ldr	r6, [sp, #16]
    5980:	4647      	mov	r7, r8
    5982:	403e      	ands	r6, r7
    5984:	46b2      	mov	sl, r6
    5986:	4666      	mov	r6, ip
    5988:	4657      	mov	r7, sl
    598a:	433e      	orrs	r6, r7
    598c:	d003      	beq.n	5996 <long_division+0x96>
			r |= 0x01;
    598e:	0006      	movs	r6, r0
    5990:	4326      	orrs	r6, r4
    5992:	0032      	movs	r2, r6
    5994:	002b      	movs	r3, r5
		if (r >= d) {
    5996:	9c00      	ldr	r4, [sp, #0]
    5998:	9d01      	ldr	r5, [sp, #4]
    599a:	429d      	cmp	r5, r3
    599c:	d8db      	bhi.n	5956 <long_division+0x56>
    599e:	d1ce      	bne.n	593e <long_division+0x3e>
    59a0:	4294      	cmp	r4, r2
    59a2:	d8d8      	bhi.n	5956 <long_division+0x56>
    59a4:	e7cb      	b.n	593e <long_division+0x3e>
    59a6:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    59a8:	4658      	mov	r0, fp
    59aa:	0019      	movs	r1, r3
    59ac:	b007      	add	sp, #28
    59ae:	bc3c      	pop	{r2, r3, r4, r5}
    59b0:	4690      	mov	r8, r2
    59b2:	4699      	mov	r9, r3
    59b4:	46a2      	mov	sl, r4
    59b6:	46ab      	mov	fp, r5
    59b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000059ba <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    59ba:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    59bc:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    59be:	2340      	movs	r3, #64	; 0x40
    59c0:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    59c2:	4281      	cmp	r1, r0
    59c4:	d202      	bcs.n	59cc <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    59c6:	0018      	movs	r0, r3
    59c8:	bd10      	pop	{r4, pc}
		baud_calculated++;
    59ca:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    59cc:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    59ce:	1c63      	adds	r3, r4, #1
    59d0:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    59d2:	4288      	cmp	r0, r1
    59d4:	d9f9      	bls.n	59ca <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    59d6:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    59d8:	2cff      	cmp	r4, #255	; 0xff
    59da:	d8f4      	bhi.n	59c6 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    59dc:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    59de:	2300      	movs	r3, #0
    59e0:	e7f1      	b.n	59c6 <_sercom_get_sync_baud_val+0xc>
    59e2:	Address 0x000059e2 is out of bounds.


000059e4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    59e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    59e6:	b083      	sub	sp, #12
    59e8:	000f      	movs	r7, r1
    59ea:	0016      	movs	r6, r2
    59ec:	aa08      	add	r2, sp, #32
    59ee:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    59f0:	0004      	movs	r4, r0
    59f2:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    59f4:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    59f6:	42bc      	cmp	r4, r7
    59f8:	d902      	bls.n	5a00 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    59fa:	0010      	movs	r0, r2
    59fc:	b003      	add	sp, #12
    59fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    5a00:	2b00      	cmp	r3, #0
    5a02:	d114      	bne.n	5a2e <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    5a04:	0002      	movs	r2, r0
    5a06:	0008      	movs	r0, r1
    5a08:	2100      	movs	r1, #0
    5a0a:	4c19      	ldr	r4, [pc, #100]	; (5a70 <_sercom_get_async_baud_val+0x8c>)
    5a0c:	47a0      	blx	r4
    5a0e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    5a10:	003a      	movs	r2, r7
    5a12:	2300      	movs	r3, #0
    5a14:	2000      	movs	r0, #0
    5a16:	4c17      	ldr	r4, [pc, #92]	; (5a74 <_sercom_get_async_baud_val+0x90>)
    5a18:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    5a1a:	2200      	movs	r2, #0
    5a1c:	2301      	movs	r3, #1
    5a1e:	1a12      	subs	r2, r2, r0
    5a20:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    5a22:	0c12      	lsrs	r2, r2, #16
    5a24:	041b      	lsls	r3, r3, #16
    5a26:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    5a28:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    5a2a:	2200      	movs	r2, #0
    5a2c:	e7e5      	b.n	59fa <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    5a2e:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    5a30:	2b01      	cmp	r3, #1
    5a32:	d1f9      	bne.n	5a28 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    5a34:	000a      	movs	r2, r1
    5a36:	2300      	movs	r3, #0
    5a38:	2100      	movs	r1, #0
    5a3a:	4c0d      	ldr	r4, [pc, #52]	; (5a70 <_sercom_get_async_baud_val+0x8c>)
    5a3c:	47a0      	blx	r4
    5a3e:	0002      	movs	r2, r0
    5a40:	000b      	movs	r3, r1
    5a42:	9200      	str	r2, [sp, #0]
    5a44:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    5a46:	0038      	movs	r0, r7
    5a48:	2100      	movs	r1, #0
    5a4a:	4c0a      	ldr	r4, [pc, #40]	; (5a74 <_sercom_get_async_baud_val+0x90>)
    5a4c:	47a0      	blx	r4
    5a4e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    5a50:	2380      	movs	r3, #128	; 0x80
    5a52:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5a54:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    5a56:	4298      	cmp	r0, r3
    5a58:	d8cf      	bhi.n	59fa <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    5a5a:	0f79      	lsrs	r1, r7, #29
    5a5c:	00f8      	lsls	r0, r7, #3
    5a5e:	9a00      	ldr	r2, [sp, #0]
    5a60:	9b01      	ldr	r3, [sp, #4]
    5a62:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    5a64:	00ea      	lsls	r2, r5, #3
    5a66:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    5a68:	b2d2      	uxtb	r2, r2
    5a6a:	0352      	lsls	r2, r2, #13
    5a6c:	432a      	orrs	r2, r5
    5a6e:	e7db      	b.n	5a28 <_sercom_get_async_baud_val+0x44>
    5a70:	000126fd 	.word	0x000126fd
    5a74:	00005901 	.word	0x00005901

00005a78 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    5a78:	b510      	push	{r4, lr}
    5a7a:	b082      	sub	sp, #8
    5a7c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    5a7e:	4b0e      	ldr	r3, [pc, #56]	; (5ab8 <sercom_set_gclk_generator+0x40>)
    5a80:	781b      	ldrb	r3, [r3, #0]
    5a82:	2b00      	cmp	r3, #0
    5a84:	d007      	beq.n	5a96 <sercom_set_gclk_generator+0x1e>
    5a86:	2900      	cmp	r1, #0
    5a88:	d105      	bne.n	5a96 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    5a8a:	4b0b      	ldr	r3, [pc, #44]	; (5ab8 <sercom_set_gclk_generator+0x40>)
    5a8c:	785b      	ldrb	r3, [r3, #1]
    5a8e:	4283      	cmp	r3, r0
    5a90:	d010      	beq.n	5ab4 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    5a92:	201d      	movs	r0, #29
    5a94:	e00c      	b.n	5ab0 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    5a96:	a901      	add	r1, sp, #4
    5a98:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    5a9a:	2011      	movs	r0, #17
    5a9c:	4b07      	ldr	r3, [pc, #28]	; (5abc <sercom_set_gclk_generator+0x44>)
    5a9e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    5aa0:	2011      	movs	r0, #17
    5aa2:	4b07      	ldr	r3, [pc, #28]	; (5ac0 <sercom_set_gclk_generator+0x48>)
    5aa4:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    5aa6:	4b04      	ldr	r3, [pc, #16]	; (5ab8 <sercom_set_gclk_generator+0x40>)
    5aa8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    5aaa:	2201      	movs	r2, #1
    5aac:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    5aae:	2000      	movs	r0, #0
}
    5ab0:	b002      	add	sp, #8
    5ab2:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    5ab4:	2000      	movs	r0, #0
    5ab6:	e7fb      	b.n	5ab0 <sercom_set_gclk_generator+0x38>
    5ab8:	200002c8 	.word	0x200002c8
    5abc:	00007095 	.word	0x00007095
    5ac0:	00007025 	.word	0x00007025

00005ac4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    5ac4:	4b3c      	ldr	r3, [pc, #240]	; (5bb8 <_sercom_get_default_pad+0xf4>)
    5ac6:	4298      	cmp	r0, r3
    5ac8:	d032      	beq.n	5b30 <_sercom_get_default_pad+0x6c>
    5aca:	d90a      	bls.n	5ae2 <_sercom_get_default_pad+0x1e>
    5acc:	4b3b      	ldr	r3, [pc, #236]	; (5bbc <_sercom_get_default_pad+0xf8>)
    5ace:	4298      	cmp	r0, r3
    5ad0:	d04e      	beq.n	5b70 <_sercom_get_default_pad+0xac>
    5ad2:	4b3b      	ldr	r3, [pc, #236]	; (5bc0 <_sercom_get_default_pad+0xfc>)
    5ad4:	4298      	cmp	r0, r3
    5ad6:	d055      	beq.n	5b84 <_sercom_get_default_pad+0xc0>
    5ad8:	4b3a      	ldr	r3, [pc, #232]	; (5bc4 <_sercom_get_default_pad+0x100>)
    5ada:	4298      	cmp	r0, r3
    5adc:	d038      	beq.n	5b50 <_sercom_get_default_pad+0x8c>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    5ade:	2000      	movs	r0, #0
}
    5ae0:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    5ae2:	2384      	movs	r3, #132	; 0x84
    5ae4:	05db      	lsls	r3, r3, #23
    5ae6:	4298      	cmp	r0, r3
    5ae8:	d00c      	beq.n	5b04 <_sercom_get_default_pad+0x40>
    5aea:	4b37      	ldr	r3, [pc, #220]	; (5bc8 <_sercom_get_default_pad+0x104>)
    5aec:	4298      	cmp	r0, r3
    5aee:	d1f6      	bne.n	5ade <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5af0:	2901      	cmp	r1, #1
    5af2:	d017      	beq.n	5b24 <_sercom_get_default_pad+0x60>
    5af4:	2900      	cmp	r1, #0
    5af6:	d057      	beq.n	5ba8 <_sercom_get_default_pad+0xe4>
    5af8:	2902      	cmp	r1, #2
    5afa:	d015      	beq.n	5b28 <_sercom_get_default_pad+0x64>
    5afc:	2903      	cmp	r1, #3
    5afe:	d015      	beq.n	5b2c <_sercom_get_default_pad+0x68>
	return 0;
    5b00:	2000      	movs	r0, #0
    5b02:	e7ed      	b.n	5ae0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5b04:	2901      	cmp	r1, #1
    5b06:	d007      	beq.n	5b18 <_sercom_get_default_pad+0x54>
    5b08:	2900      	cmp	r1, #0
    5b0a:	d04b      	beq.n	5ba4 <_sercom_get_default_pad+0xe0>
    5b0c:	2902      	cmp	r1, #2
    5b0e:	d005      	beq.n	5b1c <_sercom_get_default_pad+0x58>
    5b10:	2903      	cmp	r1, #3
    5b12:	d005      	beq.n	5b20 <_sercom_get_default_pad+0x5c>
	return 0;
    5b14:	2000      	movs	r0, #0
    5b16:	e7e3      	b.n	5ae0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5b18:	482c      	ldr	r0, [pc, #176]	; (5bcc <_sercom_get_default_pad+0x108>)
    5b1a:	e7e1      	b.n	5ae0 <_sercom_get_default_pad+0x1c>
    5b1c:	482c      	ldr	r0, [pc, #176]	; (5bd0 <_sercom_get_default_pad+0x10c>)
    5b1e:	e7df      	b.n	5ae0 <_sercom_get_default_pad+0x1c>
    5b20:	482c      	ldr	r0, [pc, #176]	; (5bd4 <_sercom_get_default_pad+0x110>)
    5b22:	e7dd      	b.n	5ae0 <_sercom_get_default_pad+0x1c>
    5b24:	482c      	ldr	r0, [pc, #176]	; (5bd8 <_sercom_get_default_pad+0x114>)
    5b26:	e7db      	b.n	5ae0 <_sercom_get_default_pad+0x1c>
    5b28:	482c      	ldr	r0, [pc, #176]	; (5bdc <_sercom_get_default_pad+0x118>)
    5b2a:	e7d9      	b.n	5ae0 <_sercom_get_default_pad+0x1c>
    5b2c:	482c      	ldr	r0, [pc, #176]	; (5be0 <_sercom_get_default_pad+0x11c>)
    5b2e:	e7d7      	b.n	5ae0 <_sercom_get_default_pad+0x1c>
    5b30:	2901      	cmp	r1, #1
    5b32:	d007      	beq.n	5b44 <_sercom_get_default_pad+0x80>
    5b34:	2900      	cmp	r1, #0
    5b36:	d039      	beq.n	5bac <_sercom_get_default_pad+0xe8>
    5b38:	2902      	cmp	r1, #2
    5b3a:	d005      	beq.n	5b48 <_sercom_get_default_pad+0x84>
    5b3c:	2903      	cmp	r1, #3
    5b3e:	d005      	beq.n	5b4c <_sercom_get_default_pad+0x88>
	return 0;
    5b40:	2000      	movs	r0, #0
    5b42:	e7cd      	b.n	5ae0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5b44:	4827      	ldr	r0, [pc, #156]	; (5be4 <_sercom_get_default_pad+0x120>)
    5b46:	e7cb      	b.n	5ae0 <_sercom_get_default_pad+0x1c>
    5b48:	4827      	ldr	r0, [pc, #156]	; (5be8 <_sercom_get_default_pad+0x124>)
    5b4a:	e7c9      	b.n	5ae0 <_sercom_get_default_pad+0x1c>
    5b4c:	4827      	ldr	r0, [pc, #156]	; (5bec <_sercom_get_default_pad+0x128>)
    5b4e:	e7c7      	b.n	5ae0 <_sercom_get_default_pad+0x1c>
    5b50:	2901      	cmp	r1, #1
    5b52:	d007      	beq.n	5b64 <_sercom_get_default_pad+0xa0>
    5b54:	2900      	cmp	r1, #0
    5b56:	d02b      	beq.n	5bb0 <_sercom_get_default_pad+0xec>
    5b58:	2902      	cmp	r1, #2
    5b5a:	d005      	beq.n	5b68 <_sercom_get_default_pad+0xa4>
    5b5c:	2903      	cmp	r1, #3
    5b5e:	d005      	beq.n	5b6c <_sercom_get_default_pad+0xa8>
	return 0;
    5b60:	2000      	movs	r0, #0
    5b62:	e7bd      	b.n	5ae0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5b64:	4822      	ldr	r0, [pc, #136]	; (5bf0 <_sercom_get_default_pad+0x12c>)
    5b66:	e7bb      	b.n	5ae0 <_sercom_get_default_pad+0x1c>
    5b68:	4822      	ldr	r0, [pc, #136]	; (5bf4 <_sercom_get_default_pad+0x130>)
    5b6a:	e7b9      	b.n	5ae0 <_sercom_get_default_pad+0x1c>
    5b6c:	4822      	ldr	r0, [pc, #136]	; (5bf8 <_sercom_get_default_pad+0x134>)
    5b6e:	e7b7      	b.n	5ae0 <_sercom_get_default_pad+0x1c>
    5b70:	2902      	cmp	r1, #2
    5b72:	d003      	beq.n	5b7c <_sercom_get_default_pad+0xb8>
    5b74:	2903      	cmp	r1, #3
    5b76:	d003      	beq.n	5b80 <_sercom_get_default_pad+0xbc>
    5b78:	2000      	movs	r0, #0
    5b7a:	e7b1      	b.n	5ae0 <_sercom_get_default_pad+0x1c>
    5b7c:	481f      	ldr	r0, [pc, #124]	; (5bfc <_sercom_get_default_pad+0x138>)
    5b7e:	e7af      	b.n	5ae0 <_sercom_get_default_pad+0x1c>
    5b80:	481f      	ldr	r0, [pc, #124]	; (5c00 <_sercom_get_default_pad+0x13c>)
    5b82:	e7ad      	b.n	5ae0 <_sercom_get_default_pad+0x1c>
    5b84:	2901      	cmp	r1, #1
    5b86:	d007      	beq.n	5b98 <_sercom_get_default_pad+0xd4>
    5b88:	2900      	cmp	r1, #0
    5b8a:	d013      	beq.n	5bb4 <_sercom_get_default_pad+0xf0>
    5b8c:	2902      	cmp	r1, #2
    5b8e:	d005      	beq.n	5b9c <_sercom_get_default_pad+0xd8>
    5b90:	2903      	cmp	r1, #3
    5b92:	d005      	beq.n	5ba0 <_sercom_get_default_pad+0xdc>
	return 0;
    5b94:	2000      	movs	r0, #0
    5b96:	e7a3      	b.n	5ae0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5b98:	481a      	ldr	r0, [pc, #104]	; (5c04 <_sercom_get_default_pad+0x140>)
    5b9a:	e7a1      	b.n	5ae0 <_sercom_get_default_pad+0x1c>
    5b9c:	481a      	ldr	r0, [pc, #104]	; (5c08 <_sercom_get_default_pad+0x144>)
    5b9e:	e79f      	b.n	5ae0 <_sercom_get_default_pad+0x1c>
    5ba0:	481a      	ldr	r0, [pc, #104]	; (5c0c <_sercom_get_default_pad+0x148>)
    5ba2:	e79d      	b.n	5ae0 <_sercom_get_default_pad+0x1c>
    5ba4:	481a      	ldr	r0, [pc, #104]	; (5c10 <_sercom_get_default_pad+0x14c>)
    5ba6:	e79b      	b.n	5ae0 <_sercom_get_default_pad+0x1c>
    5ba8:	2003      	movs	r0, #3
    5baa:	e799      	b.n	5ae0 <_sercom_get_default_pad+0x1c>
    5bac:	4819      	ldr	r0, [pc, #100]	; (5c14 <_sercom_get_default_pad+0x150>)
    5bae:	e797      	b.n	5ae0 <_sercom_get_default_pad+0x1c>
    5bb0:	4819      	ldr	r0, [pc, #100]	; (5c18 <_sercom_get_default_pad+0x154>)
    5bb2:	e795      	b.n	5ae0 <_sercom_get_default_pad+0x1c>
    5bb4:	4819      	ldr	r0, [pc, #100]	; (5c1c <_sercom_get_default_pad+0x158>)
    5bb6:	e793      	b.n	5ae0 <_sercom_get_default_pad+0x1c>
    5bb8:	42000800 	.word	0x42000800
    5bbc:	42001000 	.word	0x42001000
    5bc0:	43000400 	.word	0x43000400
    5bc4:	42000c00 	.word	0x42000c00
    5bc8:	42000400 	.word	0x42000400
    5bcc:	00050003 	.word	0x00050003
    5bd0:	00060003 	.word	0x00060003
    5bd4:	00070003 	.word	0x00070003
    5bd8:	00010003 	.word	0x00010003
    5bdc:	001e0003 	.word	0x001e0003
    5be0:	001f0003 	.word	0x001f0003
    5be4:	00090003 	.word	0x00090003
    5be8:	000a0003 	.word	0x000a0003
    5bec:	000b0003 	.word	0x000b0003
    5bf0:	00110003 	.word	0x00110003
    5bf4:	00120003 	.word	0x00120003
    5bf8:	00130003 	.word	0x00130003
    5bfc:	000e0003 	.word	0x000e0003
    5c00:	000f0003 	.word	0x000f0003
    5c04:	00170003 	.word	0x00170003
    5c08:	00180003 	.word	0x00180003
    5c0c:	00190003 	.word	0x00190003
    5c10:	00040003 	.word	0x00040003
    5c14:	00080003 	.word	0x00080003
    5c18:	00100003 	.word	0x00100003
    5c1c:	00160003 	.word	0x00160003

00005c20 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    5c20:	b530      	push	{r4, r5, lr}
    5c22:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    5c24:	4b0b      	ldr	r3, [pc, #44]	; (5c54 <_sercom_get_sercom_inst_index+0x34>)
    5c26:	466a      	mov	r2, sp
    5c28:	cb32      	ldmia	r3!, {r1, r4, r5}
    5c2a:	c232      	stmia	r2!, {r1, r4, r5}
    5c2c:	cb32      	ldmia	r3!, {r1, r4, r5}
    5c2e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    5c30:	9b00      	ldr	r3, [sp, #0]
    5c32:	4283      	cmp	r3, r0
    5c34:	d00b      	beq.n	5c4e <_sercom_get_sercom_inst_index+0x2e>
    5c36:	2301      	movs	r3, #1
    5c38:	009a      	lsls	r2, r3, #2
    5c3a:	4669      	mov	r1, sp
    5c3c:	5852      	ldr	r2, [r2, r1]
    5c3e:	4282      	cmp	r2, r0
    5c40:	d006      	beq.n	5c50 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5c42:	3301      	adds	r3, #1
    5c44:	2b06      	cmp	r3, #6
    5c46:	d1f7      	bne.n	5c38 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    5c48:	2000      	movs	r0, #0
}
    5c4a:	b007      	add	sp, #28
    5c4c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5c4e:	2300      	movs	r3, #0
			return i;
    5c50:	b2d8      	uxtb	r0, r3
    5c52:	e7fa      	b.n	5c4a <_sercom_get_sercom_inst_index+0x2a>
    5c54:	00017000 	.word	0x00017000

00005c58 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    5c58:	4770      	bx	lr
    5c5a:	Address 0x00005c5a is out of bounds.


00005c5c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    5c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    5c5e:	4b0a      	ldr	r3, [pc, #40]	; (5c88 <_sercom_set_handler+0x2c>)
    5c60:	781b      	ldrb	r3, [r3, #0]
    5c62:	2b00      	cmp	r3, #0
    5c64:	d10c      	bne.n	5c80 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    5c66:	4f09      	ldr	r7, [pc, #36]	; (5c8c <_sercom_set_handler+0x30>)
    5c68:	4e09      	ldr	r6, [pc, #36]	; (5c90 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    5c6a:	4d0a      	ldr	r5, [pc, #40]	; (5c94 <_sercom_set_handler+0x38>)
    5c6c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    5c6e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    5c70:	195a      	adds	r2, r3, r5
    5c72:	6014      	str	r4, [r2, #0]
    5c74:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5c76:	2b18      	cmp	r3, #24
    5c78:	d1f9      	bne.n	5c6e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    5c7a:	2201      	movs	r2, #1
    5c7c:	4b02      	ldr	r3, [pc, #8]	; (5c88 <_sercom_set_handler+0x2c>)
    5c7e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    5c80:	0080      	lsls	r0, r0, #2
    5c82:	4b02      	ldr	r3, [pc, #8]	; (5c8c <_sercom_set_handler+0x30>)
    5c84:	50c1      	str	r1, [r0, r3]
}
    5c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c88:	200002ca 	.word	0x200002ca
    5c8c:	200002cc 	.word	0x200002cc
    5c90:	00005c59 	.word	0x00005c59
    5c94:	200020f0 	.word	0x200020f0

00005c98 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    5c98:	b500      	push	{lr}
    5c9a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    5c9c:	2308      	movs	r3, #8
    5c9e:	466a      	mov	r2, sp
    5ca0:	7013      	strb	r3, [r2, #0]
    5ca2:	3301      	adds	r3, #1
    5ca4:	7053      	strb	r3, [r2, #1]
    5ca6:	3301      	adds	r3, #1
    5ca8:	7093      	strb	r3, [r2, #2]
    5caa:	3301      	adds	r3, #1
    5cac:	70d3      	strb	r3, [r2, #3]
    5cae:	3301      	adds	r3, #1
    5cb0:	7113      	strb	r3, [r2, #4]
    5cb2:	3301      	adds	r3, #1
    5cb4:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    5cb6:	4b03      	ldr	r3, [pc, #12]	; (5cc4 <_sercom_get_interrupt_vector+0x2c>)
    5cb8:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    5cba:	466b      	mov	r3, sp
    5cbc:	5618      	ldrsb	r0, [r3, r0]
}
    5cbe:	b003      	add	sp, #12
    5cc0:	bd00      	pop	{pc}
    5cc2:	46c0      	nop			; (mov r8, r8)
    5cc4:	00005c21 	.word	0x00005c21

00005cc8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    5cc8:	b510      	push	{r4, lr}
    5cca:	4b02      	ldr	r3, [pc, #8]	; (5cd4 <SERCOM0_Handler+0xc>)
    5ccc:	681b      	ldr	r3, [r3, #0]
    5cce:	2000      	movs	r0, #0
    5cd0:	4798      	blx	r3
    5cd2:	bd10      	pop	{r4, pc}
    5cd4:	200002cc 	.word	0x200002cc

00005cd8 <SERCOM1_Handler>:
    5cd8:	b510      	push	{r4, lr}
    5cda:	4b02      	ldr	r3, [pc, #8]	; (5ce4 <SERCOM1_Handler+0xc>)
    5cdc:	685b      	ldr	r3, [r3, #4]
    5cde:	2001      	movs	r0, #1
    5ce0:	4798      	blx	r3
    5ce2:	bd10      	pop	{r4, pc}
    5ce4:	200002cc 	.word	0x200002cc

00005ce8 <SERCOM2_Handler>:
    5ce8:	b510      	push	{r4, lr}
    5cea:	4b02      	ldr	r3, [pc, #8]	; (5cf4 <SERCOM2_Handler+0xc>)
    5cec:	689b      	ldr	r3, [r3, #8]
    5cee:	2002      	movs	r0, #2
    5cf0:	4798      	blx	r3
    5cf2:	bd10      	pop	{r4, pc}
    5cf4:	200002cc 	.word	0x200002cc

00005cf8 <SERCOM3_Handler>:
    5cf8:	b510      	push	{r4, lr}
    5cfa:	4b02      	ldr	r3, [pc, #8]	; (5d04 <SERCOM3_Handler+0xc>)
    5cfc:	68db      	ldr	r3, [r3, #12]
    5cfe:	2003      	movs	r0, #3
    5d00:	4798      	blx	r3
    5d02:	bd10      	pop	{r4, pc}
    5d04:	200002cc 	.word	0x200002cc

00005d08 <SERCOM4_Handler>:
    5d08:	b510      	push	{r4, lr}
    5d0a:	4b02      	ldr	r3, [pc, #8]	; (5d14 <SERCOM4_Handler+0xc>)
    5d0c:	691b      	ldr	r3, [r3, #16]
    5d0e:	2004      	movs	r0, #4
    5d10:	4798      	blx	r3
    5d12:	bd10      	pop	{r4, pc}
    5d14:	200002cc 	.word	0x200002cc

00005d18 <SERCOM5_Handler>:
    5d18:	b510      	push	{r4, lr}
    5d1a:	4b02      	ldr	r3, [pc, #8]	; (5d24 <SERCOM5_Handler+0xc>)
    5d1c:	695b      	ldr	r3, [r3, #20]
    5d1e:	2005      	movs	r0, #5
    5d20:	4798      	blx	r3
    5d22:	bd10      	pop	{r4, pc}
    5d24:	200002cc 	.word	0x200002cc

00005d28 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    5d28:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d2a:	46d6      	mov	lr, sl
    5d2c:	464f      	mov	r7, r9
    5d2e:	4646      	mov	r6, r8
    5d30:	b5c0      	push	{r6, r7, lr}
    5d32:	b08a      	sub	sp, #40	; 0x28
    5d34:	0006      	movs	r6, r0
    5d36:	000f      	movs	r7, r1
    5d38:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    5d3a:	6031      	str	r1, [r6, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    5d3c:	680b      	ldr	r3, [r1, #0]
    5d3e:	079b      	lsls	r3, r3, #30
    5d40:	d40a      	bmi.n	5d58 <spi_init+0x30>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    5d42:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    5d44:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    5d46:	07db      	lsls	r3, r3, #31
    5d48:	d400      	bmi.n	5d4c <spi_init+0x24>
    5d4a:	e0af      	b.n	5eac <spi_init+0x184>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    5d4c:	b00a      	add	sp, #40	; 0x28
    5d4e:	bc1c      	pop	{r2, r3, r4}
    5d50:	4690      	mov	r8, r2
    5d52:	4699      	mov	r9, r3
    5d54:	46a2      	mov	sl, r4
    5d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    5d58:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5d5a:	9305      	str	r3, [sp, #20]
    5d5c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    5d5e:	9306      	str	r3, [sp, #24]
    5d60:	6b13      	ldr	r3, [r2, #48]	; 0x30
    5d62:	9307      	str	r3, [sp, #28]
    5d64:	6b53      	ldr	r3, [r2, #52]	; 0x34
    5d66:	9308      	str	r3, [sp, #32]
    5d68:	2500      	movs	r5, #0
    5d6a:	e00a      	b.n	5d82 <spi_init+0x5a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5d6c:	0038      	movs	r0, r7
    5d6e:	4bb6      	ldr	r3, [pc, #728]	; (6048 <spi_init+0x320>)
    5d70:	4798      	blx	r3
    5d72:	e00e      	b.n	5d92 <spi_init+0x6a>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    5d74:	230f      	movs	r3, #15
    5d76:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    5d78:	4581      	cmp	r9, r0
    5d7a:	d130      	bne.n	5dde <spi_init+0xb6>
    5d7c:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    5d7e:	2d04      	cmp	r5, #4
    5d80:	d031      	beq.n	5de6 <spi_init+0xbe>
    5d82:	b2e9      	uxtb	r1, r5
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5d84:	00ab      	lsls	r3, r5, #2
    5d86:	aa02      	add	r2, sp, #8
    5d88:	200c      	movs	r0, #12
    5d8a:	1812      	adds	r2, r2, r0
    5d8c:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    5d8e:	2800      	cmp	r0, #0
    5d90:	d0ec      	beq.n	5d6c <spi_init+0x44>
		if (current_pinmux == PINMUX_UNUSED) {
    5d92:	1c43      	adds	r3, r0, #1
    5d94:	d0f2      	beq.n	5d7c <spi_init+0x54>
		if ((current_pinmux & 0xFFFF) !=
    5d96:	0401      	lsls	r1, r0, #16
    5d98:	0c0b      	lsrs	r3, r1, #16
    5d9a:	4699      	mov	r9, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    5d9c:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    5d9e:	b2c3      	uxtb	r3, r0
    5da0:	469c      	mov	ip, r3
		return NULL;
    5da2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5da4:	0602      	lsls	r2, r0, #24
    5da6:	d405      	bmi.n	5db4 <spi_init+0x8c>
		return &(ports[port_index]->Group[group_index]);
    5da8:	4663      	mov	r3, ip
    5daa:	095b      	lsrs	r3, r3, #5
    5dac:	01db      	lsls	r3, r3, #7
    5dae:	4aa7      	ldr	r2, [pc, #668]	; (604c <spi_init+0x324>)
    5db0:	4690      	mov	r8, r2
    5db2:	4443      	add	r3, r8
	uint32_t pin_index = (gpio_pin % 32);
    5db4:	221f      	movs	r2, #31
    5db6:	4660      	mov	r0, ip
    5db8:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    5dba:	1898      	adds	r0, r3, r2
    5dbc:	3040      	adds	r0, #64	; 0x40
    5dbe:	7800      	ldrb	r0, [r0, #0]
    5dc0:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    5dc2:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    5dc4:	4651      	mov	r1, sl
    5dc6:	07c9      	lsls	r1, r1, #31
    5dc8:	d5d6      	bpl.n	5d78 <spi_init+0x50>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    5dca:	0852      	lsrs	r2, r2, #1
    5dcc:	189b      	adds	r3, r3, r2
    5dce:	3330      	adds	r3, #48	; 0x30
    5dd0:	7818      	ldrb	r0, [r3, #0]
    5dd2:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    5dd4:	4663      	mov	r3, ip
    5dd6:	07db      	lsls	r3, r3, #31
    5dd8:	d5cc      	bpl.n	5d74 <spi_init+0x4c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    5dda:	0900      	lsrs	r0, r0, #4
    5ddc:	e7cc      	b.n	5d78 <spi_init+0x50>
			module->hw = NULL;
    5dde:	2300      	movs	r3, #0
    5de0:	6033      	str	r3, [r6, #0]
			return STATUS_ERR_DENIED;
    5de2:	201c      	movs	r0, #28
    5de4:	e7b2      	b.n	5d4c <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    5de6:	2011      	movs	r0, #17
    5de8:	4b99      	ldr	r3, [pc, #612]	; (6050 <spi_init+0x328>)
    5dea:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    5dec:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    5dee:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    5df0:	2a01      	cmp	r2, #1
    5df2:	d016      	beq.n	5e22 <spi_init+0xfa>
	if (config->mode == SPI_MODE_SLAVE) {
    5df4:	7821      	ldrb	r1, [r4, #0]
    5df6:	2900      	cmp	r1, #0
    5df8:	d127      	bne.n	5e4a <spi_init+0x122>
		if (spi_module->CTRLA.reg != addr) {
    5dfa:	683b      	ldr	r3, [r7, #0]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    5dfc:	7fe2      	ldrb	r2, [r4, #31]
    5dfe:	0412      	lsls	r2, r2, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    5e00:	7fa0      	ldrb	r0, [r4, #30]
    5e02:	4302      	orrs	r2, r0
			return STATUS_ERR_DENIED;
    5e04:	201c      	movs	r0, #28
		if (spi_module->CTRLA.reg != addr) {
    5e06:	429a      	cmp	r2, r3
    5e08:	d1a0      	bne.n	5d4c <spi_init+0x24>
		ctrla |= config->mode_specific.slave.frame_format;
    5e0a:	69a3      	ldr	r3, [r4, #24]
		ctrlb |= config->mode_specific.slave.address_mode;
    5e0c:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
    5e0e:	3004      	adds	r0, #4
    5e10:	5c20      	ldrb	r0, [r4, r0]
    5e12:	2800      	cmp	r0, #0
    5e14:	d001      	beq.n	5e1a <spi_init+0xf2>
    5e16:	2040      	movs	r0, #64	; 0x40
    5e18:	4302      	orrs	r2, r0
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    5e1a:	2008      	movs	r0, #8
    5e1c:	4303      	orrs	r3, r0
    5e1e:	431d      	orrs	r5, r3
    5e20:	e014      	b.n	5e4c <spi_init+0x124>
		enum status_code error_code = _sercom_get_sync_baud_val(
    5e22:	aa04      	add	r2, sp, #16
    5e24:	0001      	movs	r1, r0
    5e26:	69a0      	ldr	r0, [r4, #24]
    5e28:	4b8a      	ldr	r3, [pc, #552]	; (6054 <spi_init+0x32c>)
    5e2a:	4798      	blx	r3
    5e2c:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    5e2e:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    5e30:	2b00      	cmp	r3, #0
    5e32:	d000      	beq.n	5e36 <spi_init+0x10e>
    5e34:	e78a      	b.n	5d4c <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    5e36:	7b3b      	ldrb	r3, [r7, #12]
    5e38:	b2db      	uxtb	r3, r3
    5e3a:	aa04      	add	r2, sp, #16
    5e3c:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    5e3e:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    5e40:	429a      	cmp	r2, r3
    5e42:	d000      	beq.n	5e46 <spi_init+0x11e>
    5e44:	e782      	b.n	5d4c <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    5e46:	350c      	adds	r5, #12
    5e48:	e7d4      	b.n	5df4 <spi_init+0xcc>
	uint32_t ctrlb = 0;
    5e4a:	2200      	movs	r2, #0
	ctrla |= config->mux_setting;
    5e4c:	6863      	ldr	r3, [r4, #4]
    5e4e:	68a0      	ldr	r0, [r4, #8]
    5e50:	4303      	orrs	r3, r0
    5e52:	68e0      	ldr	r0, [r4, #12]
    5e54:	4303      	orrs	r3, r0
    5e56:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    5e58:	7c20      	ldrb	r0, [r4, #16]
    5e5a:	4302      	orrs	r2, r0
	if (config->run_in_standby) {
    5e5c:	7c60      	ldrb	r0, [r4, #17]
    5e5e:	2800      	cmp	r0, #0
    5e60:	d001      	beq.n	5e66 <spi_init+0x13e>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    5e62:	2080      	movs	r0, #128	; 0x80
    5e64:	4303      	orrs	r3, r0
	if (config->receiver_enable) {
    5e66:	7ca0      	ldrb	r0, [r4, #18]
    5e68:	2800      	cmp	r0, #0
    5e6a:	d002      	beq.n	5e72 <spi_init+0x14a>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    5e6c:	2080      	movs	r0, #128	; 0x80
    5e6e:	0280      	lsls	r0, r0, #10
    5e70:	4302      	orrs	r2, r0
	if (config->select_slave_low_detect_enable) {
    5e72:	7ce0      	ldrb	r0, [r4, #19]
    5e74:	2800      	cmp	r0, #0
    5e76:	d002      	beq.n	5e7e <spi_init+0x156>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    5e78:	2080      	movs	r0, #128	; 0x80
    5e7a:	0080      	lsls	r0, r0, #2
    5e7c:	4302      	orrs	r2, r0
	if (config->master_slave_select_enable) {
    5e7e:	7d20      	ldrb	r0, [r4, #20]
    5e80:	2800      	cmp	r0, #0
    5e82:	d002      	beq.n	5e8a <spi_init+0x162>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    5e84:	2080      	movs	r0, #128	; 0x80
    5e86:	0180      	lsls	r0, r0, #6
    5e88:	4302      	orrs	r2, r0
	if (spi_module->CTRLA.reg == ctrla &&
    5e8a:	6838      	ldr	r0, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    5e8c:	2502      	movs	r5, #2
    5e8e:	432b      	orrs	r3, r5
	if (spi_module->CTRLA.reg == ctrla &&
    5e90:	4283      	cmp	r3, r0
    5e92:	d003      	beq.n	5e9c <spi_init+0x174>
	module->hw = NULL;
    5e94:	2300      	movs	r3, #0
    5e96:	6033      	str	r3, [r6, #0]
	return STATUS_ERR_DENIED;
    5e98:	201c      	movs	r0, #28
    5e9a:	e757      	b.n	5d4c <spi_init+0x24>
			spi_module->CTRLB.reg == ctrlb) {
    5e9c:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    5e9e:	4293      	cmp	r3, r2
    5ea0:	d1f8      	bne.n	5e94 <spi_init+0x16c>
		module->mode           = config->mode;
    5ea2:	7171      	strb	r1, [r6, #5]
		module->character_size = config->character_size;
    5ea4:	7c23      	ldrb	r3, [r4, #16]
    5ea6:	71b3      	strb	r3, [r6, #6]
		return STATUS_OK;
    5ea8:	2000      	movs	r0, #0
    5eaa:	e74f      	b.n	5d4c <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5eac:	0008      	movs	r0, r1
    5eae:	4b6a      	ldr	r3, [pc, #424]	; (6058 <spi_init+0x330>)
    5eb0:	4798      	blx	r3
	if (sercom_index == 5) {
    5eb2:	2805      	cmp	r0, #5
    5eb4:	d100      	bne.n	5eb8 <spi_init+0x190>
    5eb6:	e0bf      	b.n	6038 <spi_init+0x310>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5eb8:	0003      	movs	r3, r0
    5eba:	3312      	adds	r3, #18
			MCLK->APBCMASK.reg |= mask;
    5ebc:	4967      	ldr	r1, [pc, #412]	; (605c <spi_init+0x334>)
    5ebe:	69cd      	ldr	r5, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5ec0:	2201      	movs	r2, #1
    5ec2:	4082      	lsls	r2, r0
    5ec4:	432a      	orrs	r2, r5
    5ec6:	61ca      	str	r2, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    5ec8:	a909      	add	r1, sp, #36	; 0x24
    5eca:	2524      	movs	r5, #36	; 0x24
    5ecc:	5d62      	ldrb	r2, [r4, r5]
    5ece:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5ed0:	b2db      	uxtb	r3, r3
    5ed2:	9301      	str	r3, [sp, #4]
    5ed4:	0018      	movs	r0, r3
    5ed6:	4b62      	ldr	r3, [pc, #392]	; (6060 <spi_init+0x338>)
    5ed8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    5eda:	9801      	ldr	r0, [sp, #4]
    5edc:	4b61      	ldr	r3, [pc, #388]	; (6064 <spi_init+0x33c>)
    5ede:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5ee0:	5d60      	ldrb	r0, [r4, r5]
    5ee2:	2100      	movs	r1, #0
    5ee4:	4b60      	ldr	r3, [pc, #384]	; (6068 <spi_init+0x340>)
    5ee6:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    5ee8:	7823      	ldrb	r3, [r4, #0]
    5eea:	2b01      	cmp	r3, #1
    5eec:	d020      	beq.n	5f30 <spi_init+0x208>
	if (config->mode == SPI_MODE_SLAVE) {
    5eee:	7823      	ldrb	r3, [r4, #0]
    5ef0:	2b00      	cmp	r3, #0
    5ef2:	d103      	bne.n	5efc <spi_init+0x1d4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    5ef4:	683b      	ldr	r3, [r7, #0]
    5ef6:	2208      	movs	r2, #8
    5ef8:	4313      	orrs	r3, r2
    5efa:	603b      	str	r3, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5efc:	6833      	ldr	r3, [r6, #0]
    5efe:	4698      	mov	r8, r3
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5f00:	ab04      	add	r3, sp, #16
    5f02:	2280      	movs	r2, #128	; 0x80
    5f04:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5f06:	2200      	movs	r2, #0
    5f08:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5f0a:	2101      	movs	r1, #1
    5f0c:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    5f0e:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    5f10:	7823      	ldrb	r3, [r4, #0]
    5f12:	2b00      	cmp	r3, #0
    5f14:	d101      	bne.n	5f1a <spi_init+0x1f2>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    5f16:	ab04      	add	r3, sp, #16
    5f18:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    5f1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5f1c:	9305      	str	r3, [sp, #20]
    5f1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5f20:	9306      	str	r3, [sp, #24]
    5f22:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5f24:	9307      	str	r3, [sp, #28]
    5f26:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5f28:	9308      	str	r3, [sp, #32]
    5f2a:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5f2c:	ad05      	add	r5, sp, #20
    5f2e:	e011      	b.n	5f54 <spi_init+0x22c>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    5f30:	683b      	ldr	r3, [r7, #0]
    5f32:	220c      	movs	r2, #12
    5f34:	4313      	orrs	r3, r2
    5f36:	603b      	str	r3, [r7, #0]
    5f38:	e7d9      	b.n	5eee <spi_init+0x1c6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5f3a:	4640      	mov	r0, r8
    5f3c:	4b42      	ldr	r3, [pc, #264]	; (6048 <spi_init+0x320>)
    5f3e:	4798      	blx	r3
    5f40:	e00d      	b.n	5f5e <spi_init+0x236>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    5f42:	a904      	add	r1, sp, #16
    5f44:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    5f46:	0c00      	lsrs	r0, r0, #16
    5f48:	b2c0      	uxtb	r0, r0
    5f4a:	4b48      	ldr	r3, [pc, #288]	; (606c <spi_init+0x344>)
    5f4c:	4798      	blx	r3
    5f4e:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    5f50:	2f04      	cmp	r7, #4
    5f52:	d007      	beq.n	5f64 <spi_init+0x23c>
    5f54:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5f56:	00bb      	lsls	r3, r7, #2
    5f58:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    5f5a:	2800      	cmp	r0, #0
    5f5c:	d0ed      	beq.n	5f3a <spi_init+0x212>
		if (current_pinmux != PINMUX_UNUSED) {
    5f5e:	1c43      	adds	r3, r0, #1
    5f60:	d1ef      	bne.n	5f42 <spi_init+0x21a>
    5f62:	e7f4      	b.n	5f4e <spi_init+0x226>
	module->mode             = config->mode;
    5f64:	7823      	ldrb	r3, [r4, #0]
    5f66:	7173      	strb	r3, [r6, #5]
	module->character_size   = config->character_size;
    5f68:	7c23      	ldrb	r3, [r4, #16]
    5f6a:	71b3      	strb	r3, [r6, #6]
	module->receiver_enabled = config->receiver_enable;
    5f6c:	7ca3      	ldrb	r3, [r4, #18]
    5f6e:	71f3      	strb	r3, [r6, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    5f70:	7d23      	ldrb	r3, [r4, #20]
    5f72:	7233      	strb	r3, [r6, #8]
	uint16_t baud = 0;
    5f74:	2200      	movs	r2, #0
    5f76:	ab02      	add	r3, sp, #8
    5f78:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    5f7a:	7823      	ldrb	r3, [r4, #0]
    5f7c:	2b01      	cmp	r3, #1
    5f7e:	d014      	beq.n	5faa <spi_init+0x282>
	if (config->mode == SPI_MODE_SLAVE) {
    5f80:	7823      	ldrb	r3, [r4, #0]
    5f82:	2b00      	cmp	r3, #0
    5f84:	d129      	bne.n	5fda <spi_init+0x2b2>
		ctrla = config->mode_specific.slave.frame_format;
    5f86:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    5f88:	8ba2      	ldrh	r2, [r4, #28]
		spi_module->ADDR.reg |=
    5f8a:	4643      	mov	r3, r8
    5f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    5f8e:	7fe1      	ldrb	r1, [r4, #31]
    5f90:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    5f92:	7fa5      	ldrb	r5, [r4, #30]
    5f94:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
    5f96:	4319      	orrs	r1, r3
    5f98:	4643      	mov	r3, r8
    5f9a:	6259      	str	r1, [r3, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    5f9c:	2320      	movs	r3, #32
    5f9e:	5ce3      	ldrb	r3, [r4, r3]
    5fa0:	2b00      	cmp	r3, #0
    5fa2:	d01c      	beq.n	5fde <spi_init+0x2b6>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    5fa4:	2340      	movs	r3, #64	; 0x40
    5fa6:	431a      	orrs	r2, r3
    5fa8:	e019      	b.n	5fde <spi_init+0x2b6>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5faa:	6830      	ldr	r0, [r6, #0]
    5fac:	4b2a      	ldr	r3, [pc, #168]	; (6058 <spi_init+0x330>)
    5fae:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5fb0:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    5fb2:	b2c0      	uxtb	r0, r0
    5fb4:	4b26      	ldr	r3, [pc, #152]	; (6050 <spi_init+0x328>)
    5fb6:	4798      	blx	r3
    5fb8:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    5fba:	ab02      	add	r3, sp, #8
    5fbc:	1d9a      	adds	r2, r3, #6
    5fbe:	69a0      	ldr	r0, [r4, #24]
    5fc0:	4b24      	ldr	r3, [pc, #144]	; (6054 <spi_init+0x32c>)
    5fc2:	4798      	blx	r3
    5fc4:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    5fc6:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    5fc8:	2b00      	cmp	r3, #0
    5fca:	d000      	beq.n	5fce <spi_init+0x2a6>
    5fcc:	e6be      	b.n	5d4c <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    5fce:	ab02      	add	r3, sp, #8
    5fd0:	3306      	adds	r3, #6
    5fd2:	781b      	ldrb	r3, [r3, #0]
    5fd4:	4642      	mov	r2, r8
    5fd6:	7313      	strb	r3, [r2, #12]
    5fd8:	e7d2      	b.n	5f80 <spi_init+0x258>
	uint32_t ctrlb = 0;
    5fda:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    5fdc:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    5fde:	6863      	ldr	r3, [r4, #4]
    5fe0:	68a1      	ldr	r1, [r4, #8]
    5fe2:	430b      	orrs	r3, r1
    5fe4:	68e1      	ldr	r1, [r4, #12]
    5fe6:	430b      	orrs	r3, r1
    5fe8:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    5fea:	7c21      	ldrb	r1, [r4, #16]
    5fec:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    5fee:	7c61      	ldrb	r1, [r4, #17]
    5ff0:	2900      	cmp	r1, #0
    5ff2:	d103      	bne.n	5ffc <spi_init+0x2d4>
    5ff4:	491e      	ldr	r1, [pc, #120]	; (6070 <spi_init+0x348>)
    5ff6:	7889      	ldrb	r1, [r1, #2]
    5ff8:	0789      	lsls	r1, r1, #30
    5ffa:	d501      	bpl.n	6000 <spi_init+0x2d8>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    5ffc:	2180      	movs	r1, #128	; 0x80
    5ffe:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    6000:	7ca1      	ldrb	r1, [r4, #18]
    6002:	2900      	cmp	r1, #0
    6004:	d002      	beq.n	600c <spi_init+0x2e4>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    6006:	2180      	movs	r1, #128	; 0x80
    6008:	0289      	lsls	r1, r1, #10
    600a:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    600c:	7ce1      	ldrb	r1, [r4, #19]
    600e:	2900      	cmp	r1, #0
    6010:	d002      	beq.n	6018 <spi_init+0x2f0>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    6012:	2180      	movs	r1, #128	; 0x80
    6014:	0089      	lsls	r1, r1, #2
    6016:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    6018:	7d21      	ldrb	r1, [r4, #20]
    601a:	2900      	cmp	r1, #0
    601c:	d002      	beq.n	6024 <spi_init+0x2fc>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    601e:	2180      	movs	r1, #128	; 0x80
    6020:	0189      	lsls	r1, r1, #6
    6022:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    6024:	4641      	mov	r1, r8
    6026:	6809      	ldr	r1, [r1, #0]
    6028:	430b      	orrs	r3, r1
    602a:	4641      	mov	r1, r8
    602c:	600b      	str	r3, [r1, #0]
	spi_module->CTRLB.reg |= ctrlb;
    602e:	684b      	ldr	r3, [r1, #4]
    6030:	431a      	orrs	r2, r3
    6032:	604a      	str	r2, [r1, #4]
	return STATUS_OK;
    6034:	2000      	movs	r0, #0
    6036:	e689      	b.n	5d4c <spi_init+0x24>
			MCLK->APBDMASK.reg |= mask;
    6038:	4a08      	ldr	r2, [pc, #32]	; (605c <spi_init+0x334>)
    603a:	6a13      	ldr	r3, [r2, #32]
    603c:	2102      	movs	r1, #2
    603e:	430b      	orrs	r3, r1
    6040:	6213      	str	r3, [r2, #32]
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    6042:	2318      	movs	r3, #24
    6044:	e740      	b.n	5ec8 <spi_init+0x1a0>
    6046:	46c0      	nop			; (mov r8, r8)
    6048:	00005ac5 	.word	0x00005ac5
    604c:	40002800 	.word	0x40002800
    6050:	000070b9 	.word	0x000070b9
    6054:	000059bb 	.word	0x000059bb
    6058:	00005c21 	.word	0x00005c21
    605c:	40000400 	.word	0x40000400
    6060:	00007095 	.word	0x00007095
    6064:	00007025 	.word	0x00007025
    6068:	00005a79 	.word	0x00005a79
    606c:	00007191 	.word	0x00007191
    6070:	41002000 	.word	0x41002000

00006074 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    6074:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    6076:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    6078:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    607a:	2c01      	cmp	r4, #1
    607c:	d001      	beq.n	6082 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    607e:	0018      	movs	r0, r3
    6080:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    6082:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    6084:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    6086:	2c00      	cmp	r4, #0
    6088:	d1f9      	bne.n	607e <spi_select_slave+0xa>
		if (select) {
    608a:	2a00      	cmp	r2, #0
    608c:	d058      	beq.n	6140 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    608e:	784b      	ldrb	r3, [r1, #1]
    6090:	2b00      	cmp	r3, #0
    6092:	d044      	beq.n	611e <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    6094:	6803      	ldr	r3, [r0, #0]
    6096:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    6098:	07db      	lsls	r3, r3, #31
    609a:	d410      	bmi.n	60be <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    609c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    609e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    60a0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    60a2:	2900      	cmp	r1, #0
    60a4:	d104      	bne.n	60b0 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    60a6:	0953      	lsrs	r3, r2, #5
    60a8:	01db      	lsls	r3, r3, #7
    60aa:	492e      	ldr	r1, [pc, #184]	; (6164 <spi_select_slave+0xf0>)
    60ac:	468c      	mov	ip, r1
    60ae:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    60b0:	211f      	movs	r1, #31
    60b2:	4011      	ands	r1, r2
    60b4:	2201      	movs	r2, #1
    60b6:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    60b8:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    60ba:	2305      	movs	r3, #5
    60bc:	e7df      	b.n	607e <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    60be:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    60c0:	09d4      	lsrs	r4, r2, #7
		return NULL;
    60c2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    60c4:	2c00      	cmp	r4, #0
    60c6:	d104      	bne.n	60d2 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    60c8:	0953      	lsrs	r3, r2, #5
    60ca:	01db      	lsls	r3, r3, #7
    60cc:	4c25      	ldr	r4, [pc, #148]	; (6164 <spi_select_slave+0xf0>)
    60ce:	46a4      	mov	ip, r4
    60d0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    60d2:	241f      	movs	r4, #31
    60d4:	4014      	ands	r4, r2
    60d6:	2201      	movs	r2, #1
    60d8:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    60da:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    60dc:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    60de:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    60e0:	07d2      	lsls	r2, r2, #31
    60e2:	d501      	bpl.n	60e8 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    60e4:	788a      	ldrb	r2, [r1, #2]
    60e6:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    60e8:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    60ea:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    60ec:	2a00      	cmp	r2, #0
    60ee:	d1c6      	bne.n	607e <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    60f0:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    60f2:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    60f4:	7e13      	ldrb	r3, [r2, #24]
    60f6:	420b      	tst	r3, r1
    60f8:	d0fc      	beq.n	60f4 <spi_select_slave+0x80>
    60fa:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    60fc:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    60fe:	0749      	lsls	r1, r1, #29
    6100:	d5bd      	bpl.n	607e <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    6102:	8b53      	ldrh	r3, [r2, #26]
    6104:	075b      	lsls	r3, r3, #29
    6106:	d501      	bpl.n	610c <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    6108:	2304      	movs	r3, #4
    610a:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    610c:	7983      	ldrb	r3, [r0, #6]
    610e:	2b01      	cmp	r3, #1
    6110:	d002      	beq.n	6118 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    6112:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6114:	2300      	movs	r3, #0
    6116:	e7b2      	b.n	607e <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    6118:	6a93      	ldr	r3, [r2, #40]	; 0x28
    611a:	2300      	movs	r3, #0
    611c:	e7af      	b.n	607e <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    611e:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    6120:	09d1      	lsrs	r1, r2, #7
		return NULL;
    6122:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    6124:	2900      	cmp	r1, #0
    6126:	d104      	bne.n	6132 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    6128:	0953      	lsrs	r3, r2, #5
    612a:	01db      	lsls	r3, r3, #7
    612c:	490d      	ldr	r1, [pc, #52]	; (6164 <spi_select_slave+0xf0>)
    612e:	468c      	mov	ip, r1
    6130:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6132:	211f      	movs	r1, #31
    6134:	4011      	ands	r1, r2
    6136:	2201      	movs	r2, #1
    6138:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    613a:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    613c:	2300      	movs	r3, #0
    613e:	e79e      	b.n	607e <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    6140:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    6142:	09d1      	lsrs	r1, r2, #7
		return NULL;
    6144:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    6146:	2900      	cmp	r1, #0
    6148:	d104      	bne.n	6154 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    614a:	0953      	lsrs	r3, r2, #5
    614c:	01db      	lsls	r3, r3, #7
    614e:	4905      	ldr	r1, [pc, #20]	; (6164 <spi_select_slave+0xf0>)
    6150:	468c      	mov	ip, r1
    6152:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6154:	211f      	movs	r1, #31
    6156:	4011      	ands	r1, r2
    6158:	2201      	movs	r2, #1
    615a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    615c:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    615e:	2300      	movs	r3, #0
    6160:	e78d      	b.n	607e <spi_select_slave+0xa>
    6162:	46c0      	nop			; (mov r8, r8)
    6164:	40002800 	.word	0x40002800

00006168 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    6168:	b5f0      	push	{r4, r5, r6, r7, lr}
    616a:	46de      	mov	lr, fp
    616c:	4657      	mov	r7, sl
    616e:	464e      	mov	r6, r9
    6170:	4645      	mov	r5, r8
    6172:	b5e0      	push	{r5, r6, r7, lr}
    6174:	b083      	sub	sp, #12
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    6176:	2317      	movs	r3, #23
	if (length == 0) {
    6178:	2a00      	cmp	r2, #0
    617a:	d107      	bne.n	618c <spi_write_buffer_wait+0x24>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    617c:	0018      	movs	r0, r3
    617e:	b003      	add	sp, #12
    6180:	bc3c      	pop	{r2, r3, r4, r5}
    6182:	4690      	mov	r8, r2
    6184:	4699      	mov	r9, r3
    6186:	46a2      	mov	sl, r4
    6188:	46ab      	mov	fp, r5
    618a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    618c:	7943      	ldrb	r3, [r0, #5]
    618e:	2b00      	cmp	r3, #0
    6190:	d103      	bne.n	619a <spi_write_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    6192:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    6194:	7e1c      	ldrb	r4, [r3, #24]
    6196:	07a4      	lsls	r4, r4, #30
    6198:	d40a      	bmi.n	61b0 <spi_write_buffer_wait+0x48>
						data_to_send = tx_data[tx_pos++];
    619a:	4693      	mov	fp, r2
    619c:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
    619e:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
    61a0:	2502      	movs	r5, #2
    61a2:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
    61a4:	3502      	adds	r5, #2
    61a6:	46a8      	mov	r8, r5
    61a8:	3a01      	subs	r2, #1
    61aa:	b292      	uxth	r2, r2
    61ac:	468a      	mov	sl, r1
    61ae:	e023      	b.n	61f8 <spi_write_buffer_wait+0x90>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    61b0:	2402      	movs	r4, #2
    61b2:	761c      	strb	r4, [r3, #24]
    61b4:	e7f1      	b.n	619a <spi_write_buffer_wait+0x32>
    61b6:	7e35      	ldrb	r5, [r6, #24]
			if (spi_is_write_complete(module)) {
    61b8:	4661      	mov	r1, ip
    61ba:	420d      	tst	r5, r1
    61bc:	d12e      	bne.n	621c <spi_write_buffer_wait+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    61be:	7e35      	ldrb	r5, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    61c0:	421d      	tst	r5, r3
    61c2:	d100      	bne.n	61c6 <spi_write_buffer_wait+0x5e>
    61c4:	e0c2      	b.n	634c <spi_write_buffer_wait+0x1e4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    61c6:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    61c8:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
    61ca:	421d      	tst	r5, r3
    61cc:	d0fc      	beq.n	61c8 <spi_write_buffer_wait+0x60>
		uint16_t data_to_send = tx_data[tx_pos++];
    61ce:	1c67      	adds	r7, r4, #1
    61d0:	b2bf      	uxth	r7, r7
    61d2:	4651      	mov	r1, sl
    61d4:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    61d6:	7981      	ldrb	r1, [r0, #6]
    61d8:	2901      	cmp	r1, #1
    61da:	d023      	beq.n	6224 <spi_write_buffer_wait+0xbc>
		uint16_t data_to_send = tx_data[tx_pos++];
    61dc:	b2ad      	uxth	r5, r5
    61de:	003c      	movs	r4, r7
    61e0:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    61e2:	421f      	tst	r7, r3
    61e4:	d002      	beq.n	61ec <spi_write_buffer_wait+0x84>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    61e6:	05ed      	lsls	r5, r5, #23
    61e8:	0ded      	lsrs	r5, r5, #23
    61ea:	62b5      	str	r5, [r6, #40]	; 0x28
    61ec:	1e55      	subs	r5, r2, #1
    61ee:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
    61f0:	79c6      	ldrb	r6, [r0, #7]
    61f2:	2e00      	cmp	r6, #0
    61f4:	d11d      	bne.n	6232 <spi_write_buffer_wait+0xca>
    61f6:	002a      	movs	r2, r5
	while (length--) {
    61f8:	4d59      	ldr	r5, [pc, #356]	; (6360 <spi_write_buffer_wait+0x1f8>)
    61fa:	42aa      	cmp	r2, r5
    61fc:	d070      	beq.n	62e0 <spi_write_buffer_wait+0x178>
		if (module->mode == SPI_MODE_SLAVE) {
    61fe:	7945      	ldrb	r5, [r0, #5]
    6200:	2d00      	cmp	r5, #0
    6202:	d1e0      	bne.n	61c6 <spi_write_buffer_wait+0x5e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    6204:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    6206:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    6208:	421d      	tst	r5, r3
    620a:	d1d4      	bne.n	61b6 <spi_write_buffer_wait+0x4e>
    620c:	4d55      	ldr	r5, [pc, #340]	; (6364 <spi_write_buffer_wait+0x1fc>)
    620e:	7e37      	ldrb	r7, [r6, #24]
    6210:	421f      	tst	r7, r3
    6212:	d1d0      	bne.n	61b6 <spi_write_buffer_wait+0x4e>
    6214:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    6216:	2d00      	cmp	r5, #0
    6218:	d1f9      	bne.n	620e <spi_write_buffer_wait+0xa6>
    621a:	e7cc      	b.n	61b6 <spi_write_buffer_wait+0x4e>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    621c:	2302      	movs	r3, #2
    621e:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    6220:	3302      	adds	r3, #2
    6222:	e7ab      	b.n	617c <spi_write_buffer_wait+0x14>
			data_to_send |= (tx_data[tx_pos++] << 8);
    6224:	3402      	adds	r4, #2
    6226:	b2a4      	uxth	r4, r4
    6228:	4651      	mov	r1, sl
    622a:	5dcf      	ldrb	r7, [r1, r7]
    622c:	023f      	lsls	r7, r7, #8
    622e:	433d      	orrs	r5, r7
    6230:	e7d6      	b.n	61e0 <spi_write_buffer_wait+0x78>
    6232:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
    6234:	7945      	ldrb	r5, [r0, #5]
    6236:	2d00      	cmp	r5, #0
    6238:	d137      	bne.n	62aa <spi_write_buffer_wait+0x142>
    623a:	4d4b      	ldr	r5, [pc, #300]	; (6368 <spi_write_buffer_wait+0x200>)
    623c:	9101      	str	r1, [sp, #4]
    623e:	e012      	b.n	6266 <spi_write_buffer_wait+0xfe>
							data_to_send |= (tx_data[tx_pos++] << 8);
    6240:	3402      	adds	r4, #2
    6242:	b2a4      	uxth	r4, r4
    6244:	4649      	mov	r1, r9
    6246:	9f01      	ldr	r7, [sp, #4]
    6248:	5c79      	ldrb	r1, [r7, r1]
    624a:	0209      	lsls	r1, r1, #8
    624c:	9f00      	ldr	r7, [sp, #0]
    624e:	430f      	orrs	r7, r1
    6250:	e01b      	b.n	628a <spi_write_buffer_wait+0x122>
						length--;
    6252:	3a01      	subs	r2, #1
    6254:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
    6256:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    6258:	7e37      	ldrb	r7, [r6, #24]
					if (spi_is_ready_to_read(module)) {
    625a:	4641      	mov	r1, r8
    625c:	420f      	tst	r7, r1
    625e:	d11b      	bne.n	6298 <spi_write_buffer_wait+0x130>
    6260:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    6262:	2d00      	cmp	r5, #0
    6264:	d018      	beq.n	6298 <spi_write_buffer_wait+0x130>
					if (length && spi_is_ready_to_write(module)) {
    6266:	2a00      	cmp	r2, #0
    6268:	d0f5      	beq.n	6256 <spi_write_buffer_wait+0xee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    626a:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    626c:	7e37      	ldrb	r7, [r6, #24]
    626e:	421f      	tst	r7, r3
    6270:	d0f1      	beq.n	6256 <spi_write_buffer_wait+0xee>
						data_to_send = tx_data[tx_pos++];
    6272:	1c67      	adds	r7, r4, #1
    6274:	b2b9      	uxth	r1, r7
    6276:	4689      	mov	r9, r1
    6278:	9901      	ldr	r1, [sp, #4]
    627a:	5d09      	ldrb	r1, [r1, r4]
    627c:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    627e:	7981      	ldrb	r1, [r0, #6]
    6280:	2901      	cmp	r1, #1
    6282:	d0dd      	beq.n	6240 <spi_write_buffer_wait+0xd8>
						data_to_send = tx_data[tx_pos++];
    6284:	4669      	mov	r1, sp
    6286:	880f      	ldrh	r7, [r1, #0]
    6288:	464c      	mov	r4, r9
    628a:	7e31      	ldrb	r1, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    628c:	4219      	tst	r1, r3
    628e:	d0e0      	beq.n	6252 <spi_write_buffer_wait+0xea>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    6290:	05ff      	lsls	r7, r7, #23
    6292:	0dff      	lsrs	r7, r7, #23
    6294:	62b7      	str	r7, [r6, #40]	; 0x28
    6296:	e7dc      	b.n	6252 <spi_write_buffer_wait+0xea>
    6298:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    629a:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    629c:	4667      	mov	r7, ip
    629e:	423d      	tst	r5, r7
    62a0:	d118      	bne.n	62d4 <spi_write_buffer_wait+0x16c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    62a2:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    62a4:	4646      	mov	r6, r8
    62a6:	4235      	tst	r5, r6
    62a8:	d052      	beq.n	6350 <spi_write_buffer_wait+0x1e8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    62aa:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    62ac:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    62ae:	4647      	mov	r7, r8
    62b0:	423d      	tst	r5, r7
    62b2:	d0fb      	beq.n	62ac <spi_write_buffer_wait+0x144>
    62b4:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    62b6:	423d      	tst	r5, r7
    62b8:	d007      	beq.n	62ca <spi_write_buffer_wait+0x162>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    62ba:	8b75      	ldrh	r5, [r6, #26]
    62bc:	423d      	tst	r5, r7
    62be:	d000      	beq.n	62c2 <spi_write_buffer_wait+0x15a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    62c0:	8377      	strh	r7, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    62c2:	7985      	ldrb	r5, [r0, #6]
    62c4:	2d01      	cmp	r5, #1
    62c6:	d009      	beq.n	62dc <spi_write_buffer_wait+0x174>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    62c8:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			flush_length--;
    62ca:	465d      	mov	r5, fp
    62cc:	3d01      	subs	r5, #1
    62ce:	b2ad      	uxth	r5, r5
    62d0:	46ab      	mov	fp, r5
    62d2:	e769      	b.n	61a8 <spi_write_buffer_wait+0x40>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    62d4:	2302      	movs	r3, #2
    62d6:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    62d8:	3302      	adds	r3, #2
    62da:	e74f      	b.n	617c <spi_write_buffer_wait+0x14>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    62dc:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    62de:	e7f4      	b.n	62ca <spi_write_buffer_wait+0x162>
	if (module->mode == SPI_MODE_MASTER) {
    62e0:	7943      	ldrb	r3, [r0, #5]
    62e2:	2b01      	cmp	r3, #1
    62e4:	d00b      	beq.n	62fe <spi_write_buffer_wait+0x196>
	if (module->mode == SPI_MODE_SLAVE) {
    62e6:	2b00      	cmp	r3, #0
    62e8:	d134      	bne.n	6354 <spi_write_buffer_wait+0x1ec>
		if (module->receiver_enabled) {
    62ea:	79c2      	ldrb	r2, [r0, #7]
    62ec:	2a00      	cmp	r2, #0
    62ee:	d100      	bne.n	62f2 <spi_write_buffer_wait+0x18a>
    62f0:	e744      	b.n	617c <spi_write_buffer_wait+0x14>
					if (spi_is_ready_to_read(module)) {
    62f2:	2404      	movs	r4, #4
			while (flush_length) {
    62f4:	465b      	mov	r3, fp
    62f6:	465d      	mov	r5, fp
    62f8:	2b00      	cmp	r3, #0
    62fa:	d119      	bne.n	6330 <spi_write_buffer_wait+0x1c8>
    62fc:	e73e      	b.n	617c <spi_write_buffer_wait+0x14>
	SercomSpi *const spi_module = &(module->hw->SPI);
    62fe:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    6300:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    6302:	7e0b      	ldrb	r3, [r1, #24]
    6304:	4213      	tst	r3, r2
    6306:	d0fc      	beq.n	6302 <spi_write_buffer_wait+0x19a>
	return STATUS_OK;
    6308:	2300      	movs	r3, #0
    630a:	e737      	b.n	617c <spi_write_buffer_wait+0x14>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    630c:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    630e:	4223      	tst	r3, r4
    6310:	d022      	beq.n	6358 <spi_write_buffer_wait+0x1f0>
    6312:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    6314:	4223      	tst	r3, r4
    6316:	d007      	beq.n	6328 <spi_write_buffer_wait+0x1c0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    6318:	8b4b      	ldrh	r3, [r1, #26]
    631a:	4223      	tst	r3, r4
    631c:	d000      	beq.n	6320 <spi_write_buffer_wait+0x1b8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    631e:	834c      	strh	r4, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    6320:	7983      	ldrb	r3, [r0, #6]
    6322:	2b01      	cmp	r3, #1
    6324:	d010      	beq.n	6348 <spi_write_buffer_wait+0x1e0>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    6326:	6a8b      	ldr	r3, [r1, #40]	; 0x28
				flush_length--;
    6328:	3d01      	subs	r5, #1
    632a:	b2ad      	uxth	r5, r5
			while (flush_length) {
    632c:	2d00      	cmp	r5, #0
    632e:	d015      	beq.n	635c <spi_write_buffer_wait+0x1f4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    6330:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    6332:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    6334:	4223      	tst	r3, r4
    6336:	d1e9      	bne.n	630c <spi_write_buffer_wait+0x1a4>
    6338:	4b0a      	ldr	r3, [pc, #40]	; (6364 <spi_write_buffer_wait+0x1fc>)
    633a:	7e0a      	ldrb	r2, [r1, #24]
    633c:	4222      	tst	r2, r4
    633e:	d1e5      	bne.n	630c <spi_write_buffer_wait+0x1a4>
    6340:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    6342:	2b00      	cmp	r3, #0
    6344:	d1f9      	bne.n	633a <spi_write_buffer_wait+0x1d2>
    6346:	e7e1      	b.n	630c <spi_write_buffer_wait+0x1a4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    6348:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    634a:	e7ed      	b.n	6328 <spi_write_buffer_wait+0x1c0>
				return STATUS_ERR_TIMEOUT;
    634c:	2312      	movs	r3, #18
    634e:	e715      	b.n	617c <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    6350:	2312      	movs	r3, #18
    6352:	e713      	b.n	617c <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    6354:	2300      	movs	r3, #0
    6356:	e711      	b.n	617c <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    6358:	2312      	movs	r3, #18
    635a:	e70f      	b.n	617c <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    635c:	2300      	movs	r3, #0
    635e:	e70d      	b.n	617c <spi_write_buffer_wait+0x14>
    6360:	0000ffff 	.word	0x0000ffff
    6364:	00002710 	.word	0x00002710
    6368:	00002711 	.word	0x00002711

0000636c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    636c:	b5f0      	push	{r4, r5, r6, r7, lr}
    636e:	46de      	mov	lr, fp
    6370:	4657      	mov	r7, sl
    6372:	464e      	mov	r6, r9
    6374:	4645      	mov	r5, r8
    6376:	b5e0      	push	{r5, r6, r7, lr}
    6378:	b091      	sub	sp, #68	; 0x44
    637a:	0005      	movs	r5, r0
    637c:	000c      	movs	r4, r1
    637e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    6380:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6382:	0008      	movs	r0, r1
    6384:	4bc6      	ldr	r3, [pc, #792]	; (66a0 <usart_init+0x334>)
    6386:	4798      	blx	r3
    6388:	0002      	movs	r2, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    638a:	2805      	cmp	r0, #5
    638c:	d00d      	beq.n	63aa <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    638e:	0007      	movs	r7, r0
    6390:	3712      	adds	r7, #18
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    6392:	0003      	movs	r3, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    6394:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    6396:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    6398:	07c9      	lsls	r1, r1, #31
    639a:	d509      	bpl.n	63b0 <usart_init+0x44>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    639c:	b011      	add	sp, #68	; 0x44
    639e:	bc3c      	pop	{r2, r3, r4, r5}
    63a0:	4690      	mov	r8, r2
    63a2:	4699      	mov	r9, r3
    63a4:	46a2      	mov	sl, r4
    63a6:	46ab      	mov	fp, r5
    63a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    63aa:	2718      	movs	r7, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    63ac:	2301      	movs	r3, #1
    63ae:	e7f1      	b.n	6394 <usart_init+0x28>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    63b0:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
    63b2:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    63b4:	0789      	lsls	r1, r1, #30
    63b6:	d4f1      	bmi.n	639c <usart_init+0x30>
	if (sercom_index == 5) {
    63b8:	2a05      	cmp	r2, #5
    63ba:	d049      	beq.n	6450 <usart_init+0xe4>
			MCLK->APBCMASK.reg |= mask;
    63bc:	49b9      	ldr	r1, [pc, #740]	; (66a4 <usart_init+0x338>)
    63be:	69c8      	ldr	r0, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    63c0:	2201      	movs	r2, #1
    63c2:	409a      	lsls	r2, r3
    63c4:	0013      	movs	r3, r2
    63c6:	4303      	orrs	r3, r0
    63c8:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    63ca:	a90f      	add	r1, sp, #60	; 0x3c
    63cc:	232d      	movs	r3, #45	; 0x2d
    63ce:	4698      	mov	r8, r3
    63d0:	5cf3      	ldrb	r3, [r6, r3]
    63d2:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    63d4:	b2ff      	uxtb	r7, r7
    63d6:	0038      	movs	r0, r7
    63d8:	4bb3      	ldr	r3, [pc, #716]	; (66a8 <usart_init+0x33c>)
    63da:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    63dc:	0038      	movs	r0, r7
    63de:	4bb3      	ldr	r3, [pc, #716]	; (66ac <usart_init+0x340>)
    63e0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    63e2:	4643      	mov	r3, r8
    63e4:	5cf0      	ldrb	r0, [r6, r3]
    63e6:	2100      	movs	r1, #0
    63e8:	4bb1      	ldr	r3, [pc, #708]	; (66b0 <usart_init+0x344>)
    63ea:	4798      	blx	r3
	module->character_size = config->character_size;
    63ec:	7af3      	ldrb	r3, [r6, #11]
    63ee:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    63f0:	2324      	movs	r3, #36	; 0x24
    63f2:	5cf3      	ldrb	r3, [r6, r3]
    63f4:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    63f6:	2325      	movs	r3, #37	; 0x25
    63f8:	5cf3      	ldrb	r3, [r6, r3]
    63fa:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    63fc:	7ef3      	ldrb	r3, [r6, #27]
    63fe:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    6400:	7f33      	ldrb	r3, [r6, #28]
    6402:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    6404:	682b      	ldr	r3, [r5, #0]
    6406:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6408:	0018      	movs	r0, r3
    640a:	4ba5      	ldr	r3, [pc, #660]	; (66a0 <usart_init+0x334>)
    640c:	4798      	blx	r3
	if (sercom_index == 5) {
    640e:	2805      	cmp	r0, #5
    6410:	d026      	beq.n	6460 <usart_init+0xf4>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6412:	3012      	adds	r0, #18
	uint16_t baud  = 0;
    6414:	2200      	movs	r2, #0
    6416:	230e      	movs	r3, #14
    6418:	a906      	add	r1, sp, #24
    641a:	468c      	mov	ip, r1
    641c:	4463      	add	r3, ip
    641e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    6420:	8a32      	ldrh	r2, [r6, #16]
    6422:	9202      	str	r2, [sp, #8]
    6424:	2380      	movs	r3, #128	; 0x80
    6426:	01db      	lsls	r3, r3, #7
    6428:	429a      	cmp	r2, r3
    642a:	d100      	bne.n	642e <usart_init+0xc2>
    642c:	e0ab      	b.n	6586 <usart_init+0x21a>
    642e:	d919      	bls.n	6464 <usart_init+0xf8>
    6430:	23c0      	movs	r3, #192	; 0xc0
    6432:	01db      	lsls	r3, r3, #7
    6434:	9a02      	ldr	r2, [sp, #8]
    6436:	429a      	cmp	r2, r3
    6438:	d100      	bne.n	643c <usart_init+0xd0>
    643a:	e09f      	b.n	657c <usart_init+0x210>
    643c:	2380      	movs	r3, #128	; 0x80
    643e:	021b      	lsls	r3, r3, #8
    6440:	429a      	cmp	r2, r3
    6442:	d000      	beq.n	6446 <usart_init+0xda>
    6444:	e127      	b.n	6696 <usart_init+0x32a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    6446:	2303      	movs	r3, #3
    6448:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    644a:	2300      	movs	r3, #0
    644c:	9307      	str	r3, [sp, #28]
    644e:	e012      	b.n	6476 <usart_init+0x10a>
			MCLK->APBDMASK.reg |= mask;
    6450:	4994      	ldr	r1, [pc, #592]	; (66a4 <usart_init+0x338>)
    6452:	6a08      	ldr	r0, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    6454:	3a04      	subs	r2, #4
    6456:	409a      	lsls	r2, r3
    6458:	0013      	movs	r3, r2
    645a:	4303      	orrs	r3, r0
    645c:	620b      	str	r3, [r1, #32]
    645e:	e7b4      	b.n	63ca <usart_init+0x5e>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    6460:	2018      	movs	r0, #24
    6462:	e7d7      	b.n	6414 <usart_init+0xa8>
	switch (config->sample_rate) {
    6464:	2380      	movs	r3, #128	; 0x80
    6466:	019b      	lsls	r3, r3, #6
    6468:	429a      	cmp	r2, r3
    646a:	d000      	beq.n	646e <usart_init+0x102>
    646c:	e113      	b.n	6696 <usart_init+0x32a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    646e:	2310      	movs	r3, #16
    6470:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    6472:	3b0f      	subs	r3, #15
    6474:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    6476:	6833      	ldr	r3, [r6, #0]
    6478:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    647a:	68f3      	ldr	r3, [r6, #12]
    647c:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    647e:	6973      	ldr	r3, [r6, #20]
    6480:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    6482:	7e33      	ldrb	r3, [r6, #24]
    6484:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    6486:	2326      	movs	r3, #38	; 0x26
    6488:	5cf3      	ldrb	r3, [r6, r3]
    648a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    648c:	6873      	ldr	r3, [r6, #4]
    648e:	4699      	mov	r9, r3
	switch (transfer_mode)
    6490:	2b00      	cmp	r3, #0
    6492:	d100      	bne.n	6496 <usart_init+0x12a>
    6494:	e09f      	b.n	65d6 <usart_init+0x26a>
    6496:	2380      	movs	r3, #128	; 0x80
    6498:	055b      	lsls	r3, r3, #21
    649a:	4599      	cmp	r9, r3
    649c:	d104      	bne.n	64a8 <usart_init+0x13c>
			if (!config->use_external_clock) {
    649e:	2327      	movs	r3, #39	; 0x27
    64a0:	5cf3      	ldrb	r3, [r6, r3]
    64a2:	2b00      	cmp	r3, #0
    64a4:	d100      	bne.n	64a8 <usart_init+0x13c>
    64a6:	e084      	b.n	65b2 <usart_init+0x246>
	if(config->encoding_format_enable) {
    64a8:	7e73      	ldrb	r3, [r6, #25]
    64aa:	2b00      	cmp	r3, #0
    64ac:	d002      	beq.n	64b4 <usart_init+0x148>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    64ae:	7eb3      	ldrb	r3, [r6, #26]
    64b0:	4642      	mov	r2, r8
    64b2:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    64b4:	682a      	ldr	r2, [r5, #0]
    64b6:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    64b8:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    64ba:	2b00      	cmp	r3, #0
    64bc:	d1fc      	bne.n	64b8 <usart_init+0x14c>
	usart_hw->BAUD.reg = baud;
    64be:	330e      	adds	r3, #14
    64c0:	aa06      	add	r2, sp, #24
    64c2:	4694      	mov	ip, r2
    64c4:	4463      	add	r3, ip
    64c6:	881b      	ldrh	r3, [r3, #0]
    64c8:	4642      	mov	r2, r8
    64ca:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    64cc:	9b05      	ldr	r3, [sp, #20]
    64ce:	9a03      	ldr	r2, [sp, #12]
    64d0:	4313      	orrs	r3, r2
    64d2:	9a04      	ldr	r2, [sp, #16]
    64d4:	4313      	orrs	r3, r2
    64d6:	464a      	mov	r2, r9
    64d8:	4313      	orrs	r3, r2
    64da:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    64dc:	465b      	mov	r3, fp
    64de:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    64e0:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    64e2:	4653      	mov	r3, sl
    64e4:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    64e6:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    64e8:	2327      	movs	r3, #39	; 0x27
    64ea:	5cf3      	ldrb	r3, [r6, r3]
    64ec:	2b00      	cmp	r3, #0
    64ee:	d101      	bne.n	64f4 <usart_init+0x188>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    64f0:	3304      	adds	r3, #4
    64f2:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    64f4:	7e73      	ldrb	r3, [r6, #25]
    64f6:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    64f8:	7f32      	ldrb	r2, [r6, #28]
    64fa:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    64fc:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    64fe:	7f72      	ldrb	r2, [r6, #29]
    6500:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    6502:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    6504:	2224      	movs	r2, #36	; 0x24
    6506:	5cb2      	ldrb	r2, [r6, r2]
    6508:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    650a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    650c:	2225      	movs	r2, #37	; 0x25
    650e:	5cb2      	ldrb	r2, [r6, r2]
    6510:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    6512:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    6514:	7ab1      	ldrb	r1, [r6, #10]
    6516:	7af2      	ldrb	r2, [r6, #11]
    6518:	4311      	orrs	r1, r2
    651a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    651c:	8933      	ldrh	r3, [r6, #8]
    651e:	2bff      	cmp	r3, #255	; 0xff
    6520:	d07d      	beq.n	661e <usart_init+0x2b2>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    6522:	2280      	movs	r2, #128	; 0x80
    6524:	0452      	lsls	r2, r2, #17
    6526:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    6528:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    652a:	232c      	movs	r3, #44	; 0x2c
    652c:	5cf3      	ldrb	r3, [r6, r3]
    652e:	2b00      	cmp	r3, #0
    6530:	d103      	bne.n	653a <usart_init+0x1ce>
    6532:	4b60      	ldr	r3, [pc, #384]	; (66b4 <usart_init+0x348>)
    6534:	789b      	ldrb	r3, [r3, #2]
    6536:	079b      	lsls	r3, r3, #30
    6538:	d501      	bpl.n	653e <usart_init+0x1d2>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    653a:	2380      	movs	r3, #128	; 0x80
    653c:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    653e:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    6540:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    6542:	2b00      	cmp	r3, #0
    6544:	d1fc      	bne.n	6540 <usart_init+0x1d4>
	usart_hw->CTRLB.reg = ctrlb;
    6546:	4643      	mov	r3, r8
    6548:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    654a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    654c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    654e:	2b00      	cmp	r3, #0
    6550:	d1fc      	bne.n	654c <usart_init+0x1e0>
	usart_hw->CTRLA.reg = ctrla;
    6552:	4643      	mov	r3, r8
    6554:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6556:	ab0e      	add	r3, sp, #56	; 0x38
    6558:	2280      	movs	r2, #128	; 0x80
    655a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    655c:	2200      	movs	r2, #0
    655e:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    6560:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    6562:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    6564:	6b33      	ldr	r3, [r6, #48]	; 0x30
    6566:	930a      	str	r3, [sp, #40]	; 0x28
    6568:	6b73      	ldr	r3, [r6, #52]	; 0x34
    656a:	930b      	str	r3, [sp, #44]	; 0x2c
    656c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    656e:	930c      	str	r3, [sp, #48]	; 0x30
    6570:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    6572:	9302      	str	r3, [sp, #8]
    6574:	930d      	str	r3, [sp, #52]	; 0x34
    6576:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6578:	ae0a      	add	r6, sp, #40	; 0x28
    657a:	e05e      	b.n	663a <usart_init+0x2ce>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    657c:	2308      	movs	r3, #8
    657e:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    6580:	3b07      	subs	r3, #7
    6582:	9307      	str	r3, [sp, #28]
    6584:	e777      	b.n	6476 <usart_init+0x10a>
	ctrla = (uint32_t)config->data_order |
    6586:	6833      	ldr	r3, [r6, #0]
    6588:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    658a:	68f3      	ldr	r3, [r6, #12]
    658c:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    658e:	6973      	ldr	r3, [r6, #20]
    6590:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    6592:	7e33      	ldrb	r3, [r6, #24]
    6594:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    6596:	2326      	movs	r3, #38	; 0x26
    6598:	5cf3      	ldrb	r3, [r6, r3]
    659a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    659c:	6873      	ldr	r3, [r6, #4]
    659e:	4699      	mov	r9, r3
	switch (transfer_mode)
    65a0:	2b00      	cmp	r3, #0
    65a2:	d014      	beq.n	65ce <usart_init+0x262>
    65a4:	2380      	movs	r3, #128	; 0x80
    65a6:	055b      	lsls	r3, r3, #21
    65a8:	4599      	cmp	r9, r3
    65aa:	d100      	bne.n	65ae <usart_init+0x242>
    65ac:	e777      	b.n	649e <usart_init+0x132>
	enum status_code status_code = STATUS_OK;
    65ae:	2000      	movs	r0, #0
    65b0:	e020      	b.n	65f4 <usart_init+0x288>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    65b2:	6a33      	ldr	r3, [r6, #32]
    65b4:	001f      	movs	r7, r3
    65b6:	b2c0      	uxtb	r0, r0
    65b8:	4b3f      	ldr	r3, [pc, #252]	; (66b8 <usart_init+0x34c>)
    65ba:	4798      	blx	r3
    65bc:	0001      	movs	r1, r0
    65be:	220e      	movs	r2, #14
    65c0:	ab06      	add	r3, sp, #24
    65c2:	469c      	mov	ip, r3
    65c4:	4462      	add	r2, ip
    65c6:	0038      	movs	r0, r7
    65c8:	4b3c      	ldr	r3, [pc, #240]	; (66bc <usart_init+0x350>)
    65ca:	4798      	blx	r3
    65cc:	e012      	b.n	65f4 <usart_init+0x288>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    65ce:	2308      	movs	r3, #8
    65d0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    65d2:	2300      	movs	r3, #0
    65d4:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    65d6:	2327      	movs	r3, #39	; 0x27
    65d8:	5cf3      	ldrb	r3, [r6, r3]
    65da:	2b00      	cmp	r3, #0
    65dc:	d00e      	beq.n	65fc <usart_init+0x290>
				status_code =
    65de:	9b06      	ldr	r3, [sp, #24]
    65e0:	9300      	str	r3, [sp, #0]
    65e2:	9b07      	ldr	r3, [sp, #28]
    65e4:	220e      	movs	r2, #14
    65e6:	a906      	add	r1, sp, #24
    65e8:	468c      	mov	ip, r1
    65ea:	4462      	add	r2, ip
    65ec:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    65ee:	6a30      	ldr	r0, [r6, #32]
    65f0:	4f33      	ldr	r7, [pc, #204]	; (66c0 <usart_init+0x354>)
    65f2:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    65f4:	2800      	cmp	r0, #0
    65f6:	d000      	beq.n	65fa <usart_init+0x28e>
    65f8:	e6d0      	b.n	639c <usart_init+0x30>
    65fa:	e755      	b.n	64a8 <usart_init+0x13c>
						_sercom_get_async_baud_val(config->baudrate,
    65fc:	6a33      	ldr	r3, [r6, #32]
    65fe:	001f      	movs	r7, r3
    6600:	b2c0      	uxtb	r0, r0
    6602:	4b2d      	ldr	r3, [pc, #180]	; (66b8 <usart_init+0x34c>)
    6604:	4798      	blx	r3
    6606:	0001      	movs	r1, r0
				status_code =
    6608:	9b06      	ldr	r3, [sp, #24]
    660a:	9300      	str	r3, [sp, #0]
    660c:	9b07      	ldr	r3, [sp, #28]
    660e:	220e      	movs	r2, #14
    6610:	a806      	add	r0, sp, #24
    6612:	4684      	mov	ip, r0
    6614:	4462      	add	r2, ip
    6616:	0038      	movs	r0, r7
    6618:	4f29      	ldr	r7, [pc, #164]	; (66c0 <usart_init+0x354>)
    661a:	47b8      	blx	r7
    661c:	e7ea      	b.n	65f4 <usart_init+0x288>
		if(config->lin_slave_enable) {
    661e:	7ef3      	ldrb	r3, [r6, #27]
    6620:	2b00      	cmp	r3, #0
    6622:	d082      	beq.n	652a <usart_init+0x1be>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    6624:	2380      	movs	r3, #128	; 0x80
    6626:	04db      	lsls	r3, r3, #19
    6628:	431f      	orrs	r7, r3
    662a:	e77e      	b.n	652a <usart_init+0x1be>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    662c:	0020      	movs	r0, r4
    662e:	4b25      	ldr	r3, [pc, #148]	; (66c4 <usart_init+0x358>)
    6630:	4798      	blx	r3
    6632:	e007      	b.n	6644 <usart_init+0x2d8>
    6634:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    6636:	2f04      	cmp	r7, #4
    6638:	d00d      	beq.n	6656 <usart_init+0x2ea>
    663a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    663c:	00bb      	lsls	r3, r7, #2
    663e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    6640:	2800      	cmp	r0, #0
    6642:	d0f3      	beq.n	662c <usart_init+0x2c0>
		if (current_pinmux != PINMUX_UNUSED) {
    6644:	1c43      	adds	r3, r0, #1
    6646:	d0f5      	beq.n	6634 <usart_init+0x2c8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    6648:	a90e      	add	r1, sp, #56	; 0x38
    664a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    664c:	0c00      	lsrs	r0, r0, #16
    664e:	b2c0      	uxtb	r0, r0
    6650:	4b1d      	ldr	r3, [pc, #116]	; (66c8 <usart_init+0x35c>)
    6652:	4798      	blx	r3
    6654:	e7ee      	b.n	6634 <usart_init+0x2c8>
		module->callback[i]            = NULL;
    6656:	2300      	movs	r3, #0
    6658:	60eb      	str	r3, [r5, #12]
    665a:	612b      	str	r3, [r5, #16]
    665c:	616b      	str	r3, [r5, #20]
    665e:	61ab      	str	r3, [r5, #24]
    6660:	61eb      	str	r3, [r5, #28]
    6662:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    6664:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    6666:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    6668:	2200      	movs	r2, #0
    666a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    666c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    666e:	3330      	adds	r3, #48	; 0x30
    6670:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    6672:	3301      	adds	r3, #1
    6674:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    6676:	3301      	adds	r3, #1
    6678:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    667a:	3301      	adds	r3, #1
    667c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    667e:	6828      	ldr	r0, [r5, #0]
    6680:	4b07      	ldr	r3, [pc, #28]	; (66a0 <usart_init+0x334>)
    6682:	4798      	blx	r3
    6684:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    6686:	4911      	ldr	r1, [pc, #68]	; (66cc <usart_init+0x360>)
    6688:	4b11      	ldr	r3, [pc, #68]	; (66d0 <usart_init+0x364>)
    668a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    668c:	00a4      	lsls	r4, r4, #2
    668e:	4b11      	ldr	r3, [pc, #68]	; (66d4 <usart_init+0x368>)
    6690:	50e5      	str	r5, [r4, r3]
	return status_code;
    6692:	2000      	movs	r0, #0
    6694:	e682      	b.n	639c <usart_init+0x30>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    6696:	2310      	movs	r3, #16
    6698:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    669a:	2300      	movs	r3, #0
    669c:	9307      	str	r3, [sp, #28]
    669e:	e6ea      	b.n	6476 <usart_init+0x10a>
    66a0:	00005c21 	.word	0x00005c21
    66a4:	40000400 	.word	0x40000400
    66a8:	00007095 	.word	0x00007095
    66ac:	00007025 	.word	0x00007025
    66b0:	00005a79 	.word	0x00005a79
    66b4:	41002000 	.word	0x41002000
    66b8:	000070b9 	.word	0x000070b9
    66bc:	000059bb 	.word	0x000059bb
    66c0:	000059e5 	.word	0x000059e5
    66c4:	00005ac5 	.word	0x00005ac5
    66c8:	00007191 	.word	0x00007191
    66cc:	000068cd 	.word	0x000068cd
    66d0:	00005c5d 	.word	0x00005c5d
    66d4:	200020f0 	.word	0x200020f0

000066d8 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    66d8:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    66da:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    66dc:	2a00      	cmp	r2, #0
    66de:	d101      	bne.n	66e4 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    66e0:	0018      	movs	r0, r3
    66e2:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    66e4:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    66e6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    66e8:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    66ea:	2a00      	cmp	r2, #0
    66ec:	d1f8      	bne.n	66e0 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    66ee:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    66f0:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    66f2:	2a00      	cmp	r2, #0
    66f4:	d1fc      	bne.n	66f0 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    66f6:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    66f8:	2102      	movs	r1, #2
    66fa:	7e1a      	ldrb	r2, [r3, #24]
    66fc:	420a      	tst	r2, r1
    66fe:	d0fc      	beq.n	66fa <usart_write_wait+0x22>
	return STATUS_OK;
    6700:	2300      	movs	r3, #0
    6702:	e7ed      	b.n	66e0 <usart_write_wait+0x8>

00006704 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    6704:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    6706:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    6708:	2a00      	cmp	r2, #0
    670a:	d101      	bne.n	6710 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    670c:	0018      	movs	r0, r3
    670e:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    6710:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    6712:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    6714:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    6716:	2a00      	cmp	r2, #0
    6718:	d1f8      	bne.n	670c <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    671a:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    671c:	7e10      	ldrb	r0, [r2, #24]
    671e:	0740      	lsls	r0, r0, #29
    6720:	d5f4      	bpl.n	670c <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    6722:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    6724:	2b00      	cmp	r3, #0
    6726:	d1fc      	bne.n	6722 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6728:	8b53      	ldrh	r3, [r2, #26]
    672a:	b2db      	uxtb	r3, r3
	if (error_code) {
    672c:	0698      	lsls	r0, r3, #26
    672e:	d01d      	beq.n	676c <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    6730:	0798      	lsls	r0, r3, #30
    6732:	d503      	bpl.n	673c <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    6734:	2302      	movs	r3, #2
    6736:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    6738:	3318      	adds	r3, #24
    673a:	e7e7      	b.n	670c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    673c:	0758      	lsls	r0, r3, #29
    673e:	d503      	bpl.n	6748 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    6740:	2304      	movs	r3, #4
    6742:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    6744:	331a      	adds	r3, #26
    6746:	e7e1      	b.n	670c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    6748:	07d8      	lsls	r0, r3, #31
    674a:	d503      	bpl.n	6754 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    674c:	2301      	movs	r3, #1
    674e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    6750:	3312      	adds	r3, #18
    6752:	e7db      	b.n	670c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    6754:	06d8      	lsls	r0, r3, #27
    6756:	d503      	bpl.n	6760 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    6758:	2310      	movs	r3, #16
    675a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    675c:	3332      	adds	r3, #50	; 0x32
    675e:	e7d5      	b.n	670c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    6760:	069b      	lsls	r3, r3, #26
    6762:	d503      	bpl.n	676c <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    6764:	2320      	movs	r3, #32
    6766:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    6768:	3321      	adds	r3, #33	; 0x21
    676a:	e7cf      	b.n	670c <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    676c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    676e:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    6770:	2300      	movs	r3, #0
    6772:	e7cb      	b.n	670c <usart_read_wait+0x8>

00006774 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    6774:	b5f0      	push	{r4, r5, r6, r7, lr}
    6776:	46ce      	mov	lr, r9
    6778:	4647      	mov	r7, r8
    677a:	b580      	push	{r7, lr}
    677c:	b083      	sub	sp, #12
    677e:	0005      	movs	r5, r0
    6780:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    6782:	2017      	movs	r0, #23
	if (length == 0) {
    6784:	2a00      	cmp	r2, #0
    6786:	d104      	bne.n	6792 <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    6788:	b003      	add	sp, #12
    678a:	bc0c      	pop	{r2, r3}
    678c:	4690      	mov	r8, r2
    678e:	4699      	mov	r9, r3
    6790:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    6792:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    6794:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    6796:	2b00      	cmp	r3, #0
    6798:	d0f6      	beq.n	6788 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    679a:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    679c:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    679e:	2b00      	cmp	r3, #0
    67a0:	d1fc      	bne.n	679c <usart_write_buffer_wait+0x28>
	while (length--) {
    67a2:	3a01      	subs	r2, #1
    67a4:	b293      	uxth	r3, r2
    67a6:	4699      	mov	r9, r3
    67a8:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    67aa:	2701      	movs	r7, #1
	while (length--) {
    67ac:	4b1f      	ldr	r3, [pc, #124]	; (682c <usart_write_buffer_wait+0xb8>)
    67ae:	4698      	mov	r8, r3
    67b0:	e011      	b.n	67d6 <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
    67b2:	1c73      	adds	r3, r6, #1
    67b4:	b29b      	uxth	r3, r3
    67b6:	9a01      	ldr	r2, [sp, #4]
    67b8:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    67ba:	796a      	ldrb	r2, [r5, #5]
    67bc:	2a01      	cmp	r2, #1
    67be:	d017      	beq.n	67f0 <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
    67c0:	b289      	uxth	r1, r1
    67c2:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    67c4:	0028      	movs	r0, r5
    67c6:	4b1a      	ldr	r3, [pc, #104]	; (6830 <usart_write_buffer_wait+0xbc>)
    67c8:	4798      	blx	r3
	while (length--) {
    67ca:	464b      	mov	r3, r9
    67cc:	3b01      	subs	r3, #1
    67ce:	b29b      	uxth	r3, r3
    67d0:	4699      	mov	r9, r3
    67d2:	4543      	cmp	r3, r8
    67d4:	d013      	beq.n	67fe <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    67d6:	7e23      	ldrb	r3, [r4, #24]
    67d8:	423b      	tst	r3, r7
    67da:	d1ea      	bne.n	67b2 <usart_write_buffer_wait+0x3e>
    67dc:	4b13      	ldr	r3, [pc, #76]	; (682c <usart_write_buffer_wait+0xb8>)
    67de:	7e22      	ldrb	r2, [r4, #24]
    67e0:	423a      	tst	r2, r7
    67e2:	d1e6      	bne.n	67b2 <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
    67e4:	2b01      	cmp	r3, #1
    67e6:	d019      	beq.n	681c <usart_write_buffer_wait+0xa8>
    67e8:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    67ea:	2b00      	cmp	r3, #0
    67ec:	d1f7      	bne.n	67de <usart_write_buffer_wait+0x6a>
    67ee:	e7e0      	b.n	67b2 <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    67f0:	3602      	adds	r6, #2
    67f2:	b2b6      	uxth	r6, r6
    67f4:	9a01      	ldr	r2, [sp, #4]
    67f6:	5cd3      	ldrb	r3, [r2, r3]
    67f8:	021b      	lsls	r3, r3, #8
    67fa:	4319      	orrs	r1, r3
    67fc:	e7e2      	b.n	67c4 <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    67fe:	7e23      	ldrb	r3, [r4, #24]
    6800:	079b      	lsls	r3, r3, #30
    6802:	d40d      	bmi.n	6820 <usart_write_buffer_wait+0xac>
    6804:	4b09      	ldr	r3, [pc, #36]	; (682c <usart_write_buffer_wait+0xb8>)
    6806:	2102      	movs	r1, #2
    6808:	7e22      	ldrb	r2, [r4, #24]
    680a:	420a      	tst	r2, r1
    680c:	d10a      	bne.n	6824 <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
    680e:	2b01      	cmp	r3, #1
    6810:	d00a      	beq.n	6828 <usart_write_buffer_wait+0xb4>
    6812:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    6814:	2b00      	cmp	r3, #0
    6816:	d1f7      	bne.n	6808 <usart_write_buffer_wait+0x94>
	return STATUS_OK;
    6818:	2000      	movs	r0, #0
    681a:	e7b5      	b.n	6788 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    681c:	2012      	movs	r0, #18
    681e:	e7b3      	b.n	6788 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    6820:	2000      	movs	r0, #0
    6822:	e7b1      	b.n	6788 <usart_write_buffer_wait+0x14>
    6824:	2000      	movs	r0, #0
    6826:	e7af      	b.n	6788 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    6828:	2012      	movs	r0, #18
    682a:	e7ad      	b.n	6788 <usart_write_buffer_wait+0x14>
    682c:	0000ffff 	.word	0x0000ffff
    6830:	000066d9 	.word	0x000066d9

00006834 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    6834:	b5f0      	push	{r4, r5, r6, r7, lr}
    6836:	46d6      	mov	lr, sl
    6838:	b500      	push	{lr}
    683a:	b084      	sub	sp, #16
    683c:	0004      	movs	r4, r0
    683e:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    6840:	2017      	movs	r0, #23
	if (length == 0) {
    6842:	2a00      	cmp	r2, #0
    6844:	d103      	bne.n	684e <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    6846:	b004      	add	sp, #16
    6848:	bc04      	pop	{r2}
    684a:	4692      	mov	sl, r2
    684c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    684e:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    6850:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    6852:	2b00      	cmp	r3, #0
    6854:	d0f7      	beq.n	6846 <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    6856:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    6858:	3a01      	subs	r2, #1
    685a:	b293      	uxth	r3, r2
    685c:	469a      	mov	sl, r3
    685e:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    6860:	2704      	movs	r7, #4
    6862:	e019      	b.n	6898 <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    6864:	2300      	movs	r3, #0
    6866:	aa02      	add	r2, sp, #8
    6868:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    686a:	1d91      	adds	r1, r2, #6
    686c:	0020      	movs	r0, r4
    686e:	4b15      	ldr	r3, [pc, #84]	; (68c4 <usart_read_buffer_wait+0x90>)
    6870:	4798      	blx	r3
		if (retval != STATUS_OK) {
    6872:	2800      	cmp	r0, #0
    6874:	d1e7      	bne.n	6846 <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    6876:	1c69      	adds	r1, r5, #1
    6878:	b289      	uxth	r1, r1
    687a:	ab02      	add	r3, sp, #8
    687c:	88db      	ldrh	r3, [r3, #6]
    687e:	9a01      	ldr	r2, [sp, #4]
    6880:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    6882:	7962      	ldrb	r2, [r4, #5]
    6884:	2a01      	cmp	r2, #1
    6886:	d014      	beq.n	68b2 <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    6888:	000d      	movs	r5, r1
	while (length--) {
    688a:	4653      	mov	r3, sl
    688c:	3b01      	subs	r3, #1
    688e:	b29b      	uxth	r3, r3
    6890:	469a      	mov	sl, r3
    6892:	4b0d      	ldr	r3, [pc, #52]	; (68c8 <usart_read_buffer_wait+0x94>)
    6894:	459a      	cmp	sl, r3
    6896:	d0d6      	beq.n	6846 <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    6898:	7e33      	ldrb	r3, [r6, #24]
    689a:	423b      	tst	r3, r7
    689c:	d1e2      	bne.n	6864 <usart_read_buffer_wait+0x30>
    689e:	4b0a      	ldr	r3, [pc, #40]	; (68c8 <usart_read_buffer_wait+0x94>)
    68a0:	7e32      	ldrb	r2, [r6, #24]
    68a2:	423a      	tst	r2, r7
    68a4:	d1de      	bne.n	6864 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    68a6:	2b01      	cmp	r3, #1
    68a8:	d009      	beq.n	68be <usart_read_buffer_wait+0x8a>
    68aa:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    68ac:	2b00      	cmp	r3, #0
    68ae:	d1f7      	bne.n	68a0 <usart_read_buffer_wait+0x6c>
    68b0:	e7d8      	b.n	6864 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    68b2:	3502      	adds	r5, #2
    68b4:	b2ad      	uxth	r5, r5
    68b6:	0a1b      	lsrs	r3, r3, #8
    68b8:	9a01      	ldr	r2, [sp, #4]
    68ba:	5453      	strb	r3, [r2, r1]
    68bc:	e7e5      	b.n	688a <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    68be:	2012      	movs	r0, #18
    68c0:	e7c1      	b.n	6846 <usart_read_buffer_wait+0x12>
    68c2:	46c0      	nop			; (mov r8, r8)
    68c4:	00006705 	.word	0x00006705
    68c8:	0000ffff 	.word	0x0000ffff

000068cc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    68cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    68ce:	0080      	lsls	r0, r0, #2
    68d0:	4b62      	ldr	r3, [pc, #392]	; (6a5c <_usart_interrupt_handler+0x190>)
    68d2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    68d4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    68d6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    68d8:	2b00      	cmp	r3, #0
    68da:	d1fc      	bne.n	68d6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    68dc:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    68de:	7da6      	ldrb	r6, [r4, #22]
    68e0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    68e2:	2330      	movs	r3, #48	; 0x30
    68e4:	5ceb      	ldrb	r3, [r5, r3]
    68e6:	2231      	movs	r2, #49	; 0x31
    68e8:	5caf      	ldrb	r7, [r5, r2]
    68ea:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    68ec:	07f3      	lsls	r3, r6, #31
    68ee:	d522      	bpl.n	6936 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    68f0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    68f2:	b29b      	uxth	r3, r3
    68f4:	2b00      	cmp	r3, #0
    68f6:	d01c      	beq.n	6932 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    68f8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    68fa:	7813      	ldrb	r3, [r2, #0]
    68fc:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    68fe:	1c51      	adds	r1, r2, #1
    6900:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    6902:	7969      	ldrb	r1, [r5, #5]
    6904:	2901      	cmp	r1, #1
    6906:	d00e      	beq.n	6926 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    6908:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    690a:	05db      	lsls	r3, r3, #23
    690c:	0ddb      	lsrs	r3, r3, #23
    690e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    6910:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    6912:	3b01      	subs	r3, #1
    6914:	b29b      	uxth	r3, r3
    6916:	85eb      	strh	r3, [r5, #46]	; 0x2e
    6918:	2b00      	cmp	r3, #0
    691a:	d10c      	bne.n	6936 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    691c:	3301      	adds	r3, #1
    691e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    6920:	3301      	adds	r3, #1
    6922:	75a3      	strb	r3, [r4, #22]
    6924:	e007      	b.n	6936 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    6926:	7851      	ldrb	r1, [r2, #1]
    6928:	0209      	lsls	r1, r1, #8
    692a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    692c:	3202      	adds	r2, #2
    692e:	62aa      	str	r2, [r5, #40]	; 0x28
    6930:	e7eb      	b.n	690a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    6932:	2301      	movs	r3, #1
    6934:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    6936:	07b3      	lsls	r3, r6, #30
    6938:	d506      	bpl.n	6948 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    693a:	2302      	movs	r3, #2
    693c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    693e:	2200      	movs	r2, #0
    6940:	3331      	adds	r3, #49	; 0x31
    6942:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    6944:	07fb      	lsls	r3, r7, #31
    6946:	d41a      	bmi.n	697e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    6948:	0773      	lsls	r3, r6, #29
    694a:	d565      	bpl.n	6a18 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    694c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    694e:	b29b      	uxth	r3, r3
    6950:	2b00      	cmp	r3, #0
    6952:	d05f      	beq.n	6a14 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6954:	8b63      	ldrh	r3, [r4, #26]
    6956:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    6958:	071a      	lsls	r2, r3, #28
    695a:	d414      	bmi.n	6986 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    695c:	223f      	movs	r2, #63	; 0x3f
    695e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    6960:	2b00      	cmp	r3, #0
    6962:	d034      	beq.n	69ce <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    6964:	079a      	lsls	r2, r3, #30
    6966:	d511      	bpl.n	698c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    6968:	221a      	movs	r2, #26
    696a:	2332      	movs	r3, #50	; 0x32
    696c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    696e:	3b30      	subs	r3, #48	; 0x30
    6970:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    6972:	077b      	lsls	r3, r7, #29
    6974:	d550      	bpl.n	6a18 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    6976:	0028      	movs	r0, r5
    6978:	696b      	ldr	r3, [r5, #20]
    697a:	4798      	blx	r3
    697c:	e04c      	b.n	6a18 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    697e:	0028      	movs	r0, r5
    6980:	68eb      	ldr	r3, [r5, #12]
    6982:	4798      	blx	r3
    6984:	e7e0      	b.n	6948 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    6986:	2237      	movs	r2, #55	; 0x37
    6988:	4013      	ands	r3, r2
    698a:	e7e9      	b.n	6960 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    698c:	075a      	lsls	r2, r3, #29
    698e:	d505      	bpl.n	699c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    6990:	221e      	movs	r2, #30
    6992:	2332      	movs	r3, #50	; 0x32
    6994:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    6996:	3b2e      	subs	r3, #46	; 0x2e
    6998:	8363      	strh	r3, [r4, #26]
    699a:	e7ea      	b.n	6972 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    699c:	07da      	lsls	r2, r3, #31
    699e:	d505      	bpl.n	69ac <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    69a0:	2213      	movs	r2, #19
    69a2:	2332      	movs	r3, #50	; 0x32
    69a4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    69a6:	3b31      	subs	r3, #49	; 0x31
    69a8:	8363      	strh	r3, [r4, #26]
    69aa:	e7e2      	b.n	6972 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    69ac:	06da      	lsls	r2, r3, #27
    69ae:	d505      	bpl.n	69bc <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    69b0:	2242      	movs	r2, #66	; 0x42
    69b2:	2332      	movs	r3, #50	; 0x32
    69b4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    69b6:	3b22      	subs	r3, #34	; 0x22
    69b8:	8363      	strh	r3, [r4, #26]
    69ba:	e7da      	b.n	6972 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    69bc:	2220      	movs	r2, #32
    69be:	421a      	tst	r2, r3
    69c0:	d0d7      	beq.n	6972 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    69c2:	3221      	adds	r2, #33	; 0x21
    69c4:	2332      	movs	r3, #50	; 0x32
    69c6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    69c8:	3b12      	subs	r3, #18
    69ca:	8363      	strh	r3, [r4, #26]
    69cc:	e7d1      	b.n	6972 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    69ce:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    69d0:	05db      	lsls	r3, r3, #23
    69d2:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    69d4:	b2da      	uxtb	r2, r3
    69d6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    69d8:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    69da:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    69dc:	1c51      	adds	r1, r2, #1
    69de:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    69e0:	7969      	ldrb	r1, [r5, #5]
    69e2:	2901      	cmp	r1, #1
    69e4:	d010      	beq.n	6a08 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    69e6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    69e8:	3b01      	subs	r3, #1
    69ea:	b29b      	uxth	r3, r3
    69ec:	85ab      	strh	r3, [r5, #44]	; 0x2c
    69ee:	2b00      	cmp	r3, #0
    69f0:	d112      	bne.n	6a18 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    69f2:	3304      	adds	r3, #4
    69f4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    69f6:	2200      	movs	r2, #0
    69f8:	332e      	adds	r3, #46	; 0x2e
    69fa:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    69fc:	07bb      	lsls	r3, r7, #30
    69fe:	d50b      	bpl.n	6a18 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    6a00:	0028      	movs	r0, r5
    6a02:	692b      	ldr	r3, [r5, #16]
    6a04:	4798      	blx	r3
    6a06:	e007      	b.n	6a18 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    6a08:	0a1b      	lsrs	r3, r3, #8
    6a0a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    6a0c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    6a0e:	3301      	adds	r3, #1
    6a10:	626b      	str	r3, [r5, #36]	; 0x24
    6a12:	e7e8      	b.n	69e6 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    6a14:	2304      	movs	r3, #4
    6a16:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    6a18:	06f3      	lsls	r3, r6, #27
    6a1a:	d504      	bpl.n	6a26 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    6a1c:	2310      	movs	r3, #16
    6a1e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    6a20:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    6a22:	06fb      	lsls	r3, r7, #27
    6a24:	d40e      	bmi.n	6a44 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    6a26:	06b3      	lsls	r3, r6, #26
    6a28:	d504      	bpl.n	6a34 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    6a2a:	2320      	movs	r3, #32
    6a2c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    6a2e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    6a30:	073b      	lsls	r3, r7, #28
    6a32:	d40b      	bmi.n	6a4c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    6a34:	0733      	lsls	r3, r6, #28
    6a36:	d504      	bpl.n	6a42 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    6a38:	2308      	movs	r3, #8
    6a3a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    6a3c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    6a3e:	06bb      	lsls	r3, r7, #26
    6a40:	d408      	bmi.n	6a54 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    6a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    6a44:	0028      	movs	r0, r5
    6a46:	69eb      	ldr	r3, [r5, #28]
    6a48:	4798      	blx	r3
    6a4a:	e7ec      	b.n	6a26 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    6a4c:	0028      	movs	r0, r5
    6a4e:	69ab      	ldr	r3, [r5, #24]
    6a50:	4798      	blx	r3
    6a52:	e7ef      	b.n	6a34 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    6a54:	6a2b      	ldr	r3, [r5, #32]
    6a56:	0028      	movs	r0, r5
    6a58:	4798      	blx	r3
}
    6a5a:	e7f2      	b.n	6a42 <_usart_interrupt_handler+0x176>
    6a5c:	200020f0 	.word	0x200020f0

00006a60 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    6a60:	b510      	push	{r4, lr}
	switch (clock_source) {
    6a62:	2808      	cmp	r0, #8
    6a64:	d803      	bhi.n	6a6e <system_clock_source_get_hz+0xe>
    6a66:	0080      	lsls	r0, r0, #2
    6a68:	4b1c      	ldr	r3, [pc, #112]	; (6adc <system_clock_source_get_hz+0x7c>)
    6a6a:	581b      	ldr	r3, [r3, r0]
    6a6c:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    6a6e:	2000      	movs	r0, #0
    6a70:	e032      	b.n	6ad8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    6a72:	4b1b      	ldr	r3, [pc, #108]	; (6ae0 <system_clock_source_get_hz+0x80>)
    6a74:	6918      	ldr	r0, [r3, #16]
    6a76:	e02f      	b.n	6ad8 <system_clock_source_get_hz+0x78>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    6a78:	4b1a      	ldr	r3, [pc, #104]	; (6ae4 <system_clock_source_get_hz+0x84>)
    6a7a:	7d18      	ldrb	r0, [r3, #20]
    6a7c:	0700      	lsls	r0, r0, #28
    6a7e:	0f80      	lsrs	r0, r0, #30
    6a80:	1c43      	adds	r3, r0, #1
    6a82:	4819      	ldr	r0, [pc, #100]	; (6ae8 <system_clock_source_get_hz+0x88>)
    6a84:	4358      	muls	r0, r3
    6a86:	e027      	b.n	6ad8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    6a88:	4b15      	ldr	r3, [pc, #84]	; (6ae0 <system_clock_source_get_hz+0x80>)
    6a8a:	6958      	ldr	r0, [r3, #20]
    6a8c:	e024      	b.n	6ad8 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    6a8e:	4b14      	ldr	r3, [pc, #80]	; (6ae0 <system_clock_source_get_hz+0x80>)
    6a90:	681b      	ldr	r3, [r3, #0]
			return 0;
    6a92:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    6a94:	079b      	lsls	r3, r3, #30
    6a96:	d51f      	bpl.n	6ad8 <system_clock_source_get_hz+0x78>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    6a98:	4912      	ldr	r1, [pc, #72]	; (6ae4 <system_clock_source_get_hz+0x84>)
    6a9a:	2280      	movs	r2, #128	; 0x80
    6a9c:	0052      	lsls	r2, r2, #1
    6a9e:	68cb      	ldr	r3, [r1, #12]
    6aa0:	4213      	tst	r3, r2
    6aa2:	d0fc      	beq.n	6a9e <system_clock_source_get_hz+0x3e>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    6aa4:	4b0e      	ldr	r3, [pc, #56]	; (6ae0 <system_clock_source_get_hz+0x80>)
    6aa6:	681b      	ldr	r3, [r3, #0]
    6aa8:	075b      	lsls	r3, r3, #29
    6aaa:	d401      	bmi.n	6ab0 <system_clock_source_get_hz+0x50>
		return 48000000UL;
    6aac:	480f      	ldr	r0, [pc, #60]	; (6aec <system_clock_source_get_hz+0x8c>)
    6aae:	e013      	b.n	6ad8 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    6ab0:	2000      	movs	r0, #0
    6ab2:	4b0f      	ldr	r3, [pc, #60]	; (6af0 <system_clock_source_get_hz+0x90>)
    6ab4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    6ab6:	4b0a      	ldr	r3, [pc, #40]	; (6ae0 <system_clock_source_get_hz+0x80>)
    6ab8:	689b      	ldr	r3, [r3, #8]
    6aba:	041b      	lsls	r3, r3, #16
    6abc:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    6abe:	4358      	muls	r0, r3
    6ac0:	e00a      	b.n	6ad8 <system_clock_source_get_hz+0x78>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    6ac2:	2328      	movs	r3, #40	; 0x28
    6ac4:	4a07      	ldr	r2, [pc, #28]	; (6ae4 <system_clock_source_get_hz+0x84>)
    6ac6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    6ac8:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    6aca:	079b      	lsls	r3, r3, #30
    6acc:	d504      	bpl.n	6ad8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    6ace:	4b04      	ldr	r3, [pc, #16]	; (6ae0 <system_clock_source_get_hz+0x80>)
    6ad0:	68d8      	ldr	r0, [r3, #12]
    6ad2:	e001      	b.n	6ad8 <system_clock_source_get_hz+0x78>
		return 32768UL;
    6ad4:	2080      	movs	r0, #128	; 0x80
    6ad6:	0200      	lsls	r0, r0, #8
	}
}
    6ad8:	bd10      	pop	{r4, pc}
    6ada:	46c0      	nop			; (mov r8, r8)
    6adc:	00017018 	.word	0x00017018
    6ae0:	200002e4 	.word	0x200002e4
    6ae4:	40000c00 	.word	0x40000c00
    6ae8:	003d0900 	.word	0x003d0900
    6aec:	02dc6c00 	.word	0x02dc6c00
    6af0:	000070b9 	.word	0x000070b9

00006af4 <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    6af4:	b570      	push	{r4, r5, r6, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    6af6:	4c0b      	ldr	r4, [pc, #44]	; (6b24 <system_clock_source_osc16m_set_config+0x30>)
    6af8:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
    6afa:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
    6afc:	7846      	ldrb	r6, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
    6afe:	7802      	ldrb	r2, [r0, #0]
    6b00:	2103      	movs	r1, #3
    6b02:	4011      	ands	r1, r2
    6b04:	0089      	lsls	r1, r1, #2
    6b06:	220c      	movs	r2, #12
    6b08:	4393      	bics	r3, r2
    6b0a:	430b      	orrs	r3, r1
    6b0c:	3a0b      	subs	r2, #11
    6b0e:	4032      	ands	r2, r6
    6b10:	0192      	lsls	r2, r2, #6
    6b12:	2140      	movs	r1, #64	; 0x40
    6b14:	438b      	bics	r3, r1
    6b16:	4313      	orrs	r3, r2
    6b18:	01ed      	lsls	r5, r5, #7
    6b1a:	227f      	movs	r2, #127	; 0x7f
    6b1c:	4013      	ands	r3, r2
    6b1e:	432b      	orrs	r3, r5
    6b20:	7523      	strb	r3, [r4, #20]
}
    6b22:	bd70      	pop	{r4, r5, r6, pc}
    6b24:	40000c00 	.word	0x40000c00

00006b28 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    6b28:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b2a:	46d6      	mov	lr, sl
    6b2c:	464f      	mov	r7, r9
    6b2e:	4646      	mov	r6, r8
    6b30:	b5c0      	push	{r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    6b32:	4b20      	ldr	r3, [pc, #128]	; (6bb4 <system_clock_source_xosc32k_set_config+0x8c>)
    6b34:	469a      	mov	sl, r3
    6b36:	695b      	ldr	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    6b38:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    6b3a:	7801      	ldrb	r1, [r0, #0]
    6b3c:	424c      	negs	r4, r1
    6b3e:	414c      	adcs	r4, r1
    6b40:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    6b42:	7881      	ldrb	r1, [r0, #2]
    6b44:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    6b46:	78c1      	ldrb	r1, [r0, #3]
    6b48:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    6b4a:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    6b4c:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    6b4e:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    6b50:	6840      	ldr	r0, [r0, #4]
    6b52:	4919      	ldr	r1, [pc, #100]	; (6bb8 <system_clock_source_xosc32k_set_config+0x90>)
    6b54:	6148      	str	r0, [r1, #20]

	OSC32KCTRL->XOSC32K = temp;
    6b56:	2101      	movs	r1, #1
    6b58:	4648      	mov	r0, r9
    6b5a:	0080      	lsls	r0, r0, #2
    6b5c:	2204      	movs	r2, #4
    6b5e:	4393      	bics	r3, r2
    6b60:	4303      	orrs	r3, r0
    6b62:	4640      	mov	r0, r8
    6b64:	4008      	ands	r0, r1
    6b66:	00c0      	lsls	r0, r0, #3
    6b68:	3204      	adds	r2, #4
    6b6a:	4393      	bics	r3, r2
    6b6c:	4303      	orrs	r3, r0
    6b6e:	4660      	mov	r0, ip
    6b70:	4008      	ands	r0, r1
    6b72:	0100      	lsls	r0, r0, #4
    6b74:	3208      	adds	r2, #8
    6b76:	4393      	bics	r3, r2
    6b78:	4303      	orrs	r3, r0
    6b7a:	400f      	ands	r7, r1
    6b7c:	01bf      	lsls	r7, r7, #6
    6b7e:	2040      	movs	r0, #64	; 0x40
    6b80:	4383      	bics	r3, r0
    6b82:	433b      	orrs	r3, r7
    6b84:	400e      	ands	r6, r1
    6b86:	01f6      	lsls	r6, r6, #7
    6b88:	3040      	adds	r0, #64	; 0x40
    6b8a:	4383      	bics	r3, r0
    6b8c:	4333      	orrs	r3, r6
    6b8e:	3879      	subs	r0, #121	; 0x79
    6b90:	4005      	ands	r5, r0
    6b92:	022d      	lsls	r5, r5, #8
    6b94:	4809      	ldr	r0, [pc, #36]	; (6bbc <system_clock_source_xosc32k_set_config+0x94>)
    6b96:	4003      	ands	r3, r0
    6b98:	432b      	orrs	r3, r5
    6b9a:	4021      	ands	r1, r4
    6b9c:	0309      	lsls	r1, r1, #12
    6b9e:	4808      	ldr	r0, [pc, #32]	; (6bc0 <system_clock_source_xosc32k_set_config+0x98>)
    6ba0:	4003      	ands	r3, r0
    6ba2:	430b      	orrs	r3, r1
    6ba4:	4652      	mov	r2, sl
    6ba6:	6153      	str	r3, [r2, #20]
}
    6ba8:	bc1c      	pop	{r2, r3, r4}
    6baa:	4690      	mov	r8, r2
    6bac:	4699      	mov	r9, r3
    6bae:	46a2      	mov	sl, r4
    6bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6bb2:	46c0      	nop			; (mov r8, r8)
    6bb4:	40001000 	.word	0x40001000
    6bb8:	200002e4 	.word	0x200002e4
    6bbc:	fffff8ff 	.word	0xfffff8ff
    6bc0:	ffffefff 	.word	0xffffefff

00006bc4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    6bc4:	2808      	cmp	r0, #8
    6bc6:	d803      	bhi.n	6bd0 <system_clock_source_enable+0xc>
    6bc8:	0080      	lsls	r0, r0, #2
    6bca:	4b29      	ldr	r3, [pc, #164]	; (6c70 <system_clock_source_enable+0xac>)
    6bcc:	581b      	ldr	r3, [r3, r0]
    6bce:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6bd0:	2017      	movs	r0, #23
    6bd2:	e04b      	b.n	6c6c <system_clock_source_enable+0xa8>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    6bd4:	4a27      	ldr	r2, [pc, #156]	; (6c74 <system_clock_source_enable+0xb0>)
    6bd6:	7d13      	ldrb	r3, [r2, #20]
    6bd8:	2102      	movs	r1, #2
    6bda:	430b      	orrs	r3, r1
    6bdc:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    6bde:	2000      	movs	r0, #0
    6be0:	e044      	b.n	6c6c <system_clock_source_enable+0xa8>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    6be2:	4a25      	ldr	r2, [pc, #148]	; (6c78 <system_clock_source_enable+0xb4>)
    6be4:	6993      	ldr	r3, [r2, #24]
    6be6:	2102      	movs	r1, #2
    6be8:	430b      	orrs	r3, r1
    6bea:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    6bec:	2000      	movs	r0, #0
		break;
    6bee:	e03d      	b.n	6c6c <system_clock_source_enable+0xa8>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    6bf0:	4a20      	ldr	r2, [pc, #128]	; (6c74 <system_clock_source_enable+0xb0>)
    6bf2:	8a13      	ldrh	r3, [r2, #16]
    6bf4:	2102      	movs	r1, #2
    6bf6:	430b      	orrs	r3, r1
    6bf8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    6bfa:	2000      	movs	r0, #0
		break;
    6bfc:	e036      	b.n	6c6c <system_clock_source_enable+0xa8>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    6bfe:	4a1e      	ldr	r2, [pc, #120]	; (6c78 <system_clock_source_enable+0xb4>)
    6c00:	6953      	ldr	r3, [r2, #20]
    6c02:	2102      	movs	r1, #2
    6c04:	430b      	orrs	r3, r1
    6c06:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    6c08:	2000      	movs	r0, #0
		break;
    6c0a:	e02f      	b.n	6c6c <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    6c0c:	491b      	ldr	r1, [pc, #108]	; (6c7c <system_clock_source_enable+0xb8>)
    6c0e:	680b      	ldr	r3, [r1, #0]
    6c10:	2202      	movs	r2, #2
    6c12:	4313      	orrs	r3, r2
    6c14:	600b      	str	r3, [r1, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    6c16:	4b17      	ldr	r3, [pc, #92]	; (6c74 <system_clock_source_enable+0xb0>)
    6c18:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    6c1a:	0019      	movs	r1, r3
    6c1c:	32fe      	adds	r2, #254	; 0xfe
    6c1e:	68cb      	ldr	r3, [r1, #12]
    6c20:	4213      	tst	r3, r2
    6c22:	d0fc      	beq.n	6c1e <system_clock_source_enable+0x5a>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    6c24:	4a15      	ldr	r2, [pc, #84]	; (6c7c <system_clock_source_enable+0xb8>)
    6c26:	6891      	ldr	r1, [r2, #8]
    6c28:	4b12      	ldr	r3, [pc, #72]	; (6c74 <system_clock_source_enable+0xb0>)
    6c2a:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    6c2c:	6852      	ldr	r2, [r2, #4]
    6c2e:	61da      	str	r2, [r3, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
    6c30:	2200      	movs	r2, #0
    6c32:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    6c34:	0019      	movs	r1, r3
    6c36:	3201      	adds	r2, #1
    6c38:	32ff      	adds	r2, #255	; 0xff
    6c3a:	68cb      	ldr	r3, [r1, #12]
    6c3c:	4213      	tst	r3, r2
    6c3e:	d0fc      	beq.n	6c3a <system_clock_source_enable+0x76>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    6c40:	4b0e      	ldr	r3, [pc, #56]	; (6c7c <system_clock_source_enable+0xb8>)
    6c42:	681b      	ldr	r3, [r3, #0]
    6c44:	b29b      	uxth	r3, r3
    6c46:	4a0b      	ldr	r2, [pc, #44]	; (6c74 <system_clock_source_enable+0xb0>)
    6c48:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    6c4a:	2000      	movs	r0, #0
    6c4c:	e00e      	b.n	6c6c <system_clock_source_enable+0xa8>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    6c4e:	4909      	ldr	r1, [pc, #36]	; (6c74 <system_clock_source_enable+0xb0>)
    6c50:	2228      	movs	r2, #40	; 0x28
    6c52:	5c8b      	ldrb	r3, [r1, r2]
    6c54:	2002      	movs	r0, #2
    6c56:	4303      	orrs	r3, r0
    6c58:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    6c5a:	0008      	movs	r0, r1
    6c5c:	2138      	movs	r1, #56	; 0x38
    6c5e:	3a26      	subs	r2, #38	; 0x26
    6c60:	5c43      	ldrb	r3, [r0, r1]
    6c62:	4213      	tst	r3, r2
    6c64:	d1fc      	bne.n	6c60 <system_clock_source_enable+0x9c>
	return STATUS_OK;
    6c66:	2000      	movs	r0, #0
    6c68:	e000      	b.n	6c6c <system_clock_source_enable+0xa8>
		return STATUS_OK;
    6c6a:	2000      	movs	r0, #0
}
    6c6c:	4770      	bx	lr
    6c6e:	46c0      	nop			; (mov r8, r8)
    6c70:	0001703c 	.word	0x0001703c
    6c74:	40000c00 	.word	0x40000c00
    6c78:	40001000 	.word	0x40001000
    6c7c:	200002e4 	.word	0x200002e4

00006c80 <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    6c80:	2808      	cmp	r0, #8
    6c82:	d832      	bhi.n	6cea <system_clock_source_disable+0x6a>
    6c84:	0080      	lsls	r0, r0, #2
    6c86:	4b1a      	ldr	r3, [pc, #104]	; (6cf0 <system_clock_source_disable+0x70>)
    6c88:	581b      	ldr	r3, [r3, r0]
    6c8a:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    6c8c:	4a19      	ldr	r2, [pc, #100]	; (6cf4 <system_clock_source_disable+0x74>)
    6c8e:	7d13      	ldrb	r3, [r2, #20]
    6c90:	2102      	movs	r1, #2
    6c92:	438b      	bics	r3, r1
    6c94:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    6c96:	2000      	movs	r0, #0
}
    6c98:	4770      	bx	lr
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    6c9a:	4a17      	ldr	r2, [pc, #92]	; (6cf8 <system_clock_source_disable+0x78>)
    6c9c:	6993      	ldr	r3, [r2, #24]
    6c9e:	2102      	movs	r1, #2
    6ca0:	438b      	bics	r3, r1
    6ca2:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    6ca4:	2000      	movs	r0, #0
		break;
    6ca6:	e7f7      	b.n	6c98 <system_clock_source_disable+0x18>
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    6ca8:	4a12      	ldr	r2, [pc, #72]	; (6cf4 <system_clock_source_disable+0x74>)
    6caa:	8a13      	ldrh	r3, [r2, #16]
    6cac:	2102      	movs	r1, #2
    6cae:	438b      	bics	r3, r1
    6cb0:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    6cb2:	2000      	movs	r0, #0
		break;
    6cb4:	e7f0      	b.n	6c98 <system_clock_source_disable+0x18>
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    6cb6:	4a10      	ldr	r2, [pc, #64]	; (6cf8 <system_clock_source_disable+0x78>)
    6cb8:	6953      	ldr	r3, [r2, #20]
    6cba:	2102      	movs	r1, #2
    6cbc:	438b      	bics	r3, r1
    6cbe:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    6cc0:	2000      	movs	r0, #0
		break;
    6cc2:	e7e9      	b.n	6c98 <system_clock_source_disable+0x18>
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    6cc4:	4b0d      	ldr	r3, [pc, #52]	; (6cfc <system_clock_source_disable+0x7c>)
    6cc6:	681a      	ldr	r2, [r3, #0]
    6cc8:	2102      	movs	r1, #2
    6cca:	438a      	bics	r2, r1
    6ccc:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    6cce:	681b      	ldr	r3, [r3, #0]
    6cd0:	b29b      	uxth	r3, r3
    6cd2:	4a08      	ldr	r2, [pc, #32]	; (6cf4 <system_clock_source_disable+0x74>)
    6cd4:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    6cd6:	2000      	movs	r0, #0
		break;
    6cd8:	e7de      	b.n	6c98 <system_clock_source_disable+0x18>
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    6cda:	4906      	ldr	r1, [pc, #24]	; (6cf4 <system_clock_source_disable+0x74>)
    6cdc:	2228      	movs	r2, #40	; 0x28
    6cde:	5c8b      	ldrb	r3, [r1, r2]
    6ce0:	2002      	movs	r0, #2
    6ce2:	4383      	bics	r3, r0
    6ce4:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    6ce6:	2000      	movs	r0, #0
		break;
    6ce8:	e7d6      	b.n	6c98 <system_clock_source_disable+0x18>
		return STATUS_ERR_INVALID_ARG;
    6cea:	2017      	movs	r0, #23
    6cec:	e7d4      	b.n	6c98 <system_clock_source_disable+0x18>
    6cee:	46c0      	nop			; (mov r8, r8)
    6cf0:	00017060 	.word	0x00017060
    6cf4:	40000c00 	.word	0x40000c00
    6cf8:	40001000 	.word	0x40001000
    6cfc:	200002e4 	.word	0x200002e4

00006d00 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    6d00:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d02:	46d6      	mov	lr, sl
    6d04:	464f      	mov	r7, r9
    6d06:	4646      	mov	r6, r8
    6d08:	b5c0      	push	{r6, r7, lr}
    6d0a:	b088      	sub	sp, #32
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    6d0c:	2280      	movs	r2, #128	; 0x80
    6d0e:	0052      	lsls	r2, r2, #1
    6d10:	4b56      	ldr	r3, [pc, #344]	; (6e6c <system_clock_init+0x16c>)
    6d12:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    6d14:	3afd      	subs	r2, #253	; 0xfd
    6d16:	4b56      	ldr	r3, [pc, #344]	; (6e70 <system_clock_init+0x170>)
    6d18:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    6d1a:	4a56      	ldr	r2, [pc, #344]	; (6e74 <system_clock_init+0x174>)
    6d1c:	6853      	ldr	r3, [r2, #4]
    6d1e:	211e      	movs	r1, #30
    6d20:	438b      	bics	r3, r1
    6d22:	391a      	subs	r1, #26
    6d24:	430b      	orrs	r3, r1
    6d26:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    6d28:	2380      	movs	r3, #128	; 0x80
    6d2a:	05db      	lsls	r3, r3, #23
    6d2c:	789b      	ldrb	r3, [r3, #2]
    6d2e:	2b02      	cmp	r3, #2
    6d30:	d00f      	beq.n	6d52 <system_clock_init+0x52>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB || SAMR34J || SAMR35J || (WLR089U0)
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    6d32:	2380      	movs	r3, #128	; 0x80
    6d34:	05db      	lsls	r3, r3, #23
    6d36:	789b      	ldrb	r3, [r3, #2]
    6d38:	b25b      	sxtb	r3, r3
    6d3a:	2b00      	cmp	r3, #0
    6d3c:	db09      	blt.n	6d52 <system_clock_init+0x52>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    6d3e:	2380      	movs	r3, #128	; 0x80
    6d40:	05db      	lsls	r3, r3, #23
    6d42:	2201      	movs	r2, #1
    6d44:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    6d46:	3201      	adds	r2, #1
    6d48:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    6d4a:	001a      	movs	r2, r3
    6d4c:	7993      	ldrb	r3, [r2, #6]
    6d4e:	2b00      	cmp	r3, #0
    6d50:	d0fc      	beq.n	6d4c <system_clock_init+0x4c>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    6d52:	a805      	add	r0, sp, #20
    6d54:	2300      	movs	r3, #0
    6d56:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    6d58:	2280      	movs	r2, #128	; 0x80
    6d5a:	0212      	lsls	r2, r2, #8
    6d5c:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    6d5e:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    6d60:	2201      	movs	r2, #1
    6d62:	70c2      	strb	r2, [r0, #3]
	config->run_in_standby      = false;
    6d64:	7203      	strb	r3, [r0, #8]
	config->write_once          = false;
    6d66:	7283      	strb	r3, [r0, #10]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    6d68:	3203      	adds	r2, #3
    6d6a:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    6d6c:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    6d6e:	4b42      	ldr	r3, [pc, #264]	; (6e78 <system_clock_init+0x178>)
    6d70:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    6d72:	2005      	movs	r0, #5
    6d74:	4b41      	ldr	r3, [pc, #260]	; (6e7c <system_clock_init+0x17c>)
    6d76:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    6d78:	4941      	ldr	r1, [pc, #260]	; (6e80 <system_clock_init+0x180>)
    6d7a:	2201      	movs	r2, #1
    6d7c:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    6d7e:	421a      	tst	r2, r3
    6d80:	d0fc      	beq.n	6d7c <system_clock_init+0x7c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		OSC32KCTRL->XOSC32K.bit.ONDEMAND = 1;
    6d82:	4a3f      	ldr	r2, [pc, #252]	; (6e80 <system_clock_init+0x180>)
    6d84:	6953      	ldr	r3, [r2, #20]
    6d86:	2180      	movs	r1, #128	; 0x80
    6d88:	430b      	orrs	r3, r1
    6d8a:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    6d8c:	a902      	add	r1, sp, #8
    6d8e:	2501      	movs	r5, #1
    6d90:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    6d92:	2400      	movs	r4, #0
    6d94:	704c      	strb	r4, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    6d96:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    6d98:	724c      	strb	r4, [r1, #9]
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    6d9a:	2303      	movs	r3, #3
    6d9c:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    6d9e:	2000      	movs	r0, #0
    6da0:	4b38      	ldr	r3, [pc, #224]	; (6e84 <system_clock_init+0x184>)
    6da2:	4798      	blx	r3
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    6da4:	2006      	movs	r0, #6
    6da6:	4b38      	ldr	r3, [pc, #224]	; (6e88 <system_clock_init+0x188>)
    6da8:	4798      	blx	r3
	config->run_in_standby  = false;
    6daa:	a801      	add	r0, sp, #4
    6dac:	7044      	strb	r4, [r0, #1]
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    6dae:	7005      	strb	r5, [r0, #0]
	osc16m_conf.on_demand       = 0;
    6db0:	7084      	strb	r4, [r0, #2]
	system_clock_source_osc16m_set_config(&osc16m_conf);
    6db2:	4b36      	ldr	r3, [pc, #216]	; (6e8c <system_clock_init+0x18c>)
    6db4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    6db6:	2006      	movs	r0, #6
    6db8:	4b30      	ldr	r3, [pc, #192]	; (6e7c <system_clock_init+0x17c>)
    6dba:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    6dbc:	492b      	ldr	r1, [pc, #172]	; (6e6c <system_clock_init+0x16c>)
    6dbe:	2210      	movs	r2, #16
    6dc0:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    6dc2:	421a      	tst	r2, r3
    6dc4:	d0fc      	beq.n	6dc0 <system_clock_init+0xc0>
	config->division_factor    = 1;
    6dc6:	ac02      	add	r4, sp, #8
    6dc8:	2601      	movs	r6, #1
    6dca:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    6dcc:	2500      	movs	r5, #0
    6dce:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    6dd0:	2306      	movs	r3, #6
    6dd2:	469a      	mov	sl, r3
    6dd4:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    6dd6:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    6dd8:	7265      	strb	r5, [r4, #9]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    6dda:	0021      	movs	r1, r4
    6ddc:	2000      	movs	r0, #0
    6dde:	4b29      	ldr	r3, [pc, #164]	; (6e84 <system_clock_init+0x184>)
    6de0:	4698      	mov	r8, r3
    6de2:	4798      	blx	r3
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    6de4:	4b2a      	ldr	r3, [pc, #168]	; (6e90 <system_clock_init+0x190>)
    6de6:	4798      	blx	r3
	config->division_factor    = 1;
    6de8:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    6dea:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    6dec:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    6dee:	2305      	movs	r3, #5
    6df0:	7023      	strb	r3, [r4, #0]
    6df2:	7226      	strb	r6, [r4, #8]
    6df4:	0021      	movs	r1, r4
    6df6:	2001      	movs	r0, #1
    6df8:	47c0      	blx	r8
    6dfa:	2001      	movs	r0, #1
    6dfc:	4b25      	ldr	r3, [pc, #148]	; (6e94 <system_clock_init+0x194>)
    6dfe:	4699      	mov	r9, r3
    6e00:	4798      	blx	r3
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    6e02:	4f25      	ldr	r7, [pc, #148]	; (6e98 <system_clock_init+0x198>)
    6e04:	71be      	strb	r6, [r7, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    6e06:	717e      	strb	r6, [r7, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    6e08:	713e      	strb	r6, [r7, #4]
	config->division_factor    = 1;
    6e0a:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    6e0c:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    6e0e:	4653      	mov	r3, sl
    6e10:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    6e12:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    6e14:	7265      	strb	r5, [r4, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    6e16:	0021      	movs	r1, r4
    6e18:	2000      	movs	r0, #0
    6e1a:	47c0      	blx	r8
    6e1c:	2000      	movs	r0, #0
    6e1e:	47c8      	blx	r9
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    6e20:	2000      	movs	r0, #0
    6e22:	4b1e      	ldr	r3, [pc, #120]	; (6e9c <system_clock_init+0x19c>)
    6e24:	4798      	blx	r3
    6e26:	7939      	ldrb	r1, [r7, #4]
    6e28:	b2c9      	uxtb	r1, r1
    6e2a:	4b1d      	ldr	r3, [pc, #116]	; (6ea0 <system_clock_init+0x1a0>)
    6e2c:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    6e2e:	4b1d      	ldr	r3, [pc, #116]	; (6ea4 <system_clock_init+0x1a4>)
    6e30:	4298      	cmp	r0, r3
    6e32:	d814      	bhi.n	6e5e <system_clock_init+0x15e>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    6e34:	2380      	movs	r3, #128	; 0x80
    6e36:	05db      	lsls	r3, r3, #23
    6e38:	789b      	ldrb	r3, [r3, #2]
    6e3a:	2b00      	cmp	r3, #0
    6e3c:	d00f      	beq.n	6e5e <system_clock_init+0x15e>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    6e3e:	2380      	movs	r3, #128	; 0x80
    6e40:	05db      	lsls	r3, r3, #23
    6e42:	789b      	ldrb	r3, [r3, #2]
    6e44:	b25b      	sxtb	r3, r3
    6e46:	2b00      	cmp	r3, #0
    6e48:	db09      	blt.n	6e5e <system_clock_init+0x15e>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    6e4a:	2380      	movs	r3, #128	; 0x80
    6e4c:	05db      	lsls	r3, r3, #23
    6e4e:	2201      	movs	r2, #1
    6e50:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    6e52:	2200      	movs	r2, #0
    6e54:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    6e56:	001a      	movs	r2, r3
    6e58:	7993      	ldrb	r3, [r2, #6]
    6e5a:	2b00      	cmp	r3, #0
    6e5c:	d0fc      	beq.n	6e58 <system_clock_init+0x158>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    6e5e:	b008      	add	sp, #32
    6e60:	bc1c      	pop	{r2, r3, r4}
    6e62:	4690      	mov	r8, r2
    6e64:	4699      	mov	r9, r3
    6e66:	46a2      	mov	sl, r4
    6e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6e6a:	46c0      	nop			; (mov r8, r8)
    6e6c:	40000c00 	.word	0x40000c00
    6e70:	40001400 	.word	0x40001400
    6e74:	41004000 	.word	0x41004000
    6e78:	00006b29 	.word	0x00006b29
    6e7c:	00006bc5 	.word	0x00006bc5
    6e80:	40001000 	.word	0x40001000
    6e84:	00006ecd 	.word	0x00006ecd
    6e88:	00006c81 	.word	0x00006c81
    6e8c:	00006af5 	.word	0x00006af5
    6e90:	00006ea9 	.word	0x00006ea9
    6e94:	00006f79 	.word	0x00006f79
    6e98:	40000400 	.word	0x40000400
    6e9c:	00006fb9 	.word	0x00006fb9
    6ea0:	0001235d 	.word	0x0001235d
    6ea4:	00b71b00 	.word	0x00b71b00

00006ea8 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    6ea8:	4a06      	ldr	r2, [pc, #24]	; (6ec4 <system_gclk_init+0x1c>)
    6eaa:	6953      	ldr	r3, [r2, #20]
    6eac:	2140      	movs	r1, #64	; 0x40
    6eae:	430b      	orrs	r3, r1
    6eb0:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    6eb2:	2201      	movs	r2, #1
    6eb4:	4b04      	ldr	r3, [pc, #16]	; (6ec8 <system_gclk_init+0x20>)
    6eb6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    6eb8:	0019      	movs	r1, r3
    6eba:	780b      	ldrb	r3, [r1, #0]
    6ebc:	4213      	tst	r3, r2
    6ebe:	d1fc      	bne.n	6eba <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    6ec0:	4770      	bx	lr
    6ec2:	46c0      	nop			; (mov r8, r8)
    6ec4:	40000400 	.word	0x40000400
    6ec8:	40001800 	.word	0x40001800

00006ecc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    6ecc:	b570      	push	{r4, r5, r6, lr}
    6ece:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    6ed0:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    6ed2:	784b      	ldrb	r3, [r1, #1]
    6ed4:	2b00      	cmp	r3, #0
    6ed6:	d002      	beq.n	6ede <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    6ed8:	2380      	movs	r3, #128	; 0x80
    6eda:	00db      	lsls	r3, r3, #3
    6edc:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    6ede:	7a4b      	ldrb	r3, [r1, #9]
    6ee0:	2b00      	cmp	r3, #0
    6ee2:	d002      	beq.n	6eea <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    6ee4:	2380      	movs	r3, #128	; 0x80
    6ee6:	011b      	lsls	r3, r3, #4
    6ee8:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    6eea:	6848      	ldr	r0, [r1, #4]
    6eec:	2801      	cmp	r0, #1
    6eee:	d90f      	bls.n	6f10 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    6ef0:	1e43      	subs	r3, r0, #1
    6ef2:	4218      	tst	r0, r3
    6ef4:	d131      	bne.n	6f5a <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    6ef6:	2802      	cmp	r0, #2
    6ef8:	d92d      	bls.n	6f56 <system_gclk_gen_set_config+0x8a>
    6efa:	2302      	movs	r3, #2
    6efc:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    6efe:	3201      	adds	r2, #1
						mask <<= 1) {
    6f00:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    6f02:	4298      	cmp	r0, r3
    6f04:	d8fb      	bhi.n	6efe <system_gclk_gen_set_config+0x32>
    6f06:	2380      	movs	r3, #128	; 0x80
    6f08:	015b      	lsls	r3, r3, #5
    6f0a:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    6f0c:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    6f0e:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    6f10:	7a0b      	ldrb	r3, [r1, #8]
    6f12:	2b00      	cmp	r3, #0
    6f14:	d002      	beq.n	6f1c <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    6f16:	2380      	movs	r3, #128	; 0x80
    6f18:	019b      	lsls	r3, r3, #6
    6f1a:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    6f1c:	2604      	movs	r6, #4
    6f1e:	40a6      	lsls	r6, r4
    6f20:	4911      	ldr	r1, [pc, #68]	; (6f68 <system_gclk_gen_set_config+0x9c>)
    6f22:	4a12      	ldr	r2, [pc, #72]	; (6f6c <system_gclk_gen_set_config+0xa0>)
    6f24:	684b      	ldr	r3, [r1, #4]
    6f26:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    6f28:	421e      	tst	r6, r3
    6f2a:	d1fb      	bne.n	6f24 <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    6f2c:	4b10      	ldr	r3, [pc, #64]	; (6f70 <system_gclk_gen_set_config+0xa4>)
    6f2e:	4798      	blx	r3
    6f30:	00a4      	lsls	r4, r4, #2
    6f32:	4b0d      	ldr	r3, [pc, #52]	; (6f68 <system_gclk_gen_set_config+0x9c>)
    6f34:	469c      	mov	ip, r3
    6f36:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    6f38:	6a22      	ldr	r2, [r4, #32]
    6f3a:	2380      	movs	r3, #128	; 0x80
    6f3c:	005b      	lsls	r3, r3, #1
    6f3e:	401a      	ands	r2, r3
    6f40:	432a      	orrs	r2, r5
    6f42:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    6f44:	4661      	mov	r1, ip
    6f46:	4a09      	ldr	r2, [pc, #36]	; (6f6c <system_gclk_gen_set_config+0xa0>)
    6f48:	684b      	ldr	r3, [r1, #4]
    6f4a:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    6f4c:	421e      	tst	r6, r3
    6f4e:	d1fb      	bne.n	6f48 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    6f50:	4b08      	ldr	r3, [pc, #32]	; (6f74 <system_gclk_gen_set_config+0xa8>)
    6f52:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    6f54:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    6f56:	2200      	movs	r2, #0
    6f58:	e7d5      	b.n	6f06 <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    6f5a:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    6f5c:	2380      	movs	r3, #128	; 0x80
    6f5e:	009b      	lsls	r3, r3, #2
    6f60:	4318      	orrs	r0, r3
    6f62:	4305      	orrs	r5, r0
    6f64:	e7d4      	b.n	6f10 <system_gclk_gen_set_config+0x44>
    6f66:	46c0      	nop			; (mov r8, r8)
    6f68:	40001800 	.word	0x40001800
    6f6c:	000007fc 	.word	0x000007fc
    6f70:	00004aa5 	.word	0x00004aa5
    6f74:	00004ae5 	.word	0x00004ae5

00006f78 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    6f78:	b510      	push	{r4, lr}
    6f7a:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    6f7c:	2204      	movs	r2, #4
    6f7e:	4082      	lsls	r2, r0
    6f80:	4809      	ldr	r0, [pc, #36]	; (6fa8 <system_gclk_gen_enable+0x30>)
    6f82:	490a      	ldr	r1, [pc, #40]	; (6fac <system_gclk_gen_enable+0x34>)
    6f84:	6843      	ldr	r3, [r0, #4]
    6f86:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    6f88:	421a      	tst	r2, r3
    6f8a:	d1fb      	bne.n	6f84 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    6f8c:	4b08      	ldr	r3, [pc, #32]	; (6fb0 <system_gclk_gen_enable+0x38>)
    6f8e:	4798      	blx	r3
    6f90:	00a4      	lsls	r4, r4, #2
    6f92:	4b05      	ldr	r3, [pc, #20]	; (6fa8 <system_gclk_gen_enable+0x30>)
    6f94:	469c      	mov	ip, r3
    6f96:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    6f98:	6a22      	ldr	r2, [r4, #32]
    6f9a:	2380      	movs	r3, #128	; 0x80
    6f9c:	005b      	lsls	r3, r3, #1
    6f9e:	4313      	orrs	r3, r2
    6fa0:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    6fa2:	4b04      	ldr	r3, [pc, #16]	; (6fb4 <system_gclk_gen_enable+0x3c>)
    6fa4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    6fa6:	bd10      	pop	{r4, pc}
    6fa8:	40001800 	.word	0x40001800
    6fac:	000007fc 	.word	0x000007fc
    6fb0:	00004aa5 	.word	0x00004aa5
    6fb4:	00004ae5 	.word	0x00004ae5

00006fb8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    6fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6fba:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    6fbc:	2204      	movs	r2, #4
    6fbe:	4082      	lsls	r2, r0
    6fc0:	4812      	ldr	r0, [pc, #72]	; (700c <system_gclk_gen_get_hz+0x54>)
    6fc2:	4913      	ldr	r1, [pc, #76]	; (7010 <system_gclk_gen_get_hz+0x58>)
    6fc4:	6843      	ldr	r3, [r0, #4]
    6fc6:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    6fc8:	421a      	tst	r2, r3
    6fca:	d1fb      	bne.n	6fc4 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    6fcc:	4b11      	ldr	r3, [pc, #68]	; (7014 <system_gclk_gen_get_hz+0x5c>)
    6fce:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    6fd0:	4f0e      	ldr	r7, [pc, #56]	; (700c <system_gclk_gen_get_hz+0x54>)
    6fd2:	3408      	adds	r4, #8
    6fd4:	00a4      	lsls	r4, r4, #2
    6fd6:	59e0      	ldr	r0, [r4, r7]
    6fd8:	0700      	lsls	r0, r0, #28
    6fda:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    6fdc:	4b0e      	ldr	r3, [pc, #56]	; (7018 <system_gclk_gen_get_hz+0x60>)
    6fde:	4798      	blx	r3
    6fe0:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    6fe2:	59e5      	ldr	r5, [r4, r7]
    6fe4:	04ed      	lsls	r5, r5, #19
    6fe6:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    6fe8:	59e4      	ldr	r4, [r4, r7]
    6fea:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    6fec:	4b0b      	ldr	r3, [pc, #44]	; (701c <system_gclk_gen_get_hz+0x64>)
    6fee:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    6ff0:	2d00      	cmp	r5, #0
    6ff2:	d107      	bne.n	7004 <system_gclk_gen_get_hz+0x4c>
    6ff4:	2c01      	cmp	r4, #1
    6ff6:	d907      	bls.n	7008 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    6ff8:	0021      	movs	r1, r4
    6ffa:	0030      	movs	r0, r6
    6ffc:	4b08      	ldr	r3, [pc, #32]	; (7020 <system_gclk_gen_get_hz+0x68>)
    6ffe:	4798      	blx	r3
    7000:	0006      	movs	r6, r0
    7002:	e001      	b.n	7008 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    7004:	3401      	adds	r4, #1
    7006:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    7008:	0030      	movs	r0, r6
    700a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    700c:	40001800 	.word	0x40001800
    7010:	000007fc 	.word	0x000007fc
    7014:	00004aa5 	.word	0x00004aa5
    7018:	00006a61 	.word	0x00006a61
    701c:	00004ae5 	.word	0x00004ae5
    7020:	0001235d 	.word	0x0001235d

00007024 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    7024:	b510      	push	{r4, lr}
    7026:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    7028:	4b09      	ldr	r3, [pc, #36]	; (7050 <system_gclk_chan_enable+0x2c>)
    702a:	4798      	blx	r3
    702c:	00a0      	lsls	r0, r4, #2
    702e:	4b09      	ldr	r3, [pc, #36]	; (7054 <system_gclk_chan_enable+0x30>)
    7030:	469c      	mov	ip, r3
    7032:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    7034:	2280      	movs	r2, #128	; 0x80
    7036:	5883      	ldr	r3, [r0, r2]
    7038:	2140      	movs	r1, #64	; 0x40
    703a:	430b      	orrs	r3, r1
    703c:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    703e:	3140      	adds	r1, #64	; 0x40
    7040:	3a40      	subs	r2, #64	; 0x40
    7042:	5843      	ldr	r3, [r0, r1]
    7044:	421a      	tst	r2, r3
    7046:	d0fc      	beq.n	7042 <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    7048:	4b03      	ldr	r3, [pc, #12]	; (7058 <system_gclk_chan_enable+0x34>)
    704a:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    704c:	bd10      	pop	{r4, pc}
    704e:	46c0      	nop			; (mov r8, r8)
    7050:	00004aa5 	.word	0x00004aa5
    7054:	40001800 	.word	0x40001800
    7058:	00004ae5 	.word	0x00004ae5

0000705c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    705c:	b510      	push	{r4, lr}
    705e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    7060:	4b09      	ldr	r3, [pc, #36]	; (7088 <system_gclk_chan_disable+0x2c>)
    7062:	4798      	blx	r3
    7064:	00a0      	lsls	r0, r4, #2
    7066:	4b09      	ldr	r3, [pc, #36]	; (708c <system_gclk_chan_disable+0x30>)
    7068:	469c      	mov	ip, r3
    706a:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    706c:	2280      	movs	r2, #128	; 0x80
    706e:	5883      	ldr	r3, [r0, r2]
    7070:	2140      	movs	r1, #64	; 0x40
    7072:	438b      	bics	r3, r1
    7074:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    7076:	3140      	adds	r1, #64	; 0x40
    7078:	3a40      	subs	r2, #64	; 0x40
    707a:	5843      	ldr	r3, [r0, r1]
    707c:	421a      	tst	r2, r3
    707e:	d1fc      	bne.n	707a <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    7080:	4b03      	ldr	r3, [pc, #12]	; (7090 <system_gclk_chan_disable+0x34>)
    7082:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    7084:	bd10      	pop	{r4, pc}
    7086:	46c0      	nop			; (mov r8, r8)
    7088:	00004aa5 	.word	0x00004aa5
    708c:	40001800 	.word	0x40001800
    7090:	00004ae5 	.word	0x00004ae5

00007094 <system_gclk_chan_set_config>:
{
    7094:	b570      	push	{r4, r5, r6, lr}
    7096:	0004      	movs	r4, r0
    7098:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    709a:	4b05      	ldr	r3, [pc, #20]	; (70b0 <system_gclk_chan_set_config+0x1c>)
    709c:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    709e:	782a      	ldrb	r2, [r5, #0]
    70a0:	230f      	movs	r3, #15
    70a2:	4013      	ands	r3, r2
    70a4:	3420      	adds	r4, #32
    70a6:	00a4      	lsls	r4, r4, #2
    70a8:	4a02      	ldr	r2, [pc, #8]	; (70b4 <system_gclk_chan_set_config+0x20>)
    70aa:	50a3      	str	r3, [r4, r2]
}
    70ac:	bd70      	pop	{r4, r5, r6, pc}
    70ae:	46c0      	nop			; (mov r8, r8)
    70b0:	0000705d 	.word	0x0000705d
    70b4:	40001800 	.word	0x40001800

000070b8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    70b8:	b510      	push	{r4, lr}
    70ba:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    70bc:	4b06      	ldr	r3, [pc, #24]	; (70d8 <system_gclk_chan_get_hz+0x20>)
    70be:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    70c0:	3420      	adds	r4, #32
    70c2:	00a4      	lsls	r4, r4, #2
    70c4:	4b05      	ldr	r3, [pc, #20]	; (70dc <system_gclk_chan_get_hz+0x24>)
    70c6:	58e4      	ldr	r4, [r4, r3]
    70c8:	0724      	lsls	r4, r4, #28
    70ca:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    70cc:	4b04      	ldr	r3, [pc, #16]	; (70e0 <system_gclk_chan_get_hz+0x28>)
    70ce:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    70d0:	0020      	movs	r0, r4
    70d2:	4b04      	ldr	r3, [pc, #16]	; (70e4 <system_gclk_chan_get_hz+0x2c>)
    70d4:	4798      	blx	r3
}
    70d6:	bd10      	pop	{r4, pc}
    70d8:	00004aa5 	.word	0x00004aa5
    70dc:	40001800 	.word	0x40001800
    70e0:	00004ae5 	.word	0x00004ae5
    70e4:	00006fb9 	.word	0x00006fb9

000070e8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    70e8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    70ea:	78d3      	ldrb	r3, [r2, #3]
    70ec:	2b00      	cmp	r3, #0
    70ee:	d135      	bne.n	715c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    70f0:	7813      	ldrb	r3, [r2, #0]
    70f2:	2b80      	cmp	r3, #128	; 0x80
    70f4:	d029      	beq.n	714a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    70f6:	061b      	lsls	r3, r3, #24
    70f8:	2480      	movs	r4, #128	; 0x80
    70fa:	0264      	lsls	r4, r4, #9
    70fc:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    70fe:	7854      	ldrb	r4, [r2, #1]
    7100:	2502      	movs	r5, #2
    7102:	43ac      	bics	r4, r5
    7104:	d106      	bne.n	7114 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    7106:	7894      	ldrb	r4, [r2, #2]
    7108:	2c00      	cmp	r4, #0
    710a:	d120      	bne.n	714e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    710c:	2480      	movs	r4, #128	; 0x80
    710e:	02a4      	lsls	r4, r4, #10
    7110:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    7112:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7114:	7854      	ldrb	r4, [r2, #1]
    7116:	3c01      	subs	r4, #1
    7118:	2c01      	cmp	r4, #1
    711a:	d91c      	bls.n	7156 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    711c:	040d      	lsls	r5, r1, #16
    711e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    7120:	24a0      	movs	r4, #160	; 0xa0
    7122:	05e4      	lsls	r4, r4, #23
    7124:	432c      	orrs	r4, r5
    7126:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7128:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    712a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    712c:	24d0      	movs	r4, #208	; 0xd0
    712e:	0624      	lsls	r4, r4, #24
    7130:	432c      	orrs	r4, r5
    7132:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7134:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    7136:	78d4      	ldrb	r4, [r2, #3]
    7138:	2c00      	cmp	r4, #0
    713a:	d122      	bne.n	7182 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    713c:	035b      	lsls	r3, r3, #13
    713e:	d51c      	bpl.n	717a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    7140:	7893      	ldrb	r3, [r2, #2]
    7142:	2b01      	cmp	r3, #1
    7144:	d01e      	beq.n	7184 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    7146:	6141      	str	r1, [r0, #20]
    7148:	e017      	b.n	717a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    714a:	2300      	movs	r3, #0
    714c:	e7d7      	b.n	70fe <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    714e:	24c0      	movs	r4, #192	; 0xc0
    7150:	02e4      	lsls	r4, r4, #11
    7152:	4323      	orrs	r3, r4
    7154:	e7dd      	b.n	7112 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    7156:	4c0d      	ldr	r4, [pc, #52]	; (718c <_system_pinmux_config+0xa4>)
    7158:	4023      	ands	r3, r4
    715a:	e7df      	b.n	711c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    715c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    715e:	040c      	lsls	r4, r1, #16
    7160:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    7162:	23a0      	movs	r3, #160	; 0xa0
    7164:	05db      	lsls	r3, r3, #23
    7166:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7168:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    716a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    716c:	23d0      	movs	r3, #208	; 0xd0
    716e:	061b      	lsls	r3, r3, #24
    7170:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7172:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    7174:	78d3      	ldrb	r3, [r2, #3]
    7176:	2b00      	cmp	r3, #0
    7178:	d103      	bne.n	7182 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    717a:	7853      	ldrb	r3, [r2, #1]
    717c:	3b01      	subs	r3, #1
    717e:	2b01      	cmp	r3, #1
    7180:	d902      	bls.n	7188 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    7182:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    7184:	6181      	str	r1, [r0, #24]
    7186:	e7f8      	b.n	717a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    7188:	6081      	str	r1, [r0, #8]
}
    718a:	e7fa      	b.n	7182 <_system_pinmux_config+0x9a>
    718c:	fffbffff 	.word	0xfffbffff

00007190 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    7190:	b510      	push	{r4, lr}
    7192:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    7194:	09c1      	lsrs	r1, r0, #7
		return NULL;
    7196:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7198:	2900      	cmp	r1, #0
    719a:	d104      	bne.n	71a6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    719c:	0943      	lsrs	r3, r0, #5
    719e:	01db      	lsls	r3, r3, #7
    71a0:	4905      	ldr	r1, [pc, #20]	; (71b8 <system_pinmux_pin_set_config+0x28>)
    71a2:	468c      	mov	ip, r1
    71a4:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    71a6:	241f      	movs	r4, #31
    71a8:	4020      	ands	r0, r4
    71aa:	2101      	movs	r1, #1
    71ac:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    71ae:	0018      	movs	r0, r3
    71b0:	4b02      	ldr	r3, [pc, #8]	; (71bc <system_pinmux_pin_set_config+0x2c>)
    71b2:	4798      	blx	r3
}
    71b4:	bd10      	pop	{r4, pc}
    71b6:	46c0      	nop			; (mov r8, r8)
    71b8:	40002800 	.word	0x40002800
    71bc:	000070e9 	.word	0x000070e9

000071c0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    71c0:	4770      	bx	lr
    71c2:	Address 0x000071c2 is out of bounds.


000071c4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    71c4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    71c6:	4b05      	ldr	r3, [pc, #20]	; (71dc <system_init+0x18>)
    71c8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    71ca:	4b05      	ldr	r3, [pc, #20]	; (71e0 <system_init+0x1c>)
    71cc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    71ce:	4b05      	ldr	r3, [pc, #20]	; (71e4 <system_init+0x20>)
    71d0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    71d2:	4b05      	ldr	r3, [pc, #20]	; (71e8 <system_init+0x24>)
    71d4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    71d6:	4b05      	ldr	r3, [pc, #20]	; (71ec <system_init+0x28>)
    71d8:	4798      	blx	r3
}
    71da:	bd10      	pop	{r4, pc}
    71dc:	00006d01 	.word	0x00006d01
    71e0:	00004b15 	.word	0x00004b15
    71e4:	000071c1 	.word	0x000071c1
    71e8:	00004e41 	.word	0x00004e41
    71ec:	000071c1 	.word	0x000071c1

000071f0 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    71f0:	1c93      	adds	r3, r2, #2
    71f2:	009b      	lsls	r3, r3, #2
    71f4:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    71f6:	2a02      	cmp	r2, #2
    71f8:	d009      	beq.n	720e <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    71fa:	2a03      	cmp	r2, #3
    71fc:	d00c      	beq.n	7218 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    71fe:	2301      	movs	r3, #1
    7200:	4093      	lsls	r3, r2
    7202:	001a      	movs	r2, r3
    7204:	7e03      	ldrb	r3, [r0, #24]
    7206:	4313      	orrs	r3, r2
    7208:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    720a:	2000      	movs	r0, #0
    720c:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    720e:	7e03      	ldrb	r3, [r0, #24]
    7210:	2210      	movs	r2, #16
    7212:	4313      	orrs	r3, r2
    7214:	7603      	strb	r3, [r0, #24]
    7216:	e7f8      	b.n	720a <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    7218:	7e03      	ldrb	r3, [r0, #24]
    721a:	2220      	movs	r2, #32
    721c:	4313      	orrs	r3, r2
    721e:	7603      	strb	r3, [r0, #24]
    7220:	e7f3      	b.n	720a <tc_register_callback+0x1a>
    7222:	Address 0x00007222 is out of bounds.


00007224 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    7224:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    7226:	0080      	lsls	r0, r0, #2
    7228:	4b16      	ldr	r3, [pc, #88]	; (7284 <_tc_interrupt_handler+0x60>)
    722a:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    722c:	6823      	ldr	r3, [r4, #0]
    722e:	7a9d      	ldrb	r5, [r3, #10]
    7230:	7e22      	ldrb	r2, [r4, #24]
    7232:	7e63      	ldrb	r3, [r4, #25]
    7234:	4013      	ands	r3, r2
    7236:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    7238:	07eb      	lsls	r3, r5, #31
    723a:	d406      	bmi.n	724a <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    723c:	07ab      	lsls	r3, r5, #30
    723e:	d40b      	bmi.n	7258 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    7240:	06eb      	lsls	r3, r5, #27
    7242:	d410      	bmi.n	7266 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    7244:	06ab      	lsls	r3, r5, #26
    7246:	d415      	bmi.n	7274 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    7248:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    724a:	0020      	movs	r0, r4
    724c:	68a3      	ldr	r3, [r4, #8]
    724e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    7250:	2301      	movs	r3, #1
    7252:	6822      	ldr	r2, [r4, #0]
    7254:	7293      	strb	r3, [r2, #10]
    7256:	e7f1      	b.n	723c <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    7258:	0020      	movs	r0, r4
    725a:	68e3      	ldr	r3, [r4, #12]
    725c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    725e:	2302      	movs	r3, #2
    7260:	6822      	ldr	r2, [r4, #0]
    7262:	7293      	strb	r3, [r2, #10]
    7264:	e7ec      	b.n	7240 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    7266:	0020      	movs	r0, r4
    7268:	6923      	ldr	r3, [r4, #16]
    726a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    726c:	2310      	movs	r3, #16
    726e:	6822      	ldr	r2, [r4, #0]
    7270:	7293      	strb	r3, [r2, #10]
    7272:	e7e7      	b.n	7244 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    7274:	0020      	movs	r0, r4
    7276:	6963      	ldr	r3, [r4, #20]
    7278:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    727a:	6823      	ldr	r3, [r4, #0]
    727c:	2220      	movs	r2, #32
    727e:	729a      	strb	r2, [r3, #10]
}
    7280:	e7e2      	b.n	7248 <_tc_interrupt_handler+0x24>
    7282:	46c0      	nop			; (mov r8, r8)
    7284:	20002108 	.word	0x20002108

00007288 <TC0_Handler>:
	_TC_INTERRUPT_HANDLER(0,0)
    7288:	b510      	push	{r4, lr}
    728a:	2000      	movs	r0, #0
    728c:	4b01      	ldr	r3, [pc, #4]	; (7294 <TC0_Handler+0xc>)
    728e:	4798      	blx	r3
    7290:	bd10      	pop	{r4, pc}
    7292:	46c0      	nop			; (mov r8, r8)
    7294:	00007225 	.word	0x00007225

00007298 <TC1_Handler>:
	_TC_INTERRUPT_HANDLER(1,1)
    7298:	b510      	push	{r4, lr}
    729a:	2001      	movs	r0, #1
    729c:	4b01      	ldr	r3, [pc, #4]	; (72a4 <TC1_Handler+0xc>)
    729e:	4798      	blx	r3
    72a0:	bd10      	pop	{r4, pc}
    72a2:	46c0      	nop			; (mov r8, r8)
    72a4:	00007225 	.word	0x00007225

000072a8 <TC4_Handler>:
	_TC_INTERRUPT_HANDLER(4,2)
    72a8:	b510      	push	{r4, lr}
    72aa:	2002      	movs	r0, #2
    72ac:	4b01      	ldr	r3, [pc, #4]	; (72b4 <TC4_Handler+0xc>)
    72ae:	4798      	blx	r3
    72b0:	bd10      	pop	{r4, pc}
    72b2:	46c0      	nop			; (mov r8, r8)
    72b4:	00007225 	.word	0x00007225

000072b8 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    72b8:	b530      	push	{r4, r5, lr}
    72ba:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    72bc:	a901      	add	r1, sp, #4
    72be:	4b0c      	ldr	r3, [pc, #48]	; (72f0 <_tc_get_inst_index+0x38>)
    72c0:	000a      	movs	r2, r1
    72c2:	cb32      	ldmia	r3!, {r1, r4, r5}
    72c4:	c232      	stmia	r2!, {r1, r4, r5}
    72c6:	cb12      	ldmia	r3!, {r1, r4}
    72c8:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    72ca:	9b01      	ldr	r3, [sp, #4]
    72cc:	4298      	cmp	r0, r3
    72ce:	d00b      	beq.n	72e8 <_tc_get_inst_index+0x30>
    72d0:	2301      	movs	r3, #1
    72d2:	a901      	add	r1, sp, #4
    72d4:	009a      	lsls	r2, r3, #2
    72d6:	5852      	ldr	r2, [r2, r1]
    72d8:	4282      	cmp	r2, r0
    72da:	d006      	beq.n	72ea <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    72dc:	3301      	adds	r3, #1
    72de:	2b05      	cmp	r3, #5
    72e0:	d1f8      	bne.n	72d4 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    72e2:	2000      	movs	r0, #0
}
    72e4:	b007      	add	sp, #28
    72e6:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    72e8:	2300      	movs	r3, #0
			return i;
    72ea:	b2d8      	uxtb	r0, r3
    72ec:	e7fa      	b.n	72e4 <_tc_get_inst_index+0x2c>
    72ee:	46c0      	nop			; (mov r8, r8)
    72f0:	000170ac 	.word	0x000170ac

000072f4 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    72f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    72f6:	46c6      	mov	lr, r8
    72f8:	b500      	push	{lr}
    72fa:	b08e      	sub	sp, #56	; 0x38
    72fc:	0004      	movs	r4, r0
    72fe:	000d      	movs	r5, r1
    7300:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    7302:	0008      	movs	r0, r1
    7304:	4bae      	ldr	r3, [pc, #696]	; (75c0 <tc_init+0x2cc>)
    7306:	4798      	blx	r3
    7308:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC4};
#elif (SAML21J) || (SAMR34J) || (SAMR35J) || (WLR089U0)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
    730a:	ab0c      	add	r3, sp, #48	; 0x30
    730c:	221b      	movs	r2, #27
    730e:	701a      	strb	r2, [r3, #0]
    7310:	705a      	strb	r2, [r3, #1]
    7312:	3201      	adds	r2, #1
    7314:	709a      	strb	r2, [r3, #2]
    7316:	70da      	strb	r2, [r3, #3]
    7318:	3201      	adds	r2, #1
    731a:	711a      	strb	r2, [r3, #4]
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    731c:	a902      	add	r1, sp, #8
    731e:	4ba9      	ldr	r3, [pc, #676]	; (75c4 <tc_init+0x2d0>)
    7320:	3314      	adds	r3, #20
    7322:	000a      	movs	r2, r1
    7324:	cb83      	ldmia	r3!, {r0, r1, r7}
    7326:	c283      	stmia	r2!, {r0, r1, r7}
    7328:	cb83      	ldmia	r3!, {r0, r1, r7}
    732a:	c283      	stmia	r2!, {r0, r1, r7}
    732c:	cb83      	ldmia	r3!, {r0, r1, r7}
    732e:	c283      	stmia	r2!, {r0, r1, r7}
    7330:	681b      	ldr	r3, [r3, #0]
    7332:	6013      	str	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    7334:	2300      	movs	r3, #0
    7336:	60a3      	str	r3, [r4, #8]
    7338:	60e3      	str	r3, [r4, #12]
    733a:	6123      	str	r3, [r4, #16]
    733c:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    733e:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    7340:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    7342:	4643      	mov	r3, r8
    7344:	009a      	lsls	r2, r3, #2
    7346:	4ba0      	ldr	r3, [pc, #640]	; (75c8 <tc_init+0x2d4>)
    7348:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    734a:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    734c:	2334      	movs	r3, #52	; 0x34
    734e:	5cf3      	ldrb	r3, [r6, r3]
    7350:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    7352:	78f3      	ldrb	r3, [r6, #3]
    7354:	2b08      	cmp	r3, #8
    7356:	d008      	beq.n	736a <tc_init+0x76>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    7358:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    735a:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    735c:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    735e:	07db      	lsls	r3, r3, #31
    7360:	d508      	bpl.n	7374 <tc_init+0x80>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    7362:	b00e      	add	sp, #56	; 0x38
    7364:	bc04      	pop	{r2}
    7366:	4690      	mov	r8, r2
    7368:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    736a:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    736c:	4642      	mov	r2, r8
    736e:	07d2      	lsls	r2, r2, #31
    7370:	d4f7      	bmi.n	7362 <tc_init+0x6e>
    7372:	e7f1      	b.n	7358 <tc_init+0x64>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    7374:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
    7376:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    7378:	079b      	lsls	r3, r3, #30
    737a:	d4f2      	bmi.n	7362 <tc_init+0x6e>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    737c:	682b      	ldr	r3, [r5, #0]
    737e:	079b      	lsls	r3, r3, #30
    7380:	d4ef      	bmi.n	7362 <tc_init+0x6e>
	if (config->pwm_channel[0].enabled) {
    7382:	7c33      	ldrb	r3, [r6, #16]
    7384:	2b00      	cmp	r3, #0
    7386:	d112      	bne.n	73ae <tc_init+0xba>
	if (config->pwm_channel[1].enabled) {
    7388:	7f33      	ldrb	r3, [r6, #28]
    738a:	2b00      	cmp	r3, #0
    738c:	d11b      	bne.n	73c6 <tc_init+0xd2>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    738e:	4643      	mov	r3, r8
    7390:	005a      	lsls	r2, r3, #1
    7392:	a902      	add	r1, sp, #8
    7394:	1c53      	adds	r3, r2, #1
    7396:	009b      	lsls	r3, r3, #2
    7398:	5858      	ldr	r0, [r3, r1]
    739a:	4643      	mov	r3, r8
    739c:	00db      	lsls	r3, r3, #3
    739e:	585b      	ldr	r3, [r3, r1]
	switch (bus) {
    73a0:	b2d9      	uxtb	r1, r3
    73a2:	2904      	cmp	r1, #4
    73a4:	d823      	bhi.n	73ee <tc_init+0xfa>
    73a6:	008b      	lsls	r3, r1, #2
    73a8:	4988      	ldr	r1, [pc, #544]	; (75cc <tc_init+0x2d8>)
    73aa:	58cb      	ldr	r3, [r1, r3]
    73ac:	469f      	mov	pc, r3
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    73ae:	a901      	add	r1, sp, #4
    73b0:	2301      	movs	r3, #1
    73b2:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    73b4:	2200      	movs	r2, #0
    73b6:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    73b8:	7e32      	ldrb	r2, [r6, #24]
    73ba:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    73bc:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    73be:	7d30      	ldrb	r0, [r6, #20]
    73c0:	4b83      	ldr	r3, [pc, #524]	; (75d0 <tc_init+0x2dc>)
    73c2:	4798      	blx	r3
    73c4:	e7e0      	b.n	7388 <tc_init+0x94>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    73c6:	a901      	add	r1, sp, #4
    73c8:	2301      	movs	r3, #1
    73ca:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    73cc:	2200      	movs	r2, #0
    73ce:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    73d0:	3224      	adds	r2, #36	; 0x24
    73d2:	18b2      	adds	r2, r6, r2
    73d4:	7812      	ldrb	r2, [r2, #0]
    73d6:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    73d8:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    73da:	331f      	adds	r3, #31
    73dc:	18f3      	adds	r3, r6, r3
    73de:	7818      	ldrb	r0, [r3, #0]
    73e0:	4b7b      	ldr	r3, [pc, #492]	; (75d0 <tc_init+0x2dc>)
    73e2:	4798      	blx	r3
    73e4:	e7d3      	b.n	738e <tc_init+0x9a>
			MCLK->APBAMASK.reg |= mask;
    73e6:	497b      	ldr	r1, [pc, #492]	; (75d4 <tc_init+0x2e0>)
    73e8:	694b      	ldr	r3, [r1, #20]
    73ea:	4318      	orrs	r0, r3
    73ec:	6148      	str	r0, [r1, #20]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    73ee:	78f3      	ldrb	r3, [r6, #3]
    73f0:	2b08      	cmp	r3, #8
    73f2:	d100      	bne.n	73f6 <tc_init+0x102>
    73f4:	e086      	b.n	7504 <tc_init+0x210>
	gclk_chan_config.source_generator = config->clock_source;
    73f6:	7833      	ldrb	r3, [r6, #0]
    73f8:	466a      	mov	r2, sp
    73fa:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    73fc:	ab0c      	add	r3, sp, #48	; 0x30
    73fe:	4642      	mov	r2, r8
    7400:	5c9f      	ldrb	r7, [r3, r2]
    7402:	4669      	mov	r1, sp
    7404:	0038      	movs	r0, r7
    7406:	4b74      	ldr	r3, [pc, #464]	; (75d8 <tc_init+0x2e4>)
    7408:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    740a:	0038      	movs	r0, r7
    740c:	4b73      	ldr	r3, [pc, #460]	; (75dc <tc_init+0x2e8>)
    740e:	4798      	blx	r3
			(uint32_t)config->counter_size |
    7410:	78f3      	ldrb	r3, [r6, #3]
    7412:	79f2      	ldrb	r2, [r6, #7]
    7414:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
    7416:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
    7418:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    741a:	7a72      	ldrb	r2, [r6, #9]
    741c:	2a00      	cmp	r2, #0
    741e:	d002      	beq.n	7426 <tc_init+0x132>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    7420:	2280      	movs	r2, #128	; 0x80
    7422:	0252      	lsls	r2, r2, #9
    7424:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    7426:	7ab2      	ldrb	r2, [r6, #10]
    7428:	2a00      	cmp	r2, #0
    742a:	d002      	beq.n	7432 <tc_init+0x13e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    742c:	2280      	movs	r2, #128	; 0x80
    742e:	0292      	lsls	r2, r2, #10
    7430:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    7432:	7af2      	ldrb	r2, [r6, #11]
    7434:	2a00      	cmp	r2, #0
    7436:	d002      	beq.n	743e <tc_init+0x14a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    7438:	2280      	movs	r2, #128	; 0x80
    743a:	0352      	lsls	r2, r2, #13
    743c:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    743e:	7b32      	ldrb	r2, [r6, #12]
    7440:	2a00      	cmp	r2, #0
    7442:	d002      	beq.n	744a <tc_init+0x156>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    7444:	2280      	movs	r2, #128	; 0x80
    7446:	0392      	lsls	r2, r2, #14
    7448:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    744a:	7871      	ldrb	r1, [r6, #1]
    744c:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    744e:	78b2      	ldrb	r2, [r6, #2]
    7450:	01d2      	lsls	r2, r2, #7
    7452:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    7454:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7456:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	return (tc_module->SYNCBUSY.reg);
    7458:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    745a:	2b00      	cmp	r3, #0
    745c:	d1fc      	bne.n	7458 <tc_init+0x164>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    745e:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7460:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    7462:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    7464:	2b00      	cmp	r3, #0
    7466:	d1fc      	bne.n	7462 <tc_init+0x16e>
	hw->COUNT8.WAVE.reg = config->wave_generation;
    7468:	79b3      	ldrb	r3, [r6, #6]
    746a:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
    746c:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    746e:	1e4b      	subs	r3, r1, #1
    7470:	4199      	sbcs	r1, r3
    7472:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    7474:	7bb3      	ldrb	r3, [r6, #14]
    7476:	2b00      	cmp	r3, #0
    7478:	d001      	beq.n	747e <tc_init+0x18a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    747a:	2301      	movs	r3, #1
    747c:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    747e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    7480:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    7482:	2b00      	cmp	r3, #0
    7484:	d1fc      	bne.n	7480 <tc_init+0x18c>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    7486:	33ff      	adds	r3, #255	; 0xff
    7488:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    748a:	2900      	cmp	r1, #0
    748c:	d004      	beq.n	7498 <tc_init+0x1a4>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    748e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    7490:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    7492:	2b00      	cmp	r3, #0
    7494:	d1fc      	bne.n	7490 <tc_init+0x19c>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    7496:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    7498:	7a33      	ldrb	r3, [r6, #8]
    749a:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    749c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    749e:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    74a0:	2b00      	cmp	r3, #0
    74a2:	d1fc      	bne.n	749e <tc_init+0x1aa>
	switch (module_inst->counter_size) {
    74a4:	7923      	ldrb	r3, [r4, #4]
    74a6:	2b04      	cmp	r3, #4
    74a8:	d059      	beq.n	755e <tc_init+0x26a>
    74aa:	2b08      	cmp	r3, #8
    74ac:	d074      	beq.n	7598 <tc_init+0x2a4>
	return STATUS_ERR_INVALID_ARG;
    74ae:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    74b0:	2b00      	cmp	r3, #0
    74b2:	d000      	beq.n	74b6 <tc_init+0x1c2>
    74b4:	e755      	b.n	7362 <tc_init+0x6e>
    74b6:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    74b8:	2b00      	cmp	r3, #0
    74ba:	d1fc      	bne.n	74b6 <tc_init+0x1c2>
				= config->counter_16_bit.value;
    74bc:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    74be:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    74c0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    74c2:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    74c4:	2b00      	cmp	r3, #0
    74c6:	d1fc      	bne.n	74c2 <tc_init+0x1ce>
					config->counter_16_bit.compare_capture_channel[0];
    74c8:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    74ca:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    74cc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    74ce:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    74d0:	2b00      	cmp	r3, #0
    74d2:	d1fc      	bne.n	74ce <tc_init+0x1da>
					config->counter_16_bit.compare_capture_channel[1];
    74d4:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    74d6:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
    74d8:	2000      	movs	r0, #0
    74da:	e742      	b.n	7362 <tc_init+0x6e>
			MCLK->APBBMASK.reg |= mask;
    74dc:	493d      	ldr	r1, [pc, #244]	; (75d4 <tc_init+0x2e0>)
    74de:	698b      	ldr	r3, [r1, #24]
    74e0:	4318      	orrs	r0, r3
    74e2:	6188      	str	r0, [r1, #24]
    74e4:	e783      	b.n	73ee <tc_init+0xfa>
			MCLK->APBCMASK.reg |= mask;
    74e6:	493b      	ldr	r1, [pc, #236]	; (75d4 <tc_init+0x2e0>)
    74e8:	69cb      	ldr	r3, [r1, #28]
    74ea:	4318      	orrs	r0, r3
    74ec:	61c8      	str	r0, [r1, #28]
    74ee:	e77e      	b.n	73ee <tc_init+0xfa>
			MCLK->APBDMASK.reg |= mask;
    74f0:	4938      	ldr	r1, [pc, #224]	; (75d4 <tc_init+0x2e0>)
    74f2:	6a0b      	ldr	r3, [r1, #32]
    74f4:	4318      	orrs	r0, r3
    74f6:	6208      	str	r0, [r1, #32]
    74f8:	e779      	b.n	73ee <tc_init+0xfa>
			MCLK->APBEMASK.reg |= mask;
    74fa:	4b36      	ldr	r3, [pc, #216]	; (75d4 <tc_init+0x2e0>)
    74fc:	6a59      	ldr	r1, [r3, #36]	; 0x24
    74fe:	4308      	orrs	r0, r1
    7500:	6258      	str	r0, [r3, #36]	; 0x24
    7502:	e774      	b.n	73ee <tc_init+0xfa>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    7504:	4643      	mov	r3, r8
    7506:	3301      	adds	r3, #1
    7508:	2b04      	cmp	r3, #4
    750a:	dd00      	ble.n	750e <tc_init+0x21a>
    750c:	e773      	b.n	73f6 <tc_init+0x102>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    750e:	ab02      	add	r3, sp, #8
    7510:	1cd1      	adds	r1, r2, #3
    7512:	0089      	lsls	r1, r1, #2
    7514:	58c9      	ldr	r1, [r1, r3]
    7516:	3202      	adds	r2, #2
    7518:	0092      	lsls	r2, r2, #2
    751a:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
    751c:	b2da      	uxtb	r2, r3
    751e:	2a04      	cmp	r2, #4
    7520:	d900      	bls.n	7524 <tc_init+0x230>
    7522:	e768      	b.n	73f6 <tc_init+0x102>
    7524:	0093      	lsls	r3, r2, #2
    7526:	4a2e      	ldr	r2, [pc, #184]	; (75e0 <tc_init+0x2ec>)
    7528:	58d3      	ldr	r3, [r2, r3]
    752a:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    752c:	4a29      	ldr	r2, [pc, #164]	; (75d4 <tc_init+0x2e0>)
    752e:	6953      	ldr	r3, [r2, #20]
    7530:	4319      	orrs	r1, r3
    7532:	6151      	str	r1, [r2, #20]
    7534:	e75f      	b.n	73f6 <tc_init+0x102>
			MCLK->APBBMASK.reg |= mask;
    7536:	4a27      	ldr	r2, [pc, #156]	; (75d4 <tc_init+0x2e0>)
    7538:	6993      	ldr	r3, [r2, #24]
    753a:	4319      	orrs	r1, r3
    753c:	6191      	str	r1, [r2, #24]
    753e:	e75a      	b.n	73f6 <tc_init+0x102>
			MCLK->APBCMASK.reg |= mask;
    7540:	4a24      	ldr	r2, [pc, #144]	; (75d4 <tc_init+0x2e0>)
    7542:	69d3      	ldr	r3, [r2, #28]
    7544:	4319      	orrs	r1, r3
    7546:	61d1      	str	r1, [r2, #28]
    7548:	e755      	b.n	73f6 <tc_init+0x102>
			MCLK->APBDMASK.reg |= mask;
    754a:	4a22      	ldr	r2, [pc, #136]	; (75d4 <tc_init+0x2e0>)
    754c:	6a13      	ldr	r3, [r2, #32]
    754e:	4319      	orrs	r1, r3
    7550:	6211      	str	r1, [r2, #32]
    7552:	e750      	b.n	73f6 <tc_init+0x102>
			MCLK->APBEMASK.reg |= mask;
    7554:	4b1f      	ldr	r3, [pc, #124]	; (75d4 <tc_init+0x2e0>)
    7556:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7558:	4311      	orrs	r1, r2
    755a:	6259      	str	r1, [r3, #36]	; 0x24
    755c:	e74b      	b.n	73f6 <tc_init+0x102>
    755e:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    7560:	2b00      	cmp	r3, #0
    7562:	d1fc      	bne.n	755e <tc_init+0x26a>
					config->counter_8_bit.value;
    7564:	3328      	adds	r3, #40	; 0x28
    7566:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    7568:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    756a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    756c:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    756e:	2b00      	cmp	r3, #0
    7570:	d1fc      	bne.n	756c <tc_init+0x278>
					config->counter_8_bit.period;
    7572:	3329      	adds	r3, #41	; 0x29
    7574:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    7576:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7578:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    757a:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    757c:	2b00      	cmp	r3, #0
    757e:	d1fc      	bne.n	757a <tc_init+0x286>
					config->counter_8_bit.compare_capture_channel[0];
    7580:	332a      	adds	r3, #42	; 0x2a
    7582:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    7584:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7586:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    7588:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    758a:	2b00      	cmp	r3, #0
    758c:	d1fc      	bne.n	7588 <tc_init+0x294>
					config->counter_8_bit.compare_capture_channel[1];
    758e:	332b      	adds	r3, #43	; 0x2b
    7590:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    7592:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
    7594:	2000      	movs	r0, #0
    7596:	e6e4      	b.n	7362 <tc_init+0x6e>
    7598:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    759a:	2b00      	cmp	r3, #0
    759c:	d1fc      	bne.n	7598 <tc_init+0x2a4>
				= config->counter_32_bit.value;
    759e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    75a0:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    75a2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    75a4:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    75a6:	2b00      	cmp	r3, #0
    75a8:	d1fc      	bne.n	75a4 <tc_init+0x2b0>
			hw->COUNT32.CC[0].reg =
    75aa:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    75ac:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    75ae:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    75b0:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    75b2:	2b00      	cmp	r3, #0
    75b4:	d1fc      	bne.n	75b0 <tc_init+0x2bc>
					config->counter_32_bit.compare_capture_channel[1];
    75b6:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    75b8:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
    75ba:	2000      	movs	r0, #0
    75bc:	e6d1      	b.n	7362 <tc_init+0x6e>
    75be:	46c0      	nop			; (mov r8, r8)
    75c0:	000072b9 	.word	0x000072b9
    75c4:	000170ac 	.word	0x000170ac
    75c8:	20002108 	.word	0x20002108
    75cc:	00017084 	.word	0x00017084
    75d0:	00007191 	.word	0x00007191
    75d4:	40000400 	.word	0x40000400
    75d8:	00007095 	.word	0x00007095
    75dc:	00007025 	.word	0x00007025
    75e0:	00017098 	.word	0x00017098

000075e4 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    75e4:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    75e6:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    75e8:	2b00      	cmp	r3, #0
    75ea:	d1fc      	bne.n	75e6 <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    75ec:	7113      	strb	r3, [r2, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    75ee:	6801      	ldr	r1, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    75f0:	690b      	ldr	r3, [r1, #16]

	while (tc_is_syncing(module_inst)) {
    75f2:	2b00      	cmp	r3, #0
    75f4:	d1fc      	bne.n	75f0 <tc_get_count_value+0xc>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
    75f6:	3380      	adds	r3, #128	; 0x80
    75f8:	7153      	strb	r3, [r2, #5]
#if (SAMC20) || (SAMC21) || (SAML21) || (SAML22) || (SAMR30) || (SAMR34) || (WLR089)
	/* wait for the CMD bits in CTRLBSET to be cleared, meaning the CMD has been executed */
	while(tc_module->CTRLBSET.reg & TC_CTRLBSET_CMD_READSYNC);	
    75fa:	7953      	ldrb	r3, [r2, #5]
    75fc:	b25b      	sxtb	r3, r3
    75fe:	2b00      	cmp	r3, #0
    7600:	dbfb      	blt.n	75fa <tc_get_count_value+0x16>

	/* Read synchronization */
	tc_sync_read_count(module_inst);
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    7602:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    7604:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    7606:	2b00      	cmp	r3, #0
    7608:	d1fc      	bne.n	7604 <tc_get_count_value+0x20>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    760a:	7903      	ldrb	r3, [r0, #4]
    760c:	2b04      	cmp	r3, #4
    760e:	d005      	beq.n	761c <tc_get_count_value+0x38>
    7610:	2b08      	cmp	r3, #8
    7612:	d009      	beq.n	7628 <tc_get_count_value+0x44>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    7614:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    7616:	2b00      	cmp	r3, #0
    7618:	d003      	beq.n	7622 <tc_get_count_value+0x3e>
}
    761a:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    761c:	7d10      	ldrb	r0, [r2, #20]
    761e:	b2c0      	uxtb	r0, r0
    7620:	e7fb      	b.n	761a <tc_get_count_value+0x36>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    7622:	8a90      	ldrh	r0, [r2, #20]
    7624:	b280      	uxth	r0, r0
    7626:	e7f8      	b.n	761a <tc_get_count_value+0x36>
			return tc_module->COUNT32.COUNT.reg;
    7628:	6950      	ldr	r0, [r2, #20]
    762a:	e7f6      	b.n	761a <tc_get_count_value+0x36>

0000762c <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    762c:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    762e:	6804      	ldr	r4, [r0, #0]
    7630:	6923      	ldr	r3, [r4, #16]

	while (tc_is_syncing(module_inst)) {
    7632:	2b00      	cmp	r3, #0
    7634:	d1fc      	bne.n	7630 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    7636:	7903      	ldrb	r3, [r0, #4]
    7638:	2b04      	cmp	r3, #4
    763a:	d006      	beq.n	764a <tc_set_compare_value+0x1e>
    763c:	2b08      	cmp	r3, #8
    763e:	d028      	beq.n	7692 <tc_set_compare_value+0x66>
    7640:	2b00      	cmp	r3, #0
    7642:	d013      	beq.n	766c <tc_set_compare_value+0x40>
				}
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    7644:	2317      	movs	r3, #23
}
    7646:	0018      	movs	r0, r3
    7648:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    764a:	2317      	movs	r3, #23
			if (channel_index <
    764c:	2901      	cmp	r1, #1
    764e:	d8fa      	bhi.n	7646 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    7650:	7e83      	ldrb	r3, [r0, #26]
    7652:	2b00      	cmp	r3, #0
    7654:	d005      	beq.n	7662 <tc_set_compare_value+0x36>
							(uint8_t)compare;
    7656:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CCBUF[channel_index].reg =
    7658:	1861      	adds	r1, r4, r1
    765a:	3130      	adds	r1, #48	; 0x30
    765c:	700a      	strb	r2, [r1, #0]
				return STATUS_OK;
    765e:	2300      	movs	r3, #0
    7660:	e7f1      	b.n	7646 <tc_set_compare_value+0x1a>
							(uint8_t)compare;
    7662:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CC[channel_index].reg  =
    7664:	1864      	adds	r4, r4, r1
    7666:	7722      	strb	r2, [r4, #28]
				return STATUS_OK;
    7668:	2300      	movs	r3, #0
    766a:	e7ec      	b.n	7646 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    766c:	2317      	movs	r3, #23
			if (channel_index <
    766e:	2901      	cmp	r1, #1
    7670:	d8e9      	bhi.n	7646 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    7672:	7e83      	ldrb	r3, [r0, #26]
    7674:	2b00      	cmp	r3, #0
    7676:	d005      	beq.n	7684 <tc_set_compare_value+0x58>
							(uint16_t)compare;
    7678:	b292      	uxth	r2, r2
					tc_module->COUNT16.CCBUF[channel_index].reg =
    767a:	3118      	adds	r1, #24
    767c:	0049      	lsls	r1, r1, #1
    767e:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    7680:	2300      	movs	r3, #0
    7682:	e7e0      	b.n	7646 <tc_set_compare_value+0x1a>
							(uint16_t)compare;
    7684:	b292      	uxth	r2, r2
					tc_module->COUNT16.CC[channel_index].reg =
    7686:	310c      	adds	r1, #12
    7688:	0049      	lsls	r1, r1, #1
    768a:	1864      	adds	r4, r4, r1
    768c:	80a2      	strh	r2, [r4, #4]
				return STATUS_OK;
    768e:	2300      	movs	r3, #0
    7690:	e7d9      	b.n	7646 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    7692:	2317      	movs	r3, #23
			if (channel_index <
    7694:	2901      	cmp	r1, #1
    7696:	d8d6      	bhi.n	7646 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    7698:	7e83      	ldrb	r3, [r0, #26]
    769a:	2b00      	cmp	r3, #0
    769c:	d105      	bne.n	76aa <tc_set_compare_value+0x7e>
					tc_module->COUNT32.CC[channel_index].reg =
    769e:	3106      	adds	r1, #6
    76a0:	0089      	lsls	r1, r1, #2
    76a2:	1864      	adds	r4, r4, r1
    76a4:	6062      	str	r2, [r4, #4]
				return STATUS_OK;
    76a6:	2300      	movs	r3, #0
    76a8:	e7cd      	b.n	7646 <tc_set_compare_value+0x1a>
					tc_module->COUNT32.CCBUF[channel_index].reg =
    76aa:	310c      	adds	r1, #12
    76ac:	0089      	lsls	r1, r1, #2
    76ae:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    76b0:	2300      	movs	r3, #0
    76b2:	e7c8      	b.n	7646 <tc_set_compare_value+0x1a>

000076b4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    76b4:	e7fe      	b.n	76b4 <Dummy_Handler>
    76b6:	Address 0x000076b6 is out of bounds.


000076b8 <Reset_Handler>:
{
    76b8:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    76ba:	4a1a      	ldr	r2, [pc, #104]	; (7724 <Reset_Handler+0x6c>)
    76bc:	4b1a      	ldr	r3, [pc, #104]	; (7728 <Reset_Handler+0x70>)
    76be:	429a      	cmp	r2, r3
    76c0:	d011      	beq.n	76e6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    76c2:	001a      	movs	r2, r3
    76c4:	4b19      	ldr	r3, [pc, #100]	; (772c <Reset_Handler+0x74>)
    76c6:	429a      	cmp	r2, r3
    76c8:	d20d      	bcs.n	76e6 <Reset_Handler+0x2e>
    76ca:	4a19      	ldr	r2, [pc, #100]	; (7730 <Reset_Handler+0x78>)
    76cc:	3303      	adds	r3, #3
    76ce:	1a9b      	subs	r3, r3, r2
    76d0:	089b      	lsrs	r3, r3, #2
    76d2:	3301      	adds	r3, #1
    76d4:	009b      	lsls	r3, r3, #2
    76d6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    76d8:	4813      	ldr	r0, [pc, #76]	; (7728 <Reset_Handler+0x70>)
    76da:	4912      	ldr	r1, [pc, #72]	; (7724 <Reset_Handler+0x6c>)
    76dc:	588c      	ldr	r4, [r1, r2]
    76de:	5084      	str	r4, [r0, r2]
    76e0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    76e2:	429a      	cmp	r2, r3
    76e4:	d1fa      	bne.n	76dc <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    76e6:	4a13      	ldr	r2, [pc, #76]	; (7734 <Reset_Handler+0x7c>)
    76e8:	4b13      	ldr	r3, [pc, #76]	; (7738 <Reset_Handler+0x80>)
    76ea:	429a      	cmp	r2, r3
    76ec:	d20a      	bcs.n	7704 <Reset_Handler+0x4c>
    76ee:	43d3      	mvns	r3, r2
    76f0:	4911      	ldr	r1, [pc, #68]	; (7738 <Reset_Handler+0x80>)
    76f2:	185b      	adds	r3, r3, r1
    76f4:	2103      	movs	r1, #3
    76f6:	438b      	bics	r3, r1
    76f8:	3304      	adds	r3, #4
    76fa:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    76fc:	2100      	movs	r1, #0
    76fe:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    7700:	4293      	cmp	r3, r2
    7702:	d1fc      	bne.n	76fe <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    7704:	4a0d      	ldr	r2, [pc, #52]	; (773c <Reset_Handler+0x84>)
    7706:	21ff      	movs	r1, #255	; 0xff
    7708:	4b0d      	ldr	r3, [pc, #52]	; (7740 <Reset_Handler+0x88>)
    770a:	438b      	bics	r3, r1
    770c:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    770e:	4a0d      	ldr	r2, [pc, #52]	; (7744 <Reset_Handler+0x8c>)
    7710:	6853      	ldr	r3, [r2, #4]
    7712:	397f      	subs	r1, #127	; 0x7f
    7714:	430b      	orrs	r3, r1
    7716:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    7718:	4b0b      	ldr	r3, [pc, #44]	; (7748 <Reset_Handler+0x90>)
    771a:	4798      	blx	r3
        main();
    771c:	4b0b      	ldr	r3, [pc, #44]	; (774c <Reset_Handler+0x94>)
    771e:	4798      	blx	r3
    7720:	e7fe      	b.n	7720 <Reset_Handler+0x68>
    7722:	46c0      	nop			; (mov r8, r8)
    7724:	00017e00 	.word	0x00017e00
    7728:	20000000 	.word	0x20000000
    772c:	20000090 	.word	0x20000090
    7730:	20000004 	.word	0x20000004
    7734:	20000090 	.word	0x20000090
    7738:	200033c8 	.word	0x200033c8
    773c:	e000ed00 	.word	0xe000ed00
    7740:	00000000 	.word	0x00000000
    7744:	41004000 	.word	0x41004000
    7748:	00015559 	.word	0x00015559
    774c:	00007b59 	.word	0x00007b59

00007750 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    7750:	b5f0      	push	{r4, r5, r6, r7, lr}
    7752:	46c6      	mov	lr, r8
    7754:	b500      	push	{lr}
    7756:	000c      	movs	r4, r1
    7758:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    775a:	2800      	cmp	r0, #0
    775c:	d10f      	bne.n	777e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    775e:	2a00      	cmp	r2, #0
    7760:	dd11      	ble.n	7786 <_read+0x36>
    7762:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    7764:	4e09      	ldr	r6, [pc, #36]	; (778c <_read+0x3c>)
    7766:	4d0a      	ldr	r5, [pc, #40]	; (7790 <_read+0x40>)
    7768:	6830      	ldr	r0, [r6, #0]
    776a:	0021      	movs	r1, r4
    776c:	682b      	ldr	r3, [r5, #0]
    776e:	4798      	blx	r3
		ptr++;
    7770:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    7772:	42bc      	cmp	r4, r7
    7774:	d1f8      	bne.n	7768 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    7776:	4640      	mov	r0, r8
    7778:	bc04      	pop	{r2}
    777a:	4690      	mov	r8, r2
    777c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    777e:	2301      	movs	r3, #1
    7780:	425b      	negs	r3, r3
    7782:	4698      	mov	r8, r3
    7784:	e7f7      	b.n	7776 <_read+0x26>
	for (; len > 0; --len) {
    7786:	4680      	mov	r8, r0
    7788:	e7f5      	b.n	7776 <_read+0x26>
    778a:	46c0      	nop			; (mov r8, r8)
    778c:	20002124 	.word	0x20002124
    7790:	2000211c 	.word	0x2000211c

00007794 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    7794:	b5f0      	push	{r4, r5, r6, r7, lr}
    7796:	46c6      	mov	lr, r8
    7798:	b500      	push	{lr}
    779a:	000e      	movs	r6, r1
    779c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    779e:	3801      	subs	r0, #1
    77a0:	2802      	cmp	r0, #2
    77a2:	d810      	bhi.n	77c6 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    77a4:	2a00      	cmp	r2, #0
    77a6:	d011      	beq.n	77cc <_write+0x38>
    77a8:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    77aa:	4b0c      	ldr	r3, [pc, #48]	; (77dc <_write+0x48>)
    77ac:	4698      	mov	r8, r3
    77ae:	4f0c      	ldr	r7, [pc, #48]	; (77e0 <_write+0x4c>)
    77b0:	4643      	mov	r3, r8
    77b2:	6818      	ldr	r0, [r3, #0]
    77b4:	5d31      	ldrb	r1, [r6, r4]
    77b6:	683b      	ldr	r3, [r7, #0]
    77b8:	4798      	blx	r3
    77ba:	2800      	cmp	r0, #0
    77bc:	db08      	blt.n	77d0 <_write+0x3c>
			return -1;
		}
		++nChars;
    77be:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    77c0:	42a5      	cmp	r5, r4
    77c2:	d1f5      	bne.n	77b0 <_write+0x1c>
    77c4:	e006      	b.n	77d4 <_write+0x40>
		return -1;
    77c6:	2401      	movs	r4, #1
    77c8:	4264      	negs	r4, r4
    77ca:	e003      	b.n	77d4 <_write+0x40>
	for (; len != 0; --len) {
    77cc:	0014      	movs	r4, r2
    77ce:	e001      	b.n	77d4 <_write+0x40>
			return -1;
    77d0:	2401      	movs	r4, #1
    77d2:	4264      	negs	r4, r4
	}
	return nChars;
}
    77d4:	0020      	movs	r0, r4
    77d6:	bc04      	pop	{r2}
    77d8:	4690      	mov	r8, r2
    77da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    77dc:	20002124 	.word	0x20002124
    77e0:	20002120 	.word	0x20002120

000077e4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    77e4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    77e6:	4a06      	ldr	r2, [pc, #24]	; (7800 <_sbrk+0x1c>)
    77e8:	6812      	ldr	r2, [r2, #0]
    77ea:	2a00      	cmp	r2, #0
    77ec:	d004      	beq.n	77f8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    77ee:	4a04      	ldr	r2, [pc, #16]	; (7800 <_sbrk+0x1c>)
    77f0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    77f2:	18c3      	adds	r3, r0, r3
    77f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    77f6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    77f8:	4902      	ldr	r1, [pc, #8]	; (7804 <_sbrk+0x20>)
    77fa:	4a01      	ldr	r2, [pc, #4]	; (7800 <_sbrk+0x1c>)
    77fc:	6011      	str	r1, [r2, #0]
    77fe:	e7f6      	b.n	77ee <_sbrk+0xa>
    7800:	200002fc 	.word	0x200002fc
    7804:	200053c8 	.word	0x200053c8

00007808 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    7808:	2001      	movs	r0, #1
    780a:	4240      	negs	r0, r0
    780c:	4770      	bx	lr

0000780e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    780e:	2380      	movs	r3, #128	; 0x80
    7810:	019b      	lsls	r3, r3, #6
    7812:	604b      	str	r3, [r1, #4]

	return 0;
}
    7814:	2000      	movs	r0, #0
    7816:	4770      	bx	lr

00007818 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    7818:	2001      	movs	r0, #1
    781a:	4770      	bx	lr

0000781c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    781c:	2000      	movs	r0, #0
    781e:	4770      	bx	lr

00007820 <_exit>:

extern void _exit(int status)
{
	asm("BKPT #0");
    7820:	be00      	bkpt	0x0000
    7822:	e7fe      	b.n	7822 <_exit+0x2>

00007824 <_kill>:
}

extern void _kill(int pid, int sig)
{
	return;
}
    7824:	4770      	bx	lr

00007826 <_getpid>:

extern int _getpid(void)
{
	return -1;
}
    7826:	2001      	movs	r0, #1
    7828:	4240      	negs	r0, r0
    782a:	4770      	bx	lr

0000782c <DemoOutput_Greeting>:

bool PUSH_BUTTON_pressed;
MIWI_TICK PUSH_BUTTON_press_time;

void DemoOutput_Greeting(void)
{    
    782c:	b510      	push	{r4, lr}
#if defined (ENABLE_LCD)
	#if defined(PROTOCOL_P2P)
		LCDDisplay((char *)"Simple LoRa P2P Demo on \n SAMR34 Node ", 0, true);
    782e:	2201      	movs	r2, #1
    7830:	2100      	movs	r1, #0
    7832:	480c      	ldr	r0, [pc, #48]	; (7864 <DemoOutput_Greeting+0x38>)
    7834:	4b0c      	ldr	r3, [pc, #48]	; (7868 <DemoOutput_Greeting+0x3c>)
    7836:	4798      	blx	r3
	#endif
#endif
    #if defined (ENABLE_CONSOLE)
        #if defined(PROTOCOL_P2P)
            printf("\r\nStarting Node 1 of Simple Demo for LoRa P2P Stack ...");  
    7838:	480c      	ldr	r0, [pc, #48]	; (786c <DemoOutput_Greeting+0x40>)
    783a:	4c0d      	ldr	r4, [pc, #52]	; (7870 <DemoOutput_Greeting+0x44>)
    783c:	47a0      	blx	r4
        #endif
		#if defined(ENABLE_SLEEP_FEATURE)
			printf("\r\nReduced Function Device (RFD) operations") ;
		#else
			printf("\r\nFull Function Device (FFD) operations") ;
    783e:	480d      	ldr	r0, [pc, #52]	; (7874 <DemoOutput_Greeting+0x48>)
    7840:	47a0      	blx	r4
		#endif
        printf("\r\n     RF Transceiver: SX_1276");
    7842:	480d      	ldr	r0, [pc, #52]	; (7878 <DemoOutput_Greeting+0x4c>)
    7844:	47a0      	blx	r4
        printf("\r\n     Demo Instruction:");
    7846:	480d      	ldr	r0, [pc, #52]	; (787c <DemoOutput_Greeting+0x50>)
    7848:	47a0      	blx	r4
        printf("\r\n                     Power on the board until LED 1 lights up");
    784a:	480d      	ldr	r0, [pc, #52]	; (7880 <DemoOutput_Greeting+0x54>)
    784c:	47a0      	blx	r4
        printf("\r\n                     to indicate connecting with peer.");
    784e:	480d      	ldr	r0, [pc, #52]	; (7884 <DemoOutput_Greeting+0x58>)
    7850:	47a0      	blx	r4
        printf("\r\n                     Push Button 1 to broadcast message.");
    7852:	480d      	ldr	r0, [pc, #52]	; (7888 <DemoOutput_Greeting+0x5c>)
    7854:	47a0      	blx	r4
        printf("\r\n                     LED 1 will be toggled upon receiving messages. ");
    7856:	480d      	ldr	r0, [pc, #52]	; (788c <DemoOutput_Greeting+0x60>)
    7858:	47a0      	blx	r4
        printf("\r\n\r\n");		
    785a:	480d      	ldr	r0, [pc, #52]	; (7890 <DemoOutput_Greeting+0x64>)
    785c:	4b0d      	ldr	r3, [pc, #52]	; (7894 <DemoOutput_Greeting+0x68>)
    785e:	4798      	blx	r3
    #endif 
}        
    7860:	bd10      	pop	{r4, pc}
    7862:	46c0      	nop			; (mov r8, r8)
    7864:	000171dc 	.word	0x000171dc
    7868:	0000821d 	.word	0x0000821d
    786c:	00017204 	.word	0x00017204
    7870:	00015b79 	.word	0x00015b79
    7874:	0001723c 	.word	0x0001723c
    7878:	00017264 	.word	0x00017264
    787c:	00017284 	.word	0x00017284
    7880:	000172a0 	.word	0x000172a0
    7884:	000172e0 	.word	0x000172e0
    7888:	0001731c 	.word	0x0001731c
    788c:	00017358 	.word	0x00017358
    7890:	000173a0 	.word	0x000173a0
    7894:	00015c95 	.word	0x00015c95

00007898 <DemoOutput_Channel>:
	LCDDisplay((char *)"SW: Use Nwk Freezer \nPress in 5 sec", 0, false);	
	delay_ms(1000);
#endif
}
void DemoOutput_Channel(uint8_t channel, uint8_t Step)
{
    7898:	b570      	push	{r4, r5, r6, lr}
    789a:	0004      	movs	r4, r0
    if( Step == 0 )
    789c:	2900      	cmp	r1, #0
    789e:	d00e      	beq.n	78be <DemoOutput_Channel+0x26>
#endif
    }
    else
    { 
#if defined (ENABLE_LCD)
        LCDDisplay((char *)"Connected Peer on \n Channel ", channel, true);
    78a0:	2201      	movs	r2, #1
    78a2:	0001      	movs	r1, r0
    78a4:	480d      	ldr	r0, [pc, #52]	; (78dc <DemoOutput_Channel+0x44>)
    78a6:	4b0e      	ldr	r3, [pc, #56]	; (78e0 <DemoOutput_Channel+0x48>)
    78a8:	4798      	blx	r3
#endif
#if defined (ENABLE_CONSOLE)
        #if !defined(MIWIKIT)
        printf("\r\nConnected Peer on Channel ");
    78aa:	480e      	ldr	r0, [pc, #56]	; (78e4 <DemoOutput_Channel+0x4c>)
    78ac:	4d0e      	ldr	r5, [pc, #56]	; (78e8 <DemoOutput_Channel+0x50>)
    78ae:	47a8      	blx	r5
        printf("%d",channel);
    78b0:	0021      	movs	r1, r4
    78b2:	480e      	ldr	r0, [pc, #56]	; (78ec <DemoOutput_Channel+0x54>)
    78b4:	47a8      	blx	r5
        printf("\r\n");
    78b6:	480e      	ldr	r0, [pc, #56]	; (78f0 <DemoOutput_Channel+0x58>)
    78b8:	4b0e      	ldr	r3, [pc, #56]	; (78f4 <DemoOutput_Channel+0x5c>)
    78ba:	4798      	blx	r3
        #endif
#endif
    }
}    
    78bc:	bd70      	pop	{r4, r5, r6, pc}
        LCDDisplay((char *)"Connecting Peer on \n Channel ", channel, true);
    78be:	2201      	movs	r2, #1
    78c0:	0001      	movs	r1, r0
    78c2:	480d      	ldr	r0, [pc, #52]	; (78f8 <DemoOutput_Channel+0x60>)
    78c4:	4b06      	ldr	r3, [pc, #24]	; (78e0 <DemoOutput_Channel+0x48>)
    78c6:	4798      	blx	r3
        printf("\r\nConnecting Peer on Channel ");
    78c8:	480c      	ldr	r0, [pc, #48]	; (78fc <DemoOutput_Channel+0x64>)
    78ca:	4d07      	ldr	r5, [pc, #28]	; (78e8 <DemoOutput_Channel+0x50>)
    78cc:	47a8      	blx	r5
        printf("%d",channel);
    78ce:	0021      	movs	r1, r4
    78d0:	4806      	ldr	r0, [pc, #24]	; (78ec <DemoOutput_Channel+0x54>)
    78d2:	47a8      	blx	r5
        printf("\r\n");
    78d4:	4806      	ldr	r0, [pc, #24]	; (78f0 <DemoOutput_Channel+0x58>)
    78d6:	4b07      	ldr	r3, [pc, #28]	; (78f4 <DemoOutput_Channel+0x5c>)
    78d8:	4798      	blx	r3
    78da:	e7ef      	b.n	78bc <DemoOutput_Channel+0x24>
    78dc:	00017154 	.word	0x00017154
    78e0:	0000821d 	.word	0x0000821d
    78e4:	00017174 	.word	0x00017174
    78e8:	00015b79 	.word	0x00015b79
    78ec:	00017150 	.word	0x00017150
    78f0:	00017aac 	.word	0x00017aac
    78f4:	00015c95 	.word	0x00015c95
    78f8:	00017110 	.word	0x00017110
    78fc:	00017130 	.word	0x00017130

00007900 <DemoOutput_Instruction>:

void DemoOutput_Instruction(void)
{
    7900:	b510      	push	{r4, lr}
#if defined (ENABLE_LCD)
	#if defined (EXT_BOARD_OLED1_XPLAINED_PRO)
		LCDDisplay((char *)"SW     : Broadcast \nBUTTON1: Unicast", 0, false);
    7902:	2200      	movs	r2, #0
    7904:	2100      	movs	r1, #0
    7906:	4802      	ldr	r0, [pc, #8]	; (7910 <DemoOutput_Instruction+0x10>)
    7908:	4b02      	ldr	r3, [pc, #8]	; (7914 <DemoOutput_Instruction+0x14>)
    790a:	4798      	blx	r3
	#else
		LCDDisplay((char *)"SW: Broadcast", 0, false);
	#endif
#endif
}
    790c:	bd10      	pop	{r4, pc}
    790e:	46c0      	nop			; (mov r8, r8)
    7910:	00017400 	.word	0x00017400
    7914:	0000821d 	.word	0x0000821d

00007918 <DemoOutput_HandleMessage>:


void DemoOutput_HandleMessage(void)
{
    7918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;

    if( rxMessage.flags.bits.secEn )
    791a:	4b2a      	ldr	r3, [pc, #168]	; (79c4 <DemoOutput_HandleMessage+0xac>)
    791c:	781b      	ldrb	r3, [r3, #0]
    791e:	071b      	lsls	r3, r3, #28
    7920:	d426      	bmi.n	7970 <DemoOutput_HandleMessage+0x58>
    {
        sio2host_tx((uint8_t *)"Secured ", sizeof("Secured "));
    }

    if( rxMessage.flags.bits.broadcast )
    7922:	4b28      	ldr	r3, [pc, #160]	; (79c4 <DemoOutput_HandleMessage+0xac>)
    7924:	781b      	ldrb	r3, [r3, #0]
    7926:	079b      	lsls	r3, r3, #30
    7928:	d027      	beq.n	797a <DemoOutput_HandleMessage+0x62>
    {
        sio2host_tx((uint8_t *)"Broadcast Packet with RSSI ", sizeof("Broadcast Packet with RSSI "));
    792a:	211c      	movs	r1, #28
    792c:	4826      	ldr	r0, [pc, #152]	; (79c8 <DemoOutput_HandleMessage+0xb0>)
    792e:	4b27      	ldr	r3, [pc, #156]	; (79cc <DemoOutput_HandleMessage+0xb4>)
    7930:	4798      	blx	r3
    }
    else
    {
        sio2host_tx((uint8_t *)"Unicast Packet with RSSI ",sizeof("Unicast Packet with RSSI "));
    }
    printf("%02x", rxMessage.PacketRSSI);
    7932:	4c24      	ldr	r4, [pc, #144]	; (79c4 <DemoOutput_HandleMessage+0xac>)
    7934:	7b61      	ldrb	r1, [r4, #13]
    7936:	4826      	ldr	r0, [pc, #152]	; (79d0 <DemoOutput_HandleMessage+0xb8>)
    7938:	4b26      	ldr	r3, [pc, #152]	; (79d4 <DemoOutput_HandleMessage+0xbc>)
    793a:	4798      	blx	r3
    if( rxMessage.flags.bits.srcPrsnt )
    793c:	7823      	ldrb	r3, [r4, #0]
    793e:	065b      	lsls	r3, r3, #25
    7940:	d420      	bmi.n	7984 <DemoOutput_HandleMessage+0x6c>
            {
                printf("%x", rxMessage.SourceAddress[MY_ADDRESS_LENGTH-1-i]);
            }    
        }
    }
    sio2host_tx((uint8_t *)": ",sizeof(": "));
    7942:	2103      	movs	r1, #3
    7944:	4824      	ldr	r0, [pc, #144]	; (79d8 <DemoOutput_HandleMessage+0xc0>)
    7946:	4b21      	ldr	r3, [pc, #132]	; (79cc <DemoOutput_HandleMessage+0xb4>)
    7948:	4798      	blx	r3
    
    for(i = 0; i < rxMessage.PayloadSize; i++)
    794a:	4b1e      	ldr	r3, [pc, #120]	; (79c4 <DemoOutput_HandleMessage+0xac>)
    794c:	7b1b      	ldrb	r3, [r3, #12]
    794e:	2b00      	cmp	r3, #0
    7950:	d00a      	beq.n	7968 <DemoOutput_HandleMessage+0x50>
    7952:	2400      	movs	r4, #0
    {
        sio2host_putchar(rxMessage.Payload[i]);
    7954:	4d1b      	ldr	r5, [pc, #108]	; (79c4 <DemoOutput_HandleMessage+0xac>)
    7956:	4e21      	ldr	r6, [pc, #132]	; (79dc <DemoOutput_HandleMessage+0xc4>)
    7958:	68ab      	ldr	r3, [r5, #8]
    795a:	5d18      	ldrb	r0, [r3, r4]
    795c:	47b0      	blx	r6
    for(i = 0; i < rxMessage.PayloadSize; i++)
    795e:	3401      	adds	r4, #1
    7960:	b2e4      	uxtb	r4, r4
    7962:	7b2b      	ldrb	r3, [r5, #12]
    7964:	42a3      	cmp	r3, r4
    7966:	d8f7      	bhi.n	7958 <DemoOutput_HandleMessage+0x40>
    }   
	printf("\r\n");    
    7968:	481d      	ldr	r0, [pc, #116]	; (79e0 <DemoOutput_HandleMessage+0xc8>)
    796a:	4b1e      	ldr	r3, [pc, #120]	; (79e4 <DemoOutput_HandleMessage+0xcc>)
    796c:	4798      	blx	r3
} 
    796e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        sio2host_tx((uint8_t *)"Secured ", sizeof("Secured "));
    7970:	2109      	movs	r1, #9
    7972:	481d      	ldr	r0, [pc, #116]	; (79e8 <DemoOutput_HandleMessage+0xd0>)
    7974:	4b15      	ldr	r3, [pc, #84]	; (79cc <DemoOutput_HandleMessage+0xb4>)
    7976:	4798      	blx	r3
    7978:	e7d3      	b.n	7922 <DemoOutput_HandleMessage+0xa>
        sio2host_tx((uint8_t *)"Unicast Packet with RSSI ",sizeof("Unicast Packet with RSSI "));
    797a:	211a      	movs	r1, #26
    797c:	481b      	ldr	r0, [pc, #108]	; (79ec <DemoOutput_HandleMessage+0xd4>)
    797e:	4b13      	ldr	r3, [pc, #76]	; (79cc <DemoOutput_HandleMessage+0xb4>)
    7980:	4798      	blx	r3
    7982:	e7d6      	b.n	7932 <DemoOutput_HandleMessage+0x1a>
        sio2host_tx((uint8_t *)" from ", sizeof(" from "));
    7984:	2107      	movs	r1, #7
    7986:	481a      	ldr	r0, [pc, #104]	; (79f0 <DemoOutput_HandleMessage+0xd8>)
    7988:	4b10      	ldr	r3, [pc, #64]	; (79cc <DemoOutput_HandleMessage+0xb4>)
    798a:	4798      	blx	r3
        if( rxMessage.flags.bits.altSrcAddr )
    798c:	4b0d      	ldr	r3, [pc, #52]	; (79c4 <DemoOutput_HandleMessage+0xac>)
    798e:	781b      	ldrb	r3, [r3, #0]
    7990:	2407      	movs	r4, #7
    7992:	2b7f      	cmp	r3, #127	; 0x7f
    7994:	d809      	bhi.n	79aa <DemoOutput_HandleMessage+0x92>
                printf("%x", rxMessage.SourceAddress[MY_ADDRESS_LENGTH-1-i]);
    7996:	4f0b      	ldr	r7, [pc, #44]	; (79c4 <DemoOutput_HandleMessage+0xac>)
    7998:	4e16      	ldr	r6, [pc, #88]	; (79f4 <DemoOutput_HandleMessage+0xdc>)
    799a:	4d0e      	ldr	r5, [pc, #56]	; (79d4 <DemoOutput_HandleMessage+0xbc>)
    799c:	687b      	ldr	r3, [r7, #4]
    799e:	5d19      	ldrb	r1, [r3, r4]
    79a0:	0030      	movs	r0, r6
    79a2:	47a8      	blx	r5
            for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    79a4:	3c01      	subs	r4, #1
    79a6:	d2f9      	bcs.n	799c <DemoOutput_HandleMessage+0x84>
    79a8:	e7cb      	b.n	7942 <DemoOutput_HandleMessage+0x2a>
            printf( "%x", rxMessage.SourceAddress[1]);
    79aa:	4e06      	ldr	r6, [pc, #24]	; (79c4 <DemoOutput_HandleMessage+0xac>)
    79ac:	6873      	ldr	r3, [r6, #4]
    79ae:	7859      	ldrb	r1, [r3, #1]
    79b0:	4d10      	ldr	r5, [pc, #64]	; (79f4 <DemoOutput_HandleMessage+0xdc>)
    79b2:	0028      	movs	r0, r5
    79b4:	4c07      	ldr	r4, [pc, #28]	; (79d4 <DemoOutput_HandleMessage+0xbc>)
    79b6:	47a0      	blx	r4
            printf( "%x", rxMessage.SourceAddress[0]);
    79b8:	6873      	ldr	r3, [r6, #4]
    79ba:	7819      	ldrb	r1, [r3, #0]
    79bc:	0028      	movs	r0, r5
    79be:	47a0      	blx	r4
    79c0:	e7bf      	b.n	7942 <DemoOutput_HandleMessage+0x2a>
    79c2:	46c0      	nop			; (mov r8, r8)
    79c4:	20002af0 	.word	0x20002af0
    79c8:	000173b0 	.word	0x000173b0
    79cc:	0000c371 	.word	0x0000c371
    79d0:	000173e8 	.word	0x000173e8
    79d4:	00015b79 	.word	0x00015b79
    79d8:	000173fc 	.word	0x000173fc
    79dc:	0000c39d 	.word	0x0000c39d
    79e0:	00017aac 	.word	0x00017aac
    79e4:	00015c95 	.word	0x00015c95
    79e8:	000173a4 	.word	0x000173a4
    79ec:	000173cc 	.word	0x000173cc
    79f0:	000173f0 	.word	0x000173f0
    79f4:	000173f8 	.word	0x000173f8

000079f8 <DemoOutput_UpdateTxRx>:

void DemoOutput_UpdateTxRx(uint8_t TxNum, uint8_t RxNum)
{
    79f8:	b510      	push	{r4, lr}
#if defined (ENABLE_LCD)
    LCDTRXCount(TxNum, RxNum);  
    79fa:	4b01      	ldr	r3, [pc, #4]	; (7a00 <DemoOutput_UpdateTxRx+0x8>)
    79fc:	4798      	blx	r3
#endif
}
    79fe:	bd10      	pop	{r4, pc}
    7a00:	000081c1 	.word	0x000081c1

00007a04 <DemoOutput_ChannelError>:

void DemoOutput_ChannelError(uint8_t channel)
{
    7a04:	b570      	push	{r4, r5, r6, lr}
    7a06:	0005      	movs	r5, r0
    #if defined (ENABLE_CONSOLE)
        printf("\r\nSelection of channel ");
    7a08:	4804      	ldr	r0, [pc, #16]	; (7a1c <DemoOutput_ChannelError+0x18>)
    7a0a:	4c05      	ldr	r4, [pc, #20]	; (7a20 <DemoOutput_ChannelError+0x1c>)
    7a0c:	47a0      	blx	r4
        printf("%d", channel);
    7a0e:	0029      	movs	r1, r5
    7a10:	4804      	ldr	r0, [pc, #16]	; (7a24 <DemoOutput_ChannelError+0x20>)
    7a12:	47a0      	blx	r4
        printf(" is not supported in current configuration.\r\n");
    7a14:	4804      	ldr	r0, [pc, #16]	; (7a28 <DemoOutput_ChannelError+0x24>)
    7a16:	4b05      	ldr	r3, [pc, #20]	; (7a2c <DemoOutput_ChannelError+0x28>)
    7a18:	4798      	blx	r3
    #endif
}
    7a1a:	bd70      	pop	{r4, r5, r6, pc}
    7a1c:	00017194 	.word	0x00017194
    7a20:	00015b79 	.word	0x00015b79
    7a24:	00017150 	.word	0x00017150
    7a28:	000171ac 	.word	0x000171ac
    7a2c:	00015c95 	.word	0x00015c95

00007a30 <DemoOutput_UnicastFail>:

void DemoOutput_UnicastFail(void)
{
    7a30:	b510      	push	{r4, lr}
    #if defined (ENABLE_CONSOLE)
        printf("\r\nUnicast Failed\r\n");
    7a32:	4804      	ldr	r0, [pc, #16]	; (7a44 <DemoOutput_UnicastFail+0x14>)
    7a34:	4b04      	ldr	r3, [pc, #16]	; (7a48 <DemoOutput_UnicastFail+0x18>)
    7a36:	4798      	blx	r3
    #endif
#if defined (ENABLE_LCD)
    LCDDisplay((char *)" Unicast Failed", 0, true);
    7a38:	2201      	movs	r2, #1
    7a3a:	2100      	movs	r1, #0
    7a3c:	4803      	ldr	r0, [pc, #12]	; (7a4c <DemoOutput_UnicastFail+0x1c>)
    7a3e:	4b04      	ldr	r3, [pc, #16]	; (7a50 <DemoOutput_UnicastFail+0x20>)
    7a40:	4798      	blx	r3
#endif
}    
    7a42:	bd10      	pop	{r4, pc}
    7a44:	00017428 	.word	0x00017428
    7a48:	00015c95 	.word	0x00015c95
    7a4c:	0001743c 	.word	0x0001743c
    7a50:	0000821d 	.word	0x0000821d

00007a54 <DemoOutput_BroadcastFail>:

void DemoOutput_BroadcastFail(void)
{
    7a54:	b510      	push	{r4, lr}
	#if defined (ENABLE_CONSOLE)
	printf("\r\nBroadcast Failed\r\n");
    7a56:	4804      	ldr	r0, [pc, #16]	; (7a68 <DemoOutput_BroadcastFail+0x14>)
    7a58:	4b04      	ldr	r3, [pc, #16]	; (7a6c <DemoOutput_BroadcastFail+0x18>)
    7a5a:	4798      	blx	r3
	#endif
	#if defined (ENABLE_LCD)
	LCDDisplay((char *)" Broadcast Failed", 0, true);
    7a5c:	2201      	movs	r2, #1
    7a5e:	2100      	movs	r1, #0
    7a60:	4803      	ldr	r0, [pc, #12]	; (7a70 <DemoOutput_BroadcastFail+0x1c>)
    7a62:	4b04      	ldr	r3, [pc, #16]	; (7a74 <DemoOutput_BroadcastFail+0x20>)
    7a64:	4798      	blx	r3
	#endif
}    
    7a66:	bd10      	pop	{r4, pc}
    7a68:	000170e8 	.word	0x000170e8
    7a6c:	00015c95 	.word	0x00015c95
    7a70:	000170fc 	.word	0x000170fc
    7a74:	0000821d 	.word	0x0000821d

00007a78 <ButtonPressed>:
 *
 * Note:
 ********************************************************************/

uint8_t ButtonPressed(void)
{
    7a78:	b510      	push	{r4, lr}
	return (port_base->IN.reg & pin_mask);
    7a7a:	4b19      	ldr	r3, [pc, #100]	; (7ae0 <ButtonPressed+0x68>)
    7a7c:	6a1b      	ldr	r3, [r3, #32]
    MIWI_TICK tickDifference;
    if(!port_pin_get_input_level(BUTTON_0_PIN))
    7a7e:	00db      	lsls	r3, r3, #3
    7a80:	d40e      	bmi.n	7aa0 <ButtonPressed+0x28>
    {
        //if the button was previously not pressed
        if(PUSH_BUTTON_pressed == false)
    7a82:	4b18      	ldr	r3, [pc, #96]	; (7ae4 <ButtonPressed+0x6c>)
    7a84:	781b      	ldrb	r3, [r3, #0]
        if(tickDifference.Val > DEBOUNCE_TIME)
        {
            PUSH_BUTTON_pressed = false;
        }
    }
    return 0;
    7a86:	2000      	movs	r0, #0
        if(PUSH_BUTTON_pressed == false)
    7a88:	2b00      	cmp	r3, #0
    7a8a:	d000      	beq.n	7a8e <ButtonPressed+0x16>
}
    7a8c:	bd10      	pop	{r4, pc}
            PUSH_BUTTON_pressed = true;
    7a8e:	2201      	movs	r2, #1
    7a90:	4b14      	ldr	r3, [pc, #80]	; (7ae4 <ButtonPressed+0x6c>)
    7a92:	701a      	strb	r2, [r3, #0]
            PUSH_BUTTON_press_time.Val = MiWi_TickGet();
    7a94:	4b14      	ldr	r3, [pc, #80]	; (7ae8 <ButtonPressed+0x70>)
    7a96:	4798      	blx	r3
    7a98:	4b14      	ldr	r3, [pc, #80]	; (7aec <ButtonPressed+0x74>)
    7a9a:	6018      	str	r0, [r3, #0]
            return 1;
    7a9c:	2001      	movs	r0, #1
    7a9e:	e7f5      	b.n	7a8c <ButtonPressed+0x14>
    7aa0:	4b0f      	ldr	r3, [pc, #60]	; (7ae0 <ButtonPressed+0x68>)
    7aa2:	6a1b      	ldr	r3, [r3, #32]
    else if(!port_pin_get_input_level(WING_BUTTON_1))
    7aa4:	025b      	lsls	r3, r3, #9
    7aa6:	d40d      	bmi.n	7ac4 <ButtonPressed+0x4c>
	    if(PUSH_BUTTON_pressed == false)
    7aa8:	4b0e      	ldr	r3, [pc, #56]	; (7ae4 <ButtonPressed+0x6c>)
    7aaa:	781b      	ldrb	r3, [r3, #0]
    return 0;
    7aac:	2000      	movs	r0, #0
	    if(PUSH_BUTTON_pressed == false)
    7aae:	2b00      	cmp	r3, #0
    7ab0:	d1ec      	bne.n	7a8c <ButtonPressed+0x14>
		    PUSH_BUTTON_pressed = true;
    7ab2:	2201      	movs	r2, #1
    7ab4:	4b0b      	ldr	r3, [pc, #44]	; (7ae4 <ButtonPressed+0x6c>)
    7ab6:	701a      	strb	r2, [r3, #0]
		    PUSH_BUTTON_press_time.Val = MiWi_TickGet();
    7ab8:	4b0b      	ldr	r3, [pc, #44]	; (7ae8 <ButtonPressed+0x70>)
    7aba:	4798      	blx	r3
    7abc:	4b0b      	ldr	r3, [pc, #44]	; (7aec <ButtonPressed+0x74>)
    7abe:	6018      	str	r0, [r3, #0]
		    return 2;
    7ac0:	2002      	movs	r0, #2
    7ac2:	e7e3      	b.n	7a8c <ButtonPressed+0x14>
		t.Val = MiWi_TickGet();
    7ac4:	4b08      	ldr	r3, [pc, #32]	; (7ae8 <ButtonPressed+0x70>)
    7ac6:	4798      	blx	r3
        tickDifference.Val = MiWi_TickGetDiff(t,PUSH_BUTTON_press_time);
    7ac8:	4b08      	ldr	r3, [pc, #32]	; (7aec <ButtonPressed+0x74>)
    7aca:	6819      	ldr	r1, [r3, #0]
    7acc:	4b08      	ldr	r3, [pc, #32]	; (7af0 <ButtonPressed+0x78>)
    7ace:	4798      	blx	r3
        if(tickDifference.Val > DEBOUNCE_TIME)
    7ad0:	4b08      	ldr	r3, [pc, #32]	; (7af4 <ButtonPressed+0x7c>)
    7ad2:	4298      	cmp	r0, r3
    7ad4:	d902      	bls.n	7adc <ButtonPressed+0x64>
            PUSH_BUTTON_pressed = false;
    7ad6:	2200      	movs	r2, #0
    7ad8:	4b02      	ldr	r3, [pc, #8]	; (7ae4 <ButtonPressed+0x6c>)
    7ada:	701a      	strb	r2, [r3, #0]
    return 0;
    7adc:	2000      	movs	r0, #0
    7ade:	e7d5      	b.n	7a8c <ButtonPressed+0x14>
    7ae0:	40002800 	.word	0x40002800
    7ae4:	20002128 	.word	0x20002128
    7ae8:	0000c111 	.word	0x0000c111
    7aec:	2000212c 	.word	0x2000212c
    7af0:	0000c171 	.word	0x0000c171
    7af4:	00003fff 	.word	0x00003fff

00007af8 <Buttons_init>:
#if (defined EXT_BOARD_OLED1_XPLAINED_PRO)
/**
 * \brief Configures buttons
 */
void Buttons_init(void)
{
    7af8:	b530      	push	{r4, r5, lr}
    7afa:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    7afc:	ac01      	add	r4, sp, #4
    7afe:	2300      	movs	r3, #0
    7b00:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    7b02:	2201      	movs	r2, #1
    7b04:	7062      	strb	r2, [r4, #1]
	config->powersave  = false;
    7b06:	70a3      	strb	r3, [r4, #2]

	conf.direction = PORT_PIN_DIR_INPUT;
	conf.input_pull = PORT_PIN_PULL_UP;

	/* Configure all three buttons as inputs */
	port_pin_set_config(WING_BUTTON_1, &conf);
    7b08:	0021      	movs	r1, r4
    7b0a:	2016      	movs	r0, #22
    7b0c:	4d04      	ldr	r5, [pc, #16]	; (7b20 <Buttons_init+0x28>)
    7b0e:	47a8      	blx	r5
	port_pin_set_config(WING_BUTTON_2, &conf);
    7b10:	0021      	movs	r1, r4
    7b12:	2006      	movs	r0, #6
    7b14:	47a8      	blx	r5
	port_pin_set_config(WING_BUTTON_3, &conf);
    7b16:	0021      	movs	r1, r4
    7b18:	2007      	movs	r0, #7
    7b1a:	47a8      	blx	r5
}
    7b1c:	b003      	add	sp, #12
    7b1e:	bd30      	pop	{r4, r5, pc}
    7b20:	00005155 	.word	0x00005155

00007b24 <APP_TaskHandler>:

/*********************************************************************//*
 \brief      Application Task Handler
 ************************************************************************/
SYSTEM_TaskStatus_t APP_TaskHandler(void)
{
    7b24:	b510      	push	{r4, lr}
    Run_Demo();
    7b26:	4b02      	ldr	r3, [pc, #8]	; (7b30 <APP_TaskHandler+0xc>)
    7b28:	4798      	blx	r3
    return SYSTEM_TASK_SUCCESS;
}
    7b2a:	2000      	movs	r0, #0
    7b2c:	bd10      	pop	{r4, pc}
    7b2e:	46c0      	nop			; (mov r8, r8)
    7b30:	00008169 	.word	0x00008169

00007b34 <ReadMacAddress>:
* Overview:		    Uses the MAC Address for addressing
*
* Note:			    
**********************************************************************/
void ReadMacAddress(void)
{
    7b34:	b510      	push	{r4, lr}
#if (BOARD == SAMR34_XPLAINED_PRO && defined(__SAMR34J18B__))
	uint8_t* peui64 = edbg_eui_read_eui64() ;
    7b36:	4b06      	ldr	r3, [pc, #24]	; (7b50 <ReadMacAddress+0x1c>)
    7b38:	4798      	blx	r3
    7b3a:	1dc3      	adds	r3, r0, #7
    7b3c:	4a05      	ldr	r2, [pc, #20]	; (7b54 <ReadMacAddress+0x20>)
    7b3e:	3801      	subs	r0, #1
	for (uint8_t i = 0; i < MY_ADDRESS_LENGTH; i++)
	{
		myLongAddress[i] = peui64[MY_ADDRESS_LENGTH-i-1] ;
    7b40:	7819      	ldrb	r1, [r3, #0]
    7b42:	7011      	strb	r1, [r2, #0]
    7b44:	3b01      	subs	r3, #1
    7b46:	3201      	adds	r2, #1
	for (uint8_t i = 0; i < MY_ADDRESS_LENGTH; i++)
    7b48:	4283      	cmp	r3, r0
    7b4a:	d1f9      	bne.n	7b40 <ReadMacAddress+0xc>
	for (i= 0; i < MY_ADDRESS_LENGTH; i++)
	{
		myLongAddress[i] = peui64[MY_ADDRESS_LENGTH-i-1] ;
	}
#endif
}
    7b4c:	bd10      	pop	{r4, pc}
    7b4e:	46c0      	nop			; (mov r8, r8)
    7b50:	0000d7e9 	.word	0x0000d7e9
    7b54:	20000020 	.word	0x20000020

00007b58 <main>:
{   
    7b58:	b570      	push	{r4, r5, r6, lr}
	system_init();
    7b5a:	4b10      	ldr	r3, [pc, #64]	; (7b9c <main+0x44>)
    7b5c:	4798      	blx	r3
	delay_init();
    7b5e:	4b10      	ldr	r3, [pc, #64]	; (7ba0 <main+0x48>)
    7b60:	4798      	blx	r3
	cpu_irq_enable();
    7b62:	2201      	movs	r2, #1
    7b64:	4b0f      	ldr	r3, [pc, #60]	; (7ba4 <main+0x4c>)
    7b66:	701a      	strb	r2, [r3, #0]
    7b68:	f3bf 8f5f 	dmb	sy
    7b6c:	b662      	cpsie	i
	LCD_Initialize();
    7b6e:	4b0e      	ldr	r3, [pc, #56]	; (7ba8 <main+0x50>)
    7b70:	4798      	blx	r3
	sio2host_init();
    7b72:	4b0e      	ldr	r3, [pc, #56]	; (7bac <main+0x54>)
    7b74:	4798      	blx	r3
	ReadMacAddress(); 
    7b76:	4b0e      	ldr	r3, [pc, #56]	; (7bb0 <main+0x58>)
    7b78:	4798      	blx	r3
	SystemTimerInit();
    7b7a:	4b0e      	ldr	r3, [pc, #56]	; (7bb4 <main+0x5c>)
    7b7c:	4798      	blx	r3
    DemoOutput_Greeting();	
    7b7e:	4b0e      	ldr	r3, [pc, #56]	; (7bb8 <main+0x60>)
    7b80:	4798      	blx	r3
    Buttons_init();
    7b82:	4b0e      	ldr	r3, [pc, #56]	; (7bbc <main+0x64>)
    7b84:	4798      	blx	r3
    Initialize_Demo(freezer_enable);
    7b86:	2000      	movs	r0, #0
    7b88:	4b0d      	ldr	r3, [pc, #52]	; (7bc0 <main+0x68>)
    7b8a:	4798      	blx	r3
    Stack_Init();
    7b8c:	4b0d      	ldr	r3, [pc, #52]	; (7bc4 <main+0x6c>)
    7b8e:	4798      	blx	r3
		SYSTEM_RunTasks();
    7b90:	4d0d      	ldr	r5, [pc, #52]	; (7bc8 <main+0x70>)
		Run_Demo();
    7b92:	4c0e      	ldr	r4, [pc, #56]	; (7bcc <main+0x74>)
		SYSTEM_RunTasks();
    7b94:	47a8      	blx	r5
		Run_Demo();
    7b96:	47a0      	blx	r4
    7b98:	e7fc      	b.n	7b94 <main+0x3c>
    7b9a:	46c0      	nop			; (mov r8, r8)
    7b9c:	000071c5 	.word	0x000071c5
    7ba0:	000046b1 	.word	0x000046b1
    7ba4:	20000014 	.word	0x20000014
    7ba8:	0000817d 	.word	0x0000817d
    7bac:	0000c225 	.word	0x0000c225
    7bb0:	00007b35 	.word	0x00007b35
    7bb4:	0000ccc9 	.word	0x0000ccc9
    7bb8:	0000782d 	.word	0x0000782d
    7bbc:	00007af9 	.word	0x00007af9
    7bc0:	00007fad 	.word	0x00007fad
    7bc4:	0000d2d9 	.word	0x0000d2d9
    7bc8:	0000d2e9 	.word	0x0000d2e9
    7bcc:	00008169 	.word	0x00008169

00007bd0 <TxToutCallback>:
#if defined(ENABLE_SLEEP_FEATURE)
volatile uint8_t send_data = 0;	// Flag used to put a sleeping device(RFD) in sleep - wakeup - transmit cycle
#endif // #if defined(ENABLE_SLEEP_FEATURE)

void TxToutCallback(void)
{
    7bd0:	b510      	push	{r4, lr}
	#if defined(ENABLE_SLEEP_FEATURE)
		send_data = 0;
	#endif // #if defined(ENABLE_SLEEP_FEATURE)
	/* That bring the node back to continuous transaction cycle */
	PHY_DataConf(TRANSACTION_EXPIRED);
    7bd2:	2005      	movs	r0, #5
    7bd4:	4b03      	ldr	r3, [pc, #12]	; (7be4 <TxToutCallback+0x14>)
    7bd6:	4798      	blx	r3
	SwTimerStop(TxTimerId);
    7bd8:	4b03      	ldr	r3, [pc, #12]	; (7be8 <TxToutCallback+0x18>)
    7bda:	7818      	ldrb	r0, [r3, #0]
    7bdc:	4b03      	ldr	r3, [pc, #12]	; (7bec <TxToutCallback+0x1c>)
    7bde:	4798      	blx	r3
}
    7be0:	bd10      	pop	{r4, pc}
    7be2:	46c0      	nop			; (mov r8, r8)
    7be4:	00009f01 	.word	0x00009f01
    7be8:	20000305 	.word	0x20000305
    7bec:	0000d069 	.word	0x0000d069

00007bf0 <dataConfcb>:

void dataConfcb(uint8_t handle, miwi_status_t status, uint8_t* msgPointer)
{
    7bf0:	b510      	push	{r4, lr}
    7bf2:	0014      	movs	r4, r2
	#if defined (ENABLE_CONSOLE)
        printf("\nData Confirm: Handle: %d status:%d \r\n", handle, status);
    7bf4:	000a      	movs	r2, r1
    7bf6:	0001      	movs	r1, r0
    7bf8:	4805      	ldr	r0, [pc, #20]	; (7c10 <dataConfcb+0x20>)
    7bfa:	4b06      	ldr	r3, [pc, #24]	; (7c14 <dataConfcb+0x24>)
    7bfc:	4798      	blx	r3
	#endif // #if defined (ENABLE_CONSOLE)
	#if defined(ENABLE_SLEEP_FEATURE)
		send_data = 0;
	#endif // #if defined(ENABLE_SLEEP_FEATURE)
	/* Stop transmission timeout timer */
		SwTimerStop(TxTimerId);
    7bfe:	4b06      	ldr	r3, [pc, #24]	; (7c18 <dataConfcb+0x28>)
    7c00:	7818      	ldrb	r0, [r3, #0]
    7c02:	4b06      	ldr	r3, [pc, #24]	; (7c1c <dataConfcb+0x2c>)
    7c04:	4798      	blx	r3
	/* Free payload buffer allocated */
	MiMem_Free(msgPointer);
    7c06:	0020      	movs	r0, r4
    7c08:	4b05      	ldr	r3, [pc, #20]	; (7c20 <dataConfcb+0x30>)
    7c0a:	4798      	blx	r3
}
    7c0c:	bd10      	pop	{r4, pc}
    7c0e:	46c0      	nop			; (mov r8, r8)
    7c10:	00017480 	.word	0x00017480
    7c14:	00015b79 	.word	0x00015b79
    7c18:	20000305 	.word	0x20000305
    7c1c:	0000d069 	.word	0x0000d069
    7c20:	0000bf8d 	.word	0x0000bf8d

00007c24 <run_p2p_demo>:

void run_p2p_demo(void)
{
    7c24:	b570      	push	{r4, r5, r6, lr}
    7c26:	b086      	sub	sp, #24
		// Function ButtonPressed will return if any of the two buttons
		// has been pushed.
		/*******************************************************************/

		/* Read the button */
		uint8_t PressedButton = ButtonPressed();
    7c28:	4b6f      	ldr	r3, [pc, #444]	; (7de8 <run_p2p_demo+0x1c4>)
    7c2a:	4798      	blx	r3
		switch( PressedButton )
    7c2c:	2801      	cmp	r0, #1
    7c2e:	d003      	beq.n	7c38 <run_p2p_demo+0x14>
    7c30:	2802      	cmp	r0, #2
    7c32:	d048      	beq.n	7cc6 <run_p2p_demo+0xa2>
			break;
			default:
			break;
		}
	}
}
    7c34:	b006      	add	sp, #24
    7c36:	bd70      	pop	{r4, r5, r6, pc}
				uint16_t broadcastAddress = 0xFFFF;
    7c38:	2201      	movs	r2, #1
    7c3a:	4252      	negs	r2, r2
    7c3c:	2316      	movs	r3, #22
    7c3e:	446b      	add	r3, sp
    7c40:	801a      	strh	r2, [r3, #0]
					dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(MAX_SEC_BCAST_PAYLOAD)); 
    7c42:	20e0      	movs	r0, #224	; 0xe0
    7c44:	4b69      	ldr	r3, [pc, #420]	; (7dec <run_p2p_demo+0x1c8>)
    7c46:	4798      	blx	r3
					if (NULL == dataPtr)
    7c48:	2800      	cmp	r0, #0
    7c4a:	d0f3      	beq.n	7c34 <run_p2p_demo+0x10>
                    for(i = 0; i < MAX_SEC_BCAST_PAYLOAD; i++) 
    7c4c:	2200      	movs	r2, #0
    7c4e:	4b68      	ldr	r3, [pc, #416]	; (7df0 <run_p2p_demo+0x1cc>)
    7c50:	701a      	strb	r2, [r3, #0]
    7c52:	2400      	movs	r4, #0
						dataPtr[dataLen++] = 0x42;	// 'B'
    7c54:	2342      	movs	r3, #66	; 0x42
                    for(i = 0; i < MAX_SEC_BCAST_PAYLOAD; i++) 
    7c56:	4d66      	ldr	r5, [pc, #408]	; (7df0 <run_p2p_demo+0x1cc>)
						dataPtr[dataLen++] = 0x42;	// 'B'
    7c58:	1c62      	adds	r2, r4, #1
    7c5a:	b2d2      	uxtb	r2, r2
    7c5c:	5503      	strb	r3, [r0, r4]
                    for(i = 0; i < MAX_SEC_BCAST_PAYLOAD; i++) 
    7c5e:	7829      	ldrb	r1, [r5, #0]
    7c60:	3101      	adds	r1, #1
    7c62:	b2c9      	uxtb	r1, r1
    7c64:	7029      	strb	r1, [r5, #0]
						dataPtr[dataLen++] = 0x42;	// 'B'
    7c66:	0014      	movs	r4, r2
                    for(i = 0; i < MAX_SEC_BCAST_PAYLOAD; i++) 
    7c68:	29d9      	cmp	r1, #217	; 0xd9
    7c6a:	d9f5      	bls.n	7c58 <run_p2p_demo+0x34>
                    TxSynCount++;
    7c6c:	4961      	ldr	r1, [pc, #388]	; (7df4 <run_p2p_demo+0x1d0>)
    7c6e:	780b      	ldrb	r3, [r1, #0]
    7c70:	3301      	adds	r3, #1
    7c72:	700b      	strb	r3, [r1, #0]
				if(MiApp_SendData(SHORT_ADDR_LEN, (uint8_t *)&broadcastAddress, dataLen, dataPtr, msghandledemo++, true, dataConfcb)== false)
    7c74:	4960      	ldr	r1, [pc, #384]	; (7df8 <run_p2p_demo+0x1d4>)
    7c76:	780b      	ldrb	r3, [r1, #0]
    7c78:	1c5c      	adds	r4, r3, #1
    7c7a:	700c      	strb	r4, [r1, #0]
    7c7c:	495f      	ldr	r1, [pc, #380]	; (7dfc <run_p2p_demo+0x1d8>)
    7c7e:	9102      	str	r1, [sp, #8]
    7c80:	2101      	movs	r1, #1
    7c82:	9101      	str	r1, [sp, #4]
    7c84:	9300      	str	r3, [sp, #0]
    7c86:	0003      	movs	r3, r0
    7c88:	3115      	adds	r1, #21
    7c8a:	4469      	add	r1, sp
    7c8c:	2002      	movs	r0, #2
    7c8e:	4c5c      	ldr	r4, [pc, #368]	; (7e00 <run_p2p_demo+0x1dc>)
    7c90:	47a0      	blx	r4
    7c92:	2800      	cmp	r0, #0
    7c94:	d10d      	bne.n	7cb2 <run_p2p_demo+0x8e>
					DemoOutput_BroadcastFail();
    7c96:	4b5b      	ldr	r3, [pc, #364]	; (7e04 <run_p2p_demo+0x1e0>)
    7c98:	4798      	blx	r3
				DemoOutput_UpdateTxRx(++TxNum, RxNum);
    7c9a:	4b5b      	ldr	r3, [pc, #364]	; (7e08 <run_p2p_demo+0x1e4>)
    7c9c:	7818      	ldrb	r0, [r3, #0]
    7c9e:	3001      	adds	r0, #1
    7ca0:	b2c0      	uxtb	r0, r0
    7ca2:	7018      	strb	r0, [r3, #0]
    7ca4:	4b59      	ldr	r3, [pc, #356]	; (7e0c <run_p2p_demo+0x1e8>)
    7ca6:	7819      	ldrb	r1, [r3, #0]
    7ca8:	4b59      	ldr	r3, [pc, #356]	; (7e10 <run_p2p_demo+0x1ec>)
    7caa:	4798      	blx	r3
				DemoOutput_Instruction();
    7cac:	4b59      	ldr	r3, [pc, #356]	; (7e14 <run_p2p_demo+0x1f0>)
    7cae:	4798      	blx	r3
			break;
    7cb0:	e7c0      	b.n	7c34 <run_p2p_demo+0x10>
					SwTimerStart (TxTimerId, MS_TO_US(5000), 0/*SW_TIMEOUT_RELATIVE*/, (void *)TxToutCallback, NULL);
    7cb2:	4b59      	ldr	r3, [pc, #356]	; (7e18 <run_p2p_demo+0x1f4>)
    7cb4:	7818      	ldrb	r0, [r3, #0]
    7cb6:	2300      	movs	r3, #0
    7cb8:	9300      	str	r3, [sp, #0]
    7cba:	4b58      	ldr	r3, [pc, #352]	; (7e1c <run_p2p_demo+0x1f8>)
    7cbc:	2200      	movs	r2, #0
    7cbe:	4958      	ldr	r1, [pc, #352]	; (7e20 <run_p2p_demo+0x1fc>)
    7cc0:	4c58      	ldr	r4, [pc, #352]	; (7e24 <run_p2p_demo+0x200>)
    7cc2:	47a0      	blx	r4
    7cc4:	e7e9      	b.n	7c9a <run_p2p_demo+0x76>
				chk_sel_status = true;
    7cc6:	2301      	movs	r3, #1
    7cc8:	4a57      	ldr	r2, [pc, #348]	; (7e28 <run_p2p_demo+0x204>)
    7cca:	7013      	strb	r3, [r2, #0]
				select_ed = 0;
    7ccc:	2100      	movs	r1, #0
    7cce:	4a57      	ldr	r2, [pc, #348]	; (7e2c <run_p2p_demo+0x208>)
    7cd0:	7011      	strb	r1, [r2, #0]
				update_ed = true;
    7cd2:	4a57      	ldr	r2, [pc, #348]	; (7e30 <run_p2p_demo+0x20c>)
    7cd4:	7013      	strb	r3, [r2, #0]
						uint8_t switch_val = ButtonPressed();
    7cd6:	4c44      	ldr	r4, [pc, #272]	; (7de8 <run_p2p_demo+0x1c4>)
				while(update_ed == true)
    7cd8:	e03d      	b.n	7d56 <run_p2p_demo+0x132>
							update_ed = false;
    7cda:	2300      	movs	r3, #0
    7cdc:	4a54      	ldr	r2, [pc, #336]	; (7e30 <run_p2p_demo+0x20c>)
    7cde:	7013      	strb	r3, [r2, #0]
							chk_sel_status = false;
    7ce0:	4a51      	ldr	r2, [pc, #324]	; (7e28 <run_p2p_demo+0x204>)
    7ce2:	7013      	strb	r3, [r2, #0]
								dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(MAX_SEC_UCAST_PAYLOAD));
    7ce4:	30df      	adds	r0, #223	; 0xdf
    7ce6:	4b41      	ldr	r3, [pc, #260]	; (7dec <run_p2p_demo+0x1c8>)
    7ce8:	4798      	blx	r3
							    if (NULL == dataPtr)
    7cea:	2800      	cmp	r0, #0
    7cec:	d0a2      	beq.n	7c34 <run_p2p_demo+0x10>
                                for(i = 0; i < MAX_SEC_UCAST_PAYLOAD; i++)        
    7cee:	2200      	movs	r2, #0
    7cf0:	4b3f      	ldr	r3, [pc, #252]	; (7df0 <run_p2p_demo+0x1cc>)
    7cf2:	701a      	strb	r2, [r3, #0]
    7cf4:	2500      	movs	r5, #0
									dataPtr[dataLen++] = 0x55;	// 'U'
    7cf6:	2355      	movs	r3, #85	; 0x55
                                for(i = 0; i < MAX_SEC_UCAST_PAYLOAD; i++)        
    7cf8:	4e3d      	ldr	r6, [pc, #244]	; (7df0 <run_p2p_demo+0x1cc>)
									dataPtr[dataLen++] = 0x55;	// 'U'
    7cfa:	1c6a      	adds	r2, r5, #1
    7cfc:	b2d2      	uxtb	r2, r2
    7cfe:	5543      	strb	r3, [r0, r5]
                                for(i = 0; i < MAX_SEC_UCAST_PAYLOAD; i++)        
    7d00:	7831      	ldrb	r1, [r6, #0]
    7d02:	3101      	adds	r1, #1
    7d04:	b2c9      	uxtb	r1, r1
    7d06:	7031      	strb	r1, [r6, #0]
									dataPtr[dataLen++] = 0x55;	// 'U'
    7d08:	0015      	movs	r5, r2
                                for(i = 0; i < MAX_SEC_UCAST_PAYLOAD; i++)        
    7d0a:	29d9      	cmp	r1, #217	; 0xd9
    7d0c:	d9f5      	bls.n	7cfa <run_p2p_demo+0xd6>
                                TxSynCount2++;
    7d0e:	4949      	ldr	r1, [pc, #292]	; (7e34 <run_p2p_demo+0x210>)
    7d10:	780b      	ldrb	r3, [r1, #0]
    7d12:	3301      	adds	r3, #1
    7d14:	700b      	strb	r3, [r1, #0]
							if (MiApp_SendData(LONG_ADDR_LEN, ConnectionTable[select_ed].Address, dataLen, dataPtr, msghandledemo++, 1, dataConfcb) == false)
    7d16:	4b45      	ldr	r3, [pc, #276]	; (7e2c <run_p2p_demo+0x208>)
    7d18:	781b      	ldrb	r3, [r3, #0]
    7d1a:	0099      	lsls	r1, r3, #2
    7d1c:	18c9      	adds	r1, r1, r3
    7d1e:	0049      	lsls	r1, r1, #1
    7d20:	4b45      	ldr	r3, [pc, #276]	; (7e38 <run_p2p_demo+0x214>)
    7d22:	18c9      	adds	r1, r1, r3
    7d24:	4d34      	ldr	r5, [pc, #208]	; (7df8 <run_p2p_demo+0x1d4>)
    7d26:	782b      	ldrb	r3, [r5, #0]
    7d28:	1c5e      	adds	r6, r3, #1
    7d2a:	702e      	strb	r6, [r5, #0]
    7d2c:	4d33      	ldr	r5, [pc, #204]	; (7dfc <run_p2p_demo+0x1d8>)
    7d2e:	9502      	str	r5, [sp, #8]
    7d30:	2501      	movs	r5, #1
    7d32:	9501      	str	r5, [sp, #4]
    7d34:	9300      	str	r3, [sp, #0]
    7d36:	0003      	movs	r3, r0
    7d38:	2008      	movs	r0, #8
    7d3a:	4d31      	ldr	r5, [pc, #196]	; (7e00 <run_p2p_demo+0x1dc>)
    7d3c:	47a8      	blx	r5
    7d3e:	2800      	cmp	r0, #0
    7d40:	d140      	bne.n	7dc4 <run_p2p_demo+0x1a0>
								DemoOutput_UnicastFail();
    7d42:	4b3e      	ldr	r3, [pc, #248]	; (7e3c <run_p2p_demo+0x218>)
    7d44:	4798      	blx	r3
							DemoOutput_UpdateTxRx(TxNum, RxNum);
    7d46:	4b31      	ldr	r3, [pc, #196]	; (7e0c <run_p2p_demo+0x1e8>)
    7d48:	7819      	ldrb	r1, [r3, #0]
    7d4a:	4b2f      	ldr	r3, [pc, #188]	; (7e08 <run_p2p_demo+0x1e4>)
    7d4c:	7818      	ldrb	r0, [r3, #0]
    7d4e:	4b30      	ldr	r3, [pc, #192]	; (7e10 <run_p2p_demo+0x1ec>)
    7d50:	4798      	blx	r3
							DemoOutput_Instruction();
    7d52:	4b30      	ldr	r3, [pc, #192]	; (7e14 <run_p2p_demo+0x1f0>)
    7d54:	4798      	blx	r3
				while(update_ed == true)
    7d56:	4b36      	ldr	r3, [pc, #216]	; (7e30 <run_p2p_demo+0x20c>)
    7d58:	781b      	ldrb	r3, [r3, #0]
    7d5a:	2b00      	cmp	r3, #0
    7d5c:	d100      	bne.n	7d60 <run_p2p_demo+0x13c>
    7d5e:	e769      	b.n	7c34 <run_p2p_demo+0x10>
						LCD_Erase();
    7d60:	4b37      	ldr	r3, [pc, #220]	; (7e40 <run_p2p_demo+0x21c>)
    7d62:	4798      	blx	r3
						snprintf(LCDText, sizeof(LCDText),(char*)"SW:%02d-%02x%02x%02x \nBUTTON1: Change node",select_ed,ConnectionTable[select_ed].Address[0],
    7d64:	4b31      	ldr	r3, [pc, #196]	; (7e2c <run_p2p_demo+0x208>)
    7d66:	781b      	ldrb	r3, [r3, #0]
                               ConnectionTable[select_ed].Address[1],ConnectionTable[select_ed].Address[2]);
    7d68:	4833      	ldr	r0, [pc, #204]	; (7e38 <run_p2p_demo+0x214>)
    7d6a:	009a      	lsls	r2, r3, #2
    7d6c:	18d1      	adds	r1, r2, r3
    7d6e:	0049      	lsls	r1, r1, #1
    7d70:	1841      	adds	r1, r0, r1
						snprintf(LCDText, sizeof(LCDText),(char*)"SW:%02d-%02x%02x%02x \nBUTTON1: Change node",select_ed,ConnectionTable[select_ed].Address[0],
    7d72:	788d      	ldrb	r5, [r1, #2]
    7d74:	9502      	str	r5, [sp, #8]
    7d76:	7849      	ldrb	r1, [r1, #1]
    7d78:	9101      	str	r1, [sp, #4]
    7d7a:	18d2      	adds	r2, r2, r3
    7d7c:	0052      	lsls	r2, r2, #1
    7d7e:	5c12      	ldrb	r2, [r2, r0]
    7d80:	9200      	str	r2, [sp, #0]
    7d82:	4a30      	ldr	r2, [pc, #192]	; (7e44 <run_p2p_demo+0x220>)
    7d84:	2141      	movs	r1, #65	; 0x41
    7d86:	4830      	ldr	r0, [pc, #192]	; (7e48 <run_p2p_demo+0x224>)
    7d88:	4d30      	ldr	r5, [pc, #192]	; (7e4c <run_p2p_demo+0x228>)
    7d8a:	47a8      	blx	r5
                        LCD_Update();
    7d8c:	4b30      	ldr	r3, [pc, #192]	; (7e50 <run_p2p_demo+0x22c>)
    7d8e:	4798      	blx	r3
					chk_sel_status = true;
    7d90:	2201      	movs	r2, #1
    7d92:	4b25      	ldr	r3, [pc, #148]	; (7e28 <run_p2p_demo+0x204>)
    7d94:	701a      	strb	r2, [r3, #0]
					while(chk_sel_status)
    7d96:	001d      	movs	r5, r3
    7d98:	782b      	ldrb	r3, [r5, #0]
    7d9a:	2b00      	cmp	r3, #0
    7d9c:	d0db      	beq.n	7d56 <run_p2p_demo+0x132>
						uint8_t switch_val = ButtonPressed();
    7d9e:	47a0      	blx	r4
						if(switch_val == 1)
    7da0:	2801      	cmp	r0, #1
    7da2:	d09a      	beq.n	7cda <run_p2p_demo+0xb6>
						else if(switch_val == 2)
    7da4:	2802      	cmp	r0, #2
    7da6:	d1f7      	bne.n	7d98 <run_p2p_demo+0x174>
							if (select_ed > conn_size-2)
    7da8:	4b20      	ldr	r3, [pc, #128]	; (7e2c <run_p2p_demo+0x208>)
    7daa:	781a      	ldrb	r2, [r3, #0]
    7dac:	4b29      	ldr	r3, [pc, #164]	; (7e54 <run_p2p_demo+0x230>)
    7dae:	781b      	ldrb	r3, [r3, #0]
    7db0:	3b02      	subs	r3, #2
    7db2:	429a      	cmp	r2, r3
    7db4:	dd14      	ble.n	7de0 <run_p2p_demo+0x1bc>
								select_ed = 0;
    7db6:	2200      	movs	r2, #0
    7db8:	4b1c      	ldr	r3, [pc, #112]	; (7e2c <run_p2p_demo+0x208>)
    7dba:	701a      	strb	r2, [r3, #0]
							chk_sel_status = false;
    7dbc:	2200      	movs	r2, #0
    7dbe:	4b1a      	ldr	r3, [pc, #104]	; (7e28 <run_p2p_demo+0x204>)
    7dc0:	701a      	strb	r2, [r3, #0]
    7dc2:	e7e9      	b.n	7d98 <run_p2p_demo+0x174>
								TxNum++;
    7dc4:	4a10      	ldr	r2, [pc, #64]	; (7e08 <run_p2p_demo+0x1e4>)
    7dc6:	7813      	ldrb	r3, [r2, #0]
    7dc8:	3301      	adds	r3, #1
    7dca:	7013      	strb	r3, [r2, #0]
								SwTimerStart (TxTimerId, MS_TO_US(5000), 0/*SW_TIMEOUT_RELATIVE*/, (void *)TxToutCallback, NULL);
    7dcc:	4b12      	ldr	r3, [pc, #72]	; (7e18 <run_p2p_demo+0x1f4>)
    7dce:	7818      	ldrb	r0, [r3, #0]
    7dd0:	2300      	movs	r3, #0
    7dd2:	9300      	str	r3, [sp, #0]
    7dd4:	4b11      	ldr	r3, [pc, #68]	; (7e1c <run_p2p_demo+0x1f8>)
    7dd6:	2200      	movs	r2, #0
    7dd8:	4911      	ldr	r1, [pc, #68]	; (7e20 <run_p2p_demo+0x1fc>)
    7dda:	4d12      	ldr	r5, [pc, #72]	; (7e24 <run_p2p_demo+0x200>)
    7ddc:	47a8      	blx	r5
    7dde:	e7b2      	b.n	7d46 <run_p2p_demo+0x122>
								select_ed = select_ed+1;
    7de0:	3201      	adds	r2, #1
    7de2:	4b12      	ldr	r3, [pc, #72]	; (7e2c <run_p2p_demo+0x208>)
    7de4:	701a      	strb	r2, [r3, #0]
    7de6:	e7e9      	b.n	7dbc <run_p2p_demo+0x198>
    7de8:	00007a79 	.word	0x00007a79
    7dec:	0000bed1 	.word	0x0000bed1
    7df0:	20002132 	.word	0x20002132
    7df4:	20000302 	.word	0x20000302
    7df8:	20000304 	.word	0x20000304
    7dfc:	00007bf1 	.word	0x00007bf1
    7e00:	0000ad1d 	.word	0x0000ad1d
    7e04:	00007a55 	.word	0x00007a55
    7e08:	20000301 	.word	0x20000301
    7e0c:	20000300 	.word	0x20000300
    7e10:	000079f9 	.word	0x000079f9
    7e14:	00007901 	.word	0x00007901
    7e18:	20000305 	.word	0x20000305
    7e1c:	00007bd1 	.word	0x00007bd1
    7e20:	004c4b40 	.word	0x004c4b40
    7e24:	0000cd65 	.word	0x0000cd65
    7e28:	20000015 	.word	0x20000015
    7e2c:	20002131 	.word	0x20002131
    7e30:	20002130 	.word	0x20002130
    7e34:	20000303 	.word	0x20000303
    7e38:	2000280c 	.word	0x2000280c
    7e3c:	00007a31 	.word	0x00007a31
    7e40:	00008189 	.word	0x00008189
    7e44:	000174a8 	.word	0x000174a8
    7e48:	20002134 	.word	0x20002134
    7e4c:	00015ee9 	.word	0x00015ee9
    7e50:	000081a5 	.word	0x000081a5
    7e54:	20002865 	.word	0x20002865

00007e58 <ReceivedDataIndication>:

void ReceivedDataIndication (RECEIVED_MESSAGE *ind)
{
    7e58:	b510      	push	{r4, lr}
    /*******************************************************************/
    // If a packet has been received, handle the information available
    // in rxMessage.
    /*******************************************************************/
	if ((myPANID.v[1] == ind->SourcePANID.v[1]) && (myPANID.v[0] == ind->SourcePANID.v[0]))
    7e5a:	4b0e      	ldr	r3, [pc, #56]	; (7e94 <ReceivedDataIndication+0x3c>)
    7e5c:	881a      	ldrh	r2, [r3, #0]
    7e5e:	8843      	ldrh	r3, [r0, #2]
    7e60:	429a      	cmp	r2, r3
    7e62:	d005      	beq.n	7e70 <ReceivedDataIndication+0x18>
		LED_Toggle(LED0);
		DemoOutput_Instruction();
	}
	else
	{
		printf("Packet received from other Source PAN ID : 0x%x%x\r\n",ind->SourcePANID.v[1],ind->SourcePANID.v[0]);
    7e64:	7882      	ldrb	r2, [r0, #2]
    7e66:	78c1      	ldrb	r1, [r0, #3]
    7e68:	480b      	ldr	r0, [pc, #44]	; (7e98 <ReceivedDataIndication+0x40>)
    7e6a:	4b0c      	ldr	r3, [pc, #48]	; (7e9c <ReceivedDataIndication+0x44>)
    7e6c:	4798      	blx	r3
	}
}
    7e6e:	bd10      	pop	{r4, pc}
		DemoOutput_HandleMessage();
    7e70:	4b0b      	ldr	r3, [pc, #44]	; (7ea0 <ReceivedDataIndication+0x48>)
    7e72:	4798      	blx	r3
		DemoOutput_UpdateTxRx(TxNum, ++RxNum);
    7e74:	4b0b      	ldr	r3, [pc, #44]	; (7ea4 <ReceivedDataIndication+0x4c>)
    7e76:	7818      	ldrb	r0, [r3, #0]
    7e78:	4b0b      	ldr	r3, [pc, #44]	; (7ea8 <ReceivedDataIndication+0x50>)
    7e7a:	7819      	ldrb	r1, [r3, #0]
    7e7c:	3101      	adds	r1, #1
    7e7e:	b2c9      	uxtb	r1, r1
    7e80:	7019      	strb	r1, [r3, #0]
    7e82:	4b0a      	ldr	r3, [pc, #40]	; (7eac <ReceivedDataIndication+0x54>)
    7e84:	4798      	blx	r3
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    7e86:	2280      	movs	r2, #128	; 0x80
    7e88:	0312      	lsls	r2, r2, #12
    7e8a:	4b09      	ldr	r3, [pc, #36]	; (7eb0 <ReceivedDataIndication+0x58>)
    7e8c:	61da      	str	r2, [r3, #28]
		DemoOutput_Instruction();
    7e8e:	4b09      	ldr	r3, [pc, #36]	; (7eb4 <ReceivedDataIndication+0x5c>)
    7e90:	4798      	blx	r3
    7e92:	e7ec      	b.n	7e6e <ReceivedDataIndication+0x16>
    7e94:	2000285c 	.word	0x2000285c
    7e98:	0001744c 	.word	0x0001744c
    7e9c:	00015b79 	.word	0x00015b79
    7ea0:	00007919 	.word	0x00007919
    7ea4:	20000301 	.word	0x20000301
    7ea8:	20000300 	.word	0x20000300
    7eac:	000079f9 	.word	0x000079f9
    7eb0:	40002800 	.word	0x40002800
    7eb4:	00007901 	.word	0x00007901

00007eb8 <Connection_Confirm>:
#endif // #if defined (ENABLE_CONSOLE)
}
#endif // #ifdef ENABLE_ACTIVE_SCAN	

static void Connection_Confirm(miwi_status_t status)
{
    7eb8:	b570      	push	{r4, r5, r6, lr}
    7eba:	0005      	movs	r5, r0
#if defined (ENABLE_CONSOLE)	
	printf("\r\nConnect Operation Status: "); 
    7ebc:	4803      	ldr	r0, [pc, #12]	; (7ecc <Connection_Confirm+0x14>)
    7ebe:	4c04      	ldr	r4, [pc, #16]	; (7ed0 <Connection_Confirm+0x18>)
    7ec0:	47a0      	blx	r4
	printf("%d\n",status);
    7ec2:	0029      	movs	r1, r5
    7ec4:	4803      	ldr	r0, [pc, #12]	; (7ed4 <Connection_Confirm+0x1c>)
    7ec6:	47a0      	blx	r4
#endif // #if defined (ENABLE_CONSOLE)	
}
    7ec8:	bd70      	pop	{r4, r5, r6, pc}
    7eca:	46c0      	nop			; (mov r8, r8)
    7ecc:	000174d4 	.word	0x000174d4
    7ed0:	00015b79 	.word	0x00015b79
    7ed4:	000174f4 	.word	0x000174f4

00007ed8 <Scan_Confirm>:
{
    7ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
    7eda:	46de      	mov	lr, fp
    7edc:	4657      	mov	r7, sl
    7ede:	464e      	mov	r6, r9
    7ee0:	4645      	mov	r5, r8
    7ee2:	b5e0      	push	{r5, r6, r7, lr}
    7ee4:	b083      	sub	sp, #12
    7ee6:	0003      	movs	r3, r0
    7ee8:	9001      	str	r0, [sp, #4]
    7eea:	468b      	mov	fp, r1
	for(uint8_t count =0; count <= ActiveScanResultCount-1; count++ )
    7eec:	3b01      	subs	r3, #1
    7eee:	4699      	mov	r9, r3
    7ef0:	d440      	bmi.n	7f74 <Scan_Confirm+0x9c>
    7ef2:	2400      	movs	r4, #0
    7ef4:	2300      	movs	r3, #0
    7ef6:	4698      	mov	r8, r3
		printf("\nID\tDevice Address \t\tCapability \tPAN ID \tChannel \n");
    7ef8:	4b24      	ldr	r3, [pc, #144]	; (7f8c <Scan_Confirm+0xb4>)
    7efa:	469a      	mov	sl, r3
		printf("%02x",count+1);
    7efc:	464b      	mov	r3, r9
    7efe:	9300      	str	r3, [sp, #0]
    7f00:	e01f      	b.n	7f42 <Scan_Confirm+0x6a>
		printf("\t");
    7f02:	2009      	movs	r0, #9
    7f04:	4e22      	ldr	r6, [pc, #136]	; (7f90 <Scan_Confirm+0xb8>)
    7f06:	47b0      	blx	r6
		printf("%02x",(ActiveScanResult[count].Capability.Val));	
    7f08:	464b      	mov	r3, r9
    7f0a:	7b99      	ldrb	r1, [r3, #14]
    7f0c:	4c21      	ldr	r4, [pc, #132]	; (7f94 <Scan_Confirm+0xbc>)
    7f0e:	0020      	movs	r0, r4
    7f10:	4d21      	ldr	r5, [pc, #132]	; (7f98 <Scan_Confirm+0xc0>)
    7f12:	47a8      	blx	r5
		printf("\t\t");
    7f14:	4821      	ldr	r0, [pc, #132]	; (7f9c <Scan_Confirm+0xc4>)
    7f16:	47a8      	blx	r5
		printf("%02x",(ActiveScanResult[count].PANID.Val));
    7f18:	464b      	mov	r3, r9
    7f1a:	8959      	ldrh	r1, [r3, #10]
    7f1c:	0020      	movs	r0, r4
    7f1e:	47a8      	blx	r5
		printf("\t");
    7f20:	2009      	movs	r0, #9
    7f22:	47b0      	blx	r6
		printf("%02x",ActiveScanResult[count].Channel);
    7f24:	464b      	mov	r3, r9
    7f26:	7819      	ldrb	r1, [r3, #0]
    7f28:	0020      	movs	r0, r4
    7f2a:	47a8      	blx	r5
		printf("\r\n");
    7f2c:	481c      	ldr	r0, [pc, #112]	; (7fa0 <Scan_Confirm+0xc8>)
    7f2e:	4b17      	ldr	r3, [pc, #92]	; (7f8c <Scan_Confirm+0xb4>)
    7f30:	4798      	blx	r3
	for(uint8_t count =0; count <= ActiveScanResultCount-1; count++ )
    7f32:	4643      	mov	r3, r8
    7f34:	3301      	adds	r3, #1
    7f36:	b2db      	uxtb	r3, r3
    7f38:	4698      	mov	r8, r3
    7f3a:	001c      	movs	r4, r3
    7f3c:	9b00      	ldr	r3, [sp, #0]
    7f3e:	4598      	cmp	r8, r3
    7f40:	dc18      	bgt.n	7f74 <Scan_Confirm+0x9c>
		printf("\nID\tDevice Address \t\tCapability \tPAN ID \tChannel \n");
    7f42:	4818      	ldr	r0, [pc, #96]	; (7fa4 <Scan_Confirm+0xcc>)
    7f44:	47d0      	blx	sl
		printf("%02x",count+1);
    7f46:	1c61      	adds	r1, r4, #1
    7f48:	4812      	ldr	r0, [pc, #72]	; (7f94 <Scan_Confirm+0xbc>)
    7f4a:	4b13      	ldr	r3, [pc, #76]	; (7f98 <Scan_Confirm+0xc0>)
    7f4c:	4798      	blx	r3
		printf("\t");
    7f4e:	2009      	movs	r0, #9
    7f50:	4b0f      	ldr	r3, [pc, #60]	; (7f90 <Scan_Confirm+0xb8>)
    7f52:	4798      	blx	r3
				printf("%02x",ActiveScanResult[count].Address[MY_ADDRESS_LENGTH-1-j] );
    7f54:	4643      	mov	r3, r8
    7f56:	011b      	lsls	r3, r3, #4
    7f58:	445b      	add	r3, fp
    7f5a:	4699      	mov	r9, r3
    7f5c:	001c      	movs	r4, r3
    7f5e:	3408      	adds	r4, #8
    7f60:	001f      	movs	r7, r3
    7f62:	4e0c      	ldr	r6, [pc, #48]	; (7f94 <Scan_Confirm+0xbc>)
    7f64:	4d0c      	ldr	r5, [pc, #48]	; (7f98 <Scan_Confirm+0xc0>)
    7f66:	7821      	ldrb	r1, [r4, #0]
    7f68:	0030      	movs	r0, r6
    7f6a:	47a8      	blx	r5
    7f6c:	3c01      	subs	r4, #1
		for(uint8_t j = 0; j < 8; j++)
    7f6e:	42a7      	cmp	r7, r4
    7f70:	d1f9      	bne.n	7f66 <Scan_Confirm+0x8e>
    7f72:	e7c6      	b.n	7f02 <Scan_Confirm+0x2a>
	printf("\r\n Scan Operation Status: %d device found",ActiveScanResultCount); 
    7f74:	9901      	ldr	r1, [sp, #4]
    7f76:	480c      	ldr	r0, [pc, #48]	; (7fa8 <Scan_Confirm+0xd0>)
    7f78:	4b07      	ldr	r3, [pc, #28]	; (7f98 <Scan_Confirm+0xc0>)
    7f7a:	4798      	blx	r3
}
    7f7c:	b003      	add	sp, #12
    7f7e:	bc3c      	pop	{r2, r3, r4, r5}
    7f80:	4690      	mov	r8, r2
    7f82:	4699      	mov	r9, r3
    7f84:	46a2      	mov	sl, r4
    7f86:	46ab      	mov	fp, r5
    7f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7f8a:	46c0      	nop			; (mov r8, r8)
    7f8c:	00015c95 	.word	0x00015c95
    7f90:	00015bad 	.word	0x00015bad
    7f94:	000173e8 	.word	0x000173e8
    7f98:	00015b79 	.word	0x00015b79
    7f9c:	0001752c 	.word	0x0001752c
    7fa0:	00017aac 	.word	0x00017aac
    7fa4:	000174f8 	.word	0x000174f8
    7fa8:	00017530 	.word	0x00017530

00007fac <Initialize_Demo>:

bool Initialize_Demo(bool freezer_enable)
{
    7fac:	b570      	push	{r4, r5, r6, lr}
    7fae:	b086      	sub	sp, #24
    7fb0:	0004      	movs	r4, r0
    uint8_t i;

	bool invalidIEEEAddrFlag = false;
	uint64_t invalidIEEEAddr;

    MiApp_SubscribeDataIndicationCallback(ReceivedDataIndication);
    7fb2:	4855      	ldr	r0, [pc, #340]	; (8108 <Initialize_Demo+0x15c>)
    7fb4:	4b55      	ldr	r3, [pc, #340]	; (810c <Initialize_Demo+0x160>)
    7fb6:	4798      	blx	r3

	#ifdef ENABLE_SLEEP_FEATURE
		sm_init();
	#endif

    if (freezer_enable)
    7fb8:	2c00      	cmp	r4, #0
    7fba:	d033      	beq.n	8024 <Initialize_Demo+0x78>
    {
        MiApp_ProtocolInit(NULL, NULL);
    7fbc:	2100      	movs	r1, #0
    7fbe:	2000      	movs	r0, #0
    7fc0:	4b53      	ldr	r3, [pc, #332]	; (8110 <Initialize_Demo+0x164>)
    7fc2:	4798      	blx	r3
		srand(PHY_RandomReq());
    7fc4:	4b53      	ldr	r3, [pc, #332]	; (8114 <Initialize_Demo+0x168>)
    7fc6:	4798      	blx	r3
    7fc8:	4b53      	ldr	r3, [pc, #332]	; (8118 <Initialize_Demo+0x16c>)
    7fca:	4798      	blx	r3
		/* Check if a valid IEEE address is available.
		0x0000000000000000 and 0xFFFFFFFFFFFFFFFF is presumed to be invalid */
		/* Check if IEEE address is 0x0000000000000000 */
		memset((uint8_t *)&invalidIEEEAddr, 0x00, LONG_ADDR_LEN);
    7fcc:	2200      	movs	r2, #0
    7fce:	2300      	movs	r3, #0
    7fd0:	9204      	str	r2, [sp, #16]
    7fd2:	9305      	str	r3, [sp, #20]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    7fd4:	4e51      	ldr	r6, [pc, #324]	; (811c <Initialize_Demo+0x170>)
    7fd6:	3208      	adds	r2, #8
    7fd8:	0031      	movs	r1, r6
    7fda:	a804      	add	r0, sp, #16
    7fdc:	4d50      	ldr	r5, [pc, #320]	; (8120 <Initialize_Demo+0x174>)
    7fde:	47a8      	blx	r5
    7fe0:	0004      	movs	r4, r0
		{
			invalidIEEEAddrFlag = true;
		}

		/* Check if IEEE address is 0xFFFFFFFFFFFFFFFF */
		memset((uint8_t *)&invalidIEEEAddr, 0xFF, LONG_ADDR_LEN);
    7fe2:	2201      	movs	r2, #1
    7fe4:	4252      	negs	r2, r2
    7fe6:	17d3      	asrs	r3, r2, #31
    7fe8:	9204      	str	r2, [sp, #16]
    7fea:	9305      	str	r3, [sp, #20]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    7fec:	3209      	adds	r2, #9
    7fee:	0031      	movs	r1, r6
    7ff0:	a804      	add	r0, sp, #16
    7ff2:	47a8      	blx	r5
    7ff4:	2800      	cmp	r0, #0
    7ff6:	d001      	beq.n	7ffc <Initialize_Demo+0x50>
		{
			invalidIEEEAddrFlag = true;
		}
		
		if (invalidIEEEAddrFlag)
    7ff8:	2c00      	cmp	r4, #0
    7ffa:	d108      	bne.n	800e <Initialize_Demo+0x62>
    7ffc:	4c47      	ldr	r4, [pc, #284]	; (811c <Initialize_Demo+0x170>)
    7ffe:	0026      	movs	r6, r4
    8000:	3608      	adds	r6, #8
			 * In production code this can be omitted.
			 */
			uint8_t* peui64 = (uint8_t *)&myLongAddress;
			for(i = 0; i<MY_ADDRESS_LENGTH; i++)
			{
				*peui64++ = (uint8_t)rand();
    8002:	4d48      	ldr	r5, [pc, #288]	; (8124 <Initialize_Demo+0x178>)
    8004:	47a8      	blx	r5
    8006:	7020      	strb	r0, [r4, #0]
    8008:	3401      	adds	r4, #1
			for(i = 0; i<MY_ADDRESS_LENGTH; i++)
    800a:	42b4      	cmp	r4, r6
    800c:	d1fa      	bne.n	8004 <Initialize_Demo+0x58>
			}
		}
		PHY_SetIEEEAddr((uint8_t *)&myLongAddress);
    800e:	4843      	ldr	r0, [pc, #268]	; (811c <Initialize_Demo+0x170>)
    8010:	4b45      	ldr	r3, [pc, #276]	; (8128 <Initialize_Demo+0x17c>)
    8012:	4798      	blx	r3
        #if defined(PROTOCOL_P2P)  
            DemoOutput_Instruction();
    8014:	4b45      	ldr	r3, [pc, #276]	; (812c <Initialize_Demo+0x180>)
    8016:	4798      	blx	r3
        #endif    
        
    }
	
	/* Create SW timer for transmission timeout */
	SwTimerCreate(&TxTimerId);
    8018:	4845      	ldr	r0, [pc, #276]	; (8130 <Initialize_Demo+0x184>)
    801a:	4b46      	ldr	r3, [pc, #280]	; (8134 <Initialize_Demo+0x188>)
    801c:	4798      	blx	r3
	
	return true;
}
    801e:	2001      	movs	r0, #1
    8020:	b006      	add	sp, #24
    8022:	bd70      	pop	{r4, r5, r6, pc}
		port_base->OUTSET.reg = pin_mask;
    8024:	2280      	movs	r2, #128	; 0x80
    8026:	0312      	lsls	r2, r2, #12
    8028:	4b43      	ldr	r3, [pc, #268]	; (8138 <Initialize_Demo+0x18c>)
    802a:	619a      	str	r2, [r3, #24]
        MiApp_ProtocolInit(NULL, NULL);
    802c:	2100      	movs	r1, #0
    802e:	2000      	movs	r0, #0
    8030:	4b37      	ldr	r3, [pc, #220]	; (8110 <Initialize_Demo+0x164>)
    8032:	4798      	blx	r3
		srand(PHY_RandomReq());
    8034:	4b37      	ldr	r3, [pc, #220]	; (8114 <Initialize_Demo+0x168>)
    8036:	4798      	blx	r3
    8038:	4b37      	ldr	r3, [pc, #220]	; (8118 <Initialize_Demo+0x16c>)
    803a:	4798      	blx	r3
		memset((uint8_t *)&invalidIEEEAddr, 0x00, LONG_ADDR_LEN);
    803c:	2200      	movs	r2, #0
    803e:	2300      	movs	r3, #0
    8040:	9204      	str	r2, [sp, #16]
    8042:	9305      	str	r3, [sp, #20]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    8044:	4e35      	ldr	r6, [pc, #212]	; (811c <Initialize_Demo+0x170>)
    8046:	3208      	adds	r2, #8
    8048:	0031      	movs	r1, r6
    804a:	a804      	add	r0, sp, #16
    804c:	4d34      	ldr	r5, [pc, #208]	; (8120 <Initialize_Demo+0x174>)
    804e:	47a8      	blx	r5
    8050:	0004      	movs	r4, r0
		memset((uint8_t *)&invalidIEEEAddr, 0xFF, LONG_ADDR_LEN);
    8052:	2201      	movs	r2, #1
    8054:	4252      	negs	r2, r2
    8056:	17d3      	asrs	r3, r2, #31
    8058:	9204      	str	r2, [sp, #16]
    805a:	9305      	str	r3, [sp, #20]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    805c:	3209      	adds	r2, #9
    805e:	0031      	movs	r1, r6
    8060:	a804      	add	r0, sp, #16
    8062:	47a8      	blx	r5
    8064:	2800      	cmp	r0, #0
    8066:	d036      	beq.n	80d6 <Initialize_Demo+0x12a>
		if (invalidIEEEAddrFlag)
    8068:	2c00      	cmp	r4, #0
    806a:	d034      	beq.n	80d6 <Initialize_Demo+0x12a>
		PHY_SetIEEEAddr((uint8_t *)&myLongAddress);
    806c:	482b      	ldr	r0, [pc, #172]	; (811c <Initialize_Demo+0x170>)
    806e:	4b2e      	ldr	r3, [pc, #184]	; (8128 <Initialize_Demo+0x17c>)
    8070:	4798      	blx	r3
        MiApp_ConnectionMode(ENABLE_ALL_CONN);
    8072:	2000      	movs	r0, #0
    8074:	4b31      	ldr	r3, [pc, #196]	; (813c <Initialize_Demo+0x190>)
    8076:	4798      	blx	r3
        DemoOutput_Channel(myChannel, 0);
    8078:	4c31      	ldr	r4, [pc, #196]	; (8140 <Initialize_Demo+0x194>)
    807a:	7820      	ldrb	r0, [r4, #0]
    807c:	2100      	movs	r1, #0
    807e:	4b31      	ldr	r3, [pc, #196]	; (8144 <Initialize_Demo+0x198>)
    8080:	4798      	blx	r3
		MiApp_SearchConnection(5, 0xFFFFFFFF, Scan_Confirm);
    8082:	4a31      	ldr	r2, [pc, #196]	; (8148 <Initialize_Demo+0x19c>)
    8084:	2101      	movs	r1, #1
    8086:	4249      	negs	r1, r1
    8088:	2005      	movs	r0, #5
    808a:	4b30      	ldr	r3, [pc, #192]	; (814c <Initialize_Demo+0x1a0>)
    808c:	4798      	blx	r3
        if( MiApp_Set(CHANNEL, &myChannel) == false )
    808e:	0021      	movs	r1, r4
    8090:	2000      	movs	r0, #0
    8092:	4b2f      	ldr	r3, [pc, #188]	; (8150 <Initialize_Demo+0x1a4>)
    8094:	4798      	blx	r3
    8096:	2800      	cmp	r0, #0
    8098:	d027      	beq.n	80ea <Initialize_Demo+0x13e>
		uint16_t broadcastAddress = 0xFFFF;
    809a:	220e      	movs	r2, #14
    809c:	446a      	add	r2, sp
    809e:	2301      	movs	r3, #1
    80a0:	425b      	negs	r3, r3
    80a2:	8013      	strh	r3, [r2, #0]
		i = MiApp_EstablishConnection(myChannel, 0, (uint8_t*)&broadcastAddress, 0, Connection_Confirm);
    80a4:	4b26      	ldr	r3, [pc, #152]	; (8140 <Initialize_Demo+0x194>)
    80a6:	7818      	ldrb	r0, [r3, #0]
    80a8:	4b2a      	ldr	r3, [pc, #168]	; (8154 <Initialize_Demo+0x1a8>)
    80aa:	9300      	str	r3, [sp, #0]
    80ac:	2300      	movs	r3, #0
    80ae:	2100      	movs	r1, #0
    80b0:	4c29      	ldr	r4, [pc, #164]	; (8158 <Initialize_Demo+0x1ac>)
    80b2:	47a0      	blx	r4
        if( i != 0xFF )
    80b4:	28ff      	cmp	r0, #255	; 0xff
    80b6:	d01d      	beq.n	80f4 <Initialize_Demo+0x148>
            DemoOutput_Channel(myChannel, 1);
    80b8:	4b21      	ldr	r3, [pc, #132]	; (8140 <Initialize_Demo+0x194>)
    80ba:	7818      	ldrb	r0, [r3, #0]
    80bc:	2101      	movs	r1, #1
    80be:	4b21      	ldr	r3, [pc, #132]	; (8144 <Initialize_Demo+0x198>)
    80c0:	4798      	blx	r3
			DumpConnection(0xFF);
    80c2:	20ff      	movs	r0, #255	; 0xff
    80c4:	4b25      	ldr	r3, [pc, #148]	; (815c <Initialize_Demo+0x1b0>)
    80c6:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    80c8:	2280      	movs	r2, #128	; 0x80
    80ca:	0312      	lsls	r2, r2, #12
    80cc:	4b1a      	ldr	r3, [pc, #104]	; (8138 <Initialize_Demo+0x18c>)
    80ce:	615a      	str	r2, [r3, #20]
            DemoOutput_Instruction();
    80d0:	4b16      	ldr	r3, [pc, #88]	; (812c <Initialize_Demo+0x180>)
    80d2:	4798      	blx	r3
    80d4:	e7a0      	b.n	8018 <Initialize_Demo+0x6c>
    80d6:	4c11      	ldr	r4, [pc, #68]	; (811c <Initialize_Demo+0x170>)
    80d8:	0026      	movs	r6, r4
    80da:	3608      	adds	r6, #8
				*peui64++ = (uint8_t)rand();
    80dc:	4d11      	ldr	r5, [pc, #68]	; (8124 <Initialize_Demo+0x178>)
    80de:	47a8      	blx	r5
    80e0:	7020      	strb	r0, [r4, #0]
    80e2:	3401      	adds	r4, #1
			for(i = 0; i<MY_ADDRESS_LENGTH; i++)
    80e4:	42b4      	cmp	r4, r6
    80e6:	d1fa      	bne.n	80de <Initialize_Demo+0x132>
    80e8:	e7c0      	b.n	806c <Initialize_Demo+0xc0>
            DemoOutput_ChannelError(myChannel);
    80ea:	4b15      	ldr	r3, [pc, #84]	; (8140 <Initialize_Demo+0x194>)
    80ec:	7818      	ldrb	r0, [r3, #0]
    80ee:	4b1c      	ldr	r3, [pc, #112]	; (8160 <Initialize_Demo+0x1b4>)
    80f0:	4798      	blx	r3
    80f2:	e7d2      	b.n	809a <Initialize_Demo+0xee>
            MiApp_StartConnection(START_CONN_DIRECT, 10, (1L << myChannel), Connection_Confirm);
    80f4:	4b12      	ldr	r3, [pc, #72]	; (8140 <Initialize_Demo+0x194>)
    80f6:	781b      	ldrb	r3, [r3, #0]
    80f8:	2201      	movs	r2, #1
    80fa:	409a      	lsls	r2, r3
    80fc:	4b15      	ldr	r3, [pc, #84]	; (8154 <Initialize_Demo+0x1a8>)
    80fe:	210a      	movs	r1, #10
    8100:	2000      	movs	r0, #0
    8102:	4c18      	ldr	r4, [pc, #96]	; (8164 <Initialize_Demo+0x1b8>)
    8104:	47a0      	blx	r4
    8106:	e7dc      	b.n	80c2 <Initialize_Demo+0x116>
    8108:	00007e59 	.word	0x00007e59
    810c:	0000b2a9 	.word	0x0000b2a9
    8110:	0000ae75 	.word	0x0000ae75
    8114:	0000aa79 	.word	0x0000aa79
    8118:	00015ca9 	.word	0x00015ca9
    811c:	20000020 	.word	0x20000020
    8120:	000155a1 	.word	0x000155a1
    8124:	00015d05 	.word	0x00015d05
    8128:	0000aa9d 	.word	0x0000aa9d
    812c:	00007901 	.word	0x00007901
    8130:	20000305 	.word	0x20000305
    8134:	0000cd31 	.word	0x0000cd31
    8138:	40002800 	.word	0x40002800
    813c:	0000b289 	.word	0x0000b289
    8140:	20000019 	.word	0x20000019
    8144:	00007899 	.word	0x00007899
    8148:	00007ed9 	.word	0x00007ed9
    814c:	0000bd59 	.word	0x0000bd59
    8150:	0000ae51 	.word	0x0000ae51
    8154:	00007eb9 	.word	0x00007eb9
    8158:	0000bb65 	.word	0x0000bb65
    815c:	0000afc1 	.word	0x0000afc1
    8160:	00007a05 	.word	0x00007a05
    8164:	0000af21 	.word	0x0000af21

00008168 <Run_Demo>:


void Run_Demo(void)
{
    8168:	b510      	push	{r4, lr}
    P2PTasks();
    816a:	4b02      	ldr	r3, [pc, #8]	; (8174 <Run_Demo+0xc>)
    816c:	4798      	blx	r3
    run_p2p_demo();   
    816e:	4b02      	ldr	r3, [pc, #8]	; (8178 <Run_Demo+0x10>)
    8170:	4798      	blx	r3
    8172:	bd10      	pop	{r4, pc}
    8174:	0000b411 	.word	0x0000b411
    8178:	00007c25 	.word	0x00007c25

0000817c <LCD_Initialize>:
* Overview:         Configure the LCD
*
* Note:             None
********************************************************************/
void LCD_Initialize(void)
{
    817c:	b510      	push	{r4, lr}
	gfx_mono_init();
    817e:	4b01      	ldr	r3, [pc, #4]	; (8184 <LCD_Initialize+0x8>)
    8180:	4798      	blx	r3
}    
    8182:	bd10      	pop	{r4, pc}
    8184:	000049e5 	.word	0x000049e5

00008188 <LCD_Erase>:
* Overview:         Clears LCD display
*
* Note:             None
********************************************************************/
void LCD_Erase(void)
{
    8188:	b510      	push	{r4, lr}
    818a:	b082      	sub	sp, #8
    /* Clear screen */
	gfx_mono_draw_filled_rect(0, 0, GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_HEIGHT,
    818c:	2300      	movs	r3, #0
    818e:	9300      	str	r3, [sp, #0]
    8190:	3320      	adds	r3, #32
    8192:	2280      	movs	r2, #128	; 0x80
    8194:	2100      	movs	r1, #0
    8196:	2000      	movs	r0, #0
    8198:	4c01      	ldr	r4, [pc, #4]	; (81a0 <LCD_Erase+0x18>)
    819a:	47a0      	blx	r4
	GFX_PIXEL_CLR);
}
    819c:	b002      	add	sp, #8
    819e:	bd10      	pop	{r4, pc}
    81a0:	0000483d 	.word	0x0000483d

000081a4 <LCD_Update>:
* Overview:         LCD displays message
*
* Note:             None
********************************************************************/
void LCD_Update(void)
{
    81a4:	b510      	push	{r4, lr}
	gfx_mono_draw_string(LCDText, 0, 0, &sysfont);
    81a6:	4b03      	ldr	r3, [pc, #12]	; (81b4 <LCD_Update+0x10>)
    81a8:	2200      	movs	r2, #0
    81aa:	2100      	movs	r1, #0
    81ac:	4802      	ldr	r0, [pc, #8]	; (81b8 <LCD_Update+0x14>)
    81ae:	4c03      	ldr	r4, [pc, #12]	; (81bc <LCD_Update+0x18>)
    81b0:	47a0      	blx	r4
}
    81b2:	bd10      	pop	{r4, pc}
    81b4:	20000008 	.word	0x20000008
    81b8:	20002134 	.word	0x20002134
    81bc:	00004941 	.word	0x00004941

000081c0 <LCDTRXCount>:
 *
 * Note:            This routine is only effective if Explorer16 or
 *                  PIC18 Explorer demo boards are used
 ********************************************************************/
void LCDTRXCount(uint8_t txCount, uint8_t rxCount)
{
    81c0:	b570      	push	{r4, r5, r6, lr}
    81c2:	b082      	sub	sp, #8
    81c4:	0005      	movs	r5, r0
    81c6:	000e      	movs	r6, r1
	/* Clear screen */
	gfx_mono_draw_filled_rect(0, 0, GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_HEIGHT, 
    81c8:	2300      	movs	r3, #0
    81ca:	9300      	str	r3, [sp, #0]
    81cc:	3320      	adds	r3, #32
    81ce:	2280      	movs	r2, #128	; 0x80
    81d0:	2100      	movs	r1, #0
    81d2:	2000      	movs	r0, #0
    81d4:	4c0a      	ldr	r4, [pc, #40]	; (8200 <LCDTRXCount+0x40>)
    81d6:	47a0      	blx	r4
	GFX_PIXEL_CLR);
    snprintf(LCDText, sizeof(LCDText), "TX Messages: %d \nRX Messages: %d", txCount, rxCount);
    81d8:	4c0a      	ldr	r4, [pc, #40]	; (8204 <LCDTRXCount+0x44>)
    81da:	9600      	str	r6, [sp, #0]
    81dc:	002b      	movs	r3, r5
    81de:	4a0a      	ldr	r2, [pc, #40]	; (8208 <LCDTRXCount+0x48>)
    81e0:	2141      	movs	r1, #65	; 0x41
    81e2:	0020      	movs	r0, r4
    81e4:	4d09      	ldr	r5, [pc, #36]	; (820c <LCDTRXCount+0x4c>)
    81e6:	47a8      	blx	r5
    gfx_mono_draw_string(LCDText, 0, 0, &sysfont); 
    81e8:	4b09      	ldr	r3, [pc, #36]	; (8210 <LCDTRXCount+0x50>)
    81ea:	2200      	movs	r2, #0
    81ec:	2100      	movs	r1, #0
    81ee:	0020      	movs	r0, r4
    81f0:	4c08      	ldr	r4, [pc, #32]	; (8214 <LCDTRXCount+0x54>)
    81f2:	47a0      	blx	r4
	delay_ms(200);
    81f4:	20c8      	movs	r0, #200	; 0xc8
    81f6:	4b08      	ldr	r3, [pc, #32]	; (8218 <LCDTRXCount+0x58>)
    81f8:	4798      	blx	r3
}
    81fa:	b002      	add	sp, #8
    81fc:	bd70      	pop	{r4, r5, r6, pc}
    81fe:	46c0      	nop			; (mov r8, r8)
    8200:	0000483d 	.word	0x0000483d
    8204:	20002134 	.word	0x20002134
    8208:	0001755c 	.word	0x0001755c
    820c:	00015ee9 	.word	0x00015ee9
    8210:	20000008 	.word	0x20000008
    8214:	00004941 	.word	0x00004941
    8218:	0000471d 	.word	0x0000471d

0000821c <LCDDisplay>:
 *
 * Note:            This routine is only effective if Explorer16 or
 *                  PIC18 Explorer demo boards are used
 ********************************************************************/
void LCDDisplay(char *text, uint8_t value, bool delay)
{
    821c:	b5f0      	push	{r4, r5, r6, r7, lr}
    821e:	b083      	sub	sp, #12
    8220:	0005      	movs	r5, r0
    8222:	000c      	movs	r4, r1
    8224:	0016      	movs	r6, r2
	/* Clear screen */	
	gfx_mono_draw_filled_rect(0, 0, GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_HEIGHT,
    8226:	2300      	movs	r3, #0
    8228:	9300      	str	r3, [sp, #0]
    822a:	3320      	adds	r3, #32
    822c:	2280      	movs	r2, #128	; 0x80
    822e:	2100      	movs	r1, #0
    8230:	2000      	movs	r0, #0
    8232:	4f13      	ldr	r7, [pc, #76]	; (8280 <LCDDisplay+0x64>)
    8234:	47b8      	blx	r7
			GFX_PIXEL_CLR);    

    snprintf(LCDText, sizeof(LCDText), text);
    8236:	002a      	movs	r2, r5
    8238:	2141      	movs	r1, #65	; 0x41
    823a:	4812      	ldr	r0, [pc, #72]	; (8284 <LCDDisplay+0x68>)
    823c:	4b12      	ldr	r3, [pc, #72]	; (8288 <LCDDisplay+0x6c>)
    823e:	4798      	blx	r3

    if (value)
    8240:	2c00      	cmp	r4, #0
    8242:	d00d      	beq.n	8260 <LCDDisplay+0x44>
    8244:	2000      	movs	r0, #0
    {
		uint8_t char_count = 0;
		do {
           ++char_count;
    8246:	3001      	adds	r0, #1
    8248:	b2c0      	uxtb	r0, r0
		} while (*(++text));
    824a:	3501      	adds	r5, #1
    824c:	782b      	ldrb	r3, [r5, #0]
    824e:	2b00      	cmp	r3, #0
    8250:	d1f9      	bne.n	8246 <LCDDisplay+0x2a>
		
	    snprintf(LCDText+char_count, sizeof(LCDText), "%d", value);
    8252:	4b0c      	ldr	r3, [pc, #48]	; (8284 <LCDDisplay+0x68>)
    8254:	18c0      	adds	r0, r0, r3
    8256:	0023      	movs	r3, r4
    8258:	4a0c      	ldr	r2, [pc, #48]	; (828c <LCDDisplay+0x70>)
    825a:	2141      	movs	r1, #65	; 0x41
    825c:	4c0a      	ldr	r4, [pc, #40]	; (8288 <LCDDisplay+0x6c>)
    825e:	47a0      	blx	r4
	}
	    
	gfx_mono_draw_string(LCDText, 0, 0, &sysfont);
    8260:	4b0b      	ldr	r3, [pc, #44]	; (8290 <LCDDisplay+0x74>)
    8262:	2200      	movs	r2, #0
    8264:	2100      	movs	r1, #0
    8266:	4807      	ldr	r0, [pc, #28]	; (8284 <LCDDisplay+0x68>)
    8268:	4c0a      	ldr	r4, [pc, #40]	; (8294 <LCDDisplay+0x78>)
    826a:	47a0      	blx	r4
	
	if(delay)
    826c:	2e00      	cmp	r6, #0
    826e:	d101      	bne.n	8274 <LCDDisplay+0x58>
	{
	  delay_s(2);
	}
}
    8270:	b003      	add	sp, #12
    8272:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  delay_s(2);
    8274:	20fa      	movs	r0, #250	; 0xfa
    8276:	00c0      	lsls	r0, r0, #3
    8278:	4b07      	ldr	r3, [pc, #28]	; (8298 <LCDDisplay+0x7c>)
    827a:	4798      	blx	r3
}
    827c:	e7f8      	b.n	8270 <LCDDisplay+0x54>
    827e:	46c0      	nop			; (mov r8, r8)
    8280:	0000483d 	.word	0x0000483d
    8284:	20002134 	.word	0x20002134
    8288:	00015ee9 	.word	0x00015ee9
    828c:	00017150 	.word	0x00017150
    8290:	20000008 	.word	0x20000008
    8294:	00004941 	.word	0x00004941
    8298:	0000471d 	.word	0x0000471d

0000829c <CompareData>:
     Otherwise it is the start address of the buffer that contains the data to compare with
    \param numberOfBytes The number of bytes to compare
    \note offset+numberOfBytes must be <= D_NV_SECTOR_SIZE (meaning sector crossing is not permitted)
*/
static bool CompareData(uint8_t sector, uint16_t offset, uint8_t *pBuffer, D_Nv_Size_t numberOfBytes)
{
    829c:	b5f0      	push	{r4, r5, r6, r7, lr}
    829e:	46c6      	mov	lr, r8
    82a0:	b500      	push	{lr}
    82a2:	b084      	sub	sp, #16
    82a4:	0014      	movs	r4, r2
    82a6:	001f      	movs	r7, r3
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    82a8:	4b29      	ldr	r3, [pc, #164]	; (8350 <CompareData+0xb4>)
    82aa:	18cb      	adds	r3, r1, r3
    82ac:	0340      	lsls	r0, r0, #13
    82ae:	181d      	adds	r5, r3, r0
  uint8_t  buffer[16U];

  assert(numberOfBytes);
    82b0:	2f00      	cmp	r7, #0
    82b2:	d01a      	beq.n	82ea <CompareData+0x4e>
  assert(address <= D_NV_MEMORY_END);
    82b4:	4b27      	ldr	r3, [pc, #156]	; (8354 <CompareData+0xb8>)
    82b6:	1e5a      	subs	r2, r3, #1
    82b8:	4295      	cmp	r5, r2
    82ba:	d81c      	bhi.n	82f6 <CompareData+0x5a>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    82bc:	197a      	adds	r2, r7, r5
    82be:	4293      	cmp	r3, r2
    82c0:	d31f      	bcc.n	8302 <CompareData+0x66>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    82c2:	19c9      	adds	r1, r1, r7
    82c4:	2380      	movs	r3, #128	; 0x80
    82c6:	019b      	lsls	r3, r3, #6
    82c8:	4299      	cmp	r1, r3
    82ca:	d820      	bhi.n	830e <CompareData+0x72>

  while(numberOfBytes)
  {
    uint16_t bytesToRead = MIN(sizeof(buffer), numberOfBytes);

    memcpy(buffer, (uint8_t FLASH_PTR *)address, bytesToRead);
    82cc:	4b22      	ldr	r3, [pc, #136]	; (8358 <CompareData+0xbc>)
    82ce:	4698      	mov	r8, r3
    uint16_t bytesToRead = MIN(sizeof(buffer), numberOfBytes);
    82d0:	1c3e      	adds	r6, r7, #0
    82d2:	2f10      	cmp	r7, #16
    82d4:	d900      	bls.n	82d8 <CompareData+0x3c>
    82d6:	2610      	movs	r6, #16
    82d8:	b2b6      	uxth	r6, r6
    memcpy(buffer, (uint8_t FLASH_PTR *)address, bytesToRead);
    82da:	0032      	movs	r2, r6
    82dc:	0029      	movs	r1, r5
    82de:	4668      	mov	r0, sp
    82e0:	47c0      	blx	r8
    for (uint8_t i = 0U; i < bytesToRead; i++)
    82e2:	2e00      	cmp	r6, #0
    82e4:	d028      	beq.n	8338 <CompareData+0x9c>
    82e6:	2300      	movs	r3, #0
    82e8:	e01f      	b.n	832a <CompareData+0x8e>
  assert(numberOfBytes);
    82ea:	4b1c      	ldr	r3, [pc, #112]	; (835c <CompareData+0xc0>)
    82ec:	4a1c      	ldr	r2, [pc, #112]	; (8360 <CompareData+0xc4>)
    82ee:	21d9      	movs	r1, #217	; 0xd9
    82f0:	481c      	ldr	r0, [pc, #112]	; (8364 <CompareData+0xc8>)
    82f2:	4c1d      	ldr	r4, [pc, #116]	; (8368 <CompareData+0xcc>)
    82f4:	47a0      	blx	r4
  assert(address <= D_NV_MEMORY_END);
    82f6:	4b1d      	ldr	r3, [pc, #116]	; (836c <CompareData+0xd0>)
    82f8:	4a19      	ldr	r2, [pc, #100]	; (8360 <CompareData+0xc4>)
    82fa:	21da      	movs	r1, #218	; 0xda
    82fc:	4819      	ldr	r0, [pc, #100]	; (8364 <CompareData+0xc8>)
    82fe:	4c1a      	ldr	r4, [pc, #104]	; (8368 <CompareData+0xcc>)
    8300:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    8302:	4b1b      	ldr	r3, [pc, #108]	; (8370 <CompareData+0xd4>)
    8304:	4a16      	ldr	r2, [pc, #88]	; (8360 <CompareData+0xc4>)
    8306:	21db      	movs	r1, #219	; 0xdb
    8308:	4816      	ldr	r0, [pc, #88]	; (8364 <CompareData+0xc8>)
    830a:	4c17      	ldr	r4, [pc, #92]	; (8368 <CompareData+0xcc>)
    830c:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    830e:	4b19      	ldr	r3, [pc, #100]	; (8374 <CompareData+0xd8>)
    8310:	4a13      	ldr	r2, [pc, #76]	; (8360 <CompareData+0xc4>)
    8312:	21dc      	movs	r1, #220	; 0xdc
    8314:	4813      	ldr	r0, [pc, #76]	; (8364 <CompareData+0xc8>)
    8316:	4c14      	ldr	r4, [pc, #80]	; (8368 <CompareData+0xcc>)
    8318:	47a0      	blx	r4
      if (buffer[i] != ((pBuffer != NULL) ? *(pBuffer++) : 0xFF))
    831a:	21ff      	movs	r1, #255	; 0xff
    831c:	4291      	cmp	r1, r2
    831e:	d112      	bne.n	8346 <CompareData+0xaa>
    for (uint8_t i = 0U; i < bytesToRead; i++)
    8320:	3301      	adds	r3, #1
    8322:	b2db      	uxtb	r3, r3
    8324:	b29a      	uxth	r2, r3
    8326:	4296      	cmp	r6, r2
    8328:	d906      	bls.n	8338 <CompareData+0x9c>
      if (buffer[i] != ((pBuffer != NULL) ? *(pBuffer++) : 0xFF))
    832a:	466a      	mov	r2, sp
    832c:	5cd2      	ldrb	r2, [r2, r3]
    832e:	2c00      	cmp	r4, #0
    8330:	d0f3      	beq.n	831a <CompareData+0x7e>
    8332:	7821      	ldrb	r1, [r4, #0]
    8334:	3401      	adds	r4, #1
    8336:	e7f1      	b.n	831c <CompareData+0x80>
        return false;

    numberOfBytes -= bytesToRead;
    8338:	1bbf      	subs	r7, r7, r6
    833a:	b2bf      	uxth	r7, r7
    address += bytesToRead;
    833c:	19ad      	adds	r5, r5, r6
  while(numberOfBytes)
    833e:	2f00      	cmp	r7, #0
    8340:	d1c6      	bne.n	82d0 <CompareData+0x34>
  }

  return true;
    8342:	2001      	movs	r0, #1
    8344:	e000      	b.n	8348 <CompareData+0xac>
        return false;
    8346:	2000      	movs	r0, #0
}
    8348:	b004      	add	sp, #16
    834a:	bc04      	pop	{r2}
    834c:	4690      	mov	r8, r2
    834e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8350:	00000400 	.word	0x00000400
    8354:	00004400 	.word	0x00004400
    8358:	000155bf 	.word	0x000155bf
    835c:	00017580 	.word	0x00017580
    8360:	0001768c 	.word	0x0001768c
    8364:	00017590 	.word	0x00017590
    8368:	000154fd 	.word	0x000154fd
    836c:	000175d4 	.word	0x000175d4
    8370:	000175f0 	.word	0x000175f0
    8374:	00017624 	.word	0x00017624

00008378 <D_Nv_Read_Impl>:
{
    8378:	b570      	push	{r4, r5, r6, lr}
    837a:	0015      	movs	r5, r2
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    837c:	0344      	lsls	r4, r0, #13
    837e:	4813      	ldr	r0, [pc, #76]	; (83cc <D_Nv_Read_Impl+0x54>)
    8380:	1808      	adds	r0, r1, r0
    8382:	1824      	adds	r4, r4, r0
  assert(address <= D_NV_MEMORY_END);
    8384:	4a12      	ldr	r2, [pc, #72]	; (83d0 <D_Nv_Read_Impl+0x58>)
    8386:	1e50      	subs	r0, r2, #1
    8388:	4284      	cmp	r4, r0
    838a:	d80d      	bhi.n	83a8 <D_Nv_Read_Impl+0x30>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    838c:	18e0      	adds	r0, r4, r3
    838e:	4282      	cmp	r2, r0
    8390:	d310      	bcc.n	83b4 <D_Nv_Read_Impl+0x3c>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    8392:	18c9      	adds	r1, r1, r3
    8394:	2280      	movs	r2, #128	; 0x80
    8396:	0192      	lsls	r2, r2, #6
    8398:	4291      	cmp	r1, r2
    839a:	d811      	bhi.n	83c0 <D_Nv_Read_Impl+0x48>
  memcpy(pBuffer, (uint8_t FLASH_PTR *)address, numberOfBytes);
    839c:	001a      	movs	r2, r3
    839e:	0021      	movs	r1, r4
    83a0:	0028      	movs	r0, r5
    83a2:	4b0c      	ldr	r3, [pc, #48]	; (83d4 <D_Nv_Read_Impl+0x5c>)
    83a4:	4798      	blx	r3
}
    83a6:	bd70      	pop	{r4, r5, r6, pc}
  assert(address <= D_NV_MEMORY_END);
    83a8:	4b0b      	ldr	r3, [pc, #44]	; (83d8 <D_Nv_Read_Impl+0x60>)
    83aa:	4a0c      	ldr	r2, [pc, #48]	; (83dc <D_Nv_Read_Impl+0x64>)
    83ac:	2172      	movs	r1, #114	; 0x72
    83ae:	480c      	ldr	r0, [pc, #48]	; (83e0 <D_Nv_Read_Impl+0x68>)
    83b0:	4c0c      	ldr	r4, [pc, #48]	; (83e4 <D_Nv_Read_Impl+0x6c>)
    83b2:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    83b4:	4b0c      	ldr	r3, [pc, #48]	; (83e8 <D_Nv_Read_Impl+0x70>)
    83b6:	4a09      	ldr	r2, [pc, #36]	; (83dc <D_Nv_Read_Impl+0x64>)
    83b8:	2173      	movs	r1, #115	; 0x73
    83ba:	4809      	ldr	r0, [pc, #36]	; (83e0 <D_Nv_Read_Impl+0x68>)
    83bc:	4c09      	ldr	r4, [pc, #36]	; (83e4 <D_Nv_Read_Impl+0x6c>)
    83be:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    83c0:	4b0a      	ldr	r3, [pc, #40]	; (83ec <D_Nv_Read_Impl+0x74>)
    83c2:	4a06      	ldr	r2, [pc, #24]	; (83dc <D_Nv_Read_Impl+0x64>)
    83c4:	2174      	movs	r1, #116	; 0x74
    83c6:	4806      	ldr	r0, [pc, #24]	; (83e0 <D_Nv_Read_Impl+0x68>)
    83c8:	4c06      	ldr	r4, [pc, #24]	; (83e4 <D_Nv_Read_Impl+0x6c>)
    83ca:	47a0      	blx	r4
    83cc:	00000400 	.word	0x00000400
    83d0:	00004400 	.word	0x00004400
    83d4:	000155bf 	.word	0x000155bf
    83d8:	000175d4 	.word	0x000175d4
    83dc:	00017654 	.word	0x00017654
    83e0:	00017590 	.word	0x00017590
    83e4:	000154fd 	.word	0x000154fd
    83e8:	000175f0 	.word	0x000175f0
    83ec:	00017624 	.word	0x00017624

000083f0 <D_Nv_Write_Impl>:
{
    83f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    83f2:	46de      	mov	lr, fp
    83f4:	4657      	mov	r7, sl
    83f6:	464e      	mov	r6, r9
    83f8:	4645      	mov	r5, r8
    83fa:	b5e0      	push	{r5, r6, r7, lr}
    83fc:	b093      	sub	sp, #76	; 0x4c
    83fe:	9201      	str	r2, [sp, #4]
    8400:	469a      	mov	sl, r3
  uint32_t  address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    8402:	4c46      	ldr	r4, [pc, #280]	; (851c <D_Nv_Write_Impl+0x12c>)
    8404:	190c      	adds	r4, r1, r4
    8406:	0340      	lsls	r0, r0, #13
    8408:	1825      	adds	r5, r4, r0
  assert(numberOfBytes);
    840a:	2b00      	cmp	r3, #0
    840c:	d047      	beq.n	849e <D_Nv_Write_Impl+0xae>
  assert(address <= D_NV_MEMORY_END);
    840e:	4b44      	ldr	r3, [pc, #272]	; (8520 <D_Nv_Write_Impl+0x130>)
    8410:	1e5a      	subs	r2, r3, #1
    8412:	4295      	cmp	r5, r2
    8414:	d849      	bhi.n	84aa <D_Nv_Write_Impl+0xba>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    8416:	4652      	mov	r2, sl
    8418:	1952      	adds	r2, r2, r5
    841a:	4293      	cmp	r3, r2
    841c:	d34b      	bcc.n	84b6 <D_Nv_Write_Impl+0xc6>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    841e:	46d3      	mov	fp, sl
    8420:	4451      	add	r1, sl
    8422:	2380      	movs	r3, #128	; 0x80
    8424:	019b      	lsls	r3, r3, #6
    8426:	4299      	cmp	r1, r3
    8428:	d84b      	bhi.n	84c2 <D_Nv_Write_Impl+0xd2>
  if (s_pfSystemCheckCallback != NULL)
    842a:	4b3e      	ldr	r3, [pc, #248]	; (8524 <D_Nv_Write_Impl+0x134>)
    842c:	681b      	ldr	r3, [r3, #0]
    842e:	2b00      	cmp	r3, #0
    8430:	d000      	beq.n	8434 <D_Nv_Write_Impl+0x44>
    s_pfSystemCheckCallback();
    8432:	4798      	blx	r3
  pageOffset = address % NVMCTRL_PAGE_SIZE;
    8434:	273f      	movs	r7, #63	; 0x3f
    8436:	402f      	ands	r7, r5
  pageStart = address - pageOffset;
    8438:	1bec      	subs	r4, r5, r7
  numberOfPageBytes = MIN((NVMCTRL_PAGE_SIZE - pageOffset), numberOfBytes);
    843a:	2640      	movs	r6, #64	; 0x40
    843c:	1bf6      	subs	r6, r6, r7
    843e:	455e      	cmp	r6, fp
    8440:	dd00      	ble.n	8444 <D_Nv_Write_Impl+0x54>
    8442:	4656      	mov	r6, sl
    8444:	b2b3      	uxth	r3, r6
    8446:	469b      	mov	fp, r3
  memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    8448:	2240      	movs	r2, #64	; 0x40
    844a:	21ff      	movs	r1, #255	; 0xff
    844c:	a802      	add	r0, sp, #8
    844e:	4b36      	ldr	r3, [pc, #216]	; (8528 <D_Nv_Write_Impl+0x138>)
    8450:	4798      	blx	r3
  memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    8452:	003b      	movs	r3, r7
    8454:	aa02      	add	r2, sp, #8
    8456:	4694      	mov	ip, r2
    8458:	4463      	add	r3, ip
    845a:	9300      	str	r3, [sp, #0]
    845c:	0436      	lsls	r6, r6, #16
    845e:	0c37      	lsrs	r7, r6, #16
    8460:	003a      	movs	r2, r7
    8462:	9901      	ldr	r1, [sp, #4]
    8464:	0018      	movs	r0, r3
    8466:	4b31      	ldr	r3, [pc, #196]	; (852c <D_Nv_Write_Impl+0x13c>)
    8468:	4798      	blx	r3
	cpu_irq_enter_critical();
    846a:	4b31      	ldr	r3, [pc, #196]	; (8530 <D_Nv_Write_Impl+0x140>)
    846c:	4798      	blx	r3
    error_code = nvm_write_buffer(pageStart, page_buf, NVMCTRL_PAGE_SIZE);
    846e:	4e31      	ldr	r6, [pc, #196]	; (8534 <D_Nv_Write_Impl+0x144>)
    8470:	2240      	movs	r2, #64	; 0x40
    8472:	a902      	add	r1, sp, #8
    8474:	0020      	movs	r0, r4
    8476:	47b0      	blx	r6
  } while (error_code == STATUS_BUSY);
    8478:	2805      	cmp	r0, #5
    847a:	d0f9      	beq.n	8470 <D_Nv_Write_Impl+0x80>
	cpu_irq_leave_critical();
    847c:	4b2e      	ldr	r3, [pc, #184]	; (8538 <D_Nv_Write_Impl+0x148>)
    847e:	4798      	blx	r3
  numberOfBytes -= numberOfPageBytes;
    8480:	4653      	mov	r3, sl
    8482:	465a      	mov	r2, fp
    8484:	1a9e      	subs	r6, r3, r2
    8486:	b2b6      	uxth	r6, r6
  address += numberOfPageBytes;
    8488:	19ec      	adds	r4, r5, r7
  pBuffer += numberOfPageBytes;
    848a:	9b01      	ldr	r3, [sp, #4]
    848c:	4699      	mov	r9, r3
    848e:	44b9      	add	r9, r7
  while (0U < numberOfBytes)
    8490:	2e00      	cmp	r6, #0
    8492:	d03b      	beq.n	850c <D_Nv_Write_Impl+0x11c>
    memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    8494:	4b24      	ldr	r3, [pc, #144]	; (8528 <D_Nv_Write_Impl+0x138>)
    8496:	469b      	mov	fp, r3
    memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    8498:	4b24      	ldr	r3, [pc, #144]	; (852c <D_Nv_Write_Impl+0x13c>)
    849a:	4698      	mov	r8, r3
    849c:	e031      	b.n	8502 <D_Nv_Write_Impl+0x112>
  assert(numberOfBytes);
    849e:	4b27      	ldr	r3, [pc, #156]	; (853c <D_Nv_Write_Impl+0x14c>)
    84a0:	4a27      	ldr	r2, [pc, #156]	; (8540 <D_Nv_Write_Impl+0x150>)
    84a2:	218a      	movs	r1, #138	; 0x8a
    84a4:	4827      	ldr	r0, [pc, #156]	; (8544 <D_Nv_Write_Impl+0x154>)
    84a6:	4c28      	ldr	r4, [pc, #160]	; (8548 <D_Nv_Write_Impl+0x158>)
    84a8:	47a0      	blx	r4
  assert(address <= D_NV_MEMORY_END);
    84aa:	4b28      	ldr	r3, [pc, #160]	; (854c <D_Nv_Write_Impl+0x15c>)
    84ac:	4a24      	ldr	r2, [pc, #144]	; (8540 <D_Nv_Write_Impl+0x150>)
    84ae:	218b      	movs	r1, #139	; 0x8b
    84b0:	4824      	ldr	r0, [pc, #144]	; (8544 <D_Nv_Write_Impl+0x154>)
    84b2:	4c25      	ldr	r4, [pc, #148]	; (8548 <D_Nv_Write_Impl+0x158>)
    84b4:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    84b6:	4b26      	ldr	r3, [pc, #152]	; (8550 <D_Nv_Write_Impl+0x160>)
    84b8:	4a21      	ldr	r2, [pc, #132]	; (8540 <D_Nv_Write_Impl+0x150>)
    84ba:	218c      	movs	r1, #140	; 0x8c
    84bc:	4821      	ldr	r0, [pc, #132]	; (8544 <D_Nv_Write_Impl+0x154>)
    84be:	4c22      	ldr	r4, [pc, #136]	; (8548 <D_Nv_Write_Impl+0x158>)
    84c0:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    84c2:	4b24      	ldr	r3, [pc, #144]	; (8554 <D_Nv_Write_Impl+0x164>)
    84c4:	4a1e      	ldr	r2, [pc, #120]	; (8540 <D_Nv_Write_Impl+0x150>)
    84c6:	218d      	movs	r1, #141	; 0x8d
    84c8:	481e      	ldr	r0, [pc, #120]	; (8544 <D_Nv_Write_Impl+0x154>)
    84ca:	4c1f      	ldr	r4, [pc, #124]	; (8548 <D_Nv_Write_Impl+0x158>)
    84cc:	47a0      	blx	r4
    numberOfPageBytes = MIN(NVMCTRL_PAGE_SIZE, numberOfBytes);
    84ce:	b29f      	uxth	r7, r3
    memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    84d0:	2240      	movs	r2, #64	; 0x40
    84d2:	21ff      	movs	r1, #255	; 0xff
    84d4:	a802      	add	r0, sp, #8
    84d6:	47d8      	blx	fp
    memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    84d8:	003a      	movs	r2, r7
    84da:	4649      	mov	r1, r9
    84dc:	9800      	ldr	r0, [sp, #0]
    84de:	47c0      	blx	r8
	cpu_irq_enter_critical();
    84e0:	4b13      	ldr	r3, [pc, #76]	; (8530 <D_Nv_Write_Impl+0x140>)
    84e2:	4798      	blx	r3
      error_code = nvm_write_buffer(address, page_buf, NVMCTRL_PAGE_SIZE);
    84e4:	4d13      	ldr	r5, [pc, #76]	; (8534 <D_Nv_Write_Impl+0x144>)
    84e6:	2240      	movs	r2, #64	; 0x40
    84e8:	a902      	add	r1, sp, #8
    84ea:	0020      	movs	r0, r4
    84ec:	47a8      	blx	r5
    } while (error_code == STATUS_BUSY);
    84ee:	2805      	cmp	r0, #5
    84f0:	d0f9      	beq.n	84e6 <D_Nv_Write_Impl+0xf6>
	cpu_irq_leave_critical();
    84f2:	4b11      	ldr	r3, [pc, #68]	; (8538 <D_Nv_Write_Impl+0x148>)
    84f4:	4798      	blx	r3
    numberOfBytes -= numberOfPageBytes;
    84f6:	1bf6      	subs	r6, r6, r7
    84f8:	b2b6      	uxth	r6, r6
    address += numberOfPageBytes;
    84fa:	19e4      	adds	r4, r4, r7
    pBuffer += numberOfPageBytes;
    84fc:	44b9      	add	r9, r7
  while (0U < numberOfBytes)
    84fe:	2e00      	cmp	r6, #0
    8500:	d004      	beq.n	850c <D_Nv_Write_Impl+0x11c>
    numberOfPageBytes = MIN(NVMCTRL_PAGE_SIZE, numberOfBytes);
    8502:	1c33      	adds	r3, r6, #0
    8504:	2e40      	cmp	r6, #64	; 0x40
    8506:	d9e2      	bls.n	84ce <D_Nv_Write_Impl+0xde>
    8508:	2340      	movs	r3, #64	; 0x40
    850a:	e7e0      	b.n	84ce <D_Nv_Write_Impl+0xde>
}
    850c:	b013      	add	sp, #76	; 0x4c
    850e:	bc3c      	pop	{r2, r3, r4, r5}
    8510:	4690      	mov	r8, r2
    8512:	4699      	mov	r9, r3
    8514:	46a2      	mov	sl, r4
    8516:	46ab      	mov	fp, r5
    8518:	bdf0      	pop	{r4, r5, r6, r7, pc}
    851a:	46c0      	nop			; (mov r8, r8)
    851c:	00000400 	.word	0x00000400
    8520:	00004400 	.word	0x00004400
    8524:	20000308 	.word	0x20000308
    8528:	000155d1 	.word	0x000155d1
    852c:	000155bf 	.word	0x000155bf
    8530:	00004aa5 	.word	0x00004aa5
    8534:	00004ff5 	.word	0x00004ff5
    8538:	00004ae5 	.word	0x00004ae5
    853c:	00017580 	.word	0x00017580
    8540:	00017664 	.word	0x00017664
    8544:	00017590 	.word	0x00017590
    8548:	000154fd 	.word	0x000154fd
    854c:	000175d4 	.word	0x000175d4
    8550:	000175f0 	.word	0x000175f0
    8554:	00017624 	.word	0x00017624

00008558 <D_Nv_EraseSector_Impl>:
{
    8558:	b570      	push	{r4, r5, r6, lr}
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE;
    855a:	0344      	lsls	r4, r0, #13
    855c:	480c      	ldr	r0, [pc, #48]	; (8590 <D_Nv_EraseSector_Impl+0x38>)
    855e:	1824      	adds	r4, r4, r0
  address &= ~(NVMCTRL_ROW_SIZE - 1);
    8560:	23ff      	movs	r3, #255	; 0xff
    8562:	439c      	bics	r4, r3
  assert(address <= D_NV_MEMORY_END);
    8564:	4b0b      	ldr	r3, [pc, #44]	; (8594 <D_Nv_EraseSector_Impl+0x3c>)
    8566:	3b01      	subs	r3, #1
    8568:	2280      	movs	r2, #128	; 0x80
    856a:	0192      	lsls	r2, r2, #6
    856c:	18a6      	adds	r6, r4, r2
    856e:	429c      	cmp	r4, r3
    8570:	d807      	bhi.n	8582 <D_Nv_EraseSector_Impl+0x2a>
    nvm_erase_row (address);
    8572:	4d09      	ldr	r5, [pc, #36]	; (8598 <D_Nv_EraseSector_Impl+0x40>)
    8574:	0020      	movs	r0, r4
    8576:	47a8      	blx	r5
    address += NVMCTRL_ROW_SIZE;
    8578:	3401      	adds	r4, #1
    857a:	34ff      	adds	r4, #255	; 0xff
  for (uint8_t i = 0U; i < (D_NV_SECTOR_SIZE / NVMCTRL_ROW_SIZE); i++)
    857c:	42b4      	cmp	r4, r6
    857e:	d1f9      	bne.n	8574 <D_Nv_EraseSector_Impl+0x1c>
}
    8580:	bd70      	pop	{r4, r5, r6, pc}
  assert(address <= D_NV_MEMORY_END);
    8582:	4b06      	ldr	r3, [pc, #24]	; (859c <D_Nv_EraseSector_Impl+0x44>)
    8584:	4a06      	ldr	r2, [pc, #24]	; (85a0 <D_Nv_EraseSector_Impl+0x48>)
    8586:	21c2      	movs	r1, #194	; 0xc2
    8588:	4806      	ldr	r0, [pc, #24]	; (85a4 <D_Nv_EraseSector_Impl+0x4c>)
    858a:	4c07      	ldr	r4, [pc, #28]	; (85a8 <D_Nv_EraseSector_Impl+0x50>)
    858c:	47a0      	blx	r4
    858e:	46c0      	nop			; (mov r8, r8)
    8590:	00000400 	.word	0x00000400
    8594:	00004400 	.word	0x00004400
    8598:	000050cd 	.word	0x000050cd
    859c:	000175d4 	.word	0x000175d4
    85a0:	00017674 	.word	0x00017674
    85a4:	00017590 	.word	0x00017590
    85a8:	000154fd 	.word	0x000154fd

000085ac <D_Nv_IsEmpty_Impl>:
    \param numberOfBytes The number of bytes to check
    \returns true if the range is empty, FALSE otherwise.
    \note Sector crossing is not permitted
*/
bool D_Nv_IsEmpty(uint8_t sector, uint16_t offset, D_Nv_Size_t numberOfBytes)
{
    85ac:	b510      	push	{r4, lr}
    85ae:	0013      	movs	r3, r2
  return CompareData(sector, offset, NULL, numberOfBytes);
    85b0:	2200      	movs	r2, #0
    85b2:	4c01      	ldr	r4, [pc, #4]	; (85b8 <D_Nv_IsEmpty_Impl+0xc>)
    85b4:	47a0      	blx	r4
}
    85b6:	bd10      	pop	{r4, pc}
    85b8:	0000829d 	.word	0x0000829d

000085bc <D_Nv_IsEqual_Impl>:
    \param[in] pBuffer The start address of the buffer that contains the data to compare with
    \param numberOfBytes The number of bytes to compare
    \note offset+numberOfBytes must be <= D_NV_SECTOR_SIZE (meaning sector crossing is not permitted)
*/
bool D_Nv_IsEqual(uint8_t sector, uint16_t offset, uint8_t *pBuffer, D_Nv_Size_t numberOfBytes)
{
    85bc:	b510      	push	{r4, lr}
  return CompareData(sector, offset, pBuffer, numberOfBytes);
    85be:	4c01      	ldr	r4, [pc, #4]	; (85c4 <D_Nv_IsEqual_Impl+0x8>)
    85c0:	47a0      	blx	r4
}
    85c2:	bd10      	pop	{r4, pc}
    85c4:	0000829d 	.word	0x0000829d

000085c8 <PowerSupplyTooLow>:
/** Check the power supply.
    \returns TRUE if the power supply is too low, FALSE when the the power
             supply is OK or when there is no callback installed.
*/
static bool PowerSupplyTooLow()
{
    85c8:	b510      	push	{r4, lr}
    bool result = false;
    if ( s_powerSupplyCheckingFunction != NULL )
    85ca:	4b05      	ldr	r3, [pc, #20]	; (85e0 <PowerSupplyTooLow+0x18>)
    85cc:	681b      	ldr	r3, [r3, #0]
    85ce:	2b00      	cmp	r3, #0
    85d0:	d004      	beq.n	85dc <PowerSupplyTooLow+0x14>
    {
        if ( !s_powerSupplyCheckingFunction() )
    85d2:	4798      	blx	r3
    85d4:	2301      	movs	r3, #1
    85d6:	4058      	eors	r0, r3
    85d8:	b2c0      	uxtb	r0, r0
        {
            result = true;
        }
    }
    return result;
}
    85da:	bd10      	pop	{r4, pc}
    bool result = false;
    85dc:	2000      	movs	r0, #0
    85de:	e7fc      	b.n	85da <PowerSupplyTooLow+0x12>
    85e0:	20000474 	.word	0x20000474

000085e4 <UpdateSectorHead>:
*/

static void UpdateSectorHead(uint16_t increment, ItemAlignment_t itemAlignment )
{
    // Adjust the sector head according to the increment and alignment given
    switch(itemAlignment)
    85e4:	2901      	cmp	r1, #1
    85e6:	d009      	beq.n	85fc <UpdateSectorHead+0x18>
    85e8:	2900      	cmp	r1, #0
    85ea:	d002      	beq.n	85f2 <UpdateSectorHead+0xe>
    85ec:	2902      	cmp	r1, #2
    85ee:	d00d      	beq.n	860c <UpdateSectorHead+0x28>
           s_sectorHead = (s_sectorHead + increment + 0x003Fu) & 0xFFC0u;
           break;
        default:
           break;
    }
}
    85f0:	4770      	bx	lr
           s_sectorHead = (s_sectorHead + increment);
    85f2:	4b0a      	ldr	r3, [pc, #40]	; (861c <UpdateSectorHead+0x38>)
    85f4:	881a      	ldrh	r2, [r3, #0]
    85f6:	1880      	adds	r0, r0, r2
    85f8:	8018      	strh	r0, [r3, #0]
           break;
    85fa:	e7f9      	b.n	85f0 <UpdateSectorHead+0xc>
           s_sectorHead = (s_sectorHead + increment + 0x000Fu) & 0xFFF0u;
    85fc:	4a07      	ldr	r2, [pc, #28]	; (861c <UpdateSectorHead+0x38>)
    85fe:	8813      	ldrh	r3, [r2, #0]
    8600:	330f      	adds	r3, #15
    8602:	18c0      	adds	r0, r0, r3
    8604:	230f      	movs	r3, #15
    8606:	4398      	bics	r0, r3
    8608:	8010      	strh	r0, [r2, #0]
           break;
    860a:	e7f1      	b.n	85f0 <UpdateSectorHead+0xc>
           s_sectorHead = (s_sectorHead + increment + 0x003Fu) & 0xFFC0u;
    860c:	4a03      	ldr	r2, [pc, #12]	; (861c <UpdateSectorHead+0x38>)
    860e:	8813      	ldrh	r3, [r2, #0]
    8610:	333f      	adds	r3, #63	; 0x3f
    8612:	18c0      	adds	r0, r0, r3
    8614:	233f      	movs	r3, #63	; 0x3f
    8616:	4398      	bics	r0, r3
    8618:	8010      	strh	r0, [r2, #0]
}
    861a:	e7e9      	b.n	85f0 <UpdateSectorHead+0xc>
    861c:	2000047a 	.word	0x2000047a

00008620 <ComputeCrc>:
    // item not found
    return 0x0000u;
}

static uint16_t ComputeCrc(uint8_t* pData, uint16_t length, uint16_t crc)
{
    8620:	b530      	push	{r4, r5, lr}
    for ( /* empty */ ; length != 0u; length-- )
    8622:	2900      	cmp	r1, #0
    8624:	d019      	beq.n	865a <ComputeCrc+0x3a>
    {
        uint8_t x;
        uint8_t data;

        if (pData == NULL)
            data = 0xFF;
    8626:	24ff      	movs	r4, #255	; 0xff
    8628:	e013      	b.n	8652 <ComputeCrc+0x32>
    862a:	0023      	movs	r3, r4
        else
            data = *pData;

        x = (uint8_t) ((crc >> 8) ^ data);
    862c:	0a15      	lsrs	r5, r2, #8
    862e:	406b      	eors	r3, r5
        x = x ^ (x >> 4);
    8630:	091d      	lsrs	r5, r3, #4
    8632:	406b      	eors	r3, r5
        crc = (crc << 8) ^ ((uint16_t) x << 12) ^ ((uint16_t) x << 5) ^ (uint16_t) x;
    8634:	0212      	lsls	r2, r2, #8
    8636:	405a      	eors	r2, r3
    8638:	031d      	lsls	r5, r3, #12
    863a:	406a      	eors	r2, r5
    863c:	015b      	lsls	r3, r3, #5
    863e:	405a      	eors	r2, r3
    8640:	b292      	uxth	r2, r2

        if ( pData != NULL )
          pData++;
    8642:	0003      	movs	r3, r0
    8644:	1e5d      	subs	r5, r3, #1
    8646:	41ab      	sbcs	r3, r5
    8648:	18c0      	adds	r0, r0, r3
    for ( /* empty */ ; length != 0u; length-- )
    864a:	3901      	subs	r1, #1
    864c:	b289      	uxth	r1, r1
    864e:	2900      	cmp	r1, #0
    8650:	d003      	beq.n	865a <ComputeCrc+0x3a>
        if (pData == NULL)
    8652:	2800      	cmp	r0, #0
    8654:	d0e9      	beq.n	862a <ComputeCrc+0xa>
            data = *pData;
    8656:	7803      	ldrb	r3, [r0, #0]
    8658:	e7e8      	b.n	862c <ComputeCrc+0xc>
    }

    return crc;
}
    865a:	0010      	movs	r0, r2
    865c:	bd30      	pop	{r4, r5, pc}
    865e:	Address 0x0000865e is out of bounds.


00008660 <GatherData>:
       be copied to the flash memory \ref s_sectorHead in sector \ref s_sector.

*/

static bool GatherData(uint8_t sourceSector, uint16_t lastBlockPointer, uint16_t offset, uint16_t length, void* pData)
{
    8660:	b5f0      	push	{r4, r5, r6, r7, lr}
    8662:	46de      	mov	lr, fp
    8664:	4657      	mov	r7, sl
    8666:	b580      	push	{r7, lr}
    8668:	b089      	sub	sp, #36	; 0x24
    866a:	9001      	str	r0, [sp, #4]
    866c:	9102      	str	r1, [sp, #8]
    866e:	4693      	mov	fp, r2
    uint16_t blockStart;
    uint16_t blockEnd;
    uint16_t count;

    // prepare the correct pointer
    if ( pData != NULL )
    8670:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8672:	2a00      	cmp	r2, #0
    8674:	d00d      	beq.n	8692 <GatherData+0x32>
    {
        pDestination = (uint8_t*) pData + length;
    8676:	4692      	mov	sl, r2
    8678:	449a      	add	sl, r3

    // [readStart, readEnd> is the range of data that can be read during the current
    // pass over the blocks (the range includes readStart, but not readEnd).
    // it is initialized with the requested range
    uint16_t readStart = offset;
    uint16_t readEnd = offset + length;
    867a:	445b      	add	r3, fp
    867c:	b29d      	uxth	r5, r3

    // continue until we have all the data that was requested
    while ( readStart != readEnd )
    867e:	465e      	mov	r6, fp
    8680:	9c02      	ldr	r4, [sp, #8]
            sourcePointer -= count;
            pDestination -= count;
            D_Nv_Read(sourceSector, sourcePointer, (uint8_t*)pDestination, count);
        }
    }
    return true;
    8682:	2001      	movs	r0, #1
    while ( readStart != readEnd )
    8684:	45ab      	cmp	fp, r5
    8686:	d03e      	beq.n	8706 <GatherData+0xa6>
            D_Nv_Read(sourceSector, currentBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8688:	4f22      	ldr	r7, [pc, #136]	; (8714 <GatherData+0xb4>)
            if ( currentBlockPointer == 0x0000u )
    868a:	2c00      	cmp	r4, #0
    868c:	d108      	bne.n	86a0 <GatherData+0x40>
                return false;
    868e:	2000      	movs	r0, #0
    8690:	e039      	b.n	8706 <GatherData+0xa6>
    uint8_t* pDestination = NULL;
    8692:	2200      	movs	r2, #0
    8694:	4692      	mov	sl, r2
    8696:	e7f0      	b.n	867a <GatherData+0x1a>
            currentBlockPointer = blockHeader.previousBlock;
    8698:	ab04      	add	r3, sp, #16
    869a:	895c      	ldrh	r4, [r3, #10]
            if ( currentBlockPointer == 0x0000u )
    869c:	2c00      	cmp	r4, #0
    869e:	d031      	beq.n	8704 <GatherData+0xa4>
            D_Nv_Read(sourceSector, currentBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    86a0:	2310      	movs	r3, #16
    86a2:	aa04      	add	r2, sp, #16
    86a4:	0021      	movs	r1, r4
    86a6:	9801      	ldr	r0, [sp, #4]
    86a8:	47b8      	blx	r7
            blockStart = blockHeader.blockOffset;
    86aa:	ab04      	add	r3, sp, #16
    86ac:	889a      	ldrh	r2, [r3, #4]
            if ( (readEnd <= blockStart) || (readStart >= blockEnd) )
    86ae:	42aa      	cmp	r2, r5
    86b0:	d2f2      	bcs.n	8698 <GatherData+0x38>
            blockEnd = blockHeader.blockOffset + blockHeader.blockLength;
    86b2:	88db      	ldrh	r3, [r3, #6]
    86b4:	18d3      	adds	r3, r2, r3
    86b6:	b29b      	uxth	r3, r3
            if ( (readEnd <= blockStart) || (readStart >= blockEnd) )
    86b8:	42b3      	cmp	r3, r6
    86ba:	d9ed      	bls.n	8698 <GatherData+0x38>
            else if ( readEnd > blockEnd )
    86bc:	42ab      	cmp	r3, r5
    86be:	d201      	bcs.n	86c4 <GatherData+0x64>
                readStart = blockEnd;
    86c0:	001e      	movs	r6, r3
    86c2:	e7e9      	b.n	8698 <GatherData+0x38>
        uint16_t sourcePointer = (currentBlockPointer + BLOCK_HEADER_SIZE) + (readEnd - blockStart);
    86c4:	1aa9      	subs	r1, r5, r2
    86c6:	b289      	uxth	r1, r1
        if ( readStart < blockStart )
    86c8:	42b2      	cmp	r2, r6
    86ca:	d915      	bls.n	86f8 <GatherData+0x98>
            currentBlockPointer = blockHeader.previousBlock;
    86cc:	ab04      	add	r3, sp, #16
    86ce:	895b      	ldrh	r3, [r3, #10]
    86d0:	9303      	str	r3, [sp, #12]
            count = readEnd - blockStart;
    86d2:	000b      	movs	r3, r1
        readEnd -= count;
    86d4:	1aed      	subs	r5, r5, r3
    86d6:	b2ad      	uxth	r5, r5
        if ( pDestination != NULL)
    86d8:	4652      	mov	r2, sl
    86da:	2a00      	cmp	r2, #0
    86dc:	d008      	beq.n	86f0 <GatherData+0x90>
        uint16_t sourcePointer = (currentBlockPointer + BLOCK_HEADER_SIZE) + (readEnd - blockStart);
    86de:	3410      	adds	r4, #16
    86e0:	1909      	adds	r1, r1, r4
            pDestination -= count;
    86e2:	1ad2      	subs	r2, r2, r3
    86e4:	4692      	mov	sl, r2
            sourcePointer -= count;
    86e6:	1ac9      	subs	r1, r1, r3
            D_Nv_Read(sourceSector, sourcePointer, (uint8_t*)pDestination, count);
    86e8:	b289      	uxth	r1, r1
    86ea:	9801      	ldr	r0, [sp, #4]
    86ec:	4c09      	ldr	r4, [pc, #36]	; (8714 <GatherData+0xb4>)
    86ee:	47a0      	blx	r4
    while ( readStart != readEnd )
    86f0:	42ae      	cmp	r6, r5
    86f2:	d00d      	beq.n	8710 <GatherData+0xb0>
    86f4:	9c03      	ldr	r4, [sp, #12]
    86f6:	e7c8      	b.n	868a <GatherData+0x2a>
            count = readEnd - readStart;
    86f8:	1bab      	subs	r3, r5, r6
    86fa:	b29b      	uxth	r3, r3
            readStart = offset;
    86fc:	465e      	mov	r6, fp
            currentBlockPointer = lastBlockPointer;
    86fe:	9a02      	ldr	r2, [sp, #8]
    8700:	9203      	str	r2, [sp, #12]
    8702:	e7e7      	b.n	86d4 <GatherData+0x74>
                return false;
    8704:	2000      	movs	r0, #0
}
    8706:	b009      	add	sp, #36	; 0x24
    8708:	bc0c      	pop	{r2, r3}
    870a:	4692      	mov	sl, r2
    870c:	469b      	mov	fp, r3
    870e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return true;
    8710:	2001      	movs	r0, #1
    8712:	e7f8      	b.n	8706 <GatherData+0xa6>
    8714:	00008379 	.word	0x00008379

00008718 <ComputeDataCrc>:
{
    8718:	b5f0      	push	{r4, r5, r6, r7, lr}
    871a:	46de      	mov	lr, fp
    871c:	4647      	mov	r7, r8
    871e:	b580      	push	{r7, lr}
    8720:	b087      	sub	sp, #28
    8722:	9004      	str	r0, [sp, #16]
    8724:	9105      	str	r1, [sp, #20]
    length = pBlockHeader->blockLength;
    8726:	7995      	ldrb	r5, [r2, #6]
    8728:	79d3      	ldrb	r3, [r2, #7]
    872a:	021b      	lsls	r3, r3, #8
    872c:	431d      	orrs	r5, r3
    offset = pBlockHeader->blockOffset;
    872e:	7917      	ldrb	r7, [r2, #4]
    8730:	7953      	ldrb	r3, [r2, #5]
    8732:	021b      	lsls	r3, r3, #8
    8734:	431f      	orrs	r7, r3
    for(int8_t i= (length/sizeof(dataBlock)); i>=0; i--)
    8736:	0a2c      	lsrs	r4, r5, #8
    8738:	b264      	sxtb	r4, r4
    873a:	2c00      	cmp	r4, #0
    873c:	db2f      	blt.n	879e <ComputeDataCrc+0x86>
    873e:	4b1c      	ldr	r3, [pc, #112]	; (87b0 <ComputeDataCrc+0x98>)
    8740:	9303      	str	r3, [sp, #12]
            crc = ComputeCrc(((uint8_t*) &dataBlock), dataLength, crc);
    8742:	4b1c      	ldr	r3, [pc, #112]	; (87b4 <ComputeDataCrc+0x9c>)
    8744:	4698      	mov	r8, r3
    8746:	e011      	b.n	876c <ComputeDataCrc+0x54>
        if (dataLength == 0)
    8748:	2d00      	cmp	r5, #0
    874a:	d02a      	beq.n	87a2 <ComputeDataCrc+0x8a>
        if (GatherData(sourceSector, blockPointer, offset, dataLength, dataBlock))
    874c:	4b1a      	ldr	r3, [pc, #104]	; (87b8 <ComputeDataCrc+0xa0>)
    874e:	9300      	str	r3, [sp, #0]
    8750:	002b      	movs	r3, r5
    8752:	003a      	movs	r2, r7
    8754:	9905      	ldr	r1, [sp, #20]
    8756:	9804      	ldr	r0, [sp, #16]
    8758:	4e18      	ldr	r6, [pc, #96]	; (87bc <ComputeDataCrc+0xa4>)
    875a:	47b0      	blx	r6
    875c:	2800      	cmp	r0, #0
    875e:	d020      	beq.n	87a2 <ComputeDataCrc+0x8a>
    8760:	0029      	movs	r1, r5
    8762:	e015      	b.n	8790 <ComputeDataCrc+0x78>
    8764:	3c01      	subs	r4, #1
    8766:	b264      	sxtb	r4, r4
    for(int8_t i= (length/sizeof(dataBlock)); i>=0; i--)
    8768:	1c63      	adds	r3, r4, #1
    876a:	d01a      	beq.n	87a2 <ComputeDataCrc+0x8a>
        if (i)
    876c:	2c00      	cmp	r4, #0
    876e:	d0eb      	beq.n	8748 <ComputeDataCrc+0x30>
            length = length - sizeof(dataBlock);
    8770:	3d01      	subs	r5, #1
    8772:	3dff      	subs	r5, #255	; 0xff
    8774:	b2ad      	uxth	r5, r5
        if (GatherData(sourceSector, blockPointer, offset, dataLength, dataBlock))
    8776:	4b10      	ldr	r3, [pc, #64]	; (87b8 <ComputeDataCrc+0xa0>)
    8778:	9300      	str	r3, [sp, #0]
    877a:	2380      	movs	r3, #128	; 0x80
    877c:	005b      	lsls	r3, r3, #1
    877e:	003a      	movs	r2, r7
    8780:	9905      	ldr	r1, [sp, #20]
    8782:	9804      	ldr	r0, [sp, #16]
    8784:	4e0d      	ldr	r6, [pc, #52]	; (87bc <ComputeDataCrc+0xa4>)
    8786:	47b0      	blx	r6
    8788:	2800      	cmp	r0, #0
    878a:	d0eb      	beq.n	8764 <ComputeDataCrc+0x4c>
            dataLength = sizeof(dataBlock);
    878c:	2180      	movs	r1, #128	; 0x80
    878e:	0049      	lsls	r1, r1, #1
            offset = offset+dataLength;
    8790:	187f      	adds	r7, r7, r1
    8792:	b2bf      	uxth	r7, r7
            crc = ComputeCrc(((uint8_t*) &dataBlock), dataLength, crc);
    8794:	9a03      	ldr	r2, [sp, #12]
    8796:	4808      	ldr	r0, [pc, #32]	; (87b8 <ComputeDataCrc+0xa0>)
    8798:	47c0      	blx	r8
    879a:	9003      	str	r0, [sp, #12]
    879c:	e7e2      	b.n	8764 <ComputeDataCrc+0x4c>
    uint16_t crc = 0xFFFFu;
    879e:	4b04      	ldr	r3, [pc, #16]	; (87b0 <ComputeDataCrc+0x98>)
    87a0:	9303      	str	r3, [sp, #12]
}
    87a2:	9803      	ldr	r0, [sp, #12]
    87a4:	b007      	add	sp, #28
    87a6:	bc0c      	pop	{r2, r3}
    87a8:	4690      	mov	r8, r2
    87aa:	469b      	mov	fp, r3
    87ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    87ae:	46c0      	nop			; (mov r8, r8)
    87b0:	0000ffff 	.word	0x0000ffff
    87b4:	00008621 	.word	0x00008621
    87b8:	2000033c 	.word	0x2000033c
    87bc:	00008661 	.word	0x00008661

000087c0 <FindItemCache>:
{
    87c0:	b570      	push	{r4, r5, r6, lr}
    for ( uint8_t cacheIndex = 0u; cacheIndex < s_itemCount; cacheIndex++ )
    87c2:	4b16      	ldr	r3, [pc, #88]	; (881c <FindItemCache+0x5c>)
    87c4:	781c      	ldrb	r4, [r3, #0]
    87c6:	2c00      	cmp	r4, #0
    87c8:	d026      	beq.n	8818 <FindItemCache+0x58>
        if ( cache->id == id )
    87ca:	4b15      	ldr	r3, [pc, #84]	; (8820 <FindItemCache+0x60>)
    87cc:	881b      	ldrh	r3, [r3, #0]
    87ce:	4283      	cmp	r3, r0
    87d0:	d016      	beq.n	8800 <FindItemCache+0x40>
    87d2:	2301      	movs	r3, #1
    87d4:	4e12      	ldr	r6, [pc, #72]	; (8820 <FindItemCache+0x60>)
    for ( uint8_t cacheIndex = 0u; cacheIndex < s_itemCount; cacheIndex++ )
    87d6:	b2da      	uxtb	r2, r3
    87d8:	4294      	cmp	r4, r2
    87da:	d91b      	bls.n	8814 <FindItemCache+0x54>
        Item_t *cache = &s_itemCache[cacheIndex];
    87dc:	001d      	movs	r5, r3
        if ( cache->id == id )
    87de:	1c59      	adds	r1, r3, #1
    87e0:	009a      	lsls	r2, r3, #2
    87e2:	5ab2      	ldrh	r2, [r6, r2]
    87e4:	4282      	cmp	r2, r0
    87e6:	d001      	beq.n	87ec <FindItemCache+0x2c>
    87e8:	000b      	movs	r3, r1
    87ea:	e7f4      	b.n	87d6 <FindItemCache+0x16>
        Item_t *cache = &s_itemCache[cacheIndex];
    87ec:	009b      	lsls	r3, r3, #2
    87ee:	480c      	ldr	r0, [pc, #48]	; (8820 <FindItemCache+0x60>)
    87f0:	18c0      	adds	r0, r0, r3
            assert(cache->lastBlock != 0x0000);
    87f2:	00ad      	lsls	r5, r5, #2
    87f4:	4b0a      	ldr	r3, [pc, #40]	; (8820 <FindItemCache+0x60>)
    87f6:	195d      	adds	r5, r3, r5
    87f8:	886b      	ldrh	r3, [r5, #2]
    87fa:	2b00      	cmp	r3, #0
    87fc:	d003      	beq.n	8806 <FindItemCache+0x46>
}
    87fe:	bd70      	pop	{r4, r5, r6, pc}
        Item_t *cache = &s_itemCache[cacheIndex];
    8800:	4807      	ldr	r0, [pc, #28]	; (8820 <FindItemCache+0x60>)
    8802:	2500      	movs	r5, #0
    8804:	e7f5      	b.n	87f2 <FindItemCache+0x32>
            assert(cache->lastBlock != 0x0000);
    8806:	4b07      	ldr	r3, [pc, #28]	; (8824 <FindItemCache+0x64>)
    8808:	4a07      	ldr	r2, [pc, #28]	; (8828 <FindItemCache+0x68>)
    880a:	218c      	movs	r1, #140	; 0x8c
    880c:	31ff      	adds	r1, #255	; 0xff
    880e:	4807      	ldr	r0, [pc, #28]	; (882c <FindItemCache+0x6c>)
    8810:	4c07      	ldr	r4, [pc, #28]	; (8830 <FindItemCache+0x70>)
    8812:	47a0      	blx	r4
    return NULL;
    8814:	2000      	movs	r0, #0
    8816:	e7f2      	b.n	87fe <FindItemCache+0x3e>
    8818:	2000      	movs	r0, #0
    881a:	e7f0      	b.n	87fe <FindItemCache+0x3e>
    881c:	20000470 	.word	0x20000470
    8820:	20000454 	.word	0x20000454
    8824:	000176ec 	.word	0x000176ec
    8828:	000177d8 	.word	0x000177d8
    882c:	00017708 	.word	0x00017708
    8830:	000154fd 	.word	0x000154fd

00008834 <FindItem>:
{
    8834:	b510      	push	{r4, lr}
    Item_t *cache = FindItemCache(id);
    8836:	4b05      	ldr	r3, [pc, #20]	; (884c <FindItem+0x18>)
    8838:	4798      	blx	r3
    if (cache)
    883a:	2800      	cmp	r0, #0
    883c:	d004      	beq.n	8848 <FindItem+0x14>
        return cache->lastBlock;
    883e:	7883      	ldrb	r3, [r0, #2]
    8840:	78c0      	ldrb	r0, [r0, #3]
    8842:	0200      	lsls	r0, r0, #8
    8844:	4318      	orrs	r0, r3
}
    8846:	bd10      	pop	{r4, pc}
    return 0x0000u;
    8848:	2000      	movs	r0, #0
    884a:	e7fc      	b.n	8846 <FindItem+0x12>
    884c:	000087c1 	.word	0x000087c1

00008850 <CreateItemCache>:
{
    8850:	b510      	push	{r4, lr}
    8852:	0004      	movs	r4, r0
    assert(FindItemCache(id) == NULL);
    8854:	4b0e      	ldr	r3, [pc, #56]	; (8890 <CreateItemCache+0x40>)
    8856:	4798      	blx	r3
    8858:	2800      	cmp	r0, #0
    885a:	d10b      	bne.n	8874 <CreateItemCache+0x24>
    assert(s_itemCount < MAX_ITEM_COUNT);
    885c:	4b0d      	ldr	r3, [pc, #52]	; (8894 <CreateItemCache+0x44>)
    885e:	781b      	ldrb	r3, [r3, #0]
    8860:	2b06      	cmp	r3, #6
    8862:	d80e      	bhi.n	8882 <CreateItemCache+0x32>
    Item_t *cache = &s_itemCache[s_itemCount++];
    8864:	1c59      	adds	r1, r3, #1
    8866:	4a0b      	ldr	r2, [pc, #44]	; (8894 <CreateItemCache+0x44>)
    8868:	7011      	strb	r1, [r2, #0]
    cache->id = id;
    886a:	480b      	ldr	r0, [pc, #44]	; (8898 <CreateItemCache+0x48>)
    886c:	009b      	lsls	r3, r3, #2
    886e:	521c      	strh	r4, [r3, r0]
    Item_t *cache = &s_itemCache[s_itemCount++];
    8870:	18c0      	adds	r0, r0, r3
}
    8872:	bd10      	pop	{r4, pc}
    assert(FindItemCache(id) == NULL);
    8874:	4b09      	ldr	r3, [pc, #36]	; (889c <CreateItemCache+0x4c>)
    8876:	4a0a      	ldr	r2, [pc, #40]	; (88a0 <CreateItemCache+0x50>)
    8878:	21cc      	movs	r1, #204	; 0xcc
    887a:	0049      	lsls	r1, r1, #1
    887c:	4809      	ldr	r0, [pc, #36]	; (88a4 <CreateItemCache+0x54>)
    887e:	4c0a      	ldr	r4, [pc, #40]	; (88a8 <CreateItemCache+0x58>)
    8880:	47a0      	blx	r4
    assert(s_itemCount < MAX_ITEM_COUNT);
    8882:	4b0a      	ldr	r3, [pc, #40]	; (88ac <CreateItemCache+0x5c>)
    8884:	4a06      	ldr	r2, [pc, #24]	; (88a0 <CreateItemCache+0x50>)
    8886:	219a      	movs	r1, #154	; 0x9a
    8888:	31ff      	adds	r1, #255	; 0xff
    888a:	4806      	ldr	r0, [pc, #24]	; (88a4 <CreateItemCache+0x54>)
    888c:	4c06      	ldr	r4, [pc, #24]	; (88a8 <CreateItemCache+0x58>)
    888e:	47a0      	blx	r4
    8890:	000087c1 	.word	0x000087c1
    8894:	20000470 	.word	0x20000470
    8898:	20000454 	.word	0x20000454
    889c:	000176b0 	.word	0x000176b0
    88a0:	000177e8 	.word	0x000177e8
    88a4:	00017708 	.word	0x00017708
    88a8:	000154fd 	.word	0x000154fd
    88ac:	000176cc 	.word	0x000176cc

000088b0 <EraseSector>:

static bool EraseSector(void)
{
    88b0:	b510      	push	{r4, lr}
    // Erase the sector
    D_Nv_EraseSector(s_sector);
    88b2:	4c08      	ldr	r4, [pc, #32]	; (88d4 <EraseSector+0x24>)
    88b4:	7820      	ldrb	r0, [r4, #0]
    88b6:	4b08      	ldr	r3, [pc, #32]	; (88d8 <EraseSector+0x28>)
    88b8:	4798      	blx	r3
    // check if the erase succeeded
    if ( !D_Nv_IsEmpty(s_sector, 0u, SECTOR_SIZE) )
    88ba:	7820      	ldrb	r0, [r4, #0]
    88bc:	2280      	movs	r2, #128	; 0x80
    88be:	0192      	lsls	r2, r2, #6
    88c0:	2100      	movs	r1, #0
    88c2:	4b06      	ldr	r3, [pc, #24]	; (88dc <EraseSector+0x2c>)
    88c4:	4798      	blx	r3
    88c6:	2800      	cmp	r0, #0
    88c8:	d003      	beq.n	88d2 <EraseSector+0x22>
    {
        return false;
    }
    s_sectorHead =  ITEMS_AREA_START_ADDRESS;
    88ca:	2280      	movs	r2, #128	; 0x80
    88cc:	0052      	lsls	r2, r2, #1
    88ce:	4b04      	ldr	r3, [pc, #16]	; (88e0 <EraseSector+0x30>)
    88d0:	801a      	strh	r2, [r3, #0]

    return true;
}
    88d2:	bd10      	pop	{r4, pc}
    88d4:	20000478 	.word	0x20000478
    88d8:	00008559 	.word	0x00008559
    88dc:	000085ad 	.word	0x000085ad
    88e0:	2000047a 	.word	0x2000047a

000088e4 <WriteAndCheck>:
{
    88e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    88e6:	b083      	sub	sp, #12
    88e8:	9001      	str	r0, [sp, #4]
    88ea:	000d      	movs	r5, r1
    88ec:	0016      	movs	r6, r2
    D_Nv_Write(s_sector, offset, pData, length);
    88ee:	4f07      	ldr	r7, [pc, #28]	; (890c <WriteAndCheck+0x28>)
    88f0:	7838      	ldrb	r0, [r7, #0]
    88f2:	0013      	movs	r3, r2
    88f4:	000a      	movs	r2, r1
    88f6:	9901      	ldr	r1, [sp, #4]
    88f8:	4c05      	ldr	r4, [pc, #20]	; (8910 <WriteAndCheck+0x2c>)
    88fa:	47a0      	blx	r4
    return D_Nv_IsEqual(s_sector, offset, pData, length);
    88fc:	7838      	ldrb	r0, [r7, #0]
    88fe:	0033      	movs	r3, r6
    8900:	002a      	movs	r2, r5
    8902:	9901      	ldr	r1, [sp, #4]
    8904:	4c03      	ldr	r4, [pc, #12]	; (8914 <WriteAndCheck+0x30>)
    8906:	47a0      	blx	r4
}
    8908:	b003      	add	sp, #12
    890a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    890c:	20000478 	.word	0x20000478
    8910:	000083f1 	.word	0x000083f1
    8914:	000085bd 	.word	0x000085bd

00008918 <WriteSectorHeader>:

static bool WriteSectorHeader(uint32_t sequenceNumber)
{
    8918:	b510      	push	{r4, lr}
    891a:	b086      	sub	sp, #24
    // write sector header
    SectorHeader_t sectorHeader;
    sectorHeader.signature[0] = (uint8_t) 'A';
    891c:	ac01      	add	r4, sp, #4
    891e:	2341      	movs	r3, #65	; 0x41
    8920:	70a3      	strb	r3, [r4, #2]
    sectorHeader.signature[1] = (uint8_t) 'T';
    8922:	3313      	adds	r3, #19
    8924:	70e3      	strb	r3, [r4, #3]
    sectorHeader.signature[2] = (uint8_t) 'S';
    8926:	3b01      	subs	r3, #1
    8928:	7123      	strb	r3, [r4, #4]
    sectorHeader.signature[3] = (uint8_t) 'N';
    892a:	3b05      	subs	r3, #5
    892c:	7163      	strb	r3, [r4, #5]
    sectorHeader.signature[4] = (uint8_t) 'v';
    892e:	3328      	adds	r3, #40	; 0x28
    8930:	71a3      	strb	r3, [r4, #6]
    sectorHeader.signature[5] = (uint8_t) '2';
    8932:	3b44      	subs	r3, #68	; 0x44
    8934:	71e3      	strb	r3, [r4, #7]
    sectorHeader.sequenceNumber = sequenceNumber;
    8936:	9003      	str	r0, [sp, #12]
    sectorHeader.sequenceParity = sequenceNumber ^ 0xFFFFFFFFuL;
    8938:	43c0      	mvns	r0, r0
    893a:	9004      	str	r0, [sp, #16]
    sectorHeader.nextPageAddressAfterCompact = s_nextPageAddressAfterCompact;
    893c:	4b08      	ldr	r3, [pc, #32]	; (8960 <WriteSectorHeader+0x48>)
    893e:	881b      	ldrh	r3, [r3, #0]
    8940:	8223      	strh	r3, [r4, #16]
    return ComputeCrc(((uint8_t*) pSectorHeader) + sizeof(pSectorHeader->headerCrc), (sizeof(SectorHeader_t)- sizeof(pSectorHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    8942:	4a08      	ldr	r2, [pc, #32]	; (8964 <WriteSectorHeader+0x4c>)
    8944:	2110      	movs	r1, #16
    8946:	466b      	mov	r3, sp
    8948:	1d98      	adds	r0, r3, #6
    894a:	4b07      	ldr	r3, [pc, #28]	; (8968 <WriteSectorHeader+0x50>)
    894c:	4798      	blx	r3
    sectorHeader.headerCrc = ComputeSectorHeaderCrc(&sectorHeader);
    894e:	8020      	strh	r0, [r4, #0]
    if ( !WriteAndCheck(0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE) )
    8950:	2212      	movs	r2, #18
    8952:	0021      	movs	r1, r4
    8954:	2000      	movs	r0, #0
    8956:	4b05      	ldr	r3, [pc, #20]	; (896c <WriteSectorHeader+0x54>)
    8958:	4798      	blx	r3
    {
        return false;
    }
    return true;
}
    895a:	b006      	add	sp, #24
    895c:	bd10      	pop	{r4, pc}
    895e:	46c0      	nop			; (mov r8, r8)
    8960:	20000472 	.word	0x20000472
    8964:	0000ffff 	.word	0x0000ffff
    8968:	00008621 	.word	0x00008621
    896c:	000088e5 	.word	0x000088e5

00008970 <SmartCompacting>:
 * without following any alignements as normal item updates.Items are filled into
  256 byte buffer(= row size), committed in shot which takes 4 page writs maximum
 */

static bool SmartCompacting(uint8_t* compactBlock, uint16_t curItemLength)
{
    8970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8972:	0004      	movs	r4, r0
    8974:	000d      	movs	r5, r1
    //manupulate the current compact length
    currentCompactLength += curItemLength;
    8976:	4a21      	ldr	r2, [pc, #132]	; (89fc <SmartCompacting+0x8c>)
    8978:	8813      	ldrh	r3, [r2, #0]
    897a:	18cb      	adds	r3, r1, r3
    897c:	b29b      	uxth	r3, r3
    897e:	8013      	strh	r3, [r2, #0]

    // if the complete buffer cannot be filled with the current item
    if ( currentCompactLength < ROW_SIZE)
    8980:	2bff      	cmp	r3, #255	; 0xff
    8982:	d92e      	bls.n	89e2 <SmartCompacting+0x72>
    else  //(currentCompactLength >= ROW_SIZE) cases
    {
        uint16_t dataBlockOffset = 0;


        memcpy(compactBlock + compactBlockOffset, dataBlock, (ROW_SIZE - compactBlockOffset));
    8984:	4b1e      	ldr	r3, [pc, #120]	; (8a00 <SmartCompacting+0x90>)
    8986:	881a      	ldrh	r2, [r3, #0]
    8988:	1880      	adds	r0, r0, r2
    898a:	2580      	movs	r5, #128	; 0x80
    898c:	006d      	lsls	r5, r5, #1
    898e:	1aaa      	subs	r2, r5, r2
    8990:	491c      	ldr	r1, [pc, #112]	; (8a04 <SmartCompacting+0x94>)
    8992:	4b1d      	ldr	r3, [pc, #116]	; (8a08 <SmartCompacting+0x98>)
    8994:	4798      	blx	r3
        if ( !WriteAndCheck(s_sectorHead, compactBlock, ROW_SIZE ))
    8996:	4b1d      	ldr	r3, [pc, #116]	; (8a0c <SmartCompacting+0x9c>)
    8998:	8818      	ldrh	r0, [r3, #0]
    899a:	002a      	movs	r2, r5
    899c:	0021      	movs	r1, r4
    899e:	4b1c      	ldr	r3, [pc, #112]	; (8a10 <SmartCompacting+0xa0>)
    89a0:	4798      	blx	r3
    89a2:	1e05      	subs	r5, r0, #0
    89a4:	d027      	beq.n	89f6 <SmartCompacting+0x86>
        {
            return false;
        }
        UpdateSectorHead(ROW_SIZE, ITEM_NO_ALIGNMENT);
    89a6:	2100      	movs	r1, #0
    89a8:	2080      	movs	r0, #128	; 0x80
    89aa:	0040      	lsls	r0, r0, #1
    89ac:	4b19      	ldr	r3, [pc, #100]	; (8a14 <SmartCompacting+0xa4>)
    89ae:	4798      	blx	r3
        dataBlockOffset += (ROW_SIZE - compactBlockOffset);
    89b0:	4b13      	ldr	r3, [pc, #76]	; (8a00 <SmartCompacting+0x90>)
    89b2:	8818      	ldrh	r0, [r3, #0]
        compactBlockOffset = 0;
    89b4:	2200      	movs	r2, #0
    89b6:	801a      	strh	r2, [r3, #0]
        currentCompactLength -= ROW_SIZE;
    89b8:	4b10      	ldr	r3, [pc, #64]	; (89fc <SmartCompacting+0x8c>)
    89ba:	881e      	ldrh	r6, [r3, #0]
    89bc:	3e01      	subs	r6, #1
    89be:	3eff      	subs	r6, #255	; 0xff
    89c0:	b2b6      	uxth	r6, r6
    89c2:	801e      	strh	r6, [r3, #0]
        if (currentCompactLength)
    89c4:	2e00      	cmp	r6, #0
    89c6:	d016      	beq.n	89f6 <SmartCompacting+0x86>
        dataBlockOffset += (ROW_SIZE - compactBlockOffset);
    89c8:	2180      	movs	r1, #128	; 0x80
    89ca:	0049      	lsls	r1, r1, #1
    89cc:	1a09      	subs	r1, r1, r0
        {
            memcpy(compactBlock, dataBlock + dataBlockOffset, currentCompactLength);
    89ce:	b289      	uxth	r1, r1
    89d0:	4b0c      	ldr	r3, [pc, #48]	; (8a04 <SmartCompacting+0x94>)
    89d2:	1859      	adds	r1, r3, r1
    89d4:	0032      	movs	r2, r6
    89d6:	0020      	movs	r0, r4
    89d8:	4b0b      	ldr	r3, [pc, #44]	; (8a08 <SmartCompacting+0x98>)
    89da:	4798      	blx	r3
            compactBlockOffset = currentCompactLength;
    89dc:	4b08      	ldr	r3, [pc, #32]	; (8a00 <SmartCompacting+0x90>)
    89de:	801e      	strh	r6, [r3, #0]
    89e0:	e009      	b.n	89f6 <SmartCompacting+0x86>
        memcpy(compactBlock + compactBlockOffset, dataBlock, curItemLength);
    89e2:	4e07      	ldr	r6, [pc, #28]	; (8a00 <SmartCompacting+0x90>)
    89e4:	8837      	ldrh	r7, [r6, #0]
    89e6:	19c0      	adds	r0, r0, r7
    89e8:	000a      	movs	r2, r1
    89ea:	4906      	ldr	r1, [pc, #24]	; (8a04 <SmartCompacting+0x94>)
    89ec:	4b06      	ldr	r3, [pc, #24]	; (8a08 <SmartCompacting+0x98>)
    89ee:	4798      	blx	r3
        compactBlockOffset += curItemLength;
    89f0:	19ed      	adds	r5, r5, r7
    89f2:	8035      	strh	r5, [r6, #0]
        return true;
    89f4:	2501      	movs	r5, #1
        }
    }

    return true;

}
    89f6:	0028      	movs	r0, r5
    89f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    89fa:	46c0      	nop			; (mov r8, r8)
    89fc:	20000338 	.word	0x20000338
    8a00:	2000030c 	.word	0x2000030c
    8a04:	2000033c 	.word	0x2000033c
    8a08:	000155bf 	.word	0x000155bf
    8a0c:	2000047a 	.word	0x2000047a
    8a10:	000088e5 	.word	0x000088e5
    8a14:	000085e5 	.word	0x000085e5

00008a18 <CompactSector>:
 * This is because the itemCache, sector head and sector selector will
 * be messed up.
 */

static bool CompactSector(void)
{
    8a18:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a1a:	46de      	mov	lr, fp
    8a1c:	4657      	mov	r7, sl
    8a1e:	464e      	mov	r6, r9
    8a20:	4645      	mov	r5, r8
    8a22:	b5e0      	push	{r5, r6, r7, lr}
    8a24:	b0d5      	sub	sp, #340	; 0x154
    PRINTA(("CompactSector(s=%X)", s_sector));
#endif
    uint8_t compactBlock[ROW_SIZE];

    // stop timer for preemptive compact sector as this will not be needed any more
    SYS_TimerStop(&compactSectorTimer);
    8a26:	487b      	ldr	r0, [pc, #492]	; (8c14 <CompactSector+0x1fc>)
    8a28:	4b7b      	ldr	r3, [pc, #492]	; (8c18 <CompactSector+0x200>)
    8a2a:	4798      	blx	r3

    // stop the compact item as a compact sector will compact all items
    s_compactItemId = 0u;
    8a2c:	2300      	movs	r3, #0
    8a2e:	4a7b      	ldr	r2, [pc, #492]	; (8c1c <CompactSector+0x204>)
    8a30:	8013      	strh	r3, [r2, #0]
    s_compactItemLength = 0u;
    8a32:	4a7b      	ldr	r2, [pc, #492]	; (8c20 <CompactSector+0x208>)
    8a34:	8013      	strh	r3, [r2, #0]

    compactBlockOffset = 0;
    8a36:	4a7b      	ldr	r2, [pc, #492]	; (8c24 <CompactSector+0x20c>)
    8a38:	8013      	strh	r3, [r2, #0]
    currentCompactLength = 0;
    8a3a:	4a7b      	ldr	r2, [pc, #492]	; (8c28 <CompactSector+0x210>)
    8a3c:	8013      	strh	r3, [r2, #0]

    uint8_t sourceSector = s_sector;
    8a3e:	4b7b      	ldr	r3, [pc, #492]	; (8c2c <CompactSector+0x214>)
    8a40:	781b      	ldrb	r3, [r3, #0]
    8a42:	001f      	movs	r7, r3
    8a44:	9303      	str	r3, [sp, #12]

    // get the sector header for the source sector
    SectorHeader_t sectorHeader;
    D_Nv_Read(sourceSector, 0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE);
    8a46:	2312      	movs	r3, #18
    8a48:	aa0f      	add	r2, sp, #60	; 0x3c
    8a4a:	2100      	movs	r1, #0
    8a4c:	0038      	movs	r0, r7
    8a4e:	4c78      	ldr	r4, [pc, #480]	; (8c30 <CompactSector+0x218>)
    8a50:	47a0      	blx	r4

    uint32_t nextSequenceNumber = sectorHeader.sequenceNumber - 1uL;
    8a52:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a54:	9309      	str	r3, [sp, #36]	; 0x24

    // find and prepare a destination sector
    do
    {
        s_sector++;
    8a56:	4c75      	ldr	r4, [pc, #468]	; (8c2c <CompactSector+0x214>)
        if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
        {
            s_sector = FIRST_SECTOR;
    8a58:	0025      	movs	r5, r4
        s_sector++;
    8a5a:	0026      	movs	r6, r4
    8a5c:	e008      	b.n	8a70 <CompactSector+0x58>
    8a5e:	7033      	strb	r3, [r6, #0]
        }

        if ( s_sector == sourceSector )
    8a60:	4b72      	ldr	r3, [pc, #456]	; (8c2c <CompactSector+0x214>)
    8a62:	781b      	ldrb	r3, [r3, #0]
    8a64:	42bb      	cmp	r3, r7
    8a66:	d00b      	beq.n	8a80 <CompactSector+0x68>
        {
            // all sector failed to initialize
            assert(false);
        }
    }
    while ( !EraseSector());
    8a68:	4b72      	ldr	r3, [pc, #456]	; (8c34 <CompactSector+0x21c>)
    8a6a:	4798      	blx	r3
    8a6c:	2800      	cmp	r0, #0
    8a6e:	d10d      	bne.n	8a8c <CompactSector+0x74>
        s_sector++;
    8a70:	7823      	ldrb	r3, [r4, #0]
    8a72:	3301      	adds	r3, #1
    8a74:	b2db      	uxtb	r3, r3
        if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
    8a76:	2b01      	cmp	r3, #1
    8a78:	d9f1      	bls.n	8a5e <CompactSector+0x46>
            s_sector = FIRST_SECTOR;
    8a7a:	2300      	movs	r3, #0
    8a7c:	702b      	strb	r3, [r5, #0]
    8a7e:	e7ef      	b.n	8a60 <CompactSector+0x48>
            assert(false);
    8a80:	4b6d      	ldr	r3, [pc, #436]	; (8c38 <CompactSector+0x220>)
    8a82:	4a6e      	ldr	r2, [pc, #440]	; (8c3c <CompactSector+0x224>)
    8a84:	496e      	ldr	r1, [pc, #440]	; (8c40 <CompactSector+0x228>)
    8a86:	486f      	ldr	r0, [pc, #444]	; (8c44 <CompactSector+0x22c>)
    8a88:	4c6f      	ldr	r4, [pc, #444]	; (8c48 <CompactSector+0x230>)
    8a8a:	47a0      	blx	r4

    // Traverse the item cache, writing all items to the new sector
    for (uint8_t cacheIndex = 0; cacheIndex < s_itemCount; cacheIndex++) {
    8a8c:	4b6f      	ldr	r3, [pc, #444]	; (8c4c <CompactSector+0x234>)
    8a8e:	781b      	ldrb	r3, [r3, #0]
    8a90:	2b00      	cmp	r3, #0
    8a92:	d06a      	beq.n	8b6a <CompactSector+0x152>
    8a94:	2300      	movs	r3, #0
    8a96:	9306      	str	r3, [sp, #24]

        blockHeader.dataCrc =  ComputeDataCrc(sourceSector, lastBlockPointer, &blockHeader);

        blockHeader.headerCrc = ComputeHeaderCrc(&blockHeader);

        memset(dataBlock, 0xFF, sizeof(dataBlock));
    8a98:	3301      	adds	r3, #1
    8a9a:	33ff      	adds	r3, #255	; 0xff
    8a9c:	4699      	mov	r9, r3
            uint16_t bytesToGather;
            uint16_t inDataOffset = 0;

            do
            {
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    8a9e:	466a      	mov	r2, sp
    8aa0:	82d3      	strh	r3, [r2, #22]
            if (!GatherData(sourceSector, lastBlockPointer, 0u, blockHeader.itemLength, (dataBlock + BLOCK_HEADER_SIZE )))
    8aa2:	4b6b      	ldr	r3, [pc, #428]	; (8c50 <CompactSector+0x238>)
    8aa4:	3310      	adds	r3, #16
    8aa6:	9308      	str	r3, [sp, #32]
        Item_t *cache = &s_itemCache[cacheIndex];
    8aa8:	9b06      	ldr	r3, [sp, #24]
    8aaa:	9307      	str	r3, [sp, #28]
        uint16_t lastBlockPointer = cache->lastBlock;
    8aac:	009f      	lsls	r7, r3, #2
    8aae:	4b69      	ldr	r3, [pc, #420]	; (8c54 <CompactSector+0x23c>)
    8ab0:	469c      	mov	ip, r3
    8ab2:	4467      	add	r7, ip
    8ab4:	887b      	ldrh	r3, [r7, #2]
    8ab6:	001d      	movs	r5, r3
    8ab8:	9304      	str	r3, [sp, #16]
        D_Nv_Read(sourceSector, lastBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8aba:	2310      	movs	r3, #16
    8abc:	aa0b      	add	r2, sp, #44	; 0x2c
    8abe:	0029      	movs	r1, r5
    8ac0:	9803      	ldr	r0, [sp, #12]
    8ac2:	4680      	mov	r8, r0
    8ac4:	4c5a      	ldr	r4, [pc, #360]	; (8c30 <CompactSector+0x218>)
    8ac6:	47a0      	blx	r4
        blockHeader.blockOffset = 0x0000u;
    8ac8:	ae0b      	add	r6, sp, #44	; 0x2c
    8aca:	2300      	movs	r3, #0
    8acc:	80b3      	strh	r3, [r6, #4]
        blockHeader.blockLength = blockHeader.itemLength;
    8ace:	8934      	ldrh	r4, [r6, #8]
    8ad0:	80f4      	strh	r4, [r6, #6]
        blockHeader.previousBlock = 0x0000u;
    8ad2:	8173      	strh	r3, [r6, #10]
        blockHeader.writeCount = 0u;
    8ad4:	81b3      	strh	r3, [r6, #12]
        uint16_t currLength = BLOCK_HEADER_SIZE + blockHeader.itemLength;
    8ad6:	3410      	adds	r4, #16
    8ad8:	b2a4      	uxth	r4, r4
        blockHeader.dataCrc =  ComputeDataCrc(sourceSector, lastBlockPointer, &blockHeader);
    8ada:	0032      	movs	r2, r6
    8adc:	0029      	movs	r1, r5
    8ade:	4640      	mov	r0, r8
    8ae0:	4b5d      	ldr	r3, [pc, #372]	; (8c58 <CompactSector+0x240>)
    8ae2:	4798      	blx	r3
    8ae4:	8030      	strh	r0, [r6, #0]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    8ae6:	4a5d      	ldr	r2, [pc, #372]	; (8c5c <CompactSector+0x244>)
    8ae8:	210e      	movs	r1, #14
    8aea:	a80b      	add	r0, sp, #44	; 0x2c
    8aec:	4b5c      	ldr	r3, [pc, #368]	; (8c60 <CompactSector+0x248>)
    8aee:	4798      	blx	r3
        blockHeader.headerCrc = ComputeHeaderCrc(&blockHeader);
    8af0:	81f0      	strh	r0, [r6, #14]
        memset(dataBlock, 0xFF, sizeof(dataBlock));
    8af2:	4d57      	ldr	r5, [pc, #348]	; (8c50 <CompactSector+0x238>)
    8af4:	464a      	mov	r2, r9
    8af6:	21ff      	movs	r1, #255	; 0xff
    8af8:	0028      	movs	r0, r5
    8afa:	4b5a      	ldr	r3, [pc, #360]	; (8c64 <CompactSector+0x24c>)
    8afc:	4798      	blx	r3
        memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    8afe:	002b      	movs	r3, r5
    8b00:	ce07      	ldmia	r6!, {r0, r1, r2}
    8b02:	c307      	stmia	r3!, {r0, r1, r2}
    8b04:	6832      	ldr	r2, [r6, #0]
    8b06:	601a      	str	r2, [r3, #0]
        cache->lastBlock = s_sectorHead  + compactBlockOffset;
    8b08:	4b57      	ldr	r3, [pc, #348]	; (8c68 <CompactSector+0x250>)
    8b0a:	881b      	ldrh	r3, [r3, #0]
    8b0c:	4a45      	ldr	r2, [pc, #276]	; (8c24 <CompactSector+0x20c>)
    8b0e:	8812      	ldrh	r2, [r2, #0]
    8b10:	189b      	adds	r3, r3, r2
    8b12:	807b      	strh	r3, [r7, #2]
        if (currLength <= ROW_SIZE)
    8b14:	454c      	cmp	r4, r9
    8b16:	d904      	bls.n	8b22 <CompactSector+0x10a>
    8b18:	2600      	movs	r6, #0
    8b1a:	2310      	movs	r3, #16
              
              if (!GatherData(sourceSector, lastBlockPointer, inDataOffset, (bytesToGather - dataBlockOffset) , (dataBlock + dataBlockOffset)))
    8b1c:	4a4c      	ldr	r2, [pc, #304]	; (8c50 <CompactSector+0x238>)
    8b1e:	4690      	mov	r8, r2
    8b20:	e068      	b.n	8bf4 <CompactSector+0x1dc>
            if (!GatherData(sourceSector, lastBlockPointer, 0u, blockHeader.itemLength, (dataBlock + BLOCK_HEADER_SIZE )))
    8b22:	ab0b      	add	r3, sp, #44	; 0x2c
    8b24:	891b      	ldrh	r3, [r3, #8]
    8b26:	9a08      	ldr	r2, [sp, #32]
    8b28:	9200      	str	r2, [sp, #0]
    8b2a:	2200      	movs	r2, #0
    8b2c:	9904      	ldr	r1, [sp, #16]
    8b2e:	9803      	ldr	r0, [sp, #12]
    8b30:	4e4e      	ldr	r6, [pc, #312]	; (8c6c <CompactSector+0x254>)
    8b32:	47b0      	blx	r6
    8b34:	2800      	cmp	r0, #0
    8b36:	d063      	beq.n	8c00 <CompactSector+0x1e8>
            cache->lastBlock = s_sectorHead  + compactBlockOffset;
    8b38:	9b07      	ldr	r3, [sp, #28]
    8b3a:	009d      	lsls	r5, r3, #2
    8b3c:	4b45      	ldr	r3, [pc, #276]	; (8c54 <CompactSector+0x23c>)
    8b3e:	195d      	adds	r5, r3, r5
    8b40:	4b49      	ldr	r3, [pc, #292]	; (8c68 <CompactSector+0x250>)
    8b42:	881b      	ldrh	r3, [r3, #0]
    8b44:	4a37      	ldr	r2, [pc, #220]	; (8c24 <CompactSector+0x20c>)
    8b46:	8812      	ldrh	r2, [r2, #0]
    8b48:	189b      	adds	r3, r3, r2
    8b4a:	806b      	strh	r3, [r5, #2]
            if (!SmartCompacting(compactBlock, currLength))
    8b4c:	0021      	movs	r1, r4
    8b4e:	a814      	add	r0, sp, #80	; 0x50
    8b50:	4b47      	ldr	r3, [pc, #284]	; (8c70 <CompactSector+0x258>)
    8b52:	4798      	blx	r3
    8b54:	2800      	cmp	r0, #0
    8b56:	d053      	beq.n	8c00 <CompactSector+0x1e8>
    for (uint8_t cacheIndex = 0; cacheIndex < s_itemCount; cacheIndex++) {
    8b58:	9b06      	ldr	r3, [sp, #24]
    8b5a:	3301      	adds	r3, #1
    8b5c:	b2db      	uxtb	r3, r3
    8b5e:	001a      	movs	r2, r3
    8b60:	9306      	str	r3, [sp, #24]
    8b62:	4b3a      	ldr	r3, [pc, #232]	; (8c4c <CompactSector+0x234>)
    8b64:	781b      	ldrb	r3, [r3, #0]
    8b66:	4293      	cmp	r3, r2
    8b68:	d89e      	bhi.n	8aa8 <CompactSector+0x90>

            } while(currLength > 0);
        }
    }
    // if some uncommitted data avaialble, committ it
    if ( currentCompactLength)
    8b6a:	4b2f      	ldr	r3, [pc, #188]	; (8c28 <CompactSector+0x210>)
    8b6c:	881a      	ldrh	r2, [r3, #0]
    8b6e:	2a00      	cmp	r2, #0
    8b70:	d006      	beq.n	8b80 <CompactSector+0x168>
    {
        if ( !WriteAndCheck(s_sectorHead, compactBlock, currentCompactLength) )
    8b72:	4b3d      	ldr	r3, [pc, #244]	; (8c68 <CompactSector+0x250>)
    8b74:	8818      	ldrh	r0, [r3, #0]
    8b76:	a914      	add	r1, sp, #80	; 0x50
    8b78:	4b3e      	ldr	r3, [pc, #248]	; (8c74 <CompactSector+0x25c>)
    8b7a:	4798      	blx	r3
    8b7c:	1e04      	subs	r4, r0, #0
    8b7e:	d040      	beq.n	8c02 <CompactSector+0x1ea>
        {
            return false;
        }
    }
    // Just update sector header as per the the length of the data committed, no alignments
    UpdateSectorHead(currentCompactLength, ITEM_NO_ALIGNMENT);
    8b80:	4b29      	ldr	r3, [pc, #164]	; (8c28 <CompactSector+0x210>)
    8b82:	8818      	ldrh	r0, [r3, #0]
    8b84:	2100      	movs	r1, #0
    8b86:	4b3c      	ldr	r3, [pc, #240]	; (8c78 <CompactSector+0x260>)
    8b88:	4798      	blx	r3

    s_nextPageAddressAfterCompact = s_sectorHead;
    8b8a:	4b37      	ldr	r3, [pc, #220]	; (8c68 <CompactSector+0x250>)
    8b8c:	881a      	ldrh	r2, [r3, #0]
    8b8e:	4b3b      	ldr	r3, [pc, #236]	; (8c7c <CompactSector+0x264>)
    8b90:	801a      	strh	r2, [r3, #0]
    uint32_t nextSequenceNumber = sectorHeader.sequenceNumber - 1uL;
    8b92:	9809      	ldr	r0, [sp, #36]	; 0x24
    8b94:	3801      	subs	r0, #1
    //SYS_PostEvent(BC_EVENT_UPGRADE_STRUCT_CHANGED_ITEMS, 0U);

    // update nextPageAddressAfterCompact in the sector header
    // All items moved, so now we just need to Write the Sector Header with 
    // nextPageAddressAfterCompact at the end of compact sector operation
    if ( !WriteSectorHeader(nextSequenceNumber))
    8b96:	4b3a      	ldr	r3, [pc, #232]	; (8c80 <CompactSector+0x268>)
    8b98:	4798      	blx	r3
    8b9a:	1e04      	subs	r4, r0, #0
    8b9c:	d031      	beq.n	8c02 <CompactSector+0x1ea>
    {
        return false;
    }
    // Done with compact sector opration, Set the Sector Head to next page address for normal item update 
    UpdateSectorHead(0, ITEM_64BYTE_ALIGNMENT);
    8b9e:	2102      	movs	r1, #2
    8ba0:	2000      	movs	r0, #0
    8ba2:	4b35      	ldr	r3, [pc, #212]	; (8c78 <CompactSector+0x260>)
    8ba4:	4798      	blx	r3

    // schedule an erase of the source sector,Restart the timer if it is already running.
    s_sectorToErase = sourceSector;
    8ba6:	4b37      	ldr	r3, [pc, #220]	; (8c84 <CompactSector+0x26c>)
    8ba8:	466a      	mov	r2, sp
    8baa:	7b12      	ldrb	r2, [r2, #12]
    8bac:	701a      	strb	r2, [r3, #0]
    SYS_TimerStop(&eraseSectorTimer);
    8bae:	4d36      	ldr	r5, [pc, #216]	; (8c88 <CompactSector+0x270>)
    8bb0:	0028      	movs	r0, r5
    8bb2:	4b19      	ldr	r3, [pc, #100]	; (8c18 <CompactSector+0x200>)
    8bb4:	4798      	blx	r3
    SYS_TimerStart(&eraseSectorTimer);
    8bb6:	0028      	movs	r0, r5
    8bb8:	4b34      	ldr	r3, [pc, #208]	; (8c8c <CompactSector+0x274>)
    8bba:	4798      	blx	r3

    return true;
    8bbc:	e021      	b.n	8c02 <CompactSector+0x1ea>
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    8bbe:	b2ad      	uxth	r5, r5
              if (!GatherData(sourceSector, lastBlockPointer, inDataOffset, (bytesToGather - dataBlockOffset) , (dataBlock + dataBlockOffset)))
    8bc0:	1aef      	subs	r7, r5, r3
    8bc2:	b2ba      	uxth	r2, r7
    8bc4:	4693      	mov	fp, r2
    8bc6:	4443      	add	r3, r8
    8bc8:	9300      	str	r3, [sp, #0]
    8bca:	0013      	movs	r3, r2
    8bcc:	0032      	movs	r2, r6
    8bce:	9904      	ldr	r1, [sp, #16]
    8bd0:	9803      	ldr	r0, [sp, #12]
    8bd2:	4f26      	ldr	r7, [pc, #152]	; (8c6c <CompactSector+0x254>)
    8bd4:	47b8      	blx	r7
    8bd6:	2800      	cmp	r0, #0
    8bd8:	d012      	beq.n	8c00 <CompactSector+0x1e8>
              if (!SmartCompacting(compactBlock, bytesToGather))
    8bda:	0029      	movs	r1, r5
    8bdc:	a814      	add	r0, sp, #80	; 0x50
    8bde:	4b24      	ldr	r3, [pc, #144]	; (8c70 <CompactSector+0x258>)
    8be0:	4798      	blx	r3
    8be2:	2800      	cmp	r0, #0
    8be4:	d00c      	beq.n	8c00 <CompactSector+0x1e8>
              currLength -= bytesToGather;
    8be6:	1b64      	subs	r4, r4, r5
    8be8:	b2a4      	uxth	r4, r4
              inDataOffset += (bytesToGather - dataBlockOffset);
    8bea:	445e      	add	r6, fp
    8bec:	b2b6      	uxth	r6, r6
              dataBlockOffset = 0;
    8bee:	2300      	movs	r3, #0
            } while(currLength > 0);
    8bf0:	2c00      	cmp	r4, #0
    8bf2:	d0b1      	beq.n	8b58 <CompactSector+0x140>
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    8bf4:	1c25      	adds	r5, r4, #0
    8bf6:	454c      	cmp	r4, r9
    8bf8:	d9e1      	bls.n	8bbe <CompactSector+0x1a6>
    8bfa:	466a      	mov	r2, sp
    8bfc:	8ad5      	ldrh	r5, [r2, #22]
    8bfe:	e7de      	b.n	8bbe <CompactSector+0x1a6>
                return false;
    8c00:	2400      	movs	r4, #0
}
    8c02:	0020      	movs	r0, r4
    8c04:	b055      	add	sp, #340	; 0x154
    8c06:	bc3c      	pop	{r2, r3, r4, r5}
    8c08:	4690      	mov	r8, r2
    8c0a:	4699      	mov	r9, r3
    8c0c:	46a2      	mov	sl, r4
    8c0e:	46ab      	mov	fp, r5
    8c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8c12:	46c0      	nop			; (mov r8, r8)
    8c14:	20000324 	.word	0x20000324
    8c18:	0000c085 	.word	0x0000c085
    8c1c:	20000450 	.word	0x20000450
    8c20:	20000452 	.word	0x20000452
    8c24:	2000030c 	.word	0x2000030c
    8c28:	20000338 	.word	0x20000338
    8c2c:	20000478 	.word	0x20000478
    8c30:	00008379 	.word	0x00008379
    8c34:	000088b1 	.word	0x000088b1
    8c38:	000176a8 	.word	0x000176a8
    8c3c:	000177f8 	.word	0x000177f8
    8c40:	000003d5 	.word	0x000003d5
    8c44:	00017708 	.word	0x00017708
    8c48:	000154fd 	.word	0x000154fd
    8c4c:	20000470 	.word	0x20000470
    8c50:	2000033c 	.word	0x2000033c
    8c54:	20000454 	.word	0x20000454
    8c58:	00008719 	.word	0x00008719
    8c5c:	0000ffff 	.word	0x0000ffff
    8c60:	00008621 	.word	0x00008621
    8c64:	000155d1 	.word	0x000155d1
    8c68:	2000047a 	.word	0x2000047a
    8c6c:	00008661 	.word	0x00008661
    8c70:	00008971 	.word	0x00008971
    8c74:	000088e5 	.word	0x000088e5
    8c78:	000085e5 	.word	0x000085e5
    8c7c:	20000472 	.word	0x20000472
    8c80:	00008919 	.word	0x00008919
    8c84:	2000001a 	.word	0x2000001a
    8c88:	2000043c 	.word	0x2000043c
    8c8c:	0000c0f1 	.word	0x0000c0f1

00008c90 <compactSectorTimerFired>:
{
    8c90:	b510      	push	{r4, lr}
    if (!PowerSupplyTooLow()) {
    8c92:	4b07      	ldr	r3, [pc, #28]	; (8cb0 <compactSectorTimerFired+0x20>)
    8c94:	4798      	blx	r3
    8c96:	2800      	cmp	r0, #0
    8c98:	d000      	beq.n	8c9c <compactSectorTimerFired+0xc>
}
    8c9a:	bd10      	pop	{r4, pc}
      status = CompactSector();
    8c9c:	4b05      	ldr	r3, [pc, #20]	; (8cb4 <compactSectorTimerFired+0x24>)
    8c9e:	4798      	blx	r3
      assert(false);
    8ca0:	4b05      	ldr	r3, [pc, #20]	; (8cb8 <compactSectorTimerFired+0x28>)
    8ca2:	4a06      	ldr	r2, [pc, #24]	; (8cbc <compactSectorTimerFired+0x2c>)
    8ca4:	212c      	movs	r1, #44	; 0x2c
    8ca6:	31ff      	adds	r1, #255	; 0xff
    8ca8:	4805      	ldr	r0, [pc, #20]	; (8cc0 <compactSectorTimerFired+0x30>)
    8caa:	4c06      	ldr	r4, [pc, #24]	; (8cc4 <compactSectorTimerFired+0x34>)
    8cac:	47a0      	blx	r4
    8cae:	46c0      	nop			; (mov r8, r8)
    8cb0:	000085c9 	.word	0x000085c9
    8cb4:	00008a19 	.word	0x00008a19
    8cb8:	000176a8 	.word	0x000176a8
    8cbc:	000177c0 	.word	0x000177c0
    8cc0:	00017708 	.word	0x00017708
    8cc4:	000154fd 	.word	0x000154fd

00008cc8 <CompactSectorIfNeeded>:

static void CompactSectorIfNeeded(uint16_t immediateThreshold)
{
    8cc8:	b510      	push	{r4, lr}
    uint16_t freeSpace = SECTOR_SIZE - s_sectorHead;
    8cca:	4b12      	ldr	r3, [pc, #72]	; (8d14 <CompactSectorIfNeeded+0x4c>)
    8ccc:	881a      	ldrh	r2, [r3, #0]
    8cce:	2380      	movs	r3, #128	; 0x80
    8cd0:	019b      	lsls	r3, r3, #6
    8cd2:	1a9b      	subs	r3, r3, r2
    8cd4:	b29b      	uxth	r3, r3

    if ( freeSpace < immediateThreshold )
    8cd6:	4283      	cmp	r3, r0
    8cd8:	d303      	bcc.n	8ce2 <CompactSectorIfNeeded+0x1a>
        {
            assert(false);
        }
        return;
    }
    if ( freeSpace < PREEMPTIVE_COMPACT_SECTOR_THRESHOLD )
    8cda:	4a0f      	ldr	r2, [pc, #60]	; (8d18 <CompactSectorIfNeeded+0x50>)
    8cdc:	4293      	cmp	r3, r2
    8cde:	d90a      	bls.n	8cf6 <CompactSectorIfNeeded+0x2e>
        compactSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
        //TODO: check timer to be started or not
        //SYS_StartTimer(&compactSectorTimer);
        }
    }
}
    8ce0:	bd10      	pop	{r4, pc}
        if ( !CompactSector() )
    8ce2:	4b0e      	ldr	r3, [pc, #56]	; (8d1c <CompactSectorIfNeeded+0x54>)
    8ce4:	4798      	blx	r3
    8ce6:	2800      	cmp	r0, #0
    8ce8:	d1fa      	bne.n	8ce0 <CompactSectorIfNeeded+0x18>
            assert(false);
    8cea:	4b0d      	ldr	r3, [pc, #52]	; (8d20 <CompactSectorIfNeeded+0x58>)
    8cec:	4a0d      	ldr	r2, [pc, #52]	; (8d24 <CompactSectorIfNeeded+0x5c>)
    8cee:	490e      	ldr	r1, [pc, #56]	; (8d28 <CompactSectorIfNeeded+0x60>)
    8cf0:	480e      	ldr	r0, [pc, #56]	; (8d2c <CompactSectorIfNeeded+0x64>)
    8cf2:	4c0f      	ldr	r4, [pc, #60]	; (8d30 <CompactSectorIfNeeded+0x68>)
    8cf4:	47a0      	blx	r4
        if (!SYS_TimerStarted(&compactSectorTimer))
    8cf6:	480f      	ldr	r0, [pc, #60]	; (8d34 <CompactSectorIfNeeded+0x6c>)
    8cf8:	4b0f      	ldr	r3, [pc, #60]	; (8d38 <CompactSectorIfNeeded+0x70>)
    8cfa:	4798      	blx	r3
    8cfc:	2800      	cmp	r0, #0
    8cfe:	d1ef      	bne.n	8ce0 <CompactSectorIfNeeded+0x18>
        compactSectorTimer.handler = compactSectorTimerFired;
    8d00:	4b0c      	ldr	r3, [pc, #48]	; (8d34 <CompactSectorIfNeeded+0x6c>)
    8d02:	4a0e      	ldr	r2, [pc, #56]	; (8d3c <CompactSectorIfNeeded+0x74>)
    8d04:	611a      	str	r2, [r3, #16]
        compactSectorTimer.timeout = COMPACT_SECTOR_DELAY_MS;
    8d06:	4a0e      	ldr	r2, [pc, #56]	; (8d40 <CompactSectorIfNeeded+0x78>)
    8d08:	605a      	str	r2, [r3, #4]
        compactSectorTimer.interval = COMPACT_SECTOR_DELAY_MS;
    8d0a:	609a      	str	r2, [r3, #8]
        compactSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
    8d0c:	2200      	movs	r2, #0
    8d0e:	731a      	strb	r2, [r3, #12]
    8d10:	e7e6      	b.n	8ce0 <CompactSectorIfNeeded+0x18>
    8d12:	46c0      	nop			; (mov r8, r8)
    8d14:	2000047a 	.word	0x2000047a
    8d18:	0000080f 	.word	0x0000080f
    8d1c:	00008a19 	.word	0x00008a19
    8d20:	000176a8 	.word	0x000176a8
    8d24:	00017808 	.word	0x00017808
    8d28:	0000044e 	.word	0x0000044e
    8d2c:	00017708 	.word	0x00017708
    8d30:	000154fd 	.word	0x000154fd
    8d34:	20000324 	.word	0x20000324
    8d38:	0000c0c5 	.word	0x0000c0c5
    8d3c:	00008c91 	.word	0x00008c91
    8d40:	00002710 	.word	0x00002710

00008d44 <CompactItem>:

static S_Nv_ReturnValue_t CompactItem(void)
{
    8d44:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d46:	46de      	mov	lr, fp
    8d48:	4657      	mov	r7, sl
    8d4a:	464e      	mov	r6, r9
    8d4c:	4645      	mov	r5, r8
    8d4e:	b5e0      	push	{r5, r6, r7, lr}
    8d50:	b08b      	sub	sp, #44	; 0x2c
#if defined(ENABLE_NV_COMPACT_LOGGING)
    PRINTA(("CompactItem(id=%X)", s_compactItemId));
#endif

    if ( PowerSupplyTooLow() )
    8d52:	4b77      	ldr	r3, [pc, #476]	; (8f30 <CompactItem+0x1ec>)
    8d54:	4798      	blx	r3
    {
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    8d56:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    8d58:	2800      	cmp	r0, #0
    8d5a:	d007      	beq.n	8d6c <CompactItem+0x28>
    s_compactItemLength = 0u;

    cache->lastBlock = lastBlock;

    return S_Nv_ReturnValue_Ok;
}
    8d5c:	0018      	movs	r0, r3
    8d5e:	b00b      	add	sp, #44	; 0x2c
    8d60:	bc3c      	pop	{r2, r3, r4, r5}
    8d62:	4690      	mov	r8, r2
    8d64:	4699      	mov	r9, r3
    8d66:	46a2      	mov	sl, r4
    8d68:	46ab      	mov	fp, r5
    8d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ( (s_compactItemLength == 0u) && ( s_compactItemId == 0u ) )
    8d6c:	4b71      	ldr	r3, [pc, #452]	; (8f34 <CompactItem+0x1f0>)
    8d6e:	8818      	ldrh	r0, [r3, #0]
    8d70:	2800      	cmp	r0, #0
    8d72:	d146      	bne.n	8e02 <CompactItem+0xbe>
    8d74:	4b70      	ldr	r3, [pc, #448]	; (8f38 <CompactItem+0x1f4>)
    8d76:	881b      	ldrh	r3, [r3, #0]
    8d78:	2b00      	cmp	r3, #0
    8d7a:	d100      	bne.n	8d7e <CompactItem+0x3a>
    8d7c:	e0d0      	b.n	8f20 <CompactItem+0x1dc>
    Item_t *cache = FindItemCache(s_compactItemId);
    8d7e:	4b6e      	ldr	r3, [pc, #440]	; (8f38 <CompactItem+0x1f4>)
    8d80:	8818      	ldrh	r0, [r3, #0]
    8d82:	4b6e      	ldr	r3, [pc, #440]	; (8f3c <CompactItem+0x1f8>)
    8d84:	4798      	blx	r3
    8d86:	4683      	mov	fp, r0
    if ( cache == NULL )
    8d88:	2800      	cmp	r0, #0
    8d8a:	d100      	bne.n	8d8e <CompactItem+0x4a>
    8d8c:	e0ca      	b.n	8f24 <CompactItem+0x1e0>
    uint16_t blockPointer = cache->lastBlock;
    8d8e:	7882      	ldrb	r2, [r0, #2]
    8d90:	78c3      	ldrb	r3, [r0, #3]
    8d92:	021b      	lsls	r3, r3, #8
    8d94:	4313      	orrs	r3, r2
    8d96:	0019      	movs	r1, r3
    8d98:	9303      	str	r3, [sp, #12]
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8d9a:	4b69      	ldr	r3, [pc, #420]	; (8f40 <CompactItem+0x1fc>)
    8d9c:	7818      	ldrb	r0, [r3, #0]
    8d9e:	2310      	movs	r3, #16
    8da0:	aa06      	add	r2, sp, #24
    8da2:	4c68      	ldr	r4, [pc, #416]	; (8f44 <CompactItem+0x200>)
    8da4:	47a0      	blx	r4
    if (s_compactItemLength == 0)
    8da6:	4b63      	ldr	r3, [pc, #396]	; (8f34 <CompactItem+0x1f0>)
    8da8:	881a      	ldrh	r2, [r3, #0]
    8daa:	2a00      	cmp	r2, #0
    8dac:	d02e      	beq.n	8e0c <CompactItem+0xc8>
    uint16_t lastBlock = s_sectorHead;
    8dae:	4b66      	ldr	r3, [pc, #408]	; (8f48 <CompactItem+0x204>)
    8db0:	881b      	ldrh	r3, [r3, #0]
    8db2:	9305      	str	r3, [sp, #20]
    uint16_t bytesToGather = blockHeader.itemLength;
    8db4:	ab06      	add	r3, sp, #24
    8db6:	891b      	ldrh	r3, [r3, #8]
        blockHeader.itemLength = s_compactItemLength;
    8db8:	a906      	add	r1, sp, #24
    8dba:	810a      	strh	r2, [r1, #8]
    8dbc:	1c19      	adds	r1, r3, #0
    8dbe:	4293      	cmp	r3, r2
    8dc0:	d900      	bls.n	8dc4 <CompactItem+0x80>
    8dc2:	1c11      	adds	r1, r2, #0
    8dc4:	b28b      	uxth	r3, r1
    blockHeader.blockOffset = 0u;
    8dc6:	aa06      	add	r2, sp, #24
    8dc8:	2100      	movs	r1, #0
    8dca:	8091      	strh	r1, [r2, #4]
    blockHeader.blockLength = blockHeader.itemLength;
    8dcc:	8910      	ldrh	r0, [r2, #8]
    8dce:	80d0      	strh	r0, [r2, #6]
    blockHeader.previousBlock = 0x0000u;
    8dd0:	8151      	strh	r1, [r2, #10]
    blockHeader.writeCount = 0u;
    8dd2:	8191      	strh	r1, [r2, #12]
    uint16_t currLength = BLOCK_HEADER_SIZE + bytesToGather;
    8dd4:	001c      	movs	r4, r3
    8dd6:	3410      	adds	r4, #16
    8dd8:	b2a4      	uxth	r4, r4
    memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    8dda:	495c      	ldr	r1, [pc, #368]	; (8f4c <CompactItem+0x208>)
    8ddc:	ca61      	ldmia	r2!, {r0, r5, r6}
    8dde:	c161      	stmia	r1!, {r0, r5, r6}
    8de0:	6812      	ldr	r2, [r2, #0]
    8de2:	600a      	str	r2, [r1, #0]
    if (currLength <= ROW_SIZE)
    8de4:	2280      	movs	r2, #128	; 0x80
    8de6:	0052      	lsls	r2, r2, #1
    8de8:	4294      	cmp	r4, r2
    8dea:	d939      	bls.n	8e60 <CompactItem+0x11c>
    8dec:	2600      	movs	r6, #0
    8dee:	2310      	movs	r3, #16
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    8df0:	2280      	movs	r2, #128	; 0x80
    8df2:	0052      	lsls	r2, r2, #1
    8df4:	4691      	mov	r9, r2
    8df6:	4669      	mov	r1, sp
    8df8:	824a      	strh	r2, [r1, #18]
            if (!GatherData(s_sector, blockPointer, inDataOffset, bytesToGatherAndCommit - dataBlockOffset , (dataBlock + dataBlockOffset)))
    8dfa:	4a51      	ldr	r2, [pc, #324]	; (8f40 <CompactItem+0x1fc>)
    8dfc:	4692      	mov	sl, r2
    8dfe:	001a      	movs	r2, r3
    8e00:	e088      	b.n	8f14 <CompactItem+0x1d0>
        CompactSectorIfNeeded(s_compactItemLength + BLOCK_HEADER_SIZE);
    8e02:	3010      	adds	r0, #16
    8e04:	b280      	uxth	r0, r0
    8e06:	4b52      	ldr	r3, [pc, #328]	; (8f50 <CompactItem+0x20c>)
    8e08:	4798      	blx	r3
    8e0a:	e7b8      	b.n	8d7e <CompactItem+0x3a>
        CompactSectorIfNeeded(blockHeader.itemLength + BLOCK_HEADER_SIZE);
    8e0c:	ab06      	add	r3, sp, #24
    8e0e:	8918      	ldrh	r0, [r3, #8]
    8e10:	3010      	adds	r0, #16
    8e12:	b280      	uxth	r0, r0
    8e14:	4b4e      	ldr	r3, [pc, #312]	; (8f50 <CompactItem+0x20c>)
    8e16:	4798      	blx	r3
        cache = FindItemCache(s_compactItemId);
    8e18:	4b47      	ldr	r3, [pc, #284]	; (8f38 <CompactItem+0x1f4>)
    8e1a:	8818      	ldrh	r0, [r3, #0]
    8e1c:	4b47      	ldr	r3, [pc, #284]	; (8f3c <CompactItem+0x1f8>)
    8e1e:	4798      	blx	r3
    8e20:	4683      	mov	fp, r0
        assert(cache != NULL);
    8e22:	2800      	cmp	r0, #0
    8e24:	d015      	beq.n	8e52 <CompactItem+0x10e>
        blockPointer = cache->lastBlock;
    8e26:	7882      	ldrb	r2, [r0, #2]
    8e28:	78c3      	ldrb	r3, [r0, #3]
    8e2a:	021b      	lsls	r3, r3, #8
    8e2c:	4313      	orrs	r3, r2
    8e2e:	0019      	movs	r1, r3
    8e30:	9303      	str	r3, [sp, #12]
        D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8e32:	ac06      	add	r4, sp, #24
    8e34:	4b42      	ldr	r3, [pc, #264]	; (8f40 <CompactItem+0x1fc>)
    8e36:	7818      	ldrb	r0, [r3, #0]
    8e38:	2310      	movs	r3, #16
    8e3a:	0022      	movs	r2, r4
    8e3c:	4d41      	ldr	r5, [pc, #260]	; (8f44 <CompactItem+0x200>)
    8e3e:	47a8      	blx	r5
    uint16_t lastBlock = s_sectorHead;
    8e40:	4b41      	ldr	r3, [pc, #260]	; (8f48 <CompactItem+0x204>)
    8e42:	881b      	ldrh	r3, [r3, #0]
    8e44:	9305      	str	r3, [sp, #20]
    uint16_t bytesToGather = blockHeader.itemLength;
    8e46:	8923      	ldrh	r3, [r4, #8]
    if ( s_compactItemLength != 0u )
    8e48:	4a3a      	ldr	r2, [pc, #232]	; (8f34 <CompactItem+0x1f0>)
    8e4a:	8812      	ldrh	r2, [r2, #0]
    8e4c:	2a00      	cmp	r2, #0
    8e4e:	d0ba      	beq.n	8dc6 <CompactItem+0x82>
    8e50:	e7b2      	b.n	8db8 <CompactItem+0x74>
        assert(cache != NULL);
    8e52:	4b40      	ldr	r3, [pc, #256]	; (8f54 <CompactItem+0x210>)
    8e54:	4a40      	ldr	r2, [pc, #256]	; (8f58 <CompactItem+0x214>)
    8e56:	2191      	movs	r1, #145	; 0x91
    8e58:	00c9      	lsls	r1, r1, #3
    8e5a:	4840      	ldr	r0, [pc, #256]	; (8f5c <CompactItem+0x218>)
    8e5c:	4c40      	ldr	r4, [pc, #256]	; (8f60 <CompactItem+0x21c>)
    8e5e:	47a0      	blx	r4
        if (!GatherData(s_sector, blockPointer, 0u, bytesToGather, (dataBlock + BLOCK_HEADER_SIZE )))
    8e60:	4a37      	ldr	r2, [pc, #220]	; (8f40 <CompactItem+0x1fc>)
    8e62:	7810      	ldrb	r0, [r2, #0]
    8e64:	4a39      	ldr	r2, [pc, #228]	; (8f4c <CompactItem+0x208>)
    8e66:	3210      	adds	r2, #16
    8e68:	9200      	str	r2, [sp, #0]
    8e6a:	2200      	movs	r2, #0
    8e6c:	9903      	ldr	r1, [sp, #12]
    8e6e:	4c3d      	ldr	r4, [pc, #244]	; (8f64 <CompactItem+0x220>)
    8e70:	47a0      	blx	r4
            return S_Nv_ReturnValue_Failure;
    8e72:	2301      	movs	r3, #1
        if (!GatherData(s_sector, blockPointer, 0u, bytesToGather, (dataBlock + BLOCK_HEADER_SIZE )))
    8e74:	2800      	cmp	r0, #0
    8e76:	d100      	bne.n	8e7a <CompactItem+0x136>
    8e78:	e770      	b.n	8d5c <CompactItem+0x18>
        memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    8e7a:	4934      	ldr	r1, [pc, #208]	; (8f4c <CompactItem+0x208>)
    8e7c:	ab06      	add	r3, sp, #24
    8e7e:	000a      	movs	r2, r1
    8e80:	0018      	movs	r0, r3
    8e82:	c870      	ldmia	r0!, {r4, r5, r6}
    8e84:	c270      	stmia	r2!, {r4, r5, r6}
    8e86:	6800      	ldr	r0, [r0, #0]
    8e88:	6010      	str	r0, [r2, #0]
        if ( !WriteAndCheck(s_sectorHead, dataBlock, blockHeader.blockLength + BLOCK_HEADER_SIZE) )
    8e8a:	88da      	ldrh	r2, [r3, #6]
    8e8c:	3210      	adds	r2, #16
    8e8e:	b292      	uxth	r2, r2
    8e90:	4b2d      	ldr	r3, [pc, #180]	; (8f48 <CompactItem+0x204>)
    8e92:	8818      	ldrh	r0, [r3, #0]
    8e94:	4b34      	ldr	r3, [pc, #208]	; (8f68 <CompactItem+0x224>)
    8e96:	4798      	blx	r3
            return false;
    8e98:	2300      	movs	r3, #0
        if ( !WriteAndCheck(s_sectorHead, dataBlock, blockHeader.blockLength + BLOCK_HEADER_SIZE) )
    8e9a:	2800      	cmp	r0, #0
    8e9c:	d100      	bne.n	8ea0 <CompactItem+0x15c>
    8e9e:	e75d      	b.n	8d5c <CompactItem+0x18>
        UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_64BYTE_ALIGNMENT);
    8ea0:	ab06      	add	r3, sp, #24
    8ea2:	88d8      	ldrh	r0, [r3, #6]
    8ea4:	3010      	adds	r0, #16
    8ea6:	b280      	uxth	r0, r0
    8ea8:	2102      	movs	r1, #2
    8eaa:	4b30      	ldr	r3, [pc, #192]	; (8f6c <CompactItem+0x228>)
    8eac:	4798      	blx	r3
    s_compactItemId = 0u;
    8eae:	2300      	movs	r3, #0
    8eb0:	4a21      	ldr	r2, [pc, #132]	; (8f38 <CompactItem+0x1f4>)
    8eb2:	8013      	strh	r3, [r2, #0]
    s_compactItemLength = 0u;
    8eb4:	4a1f      	ldr	r2, [pc, #124]	; (8f34 <CompactItem+0x1f0>)
    8eb6:	8013      	strh	r3, [r2, #0]
    cache->lastBlock = lastBlock;
    8eb8:	465b      	mov	r3, fp
    8eba:	9905      	ldr	r1, [sp, #20]
    8ebc:	7099      	strb	r1, [r3, #2]
    8ebe:	0a0b      	lsrs	r3, r1, #8
    8ec0:	465a      	mov	r2, fp
    8ec2:	70d3      	strb	r3, [r2, #3]
    return S_Nv_ReturnValue_Ok;
    8ec4:	2300      	movs	r3, #0
    8ec6:	e749      	b.n	8d5c <CompactItem+0x18>
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    8ec8:	b2ad      	uxth	r5, r5
            if (!GatherData(s_sector, blockPointer, inDataOffset, bytesToGatherAndCommit - dataBlockOffset , (dataBlock + dataBlockOffset)))
    8eca:	1aaf      	subs	r7, r5, r2
    8ecc:	b2bb      	uxth	r3, r7
    8ece:	0019      	movs	r1, r3
    8ed0:	4653      	mov	r3, sl
    8ed2:	7818      	ldrb	r0, [r3, #0]
    8ed4:	4b1d      	ldr	r3, [pc, #116]	; (8f4c <CompactItem+0x208>)
    8ed6:	189b      	adds	r3, r3, r2
    8ed8:	9300      	str	r3, [sp, #0]
    8eda:	9102      	str	r1, [sp, #8]
    8edc:	000b      	movs	r3, r1
    8ede:	0032      	movs	r2, r6
    8ee0:	9903      	ldr	r1, [sp, #12]
    8ee2:	4f20      	ldr	r7, [pc, #128]	; (8f64 <CompactItem+0x220>)
    8ee4:	47b8      	blx	r7
    8ee6:	2800      	cmp	r0, #0
    8ee8:	d01e      	beq.n	8f28 <CompactItem+0x1e4>
            if ( !WriteAndCheck(s_sectorHead, dataBlock, bytesToGatherAndCommit) )
    8eea:	4b17      	ldr	r3, [pc, #92]	; (8f48 <CompactItem+0x204>)
    8eec:	8818      	ldrh	r0, [r3, #0]
    8eee:	002a      	movs	r2, r5
    8ef0:	4916      	ldr	r1, [pc, #88]	; (8f4c <CompactItem+0x208>)
    8ef2:	4b1d      	ldr	r3, [pc, #116]	; (8f68 <CompactItem+0x224>)
    8ef4:	4798      	blx	r3
    8ef6:	2800      	cmp	r0, #0
    8ef8:	d018      	beq.n	8f2c <CompactItem+0x1e8>
            UpdateSectorHead(bytesToGatherAndCommit, ITEM_64BYTE_ALIGNMENT);
    8efa:	2102      	movs	r1, #2
    8efc:	0028      	movs	r0, r5
    8efe:	4b1b      	ldr	r3, [pc, #108]	; (8f6c <CompactItem+0x228>)
    8f00:	4798      	blx	r3
            currLength -= bytesToGatherAndCommit;
    8f02:	1b64      	subs	r4, r4, r5
    8f04:	b2a4      	uxth	r4, r4
            inDataOffset += (bytesToGatherAndCommit - dataBlockOffset);
    8f06:	9902      	ldr	r1, [sp, #8]
    8f08:	468c      	mov	ip, r1
    8f0a:	4466      	add	r6, ip
    8f0c:	b2b6      	uxth	r6, r6
            dataBlockOffset = 0;
    8f0e:	2200      	movs	r2, #0
        } while(currLength > 0);
    8f10:	2c00      	cmp	r4, #0
    8f12:	d0cc      	beq.n	8eae <CompactItem+0x16a>
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    8f14:	1c25      	adds	r5, r4, #0
    8f16:	454c      	cmp	r4, r9
    8f18:	d9d6      	bls.n	8ec8 <CompactItem+0x184>
    8f1a:	466b      	mov	r3, sp
    8f1c:	8a5d      	ldrh	r5, [r3, #18]
    8f1e:	e7d3      	b.n	8ec8 <CompactItem+0x184>
        return S_Nv_ReturnValue_Ok;
    8f20:	2300      	movs	r3, #0
    8f22:	e71b      	b.n	8d5c <CompactItem+0x18>
        return S_Nv_ReturnValue_Ok;
    8f24:	2300      	movs	r3, #0
    8f26:	e719      	b.n	8d5c <CompactItem+0x18>
                return S_Nv_ReturnValue_Failure;
    8f28:	2301      	movs	r3, #1
    8f2a:	e717      	b.n	8d5c <CompactItem+0x18>
                return false;
    8f2c:	2300      	movs	r3, #0
    8f2e:	e715      	b.n	8d5c <CompactItem+0x18>
    8f30:	000085c9 	.word	0x000085c9
    8f34:	20000452 	.word	0x20000452
    8f38:	20000450 	.word	0x20000450
    8f3c:	000087c1 	.word	0x000087c1
    8f40:	20000478 	.word	0x20000478
    8f44:	00008379 	.word	0x00008379
    8f48:	2000047a 	.word	0x2000047a
    8f4c:	2000033c 	.word	0x2000033c
    8f50:	00008cc9 	.word	0x00008cc9
    8f54:	00017698 	.word	0x00017698
    8f58:	00017820 	.word	0x00017820
    8f5c:	00017708 	.word	0x00017708
    8f60:	000154fd 	.word	0x000154fd
    8f64:	00008661 	.word	0x00008661
    8f68:	000088e5 	.word	0x000088e5
    8f6c:	000085e5 	.word	0x000085e5

00008f70 <compactItemTimerFired>:
{
    8f70:	b510      	push	{r4, lr}
    (void)CompactItem();
    8f72:	4b01      	ldr	r3, [pc, #4]	; (8f78 <compactItemTimerFired+0x8>)
    8f74:	4798      	blx	r3
}
    8f76:	bd10      	pop	{r4, pc}
    8f78:	00008d45 	.word	0x00008d45

00008f7c <WriteDataBlockAndHeader>:
{
    8f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f7e:	46de      	mov	lr, fp
    8f80:	4657      	mov	r7, sl
    8f82:	464e      	mov	r6, r9
    8f84:	4645      	mov	r5, r8
    8f86:	b5e0      	push	{r5, r6, r7, lr}
    8f88:	b083      	sub	sp, #12
    8f8a:	0004      	movs	r4, r0
    8f8c:	468a      	mov	sl, r1
    memset(dataBlock, 0xFF, sizeof(dataBlock));
    8f8e:	4d46      	ldr	r5, [pc, #280]	; (90a8 <WriteDataBlockAndHeader+0x12c>)
    8f90:	2280      	movs	r2, #128	; 0x80
    8f92:	0052      	lsls	r2, r2, #1
    8f94:	21ff      	movs	r1, #255	; 0xff
    8f96:	0028      	movs	r0, r5
    8f98:	4b44      	ldr	r3, [pc, #272]	; (90ac <WriteDataBlockAndHeader+0x130>)
    8f9a:	4798      	blx	r3
    pBlockHeader->dataCrc = ComputeCrc(pData, pBlockHeader->blockLength, 0xFFFF);
    8f9c:	4e44      	ldr	r6, [pc, #272]	; (90b0 <WriteDataBlockAndHeader+0x134>)
    8f9e:	79a3      	ldrb	r3, [r4, #6]
    8fa0:	79e1      	ldrb	r1, [r4, #7]
    8fa2:	0209      	lsls	r1, r1, #8
    8fa4:	4319      	orrs	r1, r3
    8fa6:	0032      	movs	r2, r6
    8fa8:	4650      	mov	r0, sl
    8faa:	4f42      	ldr	r7, [pc, #264]	; (90b4 <WriteDataBlockAndHeader+0x138>)
    8fac:	47b8      	blx	r7
    8fae:	7020      	strb	r0, [r4, #0]
    8fb0:	0a00      	lsrs	r0, r0, #8
    8fb2:	7060      	strb	r0, [r4, #1]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    8fb4:	0032      	movs	r2, r6
    8fb6:	210e      	movs	r1, #14
    8fb8:	0020      	movs	r0, r4
    8fba:	47b8      	blx	r7
    pBlockHeader->headerCrc = ComputeHeaderCrc(pBlockHeader);
    8fbc:	73a0      	strb	r0, [r4, #14]
    8fbe:	0a00      	lsrs	r0, r0, #8
    8fc0:	73e0      	strb	r0, [r4, #15]
    memcpy(dataBlock, pBlockHeader, BLOCK_HEADER_SIZE);
    8fc2:	2210      	movs	r2, #16
    8fc4:	0021      	movs	r1, r4
    8fc6:	0028      	movs	r0, r5
    8fc8:	4b3b      	ldr	r3, [pc, #236]	; (90b8 <WriteDataBlockAndHeader+0x13c>)
    8fca:	4798      	blx	r3
    currentLength = pBlockHeader->blockLength + BLOCK_HEADER_SIZE;
    8fcc:	79a3      	ldrb	r3, [r4, #6]
    8fce:	79e2      	ldrb	r2, [r4, #7]
    8fd0:	0212      	lsls	r2, r2, #8
    8fd2:	431a      	orrs	r2, r3
    8fd4:	0015      	movs	r5, r2
    8fd6:	3510      	adds	r5, #16
    8fd8:	b2ad      	uxth	r5, r5
    if (pData != NULL )
    8fda:	4653      	mov	r3, sl
    8fdc:	2b00      	cmp	r3, #0
    8fde:	d012      	beq.n	9006 <WriteDataBlockAndHeader+0x8a>
        if(currentLength <= ROW_SIZE)
    8fe0:	2380      	movs	r3, #128	; 0x80
    8fe2:	005b      	lsls	r3, r3, #1
    8fe4:	429d      	cmp	r5, r3
    8fe6:	d909      	bls.n	8ffc <WriteDataBlockAndHeader+0x80>
    8fe8:	2600      	movs	r6, #0
    8fea:	2710      	movs	r7, #16
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    8fec:	2380      	movs	r3, #128	; 0x80
    8fee:	005b      	lsls	r3, r3, #1
    8ff0:	469b      	mov	fp, r3
    8ff2:	466a      	mov	r2, sp
    8ff4:	80d3      	strh	r3, [r2, #6]
                memcpy(dataBlock + dataBlockOffset, pData + inDataOffset, bytesToCommit - dataBlockOffset);
    8ff6:	4b2c      	ldr	r3, [pc, #176]	; (90a8 <WriteDataBlockAndHeader+0x12c>)
    8ff8:	4699      	mov	r9, r3
    8ffa:	e045      	b.n	9088 <WriteDataBlockAndHeader+0x10c>
            memcpy(dataBlock + BLOCK_HEADER_SIZE , pData, pBlockHeader->blockLength);
    8ffc:	4651      	mov	r1, sl
    8ffe:	482a      	ldr	r0, [pc, #168]	; (90a8 <WriteDataBlockAndHeader+0x12c>)
    9000:	3010      	adds	r0, #16
    9002:	4b2d      	ldr	r3, [pc, #180]	; (90b8 <WriteDataBlockAndHeader+0x13c>)
    9004:	4798      	blx	r3
    if ( !WriteAndCheck(s_sectorHead, dataBlock, MIN((BLOCK_HEADER_SIZE + pBlockHeader->blockLength), ROW_SIZE)) )
    9006:	79a3      	ldrb	r3, [r4, #6]
    9008:	79e2      	ldrb	r2, [r4, #7]
    900a:	0212      	lsls	r2, r2, #8
    900c:	431a      	orrs	r2, r3
    900e:	3210      	adds	r2, #16
    9010:	2380      	movs	r3, #128	; 0x80
    9012:	005b      	lsls	r3, r3, #1
    9014:	429a      	cmp	r2, r3
    9016:	dd00      	ble.n	901a <WriteDataBlockAndHeader+0x9e>
    9018:	001a      	movs	r2, r3
    901a:	b292      	uxth	r2, r2
    901c:	4b27      	ldr	r3, [pc, #156]	; (90bc <WriteDataBlockAndHeader+0x140>)
    901e:	8818      	ldrh	r0, [r3, #0]
    9020:	4921      	ldr	r1, [pc, #132]	; (90a8 <WriteDataBlockAndHeader+0x12c>)
    9022:	4b27      	ldr	r3, [pc, #156]	; (90c0 <WriteDataBlockAndHeader+0x144>)
    9024:	4798      	blx	r3
    9026:	4680      	mov	r8, r0
    9028:	2800      	cmp	r0, #0
    902a:	d033      	beq.n	9094 <WriteDataBlockAndHeader+0x118>
    UpdateSectorHead((pBlockHeader->blockLength + BLOCK_HEADER_SIZE), ITEM_64BYTE_ALIGNMENT );
    902c:	79a3      	ldrb	r3, [r4, #6]
    902e:	79e0      	ldrb	r0, [r4, #7]
    9030:	0200      	lsls	r0, r0, #8
    9032:	4318      	orrs	r0, r3
    9034:	3010      	adds	r0, #16
    9036:	b280      	uxth	r0, r0
    9038:	2102      	movs	r1, #2
    903a:	4b22      	ldr	r3, [pc, #136]	; (90c4 <WriteDataBlockAndHeader+0x148>)
    903c:	4798      	blx	r3
}
    903e:	4640      	mov	r0, r8
    9040:	b003      	add	sp, #12
    9042:	bc3c      	pop	{r2, r3, r4, r5}
    9044:	4690      	mov	r8, r2
    9046:	4699      	mov	r9, r3
    9048:	46a2      	mov	sl, r4
    904a:	46ab      	mov	fp, r5
    904c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    904e:	b2a4      	uxth	r4, r4
                memcpy(dataBlock + dataBlockOffset, pData + inDataOffset, bytesToCommit - dataBlockOffset);
    9050:	464b      	mov	r3, r9
    9052:	19d8      	adds	r0, r3, r7
    9054:	1be2      	subs	r2, r4, r7
    9056:	4653      	mov	r3, sl
    9058:	1999      	adds	r1, r3, r6
    905a:	4b17      	ldr	r3, [pc, #92]	; (90b8 <WriteDataBlockAndHeader+0x13c>)
    905c:	4798      	blx	r3
                if ( !WriteAndCheck(s_sectorHead, dataBlock, bytesToCommit))
    905e:	4b17      	ldr	r3, [pc, #92]	; (90bc <WriteDataBlockAndHeader+0x140>)
    9060:	8818      	ldrh	r0, [r3, #0]
    9062:	0022      	movs	r2, r4
    9064:	4649      	mov	r1, r9
    9066:	4b16      	ldr	r3, [pc, #88]	; (90c0 <WriteDataBlockAndHeader+0x144>)
    9068:	4798      	blx	r3
    906a:	4680      	mov	r8, r0
    906c:	2800      	cmp	r0, #0
    906e:	d0e6      	beq.n	903e <WriteDataBlockAndHeader+0xc2>
                UpdateSectorHead(bytesToCommit, ITEM_64BYTE_ALIGNMENT);
    9070:	2102      	movs	r1, #2
    9072:	0020      	movs	r0, r4
    9074:	4b13      	ldr	r3, [pc, #76]	; (90c4 <WriteDataBlockAndHeader+0x148>)
    9076:	4798      	blx	r3
                currentLength -= bytesToCommit;
    9078:	1b2d      	subs	r5, r5, r4
    907a:	b2ad      	uxth	r5, r5
                inDataOffset += (bytesToCommit - dataBlockOffset);
    907c:	1be4      	subs	r4, r4, r7
    907e:	1936      	adds	r6, r6, r4
    9080:	b2b6      	uxth	r6, r6
                dataBlockOffset = 0;
    9082:	2700      	movs	r7, #0
            } while(currentLength > 0);
    9084:	2d00      	cmp	r5, #0
    9086:	d0da      	beq.n	903e <WriteDataBlockAndHeader+0xc2>
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    9088:	1c2c      	adds	r4, r5, #0
    908a:	455d      	cmp	r5, fp
    908c:	d9df      	bls.n	904e <WriteDataBlockAndHeader+0xd2>
    908e:	466b      	mov	r3, sp
    9090:	88dc      	ldrh	r4, [r3, #6]
    9092:	e7dc      	b.n	904e <WriteDataBlockAndHeader+0xd2>
        UpdateSectorHead((pBlockHeader->blockLength + BLOCK_HEADER_SIZE), ITEM_64BYTE_ALIGNMENT);
    9094:	79a3      	ldrb	r3, [r4, #6]
    9096:	79e0      	ldrb	r0, [r4, #7]
    9098:	0200      	lsls	r0, r0, #8
    909a:	4318      	orrs	r0, r3
    909c:	3010      	adds	r0, #16
    909e:	b280      	uxth	r0, r0
    90a0:	2102      	movs	r1, #2
    90a2:	4b08      	ldr	r3, [pc, #32]	; (90c4 <WriteDataBlockAndHeader+0x148>)
    90a4:	4798      	blx	r3
        return false;
    90a6:	e7ca      	b.n	903e <WriteDataBlockAndHeader+0xc2>
    90a8:	2000033c 	.word	0x2000033c
    90ac:	000155d1 	.word	0x000155d1
    90b0:	0000ffff 	.word	0x0000ffff
    90b4:	00008621 	.word	0x00008621
    90b8:	000155bf 	.word	0x000155bf
    90bc:	2000047a 	.word	0x2000047a
    90c0:	000088e5 	.word	0x000088e5
    90c4:	000085e5 	.word	0x000085e5

000090c8 <S_Nv_Write_Impl>:
#if defined(S_XNV_LOGGING)
static S_Nv_ReturnValue_t S_Nv_Write_Original(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#else
S_Nv_ReturnValue_t S_Nv_Write_Impl(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#endif
{
    90c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    90ca:	46ce      	mov	lr, r9
    90cc:	4647      	mov	r7, r8
    90ce:	b580      	push	{r7, lr}
    90d0:	b087      	sub	sp, #28
    90d2:	0004      	movs	r4, r0
    90d4:	9101      	str	r1, [sp, #4]
    90d6:	0015      	movs	r5, r2
    90d8:	001f      	movs	r7, r3
    assert((id != 0u) && (pData != NULL));
    90da:	2800      	cmp	r0, #0
    90dc:	d00c      	beq.n	90f8 <S_Nv_Write_Impl+0x30>
    90de:	2b00      	cmp	r3, #0
    90e0:	d00a      	beq.n	90f8 <S_Nv_Write_Impl+0x30>

    if ( PowerSupplyTooLow() )
    90e2:	4b35      	ldr	r3, [pc, #212]	; (91b8 <S_Nv_Write_Impl+0xf0>)
    90e4:	4798      	blx	r3
    {
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    90e6:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    90e8:	2800      	cmp	r0, #0
    90ea:	d00b      	beq.n	9104 <S_Nv_Write_Impl+0x3c>
        //SYS_StartTimer(&compactItemTimer);
        }
    }

    return S_Nv_ReturnValue_Ok;
}
    90ec:	0018      	movs	r0, r3
    90ee:	b007      	add	sp, #28
    90f0:	bc0c      	pop	{r2, r3}
    90f2:	4690      	mov	r8, r2
    90f4:	4699      	mov	r9, r3
    90f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((id != 0u) && (pData != NULL));
    90f8:	4b30      	ldr	r3, [pc, #192]	; (91bc <S_Nv_Write_Impl+0xf4>)
    90fa:	4a31      	ldr	r2, [pc, #196]	; (91c0 <S_Nv_Write_Impl+0xf8>)
    90fc:	4931      	ldr	r1, [pc, #196]	; (91c4 <S_Nv_Write_Impl+0xfc>)
    90fe:	4832      	ldr	r0, [pc, #200]	; (91c8 <S_Nv_Write_Impl+0x100>)
    9100:	4c32      	ldr	r4, [pc, #200]	; (91cc <S_Nv_Write_Impl+0x104>)
    9102:	47a0      	blx	r4
    CompactSectorIfNeeded(BLOCK_HEADER_SIZE + dataLength);
    9104:	0028      	movs	r0, r5
    9106:	3010      	adds	r0, #16
    9108:	b280      	uxth	r0, r0
    910a:	4b31      	ldr	r3, [pc, #196]	; (91d0 <S_Nv_Write_Impl+0x108>)
    910c:	4798      	blx	r3
    Item_t *cache = FindItemCache(id);
    910e:	0020      	movs	r0, r4
    9110:	4b30      	ldr	r3, [pc, #192]	; (91d4 <S_Nv_Write_Impl+0x10c>)
    9112:	4798      	blx	r3
    9114:	0006      	movs	r6, r0
        return S_Nv_ReturnValue_DoesNotExist;
    9116:	2303      	movs	r3, #3
    if ( cache == NULL )
    9118:	2800      	cmp	r0, #0
    911a:	d0e7      	beq.n	90ec <S_Nv_Write_Impl+0x24>
    uint16_t blockPointer = cache->lastBlock;
    911c:	7883      	ldrb	r3, [r0, #2]
    911e:	78c4      	ldrb	r4, [r0, #3]
    9120:	0224      	lsls	r4, r4, #8
    9122:	431c      	orrs	r4, r3
    9124:	46a0      	mov	r8, r4
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    9126:	4b2c      	ldr	r3, [pc, #176]	; (91d8 <S_Nv_Write_Impl+0x110>)
    9128:	7818      	ldrb	r0, [r3, #0]
    912a:	2310      	movs	r3, #16
    912c:	aa02      	add	r2, sp, #8
    912e:	0021      	movs	r1, r4
    9130:	4c2a      	ldr	r4, [pc, #168]	; (91dc <S_Nv_Write_Impl+0x114>)
    9132:	47a0      	blx	r4
    if ( ((uint32_t) offset + (uint32_t) dataLength) > (uint32_t) blockHeader.itemLength )
    9134:	ab02      	add	r3, sp, #8
    9136:	8919      	ldrh	r1, [r3, #8]
    9138:	9b01      	ldr	r3, [sp, #4]
    913a:	195a      	adds	r2, r3, r5
        return S_Nv_ReturnValue_BeyondEnd;
    913c:	2304      	movs	r3, #4
    if ( ((uint32_t) offset + (uint32_t) dataLength) > (uint32_t) blockHeader.itemLength )
    913e:	428a      	cmp	r2, r1
    9140:	d8d4      	bhi.n	90ec <S_Nv_Write_Impl+0x24>
    blockHeader.blockOffset = offset;
    9142:	ab02      	add	r3, sp, #8
    9144:	466a      	mov	r2, sp
    9146:	8892      	ldrh	r2, [r2, #4]
    9148:	809a      	strh	r2, [r3, #4]
    blockHeader.blockLength = dataLength;
    914a:	80dd      	strh	r5, [r3, #6]
    blockHeader.previousBlock = blockPointer;
    914c:	4642      	mov	r2, r8
    914e:	815a      	strh	r2, [r3, #10]
    if ( blockHeader.blockLength == blockHeader.itemLength )
    9150:	428d      	cmp	r5, r1
    9152:	d02c      	beq.n	91ae <S_Nv_Write_Impl+0xe6>
        blockHeader.writeCount++;
    9154:	ab02      	add	r3, sp, #8
    9156:	899b      	ldrh	r3, [r3, #12]
    9158:	3301      	adds	r3, #1
    915a:	aa02      	add	r2, sp, #8
    915c:	8193      	strh	r3, [r2, #12]
    uint16_t newBlockPointer = s_sectorHead;
    915e:	4b20      	ldr	r3, [pc, #128]	; (91e0 <S_Nv_Write_Impl+0x118>)
    9160:	881c      	ldrh	r4, [r3, #0]
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pData) )
    9162:	0039      	movs	r1, r7
    9164:	a802      	add	r0, sp, #8
    9166:	4b1f      	ldr	r3, [pc, #124]	; (91e4 <S_Nv_Write_Impl+0x11c>)
    9168:	4798      	blx	r3
        return S_Nv_ReturnValue_Failure;
    916a:	2301      	movs	r3, #1
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pData) )
    916c:	2800      	cmp	r0, #0
    916e:	d0bd      	beq.n	90ec <S_Nv_Write_Impl+0x24>
    cache->lastBlock = newBlockPointer;
    9170:	70b4      	strb	r4, [r6, #2]
    9172:	0a24      	lsrs	r4, r4, #8
    9174:	70f4      	strb	r4, [r6, #3]
    if ( blockHeader.writeCount > COMPACT_ITEM_THRESHOLD )
    9176:	ab02      	add	r3, sp, #8
    9178:	899a      	ldrh	r2, [r3, #12]
    return S_Nv_ReturnValue_Ok;
    917a:	2300      	movs	r3, #0
    if ( blockHeader.writeCount > COMPACT_ITEM_THRESHOLD )
    917c:	2a64      	cmp	r2, #100	; 0x64
    917e:	d9b5      	bls.n	90ec <S_Nv_Write_Impl+0x24>
        s_compactItemId = blockHeader.id;
    9180:	ab02      	add	r3, sp, #8
    9182:	885a      	ldrh	r2, [r3, #2]
    9184:	4b18      	ldr	r3, [pc, #96]	; (91e8 <S_Nv_Write_Impl+0x120>)
    9186:	801a      	strh	r2, [r3, #0]
        s_compactItemLength = 0u;           // no need to resize this item here
    9188:	2200      	movs	r2, #0
    918a:	4b18      	ldr	r3, [pc, #96]	; (91ec <S_Nv_Write_Impl+0x124>)
    918c:	801a      	strh	r2, [r3, #0]
        if (!SYS_TimerStarted(&compactItemTimer))
    918e:	4818      	ldr	r0, [pc, #96]	; (91f0 <S_Nv_Write_Impl+0x128>)
    9190:	4b18      	ldr	r3, [pc, #96]	; (91f4 <S_Nv_Write_Impl+0x12c>)
    9192:	4798      	blx	r3
    return S_Nv_ReturnValue_Ok;
    9194:	2300      	movs	r3, #0
        if (!SYS_TimerStarted(&compactItemTimer))
    9196:	2800      	cmp	r0, #0
    9198:	d1a8      	bne.n	90ec <S_Nv_Write_Impl+0x24>
        compactItemTimer.handler = compactItemTimerFired;
    919a:	4b15      	ldr	r3, [pc, #84]	; (91f0 <S_Nv_Write_Impl+0x128>)
    919c:	4a16      	ldr	r2, [pc, #88]	; (91f8 <S_Nv_Write_Impl+0x130>)
    919e:	611a      	str	r2, [r3, #16]
        compactItemTimer.timeout = COMPACT_ITEM_DELAY_MS;
    91a0:	4a16      	ldr	r2, [pc, #88]	; (91fc <S_Nv_Write_Impl+0x134>)
    91a2:	605a      	str	r2, [r3, #4]
        compactItemTimer.interval = COMPACT_ITEM_DELAY_MS;
    91a4:	609a      	str	r2, [r3, #8]
        compactItemTimer.mode = SYS_TIMER_INTERVAL_MODE;
    91a6:	2200      	movs	r2, #0
    91a8:	731a      	strb	r2, [r3, #12]
    return S_Nv_ReturnValue_Ok;
    91aa:	2300      	movs	r3, #0
    91ac:	e79e      	b.n	90ec <S_Nv_Write_Impl+0x24>
        blockHeader.writeCount = 0u;
    91ae:	2300      	movs	r3, #0
    91b0:	aa02      	add	r2, sp, #8
    91b2:	8193      	strh	r3, [r2, #12]
    91b4:	e7d3      	b.n	915e <S_Nv_Write_Impl+0x96>
    91b6:	46c0      	nop			; (mov r8, r8)
    91b8:	000085c9 	.word	0x000085c9
    91bc:	000177a0 	.word	0x000177a0
    91c0:	00017840 	.word	0x00017840
    91c4:	00000596 	.word	0x00000596
    91c8:	00017708 	.word	0x00017708
    91cc:	000154fd 	.word	0x000154fd
    91d0:	00008cc9 	.word	0x00008cc9
    91d4:	000087c1 	.word	0x000087c1
    91d8:	20000478 	.word	0x20000478
    91dc:	00008379 	.word	0x00008379
    91e0:	2000047a 	.word	0x2000047a
    91e4:	00008f7d 	.word	0x00008f7d
    91e8:	20000450 	.word	0x20000450
    91ec:	20000452 	.word	0x20000452
    91f0:	20000310 	.word	0x20000310
    91f4:	0000c0c5 	.word	0x0000c0c5
    91f8:	00008f71 	.word	0x00008f71
    91fc:	00000bb8 	.word	0x00000bb8

00009200 <S_Nv_Read_Impl>:
#if defined(S_XNV_LOGGING)
static S_Nv_ReturnValue_t S_Nv_Read_Original(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#else
S_Nv_ReturnValue_t S_Nv_Read_Impl(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#endif
{
    9200:	b5f0      	push	{r4, r5, r6, r7, lr}
    9202:	b083      	sub	sp, #12
    9204:	000c      	movs	r4, r1
    9206:	0015      	movs	r5, r2
    9208:	001e      	movs	r6, r3
    assert((id != 0u) && (pData != NULL));
    920a:	2800      	cmp	r0, #0
    920c:	d009      	beq.n	9222 <S_Nv_Read_Impl+0x22>
    920e:	2b00      	cmp	r3, #0
    9210:	d007      	beq.n	9222 <S_Nv_Read_Impl+0x22>

    // get the pointer to the last written block for the item
    uint16_t lastBlockPointer = FindItem(id);
    9212:	4b10      	ldr	r3, [pc, #64]	; (9254 <S_Nv_Read_Impl+0x54>)
    9214:	4798      	blx	r3
    if ( lastBlockPointer == 0x0000u )
    {
        // item does not exist
        return S_Nv_ReturnValue_DoesNotExist;
    9216:	2303      	movs	r3, #3
    if ( lastBlockPointer == 0x0000u )
    9218:	2800      	cmp	r0, #0
    921a:	d108      	bne.n	922e <S_Nv_Read_Impl+0x2e>
    {
        return S_Nv_ReturnValue_BeyondEnd;
    }

    return S_Nv_ReturnValue_Ok;
}
    921c:	0018      	movs	r0, r3
    921e:	b003      	add	sp, #12
    9220:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((id != 0u) && (pData != NULL));
    9222:	4b0d      	ldr	r3, [pc, #52]	; (9258 <S_Nv_Read_Impl+0x58>)
    9224:	4a0d      	ldr	r2, [pc, #52]	; (925c <S_Nv_Read_Impl+0x5c>)
    9226:	490e      	ldr	r1, [pc, #56]	; (9260 <S_Nv_Read_Impl+0x60>)
    9228:	480e      	ldr	r0, [pc, #56]	; (9264 <S_Nv_Read_Impl+0x64>)
    922a:	4c0f      	ldr	r4, [pc, #60]	; (9268 <S_Nv_Read_Impl+0x68>)
    922c:	47a0      	blx	r4
    if ( ((uint32_t) offset + (uint32_t) dataLength) >= 0x10000uL )
    922e:	1962      	adds	r2, r4, r5
    9230:	490e      	ldr	r1, [pc, #56]	; (926c <S_Nv_Read_Impl+0x6c>)
        return S_Nv_ReturnValue_BeyondEnd;
    9232:	3301      	adds	r3, #1
    if ( ((uint32_t) offset + (uint32_t) dataLength) >= 0x10000uL )
    9234:	428a      	cmp	r2, r1
    9236:	d8f1      	bhi.n	921c <S_Nv_Read_Impl+0x1c>
    if ( !GatherData(s_sector, lastBlockPointer, offset, dataLength, pData ))
    9238:	4b0d      	ldr	r3, [pc, #52]	; (9270 <S_Nv_Read_Impl+0x70>)
    923a:	781f      	ldrb	r7, [r3, #0]
    923c:	9600      	str	r6, [sp, #0]
    923e:	002b      	movs	r3, r5
    9240:	0022      	movs	r2, r4
    9242:	0001      	movs	r1, r0
    9244:	0038      	movs	r0, r7
    9246:	4c0b      	ldr	r4, [pc, #44]	; (9274 <S_Nv_Read_Impl+0x74>)
    9248:	47a0      	blx	r4
    return S_Nv_ReturnValue_Ok;
    924a:	4243      	negs	r3, r0
    924c:	4143      	adcs	r3, r0
    924e:	009b      	lsls	r3, r3, #2
    9250:	e7e4      	b.n	921c <S_Nv_Read_Impl+0x1c>
    9252:	46c0      	nop			; (mov r8, r8)
    9254:	00008835 	.word	0x00008835
    9258:	000177a0 	.word	0x000177a0
    925c:	00017850 	.word	0x00017850
    9260:	000005ee 	.word	0x000005ee
    9264:	00017708 	.word	0x00017708
    9268:	000154fd 	.word	0x000154fd
    926c:	0000ffff 	.word	0x0000ffff
    9270:	20000478 	.word	0x20000478
    9274:	00008661 	.word	0x00008661

00009278 <S_Nv_ItemLength_Impl>:

/** Interface function, see \ref S_Nv_ItemLength. */
uint16_t S_Nv_ItemLength_Impl(S_Nv_ItemId_t id)
{
    9278:	b510      	push	{r4, lr}
    927a:	b084      	sub	sp, #16
    assert(id != 0u);
    927c:	2800      	cmp	r0, #0
    927e:	d005      	beq.n	928c <S_Nv_ItemLength_Impl+0x14>

    uint16_t blockPointer = FindItem(id);
    9280:	4b0a      	ldr	r3, [pc, #40]	; (92ac <S_Nv_ItemLength_Impl+0x34>)
    9282:	4798      	blx	r3
    9284:	1e01      	subs	r1, r0, #0
    if ( blockPointer == 0x0000u )
    9286:	d107      	bne.n	9298 <S_Nv_ItemLength_Impl+0x20>

    // read last written item block header
    BlockHeader_t blockHeader;
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    return blockHeader.itemLength;
}
    9288:	b004      	add	sp, #16
    928a:	bd10      	pop	{r4, pc}
    assert(id != 0u);
    928c:	4b08      	ldr	r3, [pc, #32]	; (92b0 <S_Nv_ItemLength_Impl+0x38>)
    928e:	4a09      	ldr	r2, [pc, #36]	; (92b4 <S_Nv_ItemLength_Impl+0x3c>)
    9290:	4909      	ldr	r1, [pc, #36]	; (92b8 <S_Nv_ItemLength_Impl+0x40>)
    9292:	480a      	ldr	r0, [pc, #40]	; (92bc <S_Nv_ItemLength_Impl+0x44>)
    9294:	4c0a      	ldr	r4, [pc, #40]	; (92c0 <S_Nv_ItemLength_Impl+0x48>)
    9296:	47a0      	blx	r4
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    9298:	4b0a      	ldr	r3, [pc, #40]	; (92c4 <S_Nv_ItemLength_Impl+0x4c>)
    929a:	7818      	ldrb	r0, [r3, #0]
    929c:	2310      	movs	r3, #16
    929e:	466a      	mov	r2, sp
    92a0:	4c09      	ldr	r4, [pc, #36]	; (92c8 <S_Nv_ItemLength_Impl+0x50>)
    92a2:	47a0      	blx	r4
    return blockHeader.itemLength;
    92a4:	466b      	mov	r3, sp
    92a6:	8918      	ldrh	r0, [r3, #8]
    92a8:	e7ee      	b.n	9288 <S_Nv_ItemLength_Impl+0x10>
    92aa:	46c0      	nop			; (mov r8, r8)
    92ac:	00008835 	.word	0x00008835
    92b0:	00017794 	.word	0x00017794
    92b4:	00017860 	.word	0x00017860
    92b8:	0000060b 	.word	0x0000060b
    92bc:	00017708 	.word	0x00017708
    92c0:	000154fd 	.word	0x000154fd
    92c4:	20000478 	.word	0x20000478
    92c8:	00008379 	.word	0x00008379

000092cc <S_Nv_ItemInit_Impl>:
{
    92cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    92ce:	b085      	sub	sp, #20
    92d0:	0004      	movs	r4, r0
    92d2:	000e      	movs	r6, r1
    92d4:	0015      	movs	r5, r2
    assert((id != 0u) && (id < 0xF000u) && (itemLength <= MAX_ITEM_LENGTH));
    92d6:	1e43      	subs	r3, r0, #1
    92d8:	b29b      	uxth	r3, r3
    92da:	4a2e      	ldr	r2, [pc, #184]	; (9394 <S_Nv_ItemInit_Impl+0xc8>)
    92dc:	4293      	cmp	r3, r2
    92de:	d81e      	bhi.n	931e <S_Nv_ItemInit_Impl+0x52>
    92e0:	2380      	movs	r3, #128	; 0x80
    92e2:	011b      	lsls	r3, r3, #4
    92e4:	4299      	cmp	r1, r3
    92e6:	d81a      	bhi.n	931e <S_Nv_ItemInit_Impl+0x52>
    if ( FindItem(id) != 0x0000u )
    92e8:	4b2b      	ldr	r3, [pc, #172]	; (9398 <S_Nv_ItemInit_Impl+0xcc>)
    92ea:	4798      	blx	r3
    92ec:	2800      	cmp	r0, #0
    92ee:	d01d      	beq.n	932c <S_Nv_ItemInit_Impl+0x60>
        uint16_t oldItemLength = S_Nv_ItemLength(id);
    92f0:	0020      	movs	r0, r4
    92f2:	4b2a      	ldr	r3, [pc, #168]	; (939c <S_Nv_ItemInit_Impl+0xd0>)
    92f4:	4798      	blx	r3
        if ( oldItemLength != itemLength )
    92f6:	4286      	cmp	r6, r0
    92f8:	d007      	beq.n	930a <S_Nv_ItemInit_Impl+0x3e>
            s_compactItemId = id;
    92fa:	4b29      	ldr	r3, [pc, #164]	; (93a0 <S_Nv_ItemInit_Impl+0xd4>)
    92fc:	801c      	strh	r4, [r3, #0]
            s_compactItemLength = itemLength;
    92fe:	4b29      	ldr	r3, [pc, #164]	; (93a4 <S_Nv_ItemInit_Impl+0xd8>)
    9300:	801e      	strh	r6, [r3, #0]
            S_Nv_ReturnValue_t resizeResult = CompactItem();
    9302:	4b29      	ldr	r3, [pc, #164]	; (93a8 <S_Nv_ItemInit_Impl+0xdc>)
    9304:	4798      	blx	r3
    9306:	1e03      	subs	r3, r0, #0
            if ( resizeResult != S_Nv_ReturnValue_Ok )
    9308:	d115      	bne.n	9336 <S_Nv_ItemInit_Impl+0x6a>
        if (pDefaultData != NULL)
    930a:	2d00      	cmp	r5, #0
    930c:	d040      	beq.n	9390 <S_Nv_ItemInit_Impl+0xc4>
            return S_Nv_Read(id, 0u, itemLength, pDefaultData);
    930e:	002b      	movs	r3, r5
    9310:	0032      	movs	r2, r6
    9312:	2100      	movs	r1, #0
    9314:	0020      	movs	r0, r4
    9316:	4c25      	ldr	r4, [pc, #148]	; (93ac <S_Nv_ItemInit_Impl+0xe0>)
    9318:	47a0      	blx	r4
    931a:	0003      	movs	r3, r0
    931c:	e00b      	b.n	9336 <S_Nv_ItemInit_Impl+0x6a>
    assert((id != 0u) && (id < 0xF000u) && (itemLength <= MAX_ITEM_LENGTH));
    931e:	4b24      	ldr	r3, [pc, #144]	; (93b0 <S_Nv_ItemInit_Impl+0xe4>)
    9320:	4a24      	ldr	r2, [pc, #144]	; (93b4 <S_Nv_ItemInit_Impl+0xe8>)
    9322:	21aa      	movs	r1, #170	; 0xaa
    9324:	00c9      	lsls	r1, r1, #3
    9326:	4824      	ldr	r0, [pc, #144]	; (93b8 <S_Nv_ItemInit_Impl+0xec>)
    9328:	4c24      	ldr	r4, [pc, #144]	; (93bc <S_Nv_ItemInit_Impl+0xf0>)
    932a:	47a0      	blx	r4
    if ( PowerSupplyTooLow() )
    932c:	4b24      	ldr	r3, [pc, #144]	; (93c0 <S_Nv_ItemInit_Impl+0xf4>)
    932e:	4798      	blx	r3
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    9330:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    9332:	2800      	cmp	r0, #0
    9334:	d002      	beq.n	933c <S_Nv_ItemInit_Impl+0x70>
}
    9336:	0018      	movs	r0, r3
    9338:	b005      	add	sp, #20
    933a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CompactSectorIfNeeded(BLOCK_HEADER_SIZE + itemLength);
    933c:	0030      	movs	r0, r6
    933e:	3010      	adds	r0, #16
    9340:	b280      	uxth	r0, r0
    9342:	4b20      	ldr	r3, [pc, #128]	; (93c4 <S_Nv_ItemInit_Impl+0xf8>)
    9344:	4798      	blx	r3
    assert(s_itemCount < MAX_ITEM_COUNT);
    9346:	4b20      	ldr	r3, [pc, #128]	; (93c8 <S_Nv_ItemInit_Impl+0xfc>)
    9348:	781b      	ldrb	r3, [r3, #0]
    934a:	2b06      	cmp	r3, #6
    934c:	d819      	bhi.n	9382 <S_Nv_ItemInit_Impl+0xb6>
    uint16_t newItemPointer = s_sectorHead;
    934e:	4b1f      	ldr	r3, [pc, #124]	; (93cc <S_Nv_ItemInit_Impl+0x100>)
    9350:	881f      	ldrh	r7, [r3, #0]
    blockHeader.id = newItemId;
    9352:	466b      	mov	r3, sp
    9354:	805c      	strh	r4, [r3, #2]
    blockHeader.blockOffset = 0x0000u;
    9356:	2300      	movs	r3, #0
    9358:	466a      	mov	r2, sp
    935a:	8093      	strh	r3, [r2, #4]
    blockHeader.blockLength = itemLength;
    935c:	80d6      	strh	r6, [r2, #6]
    blockHeader.itemLength = itemLength;
    935e:	8116      	strh	r6, [r2, #8]
    blockHeader.previousBlock = 0x0000u;
    9360:	8153      	strh	r3, [r2, #10]
    blockHeader.writeCount = 0u;
    9362:	8193      	strh	r3, [r2, #12]
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pDefaultData) )
    9364:	0029      	movs	r1, r5
    9366:	4668      	mov	r0, sp
    9368:	4b19      	ldr	r3, [pc, #100]	; (93d0 <S_Nv_ItemInit_Impl+0x104>)
    936a:	4798      	blx	r3
        return S_Nv_ReturnValue_Failure;
    936c:	2301      	movs	r3, #1
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pDefaultData) )
    936e:	2800      	cmp	r0, #0
    9370:	d0e1      	beq.n	9336 <S_Nv_ItemInit_Impl+0x6a>
    Item_t *newItemCache = CreateItemCache(newItemId);
    9372:	0020      	movs	r0, r4
    9374:	4b17      	ldr	r3, [pc, #92]	; (93d4 <S_Nv_ItemInit_Impl+0x108>)
    9376:	4798      	blx	r3
    newItemCache->lastBlock = newItemPointer;
    9378:	7087      	strb	r7, [r0, #2]
    937a:	0a3f      	lsrs	r7, r7, #8
    937c:	70c7      	strb	r7, [r0, #3]
    return S_Nv_ReturnValue_DidNotExist;
    937e:	2302      	movs	r3, #2
    9380:	e7d9      	b.n	9336 <S_Nv_ItemInit_Impl+0x6a>
    assert(s_itemCount < MAX_ITEM_COUNT);
    9382:	4b15      	ldr	r3, [pc, #84]	; (93d8 <S_Nv_ItemInit_Impl+0x10c>)
    9384:	4a0b      	ldr	r2, [pc, #44]	; (93b4 <S_Nv_ItemInit_Impl+0xe8>)
    9386:	21af      	movs	r1, #175	; 0xaf
    9388:	00c9      	lsls	r1, r1, #3
    938a:	480b      	ldr	r0, [pc, #44]	; (93b8 <S_Nv_ItemInit_Impl+0xec>)
    938c:	4c0b      	ldr	r4, [pc, #44]	; (93bc <S_Nv_ItemInit_Impl+0xf0>)
    938e:	47a0      	blx	r4
            return S_Nv_ReturnValue_Ok;
    9390:	2300      	movs	r3, #0
    9392:	e7d0      	b.n	9336 <S_Nv_ItemInit_Impl+0x6a>
    9394:	0000effe 	.word	0x0000effe
    9398:	00008835 	.word	0x00008835
    939c:	00009279 	.word	0x00009279
    93a0:	20000450 	.word	0x20000450
    93a4:	20000452 	.word	0x20000452
    93a8:	00008d45 	.word	0x00008d45
    93ac:	00009201 	.word	0x00009201
    93b0:	00017754 	.word	0x00017754
    93b4:	0001782c 	.word	0x0001782c
    93b8:	00017708 	.word	0x00017708
    93bc:	000154fd 	.word	0x000154fd
    93c0:	000085c9 	.word	0x000085c9
    93c4:	00008cc9 	.word	0x00008cc9
    93c8:	20000470 	.word	0x20000470
    93cc:	2000047a 	.word	0x2000047a
    93d0:	00008f7d 	.word	0x00008f7d
    93d4:	00008851 	.word	0x00008851
    93d8:	000176cc 	.word	0x000176cc

000093dc <S_Nv_IsItemAvailable_Impl>:
/** Interface function, see \ref S_Nv_IsItemAvailable.
 *
 * Important: This will check whether the item is found in the storage area
 */
bool S_Nv_IsItemAvailable_Impl(S_Nv_ItemId_t id)
{
    93dc:	b510      	push	{r4, lr}
  return ( FindItem(id) != 0x0000u );
    93de:	4b03      	ldr	r3, [pc, #12]	; (93ec <S_Nv_IsItemAvailable_Impl+0x10>)
    93e0:	4798      	blx	r3
    93e2:	1e43      	subs	r3, r0, #1
    93e4:	4198      	sbcs	r0, r3
    93e6:	b2c0      	uxtb	r0, r0
}
    93e8:	bd10      	pop	{r4, pc}
    93ea:	46c0      	nop			; (mov r8, r8)
    93ec:	00008835 	.word	0x00008835

000093f0 <pdsInitItemMask>:
\param[in] itemMask - itemMask to be initialized

\return true itemMask is initialized, false otherwise
******************************************************************************/
static bool pdsInitItemMask(S_Nv_ItemId_t memoryId, uint8_t *itemMask)
{
    93f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    93f2:	46d6      	mov	lr, sl
    93f4:	4647      	mov	r7, r8
    93f6:	b580      	push	{r7, lr}
    93f8:	b087      	sub	sp, #28
    93fa:	000f      	movs	r7, r1
  if (PDS_ALL_EXISTENT_MEMORY == memoryId)
    93fc:	4b20      	ldr	r3, [pc, #128]	; (9480 <pdsInitItemMask+0x90>)
    93fe:	4298      	cmp	r0, r3
    9400:	d012      	beq.n	9428 <pdsInitItemMask+0x38>
  {
    memset(itemMask, 0xFFU, PDS_ITEM_MASK_SIZE);
    itemMask[0] &= 0xFEU;
  }
  else if (PDS_DIRECTORY_MASK & memoryId)
    9402:	0443      	lsls	r3, r0, #17
    9404:	d415      	bmi.n	9432 <pdsInitItemMask+0x42>
    else
      return false;
  }
  else
  {
    itemMask[memoryId / 8] |= 1 << (memoryId % 8);
    9406:	08c3      	lsrs	r3, r0, #3
    9408:	18cf      	adds	r7, r1, r3
    940a:	2307      	movs	r3, #7
    940c:	4018      	ands	r0, r3
    940e:	3b06      	subs	r3, #6
    9410:	4083      	lsls	r3, r0
    9412:	783a      	ldrb	r2, [r7, #0]
    9414:	4313      	orrs	r3, r2
    9416:	703b      	strb	r3, [r7, #0]
  }

  return true;
    9418:	2301      	movs	r3, #1
    941a:	9301      	str	r3, [sp, #4]
}
    941c:	9801      	ldr	r0, [sp, #4]
    941e:	b007      	add	sp, #28
    9420:	bc0c      	pop	{r2, r3}
    9422:	4690      	mov	r8, r2
    9424:	469a      	mov	sl, r3
    9426:	bdf0      	pop	{r4, r5, r6, r7, pc}
    itemMask[0] &= 0xFEU;
    9428:	23fe      	movs	r3, #254	; 0xfe
    942a:	700b      	strb	r3, [r1, #0]
  return true;
    942c:	3bfd      	subs	r3, #253	; 0xfd
    942e:	9301      	str	r3, [sp, #4]
    9430:	e7f4      	b.n	941c <pdsInitItemMask+0x2c>
    if (pdsGetDirDescr(memoryId, &dirDescr))
    9432:	a904      	add	r1, sp, #16
    9434:	4b13      	ldr	r3, [pc, #76]	; (9484 <pdsInitItemMask+0x94>)
    9436:	4798      	blx	r3
    9438:	9001      	str	r0, [sp, #4]
    943a:	2800      	cmp	r0, #0
    943c:	d0ee      	beq.n	941c <pdsInitItemMask+0x2c>
      for (uint8_t index=0U; index < dirDescr.filesCount; index++)
    943e:	ab04      	add	r3, sp, #16
    9440:	889b      	ldrh	r3, [r3, #4]
    9442:	4698      	mov	r8, r3
    9444:	2b00      	cmp	r3, #0
    9446:	d0e9      	beq.n	941c <pdsInitItemMask+0x2c>
    9448:	2400      	movs	r4, #0
        memcpy(&memId, (void const FLASH_PTR*)(dirDescr.list + index), sizeof(uint16_t));
    944a:	ab02      	add	r3, sp, #8
    944c:	1d9d      	adds	r5, r3, #6
    944e:	4b0e      	ldr	r3, [pc, #56]	; (9488 <pdsInitItemMask+0x98>)
    9450:	469a      	mov	sl, r3
        itemMask[memId / 8U] |= 1U << (memId % 8U);
    9452:	2607      	movs	r6, #7
        memcpy(&memId, (void const FLASH_PTR*)(dirDescr.list + index), sizeof(uint16_t));
    9454:	0061      	lsls	r1, r4, #1
    9456:	9b04      	ldr	r3, [sp, #16]
    9458:	469c      	mov	ip, r3
    945a:	4461      	add	r1, ip
    945c:	2202      	movs	r2, #2
    945e:	0028      	movs	r0, r5
    9460:	47d0      	blx	sl
        itemMask[memId / 8U] |= 1U << (memId % 8U);
    9462:	8829      	ldrh	r1, [r5, #0]
    9464:	08ca      	lsrs	r2, r1, #3
    9466:	18ba      	adds	r2, r7, r2
    9468:	4031      	ands	r1, r6
    946a:	2301      	movs	r3, #1
    946c:	408b      	lsls	r3, r1
    946e:	7811      	ldrb	r1, [r2, #0]
    9470:	430b      	orrs	r3, r1
    9472:	7013      	strb	r3, [r2, #0]
      for (uint8_t index=0U; index < dirDescr.filesCount; index++)
    9474:	3401      	adds	r4, #1
    9476:	b2e4      	uxtb	r4, r4
    9478:	b2a3      	uxth	r3, r4
    947a:	4543      	cmp	r3, r8
    947c:	d3ea      	bcc.n	9454 <pdsInitItemMask+0x64>
    947e:	e7cd      	b.n	941c <pdsInitItemMask+0x2c>
    9480:	00004002 	.word	0x00004002
    9484:	0000969d 	.word	0x0000969d
    9488:	000155bf 	.word	0x000155bf

0000948c <PDS_Store>:
{
    948c:	b510      	push	{r4, lr}
  if (!pdsInitItemMask(memoryId, itemsToStore))
    948e:	4905      	ldr	r1, [pc, #20]	; (94a4 <PDS_Store+0x18>)
    9490:	4b05      	ldr	r3, [pc, #20]	; (94a8 <PDS_Store+0x1c>)
    9492:	4798      	blx	r3
    9494:	1e04      	subs	r4, r0, #0
    9496:	d101      	bne.n	949c <PDS_Store+0x10>
}
    9498:	0020      	movs	r0, r4
    949a:	bd10      	pop	{r4, pc}
  pdsPostTask(PDS_STORE_ITEM_TASK_ID);
    949c:	2000      	movs	r0, #0
    949e:	4b03      	ldr	r3, [pc, #12]	; (94ac <PDS_Store+0x20>)
    94a0:	4798      	blx	r3
  return true;
    94a2:	e7f9      	b.n	9498 <PDS_Store+0xc>
    94a4:	20000480 	.word	0x20000480
    94a8:	000093f1 	.word	0x000093f1
    94ac:	000095ed 	.word	0x000095ed

000094b0 <pdsStoreItemTaskHandler>:
{
    94b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    94b2:	b085      	sub	sp, #20
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    94b4:	4b3e      	ldr	r3, [pc, #248]	; (95b0 <pdsStoreItemTaskHandler+0x100>)
    94b6:	781b      	ldrb	r3, [r3, #0]
    94b8:	3301      	adds	r3, #1
      bit_index %= 8;
    94ba:	2207      	movs	r2, #7
    94bc:	4013      	ands	r3, r2
      if (itemsToStore[byte_index] & (1U << bit_index))
    94be:	4a3d      	ldr	r2, [pc, #244]	; (95b4 <pdsStoreItemTaskHandler+0x104>)
    94c0:	7817      	ldrb	r7, [r2, #0]
    94c2:	0038      	movs	r0, r7
    94c4:	001e      	movs	r6, r3
    94c6:	003a      	movs	r2, r7
    94c8:	40da      	lsrs	r2, r3
    94ca:	07d2      	lsls	r2, r2, #31
    94cc:	d431      	bmi.n	9532 <pdsStoreItemTaskHandler+0x82>
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    94ce:	3301      	adds	r3, #1
    94d0:	b2db      	uxtb	r3, r3
    94d2:	2207      	movs	r2, #7
      bit_index %= 8;
    94d4:	2507      	movs	r5, #7
      if (itemsToStore[byte_index] & (1U << bit_index))
    94d6:	2401      	movs	r4, #1
      bit_index %= 8;
    94d8:	402b      	ands	r3, r5
      if (itemsToStore[byte_index] & (1U << bit_index))
    94da:	001e      	movs	r6, r3
    94dc:	0001      	movs	r1, r0
    94de:	40d9      	lsrs	r1, r3
    94e0:	420c      	tst	r4, r1
    94e2:	d126      	bne.n	9532 <pdsStoreItemTaskHandler+0x82>
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    94e4:	3301      	adds	r3, #1
    94e6:	b2db      	uxtb	r3, r3
    94e8:	3a01      	subs	r2, #1
    94ea:	b2d2      	uxtb	r2, r2
    94ec:	2a00      	cmp	r2, #0
    94ee:	d1f3      	bne.n	94d8 <pdsStoreItemTaskHandler+0x28>
  for (i = 0U, byte_index = i_found + 1; i < PDS_ITEM_MASK_SIZE; i++, byte_index++)
    94f0:	2401      	movs	r4, #1
  if (!S_Nv_IsItemAvailable(((S_Nv_ItemId_t)byte_index << 3U) + bit_index))
    94f2:	00e4      	lsls	r4, r4, #3
    94f4:	18e4      	adds	r4, r4, r3
    94f6:	0020      	movs	r0, r4
    94f8:	4b2f      	ldr	r3, [pc, #188]	; (95b8 <pdsStoreItemTaskHandler+0x108>)
    94fa:	4798      	blx	r3
    94fc:	2800      	cmp	r0, #0
    94fe:	d124      	bne.n	954a <pdsStoreItemTaskHandler+0x9a>
    if(pdsGetItemDescr(((S_Nv_ItemId_t)byte_index << 3U) + bit_index, &itemDescr))
    9500:	4669      	mov	r1, sp
    9502:	0020      	movs	r0, r4
    9504:	4b2d      	ldr	r3, [pc, #180]	; (95bc <pdsStoreItemTaskHandler+0x10c>)
    9506:	4798      	blx	r3
    9508:	2800      	cmp	r0, #0
    950a:	d038      	beq.n	957e <pdsStoreItemTaskHandler+0xce>
      if (itemDescr.filler)
    950c:	9b02      	ldr	r3, [sp, #8]
    950e:	2b00      	cmp	r3, #0
    9510:	d000      	beq.n	9514 <pdsStoreItemTaskHandler+0x64>
        itemDescr.filler();
    9512:	4798      	blx	r3
      ret = S_Nv_ItemInit(((S_Nv_ItemId_t)byte_index << 3U) + bit_index, itemDescr.itemSize, itemDescr.itemData);
    9514:	9a01      	ldr	r2, [sp, #4]
    9516:	466b      	mov	r3, sp
    9518:	8859      	ldrh	r1, [r3, #2]
    951a:	0020      	movs	r0, r4
    951c:	4b28      	ldr	r3, [pc, #160]	; (95c0 <pdsStoreItemTaskHandler+0x110>)
    951e:	4798      	blx	r3
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    9520:	23fd      	movs	r3, #253	; 0xfd
    9522:	4218      	tst	r0, r3
    9524:	d02b      	beq.n	957e <pdsStoreItemTaskHandler+0xce>
    9526:	4b27      	ldr	r3, [pc, #156]	; (95c4 <pdsStoreItemTaskHandler+0x114>)
    9528:	4a27      	ldr	r2, [pc, #156]	; (95c8 <pdsStoreItemTaskHandler+0x118>)
    952a:	21ea      	movs	r1, #234	; 0xea
    952c:	4827      	ldr	r0, [pc, #156]	; (95cc <pdsStoreItemTaskHandler+0x11c>)
    952e:	4c28      	ldr	r4, [pc, #160]	; (95d0 <pdsStoreItemTaskHandler+0x120>)
    9530:	47a0      	blx	r4
        itemsToStore[byte_index] &= ~(1U << bit_index);
    9532:	2201      	movs	r2, #1
    9534:	40b2      	lsls	r2, r6
    9536:	4397      	bics	r7, r2
    9538:	4a1e      	ldr	r2, [pc, #120]	; (95b4 <pdsStoreItemTaskHandler+0x104>)
    953a:	7017      	strb	r7, [r2, #0]
        i_found = byte_index;
    953c:	2100      	movs	r1, #0
    953e:	4a25      	ldr	r2, [pc, #148]	; (95d4 <pdsStoreItemTaskHandler+0x124>)
    9540:	7011      	strb	r1, [r2, #0]
        j_found = bit_index;
    9542:	4a1b      	ldr	r2, [pc, #108]	; (95b0 <pdsStoreItemTaskHandler+0x100>)
    9544:	7013      	strb	r3, [r2, #0]
    byte_index %= PDS_ITEM_MASK_SIZE;
    9546:	2400      	movs	r4, #0
    9548:	e7d3      	b.n	94f2 <pdsStoreItemTaskHandler+0x42>
  if (pdsGetItemDescr(id, &itemDescr))
    954a:	4669      	mov	r1, sp
    954c:	0020      	movs	r0, r4
    954e:	4b1b      	ldr	r3, [pc, #108]	; (95bc <pdsStoreItemTaskHandler+0x10c>)
    9550:	4798      	blx	r3
    9552:	2800      	cmp	r0, #0
    9554:	d013      	beq.n	957e <pdsStoreItemTaskHandler+0xce>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    9556:	466b      	mov	r3, sp
    9558:	885b      	ldrh	r3, [r3, #2]
    955a:	2b00      	cmp	r3, #0
    955c:	d015      	beq.n	958a <pdsStoreItemTaskHandler+0xda>
    955e:	9b01      	ldr	r3, [sp, #4]
    9560:	2b00      	cmp	r3, #0
    9562:	d012      	beq.n	958a <pdsStoreItemTaskHandler+0xda>
    if (itemDescr.filler)
    9564:	9b02      	ldr	r3, [sp, #8]
    9566:	2b00      	cmp	r3, #0
    9568:	d000      	beq.n	956c <pdsStoreItemTaskHandler+0xbc>
      itemDescr.filler();
    956a:	4798      	blx	r3
      ret = S_Nv_Write(id, 0U, itemDescr.itemSize, itemDescr.itemData);
    956c:	9b01      	ldr	r3, [sp, #4]
    956e:	466a      	mov	r2, sp
    9570:	8852      	ldrh	r2, [r2, #2]
    9572:	2100      	movs	r1, #0
    9574:	0020      	movs	r0, r4
    9576:	4c18      	ldr	r4, [pc, #96]	; (95d8 <pdsStoreItemTaskHandler+0x128>)
    9578:	47a0      	blx	r4
      assert(ret == S_Nv_ReturnValue_Ok);
    957a:	2800      	cmp	r0, #0
    957c:	d10c      	bne.n	9598 <pdsStoreItemTaskHandler+0xe8>
    if (itemsToStore[i])
    957e:	4b0d      	ldr	r3, [pc, #52]	; (95b4 <pdsStoreItemTaskHandler+0x104>)
    9580:	781b      	ldrb	r3, [r3, #0]
    9582:	2b00      	cmp	r3, #0
    9584:	d10f      	bne.n	95a6 <pdsStoreItemTaskHandler+0xf6>
}
    9586:	b005      	add	sp, #20
    9588:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    958a:	4b14      	ldr	r3, [pc, #80]	; (95dc <pdsStoreItemTaskHandler+0x12c>)
    958c:	4a14      	ldr	r2, [pc, #80]	; (95e0 <pdsStoreItemTaskHandler+0x130>)
    958e:	2134      	movs	r1, #52	; 0x34
    9590:	31ff      	adds	r1, #255	; 0xff
    9592:	480e      	ldr	r0, [pc, #56]	; (95cc <pdsStoreItemTaskHandler+0x11c>)
    9594:	4c0e      	ldr	r4, [pc, #56]	; (95d0 <pdsStoreItemTaskHandler+0x120>)
    9596:	47a0      	blx	r4
      assert(ret == S_Nv_ReturnValue_Ok);
    9598:	4b12      	ldr	r3, [pc, #72]	; (95e4 <pdsStoreItemTaskHandler+0x134>)
    959a:	4a11      	ldr	r2, [pc, #68]	; (95e0 <pdsStoreItemTaskHandler+0x130>)
    959c:	2142      	movs	r1, #66	; 0x42
    959e:	31ff      	adds	r1, #255	; 0xff
    95a0:	480a      	ldr	r0, [pc, #40]	; (95cc <pdsStoreItemTaskHandler+0x11c>)
    95a2:	4c0b      	ldr	r4, [pc, #44]	; (95d0 <pdsStoreItemTaskHandler+0x120>)
    95a4:	47a0      	blx	r4
      pdsPostTask(PDS_STORE_ITEM_TASK_ID);
    95a6:	2000      	movs	r0, #0
    95a8:	4b0f      	ldr	r3, [pc, #60]	; (95e8 <pdsStoreItemTaskHandler+0x138>)
    95aa:	4798      	blx	r3
}
    95ac:	e7eb      	b.n	9586 <pdsStoreItemTaskHandler+0xd6>
    95ae:	46c0      	nop			; (mov r8, r8)
    95b0:	20000481 	.word	0x20000481
    95b4:	20000480 	.word	0x20000480
    95b8:	000093dd 	.word	0x000093dd
    95bc:	00009641 	.word	0x00009641
    95c0:	000092cd 	.word	0x000092cd
    95c4:	00017904 	.word	0x00017904
    95c8:	0001794c 	.word	0x0001794c
    95cc:	000178b4 	.word	0x000178b4
    95d0:	000154fd 	.word	0x000154fd
    95d4:	2000047c 	.word	0x2000047c
    95d8:	000090c9 	.word	0x000090c9
    95dc:	00017878 	.word	0x00017878
    95e0:	00017964 	.word	0x00017964
    95e4:	00017974 	.word	0x00017974
    95e8:	000095ed 	.word	0x000095ed

000095ec <pdsPostTask>:
\param[in] taskId - id of a task
******************************************************************************/

void pdsPostTask(PdsTaskId_t taskId)
{
  pendingTasks |= (1U << taskId);
    95ec:	4a03      	ldr	r2, [pc, #12]	; (95fc <pdsPostTask+0x10>)
    95ee:	2301      	movs	r3, #1
    95f0:	4083      	lsls	r3, r0
    95f2:	7811      	ldrb	r1, [r2, #0]
    95f4:	430b      	orrs	r3, r1
    95f6:	7013      	strb	r3, [r2, #0]
//  SYS_PostTask(PDS_TASK_ID);
}
    95f8:	4770      	bx	lr
    95fa:	46c0      	nop			; (mov r8, r8)
    95fc:	20000482 	.word	0x20000482

00009600 <PDS_TaskHandler>:

/******************************************************************************
\brief General PDS task handler
******************************************************************************/
void PDS_TaskHandler(void)
{
    9600:	b570      	push	{r4, r5, r6, lr}
  if (pendingTasks)
    9602:	4b0d      	ldr	r3, [pc, #52]	; (9638 <PDS_TaskHandler+0x38>)
    9604:	781d      	ldrb	r5, [r3, #0]
    9606:	2d00      	cmp	r5, #0
    9608:	d012      	beq.n	9630 <PDS_TaskHandler+0x30>
  {
    uint8_t taskId = 0U;

    while (!(pendingTasks & (1U << taskId)))
    960a:	0028      	movs	r0, r5
    960c:	07eb      	lsls	r3, r5, #31
    960e:	d410      	bmi.n	9632 <PDS_TaskHandler+0x32>
    9610:	2300      	movs	r3, #0
    9612:	2401      	movs	r4, #1
      taskId++;
    9614:	3301      	adds	r3, #1
    9616:	b2db      	uxtb	r3, r3
    while (!(pendingTasks & (1U << taskId)))
    9618:	0019      	movs	r1, r3
    961a:	0002      	movs	r2, r0
    961c:	40da      	lsrs	r2, r3
    961e:	4214      	tst	r4, r2
    9620:	d0f8      	beq.n	9614 <PDS_TaskHandler+0x14>

    pendingTasks ^= (1U << taskId);
    9622:	2301      	movs	r3, #1
    9624:	408b      	lsls	r3, r1
    9626:	405d      	eors	r5, r3
    9628:	4b03      	ldr	r3, [pc, #12]	; (9638 <PDS_TaskHandler+0x38>)
    962a:	701d      	strb	r5, [r3, #0]
    pdsTaskHandlers[taskId]();
    962c:	4b03      	ldr	r3, [pc, #12]	; (963c <PDS_TaskHandler+0x3c>)
    962e:	4798      	blx	r3
   
  }
}
    9630:	bd70      	pop	{r4, r5, r6, pc}
    while (!(pendingTasks & (1U << taskId)))
    9632:	2100      	movs	r1, #0
    9634:	e7f5      	b.n	9622 <PDS_TaskHandler+0x22>
    9636:	46c0      	nop			; (mov r8, r8)
    9638:	20000482 	.word	0x20000482
    963c:	000094b1 	.word	0x000094b1

00009640 <pdsGetItemDescr>:
\param[in] itemDescrToGet    - pointer to item descriptor to be loaded;

returns true if descriptor is found out for the given item ID, false - otherwise
******************************************************************************/
bool pdsGetItemDescr(S_Nv_ItemId_t itemId, ItemIdToMemoryMapping_t *itemDescrToGet )
{
    9640:	b5f0      	push	{r4, r5, r6, r7, lr}
    9642:	b087      	sub	sp, #28
    9644:	9101      	str	r1, [sp, #4]
  /* Calculate raw data size */
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
  {
    ItemIdToMemoryMapping_t itemDescr;

    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    9646:	aa02      	add	r2, sp, #8
    9648:	4b10      	ldr	r3, [pc, #64]	; (968c <pdsGetItemDescr+0x4c>)
    964a:	0011      	movs	r1, r2
    964c:	cb70      	ldmia	r3!, {r4, r5, r6}
    964e:	c170      	stmia	r1!, {r4, r5, r6}
    9650:	681b      	ldr	r3, [r3, #0]
    9652:	600b      	str	r3, [r1, #0]

    if(itemDescr.itemId == itemId)
    9654:	8813      	ldrh	r3, [r2, #0]
    9656:	4283      	cmp	r3, r0
    9658:	d011      	beq.n	967e <pdsGetItemDescr+0x3e>
    {
      memcpy(itemDescrToGet, &itemDescr, sizeof(ItemIdToMemoryMapping_t));
      return true;
    }
    itemDescrPtr++;
    965a:	4b0d      	ldr	r3, [pc, #52]	; (9690 <pdsGetItemDescr+0x50>)
    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    965c:	aa02      	add	r2, sp, #8
    965e:	0011      	movs	r1, r2
    9660:	001c      	movs	r4, r3
    9662:	cce0      	ldmia	r4!, {r5, r6, r7}
    9664:	c1e0      	stmia	r1!, {r5, r6, r7}
    9666:	6824      	ldr	r4, [r4, #0]
    9668:	600c      	str	r4, [r1, #0]
    if(itemDescr.itemId == itemId)
    966a:	8811      	ldrh	r1, [r2, #0]
    966c:	4281      	cmp	r1, r0
    966e:	d006      	beq.n	967e <pdsGetItemDescr+0x3e>
    itemDescrPtr++;
    9670:	3310      	adds	r3, #16
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
    9672:	4908      	ldr	r1, [pc, #32]	; (9694 <pdsGetItemDescr+0x54>)
    9674:	428b      	cmp	r3, r1
    9676:	d1f2      	bne.n	965e <pdsGetItemDescr+0x1e>

  }
  return false;
    9678:	2000      	movs	r0, #0
}
    967a:	b007      	add	sp, #28
    967c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      memcpy(itemDescrToGet, &itemDescr, sizeof(ItemIdToMemoryMapping_t));
    967e:	2210      	movs	r2, #16
    9680:	a902      	add	r1, sp, #8
    9682:	9801      	ldr	r0, [sp, #4]
    9684:	4b04      	ldr	r3, [pc, #16]	; (9698 <pdsGetItemDescr+0x58>)
    9686:	4798      	blx	r3
      return true;
    9688:	2001      	movs	r0, #1
    968a:	e7f6      	b.n	967a <pdsGetItemDescr+0x3a>
    968c:	00004400 	.word	0x00004400
    9690:	00004410 	.word	0x00004410
    9694:	00004470 	.word	0x00004470
    9698:	000155bf 	.word	0x000155bf

0000969c <pdsGetDirDescr>:
\param[in] dirDescrToGet    - pointer to dir descriptor to be loaded;

returns true if descriptor is found out for the given dir ID, false - otherwise
******************************************************************************/
bool pdsGetDirDescr(S_Nv_ItemId_t itemId, PDS_DirDescr_t *dirDescrToGet )
{
    969c:	b570      	push	{r4, r5, r6, lr}
    969e:	b082      	sub	sp, #8
    96a0:	000c      	movs	r4, r1
  /* Calculate raw data size */
  for (uint8_t fileIdx = 0; fileIdx < PDS_DIRECTORIES_AMOUNT; fileIdx++)
  {
    PDS_DirDescr_t dirDescr;

    memcpy(&dirDescr, (void const *)dirDescrPtr, sizeof(PDS_DirDescr_t));
    96a2:	466b      	mov	r3, sp
    96a4:	4a08      	ldr	r2, [pc, #32]	; (96c8 <pdsGetDirDescr+0x2c>)
    96a6:	4669      	mov	r1, sp
    96a8:	ca60      	ldmia	r2!, {r5, r6}
    96aa:	c160      	stmia	r1!, {r5, r6}
    if(dirDescr.memoryId == itemId)
    96ac:	88da      	ldrh	r2, [r3, #6]
      memcpy(dirDescrToGet, &dirDescr, sizeof(PDS_DirDescr_t));
      return true;
    }
    dirDescrPtr++;
  }
  return false;
    96ae:	2300      	movs	r3, #0
    if(dirDescr.memoryId == itemId)
    96b0:	4282      	cmp	r2, r0
    96b2:	d002      	beq.n	96ba <pdsGetDirDescr+0x1e>
}
    96b4:	0018      	movs	r0, r3
    96b6:	b002      	add	sp, #8
    96b8:	bd70      	pop	{r4, r5, r6, pc}
      memcpy(dirDescrToGet, &dirDescr, sizeof(PDS_DirDescr_t));
    96ba:	2208      	movs	r2, #8
    96bc:	4669      	mov	r1, sp
    96be:	0020      	movs	r0, r4
    96c0:	4b02      	ldr	r3, [pc, #8]	; (96cc <pdsGetDirDescr+0x30>)
    96c2:	4798      	blx	r3
      return true;
    96c4:	2301      	movs	r3, #1
    96c6:	e7f5      	b.n	96b4 <pdsGetDirDescr+0x18>
    96c8:	00004400 	.word	0x00004400
    96cc:	000155bf 	.word	0x000155bf

000096d0 <MiMAC_SetAltAddress>:
 *      None
 *
 *****************************************************************************************/

bool MiMAC_SetAltAddress( uint8_t *Address,  uint8_t *PanId)
{
    96d0:	b510      	push	{r4, lr}
	myNetworkAddress.v[0] = Address[0];
    96d2:	7802      	ldrb	r2, [r0, #0]
    96d4:	4b08      	ldr	r3, [pc, #32]	; (96f8 <MiMAC_SetAltAddress+0x28>)
    96d6:	701a      	strb	r2, [r3, #0]
	myNetworkAddress.v[1] = Address[1];
    96d8:	7842      	ldrb	r2, [r0, #1]
    96da:	705a      	strb	r2, [r3, #1]
	MAC_PANID.v[0] = PanId[0];
    96dc:	780a      	ldrb	r2, [r1, #0]
    96de:	4c07      	ldr	r4, [pc, #28]	; (96fc <MiMAC_SetAltAddress+0x2c>)
    96e0:	7022      	strb	r2, [r4, #0]
	MAC_PANID.v[1] = PanId[1];
    96e2:	784a      	ldrb	r2, [r1, #1]
    96e4:	7062      	strb	r2, [r4, #1]
	PHY_SetShortAddr(myNetworkAddress.Val);
    96e6:	8818      	ldrh	r0, [r3, #0]
    96e8:	4b05      	ldr	r3, [pc, #20]	; (9700 <MiMAC_SetAltAddress+0x30>)
    96ea:	4798      	blx	r3
	PHY_SetPanId(MAC_PANID.Val);
    96ec:	8820      	ldrh	r0, [r4, #0]
    96ee:	4b05      	ldr	r3, [pc, #20]	; (9704 <MiMAC_SetAltAddress+0x34>)
    96f0:	4798      	blx	r3
	return true;
}
    96f2:	2001      	movs	r0, #1
    96f4:	bd10      	pop	{r4, pc}
    96f6:	46c0      	nop			; (mov r8, r8)
    96f8:	2000227c 	.word	0x2000227c
    96fc:	200022f0 	.word	0x200022f0
    9700:	0000a979 	.word	0x0000a979
    9704:	0000a965 	.word	0x0000a965

00009708 <mic_generator>:

#if defined (ENABLE_SECURITY)
uint8_t addr[8] = {0xda , 0x98 , 0x22 , 0xfe , 0xff , 0xa3 , 0x04 , 0x00};
void mic_generator (uint8_t *Payloadinfo, uint8_t len , uint8_t frame_control ,  API_UINT32_UNION FrameCounter ,  uint8_t *SourceIEEEAddress)
{
    9708:	b5f0      	push	{r4, r5, r6, r7, lr}
    970a:	46c6      	mov	lr, r8
    970c:	b500      	push	{lr}
    970e:	b0c6      	sub	sp, #280	; 0x118
    9710:	0006      	movs	r6, r0
    9712:	000c      	movs	r4, r1
    9714:	469c      	mov	ip, r3
    9716:	994c      	ldr	r1, [sp, #304]	; 0x130
	uint16_t i ;										
	uint8_t j , iterations  , copy_packet1[255] , cbc_header_with_padding[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = len/16;
    9718:	0925      	lsrs	r5, r4, #4
	if (len % 16 != 0) iterations++;
    971a:	0723      	lsls	r3, r4, #28
    971c:	d000      	beq.n	9720 <mic_generator+0x18>
    971e:	3501      	adds	r5, #1
	InitVect_in[0] = 0x49;//frame_control;
    9720:	2049      	movs	r0, #73	; 0x49
    9722:	4b40      	ldr	r3, [pc, #256]	; (9824 <mic_generator+0x11c>)
    9724:	7018      	strb	r0, [r3, #0]
	cbc_header_with_padding[0] = 0x00;  // l(a)
    9726:	2300      	movs	r3, #0
    9728:	a802      	add	r0, sp, #8
    972a:	7003      	strb	r3, [r0, #0]
	cbc_header_with_padding[1] = 0x0d;  // l(a)Header Length
    972c:	330d      	adds	r3, #13
    972e:	7043      	strb	r3, [r0, #1]
	cbc_header_with_padding[2] = frame_control;  //frame_control;  //byte 1
    9730:	7082      	strb	r2, [r0, #2]
    9732:	2200      	movs	r2, #0
	for (i=0;i<8;i++)
	{
		InitVect_in[i+1] =  SourceIEEEAddress[i];
    9734:	4b3b      	ldr	r3, [pc, #236]	; (9824 <mic_generator+0x11c>)
    9736:	5c8f      	ldrb	r7, [r1, r2]
    9738:	18d0      	adds	r0, r2, r3
    973a:	7047      	strb	r7, [r0, #1]
		cbc_header_with_padding[i+7] = SourceIEEEAddress[i];
    973c:	0010      	movs	r0, r2
    973e:	af02      	add	r7, sp, #8
    9740:	46b8      	mov	r8, r7
    9742:	4440      	add	r0, r8
    9744:	5c8f      	ldrb	r7, [r1, r2]
    9746:	71c7      	strb	r7, [r0, #7]
    9748:	3201      	adds	r2, #1
	for (i=0;i<8;i++)
    974a:	2a08      	cmp	r2, #8
    974c:	d1f3      	bne.n	9736 <mic_generator+0x2e>
	}
	for (i=0;i<4;i++)
	{
		InitVect_in[i+9] = FrameCounter.v[i];
    974e:	4663      	mov	r3, ip
    9750:	466a      	mov	r2, sp
    9752:	71d3      	strb	r3, [r2, #7]
    9754:	79d3      	ldrb	r3, [r2, #7]
    9756:	4833      	ldr	r0, [pc, #204]	; (9824 <mic_generator+0x11c>)
    9758:	7243      	strb	r3, [r0, #9]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    975a:	4642      	mov	r2, r8
    975c:	70d3      	strb	r3, [r2, #3]
		InitVect_in[i+9] = FrameCounter.v[i];
    975e:	4663      	mov	r3, ip
    9760:	041b      	lsls	r3, r3, #16
    9762:	0e1b      	lsrs	r3, r3, #24
    9764:	7283      	strb	r3, [r0, #10]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    9766:	7113      	strb	r3, [r2, #4]
		InitVect_in[i+9] = FrameCounter.v[i];
    9768:	4663      	mov	r3, ip
    976a:	021b      	lsls	r3, r3, #8
    976c:	0e1b      	lsrs	r3, r3, #24
    976e:	72c3      	strb	r3, [r0, #11]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    9770:	7153      	strb	r3, [r2, #5]
		InitVect_in[i+9] = FrameCounter.v[i];
    9772:	4663      	mov	r3, ip
    9774:	0e1b      	lsrs	r3, r3, #24
    9776:	7303      	strb	r3, [r0, #12]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    9778:	7193      	strb	r3, [r2, #6]
	}
	//cbc_header_with_padding[14] = 0x00;  // Padding
	cbc_header_with_padding[15] = 0x00;   // Padding
    977a:	2300      	movs	r3, #0
    977c:	73d3      	strb	r3, [r2, #15]
	InitVect_in[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    977e:	2204      	movs	r2, #4
    9780:	7342      	strb	r2, [r0, #13]
	InitVect_in[14] = 0x00; // 15 th byte padded to zero
    9782:	7383      	strb	r3, [r0, #14]
	InitVect_in[15] = len; // For MIC calculation All preceding blocks will be incremented by 1
    9784:	73c4      	strb	r4, [r0, #15]
	PHY_EncryptReq(&InitVect_in[0], (uint8_t *)mySecurityKey);
    9786:	4928      	ldr	r1, [pc, #160]	; (9828 <mic_generator+0x120>)
    9788:	4b28      	ldr	r3, [pc, #160]	; (982c <mic_generator+0x124>)
    978a:	4798      	blx	r3
    978c:	2300      	movs	r3, #0
	for (i=0;i<16;i++)
	{
		copy_packet1[i] = cbc_header_with_padding[i];
    978e:	a906      	add	r1, sp, #24
    9790:	aa02      	add	r2, sp, #8
    9792:	5c9a      	ldrb	r2, [r3, r2]
    9794:	545a      	strb	r2, [r3, r1]
    9796:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    9798:	2b10      	cmp	r3, #16
    979a:	d1f9      	bne.n	9790 <mic_generator+0x88>
	}
	// Copy the Payload and Do the padding
	for (i=16;i<len+16;i++)
    979c:	0027      	movs	r7, r4
    979e:	3710      	adds	r7, #16
    97a0:	2f10      	cmp	r7, #16
    97a2:	dd0a      	ble.n	97ba <mic_generator+0xb2>
    97a4:	2010      	movs	r0, #16
	{
		copy_packet1[i]	= Payloadinfo[i-16];  // Copying the Payload
    97a6:	a906      	add	r1, sp, #24
    97a8:	18f2      	adds	r2, r6, r3
    97aa:	3a10      	subs	r2, #16
    97ac:	7812      	ldrb	r2, [r2, #0]
    97ae:	540a      	strb	r2, [r1, r0]
	for (i=16;i<len+16;i++)
    97b0:	3301      	adds	r3, #1
    97b2:	b29b      	uxth	r3, r3
    97b4:	0018      	movs	r0, r3
    97b6:	42bb      	cmp	r3, r7
    97b8:	dbf6      	blt.n	97a8 <mic_generator+0xa0>
	}
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
    97ba:	0023      	movs	r3, r4
    97bc:	3310      	adds	r3, #16
    97be:	001a      	movs	r2, r3
    97c0:	3501      	adds	r5, #1
    97c2:	0129      	lsls	r1, r5, #4
    97c4:	428b      	cmp	r3, r1
    97c6:	da07      	bge.n	97d8 <mic_generator+0xd0>
	{
		copy_packet1[i] = 0; // Padding
    97c8:	ac06      	add	r4, sp, #24
    97ca:	2000      	movs	r0, #0
    97cc:	54a0      	strb	r0, [r4, r2]
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
    97ce:	3301      	adds	r3, #1
    97d0:	b29b      	uxth	r3, r3
    97d2:	001a      	movs	r2, r3
    97d4:	428b      	cmp	r3, r1
    97d6:	dbf9      	blt.n	97cc <mic_generator+0xc4>
	}
	for (i=0;i<iterations+1;i++)
    97d8:	2200      	movs	r2, #0
    97da:	2700      	movs	r7, #0
    97dc:	2d00      	cmp	r5, #0
    97de:	dd15      	ble.n	980c <mic_generator+0x104>
	{
		for (j=0;j<16;j++)
		{
			InitVect_in[j]	= InitVect_in[j] ^ copy_packet1[j+(i*16)];
    97e0:	4e10      	ldr	r6, [pc, #64]	; (9824 <mic_generator+0x11c>)
    97e2:	0112      	lsls	r2, r2, #4
    97e4:	2300      	movs	r3, #0
    97e6:	a906      	add	r1, sp, #24
    97e8:	188c      	adds	r4, r1, r2
    97ea:	1999      	adds	r1, r3, r6
    97ec:	5ce2      	ldrb	r2, [r4, r3]
    97ee:	7808      	ldrb	r0, [r1, #0]
    97f0:	4042      	eors	r2, r0
    97f2:	700a      	strb	r2, [r1, #0]
    97f4:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    97f6:	2b10      	cmp	r3, #16
    97f8:	d1f7      	bne.n	97ea <mic_generator+0xe2>
		}
		PHY_EncryptReq(&InitVect_in[0], (uint8_t *)mySecurityKey);
    97fa:	490b      	ldr	r1, [pc, #44]	; (9828 <mic_generator+0x120>)
    97fc:	4809      	ldr	r0, [pc, #36]	; (9824 <mic_generator+0x11c>)
    97fe:	4b0b      	ldr	r3, [pc, #44]	; (982c <mic_generator+0x124>)
    9800:	4798      	blx	r3
	for (i=0;i<iterations+1;i++)
    9802:	3701      	adds	r7, #1
    9804:	b2bf      	uxth	r7, r7
    9806:	003a      	movs	r2, r7
    9808:	42af      	cmp	r7, r5
    980a:	dbea      	blt.n	97e2 <mic_generator+0xda>
    980c:	2300      	movs	r3, #0
	}
	for (i=0;i<16;i++)
	{
		CBC_mic[i] = InitVect_in[i];
    980e:	4808      	ldr	r0, [pc, #32]	; (9830 <mic_generator+0x128>)
    9810:	4904      	ldr	r1, [pc, #16]	; (9824 <mic_generator+0x11c>)
    9812:	5cca      	ldrb	r2, [r1, r3]
    9814:	54c2      	strb	r2, [r0, r3]
    9816:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    9818:	2b10      	cmp	r3, #16
    981a:	d1fa      	bne.n	9812 <mic_generator+0x10a>
	}

}
    981c:	b046      	add	sp, #280	; 0x118
    981e:	bc04      	pop	{r2}
    9820:	4690      	mov	r8, r2
    9822:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9824:	2000228c 	.word	0x2000228c
    9828:	00017990 	.word	0x00017990
    982c:	0000aa91 	.word	0x0000aa91
    9830:	200022d0 	.word	0x200022d0

00009834 <DataEncrypt>:
 *
 *****************************************************************************************/

bool DataEncrypt(uint8_t *Payloadinfo, uint8_t *Payload_len, API_UINT32_UNION FrameCounter,
uint8_t FrameControl)
{
    9834:	b5f0      	push	{r4, r5, r6, r7, lr}
    9836:	46de      	mov	lr, fp
    9838:	4657      	mov	r7, sl
    983a:	464e      	mov	r6, r9
    983c:	4645      	mov	r5, r8
    983e:	b5e0      	push	{r5, r6, r7, lr}
    9840:	b08d      	sub	sp, #52	; 0x34
    9842:	4680      	mov	r8, r0
    9844:	000e      	movs	r6, r1
    9846:	0014      	movs	r4, r2
    9848:	001a      	movs	r2, r3
	uint16_t i ;
	uint8_t iterations , block[16] , j , CTR_Nonce_and_Counter[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = *Payload_len/16;
    984a:	7809      	ldrb	r1, [r1, #0]
    984c:	090d      	lsrs	r5, r1, #4
	if (*Payload_len % 16 != 0) iterations++;
    984e:	070b      	lsls	r3, r1, #28
    9850:	d000      	beq.n	9854 <DataEncrypt+0x20>
    9852:	3501      	adds	r5, #1

	mic_generator(&Payloadinfo[0] , *Payload_len, FrameControl  , FrameCounter ,  MACInitParams.PAddress);
    9854:	4b37      	ldr	r3, [pc, #220]	; (9934 <DataEncrypt+0x100>)
    9856:	685b      	ldr	r3, [r3, #4]
    9858:	9300      	str	r3, [sp, #0]
    985a:	0023      	movs	r3, r4
    985c:	4640      	mov	r0, r8
    985e:	4f36      	ldr	r7, [pc, #216]	; (9938 <DataEncrypt+0x104>)
    9860:	47b8      	blx	r7

	for (i=*Payload_len;i<iterations *16 ; i++ )
    9862:	7831      	ldrb	r1, [r6, #0]
    9864:	b28b      	uxth	r3, r1
    9866:	002e      	movs	r6, r5
    9868:	012d      	lsls	r5, r5, #4
    986a:	42a9      	cmp	r1, r5
    986c:	da07      	bge.n	987e <DataEncrypt+0x4a>
	{
		Payloadinfo[i] = 0; // Padding
    986e:	2100      	movs	r1, #0
    9870:	4642      	mov	r2, r8
    9872:	54d1      	strb	r1, [r2, r3]
	for (i=*Payload_len;i<iterations *16 ; i++ )
    9874:	3301      	adds	r3, #1
    9876:	b29b      	uxth	r3, r3
    9878:	42ab      	cmp	r3, r5
    987a:	dbfa      	blt.n	9872 <DataEncrypt+0x3e>
    987c:	4690      	mov	r8, r2
	}
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    987e:	2201      	movs	r2, #1
    9880:	ab04      	add	r3, sp, #16
    9882:	701a      	strb	r2, [r3, #0]
	for (i=0;i<8;i++)
	{
		CTR_Nonce_and_Counter[i+1] = MACInitParams.PAddress[i];
    9884:	4b2b      	ldr	r3, [pc, #172]	; (9934 <DataEncrypt+0x100>)
    9886:	6858      	ldr	r0, [r3, #4]
    9888:	2300      	movs	r3, #0
    988a:	aa04      	add	r2, sp, #16
    988c:	18d2      	adds	r2, r2, r3
    988e:	5cc1      	ldrb	r1, [r0, r3]
    9890:	7051      	strb	r1, [r2, #1]
    9892:	3301      	adds	r3, #1
	for (i=0;i<8;i++)
    9894:	2b08      	cmp	r3, #8
    9896:	d1f8      	bne.n	988a <DataEncrypt+0x56>
	}
	for (i=0;i<4;i++)
	{
		CTR_Nonce_and_Counter[i+9] = FrameCounter.v[i];
    9898:	ab04      	add	r3, sp, #16
    989a:	725c      	strb	r4, [r3, #9]
    989c:	0a22      	lsrs	r2, r4, #8
    989e:	729a      	strb	r2, [r3, #10]
    98a0:	0c22      	lsrs	r2, r4, #16
    98a2:	72da      	strb	r2, [r3, #11]
    98a4:	0e24      	lsrs	r4, r4, #24
    98a6:	731c      	strb	r4, [r3, #12]
	}
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    98a8:	2204      	movs	r2, #4
    98aa:	735a      	strb	r2, [r3, #13]
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    98ac:	2200      	movs	r2, #0
    98ae:	739a      	strb	r2, [r3, #14]
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
    98b0:	73da      	strb	r2, [r3, #15]

	for (i=0;i<iterations+1;i++)
    98b2:	1c73      	adds	r3, r6, #1
    98b4:	4699      	mov	r9, r3
    98b6:	2300      	movs	r3, #0
    98b8:	469b      	mov	fp, r3
    98ba:	9303      	str	r3, [sp, #12]
    98bc:	464b      	mov	r3, r9
    98be:	2b00      	cmp	r3, #0
    98c0:	dd2f      	ble.n	9922 <DataEncrypt+0xee>
	{
		for (j=0;j<16;j++)
		{
			block[j] = CTR_Nonce_and_Counter[j];
    98c2:	ac08      	add	r4, sp, #32
    98c4:	ad04      	add	r5, sp, #16
		}
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    98c6:	4b1d      	ldr	r3, [pc, #116]	; (993c <DataEncrypt+0x108>)
    98c8:	469a      	mov	sl, r3
		for (j=0;j<16;j++)
		{
			if (CTR_Nonce_and_Counter[15] == 0)
			{
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    98ca:	4e1d      	ldr	r6, [pc, #116]	; (9940 <DataEncrypt+0x10c>)
    98cc:	e017      	b.n	98fe <DataEncrypt+0xca>
			}
			else
			{
				Payloadinfo[j+(i-1)*16] = block[j] ^ Payloadinfo[j+(i-1)*16];
    98ce:	5d1a      	ldrb	r2, [r3, r4]
    98d0:	5ccf      	ldrb	r7, [r1, r3]
    98d2:	407a      	eors	r2, r7
    98d4:	54ca      	strb	r2, [r1, r3]
    98d6:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    98d8:	2b10      	cmp	r3, #16
    98da:	d007      	beq.n	98ec <DataEncrypt+0xb8>
			if (CTR_Nonce_and_Counter[15] == 0)
    98dc:	2800      	cmp	r0, #0
    98de:	d1f6      	bne.n	98ce <DataEncrypt+0x9a>
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    98e0:	5d1a      	ldrb	r2, [r3, r4]
    98e2:	4667      	mov	r7, ip
    98e4:	5cff      	ldrb	r7, [r7, r3]
    98e6:	407a      	eors	r2, r7
    98e8:	54f2      	strb	r2, [r6, r3]
    98ea:	e7f4      	b.n	98d6 <DataEncrypt+0xa2>
			}
		}
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next operation
    98ec:	3001      	adds	r0, #1
    98ee:	73e8      	strb	r0, [r5, #15]
	for (i=0;i<iterations+1;i++)
    98f0:	9f03      	ldr	r7, [sp, #12]
    98f2:	3701      	adds	r7, #1
    98f4:	b2bb      	uxth	r3, r7
    98f6:	9303      	str	r3, [sp, #12]
    98f8:	469b      	mov	fp, r3
    98fa:	454b      	cmp	r3, r9
    98fc:	da11      	bge.n	9922 <DataEncrypt+0xee>
		CTR_Nonce_and_Counter[i+1] = MACInitParams.PAddress[i];
    98fe:	2300      	movs	r3, #0
			block[j] = CTR_Nonce_and_Counter[j];
    9900:	5d5a      	ldrb	r2, [r3, r5]
    9902:	551a      	strb	r2, [r3, r4]
    9904:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    9906:	2b10      	cmp	r3, #16
    9908:	d1fa      	bne.n	9900 <DataEncrypt+0xcc>
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    990a:	490e      	ldr	r1, [pc, #56]	; (9944 <DataEncrypt+0x110>)
    990c:	0020      	movs	r0, r4
    990e:	47d0      	blx	sl
			if (CTR_Nonce_and_Counter[15] == 0)
    9910:	7be8      	ldrb	r0, [r5, #15]
				Payloadinfo[j+(i-1)*16] = block[j] ^ Payloadinfo[j+(i-1)*16];
    9912:	4659      	mov	r1, fp
    9914:	3901      	subs	r1, #1
    9916:	0109      	lsls	r1, r1, #4
    9918:	2300      	movs	r3, #0
    991a:	4441      	add	r1, r8
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    991c:	4a0a      	ldr	r2, [pc, #40]	; (9948 <DataEncrypt+0x114>)
    991e:	4694      	mov	ip, r2
    9920:	e7dc      	b.n	98dc <DataEncrypt+0xa8>
	}
	return true;

}
    9922:	2001      	movs	r0, #1
    9924:	b00d      	add	sp, #52	; 0x34
    9926:	bc3c      	pop	{r2, r3, r4, r5}
    9928:	4690      	mov	r8, r2
    992a:	4699      	mov	r9, r3
    992c:	46a2      	mov	sl, r4
    992e:	46ab      	mov	fp, r5
    9930:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9932:	46c0      	nop			; (mov r8, r8)
    9934:	20002284 	.word	0x20002284
    9938:	00009709 	.word	0x00009709
    993c:	0000aa91 	.word	0x0000aa91
    9940:	200022b8 	.word	0x200022b8
    9944:	00017990 	.word	0x00017990
    9948:	200022d0 	.word	0x200022d0

0000994c <validate_mic>:
// Validates the Received mic with the mic computed from data packet decryption.
bool validate_mic(void)
{
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1])
    994c:	4b08      	ldr	r3, [pc, #32]	; (9970 <validate_mic+0x24>)
    994e:	781a      	ldrb	r2, [r3, #0]
    9950:	4b08      	ldr	r3, [pc, #32]	; (9974 <validate_mic+0x28>)
    9952:	781b      	ldrb	r3, [r3, #0]
	{
		return false;
    9954:	2000      	movs	r0, #0
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1])
    9956:	429a      	cmp	r2, r3
    9958:	d000      	beq.n	995c <validate_mic+0x10>
	}
	else
	{
		return true;
	}
}
    995a:	4770      	bx	lr
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1])
    995c:	4b04      	ldr	r3, [pc, #16]	; (9970 <validate_mic+0x24>)
    995e:	7858      	ldrb	r0, [r3, #1]
    9960:	4b04      	ldr	r3, [pc, #16]	; (9974 <validate_mic+0x28>)
    9962:	785b      	ldrb	r3, [r3, #1]
    9964:	1ac0      	subs	r0, r0, r3
    9966:	4243      	negs	r3, r0
    9968:	4158      	adcs	r0, r3
    996a:	b2c0      	uxtb	r0, r0
    996c:	e7f5      	b.n	995a <validate_mic+0xe>
    996e:	46c0      	nop			; (mov r8, r8)
    9970:	200022b8 	.word	0x200022b8
    9974:	200022e0 	.word	0x200022e0

00009978 <DataDecrypt>:
 *      None
 *
 *****************************************************************************************/
bool DataDecrypt(uint8_t *Payload, uint8_t *PayloadLen, uint8_t *SourceIEEEAddress,
API_UINT32_UNION FrameCounter, uint8_t FrameControl)
{
    9978:	b5f0      	push	{r4, r5, r6, r7, lr}
    997a:	46de      	mov	lr, fp
    997c:	4657      	mov	r7, sl
    997e:	464e      	mov	r6, r9
    9980:	4645      	mov	r5, r8
    9982:	b5e0      	push	{r5, r6, r7, lr}
    9984:	b091      	sub	sp, #68	; 0x44
    9986:	4681      	mov	r9, r0
    9988:	9106      	str	r1, [sp, #24]
    998a:	9204      	str	r2, [sp, #16]
    998c:	9305      	str	r3, [sp, #20]
    998e:	ab1a      	add	r3, sp, #104	; 0x68
    9990:	781b      	ldrb	r3, [r3, #0]
    9992:	9307      	str	r3, [sp, #28]
	uint16_t i ;
	uint8_t iterations , block[16] , j , CTR_Nonce_and_Counter[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = *PayloadLen/16;
    9994:	7809      	ldrb	r1, [r1, #0]
    9996:	090a      	lsrs	r2, r1, #4
	if (*PayloadLen % 16 != 0) iterations++;
    9998:	070b      	lsls	r3, r1, #28
    999a:	d000      	beq.n	999e <DataDecrypt+0x26>
    999c:	3201      	adds	r2, #1

	//mic_generator(&Payloadinfo[0] , *Payload_len);

	for (i=*PayloadLen;i<iterations *16 ; i++ )
    999e:	b28b      	uxth	r3, r1
    99a0:	0010      	movs	r0, r2
    99a2:	0112      	lsls	r2, r2, #4
    99a4:	4291      	cmp	r1, r2
    99a6:	da07      	bge.n	99b8 <DataDecrypt+0x40>
	{
		Payload[i] = 0; // Padding
    99a8:	2100      	movs	r1, #0
    99aa:	464c      	mov	r4, r9
    99ac:	54e1      	strb	r1, [r4, r3]
	for (i=*PayloadLen;i<iterations *16 ; i++ )
    99ae:	3301      	adds	r3, #1
    99b0:	b29b      	uxth	r3, r3
    99b2:	4293      	cmp	r3, r2
    99b4:	dbfa      	blt.n	99ac <DataDecrypt+0x34>
    99b6:	46a1      	mov	r9, r4
	}
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    99b8:	2201      	movs	r2, #1
    99ba:	ab08      	add	r3, sp, #32
    99bc:	701a      	strb	r2, [r3, #0]
    99be:	2300      	movs	r3, #0
	for (i=0;i<8;i++)
	{
		CTR_Nonce_and_Counter[i+1] = SourceIEEEAddress[i];
    99c0:	9c04      	ldr	r4, [sp, #16]
    99c2:	aa08      	add	r2, sp, #32
    99c4:	18d2      	adds	r2, r2, r3
    99c6:	5ce1      	ldrb	r1, [r4, r3]
    99c8:	7051      	strb	r1, [r2, #1]
    99ca:	3301      	adds	r3, #1
	for (i=0;i<8;i++)
    99cc:	2b08      	cmp	r3, #8
    99ce:	d1f8      	bne.n	99c2 <DataDecrypt+0x4a>
	}
	for (i=0;i<4;i++)
	{
		CTR_Nonce_and_Counter[i+9] = FrameCounter.v[i];
    99d0:	ab08      	add	r3, sp, #32
    99d2:	9905      	ldr	r1, [sp, #20]
    99d4:	7259      	strb	r1, [r3, #9]
    99d6:	0a0a      	lsrs	r2, r1, #8
    99d8:	729a      	strb	r2, [r3, #10]
    99da:	0c0a      	lsrs	r2, r1, #16
    99dc:	72da      	strb	r2, [r3, #11]
    99de:	0e0a      	lsrs	r2, r1, #24
    99e0:	731a      	strb	r2, [r3, #12]
	}
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode
    99e2:	2204      	movs	r2, #4
    99e4:	735a      	strb	r2, [r3, #13]
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    99e6:	2200      	movs	r2, #0
    99e8:	739a      	strb	r2, [r3, #14]
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
    99ea:	73da      	strb	r2, [r3, #15]


	for (i=0;i<iterations+1;i++)
    99ec:	1c43      	adds	r3, r0, #1
    99ee:	469a      	mov	sl, r3
    99f0:	2500      	movs	r5, #0
    99f2:	2300      	movs	r3, #0
    99f4:	4698      	mov	r8, r3
    99f6:	4653      	mov	r3, sl
    99f8:	2b00      	cmp	r3, #0
    99fa:	dd2e      	ble.n	9a5a <DataDecrypt+0xe2>
	{
		for (j=0;j<16;j++)
		{
			block[j] = CTR_Nonce_and_Counter[j];
    99fc:	ac0c      	add	r4, sp, #48	; 0x30
    99fe:	ae08      	add	r6, sp, #32
		}
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    9a00:	4b26      	ldr	r3, [pc, #152]	; (9a9c <DataDecrypt+0x124>)
    9a02:	469b      	mov	fp, r3
		for (j=0;j<16;j++)
		{
			if (CTR_Nonce_and_Counter[15] == 0)
			{
				CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    9a04:	4f26      	ldr	r7, [pc, #152]	; (9aa0 <DataDecrypt+0x128>)
    9a06:	4643      	mov	r3, r8
    9a08:	9303      	str	r3, [sp, #12]
    9a0a:	46a8      	mov	r8, r5
    9a0c:	e014      	b.n	9a38 <DataDecrypt+0xc0>
			}
			else
			{
				Payload[j+(i-1)*16] = block[j] ^ Payload[j+(i-1)*16];
    9a0e:	5d1a      	ldrb	r2, [r3, r4]
    9a10:	5ce9      	ldrb	r1, [r5, r3]
    9a12:	404a      	eors	r2, r1
    9a14:	54ea      	strb	r2, [r5, r3]
    9a16:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    9a18:	2b10      	cmp	r3, #16
    9a1a:	d004      	beq.n	9a26 <DataDecrypt+0xae>
			if (CTR_Nonce_and_Counter[15] == 0)
    9a1c:	2800      	cmp	r0, #0
    9a1e:	d1f6      	bne.n	9a0e <DataDecrypt+0x96>
				CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    9a20:	5d1a      	ldrb	r2, [r3, r4]
    9a22:	54fa      	strb	r2, [r7, r3]
    9a24:	e7f7      	b.n	9a16 <DataDecrypt+0x9e>
			}
		}
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next opration
    9a26:	3001      	adds	r0, #1
    9a28:	73f0      	strb	r0, [r6, #15]
	for (i=0;i<iterations+1;i++)
    9a2a:	9d03      	ldr	r5, [sp, #12]
    9a2c:	3501      	adds	r5, #1
    9a2e:	b2ab      	uxth	r3, r5
    9a30:	9303      	str	r3, [sp, #12]
    9a32:	4698      	mov	r8, r3
    9a34:	4553      	cmp	r3, sl
    9a36:	da10      	bge.n	9a5a <DataDecrypt+0xe2>
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    9a38:	2300      	movs	r3, #0
			block[j] = CTR_Nonce_and_Counter[j];
    9a3a:	5d9a      	ldrb	r2, [r3, r6]
    9a3c:	551a      	strb	r2, [r3, r4]
    9a3e:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    9a40:	2b10      	cmp	r3, #16
    9a42:	d1fa      	bne.n	9a3a <DataDecrypt+0xc2>
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    9a44:	4917      	ldr	r1, [pc, #92]	; (9aa4 <DataDecrypt+0x12c>)
    9a46:	0020      	movs	r0, r4
    9a48:	47d8      	blx	fp
			if (CTR_Nonce_and_Counter[15] == 0)
    9a4a:	7bf0      	ldrb	r0, [r6, #15]
				Payload[j+(i-1)*16] = block[j] ^ Payload[j+(i-1)*16];
    9a4c:	4642      	mov	r2, r8
    9a4e:	3a01      	subs	r2, #1
    9a50:	0112      	lsls	r2, r2, #4
    9a52:	2300      	movs	r3, #0
    9a54:	444a      	add	r2, r9
    9a56:	0015      	movs	r5, r2
    9a58:	e7e0      	b.n	9a1c <DataDecrypt+0xa4>
	}
	*PayloadLen = *PayloadLen-4;
    9a5a:	9b06      	ldr	r3, [sp, #24]
    9a5c:	7819      	ldrb	r1, [r3, #0]
    9a5e:	3904      	subs	r1, #4
    9a60:	b2c9      	uxtb	r1, r1
    9a62:	7019      	strb	r1, [r3, #0]
	mic_generator(&Payload[0] , *PayloadLen , FrameControl  , FrameCounter , SourceIEEEAddress);
    9a64:	9b04      	ldr	r3, [sp, #16]
    9a66:	9300      	str	r3, [sp, #0]
    9a68:	9b05      	ldr	r3, [sp, #20]
    9a6a:	9a07      	ldr	r2, [sp, #28]
    9a6c:	4648      	mov	r0, r9
    9a6e:	4c0e      	ldr	r4, [pc, #56]	; (9aa8 <DataDecrypt+0x130>)
    9a70:	47a0      	blx	r4
    9a72:	2300      	movs	r3, #0
	for (i=0;i<16;i++)
	{
		final_mic_value[i] = CTR_mic[i] ^ CBC_mic[i];
    9a74:	4d0d      	ldr	r5, [pc, #52]	; (9aac <DataDecrypt+0x134>)
    9a76:	4c0a      	ldr	r4, [pc, #40]	; (9aa0 <DataDecrypt+0x128>)
    9a78:	480d      	ldr	r0, [pc, #52]	; (9ab0 <DataDecrypt+0x138>)
    9a7a:	5ce2      	ldrb	r2, [r4, r3]
    9a7c:	5cc1      	ldrb	r1, [r0, r3]
    9a7e:	404a      	eors	r2, r1
    9a80:	54ea      	strb	r2, [r5, r3]
    9a82:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    9a84:	2b10      	cmp	r3, #16
    9a86:	d1f8      	bne.n	9a7a <DataDecrypt+0x102>
	}
	return validate_mic();
    9a88:	4b0a      	ldr	r3, [pc, #40]	; (9ab4 <DataDecrypt+0x13c>)
    9a8a:	4798      	blx	r3

}
    9a8c:	b011      	add	sp, #68	; 0x44
    9a8e:	bc3c      	pop	{r2, r3, r4, r5}
    9a90:	4690      	mov	r8, r2
    9a92:	4699      	mov	r9, r3
    9a94:	46a2      	mov	sl, r4
    9a96:	46ab      	mov	fp, r5
    9a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9a9a:	46c0      	nop			; (mov r8, r8)
    9a9c:	0000aa91 	.word	0x0000aa91
    9aa0:	200022a8 	.word	0x200022a8
    9aa4:	00017990 	.word	0x00017990
    9aa8:	00009709 	.word	0x00009709
    9aac:	200022b8 	.word	0x200022b8
    9ab0:	200022d0 	.word	0x200022d0
    9ab4:	0000994d 	.word	0x0000994d

00009ab8 <MiMAC_Set>:
     * Remarks:
     *      None
     *
     *****************************************************************************************/
bool MiMAC_Set(mac_set_params_t id, uint8_t *value)
{
    9ab8:	b510      	push	{r4, lr}
    switch(id)
    9aba:	2800      	cmp	r0, #0
    9abc:	d109      	bne.n	9ad2 <MiMAC_Set+0x1a>
    {
      case MAC_CHANNEL:
      {
         if(*value > LAST_CHANNEL_NUM) //26 // TODO: this check is necessary here? as we may connect a sub-gig or a 2.4gig?
    9abe:	780b      	ldrb	r3, [r1, #0]
    9ac0:	2b19      	cmp	r3, #25
    9ac2:	d807      	bhi.n	9ad4 <MiMAC_Set+0x1c>
         {
           return false;
         }
          MACCurrentChannel = *value;
    9ac4:	4a04      	ldr	r2, [pc, #16]	; (9ad8 <MiMAC_Set+0x20>)
    9ac6:	7013      	strb	r3, [r2, #0]
          PHY_SetChannel(MACCurrentChannel);
    9ac8:	0018      	movs	r0, r3
    9aca:	4b04      	ldr	r3, [pc, #16]	; (9adc <MiMAC_Set+0x24>)
    9acc:	4798      	blx	r3
          return true;
    9ace:	2001      	movs	r0, #1
    9ad0:	e000      	b.n	9ad4 <MiMAC_Set+0x1c>
      break;

     default:
     break;
    }
    return false;
    9ad2:	2000      	movs	r0, #0
}
    9ad4:	bd10      	pop	{r4, pc}
    9ad6:	46c0      	nop			; (mov r8, r8)
    9ad8:	200022f2 	.word	0x200022f2
    9adc:	0000a9dd 	.word	0x0000a9dd

00009ae0 <MiMAC_Init>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_Init(MACINIT_PARAM initValue)
{
    9ae0:	b530      	push	{r4, r5, lr}
    9ae2:	b083      	sub	sp, #12
    9ae4:	466c      	mov	r4, sp
    9ae6:	9000      	str	r0, [sp, #0]
    9ae8:	9101      	str	r1, [sp, #4]
	uint8_t i;

	PHY_Init();
    9aea:	4b10      	ldr	r3, [pc, #64]	; (9b2c <MiMAC_Init+0x4c>)
    9aec:	4798      	blx	r3
	MACInitParams = initValue;
    9aee:	4d10      	ldr	r5, [pc, #64]	; (9b30 <MiMAC_Init+0x50>)
    9af0:	002b      	movs	r3, r5
    9af2:	cc06      	ldmia	r4!, {r1, r2}
    9af4:	c306      	stmia	r3!, {r1, r2}
	uint16_t x =  PHY_RandomReq();
    9af6:	4b0f      	ldr	r3, [pc, #60]	; (9b34 <MiMAC_Init+0x54>)
    9af8:	4798      	blx	r3
    9afa:	0004      	movs	r4, r0
	// Set RF mode
	PHY_SetRxState(true);
    9afc:	2001      	movs	r0, #1
    9afe:	4b0e      	ldr	r3, [pc, #56]	; (9b38 <MiMAC_Init+0x58>)
    9b00:	4798      	blx	r3
	IEEESeqNum =   x & 0xff;
    9b02:	4b0e      	ldr	r3, [pc, #56]	; (9b3c <MiMAC_Init+0x5c>)
    9b04:	701c      	strb	r4, [r3, #0]

	// Set Node Address
	PHY_SetIEEEAddr(MACInitParams.PAddress);
    9b06:	6868      	ldr	r0, [r5, #4]
    9b08:	4b0d      	ldr	r3, [pc, #52]	; (9b40 <MiMAC_Init+0x60>)
    9b0a:	4798      	blx	r3

	for (i = 0; i < BANK_SIZE; i++)
	{
		RxBuffer[i].PayloadLen = 0;
    9b0c:	4b0d      	ldr	r3, [pc, #52]	; (9b44 <MiMAC_Init+0x64>)
    9b0e:	2200      	movs	r2, #0
    9b10:	701a      	strb	r2, [r3, #0]
    9b12:	2102      	movs	r1, #2
    9b14:	31ff      	adds	r1, #255	; 0xff
    9b16:	545a      	strb	r2, [r3, r1]
    9b18:	490b      	ldr	r1, [pc, #44]	; (9b48 <MiMAC_Init+0x68>)
    9b1a:	545a      	strb	r2, [r3, r1]
    9b1c:	490b      	ldr	r1, [pc, #44]	; (9b4c <MiMAC_Init+0x6c>)
    9b1e:	545a      	strb	r2, [r3, r1]
				OutgoingFrameCounter.Val = 0;
				PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
				OutgoingFrameCounter.Val = 1;
			}
		#else
			OutgoingFrameCounter.Val = 1;
    9b20:	3201      	adds	r2, #1
    9b22:	4b0b      	ldr	r3, [pc, #44]	; (9b50 <MiMAC_Init+0x70>)
    9b24:	601a      	str	r2, [r3, #0]
		#endif
	#endif

	return true;
}
    9b26:	2001      	movs	r0, #1
    9b28:	b003      	add	sp, #12
    9b2a:	bd30      	pop	{r4, r5, pc}
    9b2c:	0000a925 	.word	0x0000a925
    9b30:	20002284 	.word	0x20002284
    9b34:	0000aa79 	.word	0x0000aa79
    9b38:	0000a959 	.word	0x0000a959
    9b3c:	20002179 	.word	0x20002179
    9b40:	0000aa9d 	.word	0x0000aa9d
    9b44:	200023fc 	.word	0x200023fc
    9b48:	00000202 	.word	0x00000202
    9b4c:	00000303 	.word	0x00000303
    9b50:	200022cc 	.word	0x200022cc

00009b54 <MiMAC_SendPacket>:

bool MiMAC_SendPacket( MAC_TRANS_PARAM transParam,
         uint8_t *MACPayload,
         uint8_t MACPayloadLen, uint8_t msghandle,
         DataConf_callback_t ConfCallback)
{
    9b54:	b5f0      	push	{r4, r5, r6, r7, lr}
    9b56:	46de      	mov	lr, fp
    9b58:	4657      	mov	r7, sl
    9b5a:	464e      	mov	r6, r9
    9b5c:	4645      	mov	r5, r8
    9b5e:	b5e0      	push	{r5, r6, r7, lr}
    9b60:	b087      	sub	sp, #28
    9b62:	af03      	add	r7, sp, #12
    9b64:	1c04      	adds	r4, r0, #0
    9b66:	9003      	str	r0, [sp, #12]
    9b68:	0008      	movs	r0, r1
    9b6a:	9104      	str	r1, [sp, #16]
    9b6c:	0015      	movs	r5, r2
    9b6e:	0a2d      	lsrs	r5, r5, #8
    9b70:	9205      	str	r2, [sp, #20]
    9b72:	9300      	str	r3, [sp, #0]
    9b74:	ab11      	add	r3, sp, #68	; 0x44
    9b76:	781b      	ldrb	r3, [r3, #0]
    9b78:	469a      	mov	sl, r3
    9b7a:	b2e4      	uxtb	r4, r4
    9b7c:	06a6      	lsls	r6, r4, #26
    9b7e:	0ff6      	lsrs	r6, r6, #31
    9b80:	9002      	str	r0, [sp, #8]
    9b82:	b2d3      	uxtb	r3, r2
    9b84:	469c      	mov	ip, r3
    9b86:	b2ed      	uxtb	r5, r5
    uint8_t headerLength;
    uint8_t loc = 0;
    uint8_t i = 0;

	uint8_t frameControl = 0;
	dataConfAvailable = false;
    9b88:	2200      	movs	r2, #0
    9b8a:	4bc4      	ldr	r3, [pc, #784]	; (9e9c <MiMAC_SendPacket+0x348>)
    9b8c:	701a      	strb	r2, [r3, #0]
	#ifndef TARGET_SMALL
		bool IntraPAN;
	#endif
	
	MACdatatransParam = transParam;
    9b8e:	4bc4      	ldr	r3, [pc, #784]	; (9ea0 <MiMAC_SendPacket+0x34c>)
    9b90:	cf07      	ldmia	r7!, {r0, r1, r2}
    9b92:	c307      	stmia	r3!, {r0, r1, r2}

    if (transParam.flags.bits.broadcast)
    9b94:	0763      	lsls	r3, r4, #29
    9b96:	d501      	bpl.n	9b9c <MiMAC_SendPacket+0x48>
    {
        transParam.altDestAddr = true;
    9b98:	2301      	movs	r3, #1
    9b9a:	469c      	mov	ip, r3
    }

    if (transParam.flags.bits.secEn)
    9b9c:	2308      	movs	r3, #8
    9b9e:	4023      	ands	r3, r4
    9ba0:	001a      	movs	r2, r3
    {
        transParam.altSrcAddr = false;
    9ba2:	4253      	negs	r3, r2
    9ba4:	4153      	adcs	r3, r2
    9ba6:	425b      	negs	r3, r3
    9ba8:	401d      	ands	r5, r3
    }

    // set the frame control in variable i
    if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND)
    9baa:	2303      	movs	r3, #3
    9bac:	4023      	ands	r3, r4
    9bae:	2b01      	cmp	r3, #1
    9bb0:	d04d      	beq.n	9c4e <MiMAC_SendPacket+0xfa>
    {
        frameControl = 0x03;
    } else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA)
    {
        frameControl = 0x01;
    9bb2:	2201      	movs	r2, #1
    9bb4:	4691      	mov	r9, r2
    } else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA)
    9bb6:	2b00      	cmp	r3, #0
    9bb8:	d004      	beq.n	9bc4 <MiMAC_SendPacket+0x70>
    }
	else if (transParam.flags.bits.packetType == PACKET_TYPE_ACK)
    {
        frameControl = 0x02;
    9bba:	1e9a      	subs	r2, r3, #2
    9bbc:	4251      	negs	r1, r2
    9bbe:	4151      	adcs	r1, r2
    9bc0:	004a      	lsls	r2, r1, #1
    9bc2:	4691      	mov	r9, r2
    }
    // decide the header length for different addressing mode
#ifndef TARGET_SMALL
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    9bc4:	aa03      	add	r2, sp, #12
    9bc6:	8952      	ldrh	r2, [r2, #10]
    9bc8:	48b6      	ldr	r0, [pc, #728]	; (9ea4 <MiMAC_SendPacket+0x350>)
    9bca:	8800      	ldrh	r0, [r0, #0]
    9bcc:	4290      	cmp	r0, r2
    9bce:	d041      	beq.n	9c54 <MiMAC_SendPacket+0x100>
    }
#ifndef TARGET_SMALL
    else
    {
        headerLength = 7;
        IntraPAN = false;
    9bd0:	2200      	movs	r2, #0
    9bd2:	4693      	mov	fp, r2
        headerLength = 7;
    9bd4:	3207      	adds	r2, #7
    }
#endif

    if (transParam.altDestAddr)
    9bd6:	46e0      	mov	r8, ip
    {
        headerLength += 2;
    } else
    {
        headerLength += 8;
    9bd8:	0017      	movs	r7, r2
    9bda:	3708      	adds	r7, #8
    if (transParam.altDestAddr)
    9bdc:	4661      	mov	r1, ip
    9bde:	2900      	cmp	r1, #0
    9be0:	d000      	beq.n	9be4 <MiMAC_SendPacket+0x90>
        headerLength += 2;
    9be2:	1c97      	adds	r7, r2, #2
    }

    if (transParam.altSrcAddr)
    9be4:	2d00      	cmp	r5, #0
    9be6:	d044      	beq.n	9c72 <MiMAC_SendPacket+0x11e>
    {
        headerLength += 2;
    9be8:	3702      	adds	r7, #2
    9bea:	b2fa      	uxtb	r2, r7
    9bec:	9201      	str	r2, [sp, #4]
    } else
    {
        headerLength += 8;
    }

    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false)
    9bee:	2224      	movs	r2, #36	; 0x24
    9bf0:	4014      	ands	r4, r2
    9bf2:	2c20      	cmp	r4, #32
    9bf4:	d041      	beq.n	9c7a <MiMAC_SendPacket+0x126>
    {
        frameControl |= 0x20;
    }

    // use PACKET_TYPE_RESERVE to represent beacon. Fixed format for beacon packet
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    9bf6:	2b03      	cmp	r3, #3
    9bf8:	d044      	beq.n	9c84 <MiMAC_SendPacket+0x130>
        IntraPAN = false;
#endif
        transParam.altSrcAddr = true;
        transParam.flags.bits.ackReq = false;
    }
	if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND) 
    9bfa:	aa03      	add	r2, sp, #12
    9bfc:	0171      	lsls	r1, r6, #5
    9bfe:	7813      	ldrb	r3, [r2, #0]
    9c00:	2020      	movs	r0, #32
    9c02:	4383      	bics	r3, r0
    9c04:	430b      	orrs	r3, r1
    9c06:	7013      	strb	r3, [r2, #0]
    9c08:	2203      	movs	r2, #3
    9c0a:	4013      	ands	r3, r2
    9c0c:	2b01      	cmp	r3, #1
    9c0e:	d041      	beq.n	9c94 <MiMAC_SendPacket+0x140>
    {
        transParam.flags.bits.ackReq = false;
    }

#ifdef ENABLE_SECURITY
    if (transParam.flags.bits.secEn)
    9c10:	ab03      	add	r3, sp, #12
    9c12:	0172      	lsls	r2, r6, #5
    9c14:	781c      	ldrb	r4, [r3, #0]
    9c16:	2120      	movs	r1, #32
    9c18:	438c      	bics	r4, r1
    9c1a:	4314      	orrs	r4, r2
    9c1c:	701c      	strb	r4, [r3, #0]
    9c1e:	b2e4      	uxtb	r4, r4
    9c20:	0723      	lsls	r3, r4, #28
    9c22:	d439      	bmi.n	9c98 <MiMAC_SendPacket+0x144>
		// 4 byte mic and 5 byte outgoing frame counter
		packet[loc++] = MACPayloadLen+headerLength+9;
    } else
#endif
    {
		packet[loc++] = MACPayloadLen+headerLength;
    9c24:	ab10      	add	r3, sp, #64	; 0x40
    9c26:	781b      	ldrb	r3, [r3, #0]
    9c28:	9a01      	ldr	r2, [sp, #4]
    9c2a:	18d7      	adds	r7, r2, r3
    9c2c:	4b9e      	ldr	r3, [pc, #632]	; (9ea8 <MiMAC_SendPacket+0x354>)
    9c2e:	701f      	strb	r7, [r3, #0]
    }

    // set frame control LSB
	packet[loc++] = frameControl;
    9c30:	4b9d      	ldr	r3, [pc, #628]	; (9ea8 <MiMAC_SendPacket+0x354>)
    9c32:	464a      	mov	r2, r9
    9c34:	705a      	strb	r2, [r3, #1]

    // set frame control MSB
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    9c36:	43e3      	mvns	r3, r4
    9c38:	079b      	lsls	r3, r3, #30
    9c3a:	d040      	beq.n	9cbe <MiMAC_SendPacket+0x16a>
		packet[loc++] = 0x80;
        // sequence number
		packet[loc++] = IEEESeqNum++;
    } else
    {
        if (transParam.altDestAddr && transParam.altSrcAddr)
    9c3c:	4643      	mov	r3, r8
    9c3e:	2b00      	cmp	r3, #0
    9c40:	d05f      	beq.n	9d02 <MiMAC_SendPacket+0x1ae>
    9c42:	2d00      	cmp	r5, #0
    9c44:	d045      	beq.n	9cd2 <MiMAC_SendPacket+0x17e>
        {
			packet[loc++] = 0x88;
    9c46:	2288      	movs	r2, #136	; 0x88
    9c48:	4b97      	ldr	r3, [pc, #604]	; (9ea8 <MiMAC_SendPacket+0x354>)
    9c4a:	709a      	strb	r2, [r3, #2]
    9c4c:	e044      	b.n	9cd8 <MiMAC_SendPacket+0x184>
        frameControl = 0x03;
    9c4e:	2203      	movs	r2, #3
    9c50:	4691      	mov	r9, r2
    9c52:	e7b7      	b.n	9bc4 <MiMAC_SendPacket+0x70>
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    9c54:	4895      	ldr	r0, [pc, #596]	; (9eac <MiMAC_SendPacket+0x358>)
    9c56:	4282      	cmp	r2, r0
    9c58:	d007      	beq.n	9c6a <MiMAC_SendPacket+0x116>
        frameControl |= 0x40;
    9c5a:	2240      	movs	r2, #64	; 0x40
    9c5c:	4649      	mov	r1, r9
    9c5e:	4311      	orrs	r1, r2
    9c60:	4689      	mov	r9, r1
        IntraPAN = true;
    9c62:	3a3f      	subs	r2, #63	; 0x3f
    9c64:	4693      	mov	fp, r2
        headerLength = 5;
    9c66:	3204      	adds	r2, #4
        IntraPAN = true;
    9c68:	e7b5      	b.n	9bd6 <MiMAC_SendPacket+0x82>
        IntraPAN = false;
    9c6a:	2200      	movs	r2, #0
    9c6c:	4693      	mov	fp, r2
        headerLength = 7;
    9c6e:	3207      	adds	r2, #7
    9c70:	e7b1      	b.n	9bd6 <MiMAC_SendPacket+0x82>
        headerLength += 8;
    9c72:	3708      	adds	r7, #8
    9c74:	b2fa      	uxtb	r2, r7
    9c76:	9201      	str	r2, [sp, #4]
    9c78:	e7b9      	b.n	9bee <MiMAC_SendPacket+0x9a>
        frameControl |= 0x20;
    9c7a:	3a04      	subs	r2, #4
    9c7c:	4649      	mov	r1, r9
    9c7e:	4311      	orrs	r1, r2
    9c80:	4689      	mov	r9, r1
    9c82:	e7b8      	b.n	9bf6 <MiMAC_SendPacket+0xa2>
        transParam.altSrcAddr = true;
    9c84:	2501      	movs	r5, #1
        transParam.flags.bits.ackReq = false;
    9c86:	2600      	movs	r6, #0
        IntraPAN = false;
    9c88:	2300      	movs	r3, #0
    9c8a:	469b      	mov	fp, r3
        frameControl = 0x00;
    9c8c:	4699      	mov	r9, r3
        headerLength = 7;
    9c8e:	3307      	adds	r3, #7
    9c90:	9301      	str	r3, [sp, #4]
    9c92:	e7b2      	b.n	9bfa <MiMAC_SendPacket+0xa6>
        transParam.flags.bits.ackReq = false;
    9c94:	2600      	movs	r6, #0
    9c96:	e7bb      	b.n	9c10 <MiMAC_SendPacket+0xbc>
        frameControl |= 0x08;
    9c98:	2308      	movs	r3, #8
    9c9a:	464a      	mov	r2, r9
    9c9c:	431a      	orrs	r2, r3
    9c9e:	4691      	mov	r9, r2
		DataEncrypt(MACPayload, &MACPayloadLen, OutgoingFrameCounter, frameControl);
    9ca0:	4b83      	ldr	r3, [pc, #524]	; (9eb0 <MiMAC_SendPacket+0x35c>)
    9ca2:	681a      	ldr	r2, [r3, #0]
    9ca4:	464b      	mov	r3, r9
    9ca6:	a910      	add	r1, sp, #64	; 0x40
    9ca8:	9800      	ldr	r0, [sp, #0]
    9caa:	4f82      	ldr	r7, [pc, #520]	; (9eb4 <MiMAC_SendPacket+0x360>)
    9cac:	47b8      	blx	r7
		packet[loc++] = MACPayloadLen+headerLength+9;
    9cae:	ab10      	add	r3, sp, #64	; 0x40
    9cb0:	781b      	ldrb	r3, [r3, #0]
    9cb2:	3309      	adds	r3, #9
    9cb4:	9a01      	ldr	r2, [sp, #4]
    9cb6:	18d7      	adds	r7, r2, r3
    9cb8:	4b7b      	ldr	r3, [pc, #492]	; (9ea8 <MiMAC_SendPacket+0x354>)
    9cba:	701f      	strb	r7, [r3, #0]
    9cbc:	e7b8      	b.n	9c30 <MiMAC_SendPacket+0xdc>
		packet[loc++] = 0x80;
    9cbe:	4b7a      	ldr	r3, [pc, #488]	; (9ea8 <MiMAC_SendPacket+0x354>)
    9cc0:	2280      	movs	r2, #128	; 0x80
    9cc2:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    9cc4:	497c      	ldr	r1, [pc, #496]	; (9eb8 <MiMAC_SendPacket+0x364>)
    9cc6:	780a      	ldrb	r2, [r1, #0]
    9cc8:	1c50      	adds	r0, r2, #1
    9cca:	7008      	strb	r0, [r1, #0]
    9ccc:	70da      	strb	r2, [r3, #3]
    9cce:	2204      	movs	r2, #4
    9cd0:	e03e      	b.n	9d50 <MiMAC_SendPacket+0x1fc>

        } else if (transParam.altDestAddr && transParam.altSrcAddr == 0)
        {
			packet[loc++] = 0xC8;
    9cd2:	22c8      	movs	r2, #200	; 0xc8
    9cd4:	4b74      	ldr	r3, [pc, #464]	; (9ea8 <MiMAC_SendPacket+0x354>)
    9cd6:	709a      	strb	r2, [r3, #2]
        {
			packet[loc++] = 0xCC;
        }

        // sequence number
		packet[loc++] = IEEESeqNum++;
    9cd8:	4b77      	ldr	r3, [pc, #476]	; (9eb8 <MiMAC_SendPacket+0x364>)
    9cda:	781a      	ldrb	r2, [r3, #0]
    9cdc:	1c51      	adds	r1, r2, #1
    9cde:	7019      	strb	r1, [r3, #0]
    9ce0:	4b71      	ldr	r3, [pc, #452]	; (9ea8 <MiMAC_SendPacket+0x354>)
    9ce2:	70da      	strb	r2, [r3, #3]

        // destination PANID
		packet[loc++] = transParam.DestPANID.v[0];
    9ce4:	aa03      	add	r2, sp, #12
    9ce6:	7a91      	ldrb	r1, [r2, #10]
    9ce8:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    9cea:	7ad2      	ldrb	r2, [r2, #11]
    9cec:	715a      	strb	r2, [r3, #5]

        // destination address
        if (transParam.flags.bits.broadcast)
    9cee:	0763      	lsls	r3, r4, #29
    9cf0:	d429      	bmi.n	9d46 <MiMAC_SendPacket+0x1f2>
			packet[loc++] = 0xFF;
        } else
        {
            if (transParam.altDestAddr)
            {
				packet[loc++] = transParam.DestAddress[0];
    9cf2:	9902      	ldr	r1, [sp, #8]
    9cf4:	780a      	ldrb	r2, [r1, #0]
    9cf6:	4b6c      	ldr	r3, [pc, #432]	; (9ea8 <MiMAC_SendPacket+0x354>)
    9cf8:	719a      	strb	r2, [r3, #6]
				packet[loc++] = transParam.DestAddress[1];
    9cfa:	784a      	ldrb	r2, [r1, #1]
    9cfc:	71da      	strb	r2, [r3, #7]
    9cfe:	2208      	movs	r2, #8
    9d00:	e026      	b.n	9d50 <MiMAC_SendPacket+0x1fc>
        } else if (transParam.altDestAddr == 0 && transParam.altSrcAddr == 1)
    9d02:	2d00      	cmp	r5, #0
    9d04:	d00f      	beq.n	9d26 <MiMAC_SendPacket+0x1d2>
			packet[loc++] = 0x8C;
    9d06:	4b68      	ldr	r3, [pc, #416]	; (9ea8 <MiMAC_SendPacket+0x354>)
    9d08:	228c      	movs	r2, #140	; 0x8c
    9d0a:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    9d0c:	496a      	ldr	r1, [pc, #424]	; (9eb8 <MiMAC_SendPacket+0x364>)
    9d0e:	780a      	ldrb	r2, [r1, #0]
    9d10:	1c50      	adds	r0, r2, #1
    9d12:	7008      	strb	r0, [r1, #0]
    9d14:	70da      	strb	r2, [r3, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    9d16:	aa03      	add	r2, sp, #12
    9d18:	7a91      	ldrb	r1, [r2, #10]
    9d1a:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    9d1c:	7ad2      	ldrb	r2, [r2, #11]
    9d1e:	715a      	strb	r2, [r3, #5]
        if (transParam.flags.bits.broadcast)
    9d20:	0763      	lsls	r3, r4, #29
    9d22:	d410      	bmi.n	9d46 <MiMAC_SendPacket+0x1f2>
    9d24:	e099      	b.n	9e5a <MiMAC_SendPacket+0x306>
			packet[loc++] = 0xCC;
    9d26:	4b60      	ldr	r3, [pc, #384]	; (9ea8 <MiMAC_SendPacket+0x354>)
    9d28:	22cc      	movs	r2, #204	; 0xcc
    9d2a:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    9d2c:	4962      	ldr	r1, [pc, #392]	; (9eb8 <MiMAC_SendPacket+0x364>)
    9d2e:	780a      	ldrb	r2, [r1, #0]
    9d30:	1c50      	adds	r0, r2, #1
    9d32:	7008      	strb	r0, [r1, #0]
    9d34:	70da      	strb	r2, [r3, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    9d36:	aa03      	add	r2, sp, #12
    9d38:	7a91      	ldrb	r1, [r2, #10]
    9d3a:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    9d3c:	7ad2      	ldrb	r2, [r2, #11]
    9d3e:	715a      	strb	r2, [r3, #5]
        if (transParam.flags.bits.broadcast)
    9d40:	0763      	lsls	r3, r4, #29
    9d42:	d400      	bmi.n	9d46 <MiMAC_SendPacket+0x1f2>
    9d44:	e085      	b.n	9e52 <MiMAC_SendPacket+0x2fe>
			packet[loc++] = 0xFF;
    9d46:	4b58      	ldr	r3, [pc, #352]	; (9ea8 <MiMAC_SendPacket+0x354>)
    9d48:	22ff      	movs	r2, #255	; 0xff
    9d4a:	719a      	strb	r2, [r3, #6]
			packet[loc++] = 0xFF;
    9d4c:	71da      	strb	r2, [r3, #7]
    9d4e:	3af7      	subs	r2, #247	; 0xf7
                }
            }
        }
    }
	
	if(transParam.flags.bits.ackReq)
    9d50:	a903      	add	r1, sp, #12
    9d52:	0170      	lsls	r0, r6, #5
    9d54:	780b      	ldrb	r3, [r1, #0]
    9d56:	2420      	movs	r4, #32
    9d58:	43a3      	bics	r3, r4
    9d5a:	4303      	orrs	r3, r0
    9d5c:	700b      	strb	r3, [r1, #0]
    9d5e:	069b      	lsls	r3, r3, #26
    9d60:	d400      	bmi.n	9d64 <MiMAC_SendPacket+0x210>
    9d62:	e085      	b.n	9e70 <MiMAC_SendPacket+0x31c>
	{
	 	AckSeqNum = IEEESeqNum-1;
    9d64:	4b54      	ldr	r3, [pc, #336]	; (9eb8 <MiMAC_SendPacket+0x364>)
    9d66:	781b      	ldrb	r3, [r3, #0]
    9d68:	3b01      	subs	r3, #1
    9d6a:	4954      	ldr	r1, [pc, #336]	; (9ebc <MiMAC_SendPacket+0x368>)
    9d6c:	700b      	strb	r3, [r1, #0]
		 AckReqData = 1;
    9d6e:	2101      	movs	r1, #1
    9d70:	4b53      	ldr	r3, [pc, #332]	; (9ec0 <MiMAC_SendPacket+0x36c>)
    9d72:	7019      	strb	r1, [r3, #0]
	{
		AckReqData = 0;
	}
#ifndef TARGET_SMALL
    // source PANID if necessary
    if (IntraPAN == false)
    9d74:	465b      	mov	r3, fp
    9d76:	2b00      	cmp	r3, #0
    9d78:	d109      	bne.n	9d8e <MiMAC_SendPacket+0x23a>
    {
		packet[loc++] = MAC_PANID.v[0];
    9d7a:	1c53      	adds	r3, r2, #1
    9d7c:	b2db      	uxtb	r3, r3
    9d7e:	494a      	ldr	r1, [pc, #296]	; (9ea8 <MiMAC_SendPacket+0x354>)
    9d80:	4848      	ldr	r0, [pc, #288]	; (9ea4 <MiMAC_SendPacket+0x350>)
    9d82:	7804      	ldrb	r4, [r0, #0]
    9d84:	548c      	strb	r4, [r1, r2]
		packet[loc++] = MAC_PANID.v[1];
    9d86:	3202      	adds	r2, #2
    9d88:	b2d2      	uxtb	r2, r2
    9d8a:	7840      	ldrb	r0, [r0, #1]
    9d8c:	54c8      	strb	r0, [r1, r3]
    }
#endif

    // source address
    if (transParam.altSrcAddr)
    9d8e:	2d00      	cmp	r5, #0
    9d90:	d100      	bne.n	9d94 <MiMAC_SendPacket+0x240>
    9d92:	e071      	b.n	9e78 <MiMAC_SendPacket+0x324>
    {
		packet[loc++] = myNetworkAddress.v[0];
    9d94:	4944      	ldr	r1, [pc, #272]	; (9ea8 <MiMAC_SendPacket+0x354>)
    9d96:	484b      	ldr	r0, [pc, #300]	; (9ec4 <MiMAC_SendPacket+0x370>)
    9d98:	7803      	ldrb	r3, [r0, #0]
    9d9a:	548b      	strb	r3, [r1, r2]
		packet[loc++] = myNetworkAddress.v[1];
    9d9c:	1c93      	adds	r3, r2, #2
    9d9e:	b2db      	uxtb	r3, r3
		packet[loc++] = myNetworkAddress.v[0];
    9da0:	3201      	adds	r2, #1
		packet[loc++] = myNetworkAddress.v[1];
    9da2:	b2d2      	uxtb	r2, r2
    9da4:	7840      	ldrb	r0, [r0, #1]
    9da6:	5488      	strb	r0, [r1, r2]
        {
			packet[loc++] = MACInitParams.PAddress[i];
        }
    }
#ifdef ENABLE_SECURITY
if (transParam.flags.bits.secEn)
    9da8:	aa03      	add	r2, sp, #12
    9daa:	0171      	lsls	r1, r6, #5
    9dac:	7816      	ldrb	r6, [r2, #0]
    9dae:	2020      	movs	r0, #32
    9db0:	4386      	bics	r6, r0
    9db2:	430e      	orrs	r6, r1
    9db4:	7016      	strb	r6, [r2, #0]
    9db6:	0732      	lsls	r2, r6, #28
    9db8:	d515      	bpl.n	9de6 <MiMAC_SendPacket+0x292>
    9dba:	0019      	movs	r1, r3
    9dbc:	2200      	movs	r2, #0
{
	// fill the additional security aux header
	for (i = 0; i < 4; i++)
	{
		packet[loc++] = OutgoingFrameCounter.v[i];
    9dbe:	4e3a      	ldr	r6, [pc, #232]	; (9ea8 <MiMAC_SendPacket+0x354>)
    9dc0:	4d3b      	ldr	r5, [pc, #236]	; (9eb0 <MiMAC_SendPacket+0x35c>)
    9dc2:	1c48      	adds	r0, r1, #1
    9dc4:	5cac      	ldrb	r4, [r5, r2]
    9dc6:	5474      	strb	r4, [r6, r1]
    9dc8:	3201      	adds	r2, #1
    9dca:	b2c1      	uxtb	r1, r0
	for (i = 0; i < 4; i++)
    9dcc:	2a04      	cmp	r2, #4
    9dce:	d1f8      	bne.n	9dc2 <MiMAC_SendPacket+0x26e>
    9dd0:	1d1a      	adds	r2, r3, #4
    9dd2:	b2d2      	uxtb	r2, r2
	}
	OutgoingFrameCounter.Val++;
    9dd4:	4836      	ldr	r0, [pc, #216]	; (9eb0 <MiMAC_SendPacket+0x35c>)
    9dd6:	6801      	ldr	r1, [r0, #0]
    9dd8:	3101      	adds	r1, #1
    9dda:	6001      	str	r1, [r0, #0]
	{
		PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
	}
	#endif
	//copy myKeySequenceNumber
	packet[loc++] = myKeySequenceNumber;
    9ddc:	3305      	adds	r3, #5
    9dde:	b2db      	uxtb	r3, r3
    9de0:	2000      	movs	r0, #0
    9de2:	4931      	ldr	r1, [pc, #196]	; (9ea8 <MiMAC_SendPacket+0x354>)
    9de4:	5488      	strb	r0, [r1, r2]
    {
		packet[loc++] = MACPayload[i];
    }
#else
    // write the payload
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    9de6:	aa10      	add	r2, sp, #64	; 0x40
    9de8:	7816      	ldrb	r6, [r2, #0]
    9dea:	2e00      	cmp	r6, #0
    9dec:	d053      	beq.n	9e96 <MiMAC_SendPacket+0x342>
    9dee:	9a00      	ldr	r2, [sp, #0]
    9df0:	18f1      	adds	r1, r6, r3
    9df2:	b2c9      	uxtb	r1, r1
    {
	    packet[loc++] = MACPayload[i];
    9df4:	4d2c      	ldr	r5, [pc, #176]	; (9ea8 <MiMAC_SendPacket+0x354>)
    9df6:	1c58      	adds	r0, r3, #1
    9df8:	7814      	ldrb	r4, [r2, #0]
    9dfa:	54ec      	strb	r4, [r5, r3]
    9dfc:	3201      	adds	r2, #1
    9dfe:	b2c3      	uxtb	r3, r0
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    9e00:	428b      	cmp	r3, r1
    9e02:	d1f8      	bne.n	9df6 <MiMAC_SendPacket+0x2a2>
    }
	packet[loc++] = final_mic_value[0];
    9e04:	4828      	ldr	r0, [pc, #160]	; (9ea8 <MiMAC_SendPacket+0x354>)
    9e06:	4b30      	ldr	r3, [pc, #192]	; (9ec8 <MiMAC_SendPacket+0x374>)
    9e08:	781a      	ldrb	r2, [r3, #0]
    9e0a:	5442      	strb	r2, [r0, r1]
    9e0c:	1c4a      	adds	r2, r1, #1
	packet[loc++] = final_mic_value[1];
    9e0e:	b2d2      	uxtb	r2, r2
    9e10:	785c      	ldrb	r4, [r3, #1]
    9e12:	5484      	strb	r4, [r0, r2]
    9e14:	1c8a      	adds	r2, r1, #2
	packet[loc++] = final_mic_value[2];
    9e16:	b2d2      	uxtb	r2, r2
    9e18:	789c      	ldrb	r4, [r3, #2]
    9e1a:	5484      	strb	r4, [r0, r2]
    9e1c:	3103      	adds	r1, #3
	packet[loc++] = final_mic_value[3];
    9e1e:	b2c9      	uxtb	r1, r1
    9e20:	78db      	ldrb	r3, [r3, #3]
    9e22:	5443      	strb	r3, [r0, r1]
    } else
    {
        i = 0x01;
    }

    dataPointer = MACPayload;
    9e24:	4b29      	ldr	r3, [pc, #164]	; (9ecc <MiMAC_SendPacket+0x378>)
    9e26:	9a00      	ldr	r2, [sp, #0]
    9e28:	601a      	str	r2, [r3, #0]
	dataConfCallback = ConfCallback;
    9e2a:	4b29      	ldr	r3, [pc, #164]	; (9ed0 <MiMAC_SendPacket+0x37c>)
    9e2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9e2e:	601a      	str	r2, [r3, #0]
    dataHandle = msghandle;
    9e30:	4b28      	ldr	r3, [pc, #160]	; (9ed4 <MiMAC_SendPacket+0x380>)
    9e32:	4652      	mov	r2, sl
    9e34:	701a      	strb	r2, [r3, #0]
	MACdataPayloadLen = MACPayloadLen;
    9e36:	4b28      	ldr	r3, [pc, #160]	; (9ed8 <MiMAC_SendPacket+0x384>)
    9e38:	701e      	strb	r6, [r3, #0]
	//DataRetryCount = 0;

    // Now Trigger the Transmission of packet
    return PHY_DataReq(packet);					
    9e3a:	4b28      	ldr	r3, [pc, #160]	; (9edc <MiMAC_SendPacket+0x388>)
    9e3c:	4798      	blx	r3
    9e3e:	1e43      	subs	r3, r0, #1
    9e40:	4198      	sbcs	r0, r3
    9e42:	b2c0      	uxtb	r0, r0
}
    9e44:	b007      	add	sp, #28
    9e46:	bc3c      	pop	{r2, r3, r4, r5}
    9e48:	4690      	mov	r8, r2
    9e4a:	4699      	mov	r9, r3
    9e4c:	46a2      	mov	sl, r4
    9e4e:	46ab      	mov	fp, r5
    9e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (transParam.altDestAddr)
    9e52:	4643      	mov	r3, r8
    9e54:	2b00      	cmp	r3, #0
    9e56:	d000      	beq.n	9e5a <MiMAC_SendPacket+0x306>
    9e58:	e74b      	b.n	9cf2 <MiMAC_SendPacket+0x19e>
        transParam.flags.bits.ackReq = false;
    9e5a:	2300      	movs	r3, #0
					packet[loc++] = transParam.DestAddress[i];
    9e5c:	4812      	ldr	r0, [pc, #72]	; (9ea8 <MiMAC_SendPacket+0x354>)
    9e5e:	9c02      	ldr	r4, [sp, #8]
    9e60:	5ce1      	ldrb	r1, [r4, r3]
    9e62:	181a      	adds	r2, r3, r0
    9e64:	7191      	strb	r1, [r2, #6]
    9e66:	3301      	adds	r3, #1
                for (i = 0; i < 8; i++)
    9e68:	2b08      	cmp	r3, #8
    9e6a:	d1f9      	bne.n	9e60 <MiMAC_SendPacket+0x30c>
					packet[loc++] = transParam.DestAddress[i];
    9e6c:	220e      	movs	r2, #14
    9e6e:	e76f      	b.n	9d50 <MiMAC_SendPacket+0x1fc>
		AckReqData = 0;
    9e70:	2100      	movs	r1, #0
    9e72:	4b13      	ldr	r3, [pc, #76]	; (9ec0 <MiMAC_SendPacket+0x36c>)
    9e74:	7019      	strb	r1, [r3, #0]
    9e76:	e77d      	b.n	9d74 <MiMAC_SendPacket+0x220>
			packet[loc++] = MACInitParams.PAddress[i];
    9e78:	4b19      	ldr	r3, [pc, #100]	; (9ee0 <MiMAC_SendPacket+0x38c>)
    9e7a:	6859      	ldr	r1, [r3, #4]
    9e7c:	0014      	movs	r4, r2
    9e7e:	3408      	adds	r4, #8
    9e80:	b2e4      	uxtb	r4, r4
    9e82:	4d09      	ldr	r5, [pc, #36]	; (9ea8 <MiMAC_SendPacket+0x354>)
    9e84:	1c53      	adds	r3, r2, #1
    9e86:	b2db      	uxtb	r3, r3
    9e88:	7808      	ldrb	r0, [r1, #0]
    9e8a:	54a8      	strb	r0, [r5, r2]
    9e8c:	3101      	adds	r1, #1
    9e8e:	001a      	movs	r2, r3
        for (i = 0; i < 8; i++)
    9e90:	429c      	cmp	r4, r3
    9e92:	d1f7      	bne.n	9e84 <MiMAC_SendPacket+0x330>
    9e94:	e788      	b.n	9da8 <MiMAC_SendPacket+0x254>
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    9e96:	0019      	movs	r1, r3
    9e98:	e7b4      	b.n	9e04 <MiMAC_SendPacket+0x2b0>
    9e9a:	46c0      	nop			; (mov r8, r8)
    9e9c:	20000486 	.word	0x20000486
    9ea0:	2000229c 	.word	0x2000229c
    9ea4:	200022f0 	.word	0x200022f0
    9ea8:	2000217c 	.word	0x2000217c
    9eac:	0000ffff 	.word	0x0000ffff
    9eb0:	200022cc 	.word	0x200022cc
    9eb4:	00009835 	.word	0x00009835
    9eb8:	20002179 	.word	0x20002179
    9ebc:	20002178 	.word	0x20002178
    9ec0:	20000483 	.word	0x20000483
    9ec4:	2000227c 	.word	0x2000227c
    9ec8:	200022b8 	.word	0x200022b8
    9ecc:	20000490 	.word	0x20000490
    9ed0:	20000488 	.word	0x20000488
    9ed4:	2000048c 	.word	0x2000048c
    9ed8:	20000485 	.word	0x20000485
    9edc:	0000aa09 	.word	0x0000aa09
    9ee0:	20002284 	.word	0x20002284

00009ee4 <MiMAC_DiscardPacket>:
 *
 *****************************************************************************************/
void MiMAC_DiscardPacket(void)
{
	//re-enable buffer for next packets
	if (BankIndex < BANK_SIZE)
    9ee4:	4b04      	ldr	r3, [pc, #16]	; (9ef8 <MiMAC_DiscardPacket+0x14>)
    9ee6:	781b      	ldrb	r3, [r3, #0]
    9ee8:	2b03      	cmp	r3, #3
    9eea:	d804      	bhi.n	9ef6 <MiMAC_DiscardPacket+0x12>
	{
		RxBuffer[BankIndex].PayloadLen = 0;
    9eec:	021a      	lsls	r2, r3, #8
    9eee:	18d3      	adds	r3, r2, r3
    9ef0:	2100      	movs	r1, #0
    9ef2:	4a02      	ldr	r2, [pc, #8]	; (9efc <MiMAC_DiscardPacket+0x18>)
    9ef4:	5499      	strb	r1, [r3, r2]
	}
}
    9ef6:	4770      	bx	lr
    9ef8:	2000001b 	.word	0x2000001b
    9efc:	200023fc 	.word	0x200023fc

00009f00 <PHY_DataConf>:
 *      None
 *
 *****************************************************************************************/
void PHY_DataConf(uint8_t status)
{
	DataRetryCount = 0;
    9f00:	2200      	movs	r2, #0
    9f02:	4b04      	ldr	r3, [pc, #16]	; (9f14 <PHY_DataConf+0x14>)
    9f04:	701a      	strb	r2, [r3, #0]
	dataStatus = (miwi_status_t)status;
    9f06:	4b04      	ldr	r3, [pc, #16]	; (9f18 <PHY_DataConf+0x18>)
    9f08:	7018      	strb	r0, [r3, #0]
	dataConfAvailable = true;
    9f0a:	3201      	adds	r2, #1
    9f0c:	4b03      	ldr	r3, [pc, #12]	; (9f1c <PHY_DataConf+0x1c>)
    9f0e:	701a      	strb	r2, [r3, #0]
}
    9f10:	4770      	bx	lr
    9f12:	46c0      	nop			; (mov r8, r8)
    9f14:	20000484 	.word	0x20000484
    9f18:	200022c8 	.word	0x200022c8
    9f1c:	20000486 	.word	0x20000486

00009f20 <MiMAC_RetryPacket>:
{
    9f20:	b510      	push	{r4, lr}
	DataRetryCount++;
    9f22:	4a0b      	ldr	r2, [pc, #44]	; (9f50 <MiMAC_RetryPacket+0x30>)
    9f24:	7813      	ldrb	r3, [r2, #0]
    9f26:	3301      	adds	r3, #1
    9f28:	b2db      	uxtb	r3, r3
    9f2a:	7013      	strb	r3, [r2, #0]
	if (DataRetryCount < DATA_RETRY_ATTEMPT)
    9f2c:	2b02      	cmp	r3, #2
    9f2e:	d904      	bls.n	9f3a <MiMAC_RetryPacket+0x1a>
		PHY_DataConf(NO_ACK); // No Ack response
    9f30:	2003      	movs	r0, #3
    9f32:	4b08      	ldr	r3, [pc, #32]	; (9f54 <MiMAC_RetryPacket+0x34>)
    9f34:	4798      	blx	r3
	bool status = false;
    9f36:	2000      	movs	r0, #0
}
    9f38:	bd10      	pop	{r4, pc}
		AckReqData = 1;
    9f3a:	2201      	movs	r2, #1
    9f3c:	4b06      	ldr	r3, [pc, #24]	; (9f58 <MiMAC_RetryPacket+0x38>)
    9f3e:	701a      	strb	r2, [r3, #0]
		status = PHY_DataReq(packet);
    9f40:	4806      	ldr	r0, [pc, #24]	; (9f5c <MiMAC_RetryPacket+0x3c>)
    9f42:	4b07      	ldr	r3, [pc, #28]	; (9f60 <MiMAC_RetryPacket+0x40>)
    9f44:	4798      	blx	r3
    9f46:	1e43      	subs	r3, r0, #1
    9f48:	4198      	sbcs	r0, r3
    9f4a:	b2c0      	uxtb	r0, r0
    9f4c:	e7f4      	b.n	9f38 <MiMAC_RetryPacket+0x18>
    9f4e:	46c0      	nop			; (mov r8, r8)
    9f50:	20000484 	.word	0x20000484
    9f54:	00009f01 	.word	0x00009f01
    9f58:	20000483 	.word	0x20000483
    9f5c:	2000217c 	.word	0x2000217c
    9f60:	0000aa09 	.word	0x0000aa09

00009f64 <MiMAC_ReceivedPacket>:
{
    9f64:	b5f0      	push	{r4, r5, r6, r7, lr}
    9f66:	46c6      	mov	lr, r8
    9f68:	b500      	push	{lr}
    9f6a:	b088      	sub	sp, #32
	BankIndex = 0xFF;
    9f6c:	22ff      	movs	r2, #255	; 0xff
    9f6e:	4bcc      	ldr	r3, [pc, #816]	; (a2a0 <MiMAC_ReceivedPacket+0x33c>)
    9f70:	701a      	strb	r2, [r3, #0]
		if (RxBuffer[i].PayloadLen > 0)
    9f72:	4bcc      	ldr	r3, [pc, #816]	; (a2a4 <MiMAC_ReceivedPacket+0x340>)
    9f74:	781b      	ldrb	r3, [r3, #0]
    9f76:	2b00      	cmp	r3, #0
    9f78:	d000      	beq.n	9f7c <MiMAC_ReceivedPacket+0x18>
    9f7a:	e353      	b.n	a624 <MiMAC_ReceivedPacket+0x6c0>
    9f7c:	2302      	movs	r3, #2
    9f7e:	33ff      	adds	r3, #255	; 0xff
    9f80:	4ac8      	ldr	r2, [pc, #800]	; (a2a4 <MiMAC_ReceivedPacket+0x340>)
    9f82:	5cd3      	ldrb	r3, [r2, r3]
    9f84:	2b00      	cmp	r3, #0
    9f86:	d10e      	bne.n	9fa6 <MiMAC_ReceivedPacket+0x42>
    9f88:	4bc7      	ldr	r3, [pc, #796]	; (a2a8 <MiMAC_ReceivedPacket+0x344>)
    9f8a:	5cd3      	ldrb	r3, [r2, r3]
    9f8c:	2b00      	cmp	r3, #0
    9f8e:	d140      	bne.n	a012 <MiMAC_ReceivedPacket+0xae>
    9f90:	4bc6      	ldr	r3, [pc, #792]	; (a2ac <MiMAC_ReceivedPacket+0x348>)
    9f92:	5cd3      	ldrb	r3, [r2, r3]
	return false;
    9f94:	2400      	movs	r4, #0
	for (i = 0; i < BANK_SIZE; i++)
    9f96:	2203      	movs	r2, #3
		if (RxBuffer[i].PayloadLen > 0)
    9f98:	2b00      	cmp	r3, #0
    9f9a:	d105      	bne.n	9fa8 <MiMAC_ReceivedPacket+0x44>
}
    9f9c:	0020      	movs	r0, r4
    9f9e:	b008      	add	sp, #32
    9fa0:	bc04      	pop	{r2}
    9fa2:	4690      	mov	r8, r2
    9fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < BANK_SIZE; i++)
    9fa6:	2201      	movs	r2, #1
			BankIndex = i;
    9fa8:	4bbd      	ldr	r3, [pc, #756]	; (a2a0 <MiMAC_ReceivedPacket+0x33c>)
    9faa:	701a      	strb	r2, [r3, #0]
	return false;
    9fac:	2400      	movs	r4, #0
	if (BankIndex < BANK_SIZE)
    9fae:	2a03      	cmp	r2, #3
    9fb0:	d8f4      	bhi.n	9f9c <MiMAC_ReceivedPacket+0x38>
		if ((RxBuffer[BankIndex].Payload[0] & 0x40) == 0)
    9fb2:	0010      	movs	r0, r2
    9fb4:	0211      	lsls	r1, r2, #8
    9fb6:	1889      	adds	r1, r1, r2
    9fb8:	4bba      	ldr	r3, [pc, #744]	; (a2a4 <MiMAC_ReceivedPacket+0x340>)
    9fba:	185b      	adds	r3, r3, r1
    9fbc:	789d      	ldrb	r5, [r3, #2]
    9fbe:	2440      	movs	r4, #64	; 0x40
    9fc0:	4025      	ands	r5, r4
		MACRxPacket.flags.Val = 0;
    9fc2:	49bb      	ldr	r1, [pc, #748]	; (a2b0 <MiMAC_ReceivedPacket+0x34c>)
    9fc4:	2400      	movs	r4, #0
    9fc6:	700c      	strb	r4, [r1, #0]
		MACRxPacket.altSourceAddress = false;
    9fc8:	73cc      	strb	r4, [r1, #15]
		addrMode = RxBuffer[BankIndex].Payload[1] & 0xCC;
    9fca:	78db      	ldrb	r3, [r3, #3]
    9fcc:	2133      	movs	r1, #51	; 0x33
    9fce:	438b      	bics	r3, r1
		switch (addrMode)
    9fd0:	b2d9      	uxtb	r1, r3
    9fd2:	2988      	cmp	r1, #136	; 0x88
    9fd4:	d100      	bne.n	9fd8 <MiMAC_ReceivedPacket+0x74>
    9fd6:	e12e      	b.n	a236 <MiMAC_ReceivedPacket+0x2d2>
    9fd8:	d91d      	bls.n	a016 <MiMAC_ReceivedPacket+0xb2>
    9fda:	b2d9      	uxtb	r1, r3
    9fdc:	29c8      	cmp	r1, #200	; 0xc8
    9fde:	d06f      	beq.n	a0c0 <MiMAC_ReceivedPacket+0x15c>
    9fe0:	29cc      	cmp	r1, #204	; 0xcc
    9fe2:	d100      	bne.n	9fe6 <MiMAC_ReceivedPacket+0x82>
    9fe4:	e0b9      	b.n	a15a <MiMAC_ReceivedPacket+0x1f6>
    9fe6:	298c      	cmp	r1, #140	; 0x8c
    9fe8:	d100      	bne.n	9fec <MiMAC_ReceivedPacket+0x88>
    9fea:	e1aa      	b.n	a342 <MiMAC_ReceivedPacket+0x3de>
			MiMAC_DiscardPacket();
    9fec:	4bb1      	ldr	r3, [pc, #708]	; (a2b4 <MiMAC_ReceivedPacket+0x350>)
    9fee:	4798      	blx	r3
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9ff0:	4bab      	ldr	r3, [pc, #684]	; (a2a0 <MiMAC_ReceivedPacket+0x33c>)
    9ff2:	781a      	ldrb	r2, [r3, #0]
    9ff4:	0213      	lsls	r3, r2, #8
    9ff6:	189a      	adds	r2, r3, r2
    9ff8:	4baa      	ldr	r3, [pc, #680]	; (a2a4 <MiMAC_ReceivedPacket+0x340>)
    9ffa:	189b      	adds	r3, r3, r2
    9ffc:	789b      	ldrb	r3, [r3, #2]
			return false;
    9ffe:	2400      	movs	r4, #0
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a000:	069b      	lsls	r3, r3, #26
    a002:	d5cb      	bpl.n	9f9c <MiMAC_ReceivedPacket+0x38>
				MiRadioReceiveParam.action = RECEIVE_START;					
    a004:	a807      	add	r0, sp, #28
    a006:	2300      	movs	r3, #0
    a008:	7003      	strb	r3, [r0, #0]
				MiRadioReceiveParam.rxWindowSize = 0;
    a00a:	8043      	strh	r3, [r0, #2]
				RADIO_Receive(&MiRadioReceiveParam);
    a00c:	4baa      	ldr	r3, [pc, #680]	; (a2b8 <MiMAC_ReceivedPacket+0x354>)
    a00e:	4798      	blx	r3
    a010:	e7c4      	b.n	9f9c <MiMAC_ReceivedPacket+0x38>
	for (i = 0; i < BANK_SIZE; i++)
    a012:	2202      	movs	r2, #2
    a014:	e7c8      	b.n	9fa8 <MiMAC_ReceivedPacket+0x44>
		switch (addrMode)
    a016:	2b08      	cmp	r3, #8
    a018:	d100      	bne.n	a01c <MiMAC_ReceivedPacket+0xb8>
    a01a:	e1e1      	b.n	a3e0 <MiMAC_ReceivedPacket+0x47c>
    a01c:	2980      	cmp	r1, #128	; 0x80
    a01e:	d1e5      	bne.n	9fec <MiMAC_ReceivedPacket+0x88>
				MACRxPacket.flags.bits.broadcast = 1;
    a020:	4ba3      	ldr	r3, [pc, #652]	; (a2b0 <MiMAC_ReceivedPacket+0x34c>)
    a022:	7819      	ldrb	r1, [r3, #0]
    a024:	2404      	movs	r4, #4
    a026:	4321      	orrs	r1, r4
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    a028:	2480      	movs	r4, #128	; 0x80
    a02a:	4264      	negs	r4, r4
    a02c:	4321      	orrs	r1, r4
    a02e:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    a030:	2101      	movs	r1, #1
    a032:	73d9      	strb	r1, [r3, #15]
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    a034:	4c9b      	ldr	r4, [pc, #620]	; (a2a4 <MiMAC_ReceivedPacket+0x340>)
    a036:	0211      	lsls	r1, r2, #8
    a038:	1888      	adds	r0, r1, r2
    a03a:	1821      	adds	r1, r4, r0
    a03c:	794d      	ldrb	r5, [r1, #5]
    a03e:	741d      	strb	r5, [r3, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    a040:	7989      	ldrb	r1, [r1, #6]
    a042:	7459      	strb	r1, [r3, #17]
    a044:	0211      	lsls	r1, r2, #8
    a046:	188a      	adds	r2, r1, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
    a048:	1dd1      	adds	r1, r2, #7
    a04a:	1909      	adds	r1, r1, r4
    a04c:	6059      	str	r1, [r3, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 11;
    a04e:	5d01      	ldrb	r1, [r0, r4]
    a050:	390b      	subs	r1, #11
    a052:	7319      	strb	r1, [r3, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    a054:	3209      	adds	r2, #9
    a056:	1912      	adds	r2, r2, r4
    a058:	609a      	str	r2, [r3, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    a05a:	4b91      	ldr	r3, [pc, #580]	; (a2a0 <MiMAC_ReceivedPacket+0x33c>)
    a05c:	781a      	ldrb	r2, [r3, #0]
    a05e:	0213      	lsls	r3, r2, #8
    a060:	189a      	adds	r2, r3, r2
    a062:	4b90      	ldr	r3, [pc, #576]	; (a2a4 <MiMAC_ReceivedPacket+0x340>)
    a064:	189b      	adds	r3, r3, r2
    a066:	789b      	ldrb	r3, [r3, #2]
    a068:	071b      	lsls	r3, r3, #28
    a06a:	d500      	bpl.n	a06e <MiMAC_ReceivedPacket+0x10a>
    a06c:	e1d9      	b.n	a422 <MiMAC_ReceivedPacket+0x4be>
		switch (RxBuffer[BankIndex].Payload[0] & 0x07) // check frame type
    a06e:	4b8c      	ldr	r3, [pc, #560]	; (a2a0 <MiMAC_ReceivedPacket+0x33c>)
    a070:	7818      	ldrb	r0, [r3, #0]
    a072:	0202      	lsls	r2, r0, #8
    a074:	1812      	adds	r2, r2, r0
    a076:	4b8b      	ldr	r3, [pc, #556]	; (a2a4 <MiMAC_ReceivedPacket+0x340>)
    a078:	189b      	adds	r3, r3, r2
    a07a:	7899      	ldrb	r1, [r3, #2]
    a07c:	2307      	movs	r3, #7
    a07e:	400b      	ands	r3, r1
    a080:	2b01      	cmp	r3, #1
    a082:	d100      	bne.n	a086 <MiMAC_ReceivedPacket+0x122>
    a084:	e24d      	b.n	a522 <MiMAC_ReceivedPacket+0x5be>
    a086:	2b00      	cmp	r3, #0
    a088:	d100      	bne.n	a08c <MiMAC_ReceivedPacket+0x128>
    a08a:	e282      	b.n	a592 <MiMAC_ReceivedPacket+0x62e>
    a08c:	2b02      	cmp	r3, #2
    a08e:	d100      	bne.n	a092 <MiMAC_ReceivedPacket+0x12e>
    a090:	e285      	b.n	a59e <MiMAC_ReceivedPacket+0x63a>
    a092:	2b03      	cmp	r3, #3
    a094:	d100      	bne.n	a098 <MiMAC_ReceivedPacket+0x134>
    a096:	e274      	b.n	a582 <MiMAC_ReceivedPacket+0x61e>
			MiMAC_DiscardPacket();
    a098:	4b86      	ldr	r3, [pc, #536]	; (a2b4 <MiMAC_ReceivedPacket+0x350>)
    a09a:	4798      	blx	r3
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a09c:	4b80      	ldr	r3, [pc, #512]	; (a2a0 <MiMAC_ReceivedPacket+0x33c>)
    a09e:	781a      	ldrb	r2, [r3, #0]
    a0a0:	0213      	lsls	r3, r2, #8
    a0a2:	189a      	adds	r2, r3, r2
    a0a4:	4b7f      	ldr	r3, [pc, #508]	; (a2a4 <MiMAC_ReceivedPacket+0x340>)
    a0a6:	189b      	adds	r3, r3, r2
    a0a8:	789b      	ldrb	r3, [r3, #2]
			return false;
    a0aa:	2400      	movs	r4, #0
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a0ac:	069b      	lsls	r3, r3, #26
    a0ae:	d400      	bmi.n	a0b2 <MiMAC_ReceivedPacket+0x14e>
    a0b0:	e774      	b.n	9f9c <MiMAC_ReceivedPacket+0x38>
				MiRadioReceiveParam.action = RECEIVE_START;	
    a0b2:	a807      	add	r0, sp, #28
    a0b4:	2300      	movs	r3, #0
    a0b6:	7003      	strb	r3, [r0, #0]
				MiRadioReceiveParam.rxWindowSize = 0;
    a0b8:	8043      	strh	r3, [r0, #2]
				RADIO_Receive(&MiRadioReceiveParam);
    a0ba:	4b7f      	ldr	r3, [pc, #508]	; (a2b8 <MiMAC_ReceivedPacket+0x354>)
    a0bc:	4798      	blx	r3
    a0be:	e76d      	b.n	9f9c <MiMAC_ReceivedPacket+0x38>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    a0c0:	0211      	lsls	r1, r2, #8
    a0c2:	1889      	adds	r1, r1, r2
    a0c4:	4b77      	ldr	r3, [pc, #476]	; (a2a4 <MiMAC_ReceivedPacket+0x340>)
    a0c6:	185b      	adds	r3, r3, r1
    a0c8:	79dc      	ldrb	r4, [r3, #7]
    a0ca:	2cff      	cmp	r4, #255	; 0xff
    a0cc:	d01e      	beq.n	a10c <MiMAC_ReceivedPacket+0x1a8>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    a0ce:	4978      	ldr	r1, [pc, #480]	; (a2b0 <MiMAC_ReceivedPacket+0x34c>)
    a0d0:	780e      	ldrb	r6, [r1, #0]
    a0d2:	2380      	movs	r3, #128	; 0x80
    a0d4:	425b      	negs	r3, r3
    a0d6:	4333      	orrs	r3, r6
    a0d8:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    a0da:	2d00      	cmp	r5, #0
    a0dc:	d000      	beq.n	a0e0 <MiMAC_ReceivedPacket+0x17c>
    a0de:	e27c      	b.n	a5da <MiMAC_ReceivedPacket+0x676>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    a0e0:	4973      	ldr	r1, [pc, #460]	; (a2b0 <MiMAC_ReceivedPacket+0x34c>)
    a0e2:	4c70      	ldr	r4, [pc, #448]	; (a2a4 <MiMAC_ReceivedPacket+0x340>)
    a0e4:	0203      	lsls	r3, r0, #8
    a0e6:	1818      	adds	r0, r3, r0
    a0e8:	1823      	adds	r3, r4, r0
    a0ea:	7a5d      	ldrb	r5, [r3, #9]
    a0ec:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    a0ee:	7a9b      	ldrb	r3, [r3, #10]
    a0f0:	744b      	strb	r3, [r1, #17]
    a0f2:	0213      	lsls	r3, r2, #8
    a0f4:	189a      	adds	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    a0f6:	0013      	movs	r3, r2
    a0f8:	330b      	adds	r3, #11
    a0fa:	191b      	adds	r3, r3, r4
    a0fc:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    a0fe:	5d03      	ldrb	r3, [r0, r4]
    a100:	3b15      	subs	r3, #21
    a102:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    a104:	3213      	adds	r2, #19
    a106:	1912      	adds	r2, r2, r4
    a108:	608a      	str	r2, [r1, #8]
    a10a:	e043      	b.n	a194 <MiMAC_ReceivedPacket+0x230>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    a10c:	0211      	lsls	r1, r2, #8
    a10e:	1889      	adds	r1, r1, r2
    a110:	4b64      	ldr	r3, [pc, #400]	; (a2a4 <MiMAC_ReceivedPacket+0x340>)
    a112:	185b      	adds	r3, r3, r1
    a114:	7a1b      	ldrb	r3, [r3, #8]
    a116:	2bff      	cmp	r3, #255	; 0xff
    a118:	d1d9      	bne.n	a0ce <MiMAC_ReceivedPacket+0x16a>
				MACRxPacket.flags.bits.broadcast = 1;
    a11a:	4965      	ldr	r1, [pc, #404]	; (a2b0 <MiMAC_ReceivedPacket+0x34c>)
    a11c:	780b      	ldrb	r3, [r1, #0]
    a11e:	2404      	movs	r4, #4
    a120:	4323      	orrs	r3, r4
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    a122:	2480      	movs	r4, #128	; 0x80
    a124:	4264      	negs	r4, r4
    a126:	4323      	orrs	r3, r4
    a128:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    a12a:	2d00      	cmp	r5, #0
    a12c:	d000      	beq.n	a130 <MiMAC_ReceivedPacket+0x1cc>
    a12e:	e263      	b.n	a5f8 <MiMAC_ReceivedPacket+0x694>
    a130:	e7d6      	b.n	a0e0 <MiMAC_ReceivedPacket+0x17c>
					MiMAC_DiscardPacket();
    a132:	4b60      	ldr	r3, [pc, #384]	; (a2b4 <MiMAC_ReceivedPacket+0x350>)
    a134:	4798      	blx	r3
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a136:	4b5a      	ldr	r3, [pc, #360]	; (a2a0 <MiMAC_ReceivedPacket+0x33c>)
    a138:	781a      	ldrb	r2, [r3, #0]
    a13a:	0213      	lsls	r3, r2, #8
    a13c:	189a      	adds	r2, r3, r2
    a13e:	4b59      	ldr	r3, [pc, #356]	; (a2a4 <MiMAC_ReceivedPacket+0x340>)
    a140:	189b      	adds	r3, r3, r2
    a142:	789b      	ldrb	r3, [r3, #2]
					return false;
    a144:	2400      	movs	r4, #0
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a146:	069b      	lsls	r3, r3, #26
    a148:	d400      	bmi.n	a14c <MiMAC_ReceivedPacket+0x1e8>
    a14a:	e727      	b.n	9f9c <MiMAC_ReceivedPacket+0x38>
						MiRadioReceiveParam.action = RECEIVE_START;					
    a14c:	a807      	add	r0, sp, #28
    a14e:	2300      	movs	r3, #0
    a150:	7003      	strb	r3, [r0, #0]
						MiRadioReceiveParam.rxWindowSize = 0;
    a152:	8043      	strh	r3, [r0, #2]
						RADIO_Receive(&MiRadioReceiveParam);
    a154:	4b58      	ldr	r3, [pc, #352]	; (a2b8 <MiMAC_ReceivedPacket+0x354>)
    a156:	4798      	blx	r3
    a158:	e720      	b.n	9f9c <MiMAC_ReceivedPacket+0x38>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    a15a:	4955      	ldr	r1, [pc, #340]	; (a2b0 <MiMAC_ReceivedPacket+0x34c>)
    a15c:	780c      	ldrb	r4, [r1, #0]
    a15e:	2380      	movs	r3, #128	; 0x80
    a160:	425b      	negs	r3, r3
    a162:	4323      	orrs	r3, r4
    a164:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    a166:	2d00      	cmp	r5, #0
    a168:	d132      	bne.n	a1d0 <MiMAC_ReceivedPacket+0x26c>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[13];
    a16a:	4951      	ldr	r1, [pc, #324]	; (a2b0 <MiMAC_ReceivedPacket+0x34c>)
    a16c:	4c4d      	ldr	r4, [pc, #308]	; (a2a4 <MiMAC_ReceivedPacket+0x340>)
    a16e:	0213      	lsls	r3, r2, #8
    a170:	1898      	adds	r0, r3, r2
    a172:	1823      	adds	r3, r4, r0
    a174:	7bdd      	ldrb	r5, [r3, #15]
    a176:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[14];
    a178:	7c1b      	ldrb	r3, [r3, #16]
    a17a:	744b      	strb	r3, [r1, #17]
    a17c:	0213      	lsls	r3, r2, #8
    a17e:	189a      	adds	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
    a180:	0013      	movs	r3, r2
    a182:	3311      	adds	r3, #17
    a184:	191b      	adds	r3, r3, r4
    a186:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 27;
    a188:	5d03      	ldrb	r3, [r0, r4]
    a18a:	3b1b      	subs	r3, #27
    a18c:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
    a18e:	3219      	adds	r2, #25
    a190:	1912      	adds	r2, r2, r4
    a192:	608a      	str	r2, [r1, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    a194:	4b42      	ldr	r3, [pc, #264]	; (a2a0 <MiMAC_ReceivedPacket+0x33c>)
    a196:	781a      	ldrb	r2, [r3, #0]
    a198:	0213      	lsls	r3, r2, #8
    a19a:	189a      	adds	r2, r3, r2
    a19c:	4b41      	ldr	r3, [pc, #260]	; (a2a4 <MiMAC_ReceivedPacket+0x340>)
    a19e:	189b      	adds	r3, r3, r2
    a1a0:	789b      	ldrb	r3, [r3, #2]
    a1a2:	071b      	lsls	r3, r3, #28
    a1a4:	d400      	bmi.n	a1a8 <MiMAC_ReceivedPacket+0x244>
    a1a6:	e762      	b.n	a06e <MiMAC_ReceivedPacket+0x10a>
			FrameCounter.v[0] = MACRxPacket.Payload[0];
    a1a8:	4b41      	ldr	r3, [pc, #260]	; (a2b0 <MiMAC_ReceivedPacket+0x34c>)
    a1aa:	689b      	ldr	r3, [r3, #8]
			FrameCounter.v[1] = MACRxPacket.Payload[1];
    a1ac:	785e      	ldrb	r6, [r3, #1]
    a1ae:	0236      	lsls	r6, r6, #8
    a1b0:	781a      	ldrb	r2, [r3, #0]
    a1b2:	4316      	orrs	r6, r2
			FrameCounter.v[2] = MACRxPacket.Payload[2];
    a1b4:	789a      	ldrb	r2, [r3, #2]
    a1b6:	0412      	lsls	r2, r2, #16
    a1b8:	4940      	ldr	r1, [pc, #256]	; (a2bc <MiMAC_ReceivedPacket+0x358>)
    a1ba:	400e      	ands	r6, r1
    a1bc:	4316      	orrs	r6, r2
			FrameCounter.v[3] = MACRxPacket.Payload[3];
    a1be:	78db      	ldrb	r3, [r3, #3]
    a1c0:	061b      	lsls	r3, r3, #24
    a1c2:	0236      	lsls	r6, r6, #8
    a1c4:	0a36      	lsrs	r6, r6, #8
    a1c6:	431e      	orrs	r6, r3
    a1c8:	4f3d      	ldr	r7, [pc, #244]	; (a2c0 <MiMAC_ReceivedPacket+0x35c>)
    a1ca:	2400      	movs	r4, #0
				if ((ConnectionTable[i].status.bits.isValid) &&
    a1cc:	46b8      	mov	r8, r7
    a1ce:	e140      	b.n	a452 <MiMAC_ReceivedPacket+0x4ee>
				if(!(isSameAddress((uint8_t *)&DevIEEEaddr, &RxBuffer[BankIndex].Payload[5])))
    a1d0:	0211      	lsls	r1, r2, #8
    a1d2:	1889      	adds	r1, r1, r2
    a1d4:	3107      	adds	r1, #7
    a1d6:	4a33      	ldr	r2, [pc, #204]	; (a2a4 <MiMAC_ReceivedPacket+0x340>)
    a1d8:	1889      	adds	r1, r1, r2
    a1da:	483a      	ldr	r0, [pc, #232]	; (a2c4 <MiMAC_ReceivedPacket+0x360>)
    a1dc:	4b3a      	ldr	r3, [pc, #232]	; (a2c8 <MiMAC_ReceivedPacket+0x364>)
    a1de:	4798      	blx	r3
    a1e0:	1e04      	subs	r4, r0, #0
    a1e2:	d015      	beq.n	a210 <MiMAC_ReceivedPacket+0x2ac>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    a1e4:	4b2e      	ldr	r3, [pc, #184]	; (a2a0 <MiMAC_ReceivedPacket+0x33c>)
    a1e6:	7818      	ldrb	r0, [r3, #0]
    a1e8:	4a31      	ldr	r2, [pc, #196]	; (a2b0 <MiMAC_ReceivedPacket+0x34c>)
    a1ea:	492e      	ldr	r1, [pc, #184]	; (a2a4 <MiMAC_ReceivedPacket+0x340>)
    a1ec:	0203      	lsls	r3, r0, #8
    a1ee:	181b      	adds	r3, r3, r0
    a1f0:	18c8      	adds	r0, r1, r3
    a1f2:	7944      	ldrb	r4, [r0, #5]
    a1f4:	7414      	strb	r4, [r2, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    a1f6:	7980      	ldrb	r0, [r0, #6]
    a1f8:	7450      	strb	r0, [r2, #17]
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    a1fa:	0018      	movs	r0, r3
    a1fc:	300f      	adds	r0, #15
    a1fe:	1840      	adds	r0, r0, r1
    a200:	6050      	str	r0, [r2, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 25;
    a202:	5c58      	ldrb	r0, [r3, r1]
    a204:	3819      	subs	r0, #25
    a206:	7310      	strb	r0, [r2, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
    a208:	3317      	adds	r3, #23
    a20a:	185b      	adds	r3, r3, r1
    a20c:	6093      	str	r3, [r2, #8]
    a20e:	e7c1      	b.n	a194 <MiMAC_ReceivedPacket+0x230>
					MiMAC_DiscardPacket();
    a210:	4b28      	ldr	r3, [pc, #160]	; (a2b4 <MiMAC_ReceivedPacket+0x350>)
    a212:	4798      	blx	r3
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a214:	4b22      	ldr	r3, [pc, #136]	; (a2a0 <MiMAC_ReceivedPacket+0x33c>)
    a216:	781a      	ldrb	r2, [r3, #0]
    a218:	0213      	lsls	r3, r2, #8
    a21a:	189a      	adds	r2, r3, r2
    a21c:	4b21      	ldr	r3, [pc, #132]	; (a2a4 <MiMAC_ReceivedPacket+0x340>)
    a21e:	189b      	adds	r3, r3, r2
    a220:	789b      	ldrb	r3, [r3, #2]
    a222:	069b      	lsls	r3, r3, #26
    a224:	d400      	bmi.n	a228 <MiMAC_ReceivedPacket+0x2c4>
    a226:	e6b9      	b.n	9f9c <MiMAC_ReceivedPacket+0x38>
						MiRadioReceiveParam.action = RECEIVE_START;					
    a228:	a807      	add	r0, sp, #28
    a22a:	2300      	movs	r3, #0
    a22c:	7003      	strb	r3, [r0, #0]
						MiRadioReceiveParam.rxWindowSize = 0;
    a22e:	8043      	strh	r3, [r0, #2]
						RADIO_Receive(&MiRadioReceiveParam);
    a230:	4b21      	ldr	r3, [pc, #132]	; (a2b8 <MiMAC_ReceivedPacket+0x354>)
    a232:	4798      	blx	r3
    a234:	e6b2      	b.n	9f9c <MiMAC_ReceivedPacket+0x38>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    a236:	0211      	lsls	r1, r2, #8
    a238:	1889      	adds	r1, r1, r2
    a23a:	4b1a      	ldr	r3, [pc, #104]	; (a2a4 <MiMAC_ReceivedPacket+0x340>)
    a23c:	185b      	adds	r3, r3, r1
    a23e:	79dc      	ldrb	r4, [r3, #7]
    a240:	2cff      	cmp	r4, #255	; 0xff
    a242:	d01f      	beq.n	a284 <MiMAC_ReceivedPacket+0x320>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    a244:	4b1a      	ldr	r3, [pc, #104]	; (a2b0 <MiMAC_ReceivedPacket+0x34c>)
    a246:	781e      	ldrb	r6, [r3, #0]
    a248:	2180      	movs	r1, #128	; 0x80
    a24a:	4249      	negs	r1, r1
    a24c:	4331      	orrs	r1, r6
    a24e:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    a250:	2101      	movs	r1, #1
    a252:	73d9      	strb	r1, [r3, #15]
				if (bIntraPAN == false)
    a254:	2d00      	cmp	r5, #0
    a256:	d139      	bne.n	a2cc <MiMAC_ReceivedPacket+0x368>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    a258:	0019      	movs	r1, r3
    a25a:	4c12      	ldr	r4, [pc, #72]	; (a2a4 <MiMAC_ReceivedPacket+0x340>)
    a25c:	0203      	lsls	r3, r0, #8
    a25e:	1818      	adds	r0, r3, r0
    a260:	1823      	adds	r3, r4, r0
    a262:	7a5d      	ldrb	r5, [r3, #9]
    a264:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    a266:	7a9b      	ldrb	r3, [r3, #10]
    a268:	744b      	strb	r3, [r1, #17]
    a26a:	0213      	lsls	r3, r2, #8
    a26c:	189a      	adds	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    a26e:	0013      	movs	r3, r2
    a270:	330b      	adds	r3, #11
    a272:	191b      	adds	r3, r3, r4
    a274:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 15;
    a276:	5d03      	ldrb	r3, [r0, r4]
    a278:	3b0f      	subs	r3, #15
    a27a:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[11]);
    a27c:	320d      	adds	r2, #13
    a27e:	1912      	adds	r2, r2, r4
    a280:	608a      	str	r2, [r1, #8]
    a282:	e6ea      	b.n	a05a <MiMAC_ReceivedPacket+0xf6>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    a284:	0211      	lsls	r1, r2, #8
    a286:	1889      	adds	r1, r1, r2
    a288:	4b06      	ldr	r3, [pc, #24]	; (a2a4 <MiMAC_ReceivedPacket+0x340>)
    a28a:	185b      	adds	r3, r3, r1
    a28c:	7a1b      	ldrb	r3, [r3, #8]
    a28e:	2bff      	cmp	r3, #255	; 0xff
    a290:	d1d8      	bne.n	a244 <MiMAC_ReceivedPacket+0x2e0>
					MACRxPacket.flags.bits.broadcast = 1;
    a292:	4907      	ldr	r1, [pc, #28]	; (a2b0 <MiMAC_ReceivedPacket+0x34c>)
    a294:	780b      	ldrb	r3, [r1, #0]
    a296:	2604      	movs	r6, #4
    a298:	4333      	orrs	r3, r6
    a29a:	700b      	strb	r3, [r1, #0]
    a29c:	e7d2      	b.n	a244 <MiMAC_ReceivedPacket+0x2e0>
    a29e:	46c0      	nop			; (mov r8, r8)
    a2a0:	2000001b 	.word	0x2000001b
    a2a4:	200023fc 	.word	0x200023fc
    a2a8:	00000202 	.word	0x00000202
    a2ac:	00000303 	.word	0x00000303
    a2b0:	20002844 	.word	0x20002844
    a2b4:	00009ee5 	.word	0x00009ee5
    a2b8:	0000ef35 	.word	0x0000ef35
    a2bc:	ff00ffff 	.word	0xff00ffff
    a2c0:	2000280c 	.word	0x2000280c
    a2c4:	200023f4 	.word	0x200023f4
    a2c8:	0000acf5 	.word	0x0000acf5
					if (!(((RxBuffer[BankIndex].Payload[5] == 0xFF) & (RxBuffer[BankIndex].Payload[6] == 0xFF)) ||((RxBuffer[BankIndex].Payload[5] == DevShortAddress[0]) & (RxBuffer[BankIndex].Payload[6] == DevShortAddress[1]))) )
    a2cc:	0201      	lsls	r1, r0, #8
    a2ce:	1809      	adds	r1, r1, r0
    a2d0:	4bd6      	ldr	r3, [pc, #856]	; (a62c <MiMAC_ReceivedPacket+0x6c8>)
    a2d2:	185b      	adds	r3, r3, r1
    a2d4:	7a1b      	ldrb	r3, [r3, #8]
    a2d6:	2cff      	cmp	r4, #255	; 0xff
    a2d8:	d117      	bne.n	a30a <MiMAC_ReceivedPacket+0x3a6>
    a2da:	2bff      	cmp	r3, #255	; 0xff
    a2dc:	d115      	bne.n	a30a <MiMAC_ReceivedPacket+0x3a6>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    a2de:	49d4      	ldr	r1, [pc, #848]	; (a630 <MiMAC_ReceivedPacket+0x6cc>)
    a2e0:	4cd2      	ldr	r4, [pc, #840]	; (a62c <MiMAC_ReceivedPacket+0x6c8>)
    a2e2:	0203      	lsls	r3, r0, #8
    a2e4:	1818      	adds	r0, r3, r0
    a2e6:	1823      	adds	r3, r4, r0
    a2e8:	795d      	ldrb	r5, [r3, #5]
    a2ea:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    a2ec:	799b      	ldrb	r3, [r3, #6]
    a2ee:	744b      	strb	r3, [r1, #17]
    a2f0:	0213      	lsls	r3, r2, #8
    a2f2:	189a      	adds	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    a2f4:	0013      	movs	r3, r2
    a2f6:	3309      	adds	r3, #9
    a2f8:	191b      	adds	r3, r3, r4
    a2fa:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 13;
    a2fc:	5d03      	ldrb	r3, [r0, r4]
    a2fe:	3b0d      	subs	r3, #13
    a300:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
    a302:	320b      	adds	r2, #11
    a304:	1912      	adds	r2, r2, r4
    a306:	608a      	str	r2, [r1, #8]
    a308:	e6a7      	b.n	a05a <MiMAC_ReceivedPacket+0xf6>
					if (!(((RxBuffer[BankIndex].Payload[5] == 0xFF) & (RxBuffer[BankIndex].Payload[6] == 0xFF)) ||((RxBuffer[BankIndex].Payload[5] == DevShortAddress[0]) & (RxBuffer[BankIndex].Payload[6] == DevShortAddress[1]))) )
    a30a:	49ca      	ldr	r1, [pc, #808]	; (a634 <MiMAC_ReceivedPacket+0x6d0>)
    a30c:	7809      	ldrb	r1, [r1, #0]
    a30e:	42a1      	cmp	r1, r4
    a310:	d103      	bne.n	a31a <MiMAC_ReceivedPacket+0x3b6>
    a312:	49c8      	ldr	r1, [pc, #800]	; (a634 <MiMAC_ReceivedPacket+0x6d0>)
    a314:	7849      	ldrb	r1, [r1, #1]
    a316:	4299      	cmp	r1, r3
    a318:	d0e1      	beq.n	a2de <MiMAC_ReceivedPacket+0x37a>
						MiMAC_DiscardPacket();
    a31a:	4bc7      	ldr	r3, [pc, #796]	; (a638 <MiMAC_ReceivedPacket+0x6d4>)
    a31c:	4798      	blx	r3
						if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a31e:	4bc7      	ldr	r3, [pc, #796]	; (a63c <MiMAC_ReceivedPacket+0x6d8>)
    a320:	781a      	ldrb	r2, [r3, #0]
    a322:	0213      	lsls	r3, r2, #8
    a324:	189a      	adds	r2, r3, r2
    a326:	4bc1      	ldr	r3, [pc, #772]	; (a62c <MiMAC_ReceivedPacket+0x6c8>)
    a328:	189b      	adds	r3, r3, r2
    a32a:	789b      	ldrb	r3, [r3, #2]
						return false;
    a32c:	2400      	movs	r4, #0
						if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a32e:	069b      	lsls	r3, r3, #26
    a330:	d400      	bmi.n	a334 <MiMAC_ReceivedPacket+0x3d0>
    a332:	e633      	b.n	9f9c <MiMAC_ReceivedPacket+0x38>
							MiRadioReceiveParam.action = RECEIVE_START;	
    a334:	a807      	add	r0, sp, #28
    a336:	2300      	movs	r3, #0
    a338:	7003      	strb	r3, [r0, #0]
							MiRadioReceiveParam.rxWindowSize = 0;
    a33a:	8043      	strh	r3, [r0, #2]
							RADIO_Receive(&MiRadioReceiveParam);
    a33c:	4bc0      	ldr	r3, [pc, #768]	; (a640 <MiMAC_ReceivedPacket+0x6dc>)
    a33e:	4798      	blx	r3
    a340:	e62c      	b.n	9f9c <MiMAC_ReceivedPacket+0x38>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    a342:	4bbb      	ldr	r3, [pc, #748]	; (a630 <MiMAC_ReceivedPacket+0x6cc>)
    a344:	781c      	ldrb	r4, [r3, #0]
    a346:	2180      	movs	r1, #128	; 0x80
    a348:	4249      	negs	r1, r1
    a34a:	4321      	orrs	r1, r4
    a34c:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    a34e:	2101      	movs	r1, #1
    a350:	73d9      	strb	r1, [r3, #15]
				if (bIntraPAN) // check if it is intraPAN
    a352:	2d00      	cmp	r5, #0
    a354:	d115      	bne.n	a382 <MiMAC_ReceivedPacket+0x41e>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[12];
    a356:	49b6      	ldr	r1, [pc, #728]	; (a630 <MiMAC_ReceivedPacket+0x6cc>)
    a358:	4cb4      	ldr	r4, [pc, #720]	; (a62c <MiMAC_ReceivedPacket+0x6c8>)
    a35a:	0213      	lsls	r3, r2, #8
    a35c:	1898      	adds	r0, r3, r2
    a35e:	1823      	adds	r3, r4, r0
    a360:	7b9d      	ldrb	r5, [r3, #14]
    a362:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[13];
    a364:	7bdb      	ldrb	r3, [r3, #15]
    a366:	744b      	strb	r3, [r1, #17]
    a368:	0213      	lsls	r3, r2, #8
    a36a:	189a      	adds	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
    a36c:	0013      	movs	r3, r2
    a36e:	3310      	adds	r3, #16
    a370:	191b      	adds	r3, r3, r4
    a372:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    a374:	5d03      	ldrb	r3, [r0, r4]
    a376:	3b15      	subs	r3, #21
    a378:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    a37a:	3213      	adds	r2, #19
    a37c:	1912      	adds	r2, r2, r4
    a37e:	608a      	str	r2, [r1, #8]
    a380:	e66b      	b.n	a05a <MiMAC_ReceivedPacket+0xf6>
					if(!(isSameAddress((uint8_t *)&DevIEEEaddr, &RxBuffer[BankIndex].Payload[5])))
    a382:	0211      	lsls	r1, r2, #8
    a384:	1889      	adds	r1, r1, r2
    a386:	3107      	adds	r1, #7
    a388:	4aa8      	ldr	r2, [pc, #672]	; (a62c <MiMAC_ReceivedPacket+0x6c8>)
    a38a:	1889      	adds	r1, r1, r2
    a38c:	48ad      	ldr	r0, [pc, #692]	; (a644 <MiMAC_ReceivedPacket+0x6e0>)
    a38e:	4bae      	ldr	r3, [pc, #696]	; (a648 <MiMAC_ReceivedPacket+0x6e4>)
    a390:	4798      	blx	r3
    a392:	1e04      	subs	r4, r0, #0
    a394:	d011      	beq.n	a3ba <MiMAC_ReceivedPacket+0x456>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    a396:	4ba9      	ldr	r3, [pc, #676]	; (a63c <MiMAC_ReceivedPacket+0x6d8>)
    a398:	7818      	ldrb	r0, [r3, #0]
    a39a:	4aa5      	ldr	r2, [pc, #660]	; (a630 <MiMAC_ReceivedPacket+0x6cc>)
    a39c:	49a3      	ldr	r1, [pc, #652]	; (a62c <MiMAC_ReceivedPacket+0x6c8>)
    a39e:	0203      	lsls	r3, r0, #8
    a3a0:	181b      	adds	r3, r3, r0
    a3a2:	18c8      	adds	r0, r1, r3
    a3a4:	7944      	ldrb	r4, [r0, #5]
    a3a6:	7414      	strb	r4, [r2, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    a3a8:	7980      	ldrb	r0, [r0, #6]
    a3aa:	7450      	strb	r0, [r2, #17]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    a3ac:	5c58      	ldrb	r0, [r3, r1]
    a3ae:	3813      	subs	r0, #19
    a3b0:	7310      	strb	r0, [r2, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    a3b2:	3311      	adds	r3, #17
    a3b4:	185b      	adds	r3, r3, r1
    a3b6:	6093      	str	r3, [r2, #8]
    a3b8:	e64f      	b.n	a05a <MiMAC_ReceivedPacket+0xf6>
						MiMAC_DiscardPacket();
    a3ba:	4b9f      	ldr	r3, [pc, #636]	; (a638 <MiMAC_ReceivedPacket+0x6d4>)
    a3bc:	4798      	blx	r3
						if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a3be:	4b9f      	ldr	r3, [pc, #636]	; (a63c <MiMAC_ReceivedPacket+0x6d8>)
    a3c0:	781a      	ldrb	r2, [r3, #0]
    a3c2:	0213      	lsls	r3, r2, #8
    a3c4:	189a      	adds	r2, r3, r2
    a3c6:	4b99      	ldr	r3, [pc, #612]	; (a62c <MiMAC_ReceivedPacket+0x6c8>)
    a3c8:	189b      	adds	r3, r3, r2
    a3ca:	789b      	ldrb	r3, [r3, #2]
    a3cc:	069b      	lsls	r3, r3, #26
    a3ce:	d400      	bmi.n	a3d2 <MiMAC_ReceivedPacket+0x46e>
    a3d0:	e5e4      	b.n	9f9c <MiMAC_ReceivedPacket+0x38>
							MiRadioReceiveParam.action = RECEIVE_START;	
    a3d2:	a807      	add	r0, sp, #28
    a3d4:	2300      	movs	r3, #0
    a3d6:	7003      	strb	r3, [r0, #0]
							MiRadioReceiveParam.rxWindowSize = 0;
    a3d8:	8043      	strh	r3, [r0, #2]
							RADIO_Receive(&MiRadioReceiveParam);
    a3da:	4b99      	ldr	r3, [pc, #612]	; (a640 <MiMAC_ReceivedPacket+0x6dc>)
    a3dc:	4798      	blx	r3
    a3de:	e5dd      	b.n	9f9c <MiMAC_ReceivedPacket+0x38>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    a3e0:	0211      	lsls	r1, r2, #8
    a3e2:	1889      	adds	r1, r1, r2
    a3e4:	4b91      	ldr	r3, [pc, #580]	; (a62c <MiMAC_ReceivedPacket+0x6c8>)
    a3e6:	185b      	adds	r3, r3, r1
    a3e8:	79db      	ldrb	r3, [r3, #7]
    a3ea:	2bff      	cmp	r3, #255	; 0xff
    a3ec:	d00c      	beq.n	a408 <MiMAC_ReceivedPacket+0x4a4>
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 10;
    a3ee:	4990      	ldr	r1, [pc, #576]	; (a630 <MiMAC_ReceivedPacket+0x6cc>)
    a3f0:	4c8e      	ldr	r4, [pc, #568]	; (a62c <MiMAC_ReceivedPacket+0x6c8>)
    a3f2:	0203      	lsls	r3, r0, #8
    a3f4:	1818      	adds	r0, r3, r0
    a3f6:	5d03      	ldrb	r3, [r0, r4]
    a3f8:	3b0a      	subs	r3, #10
    a3fa:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    a3fc:	0213      	lsls	r3, r2, #8
    a3fe:	189a      	adds	r2, r3, r2
    a400:	3209      	adds	r2, #9
    a402:	1912      	adds	r2, r2, r4
    a404:	608a      	str	r2, [r1, #8]
			break;
    a406:	e628      	b.n	a05a <MiMAC_ReceivedPacket+0xf6>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    a408:	0211      	lsls	r1, r2, #8
    a40a:	1889      	adds	r1, r1, r2
    a40c:	4b87      	ldr	r3, [pc, #540]	; (a62c <MiMAC_ReceivedPacket+0x6c8>)
    a40e:	185b      	adds	r3, r3, r1
    a410:	7a1b      	ldrb	r3, [r3, #8]
    a412:	2bff      	cmp	r3, #255	; 0xff
    a414:	d1eb      	bne.n	a3ee <MiMAC_ReceivedPacket+0x48a>
					MACRxPacket.flags.bits.broadcast = 1;
    a416:	4986      	ldr	r1, [pc, #536]	; (a630 <MiMAC_ReceivedPacket+0x6cc>)
    a418:	780b      	ldrb	r3, [r1, #0]
    a41a:	2404      	movs	r4, #4
    a41c:	4323      	orrs	r3, r4
    a41e:	700b      	strb	r3, [r1, #0]
    a420:	e7e5      	b.n	a3ee <MiMAC_ReceivedPacket+0x48a>
				MiMAC_DiscardPacket();
    a422:	4b85      	ldr	r3, [pc, #532]	; (a638 <MiMAC_ReceivedPacket+0x6d4>)
    a424:	4798      	blx	r3
				if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a426:	4b85      	ldr	r3, [pc, #532]	; (a63c <MiMAC_ReceivedPacket+0x6d8>)
    a428:	781a      	ldrb	r2, [r3, #0]
    a42a:	0213      	lsls	r3, r2, #8
    a42c:	189a      	adds	r2, r3, r2
    a42e:	4b7f      	ldr	r3, [pc, #508]	; (a62c <MiMAC_ReceivedPacket+0x6c8>)
    a430:	189b      	adds	r3, r3, r2
    a432:	789b      	ldrb	r3, [r3, #2]
    a434:	069b      	lsls	r3, r3, #26
    a436:	d401      	bmi.n	a43c <MiMAC_ReceivedPacket+0x4d8>
				return false;
    a438:	2400      	movs	r4, #0
    a43a:	e5af      	b.n	9f9c <MiMAC_ReceivedPacket+0x38>
					MiRadioReceiveParam.action = RECEIVE_START;					
    a43c:	a807      	add	r0, sp, #28
    a43e:	2300      	movs	r3, #0
    a440:	7003      	strb	r3, [r0, #0]
					MiRadioReceiveParam.rxWindowSize = 0;
    a442:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&MiRadioReceiveParam);
    a444:	4b7e      	ldr	r3, [pc, #504]	; (a640 <MiMAC_ReceivedPacket+0x6dc>)
    a446:	4798      	blx	r3
    a448:	e7f6      	b.n	a438 <MiMAC_ReceivedPacket+0x4d4>
    a44a:	3401      	adds	r4, #1
    a44c:	370a      	adds	r7, #10
			for (i = 0; i < CONNECTION_SIZE; i++)
    a44e:	2c05      	cmp	r4, #5
    a450:	d01a      	beq.n	a488 <MiMAC_ReceivedPacket+0x524>
    a452:	b2e5      	uxtb	r5, r4
				if ((ConnectionTable[i].status.bits.isValid) &&
    a454:	00a3      	lsls	r3, r4, #2
    a456:	191b      	adds	r3, r3, r4
    a458:	005b      	lsls	r3, r3, #1
    a45a:	4443      	add	r3, r8
    a45c:	7a1b      	ldrb	r3, [r3, #8]
    a45e:	09db      	lsrs	r3, r3, #7
    a460:	d0f3      	beq.n	a44a <MiMAC_ReceivedPacket+0x4e6>
				isSameAddress(ConnectionTable[i].Address, MACRxPacket.SourceAddress))
    a462:	4b73      	ldr	r3, [pc, #460]	; (a630 <MiMAC_ReceivedPacket+0x6cc>)
    a464:	6859      	ldr	r1, [r3, #4]
    a466:	0038      	movs	r0, r7
    a468:	4b77      	ldr	r3, [pc, #476]	; (a648 <MiMAC_ReceivedPacket+0x6e4>)
    a46a:	4798      	blx	r3
				if ((ConnectionTable[i].status.bits.isValid) &&
    a46c:	2800      	cmp	r0, #0
    a46e:	d0ec      	beq.n	a44a <MiMAC_ReceivedPacket+0x4e6>
			if (i < CONNECTION_SIZE)
    a470:	2d04      	cmp	r5, #4
    a472:	d809      	bhi.n	a488 <MiMAC_ReceivedPacket+0x524>
				if (IncomingFrameCounter[i].Val > FrameCounter.Val)
    a474:	23ff      	movs	r3, #255	; 0xff
    a476:	401c      	ands	r4, r3
    a478:	00a2      	lsls	r2, r4, #2
    a47a:	4b74      	ldr	r3, [pc, #464]	; (a64c <MiMAC_ReceivedPacket+0x6e8>)
    a47c:	58d3      	ldr	r3, [r2, r3]
    a47e:	42b3      	cmp	r3, r6
    a480:	d82b      	bhi.n	a4da <MiMAC_ReceivedPacket+0x576>
					IncomingFrameCounter[i].Val = FrameCounter.Val;
    a482:	00a4      	lsls	r4, r4, #2
    a484:	4b71      	ldr	r3, [pc, #452]	; (a64c <MiMAC_ReceivedPacket+0x6e8>)
    a486:	50e6      	str	r6, [r4, r3]
			MACRxPacket.PayloadLen -= 5;  // used to 5 for frame counter now -4 also added for MIC integrity
    a488:	4969      	ldr	r1, [pc, #420]	; (a630 <MiMAC_ReceivedPacket+0x6cc>)
    a48a:	7b0b      	ldrb	r3, [r1, #12]
    a48c:	3b05      	subs	r3, #5
    a48e:	b2db      	uxtb	r3, r3
    a490:	730b      	strb	r3, [r1, #12]
			received_mic_values[0] = MACRxPacket.Payload[MACRxPacket.PayloadLen+1];
    a492:	6888      	ldr	r0, [r1, #8]
    a494:	18c3      	adds	r3, r0, r3
    a496:	785c      	ldrb	r4, [r3, #1]
    a498:	4a6d      	ldr	r2, [pc, #436]	; (a650 <MiMAC_ReceivedPacket+0x6ec>)
    a49a:	7014      	strb	r4, [r2, #0]
			received_mic_values[1] = MACRxPacket.Payload[MACRxPacket.PayloadLen+2];
    a49c:	789c      	ldrb	r4, [r3, #2]
    a49e:	7054      	strb	r4, [r2, #1]
			received_mic_values[2] = MACRxPacket.Payload[MACRxPacket.PayloadLen+3];
    a4a0:	78dc      	ldrb	r4, [r3, #3]
    a4a2:	7094      	strb	r4, [r2, #2]
			received_mic_values[3] = MACRxPacket.Payload[MACRxPacket.PayloadLen+4];
    a4a4:	791b      	ldrb	r3, [r3, #4]
    a4a6:	70d3      	strb	r3, [r2, #3]
			if (false == DataDecrypt(&(MACRxPacket.Payload[5]), &(MACRxPacket.PayloadLen), MACRxPacket.SourceAddress, FrameCounter, RxBuffer[BankIndex].Payload[0]))
    a4a8:	684a      	ldr	r2, [r1, #4]
    a4aa:	310c      	adds	r1, #12
    a4ac:	3005      	adds	r0, #5
    a4ae:	4b63      	ldr	r3, [pc, #396]	; (a63c <MiMAC_ReceivedPacket+0x6d8>)
    a4b0:	781c      	ldrb	r4, [r3, #0]
    a4b2:	0223      	lsls	r3, r4, #8
    a4b4:	191c      	adds	r4, r3, r4
    a4b6:	4b5d      	ldr	r3, [pc, #372]	; (a62c <MiMAC_ReceivedPacket+0x6c8>)
    a4b8:	191b      	adds	r3, r3, r4
    a4ba:	789b      	ldrb	r3, [r3, #2]
    a4bc:	9300      	str	r3, [sp, #0]
    a4be:	0033      	movs	r3, r6
    a4c0:	4c64      	ldr	r4, [pc, #400]	; (a654 <MiMAC_ReceivedPacket+0x6f0>)
    a4c2:	47a0      	blx	r4
    a4c4:	2800      	cmp	r0, #0
    a4c6:	d01a      	beq.n	a4fe <MiMAC_ReceivedPacket+0x59a>
			MACRxPacket.Payload = &(MACRxPacket.Payload[5]);
    a4c8:	4b59      	ldr	r3, [pc, #356]	; (a630 <MiMAC_ReceivedPacket+0x6cc>)
    a4ca:	689a      	ldr	r2, [r3, #8]
    a4cc:	3205      	adds	r2, #5
    a4ce:	609a      	str	r2, [r3, #8]
			MACRxPacket.flags.bits.secEn = 1;
    a4d0:	781a      	ldrb	r2, [r3, #0]
    a4d2:	2108      	movs	r1, #8
    a4d4:	430a      	orrs	r2, r1
    a4d6:	701a      	strb	r2, [r3, #0]
    a4d8:	e5c9      	b.n	a06e <MiMAC_ReceivedPacket+0x10a>
					MiMAC_DiscardPacket();
    a4da:	4b57      	ldr	r3, [pc, #348]	; (a638 <MiMAC_ReceivedPacket+0x6d4>)
    a4dc:	4798      	blx	r3
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a4de:	4b57      	ldr	r3, [pc, #348]	; (a63c <MiMAC_ReceivedPacket+0x6d8>)
    a4e0:	781a      	ldrb	r2, [r3, #0]
    a4e2:	0213      	lsls	r3, r2, #8
    a4e4:	189a      	adds	r2, r3, r2
    a4e6:	4b51      	ldr	r3, [pc, #324]	; (a62c <MiMAC_ReceivedPacket+0x6c8>)
    a4e8:	189b      	adds	r3, r3, r2
    a4ea:	789b      	ldrb	r3, [r3, #2]
    a4ec:	069b      	lsls	r3, r3, #26
    a4ee:	d5a3      	bpl.n	a438 <MiMAC_ReceivedPacket+0x4d4>
						MiRadioReceiveParam.action = RECEIVE_START;					
    a4f0:	a807      	add	r0, sp, #28
    a4f2:	2300      	movs	r3, #0
    a4f4:	7003      	strb	r3, [r0, #0]
						MiRadioReceiveParam.rxWindowSize = 0;
    a4f6:	8043      	strh	r3, [r0, #2]
						RADIO_Receive(&MiRadioReceiveParam);
    a4f8:	4b51      	ldr	r3, [pc, #324]	; (a640 <MiMAC_ReceivedPacket+0x6dc>)
    a4fa:	4798      	blx	r3
    a4fc:	e79c      	b.n	a438 <MiMAC_ReceivedPacket+0x4d4>
				MiMAC_DiscardPacket();
    a4fe:	4b4e      	ldr	r3, [pc, #312]	; (a638 <MiMAC_ReceivedPacket+0x6d4>)
    a500:	4798      	blx	r3
				if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a502:	4b4e      	ldr	r3, [pc, #312]	; (a63c <MiMAC_ReceivedPacket+0x6d8>)
    a504:	781a      	ldrb	r2, [r3, #0]
    a506:	0213      	lsls	r3, r2, #8
    a508:	189a      	adds	r2, r3, r2
    a50a:	4b48      	ldr	r3, [pc, #288]	; (a62c <MiMAC_ReceivedPacket+0x6c8>)
    a50c:	189b      	adds	r3, r3, r2
    a50e:	789b      	ldrb	r3, [r3, #2]
    a510:	069b      	lsls	r3, r3, #26
    a512:	d591      	bpl.n	a438 <MiMAC_ReceivedPacket+0x4d4>
					MiRadioReceiveParam.action = RECEIVE_START;					
    a514:	a807      	add	r0, sp, #28
    a516:	2300      	movs	r3, #0
    a518:	7003      	strb	r3, [r0, #0]
					MiRadioReceiveParam.rxWindowSize = 0;
    a51a:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&MiRadioReceiveParam);
    a51c:	4b48      	ldr	r3, [pc, #288]	; (a640 <MiMAC_ReceivedPacket+0x6dc>)
    a51e:	4798      	blx	r3
    a520:	e78a      	b.n	a438 <MiMAC_ReceivedPacket+0x4d4>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_DATA;
    a522:	4a43      	ldr	r2, [pc, #268]	; (a630 <MiMAC_ReceivedPacket+0x6cc>)
    a524:	7813      	ldrb	r3, [r2, #0]
    a526:	2403      	movs	r4, #3
    a528:	43a3      	bics	r3, r4
    a52a:	7013      	strb	r3, [r2, #0]
		MACRxPacket.LQIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 2];
    a52c:	4c40      	ldr	r4, [pc, #256]	; (a630 <MiMAC_ReceivedPacket+0x6cc>)
    a52e:	4b3f      	ldr	r3, [pc, #252]	; (a62c <MiMAC_ReceivedPacket+0x6c8>)
    a530:	0202      	lsls	r2, r0, #8
    a532:	1812      	adds	r2, r2, r0
    a534:	5cd5      	ldrb	r5, [r2, r3]
    a536:	189b      	adds	r3, r3, r2
    a538:	5d5a      	ldrb	r2, [r3, r5]
    a53a:	73a2      	strb	r2, [r4, #14]
		MACRxPacket.RSSIValue = RxBuffer[BankIndex].radioRSSI;				
    a53c:	785b      	ldrb	r3, [r3, #1]
    a53e:	7363      	strb	r3, [r4, #13]
		return true;
    a540:	2401      	movs	r4, #1
		if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a542:	068b      	lsls	r3, r1, #26
    a544:	d400      	bmi.n	a548 <MiMAC_ReceivedPacket+0x5e4>
    a546:	e529      	b.n	9f9c <MiMAC_ReceivedPacket+0x38>
			    tParamAck.flags.Val = 0;
    a548:	aa04      	add	r2, sp, #16
    a54a:	2400      	movs	r4, #0
			    tParamAck.altSrcAddr = 0;
    a54c:	7254      	strb	r4, [r2, #9]
			    tParamAck.altDestAddr = false;
    a54e:	7214      	strb	r4, [r2, #8]
 			    tParamAck.flags.bits.sourcePrsnt = 1;
    a550:	233e      	movs	r3, #62	; 0x3e
    a552:	425b      	negs	r3, r3
    a554:	7013      	strb	r3, [r2, #0]
			    tParamAck.DestAddress = MACRxPacket.SourceAddress;
    a556:	4b36      	ldr	r3, [pc, #216]	; (a630 <MiMAC_ReceivedPacket+0x6cc>)
    a558:	6859      	ldr	r1, [r3, #4]
    a55a:	9105      	str	r1, [sp, #20]
			    tParamAck.DestPANID.Val = MACRxPacket.SourcePANID.Val;
    a55c:	8a1b      	ldrh	r3, [r3, #16]
    a55e:	8153      	strh	r3, [r2, #10]
			AckBuffer[0] = RxBuffer[BankIndex].Payload[2];	
    a560:	4b3d      	ldr	r3, [pc, #244]	; (a658 <MiMAC_ReceivedPacket+0x6f4>)
    a562:	0205      	lsls	r5, r0, #8
    a564:	182d      	adds	r5, r5, r0
    a566:	4831      	ldr	r0, [pc, #196]	; (a62c <MiMAC_ReceivedPacket+0x6c8>)
    a568:	1940      	adds	r0, r0, r5
    a56a:	7900      	ldrb	r0, [r0, #4]
    a56c:	7018      	strb	r0, [r3, #0]
			MiMAC_SendPacket(tParamAck, AckBuffer, 1, 0, NULL);
    a56e:	9402      	str	r4, [sp, #8]
    a570:	9401      	str	r4, [sp, #4]
    a572:	2001      	movs	r0, #1
    a574:	9000      	str	r0, [sp, #0]
    a576:	9804      	ldr	r0, [sp, #16]
    a578:	9a06      	ldr	r2, [sp, #24]
    a57a:	4c38      	ldr	r4, [pc, #224]	; (a65c <MiMAC_ReceivedPacket+0x6f8>)
    a57c:	47a0      	blx	r4
		return true;
    a57e:	2401      	movs	r4, #1
    a580:	e50c      	b.n	9f9c <MiMAC_ReceivedPacket+0x38>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_COMMAND;
    a582:	4a2b      	ldr	r2, [pc, #172]	; (a630 <MiMAC_ReceivedPacket+0x6cc>)
    a584:	7813      	ldrb	r3, [r2, #0]
    a586:	2403      	movs	r4, #3
    a588:	43a3      	bics	r3, r4
    a58a:	2401      	movs	r4, #1
    a58c:	4323      	orrs	r3, r4
    a58e:	7013      	strb	r3, [r2, #0]
			break;
    a590:	e7cc      	b.n	a52c <MiMAC_ReceivedPacket+0x5c8>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_RESERVE;
    a592:	4a27      	ldr	r2, [pc, #156]	; (a630 <MiMAC_ReceivedPacket+0x6cc>)
    a594:	7813      	ldrb	r3, [r2, #0]
    a596:	2403      	movs	r4, #3
    a598:	4323      	orrs	r3, r4
    a59a:	7013      	strb	r3, [r2, #0]
			break;
    a59c:	e7c6      	b.n	a52c <MiMAC_ReceivedPacket+0x5c8>
				MACRxPacket.flags.bits.packetType = PACKET_TYPE_ACK;
    a59e:	4a24      	ldr	r2, [pc, #144]	; (a630 <MiMAC_ReceivedPacket+0x6cc>)
    a5a0:	7813      	ldrb	r3, [r2, #0]
    a5a2:	2103      	movs	r1, #3
    a5a4:	438b      	bics	r3, r1
    a5a6:	2102      	movs	r1, #2
    a5a8:	430b      	orrs	r3, r1
    a5aa:	7013      	strb	r3, [r2, #0]
				if((AckSeqNum == *(MACRxPacket.Payload))&& (AckReqData))
    a5ac:	6893      	ldr	r3, [r2, #8]
    a5ae:	781a      	ldrb	r2, [r3, #0]
    a5b0:	4b2b      	ldr	r3, [pc, #172]	; (a660 <MiMAC_ReceivedPacket+0x6fc>)
    a5b2:	781b      	ldrb	r3, [r3, #0]
    a5b4:	429a      	cmp	r2, r3
    a5b6:	d003      	beq.n	a5c0 <MiMAC_ReceivedPacket+0x65c>
				MiMAC_DiscardPacket();
    a5b8:	4b1f      	ldr	r3, [pc, #124]	; (a638 <MiMAC_ReceivedPacket+0x6d4>)
    a5ba:	4798      	blx	r3
				return false;
    a5bc:	2400      	movs	r4, #0
    a5be:	e4ed      	b.n	9f9c <MiMAC_ReceivedPacket+0x38>
				if((AckSeqNum == *(MACRxPacket.Payload))&& (AckReqData))
    a5c0:	4b28      	ldr	r3, [pc, #160]	; (a664 <MiMAC_ReceivedPacket+0x700>)
    a5c2:	781b      	ldrb	r3, [r3, #0]
    a5c4:	2b00      	cmp	r3, #0
    a5c6:	d0f7      	beq.n	a5b8 <MiMAC_ReceivedPacket+0x654>
					DataTxAckTimer.Val = 0;
    a5c8:	2400      	movs	r4, #0
    a5ca:	4b27      	ldr	r3, [pc, #156]	; (a668 <MiMAC_ReceivedPacket+0x704>)
    a5cc:	601c      	str	r4, [r3, #0]
					PHY_DataConf(SUCCESS); 
    a5ce:	2000      	movs	r0, #0
    a5d0:	4b26      	ldr	r3, [pc, #152]	; (a66c <MiMAC_ReceivedPacket+0x708>)
    a5d2:	4798      	blx	r3
					AckReqData = 0;
    a5d4:	4b23      	ldr	r3, [pc, #140]	; (a664 <MiMAC_ReceivedPacket+0x700>)
    a5d6:	701c      	strb	r4, [r3, #0]
    a5d8:	e7ee      	b.n	a5b8 <MiMAC_ReceivedPacket+0x654>
				if (!(((RxBuffer[BankIndex].Payload[5] == 0xFF) & (RxBuffer[BankIndex].Payload[6] == 0xFF)) ||((RxBuffer[BankIndex].Payload[5] == DevShortAddress[0]) & (RxBuffer[BankIndex].Payload[6] == DevShortAddress[1]))) )
    a5da:	0201      	lsls	r1, r0, #8
    a5dc:	1809      	adds	r1, r1, r0
    a5de:	4b13      	ldr	r3, [pc, #76]	; (a62c <MiMAC_ReceivedPacket+0x6c8>)
    a5e0:	185b      	adds	r3, r3, r1
    a5e2:	4914      	ldr	r1, [pc, #80]	; (a634 <MiMAC_ReceivedPacket+0x6d0>)
    a5e4:	7849      	ldrb	r1, [r1, #1]
    a5e6:	7a1b      	ldrb	r3, [r3, #8]
    a5e8:	4299      	cmp	r1, r3
    a5ea:	d000      	beq.n	a5ee <MiMAC_ReceivedPacket+0x68a>
    a5ec:	e5a1      	b.n	a132 <MiMAC_ReceivedPacket+0x1ce>
    a5ee:	4b11      	ldr	r3, [pc, #68]	; (a634 <MiMAC_ReceivedPacket+0x6d0>)
    a5f0:	781b      	ldrb	r3, [r3, #0]
    a5f2:	42a3      	cmp	r3, r4
    a5f4:	d000      	beq.n	a5f8 <MiMAC_ReceivedPacket+0x694>
    a5f6:	e59c      	b.n	a132 <MiMAC_ReceivedPacket+0x1ce>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    a5f8:	490d      	ldr	r1, [pc, #52]	; (a630 <MiMAC_ReceivedPacket+0x6cc>)
    a5fa:	4c0c      	ldr	r4, [pc, #48]	; (a62c <MiMAC_ReceivedPacket+0x6c8>)
    a5fc:	0203      	lsls	r3, r0, #8
    a5fe:	1818      	adds	r0, r3, r0
    a600:	1823      	adds	r3, r4, r0
    a602:	795d      	ldrb	r5, [r3, #5]
    a604:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    a606:	799b      	ldrb	r3, [r3, #6]
    a608:	744b      	strb	r3, [r1, #17]
    a60a:	0213      	lsls	r3, r2, #8
    a60c:	189a      	adds	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    a60e:	0013      	movs	r3, r2
    a610:	3309      	adds	r3, #9
    a612:	191b      	adds	r3, r3, r4
    a614:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    a616:	5d03      	ldrb	r3, [r0, r4]
    a618:	3b13      	subs	r3, #19
    a61a:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    a61c:	3211      	adds	r2, #17
    a61e:	1912      	adds	r2, r2, r4
    a620:	608a      	str	r2, [r1, #8]
    a622:	e5b7      	b.n	a194 <MiMAC_ReceivedPacket+0x230>
			BankIndex = i;
    a624:	2200      	movs	r2, #0
    a626:	4b05      	ldr	r3, [pc, #20]	; (a63c <MiMAC_ReceivedPacket+0x6d8>)
    a628:	701a      	strb	r2, [r3, #0]
    a62a:	e4c2      	b.n	9fb2 <MiMAC_ReceivedPacket+0x4e>
    a62c:	200023fc 	.word	0x200023fc
    a630:	20002844 	.word	0x20002844
    a634:	20002804 	.word	0x20002804
    a638:	00009ee5 	.word	0x00009ee5
    a63c:	2000001b 	.word	0x2000001b
    a640:	0000ef35 	.word	0x0000ef35
    a644:	200023f4 	.word	0x200023f4
    a648:	0000acf5 	.word	0x0000acf5
    a64c:	20002868 	.word	0x20002868
    a650:	200022e0 	.word	0x200022e0
    a654:	00009979 	.word	0x00009979
    a658:	200022e4 	.word	0x200022e4
    a65c:	00009b55 	.word	0x00009b55
    a660:	20002178 	.word	0x20002178
    a664:	20000483 	.word	0x20000483
    a668:	20002b04 	.word	0x20002b04
    a66c:	00009f01 	.word	0x00009f01

0000a670 <MiMAC_Task>:

void MiMAC_Task(void)
{
    a670:	b510      	push	{r4, lr}
  PHY_TaskHandler();
    a672:	4b0b      	ldr	r3, [pc, #44]	; (a6a0 <MiMAC_Task+0x30>)
    a674:	4798      	blx	r3
  if(dataConfCallback && dataConfAvailable)
    a676:	4b0b      	ldr	r3, [pc, #44]	; (a6a4 <MiMAC_Task+0x34>)
    a678:	681b      	ldr	r3, [r3, #0]
    a67a:	2b00      	cmp	r3, #0
    a67c:	d003      	beq.n	a686 <MiMAC_Task+0x16>
    a67e:	4a0a      	ldr	r2, [pc, #40]	; (a6a8 <MiMAC_Task+0x38>)
    a680:	7812      	ldrb	r2, [r2, #0]
    a682:	2a00      	cmp	r2, #0
    a684:	d100      	bne.n	a688 <MiMAC_Task+0x18>
  {
	  dataConfAvailable = false;
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
  }
}
    a686:	bd10      	pop	{r4, pc}
	  dataConfAvailable = false;
    a688:	2100      	movs	r1, #0
    a68a:	4a07      	ldr	r2, [pc, #28]	; (a6a8 <MiMAC_Task+0x38>)
    a68c:	7011      	strb	r1, [r2, #0]
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
    a68e:	4a07      	ldr	r2, [pc, #28]	; (a6ac <MiMAC_Task+0x3c>)
    a690:	6812      	ldr	r2, [r2, #0]
    a692:	4907      	ldr	r1, [pc, #28]	; (a6b0 <MiMAC_Task+0x40>)
    a694:	7809      	ldrb	r1, [r1, #0]
    a696:	4807      	ldr	r0, [pc, #28]	; (a6b4 <MiMAC_Task+0x44>)
    a698:	7800      	ldrb	r0, [r0, #0]
    a69a:	4798      	blx	r3
}
    a69c:	e7f3      	b.n	a686 <MiMAC_Task+0x16>
    a69e:	46c0      	nop			; (mov r8, r8)
    a6a0:	0000aab1 	.word	0x0000aab1
    a6a4:	20000488 	.word	0x20000488
    a6a8:	20000486 	.word	0x20000486
    a6ac:	20000490 	.word	0x20000490
    a6b0:	200022c8 	.word	0x200022c8
    a6b4:	2000048c 	.word	0x2000048c

0000a6b8 <phySetChannel>:
}

/*************************************************************************//**
*****************************************************************************/
static void phySetChannel(void)
{
    a6b8:	b500      	push	{lr}
    a6ba:	b083      	sub	sp, #12
	uint32_t frequncy_set;
	if(phyChannel) // Based on channel we need to set frequency 
    a6bc:	4b2f      	ldr	r3, [pc, #188]	; (a77c <phySetChannel+0xc4>)
    a6be:	781b      	ldrb	r3, [r3, #0]
    a6c0:	2b00      	cmp	r3, #0
    a6c2:	d007      	beq.n	a6d4 <phySetChannel+0x1c>
	{
		switch(phyChannel)
    a6c4:	2b19      	cmp	r3, #25
    a6c6:	d856      	bhi.n	a776 <phySetChannel+0xbe>
    a6c8:	009b      	lsls	r3, r3, #2
    a6ca:	4a2d      	ldr	r2, [pc, #180]	; (a780 <phySetChannel+0xc8>)
    a6cc:	58d3      	ldr	r3, [r2, r3]
    a6ce:	469f      	mov	pc, r3
				//break;
			//case 8:
				//frequncy_set = FREQ_786000KHZ;
				//break;
			case 0:
				frequncy_set = FREQ_862000KHZ;
    a6d0:	4b2c      	ldr	r3, [pc, #176]	; (a784 <phySetChannel+0xcc>)
    a6d2:	9301      	str	r3, [sp, #4]
				break;				
																									
		}
	}
		
	if(RADIO_SetAttr(CHANNEL_FREQUENCY,(void *)&frequncy_set) == 0)  
    a6d4:	a901      	add	r1, sp, #4
    a6d6:	2001      	movs	r0, #1
    a6d8:	4b2b      	ldr	r3, [pc, #172]	; (a788 <phySetChannel+0xd0>)
    a6da:	4798      	blx	r3
	{
	}
}
    a6dc:	b003      	add	sp, #12
    a6de:	bd00      	pop	{pc}
				frequncy_set = FREQ_863000KHZ;
    a6e0:	4b2a      	ldr	r3, [pc, #168]	; (a78c <phySetChannel+0xd4>)
    a6e2:	9301      	str	r3, [sp, #4]
				break;
    a6e4:	e7f6      	b.n	a6d4 <phySetChannel+0x1c>
				frequncy_set = FREQ_865000KHZ;
    a6e6:	4b2a      	ldr	r3, [pc, #168]	; (a790 <phySetChannel+0xd8>)
    a6e8:	9301      	str	r3, [sp, #4]
				break;
    a6ea:	e7f3      	b.n	a6d4 <phySetChannel+0x1c>
				frequncy_set = FREQ_866550KHZ;
    a6ec:	4b29      	ldr	r3, [pc, #164]	; (a794 <phySetChannel+0xdc>)
    a6ee:	9301      	str	r3, [sp, #4]
				break;
    a6f0:	e7f0      	b.n	a6d4 <phySetChannel+0x1c>
				frequncy_set = FREQ_867000KHZ;
    a6f2:	4b29      	ldr	r3, [pc, #164]	; (a798 <phySetChannel+0xe0>)
    a6f4:	9301      	str	r3, [sp, #4]
				break;			
    a6f6:	e7ed      	b.n	a6d4 <phySetChannel+0x1c>
				frequncy_set = FREQ_868100KHZ;
    a6f8:	4b28      	ldr	r3, [pc, #160]	; (a79c <phySetChannel+0xe4>)
    a6fa:	9301      	str	r3, [sp, #4]
				break;
    a6fc:	e7ea      	b.n	a6d4 <phySetChannel+0x1c>
				frequncy_set = FREQ_869525KHZ;
    a6fe:	4b28      	ldr	r3, [pc, #160]	; (a7a0 <phySetChannel+0xe8>)
    a700:	9301      	str	r3, [sp, #4]
				break;			
    a702:	e7e7      	b.n	a6d4 <phySetChannel+0x1c>
				frequncy_set = FREQ_870000KHZ;
    a704:	4b27      	ldr	r3, [pc, #156]	; (a7a4 <phySetChannel+0xec>)
    a706:	9301      	str	r3, [sp, #4]
				break;
    a708:	e7e4      	b.n	a6d4 <phySetChannel+0x1c>
				frequncy_set = FREQ_902300KHZ;
    a70a:	4b27      	ldr	r3, [pc, #156]	; (a7a8 <phySetChannel+0xf0>)
    a70c:	9301      	str	r3, [sp, #4]
				break;
    a70e:	e7e1      	b.n	a6d4 <phySetChannel+0x1c>
				frequncy_set = FREQ_903000KHZ;
    a710:	4b26      	ldr	r3, [pc, #152]	; (a7ac <phySetChannel+0xf4>)
    a712:	9301      	str	r3, [sp, #4]
				break;
    a714:	e7de      	b.n	a6d4 <phySetChannel+0x1c>
				frequncy_set = FREQ_915000KHZ;
    a716:	4b26      	ldr	r3, [pc, #152]	; (a7b0 <phySetChannel+0xf8>)
    a718:	9301      	str	r3, [sp, #4]
				break;
    a71a:	e7db      	b.n	a6d4 <phySetChannel+0x1c>
				frequncy_set = FREQ_915200KHZ;
    a71c:	4b25      	ldr	r3, [pc, #148]	; (a7b4 <phySetChannel+0xfc>)
    a71e:	9301      	str	r3, [sp, #4]
				break;
    a720:	e7d8      	b.n	a6d4 <phySetChannel+0x1c>
				frequncy_set = FREQ_915900KHZ;
    a722:	4b25      	ldr	r3, [pc, #148]	; (a7b8 <phySetChannel+0x100>)
    a724:	9301      	str	r3, [sp, #4]
				break;
    a726:	e7d5      	b.n	a6d4 <phySetChannel+0x1c>
				frequncy_set = FREQ_920000KHZ;
    a728:	4b24      	ldr	r3, [pc, #144]	; (a7bc <phySetChannel+0x104>)
    a72a:	9301      	str	r3, [sp, #4]
				break;
    a72c:	e7d2      	b.n	a6d4 <phySetChannel+0x1c>
				frequncy_set = FREQ_920900KHZ;
    a72e:	4b24      	ldr	r3, [pc, #144]	; (a7c0 <phySetChannel+0x108>)
    a730:	9301      	str	r3, [sp, #4]
				break;
    a732:	e7cf      	b.n	a6d4 <phySetChannel+0x1c>
				frequncy_set = FREQ_921900KHZ;
    a734:	4b23      	ldr	r3, [pc, #140]	; (a7c4 <phySetChannel+0x10c>)
    a736:	9301      	str	r3, [sp, #4]
				break;
    a738:	e7cc      	b.n	a6d4 <phySetChannel+0x1c>
				frequncy_set = FREQ_922000KHZ;
    a73a:	4b23      	ldr	r3, [pc, #140]	; (a7c8 <phySetChannel+0x110>)
    a73c:	9301      	str	r3, [sp, #4]
				break;
    a73e:	e7c9      	b.n	a6d4 <phySetChannel+0x1c>
				frequncy_set = FREQ_922100KHZ;
    a740:	4b22      	ldr	r3, [pc, #136]	; (a7cc <phySetChannel+0x114>)
    a742:	9301      	str	r3, [sp, #4]
				break;
    a744:	e7c6      	b.n	a6d4 <phySetChannel+0x1c>
				frequncy_set = FREQ_923000KHZ;
    a746:	4b22      	ldr	r3, [pc, #136]	; (a7d0 <phySetChannel+0x118>)
    a748:	9301      	str	r3, [sp, #4]
				break;
    a74a:	e7c3      	b.n	a6d4 <phySetChannel+0x1c>
				frequncy_set = FREQ_923200KHZ;
    a74c:	4b21      	ldr	r3, [pc, #132]	; (a7d4 <phySetChannel+0x11c>)
    a74e:	9301      	str	r3, [sp, #4]
				break;
    a750:	e7c0      	b.n	a6d4 <phySetChannel+0x1c>
				frequncy_set = FREQ_923300KHZ;
    a752:	4b21      	ldr	r3, [pc, #132]	; (a7d8 <phySetChannel+0x120>)
    a754:	9301      	str	r3, [sp, #4]
				break;
    a756:	e7bd      	b.n	a6d4 <phySetChannel+0x1c>
				frequncy_set = FREQ_925000KHZ;
    a758:	4b20      	ldr	r3, [pc, #128]	; (a7dc <phySetChannel+0x124>)
    a75a:	9301      	str	r3, [sp, #4]
				break;		
    a75c:	e7ba      	b.n	a6d4 <phySetChannel+0x1c>
				frequncy_set = FREQ_927500KHZ;
    a75e:	4b20      	ldr	r3, [pc, #128]	; (a7e0 <phySetChannel+0x128>)
    a760:	9301      	str	r3, [sp, #4]
				break;
    a762:	e7b7      	b.n	a6d4 <phySetChannel+0x1c>
				frequncy_set = FREQ_928000KHZ;
    a764:	4b1f      	ldr	r3, [pc, #124]	; (a7e4 <phySetChannel+0x12c>)
    a766:	9301      	str	r3, [sp, #4]
				break;
    a768:	e7b4      	b.n	a6d4 <phySetChannel+0x1c>
				frequncy_set = FREQ_928500KHZ;
    a76a:	4b1f      	ldr	r3, [pc, #124]	; (a7e8 <phySetChannel+0x130>)
    a76c:	9301      	str	r3, [sp, #4]
				break;
    a76e:	e7b1      	b.n	a6d4 <phySetChannel+0x1c>
				frequncy_set = FREQ_1020000KHZ;
    a770:	4b1e      	ldr	r3, [pc, #120]	; (a7ec <phySetChannel+0x134>)
    a772:	9301      	str	r3, [sp, #4]
				break;
    a774:	e7ae      	b.n	a6d4 <phySetChannel+0x1c>
				frequncy_set = FREQ_868100KHZ;
    a776:	4b09      	ldr	r3, [pc, #36]	; (a79c <phySetChannel+0xe4>)
    a778:	9301      	str	r3, [sp, #4]
				break;				
    a77a:	e7ab      	b.n	a6d4 <phySetChannel+0x1c>
    a77c:	20000494 	.word	0x20000494
    a780:	000179a0 	.word	0x000179a0
    a784:	33611380 	.word	0x33611380
    a788:	0000dd11 	.word	0x0000dd11
    a78c:	337055c0 	.word	0x337055c0
    a790:	338eda40 	.word	0x338eda40
    a794:	33a680f0 	.word	0x33a680f0
    a798:	33ad5ec0 	.word	0x33ad5ec0
    a79c:	33be27a0 	.word	0x33be27a0
    a7a0:	33d3e608 	.word	0x33d3e608
    a7a4:	33db2580 	.word	0x33db2580
    a7a8:	35c80160 	.word	0x35c80160
    a7ac:	35d2afc0 	.word	0x35d2afc0
    a7b0:	3689cac0 	.word	0x3689cac0
    a7b4:	368cd800 	.word	0x368cd800
    a7b8:	36978660 	.word	0x36978660
    a7bc:	36d61600 	.word	0x36d61600
    a7c0:	36e3d1a0 	.word	0x36e3d1a0
    a7c4:	36f313e0 	.word	0x36f313e0
    a7c8:	36f49a80 	.word	0x36f49a80
    a7cc:	36f62120 	.word	0x36f62120
    a7d0:	3703dcc0 	.word	0x3703dcc0
    a7d4:	3706ea00 	.word	0x3706ea00
    a7d8:	370870a0 	.word	0x370870a0
    a7dc:	37226140 	.word	0x37226140
    a7e0:	374886e0 	.word	0x374886e0
    a7e4:	37502800 	.word	0x37502800
    a7e8:	3757c920 	.word	0x3757c920
    a7ec:	3ccbf700 	.word	0x3ccbf700

0000a7f0 <radioCallback>:
{
    a7f0:	b570      	push	{r4, r5, r6, lr}
    a7f2:	b082      	sub	sp, #8
    a7f4:	0004      	movs	r4, r0
    a7f6:	000d      	movs	r5, r1
	callbackBackup = callback;
    a7f8:	4b3e      	ldr	r3, [pc, #248]	; (a8f4 <radioCallback+0x104>)
    a7fa:	7018      	strb	r0, [r3, #0]
	int16_t rssi_readVal=0;
    a7fc:	466b      	mov	r3, sp
    a7fe:	1c98      	adds	r0, r3, #2
    a800:	2300      	movs	r3, #0
    a802:	8003      	strh	r3, [r0, #0]
	Radio_ReadRssi(&rssi_readVal);
    a804:	4b3c      	ldr	r3, [pc, #240]	; (a8f8 <radioCallback+0x108>)
    a806:	4798      	blx	r3
	switch (callback)
    a808:	2c10      	cmp	r4, #16
    a80a:	d853      	bhi.n	a8b4 <radioCallback+0xc4>
    a80c:	00a4      	lsls	r4, r4, #2
    a80e:	4b3b      	ldr	r3, [pc, #236]	; (a8fc <radioCallback+0x10c>)
    a810:	591b      	ldr	r3, [r3, r4]
    a812:	469f      	mov	pc, r3
					if (RxBuffer[i].PayloadLen == 0)
    a814:	4b3a      	ldr	r3, [pc, #232]	; (a900 <radioCallback+0x110>)
    a816:	781a      	ldrb	r2, [r3, #0]
    a818:	2a00      	cmp	r2, #0
    a81a:	d00e      	beq.n	a83a <radioCallback+0x4a>
    a81c:	2302      	movs	r3, #2
    a81e:	33ff      	adds	r3, #255	; 0xff
    a820:	4a37      	ldr	r2, [pc, #220]	; (a900 <radioCallback+0x110>)
    a822:	5cd3      	ldrb	r3, [r2, r3]
    a824:	2b00      	cmp	r3, #0
    a826:	d04e      	beq.n	a8c6 <radioCallback+0xd6>
    a828:	4b36      	ldr	r3, [pc, #216]	; (a904 <radioCallback+0x114>)
    a82a:	5cd3      	ldrb	r3, [r2, r3]
    a82c:	2b00      	cmp	r3, #0
    a82e:	d04c      	beq.n	a8ca <radioCallback+0xda>
    a830:	4b35      	ldr	r3, [pc, #212]	; (a908 <radioCallback+0x118>)
    a832:	5cd3      	ldrb	r3, [r2, r3]
	uint8_t i,RxBank=0xFF;
    a834:	22ff      	movs	r2, #255	; 0xff
					if (RxBuffer[i].PayloadLen == 0)
    a836:	2b00      	cmp	r3, #0
    a838:	d043      	beq.n	a8c2 <radioCallback+0xd2>
				RxBuffer[RxBank].PayloadLen = callbackRx->RX.bufferLength;
    a83a:	0016      	movs	r6, r2
    a83c:	7a2c      	ldrb	r4, [r5, #8]
    a83e:	0213      	lsls	r3, r2, #8
    a840:	189a      	adds	r2, r3, r2
    a842:	4b2f      	ldr	r3, [pc, #188]	; (a900 <radioCallback+0x110>)
    a844:	54d4      	strb	r4, [r2, r3]
				if (RxBuffer[RxBank].PayloadLen < (RX_PACKET_SIZE - 4))			
    a846:	2cfa      	cmp	r4, #250	; 0xfa
    a848:	d80d      	bhi.n	a866 <radioCallback+0x76>
    a84a:	2300      	movs	r3, #0
						RxBuffer[RxBank].Payload[i] = callbackRx->RX.buffer[i];
    a84c:	0232      	lsls	r2, r6, #8
    a84e:	1992      	adds	r2, r2, r6
    a850:	482b      	ldr	r0, [pc, #172]	; (a900 <radioCallback+0x110>)
    a852:	1880      	adds	r0, r0, r2
    a854:	686a      	ldr	r2, [r5, #4]
    a856:	5cd1      	ldrb	r1, [r2, r3]
    a858:	18c2      	adds	r2, r0, r3
    a85a:	7091      	strb	r1, [r2, #2]
					for (i = 0; i <= callbackRx->RX.bufferLength; i++)
    a85c:	3301      	adds	r3, #1
    a85e:	b2db      	uxtb	r3, r3
    a860:	7a2a      	ldrb	r2, [r5, #8]
    a862:	429a      	cmp	r2, r3
    a864:	d2f6      	bcs.n	a854 <radioCallback+0x64>
				RxBuffer[RxBank].PayloadLen +=4;
    a866:	4b26      	ldr	r3, [pc, #152]	; (a900 <radioCallback+0x110>)
    a868:	0232      	lsls	r2, r6, #8
    a86a:	1992      	adds	r2, r2, r6
    a86c:	3404      	adds	r4, #4
    a86e:	54d4      	strb	r4, [r2, r3]
				rssi_readVal = radioConfiguration.packetRSSI;
    a870:	2156      	movs	r1, #86	; 0x56
    a872:	4826      	ldr	r0, [pc, #152]	; (a90c <radioCallback+0x11c>)
    a874:	5641      	ldrsb	r1, [r0, r1]
    a876:	4668      	mov	r0, sp
    a878:	8041      	strh	r1, [r0, #2]
				RxBuffer[RxBank].radioRSSI = rssi_readVal;						
    a87a:	189b      	adds	r3, r3, r2
    a87c:	7059      	strb	r1, [r3, #1]
				if(RxBuffer[RxBank].Payload[0] & 0x20)
    a87e:	789b      	ldrb	r3, [r3, #2]
    a880:	069b      	lsls	r3, r3, #26
    a882:	d524      	bpl.n	a8ce <radioCallback+0xde>
					RadioReceiveParam.action = RECEIVE_STOP;					
    a884:	a801      	add	r0, sp, #4
    a886:	2301      	movs	r3, #1
    a888:	7003      	strb	r3, [r0, #0]
					RadioReceiveParam.rxWindowSize = 0;
    a88a:	2300      	movs	r3, #0
    a88c:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&RadioReceiveParam);
    a88e:	4b20      	ldr	r3, [pc, #128]	; (a910 <radioCallback+0x120>)
    a890:	4798      	blx	r3
    a892:	e00f      	b.n	a8b4 <radioCallback+0xc4>
			if((!AckReqData)||(callbackRx->status != ERR_NONE))
    a894:	4b1f      	ldr	r3, [pc, #124]	; (a914 <radioCallback+0x124>)
    a896:	781b      	ldrb	r3, [r3, #0]
    a898:	2b00      	cmp	r3, #0
    a89a:	d002      	beq.n	a8a2 <radioCallback+0xb2>
    a89c:	782b      	ldrb	r3, [r5, #0]
    a89e:	2b00      	cmp	r3, #0
    a8a0:	d00a      	beq.n	a8b8 <radioCallback+0xc8>
				PHY_DataConf(callbackRx->status); // Need to convert LoRa status to MiWi status
    a8a2:	7828      	ldrb	r0, [r5, #0]
    a8a4:	4b1c      	ldr	r3, [pc, #112]	; (a918 <radioCallback+0x128>)
    a8a6:	4798      	blx	r3
			RadioReceiveParam.action = RECEIVE_START;
    a8a8:	a801      	add	r0, sp, #4
    a8aa:	2300      	movs	r3, #0
    a8ac:	7003      	strb	r3, [r0, #0]
			RadioReceiveParam.rxWindowSize = 0;
    a8ae:	8043      	strh	r3, [r0, #2]
			RADIO_Receive(&RadioReceiveParam);
    a8b0:	4b17      	ldr	r3, [pc, #92]	; (a910 <radioCallback+0x120>)
    a8b2:	4798      	blx	r3
}
    a8b4:	b002      	add	sp, #8
    a8b6:	bd70      	pop	{r4, r5, r6, pc}
				DataTxAckTimer.Val = MiWi_TickGet();
    a8b8:	4b18      	ldr	r3, [pc, #96]	; (a91c <radioCallback+0x12c>)
    a8ba:	4798      	blx	r3
    a8bc:	4b18      	ldr	r3, [pc, #96]	; (a920 <radioCallback+0x130>)
    a8be:	6018      	str	r0, [r3, #0]
    a8c0:	e7f2      	b.n	a8a8 <radioCallback+0xb8>
				for (i = 0; i < BANK_SIZE; i++)
    a8c2:	3afc      	subs	r2, #252	; 0xfc
    a8c4:	e7b9      	b.n	a83a <radioCallback+0x4a>
    a8c6:	2201      	movs	r2, #1
    a8c8:	e7b7      	b.n	a83a <radioCallback+0x4a>
    a8ca:	2202      	movs	r2, #2
    a8cc:	e7b5      	b.n	a83a <radioCallback+0x4a>
					RadioReceiveParam.action = RECEIVE_START;
    a8ce:	a801      	add	r0, sp, #4
    a8d0:	2300      	movs	r3, #0
    a8d2:	7003      	strb	r3, [r0, #0]
					RadioReceiveParam.rxWindowSize = 0;
    a8d4:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&RadioReceiveParam);	
    a8d6:	4b0e      	ldr	r3, [pc, #56]	; (a910 <radioCallback+0x120>)
    a8d8:	4798      	blx	r3
    a8da:	e7eb      	b.n	a8b4 <radioCallback+0xc4>
				RadioReceiveParam.action = RECEIVE_START;
    a8dc:	ac01      	add	r4, sp, #4
    a8de:	2300      	movs	r3, #0
    a8e0:	7023      	strb	r3, [r4, #0]
				RadioReceiveParam.rxWindowSize = 0;
    a8e2:	8063      	strh	r3, [r4, #2]
				PHY_DataConf(FAILURE);											
    a8e4:	2001      	movs	r0, #1
    a8e6:	4b0c      	ldr	r3, [pc, #48]	; (a918 <radioCallback+0x128>)
    a8e8:	4798      	blx	r3
				RADIO_Receive(&RadioReceiveParam);
    a8ea:	0020      	movs	r0, r4
    a8ec:	4b08      	ldr	r3, [pc, #32]	; (a910 <radioCallback+0x120>)
    a8ee:	4798      	blx	r3
}
    a8f0:	e7e0      	b.n	a8b4 <radioCallback+0xc4>
    a8f2:	46c0      	nop			; (mov r8, r8)
    a8f4:	200023f3 	.word	0x200023f3
    a8f8:	0000d53d 	.word	0x0000d53d
    a8fc:	00017a08 	.word	0x00017a08
    a900:	200023fc 	.word	0x200023fc
    a904:	00000202 	.word	0x00000202
    a908:	00000303 	.word	0x00000303
    a90c:	20002cf4 	.word	0x20002cf4
    a910:	0000ef35 	.word	0x0000ef35
    a914:	20000483 	.word	0x20000483
    a918:	00009f01 	.word	0x00009f01
    a91c:	0000c111 	.word	0x0000c111
    a920:	20002b04 	.word	0x20002b04

0000a924 <PHY_Init>:
{
    a924:	b510      	push	{r4, lr}
    HAL_RadioInit();
    a926:	4b06      	ldr	r3, [pc, #24]	; (a940 <PHY_Init+0x1c>)
    a928:	4798      	blx	r3
    AESInit();	
    a92a:	4b06      	ldr	r3, [pc, #24]	; (a944 <PHY_Init+0x20>)
    a92c:	4798      	blx	r3
	RADIO_Init();
    a92e:	4b06      	ldr	r3, [pc, #24]	; (a948 <PHY_Init+0x24>)
    a930:	4798      	blx	r3
	RADIO_SetAttr(RADIO_CALLBACK, (void *)&radioCallback);
    a932:	4906      	ldr	r1, [pc, #24]	; (a94c <PHY_Init+0x28>)
    a934:	201a      	movs	r0, #26
    a936:	4b06      	ldr	r3, [pc, #24]	; (a950 <PHY_Init+0x2c>)
    a938:	4798      	blx	r3
   RADIO_InitDefaultAttributes();				
    a93a:	4b06      	ldr	r3, [pc, #24]	; (a954 <PHY_Init+0x30>)
    a93c:	4798      	blx	r3
}
    a93e:	bd10      	pop	{r4, pc}
    a940:	0000c4c5 	.word	0x0000c4c5
    a944:	0000ca29 	.word	0x0000ca29
    a948:	0000df2d 	.word	0x0000df2d
    a94c:	0000a7f1 	.word	0x0000a7f1
    a950:	0000dd11 	.word	0x0000dd11
    a954:	0000ed41 	.word	0x0000ed41

0000a958 <PHY_SetRxState>:
{
    a958:	b510      	push	{r4, lr}

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
	RADIO_RxHandler();
    a95a:	4b01      	ldr	r3, [pc, #4]	; (a960 <PHY_SetRxState+0x8>)
    a95c:	4798      	blx	r3
}
    a95e:	bd10      	pop	{r4, pc}
    a960:	0000e875 	.word	0x0000e875

0000a964 <PHY_SetPanId>:
{
    a964:	b082      	sub	sp, #8
	DevPanId[0]=d[0];
    a966:	b2c2      	uxtb	r2, r0
    a968:	4b02      	ldr	r3, [pc, #8]	; (a974 <PHY_SetPanId+0x10>)
    a96a:	701a      	strb	r2, [r3, #0]
	DevPanId[1]=d[1];
    a96c:	0a00      	lsrs	r0, r0, #8
    a96e:	7058      	strb	r0, [r3, #1]
}
    a970:	b002      	add	sp, #8
    a972:	4770      	bx	lr
    a974:	20002800 	.word	0x20002800

0000a978 <PHY_SetShortAddr>:
{
    a978:	b082      	sub	sp, #8
	DevShortAddress[0]=d[0];
    a97a:	b2c2      	uxtb	r2, r0
    a97c:	4b02      	ldr	r3, [pc, #8]	; (a988 <PHY_SetShortAddr+0x10>)
    a97e:	701a      	strb	r2, [r3, #0]
	DevShortAddress[1]=d[1];
    a980:	0a00      	lsrs	r0, r0, #8
    a982:	7058      	strb	r0, [r3, #1]
}
    a984:	b002      	add	sp, #8
    a986:	4770      	bx	lr
    a988:	20002804 	.word	0x20002804

0000a98c <PHY_Wakeup>:
{
    a98c:	b510      	push	{r4, lr}
	if (PHY_STATE_SLEEP == phyState)
    a98e:	4b0c      	ldr	r3, [pc, #48]	; (a9c0 <PHY_Wakeup+0x34>)
    a990:	781b      	ldrb	r3, [r3, #0]
    a992:	2b02      	cmp	r3, #2
    a994:	d000      	beq.n	a998 <PHY_Wakeup+0xc>
}
    a996:	bd10      	pop	{r4, pc}
		HAL_TCXOPowerOn();
    a998:	4b0a      	ldr	r3, [pc, #40]	; (a9c4 <PHY_Wakeup+0x38>)
    a99a:	4798      	blx	r3
		HAL_RadioInit();
    a99c:	4b0a      	ldr	r3, [pc, #40]	; (a9c8 <PHY_Wakeup+0x3c>)
    a99e:	4798      	blx	r3
		RADIO_Reset();
    a9a0:	4b0a      	ldr	r3, [pc, #40]	; (a9cc <PHY_Wakeup+0x40>)
    a9a2:	4798      	blx	r3
		Radio_WriteMode(MODE_STANDBY, radioConfiguration.modulation, 0);
    a9a4:	2334      	movs	r3, #52	; 0x34
    a9a6:	4a0a      	ldr	r2, [pc, #40]	; (a9d0 <PHY_Wakeup+0x44>)
    a9a8:	5cd1      	ldrb	r1, [r2, r3]
    a9aa:	2200      	movs	r2, #0
    a9ac:	2001      	movs	r0, #1
    a9ae:	4b09      	ldr	r3, [pc, #36]	; (a9d4 <PHY_Wakeup+0x48>)
    a9b0:	4798      	blx	r3
	RADIO_RxHandler();
    a9b2:	4b09      	ldr	r3, [pc, #36]	; (a9d8 <PHY_Wakeup+0x4c>)
    a9b4:	4798      	blx	r3
	 	phyState = PHY_STATE_IDLE;
    a9b6:	2201      	movs	r2, #1
    a9b8:	4b01      	ldr	r3, [pc, #4]	; (a9c0 <PHY_Wakeup+0x34>)
    a9ba:	701a      	strb	r2, [r3, #0]
}
    a9bc:	e7eb      	b.n	a996 <PHY_Wakeup+0xa>
    a9be:	46c0      	nop			; (mov r8, r8)
    a9c0:	20000495 	.word	0x20000495
    a9c4:	0000c7ed 	.word	0x0000c7ed
    a9c8:	0000c4c5 	.word	0x0000c4c5
    a9cc:	0000c67d 	.word	0x0000c67d
    a9d0:	20002cf4 	.word	0x20002cf4
    a9d4:	0000d379 	.word	0x0000d379
    a9d8:	0000e875 	.word	0x0000e875

0000a9dc <PHY_SetChannel>:
{
    a9dc:	b510      	push	{r4, lr}
	phyChannel = channel;
    a9de:	4b06      	ldr	r3, [pc, #24]	; (a9f8 <PHY_SetChannel+0x1c>)
    a9e0:	7018      	strb	r0, [r3, #0]
	if (PHY_STATE_SLEEP == phyState)
    a9e2:	4b06      	ldr	r3, [pc, #24]	; (a9fc <PHY_SetChannel+0x20>)
    a9e4:	781b      	ldrb	r3, [r3, #0]
    a9e6:	2b02      	cmp	r3, #2
    a9e8:	d002      	beq.n	a9f0 <PHY_SetChannel+0x14>
	phySetChannel();
    a9ea:	4b05      	ldr	r3, [pc, #20]	; (aa00 <PHY_SetChannel+0x24>)
    a9ec:	4798      	blx	r3
}
    a9ee:	bd10      	pop	{r4, pc}
		PHY_Wakeup();
    a9f0:	4b04      	ldr	r3, [pc, #16]	; (aa04 <PHY_SetChannel+0x28>)
    a9f2:	4798      	blx	r3
    a9f4:	e7f9      	b.n	a9ea <PHY_SetChannel+0xe>
    a9f6:	46c0      	nop			; (mov r8, r8)
    a9f8:	20000494 	.word	0x20000494
    a9fc:	20000495 	.word	0x20000495
    aa00:	0000a6b9 	.word	0x0000a6b9
    aa04:	0000a98d 	.word	0x0000a98d

0000aa08 <PHY_DataReq>:
{
    aa08:	b500      	push	{lr}
    aa0a:	b085      	sub	sp, #20
		RadioTransmitParam.bufferLen = data[0];
    aa0c:	7803      	ldrb	r3, [r0, #0]
    aa0e:	aa02      	add	r2, sp, #8
    aa10:	7013      	strb	r3, [r2, #0]
		for (count = 0; count < data[0]; count++)
    aa12:	2b00      	cmp	r3, #0
    aa14:	d009      	beq.n	aa2a <PHY_DataReq+0x22>
    aa16:	2300      	movs	r3, #0
			DataRequestBuffer[count] = data[1+count];
    aa18:	4912      	ldr	r1, [pc, #72]	; (aa64 <PHY_DataReq+0x5c>)
    aa1a:	18c2      	adds	r2, r0, r3
    aa1c:	7852      	ldrb	r2, [r2, #1]
    aa1e:	54ca      	strb	r2, [r1, r3]
		for (count = 0; count < data[0]; count++)
    aa20:	3301      	adds	r3, #1
    aa22:	b2db      	uxtb	r3, r3
    aa24:	7802      	ldrb	r2, [r0, #0]
    aa26:	429a      	cmp	r2, r3
    aa28:	d8f7      	bhi.n	aa1a <PHY_DataReq+0x12>
		RadioTransmitParam.bufferPtr = (uint8_t *)&DataRequestBuffer;
    aa2a:	4b0e      	ldr	r3, [pc, #56]	; (aa64 <PHY_DataReq+0x5c>)
    aa2c:	9303      	str	r3, [sp, #12]
		RadioSetState(RADIO_STATE_IDLE);
    aa2e:	2001      	movs	r0, #1
    aa30:	4b0d      	ldr	r3, [pc, #52]	; (aa68 <PHY_DataReq+0x60>)
    aa32:	4798      	blx	r3
		phySetChannel();
    aa34:	4b0d      	ldr	r3, [pc, #52]	; (aa6c <PHY_DataReq+0x64>)
    aa36:	4798      	blx	r3
		localRadioLBTParams.lbtScanPeriod = 15;
    aa38:	230f      	movs	r3, #15
    aa3a:	466a      	mov	r2, sp
    aa3c:	8013      	strh	r3, [r2, #0]
		localRadioLBTParams.lbtThreshold = 255;
    aa3e:	33f0      	adds	r3, #240	; 0xf0
    aa40:	8053      	strh	r3, [r2, #2]
		localRadioLBTParams.lbtNumOfSamples = 5;
    aa42:	3bfa      	subs	r3, #250	; 0xfa
    aa44:	7113      	strb	r3, [r2, #4]
		localRadioLBTParams.lbtTransmitOn = 1;
    aa46:	3b04      	subs	r3, #4
    aa48:	7153      	strb	r3, [r2, #5]
		status = RADIO_SetAttr(RADIO_LBT_PARAMS, &localRadioLBTParams);
    aa4a:	4669      	mov	r1, sp
    aa4c:	201d      	movs	r0, #29
    aa4e:	4b08      	ldr	r3, [pc, #32]	; (aa70 <PHY_DataReq+0x68>)
    aa50:	4798      	blx	r3
		status = RADIO_Transmit (&RadioTransmitParam);
    aa52:	a802      	add	r0, sp, #8
    aa54:	4b07      	ldr	r3, [pc, #28]	; (aa74 <PHY_DataReq+0x6c>)
    aa56:	4798      	blx	r3
		return (!status);							
    aa58:	4243      	negs	r3, r0
    aa5a:	4158      	adcs	r0, r3
    aa5c:	b2c0      	uxtb	r0, r0
}
    aa5e:	b005      	add	sp, #20
    aa60:	bd00      	pop	{pc}
    aa62:	46c0      	nop			; (mov r8, r8)
    aa64:	200022f4 	.word	0x200022f4
    aa68:	0000e639 	.word	0x0000e639
    aa6c:	0000a6b9 	.word	0x0000a6b9
    aa70:	0000dd11 	.word	0x0000dd11
    aa74:	0000e661 	.word	0x0000e661

0000aa78 <PHY_RandomReq>:
{
    aa78:	b510      	push	{r4, lr}
	rnd = RADIO_ReadRandom();
    aa7a:	4b03      	ldr	r3, [pc, #12]	; (aa88 <PHY_RandomReq+0x10>)
    aa7c:	4798      	blx	r3
    aa7e:	0004      	movs	r4, r0
	RADIO_RxHandler();
    aa80:	4b02      	ldr	r3, [pc, #8]	; (aa8c <PHY_RandomReq+0x14>)
    aa82:	4798      	blx	r3
}
    aa84:	0020      	movs	r0, r4
    aa86:	bd10      	pop	{r4, pc}
    aa88:	0000d4ad 	.word	0x0000d4ad
    aa8c:	0000e875 	.word	0x0000e875

0000aa90 <PHY_EncryptReq>:
{	
    aa90:	b510      	push	{r4, lr}
	AESEncode(text,key);
    aa92:	4b01      	ldr	r3, [pc, #4]	; (aa98 <PHY_EncryptReq+0x8>)
    aa94:	4798      	blx	r3
}
    aa96:	bd10      	pop	{r4, pc}
    aa98:	0000c94d 	.word	0x0000c94d

0000aa9c <PHY_SetIEEEAddr>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_SetIEEEAddr(uint8_t *ieee_addr)
{
    aa9c:	2300      	movs	r3, #0
	uint8_t *ptr_to_reg = ieee_addr;

	for (uint8_t i = 0; i < 8; i++)
	{
		DevIEEEaddr[i] = ptr_to_reg[i];
    aa9e:	4903      	ldr	r1, [pc, #12]	; (aaac <PHY_SetIEEEAddr+0x10>)
    aaa0:	5cc2      	ldrb	r2, [r0, r3]
    aaa2:	54ca      	strb	r2, [r1, r3]
    aaa4:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < 8; i++)
    aaa6:	2b08      	cmp	r3, #8
    aaa8:	d1fa      	bne.n	aaa0 <PHY_SetIEEEAddr+0x4>
	}
}
    aaaa:	4770      	bx	lr
    aaac:	200023f4 	.word	0x200023f4

0000aab0 <PHY_TaskHandler>:
    if (PHY_STATE_SLEEP == phyState)
    {
        return;
    }
	// Handled in DIO interrupts 
}
    aab0:	4770      	bx	lr
    aab2:	Address 0x0000aab2 is out of bounds.


0000aab4 <CommandConfCallback>:

bool CheckForData(void);

/************************ FUNCTIONS ********************************/
void CommandConfCallback(uint8_t msgConfHandle, miwi_status_t status, uint8_t* msgPointer)
{
    aab4:	b510      	push	{r4, lr}
	#if defined (ENABLE_CONSOLE)
		//printf("\r\n  Command Conf : Handle %d & Status %02X  ",msgConfHandle , status );
	#endif
    MiMem_Free(msgPointer);
    aab6:	0010      	movs	r0, r2
    aab8:	4b01      	ldr	r3, [pc, #4]	; (aac0 <CommandConfCallback+0xc>)
    aaba:	4798      	blx	r3
}
    aabc:	bd10      	pop	{r4, pc}
    aabe:	46c0      	nop			; (mov r8, r8)
    aac0:	0000bf8d 	.word	0x0000bf8d

0000aac4 <Total_Connections>:
{
    aac4:	2200      	movs	r2, #0
    uint8_t count=0 , i;
    aac6:	2000      	movs	r0, #0
        if (ConnectionTable[i].status.bits.isValid)
    aac8:	4907      	ldr	r1, [pc, #28]	; (aae8 <Total_Connections+0x24>)
    aaca:	e002      	b.n	aad2 <Total_Connections+0xe>
    aacc:	3201      	adds	r2, #1
    for (i=0;i<CONNECTION_SIZE;i++)
    aace:	2a05      	cmp	r2, #5
    aad0:	d009      	beq.n	aae6 <Total_Connections+0x22>
        if (ConnectionTable[i].status.bits.isValid)
    aad2:	0093      	lsls	r3, r2, #2
    aad4:	189b      	adds	r3, r3, r2
    aad6:	005b      	lsls	r3, r3, #1
    aad8:	18cb      	adds	r3, r1, r3
    aada:	7a1b      	ldrb	r3, [r3, #8]
    aadc:	09db      	lsrs	r3, r3, #7
    aade:	d0f5      	beq.n	aacc <Total_Connections+0x8>
            count++;
    aae0:	3001      	adds	r0, #1
    aae2:	b2c0      	uxtb	r0, r0
    aae4:	e7f2      	b.n	aacc <Total_Connections+0x8>
}
    aae6:	4770      	bx	lr
    aae8:	2000280c 	.word	0x2000280c

0000aaec <IndirectPacket>:
							INPUT uint8_t* msgPtr,
							INPUT uint8_t msghandle,
							INPUT bool ackReq,
                            DataConf_callback_t ConfCallback)
    #endif                            
    { 
    aaec:	b5f0      	push	{r4, r5, r6, r7, lr}
    aaee:	46de      	mov	lr, fp
    aaf0:	4657      	mov	r7, sl
    aaf2:	464e      	mov	r6, r9
    aaf4:	4645      	mov	r5, r8
    aaf6:	b5e0      	push	{r5, r6, r7, lr}
    aaf8:	b083      	sub	sp, #12
    aafa:	466c      	mov	r4, sp
    aafc:	8061      	strh	r1, [r4, #2]
    aafe:	ac0c      	add	r4, sp, #48	; 0x30
    ab00:	7827      	ldrb	r7, [r4, #0]
    ab02:	ac0d      	add	r4, sp, #52	; 0x34
    ab04:	7826      	ldrb	r6, [r4, #0]
    ab06:	ac0f      	add	r4, sp, #60	; 0x3c
    ab08:	7825      	ldrb	r5, [r4, #0]
    ab0a:	ac10      	add	r4, sp, #64	; 0x40
    ab0c:	7821      	ldrb	r1, [r4, #0]
    ab0e:	4688      	mov	r8, r1
        uint8_t i;
        
        #ifndef ENABLE_BROADCAST
            if( Broadcast )
    ab10:	2800      	cmp	r0, #0
    ab12:	d000      	beq.n	ab16 <IndirectPacket+0x2a>
    ab14:	e07e      	b.n	ac14 <IndirectPacket+0x128>

        // loop through the available indirect message buffer and locate
        // the empty message slot
        for(i = 0; i < INDIRECT_MESSAGE_SIZE; i++)
        {
            if( indirectMessages[i].flags.bits.isValid == 0 )
    ab16:	4c40      	ldr	r4, [pc, #256]	; (ac18 <IndirectPacket+0x12c>)
    ab18:	7ba4      	ldrb	r4, [r4, #14]
    ab1a:	07e1      	lsls	r1, r4, #31
    ab1c:	d400      	bmi.n	ab20 <IndirectPacket+0x34>
    ab1e:	e077      	b.n	ac10 <IndirectPacket+0x124>
    ab20:	2491      	movs	r4, #145	; 0x91
    ab22:	0064      	lsls	r4, r4, #1
    ab24:	493c      	ldr	r1, [pc, #240]	; (ac18 <IndirectPacket+0x12c>)
    ab26:	5d0c      	ldrb	r4, [r1, r4]
    ab28:	07e1      	lsls	r1, r4, #31
    ab2a:	d506      	bpl.n	ab3a <IndirectPacket+0x4e>
				indirectMessages[i].TickStart.Val = MiWi_TickGet();
                return true;
            }
        }
        return false;
    }
    ab2c:	b003      	add	sp, #12
    ab2e:	bc3c      	pop	{r2, r3, r4, r5}
    ab30:	4690      	mov	r8, r2
    ab32:	4699      	mov	r9, r3
    ab34:	46a2      	mov	sl, r4
    ab36:	46ab      	mov	fp, r5
    ab38:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( indirectMessages[i].flags.bits.isValid == 0 )
    ab3a:	2401      	movs	r4, #1
                indirectMessages[i].flags.bits.isValid          = true;
    ab3c:	208a      	movs	r0, #138	; 0x8a
    ab3e:	0040      	lsls	r0, r0, #1
    ab40:	4360      	muls	r0, r4
    ab42:	4935      	ldr	r1, [pc, #212]	; (ac18 <IndirectPacket+0x12c>)
    ab44:	468c      	mov	ip, r1
    ab46:	4484      	add	ip, r0
    ab48:	2108      	movs	r1, #8
    ab4a:	4461      	add	r1, ip
    ab4c:	4689      	mov	r9, r1
    ab4e:	7989      	ldrb	r1, [r1, #6]
    ab50:	2001      	movs	r0, #1
    ab52:	4301      	orrs	r1, r0
    ab54:	468a      	mov	sl, r1
                indirectMessages[i].flags.bits.isCommand        = isCommand;
    ab56:	2001      	movs	r0, #1
    ab58:	4003      	ands	r3, r0
    ab5a:	0099      	lsls	r1, r3, #2
    ab5c:	9101      	str	r1, [sp, #4]
    ab5e:	21fd      	movs	r1, #253	; 0xfd
    ab60:	468b      	mov	fp, r1
    ab62:	4651      	mov	r1, sl
    ab64:	465b      	mov	r3, fp
    ab66:	4019      	ands	r1, r3
    ab68:	3bf9      	subs	r3, #249	; 0xf9
    ab6a:	4399      	bics	r1, r3
                indirectMessages[i].flags.bits.isSecured        = SecurityEnabled;
    ab6c:	4007      	ands	r7, r0
    ab6e:	00ff      	lsls	r7, r7, #3
    ab70:	000b      	movs	r3, r1
    ab72:	9901      	ldr	r1, [sp, #4]
    ab74:	4319      	orrs	r1, r3
    ab76:	000b      	movs	r3, r1
    ab78:	2108      	movs	r1, #8
    ab7a:	438b      	bics	r3, r1
				indirectMessages[i].flags.bits.ackReq           = ackReq;
    ab7c:	4641      	mov	r1, r8
    ab7e:	4008      	ands	r0, r1
    ab80:	0101      	lsls	r1, r0, #4
    ab82:	433b      	orrs	r3, r7
    ab84:	0018      	movs	r0, r3
    ab86:	2310      	movs	r3, #16
    ab88:	4398      	bics	r0, r3
    ab8a:	4308      	orrs	r0, r1
    ab8c:	464b      	mov	r3, r9
    ab8e:	7198      	strb	r0, [r3, #6]
                    indirectMessages[i].DestPANID.Val           = DestinationPANID.Val;
    ab90:	4663      	mov	r3, ip
    ab92:	4669      	mov	r1, sp
    ab94:	8849      	ldrh	r1, [r1, #2]
    ab96:	8099      	strh	r1, [r3, #4]
                if( DestinationAddress != NULL )
    ab98:	2a00      	cmp	r2, #0
    ab9a:	d00d      	beq.n	abb8 <IndirectPacket+0xcc>
    ab9c:	0013      	movs	r3, r2
    ab9e:	218a      	movs	r1, #138	; 0x8a
    aba0:	0049      	lsls	r1, r1, #1
    aba2:	4361      	muls	r1, r4
    aba4:	3106      	adds	r1, #6
    aba6:	481c      	ldr	r0, [pc, #112]	; (ac18 <IndirectPacket+0x12c>)
    aba8:	1809      	adds	r1, r1, r0
    abaa:	3208      	adds	r2, #8
                        indirectMessages[i].DestAddress.DestLongAddress[j] = DestinationAddress[j];
    abac:	7818      	ldrb	r0, [r3, #0]
    abae:	7008      	strb	r0, [r1, #0]
    abb0:	3301      	adds	r3, #1
    abb2:	3101      	adds	r1, #1
                    for(j = 0; j < MY_ADDRESS_LENGTH; j++)
    abb4:	4293      	cmp	r3, r2
    abb6:	d1f9      	bne.n	abac <IndirectPacket+0xc0>
                indirectMessages[i].PayLoadSize = msgLen;
    abb8:	228a      	movs	r2, #138	; 0x8a
    abba:	0052      	lsls	r2, r2, #1
    abbc:	4362      	muls	r2, r4
    abbe:	4b16      	ldr	r3, [pc, #88]	; (ac18 <IndirectPacket+0x12c>)
    abc0:	189b      	adds	r3, r3, r2
    abc2:	73de      	strb	r6, [r3, #15]
                for(j = 0; j < msgLen; j++)
    abc4:	2e00      	cmp	r6, #0
    abc6:	d011      	beq.n	abec <IndirectPacket+0x100>
    abc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    abca:	228a      	movs	r2, #138	; 0x8a
    abcc:	0052      	lsls	r2, r2, #1
    abce:	4362      	muls	r2, r4
    abd0:	3210      	adds	r2, #16
    abd2:	4911      	ldr	r1, [pc, #68]	; (ac18 <IndirectPacket+0x12c>)
    abd4:	1852      	adds	r2, r2, r1
    abd6:	3e01      	subs	r6, #1
    abd8:	b2f0      	uxtb	r0, r6
    abda:	3001      	adds	r0, #1
    abdc:	469c      	mov	ip, r3
    abde:	4460      	add	r0, ip
                    indirectMessages[i].PayLoad[j] = msgPtr[j];
    abe0:	7819      	ldrb	r1, [r3, #0]
    abe2:	7011      	strb	r1, [r2, #0]
    abe4:	3301      	adds	r3, #1
    abe6:	3201      	adds	r2, #1
                for(j = 0; j < msgLen; j++)
    abe8:	4283      	cmp	r3, r0
    abea:	d1f9      	bne.n	abe0 <IndirectPacket+0xf4>
                indirectMessages[i].indirectDataHandle = msghandle;
    abec:	4e0a      	ldr	r6, [pc, #40]	; (ac18 <IndirectPacket+0x12c>)
    abee:	238a      	movs	r3, #138	; 0x8a
    abf0:	005b      	lsls	r3, r3, #1
    abf2:	435c      	muls	r4, r3
    abf4:	1933      	adds	r3, r6, r4
    abf6:	001a      	movs	r2, r3
    abf8:	3210      	adds	r2, #16
    abfa:	32ff      	adds	r2, #255	; 0xff
    abfc:	7015      	strb	r5, [r2, #0]
				indirectMessages[i].indirectConfCallback = ConfCallback;
    abfe:	3311      	adds	r3, #17
    ac00:	33ff      	adds	r3, #255	; 0xff
    ac02:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ac04:	601a      	str	r2, [r3, #0]
				indirectMessages[i].TickStart.Val = MiWi_TickGet();
    ac06:	4b05      	ldr	r3, [pc, #20]	; (ac1c <IndirectPacket+0x130>)
    ac08:	4798      	blx	r3
    ac0a:	51a0      	str	r0, [r4, r6]
                return true;
    ac0c:	2001      	movs	r0, #1
    ac0e:	e78d      	b.n	ab2c <IndirectPacket+0x40>
            if( indirectMessages[i].flags.bits.isValid == 0 )
    ac10:	2400      	movs	r4, #0
    ac12:	e793      	b.n	ab3c <IndirectPacket+0x50>
                return false;
    ac14:	2000      	movs	r0, #0
    ac16:	e789      	b.n	ab2c <IndirectPacket+0x40>
    ac18:	20002884 	.word	0x20002884
    ac1c:	0000c111 	.word	0x0000c111

0000ac20 <SendPacket>:
                    INPUT uint8_t* msgPtr,
                    INPUT uint8_t msghandle,
					INPUT bool ackReq,
                    INPUT DataConf_callback_t ConfCallback)
#endif                                        
{ 
    ac20:	b5f0      	push	{r4, r5, r6, r7, lr}
    ac22:	46ce      	mov	lr, r9
    ac24:	4647      	mov	r7, r8
    ac26:	b580      	push	{r7, lr}
    ac28:	b08b      	sub	sp, #44	; 0x2c
    ac2a:	0005      	movs	r5, r0
    ac2c:	468c      	mov	ip, r1
    ac2e:	9205      	str	r2, [sp, #20]
    ac30:	a812      	add	r0, sp, #72	; 0x48
    ac32:	7800      	ldrb	r0, [r0, #0]
    ac34:	ac13      	add	r4, sp, #76	; 0x4c
    ac36:	7826      	ldrb	r6, [r4, #0]
    ac38:	ac15      	add	r4, sp, #84	; 0x54
    ac3a:	7827      	ldrb	r7, [r4, #0]
    ac3c:	ac16      	add	r4, sp, #88	; 0x58
    ac3e:	7822      	ldrb	r2, [r4, #0]
    MAC_TRANS_PARAM tParam;
    bool status;

    tParam.flags.Val = 0;
    ac40:	2400      	movs	r4, #0
    ac42:	46a0      	mov	r8, r4
    ac44:	ac07      	add	r4, sp, #28
    ac46:	4641      	mov	r1, r8
    ac48:	7021      	strb	r1, [r4, #0]
    //tParam.flags.bits.packetType = (isCommand) ? PACKET_TYPE_COMMAND : PACKET_TYPE_DATA;
	if(isCommand)
    ac4a:	2b00      	cmp	r3, #0
    ac4c:	d043      	beq.n	acd6 <SendPacket+0xb6>
		tParam.flags.bits.packetType = PACKET_TYPE_COMMAND;
    ac4e:	0023      	movs	r3, r4
    ac50:	b2cc      	uxtb	r4, r1
    ac52:	2103      	movs	r1, #3
    ac54:	438c      	bics	r4, r1
    ac56:	2101      	movs	r1, #1
    ac58:	4688      	mov	r8, r1
    ac5a:	4641      	mov	r1, r8
    ac5c:	430c      	orrs	r4, r1
    ac5e:	701c      	strb	r4, [r3, #0]
	else
		tParam.flags.bits.packetType = PACKET_TYPE_DATA;
   // tParam.flags.bits.ackReq = (Broadcast) ? 0 : ackReq;
   if(Broadcast)
    ac60:	2d00      	cmp	r5, #0
    ac62:	d13e      	bne.n	ace2 <SendPacket+0xc2>
   {
	tParam.flags.bits.ackReq = 0;
   }
   else
   {
	   tParam.flags.bits.ackReq = ackReq;
    ac64:	ac07      	add	r4, sp, #28
    ac66:	2301      	movs	r3, #1
    ac68:	4013      	ands	r3, r2
    ac6a:	015a      	lsls	r2, r3, #5
    ac6c:	7823      	ldrb	r3, [r4, #0]
    ac6e:	2120      	movs	r1, #32
    ac70:	438b      	bics	r3, r1
    ac72:	4313      	orrs	r3, r2
    ac74:	7023      	strb	r3, [r4, #0]
   }
    tParam.flags.bits.broadcast = Broadcast;
    ac76:	ac07      	add	r4, sp, #28
    ac78:	2201      	movs	r2, #1
    ac7a:	0013      	movs	r3, r2
    ac7c:	402b      	ands	r3, r5
    ac7e:	009b      	lsls	r3, r3, #2
    ac80:	4698      	mov	r8, r3
    ac82:	7823      	ldrb	r3, [r4, #0]
    ac84:	2104      	movs	r1, #4
    ac86:	438b      	bics	r3, r1
    tParam.flags.bits.secEn = SecurityEnabled;
    ac88:	4010      	ands	r0, r2
    ac8a:	00c0      	lsls	r0, r0, #3
    ac8c:	4641      	mov	r1, r8
    ac8e:	430b      	orrs	r3, r1
    ac90:	2108      	movs	r1, #8
    ac92:	438b      	bics	r3, r1
    #if defined(IEEE_802_15_4)
        tParam.altSrcAddr = 0;
    ac94:	2100      	movs	r1, #0
    ac96:	7261      	strb	r1, [r4, #9]
        tParam.altDestAddr = (Broadcast) ? true : false;
    ac98:	7225      	strb	r5, [r4, #8]
    #endif
    
    #if defined(INFER_DEST_ADDRESS)
        tParam.flags.bits.destPrsnt = 0;
    #else
        tParam.flags.bits.destPrsnt = (Broadcast) ? 0:1;
    ac9a:	2101      	movs	r1, #1
    ac9c:	4688      	mov	r8, r1
    ac9e:	4641      	mov	r1, r8
    aca0:	404d      	eors	r5, r1
    aca2:	4015      	ands	r5, r2
    aca4:	01ad      	lsls	r5, r5, #6
    aca6:	4318      	orrs	r0, r3
    aca8:	2340      	movs	r3, #64	; 0x40
    acaa:	4398      	bics	r0, r3
        else
        {
            tParam.flags.bits.sourcePrsnt = 0;
        }
    #else
        tParam.flags.bits.sourcePrsnt = 1;
    acac:	4328      	orrs	r0, r5
    acae:	3bc0      	subs	r3, #192	; 0xc0
    acb0:	4318      	orrs	r0, r3
    acb2:	7020      	strb	r0, [r4, #0]
    #endif
    
    tParam.DestAddress = DestinationAddress;

    #if defined(IEEE_802_15_4)
        tParam.DestPANID.Val = DestinationPANID.Val;
    acb4:	4663      	mov	r3, ip
    acb6:	8163      	strh	r3, [r4, #10]
    #endif

    status = MiMAC_SendPacket(tParam, msgPtr, msgLen, msghandle, ConfCallback);
    acb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    acba:	9302      	str	r3, [sp, #8]
    acbc:	9701      	str	r7, [sp, #4]
    acbe:	9600      	str	r6, [sp, #0]
    acc0:	9b14      	ldr	r3, [sp, #80]	; 0x50
    acc2:	9807      	ldr	r0, [sp, #28]
    acc4:	9905      	ldr	r1, [sp, #20]
    acc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    acc8:	4c09      	ldr	r4, [pc, #36]	; (acf0 <SendPacket+0xd0>)
    acca:	47a0      	blx	r4
    
    return status;
}
    accc:	b00b      	add	sp, #44	; 0x2c
    acce:	bc0c      	pop	{r2, r3}
    acd0:	4690      	mov	r8, r2
    acd2:	4699      	mov	r9, r3
    acd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tParam.flags.bits.packetType = PACKET_TYPE_DATA;
    acd6:	ab07      	add	r3, sp, #28
    acd8:	781c      	ldrb	r4, [r3, #0]
    acda:	2103      	movs	r1, #3
    acdc:	438c      	bics	r4, r1
    acde:	701c      	strb	r4, [r3, #0]
    ace0:	e7be      	b.n	ac60 <SendPacket+0x40>
	tParam.flags.bits.ackReq = 0;
    ace2:	ac07      	add	r4, sp, #28
    ace4:	7823      	ldrb	r3, [r4, #0]
    ace6:	2220      	movs	r2, #32
    ace8:	4393      	bics	r3, r2
    acea:	7023      	strb	r3, [r4, #0]
    acec:	e7c3      	b.n	ac76 <SendPacket+0x56>
    acee:	46c0      	nop			; (mov r8, r8)
    acf0:	00009b55 	.word	0x00009b55

0000acf4 <isSameAddress>:
 *
 * Side Effects:    
 *
 ********************************************************************/
bool    isSameAddress(INPUT uint8_t *Address1, INPUT uint8_t *Address2)
{
    acf4:	b510      	push	{r4, lr}
    uint8_t i;
    
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    {
        if( Address1[i] != Address2[i] )
    acf6:	7802      	ldrb	r2, [r0, #0]
    acf8:	780b      	ldrb	r3, [r1, #0]
    acfa:	429a      	cmp	r2, r3
    acfc:	d109      	bne.n	ad12 <isSameAddress+0x1e>
    acfe:	2301      	movs	r3, #1
    ad00:	5cc4      	ldrb	r4, [r0, r3]
    ad02:	5cca      	ldrb	r2, [r1, r3]
    ad04:	4294      	cmp	r4, r2
    ad06:	d106      	bne.n	ad16 <isSameAddress+0x22>
    ad08:	3301      	adds	r3, #1
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    ad0a:	2b08      	cmp	r3, #8
    ad0c:	d1f8      	bne.n	ad00 <isSameAddress+0xc>
        {
            return false;
        }
    }
    return true;
    ad0e:	2001      	movs	r0, #1
}
    ad10:	bd10      	pop	{r4, pc}
            return false;
    ad12:	2000      	movs	r0, #0
    ad14:	e7fc      	b.n	ad10 <isSameAddress+0x1c>
    ad16:	2000      	movs	r0, #0
    ad18:	e7fa      	b.n	ad10 <isSameAddress+0x1c>
    ad1a:	Address 0x0000ad1a is out of bounds.


0000ad1c <MiApp_SendData>:
   {
    ad1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad1e:	46de      	mov	lr, fp
    ad20:	4657      	mov	r7, sl
    ad22:	464e      	mov	r6, r9
    ad24:	b5c0      	push	{r6, r7, lr}
    ad26:	b088      	sub	sp, #32
    ad28:	9107      	str	r1, [sp, #28]
    ad2a:	0017      	movs	r7, r2
    ad2c:	4699      	mov	r9, r3
    ad2e:	ab10      	add	r3, sp, #64	; 0x40
    ad30:	781b      	ldrb	r3, [r3, #0]
    ad32:	469a      	mov	sl, r3
    ad34:	ab11      	add	r3, sp, #68	; 0x44
    ad36:	781b      	ldrb	r3, [r3, #0]
    ad38:	469b      	mov	fp, r3
		if(addr_len == 2 && (DestinationAddress16 == 0xFFFF))
    ad3a:	2802      	cmp	r0, #2
    ad3c:	d003      	beq.n	ad46 <MiApp_SendData+0x2a>
    ad3e:	4d3e      	ldr	r5, [pc, #248]	; (ae38 <MiApp_SendData+0x11c>)
    ad40:	2400      	movs	r4, #0
            if( ConnectionTable[i].status.bits.isValid && (ConnectionTable[i].status.bits.RXOnWhenIdle == 0) &&
    ad42:	002e      	movs	r6, r5
    ad44:	e036      	b.n	adb4 <MiApp_SendData+0x98>
		uint16_t DestinationAddress16 = ((addr[1] << 8) + addr[0]);	
    ad46:	784a      	ldrb	r2, [r1, #1]
    ad48:	0212      	lsls	r2, r2, #8
    ad4a:	780b      	ldrb	r3, [r1, #0]
    ad4c:	189b      	adds	r3, r3, r2
		if(addr_len == 2 && (DestinationAddress16 == 0xFFFF))
    ad4e:	b29b      	uxth	r3, r3
    ad50:	4a3a      	ldr	r2, [pc, #232]	; (ae3c <MiApp_SendData+0x120>)
    ad52:	4293      	cmp	r3, r2
    ad54:	d1f3      	bne.n	ad3e <MiApp_SendData+0x22>
    ad56:	2100      	movs	r1, #0
				    if( ConnectionTable[i].status.bits.isValid && ConnectionTable[i].status.bits.RXOnWhenIdle == 0 )
    ad58:	4837      	ldr	r0, [pc, #220]	; (ae38 <MiApp_SendData+0x11c>)
    ad5a:	0002      	movs	r2, r0
    ad5c:	e002      	b.n	ad64 <MiApp_SendData+0x48>
    ad5e:	3101      	adds	r1, #1
			    for(i = 0; i < CONNECTION_SIZE; i++)
    ad60:	2905      	cmp	r1, #5
    ad62:	d021      	beq.n	ada8 <MiApp_SendData+0x8c>
				    if( ConnectionTable[i].status.bits.isValid && ConnectionTable[i].status.bits.RXOnWhenIdle == 0 )
    ad64:	008b      	lsls	r3, r1, #2
    ad66:	185b      	adds	r3, r3, r1
    ad68:	005b      	lsls	r3, r3, #1
    ad6a:	18c3      	adds	r3, r0, r3
    ad6c:	7a1b      	ldrb	r3, [r3, #8]
    ad6e:	09db      	lsrs	r3, r3, #7
    ad70:	d0f5      	beq.n	ad5e <MiApp_SendData+0x42>
    ad72:	008b      	lsls	r3, r1, #2
    ad74:	185b      	adds	r3, r3, r1
    ad76:	005b      	lsls	r3, r3, #1
    ad78:	18d3      	adds	r3, r2, r3
    ad7a:	7a1b      	ldrb	r3, [r3, #8]
    ad7c:	07db      	lsls	r3, r3, #31
    ad7e:	d4ee      	bmi.n	ad5e <MiApp_SendData+0x42>
					    IndirectPacket(true, myPANID, NULL, false, true, msglen, msgpointer, msghandle, ackReq, ConfCallback);
    ad80:	4b2f      	ldr	r3, [pc, #188]	; (ae40 <MiApp_SendData+0x124>)
    ad82:	8819      	ldrh	r1, [r3, #0]
    ad84:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ad86:	9305      	str	r3, [sp, #20]
    ad88:	465b      	mov	r3, fp
    ad8a:	9304      	str	r3, [sp, #16]
    ad8c:	4653      	mov	r3, sl
    ad8e:	9303      	str	r3, [sp, #12]
    ad90:	464b      	mov	r3, r9
    ad92:	9302      	str	r3, [sp, #8]
    ad94:	9701      	str	r7, [sp, #4]
    ad96:	2301      	movs	r3, #1
    ad98:	9300      	str	r3, [sp, #0]
    ad9a:	2300      	movs	r3, #0
    ad9c:	2200      	movs	r2, #0
    ad9e:	2001      	movs	r0, #1
    ada0:	4c28      	ldr	r4, [pc, #160]	; (ae44 <MiApp_SendData+0x128>)
    ada2:	47a0      	blx	r4
			broadcast = true;
    ada4:	2001      	movs	r0, #1
					    break;
    ada6:	e02f      	b.n	ae08 <MiApp_SendData+0xec>
			broadcast = true;
    ada8:	2001      	movs	r0, #1
    adaa:	e02d      	b.n	ae08 <MiApp_SendData+0xec>
    adac:	3401      	adds	r4, #1
    adae:	350a      	adds	r5, #10
        for(i = 0; i < CONNECTION_SIZE; i++)
    adb0:	2c05      	cmp	r4, #5
    adb2:	d028      	beq.n	ae06 <MiApp_SendData+0xea>
            if( ConnectionTable[i].status.bits.isValid && (ConnectionTable[i].status.bits.RXOnWhenIdle == 0) &&
    adb4:	00a3      	lsls	r3, r4, #2
    adb6:	191b      	adds	r3, r3, r4
    adb8:	005b      	lsls	r3, r3, #1
    adba:	18f3      	adds	r3, r6, r3
    adbc:	7a1b      	ldrb	r3, [r3, #8]
    adbe:	09db      	lsrs	r3, r3, #7
    adc0:	d0f4      	beq.n	adac <MiApp_SendData+0x90>
    adc2:	00a3      	lsls	r3, r4, #2
    adc4:	191b      	adds	r3, r3, r4
    adc6:	005b      	lsls	r3, r3, #1
    adc8:	4a1b      	ldr	r2, [pc, #108]	; (ae38 <MiApp_SendData+0x11c>)
    adca:	4694      	mov	ip, r2
    adcc:	4463      	add	r3, ip
    adce:	7a1b      	ldrb	r3, [r3, #8]
    add0:	07db      	lsls	r3, r3, #31
    add2:	d4eb      	bmi.n	adac <MiApp_SendData+0x90>
                isSameAddress(addr, ConnectionTable[i].Address) )
    add4:	0029      	movs	r1, r5
    add6:	9807      	ldr	r0, [sp, #28]
    add8:	4b1b      	ldr	r3, [pc, #108]	; (ae48 <MiApp_SendData+0x12c>)
    adda:	4798      	blx	r3
            if( ConnectionTable[i].status.bits.isValid && (ConnectionTable[i].status.bits.RXOnWhenIdle == 0) &&
    addc:	2800      	cmp	r0, #0
    adde:	d0e5      	beq.n	adac <MiApp_SendData+0x90>
                    return IndirectPacket(broadcast, myPANID, addr, false, true, msglen,
    ade0:	4b17      	ldr	r3, [pc, #92]	; (ae40 <MiApp_SendData+0x124>)
    ade2:	8819      	ldrh	r1, [r3, #0]
    ade4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ade6:	9305      	str	r3, [sp, #20]
    ade8:	465b      	mov	r3, fp
    adea:	9304      	str	r3, [sp, #16]
    adec:	4653      	mov	r3, sl
    adee:	9303      	str	r3, [sp, #12]
    adf0:	464b      	mov	r3, r9
    adf2:	9302      	str	r3, [sp, #8]
    adf4:	9701      	str	r7, [sp, #4]
    adf6:	2301      	movs	r3, #1
    adf8:	9300      	str	r3, [sp, #0]
    adfa:	2300      	movs	r3, #0
    adfc:	9a07      	ldr	r2, [sp, #28]
    adfe:	2000      	movs	r0, #0
    ae00:	4c10      	ldr	r4, [pc, #64]	; (ae44 <MiApp_SendData+0x128>)
    ae02:	47a0      	blx	r4
    ae04:	e011      	b.n	ae2a <MiApp_SendData+0x10e>
	    bool broadcast = false;
    ae06:	2000      	movs	r0, #0
        return SendPacket(broadcast, myPANID, addr, false, true, msglen,
    ae08:	4b0d      	ldr	r3, [pc, #52]	; (ae40 <MiApp_SendData+0x124>)
    ae0a:	8819      	ldrh	r1, [r3, #0]
    ae0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ae0e:	9305      	str	r3, [sp, #20]
    ae10:	465b      	mov	r3, fp
    ae12:	9304      	str	r3, [sp, #16]
    ae14:	4653      	mov	r3, sl
    ae16:	9303      	str	r3, [sp, #12]
    ae18:	464b      	mov	r3, r9
    ae1a:	9302      	str	r3, [sp, #8]
    ae1c:	9701      	str	r7, [sp, #4]
    ae1e:	2301      	movs	r3, #1
    ae20:	9300      	str	r3, [sp, #0]
    ae22:	2300      	movs	r3, #0
    ae24:	9a07      	ldr	r2, [sp, #28]
    ae26:	4c09      	ldr	r4, [pc, #36]	; (ae4c <MiApp_SendData+0x130>)
    ae28:	47a0      	blx	r4
}
    ae2a:	b008      	add	sp, #32
    ae2c:	bc1c      	pop	{r2, r3, r4}
    ae2e:	4691      	mov	r9, r2
    ae30:	469a      	mov	sl, r3
    ae32:	46a3      	mov	fp, r4
    ae34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ae36:	46c0      	nop			; (mov r8, r8)
    ae38:	2000280c 	.word	0x2000280c
    ae3c:	0000ffff 	.word	0x0000ffff
    ae40:	2000285c 	.word	0x2000285c
    ae44:	0000aaed 	.word	0x0000aaed
    ae48:	0000acf5 	.word	0x0000acf5
    ae4c:	0000ac21 	.word	0x0000ac21

0000ae50 <MiApp_Set>:


#endif

bool MiApp_Set(miwi_params_t id, uint8_t *value)
{
    ae50:	b510      	push	{r4, lr}
    ae52:	000c      	movs	r4, r1
    switch(id)
    ae54:	2800      	cmp	r0, #0
    ae56:	d001      	beq.n	ae5c <MiApp_Set+0xc>
     break;

     default:
     break;
   }
    return false;
    ae58:	2000      	movs	r0, #0
}
    ae5a:	bd10      	pop	{r4, pc}
        if( MiMAC_Set(MAC_CHANNEL, value))
    ae5c:	4b03      	ldr	r3, [pc, #12]	; (ae6c <MiApp_Set+0x1c>)
    ae5e:	4798      	blx	r3
    ae60:	2800      	cmp	r0, #0
    ae62:	d0fa      	beq.n	ae5a <MiApp_Set+0xa>
          currentChannel = *value;
    ae64:	7822      	ldrb	r2, [r4, #0]
    ae66:	4b02      	ldr	r3, [pc, #8]	; (ae70 <MiApp_Set+0x20>)
    ae68:	701a      	strb	r2, [r3, #0]
          return true;
    ae6a:	e7f6      	b.n	ae5a <MiApp_Set+0xa>
    ae6c:	00009ab9 	.word	0x00009ab9
    ae70:	2000001d 	.word	0x2000001d

0000ae74 <MiApp_ProtocolInit>:
{
    ae74:	b500      	push	{lr}
    ae76:	b085      	sub	sp, #20
    P2PStatus.Val = 0;
    ae78:	2300      	movs	r3, #0
    ae7a:	4a1d      	ldr	r2, [pc, #116]	; (aef0 <MiApp_ProtocolInit+0x7c>)
    ae7c:	7013      	strb	r3, [r2, #0]
            indirectMessages[i].flags.Val = 0;
    ae7e:	4a1d      	ldr	r2, [pc, #116]	; (aef4 <MiApp_ProtocolInit+0x80>)
    ae80:	7393      	strb	r3, [r2, #14]
    ae82:	2191      	movs	r1, #145	; 0x91
    ae84:	0049      	lsls	r1, r1, #1
    ae86:	5453      	strb	r3, [r2, r1]
            IncomingFrameCounter[i].Val = 0;
    ae88:	4a1b      	ldr	r2, [pc, #108]	; (aef8 <MiApp_ProtocolInit+0x84>)
    ae8a:	6013      	str	r3, [r2, #0]
    ae8c:	6053      	str	r3, [r2, #4]
    ae8e:	6093      	str	r3, [r2, #8]
    ae90:	60d3      	str	r3, [r2, #12]
    ae92:	6113      	str	r3, [r2, #16]
            myPANID.Val = MY_PAN_ID; 
    ae94:	4a19      	ldr	r2, [pc, #100]	; (aefc <MiApp_ProtocolInit+0x88>)
    ae96:	4b1a      	ldr	r3, [pc, #104]	; (af00 <MiApp_ProtocolInit+0x8c>)
    ae98:	801a      	strh	r2, [r3, #0]
    initValue.PAddress = myLongAddress;
    ae9a:	a902      	add	r1, sp, #8
    initValue.actionFlags.bits.CCAEnable = 1;
    ae9c:	780b      	ldrb	r3, [r1, #0]
    ae9e:	2202      	movs	r2, #2
    aea0:	4313      	orrs	r3, r2
    initValue.actionFlags.bits.PAddrLength = MY_ADDRESS_LENGTH;
    aea2:	2287      	movs	r2, #135	; 0x87
    aea4:	4013      	ands	r3, r2
    aea6:	2240      	movs	r2, #64	; 0x40
    aea8:	4313      	orrs	r3, r2
    initValue.actionFlags.bits.RepeaterMode = 0;
    aeaa:	22c3      	movs	r2, #195	; 0xc3
    aeac:	4013      	ands	r3, r2
    aeae:	3ac2      	subs	r2, #194	; 0xc2
    aeb0:	4393      	bics	r3, r2
    aeb2:	700b      	strb	r3, [r1, #0]
    MiMAC_Init(initValue);
    aeb4:	9802      	ldr	r0, [sp, #8]
    aeb6:	4913      	ldr	r1, [pc, #76]	; (af04 <MiApp_ProtocolInit+0x90>)
    aeb8:	4b13      	ldr	r3, [pc, #76]	; (af08 <MiApp_ProtocolInit+0x94>)
    aeba:	4798      	blx	r3
    if (currentChannel != 0xFF)
    aebc:	4b13      	ldr	r3, [pc, #76]	; (af0c <MiApp_ProtocolInit+0x98>)
    aebe:	781b      	ldrb	r3, [r3, #0]
    aec0:	2bff      	cmp	r3, #255	; 0xff
    aec2:	d003      	beq.n	aecc <MiApp_ProtocolInit+0x58>
	    MiApp_Set(CHANNEL, &currentChannel);
    aec4:	4911      	ldr	r1, [pc, #68]	; (af0c <MiApp_ProtocolInit+0x98>)
    aec6:	2000      	movs	r0, #0
    aec8:	4b11      	ldr	r3, [pc, #68]	; (af10 <MiApp_ProtocolInit+0x9c>)
    aeca:	4798      	blx	r3
            uint16_t tmp = 0xFFFF;
    aecc:	466b      	mov	r3, sp
    aece:	1d98      	adds	r0, r3, #6
    aed0:	2301      	movs	r3, #1
    aed2:	425b      	negs	r3, r3
    aed4:	8003      	strh	r3, [r0, #0]
            MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    aed6:	490a      	ldr	r1, [pc, #40]	; (af00 <MiApp_ProtocolInit+0x8c>)
    aed8:	4b0e      	ldr	r3, [pc, #56]	; (af14 <MiApp_ProtocolInit+0xa0>)
    aeda:	4798      	blx	r3
    P2PCapacityInfo |= (ConnMode << 4);
    aedc:	4b0e      	ldr	r3, [pc, #56]	; (af18 <MiApp_ProtocolInit+0xa4>)
    aede:	781b      	ldrb	r3, [r3, #0]
    aee0:	011b      	lsls	r3, r3, #4
    aee2:	2209      	movs	r2, #9
    aee4:	4313      	orrs	r3, r2
    aee6:	4a0d      	ldr	r2, [pc, #52]	; (af1c <MiApp_ProtocolInit+0xa8>)
    aee8:	7013      	strb	r3, [r2, #0]
}
    aeea:	2000      	movs	r0, #0
    aeec:	b005      	add	sp, #20
    aeee:	bd00      	pop	{pc}
    aef0:	20002880 	.word	0x20002880
    aef4:	20002884 	.word	0x20002884
    aef8:	20002868 	.word	0x20002868
    aefc:	00001234 	.word	0x00001234
    af00:	2000285c 	.word	0x2000285c
    af04:	20000020 	.word	0x20000020
    af08:	00009ae1 	.word	0x00009ae1
    af0c:	2000001d 	.word	0x2000001d
    af10:	0000ae51 	.word	0x0000ae51
    af14:	000096d1 	.word	0x000096d1
    af18:	2000001c 	.word	0x2000001c
    af1c:	20002859 	.word	0x20002859

0000af20 <MiApp_StartConnection>:
    {
    af20:	b530      	push	{r4, r5, lr}
    af22:	b083      	sub	sp, #12
    af24:	0014      	movs	r4, r2
    af26:	001d      	movs	r5, r3
        switch(Mode)
    af28:	2801      	cmp	r0, #1
    af2a:	d032      	beq.n	af92 <MiApp_StartConnection+0x72>
    af2c:	2800      	cmp	r0, #0
    af2e:	d005      	beq.n	af3c <MiApp_StartConnection+0x1c>
    af30:	2802      	cmp	r0, #2
    af32:	d032      	beq.n	af9a <MiApp_StartConnection+0x7a>
        ConfCallback(FAILURE);
    af34:	2001      	movs	r0, #1
    af36:	4798      	blx	r3
        return false;
    af38:	2000      	movs	r0, #0
    af3a:	e028      	b.n	af8e <MiApp_StartConnection+0x6e>
                uint8_t channel = 0;
    af3c:	2200      	movs	r2, #0
    af3e:	466b      	mov	r3, sp
    af40:	715a      	strb	r2, [r3, #5]
                        myPANID.Val = MY_PAN_ID;
    af42:	4918      	ldr	r1, [pc, #96]	; (afa4 <MiApp_StartConnection+0x84>)
    af44:	4b18      	ldr	r3, [pc, #96]	; (afa8 <MiApp_StartConnection+0x88>)
    af46:	800b      	strh	r3, [r1, #0]
                        uint16_t tmp = 0xFFFF;
    af48:	466b      	mov	r3, sp
    af4a:	1d98      	adds	r0, r3, #6
    af4c:	2301      	movs	r3, #1
    af4e:	425b      	negs	r3, r3
    af50:	8003      	strh	r3, [r0, #0]
                        MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    af52:	4b16      	ldr	r3, [pc, #88]	; (afac <MiApp_StartConnection+0x8c>)
    af54:	4798      	blx	r3
				while (!(index & ChannelMap))
    af56:	07e3      	lsls	r3, r4, #31
    af58:	d40a      	bmi.n	af70 <MiApp_StartConnection+0x50>
    af5a:	466b      	mov	r3, sp
    af5c:	3305      	adds	r3, #5
    af5e:	781b      	ldrb	r3, [r3, #0]
    af60:	2201      	movs	r2, #1
				index = index << 1;
    af62:	0052      	lsls	r2, r2, #1
				++channel;
    af64:	3301      	adds	r3, #1
    af66:	b2db      	uxtb	r3, r3
				while (!(index & ChannelMap))
    af68:	4222      	tst	r2, r4
    af6a:	d0fa      	beq.n	af62 <MiApp_StartConnection+0x42>
    af6c:	466a      	mov	r2, sp
    af6e:	7153      	strb	r3, [r2, #5]
				MiApp_Set(CHANNEL, &channel);
    af70:	466b      	mov	r3, sp
    af72:	1d59      	adds	r1, r3, #5
    af74:	2000      	movs	r0, #0
    af76:	4b0e      	ldr	r3, [pc, #56]	; (afb0 <MiApp_StartConnection+0x90>)
    af78:	4798      	blx	r3
                tick1.Val = MiWi_TickGet();
    af7a:	4c0e      	ldr	r4, [pc, #56]	; (afb4 <MiApp_StartConnection+0x94>)
    af7c:	47a0      	blx	r4
    af7e:	4b0e      	ldr	r3, [pc, #56]	; (afb8 <MiApp_StartConnection+0x98>)
    af80:	6018      	str	r0, [r3, #0]
                tick4.Val = MiWi_TickGet();
    af82:	47a0      	blx	r4
    af84:	4b0d      	ldr	r3, [pc, #52]	; (afbc <MiApp_StartConnection+0x9c>)
    af86:	6018      	str	r0, [r3, #0]
				ConfCallback(SUCCESS);
    af88:	2000      	movs	r0, #0
    af8a:	47a8      	blx	r5
                return true;
    af8c:	2001      	movs	r0, #1
    }
    af8e:	b003      	add	sp, #12
    af90:	bd30      	pop	{r4, r5, pc}
                    ConfCallback(FAILURE);
    af92:	2001      	movs	r0, #1
    af94:	4798      	blx	r3
                    return false;
    af96:	2000      	movs	r0, #0
    af98:	e7f9      	b.n	af8e <MiApp_StartConnection+0x6e>
                ConfCallback(FAILURE);
    af9a:	2001      	movs	r0, #1
    af9c:	4798      	blx	r3
                return false;
    af9e:	2000      	movs	r0, #0
    afa0:	e7f5      	b.n	af8e <MiApp_StartConnection+0x6e>
    afa2:	46c0      	nop			; (mov r8, r8)
    afa4:	2000285c 	.word	0x2000285c
    afa8:	00001234 	.word	0x00001234
    afac:	000096d1 	.word	0x000096d1
    afb0:	0000ae51 	.word	0x0000ae51
    afb4:	0000c111 	.word	0x0000c111
    afb8:	20002aac 	.word	0x20002aac
    afbc:	20002840 	.word	0x20002840

0000afc0 <DumpConnection>:
     * Side Effects:    The content of the connection pointed by the index 
     *                  of the P2P Connection Entry will be printed out
     *
     ********************************************************************/
    void DumpConnection(INPUT uint8_t index)
    {
    afc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    afc2:	46d6      	mov	lr, sl
    afc4:	4647      	mov	r7, r8
    afc6:	b580      	push	{r7, lr}
    afc8:	b083      	sub	sp, #12
    afca:	0005      	movs	r5, r0
#if defined (ENABLE_CONSOLE)		
        uint8_t i, j;
        
        if( index > CONNECTION_SIZE )
    afcc:	2805      	cmp	r0, #5
    afce:	d811      	bhi.n	aff4 <DumpConnection+0x34>
            #endif
            printf("  Channel: ");
            printf("%d",currentChannel);
        }
            
        if( index < CONNECTION_SIZE )
    afd0:	2d04      	cmp	r5, #4
    afd2:	d85e      	bhi.n	b092 <DumpConnection+0xd2>
        {
            printf("\r\nConnection \tPeerLongAddress \tPeerInfo \tRxOnStatus1\r\n");  
    afd4:	4851      	ldr	r0, [pc, #324]	; (b11c <DumpConnection+0x15c>)
    afd6:	4b52      	ldr	r3, [pc, #328]	; (b120 <DumpConnection+0x160>)
    afd8:	4798      	blx	r3
            if( ConnectionTable[index].status.bits.isValid )
    afda:	00ab      	lsls	r3, r5, #2
    afdc:	195b      	adds	r3, r3, r5
    afde:	005b      	lsls	r3, r3, #1
    afe0:	4a50      	ldr	r2, [pc, #320]	; (b124 <DumpConnection+0x164>)
    afe2:	18d3      	adds	r3, r2, r3
    afe4:	7a1b      	ldrb	r3, [r3, #8]
    afe6:	09db      	lsrs	r3, r3, #7
    afe8:	d123      	bne.n	b032 <DumpConnection+0x72>
					
                }  
            }
        }
#endif // #if defined (ENABLE_CONSOLE)		
    }
    afea:	b003      	add	sp, #12
    afec:	bc0c      	pop	{r2, r3}
    afee:	4690      	mov	r8, r2
    aff0:	469a      	mov	sl, r3
    aff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            printf("\r\n\r\nMy Address: 0x");
    aff4:	484c      	ldr	r0, [pc, #304]	; (b128 <DumpConnection+0x168>)
    aff6:	4b4d      	ldr	r3, [pc, #308]	; (b12c <DumpConnection+0x16c>)
    aff8:	4798      	blx	r3
    affa:	4c4d      	ldr	r4, [pc, #308]	; (b130 <DumpConnection+0x170>)
    affc:	0026      	movs	r6, r4
    affe:	3e08      	subs	r6, #8
				printf("%02x",myLongAddress[MY_ADDRESS_LENGTH-1-i]);
    b000:	4f4a      	ldr	r7, [pc, #296]	; (b12c <DumpConnection+0x16c>)
    b002:	79e1      	ldrb	r1, [r4, #7]
    b004:	484b      	ldr	r0, [pc, #300]	; (b134 <DumpConnection+0x174>)
    b006:	47b8      	blx	r7
    b008:	3c01      	subs	r4, #1
            for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    b00a:	42b4      	cmp	r4, r6
    b00c:	d1f9      	bne.n	b002 <DumpConnection+0x42>
                printf("  PANID: 0x");
    b00e:	484a      	ldr	r0, [pc, #296]	; (b138 <DumpConnection+0x178>)
    b010:	4c46      	ldr	r4, [pc, #280]	; (b12c <DumpConnection+0x16c>)
    b012:	47a0      	blx	r4
                printf("%x",myPANID.v[1]);
    b014:	4f49      	ldr	r7, [pc, #292]	; (b13c <DumpConnection+0x17c>)
    b016:	7879      	ldrb	r1, [r7, #1]
    b018:	4e49      	ldr	r6, [pc, #292]	; (b140 <DumpConnection+0x180>)
    b01a:	0030      	movs	r0, r6
    b01c:	47a0      	blx	r4
                printf("%x",myPANID.v[0]);
    b01e:	7839      	ldrb	r1, [r7, #0]
    b020:	0030      	movs	r0, r6
    b022:	47a0      	blx	r4
            printf("  Channel: ");
    b024:	4847      	ldr	r0, [pc, #284]	; (b144 <DumpConnection+0x184>)
    b026:	47a0      	blx	r4
            printf("%d",currentChannel);
    b028:	4b47      	ldr	r3, [pc, #284]	; (b148 <DumpConnection+0x188>)
    b02a:	7819      	ldrb	r1, [r3, #0]
    b02c:	4847      	ldr	r0, [pc, #284]	; (b14c <DumpConnection+0x18c>)
    b02e:	47a0      	blx	r4
    b030:	e7ce      	b.n	afd0 <DumpConnection+0x10>
                printf("%02x",index);
    b032:	0029      	movs	r1, r5
    b034:	483f      	ldr	r0, [pc, #252]	; (b134 <DumpConnection+0x174>)
    b036:	4c3d      	ldr	r4, [pc, #244]	; (b12c <DumpConnection+0x16c>)
    b038:	47a0      	blx	r4
                printf("\t\t\t");
    b03a:	4845      	ldr	r0, [pc, #276]	; (b150 <DumpConnection+0x190>)
    b03c:	47a0      	blx	r4
    b03e:	00ae      	lsls	r6, r5, #2
    b040:	1976      	adds	r6, r6, r5
    b042:	0076      	lsls	r6, r6, #1
    b044:	1df4      	adds	r4, r6, #7
    b046:	4b37      	ldr	r3, [pc, #220]	; (b124 <DumpConnection+0x164>)
    b048:	18e4      	adds	r4, r4, r3
    b04a:	3e01      	subs	r6, #1
    b04c:	18f6      	adds	r6, r6, r3
                        printf("%02x", ConnectionTable[index].Address[MY_ADDRESS_LENGTH-1-i] );
    b04e:	4f37      	ldr	r7, [pc, #220]	; (b12c <DumpConnection+0x16c>)
    b050:	7821      	ldrb	r1, [r4, #0]
    b052:	4838      	ldr	r0, [pc, #224]	; (b134 <DumpConnection+0x174>)
    b054:	47b8      	blx	r7
    b056:	3c01      	subs	r4, #1
                for(i = 0; i < 8; i++)
    b058:	42b4      	cmp	r4, r6
    b05a:	d1f9      	bne.n	b050 <DumpConnection+0x90>
                printf("/t");
    b05c:	483d      	ldr	r0, [pc, #244]	; (b154 <DumpConnection+0x194>)
    b05e:	4f33      	ldr	r7, [pc, #204]	; (b12c <DumpConnection+0x16c>)
    b060:	47b8      	blx	r7
                        printf("%02x", ConnectionTable[index].PeerInfo[i] );
    b062:	4e30      	ldr	r6, [pc, #192]	; (b124 <DumpConnection+0x164>)
    b064:	00ac      	lsls	r4, r5, #2
    b066:	1963      	adds	r3, r4, r5
    b068:	005b      	lsls	r3, r3, #1
    b06a:	18f3      	adds	r3, r6, r3
    b06c:	7a59      	ldrb	r1, [r3, #9]
    b06e:	4831      	ldr	r0, [pc, #196]	; (b134 <DumpConnection+0x174>)
    b070:	47b8      	blx	r7
				printf("\t");
    b072:	2009      	movs	r0, #9
    b074:	4b38      	ldr	r3, [pc, #224]	; (b158 <DumpConnection+0x198>)
    b076:	4698      	mov	r8, r3
    b078:	4798      	blx	r3
				printf("\t");
    b07a:	2009      	movs	r0, #9
    b07c:	47c0      	blx	r8
				printf("%d", ConnectionTable[index].status.Val );
    b07e:	1964      	adds	r4, r4, r5
    b080:	0064      	lsls	r4, r4, #1
    b082:	1934      	adds	r4, r6, r4
    b084:	7a21      	ldrb	r1, [r4, #8]
    b086:	4831      	ldr	r0, [pc, #196]	; (b14c <DumpConnection+0x18c>)
    b088:	47b8      	blx	r7
                printf("\r\n");
    b08a:	4834      	ldr	r0, [pc, #208]	; (b15c <DumpConnection+0x19c>)
    b08c:	4b24      	ldr	r3, [pc, #144]	; (b120 <DumpConnection+0x160>)
    b08e:	4798      	blx	r3
    b090:	e7ab      	b.n	afea <DumpConnection+0x2a>
            printf("\r\n\r\nConnection     PeerLongAddress     PeerInfo\tRxOnStatus\r\n");  
    b092:	4833      	ldr	r0, [pc, #204]	; (b160 <DumpConnection+0x1a0>)
    b094:	4b22      	ldr	r3, [pc, #136]	; (b120 <DumpConnection+0x160>)
    b096:	4798      	blx	r3
    b098:	4b32      	ldr	r3, [pc, #200]	; (b164 <DumpConnection+0x1a4>)
    b09a:	4698      	mov	r8, r3
    b09c:	2500      	movs	r5, #0
                if( ConnectionTable[i].status.bits.isValid )
    b09e:	4b21      	ldr	r3, [pc, #132]	; (b124 <DumpConnection+0x164>)
    b0a0:	469a      	mov	sl, r3
    b0a2:	e020      	b.n	b0e6 <DumpConnection+0x126>
                    printf("    ");
    b0a4:	4830      	ldr	r0, [pc, #192]	; (b168 <DumpConnection+0x1a8>)
    b0a6:	4e21      	ldr	r6, [pc, #132]	; (b12c <DumpConnection+0x16c>)
    b0a8:	47b0      	blx	r6
                            printf("%02x", ConnectionTable[i].PeerInfo[j] );
    b0aa:	4643      	mov	r3, r8
    b0ac:	7899      	ldrb	r1, [r3, #2]
    b0ae:	4821      	ldr	r0, [pc, #132]	; (b134 <DumpConnection+0x174>)
    b0b0:	47b0      	blx	r6
					printf("\t");
    b0b2:	2009      	movs	r0, #9
    b0b4:	4c28      	ldr	r4, [pc, #160]	; (b158 <DumpConnection+0x198>)
    b0b6:	47a0      	blx	r4
					printf("\t");
    b0b8:	2009      	movs	r0, #9
    b0ba:	47a0      	blx	r4
					printf("%02x", ConnectionTable[i].status.bits.RXOnWhenIdle );					
    b0bc:	9a01      	ldr	r2, [sp, #4]
    b0be:	0093      	lsls	r3, r2, #2
    b0c0:	189f      	adds	r7, r3, r2
    b0c2:	007f      	lsls	r7, r7, #1
    b0c4:	4b17      	ldr	r3, [pc, #92]	; (b124 <DumpConnection+0x164>)
    b0c6:	19df      	adds	r7, r3, r7
    b0c8:	7a39      	ldrb	r1, [r7, #8]
    b0ca:	07c9      	lsls	r1, r1, #31
    b0cc:	0fc9      	lsrs	r1, r1, #31
    b0ce:	4819      	ldr	r0, [pc, #100]	; (b134 <DumpConnection+0x174>)
    b0d0:	47b0      	blx	r6
                    printf("\r\n");
    b0d2:	4822      	ldr	r0, [pc, #136]	; (b15c <DumpConnection+0x19c>)
    b0d4:	4b12      	ldr	r3, [pc, #72]	; (b120 <DumpConnection+0x160>)
    b0d6:	4798      	blx	r3
    b0d8:	3501      	adds	r5, #1
    b0da:	230a      	movs	r3, #10
    b0dc:	469c      	mov	ip, r3
    b0de:	44e0      	add	r8, ip
            for(i = 0; i < CONNECTION_SIZE; i++)
    b0e0:	2d05      	cmp	r5, #5
    b0e2:	d100      	bne.n	b0e6 <DumpConnection+0x126>
    b0e4:	e781      	b.n	afea <DumpConnection+0x2a>
                if( ConnectionTable[i].status.bits.isValid )
    b0e6:	9501      	str	r5, [sp, #4]
    b0e8:	00ab      	lsls	r3, r5, #2
    b0ea:	195b      	adds	r3, r3, r5
    b0ec:	005b      	lsls	r3, r3, #1
    b0ee:	4453      	add	r3, sl
    b0f0:	7a1b      	ldrb	r3, [r3, #8]
    b0f2:	09db      	lsrs	r3, r3, #7
    b0f4:	d0f0      	beq.n	b0d8 <DumpConnection+0x118>
                    printf("%02x",i);
    b0f6:	0029      	movs	r1, r5
    b0f8:	480e      	ldr	r0, [pc, #56]	; (b134 <DumpConnection+0x174>)
    b0fa:	4b0c      	ldr	r3, [pc, #48]	; (b12c <DumpConnection+0x16c>)
    b0fc:	4798      	blx	r3
                    printf("             ");
    b0fe:	481b      	ldr	r0, [pc, #108]	; (b16c <DumpConnection+0x1ac>)
    b100:	4b0a      	ldr	r3, [pc, #40]	; (b12c <DumpConnection+0x16c>)
    b102:	4798      	blx	r3
    b104:	4647      	mov	r7, r8
    b106:	3f08      	subs	r7, #8
    b108:	4644      	mov	r4, r8
                            printf("%02x", ConnectionTable[i].Address[MY_ADDRESS_LENGTH-1-j] );
    b10a:	4e08      	ldr	r6, [pc, #32]	; (b12c <DumpConnection+0x16c>)
    b10c:	7821      	ldrb	r1, [r4, #0]
    b10e:	4809      	ldr	r0, [pc, #36]	; (b134 <DumpConnection+0x174>)
    b110:	47b0      	blx	r6
    b112:	3c01      	subs	r4, #1
                    for(j = 0; j < 8; j++)
    b114:	42bc      	cmp	r4, r7
    b116:	d1f9      	bne.n	b10c <DumpConnection+0x14c>
    b118:	e7c4      	b.n	b0a4 <DumpConnection+0xe4>
    b11a:	46c0      	nop			; (mov r8, r8)
    b11c:	00017a78 	.word	0x00017a78
    b120:	00015c95 	.word	0x00015c95
    b124:	2000280c 	.word	0x2000280c
    b128:	00017a4c 	.word	0x00017a4c
    b12c:	00015b79 	.word	0x00015b79
    b130:	20000020 	.word	0x20000020
    b134:	000173e8 	.word	0x000173e8
    b138:	00017a60 	.word	0x00017a60
    b13c:	2000285c 	.word	0x2000285c
    b140:	000173f8 	.word	0x000173f8
    b144:	00017a6c 	.word	0x00017a6c
    b148:	2000001d 	.word	0x2000001d
    b14c:	00017150 	.word	0x00017150
    b150:	00017ab0 	.word	0x00017ab0
    b154:	00017ab4 	.word	0x00017ab4
    b158:	00015bad 	.word	0x00015bad
    b15c:	00017aac 	.word	0x00017aac
    b160:	00017ab8 	.word	0x00017ab8
    b164:	20002813 	.word	0x20002813
    b168:	00017b04 	.word	0x00017b04
    b16c:	00017af4 	.word	0x00017af4

0000b170 <AddConnection>:
     *                  connection operation ends if an entry is added 
     *                  successfully
     *
     ********************************************************************/
    uint8_t AddConnection(void)
    {
    b170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b172:	46d6      	mov	lr, sl
    b174:	464f      	mov	r7, r9
    b176:	b580      	push	{r7, lr}
        {
            // check if the entry is valid
            if( ConnectionTable[i].status.bits.isValid )
            {
                // check if the entry address matches source address of current received packet
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    b178:	4b39      	ldr	r3, [pc, #228]	; (b260 <AddConnection+0xf0>)
    b17a:	685e      	ldr	r6, [r3, #4]
    b17c:	4d39      	ldr	r5, [pc, #228]	; (b264 <AddConnection+0xf4>)
    b17e:	2400      	movs	r4, #0
        uint8_t connectionSlot = 0xFF;
    b180:	27ff      	movs	r7, #255	; 0xff
            if( ConnectionTable[i].status.bits.isValid )
    b182:	46a9      	mov	r9, r5
    b184:	e005      	b.n	b192 <AddConnection+0x22>
                    connectionSlot = i;
                    status = STATUS_EXISTS;
                    break;
                }
            }
            else if( connectionSlot == 0xFF )
    b186:	2fff      	cmp	r7, #255	; 0xff
    b188:	d015      	beq.n	b1b6 <AddConnection+0x46>
    b18a:	3401      	adds	r4, #1
    b18c:	350a      	adds	r5, #10
        for(i = 0; i < CONNECTION_SIZE; i++)
    b18e:	2c05      	cmp	r4, #5
    b190:	d013      	beq.n	b1ba <AddConnection+0x4a>
    b192:	b2e3      	uxtb	r3, r4
    b194:	469a      	mov	sl, r3
            if( ConnectionTable[i].status.bits.isValid )
    b196:	00a3      	lsls	r3, r4, #2
    b198:	191b      	adds	r3, r3, r4
    b19a:	005b      	lsls	r3, r3, #1
    b19c:	444b      	add	r3, r9
    b19e:	7a1b      	ldrb	r3, [r3, #8]
    b1a0:	09db      	lsrs	r3, r3, #7
    b1a2:	d0f0      	beq.n	b186 <AddConnection+0x16>
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    b1a4:	0029      	movs	r1, r5
    b1a6:	0030      	movs	r0, r6
    b1a8:	4b2f      	ldr	r3, [pc, #188]	; (b268 <AddConnection+0xf8>)
    b1aa:	4798      	blx	r3
    b1ac:	2800      	cmp	r0, #0
    b1ae:	d0ec      	beq.n	b18a <AddConnection+0x1a>
    b1b0:	4657      	mov	r7, sl
                    status = STATUS_EXISTS;
    b1b2:	2401      	movs	r4, #1
    b1b4:	e002      	b.n	b1bc <AddConnection+0x4c>
            else if( connectionSlot == 0xFF )
    b1b6:	4657      	mov	r7, sl
    b1b8:	e7e7      	b.n	b18a <AddConnection+0x1a>
        uint8_t status = STATUS_SUCCESS;
    b1ba:	2400      	movs	r4, #0
                // store the first empty slot
                connectionSlot = i;
            }  
        }
            
        if( connectionSlot == 0xFF )
    b1bc:	2fff      	cmp	r7, #255	; 0xff
    b1be:	d049      	beq.n	b254 <AddConnection+0xe4>
        {
            return STATUS_NOT_ENOUGH_SPACE;
        }
        else 
        {
            if( ConnMode >= ENABLE_PREV_CONN )
    b1c0:	4b2a      	ldr	r3, [pc, #168]	; (b26c <AddConnection+0xfc>)
    b1c2:	781b      	ldrb	r3, [r3, #0]
    b1c4:	2b00      	cmp	r3, #0
    b1c6:	d146      	bne.n	b256 <AddConnection+0xe6>
            {
                return status;
            }
            MyindexinPC = connectionSlot;    
    b1c8:	4b29      	ldr	r3, [pc, #164]	; (b270 <AddConnection+0x100>)
    b1ca:	701f      	strb	r7, [r3, #0]
    b1cc:	00b9      	lsls	r1, r7, #2
    b1ce:	19c9      	adds	r1, r1, r7
    b1d0:	0049      	lsls	r1, r1, #1
    b1d2:	4b24      	ldr	r3, [pc, #144]	; (b264 <AddConnection+0xf4>)
    b1d4:	18c9      	adds	r1, r1, r3
    b1d6:	2300      	movs	r3, #0
            // store the source address
            for(i = 0; i < 8; i++)
            {
                ConnectionTable[connectionSlot].Address[i] = rxMessage.SourceAddress[i];
    b1d8:	0038      	movs	r0, r7
    b1da:	5cf2      	ldrb	r2, [r6, r3]
    b1dc:	54ca      	strb	r2, [r1, r3]
    b1de:	3301      	adds	r3, #1
            for(i = 0; i < 8; i++)
    b1e0:	2b08      	cmp	r3, #8
    b1e2:	d1fa      	bne.n	b1da <AddConnection+0x6a>
            }
			ConnectionTable[connectionSlot].status.bits.isValid = 1;
    b1e4:	0083      	lsls	r3, r0, #2
    b1e6:	181b      	adds	r3, r3, r0
    b1e8:	005b      	lsls	r3, r3, #1
    b1ea:	4a1e      	ldr	r2, [pc, #120]	; (b264 <AddConnection+0xf4>)
    b1ec:	18d3      	adds	r3, r2, r3
    b1ee:	7a19      	ldrb	r1, [r3, #8]
    b1f0:	2280      	movs	r2, #128	; 0x80
    b1f2:	4252      	negs	r2, r2
    b1f4:	430a      	orrs	r2, r1
    b1f6:	721a      	strb	r2, [r3, #8]
			if(rxMessage.Payload[2] & 0x01)
    b1f8:	4b19      	ldr	r3, [pc, #100]	; (b260 <AddConnection+0xf0>)
    b1fa:	689b      	ldr	r3, [r3, #8]
    b1fc:	789a      	ldrb	r2, [r3, #2]
    b1fe:	07d2      	lsls	r2, r2, #31
    b200:	d51e      	bpl.n	b240 <AddConnection+0xd0>
				{
					ConnectionTable[connectionSlot].status.bits.RXOnWhenIdle = 1;
    b202:	0082      	lsls	r2, r0, #2
    b204:	1812      	adds	r2, r2, r0
    b206:	0052      	lsls	r2, r2, #1
    b208:	4916      	ldr	r1, [pc, #88]	; (b264 <AddConnection+0xf4>)
    b20a:	188a      	adds	r2, r1, r2
    b20c:	7a11      	ldrb	r1, [r2, #8]
    b20e:	2501      	movs	r5, #1
    b210:	4329      	orrs	r1, r5
    b212:	7211      	strb	r1, [r2, #8]
            //ConnectionTable[connectionSlot].status.Val = temp;
            // store possible additional connection payload
            #if ADDITIONAL_NODE_ID_SIZE > 0
                for(i = 0; i < ADDITIONAL_NODE_ID_SIZE; i++)
                {
                    ConnectionTable[connectionSlot].PeerInfo[i] = rxMessage.Payload[3+i];
    b214:	78d9      	ldrb	r1, [r3, #3]
    b216:	0082      	lsls	r2, r0, #2
    b218:	1810      	adds	r0, r2, r0
    b21a:	0043      	lsls	r3, r0, #1
    b21c:	4811      	ldr	r0, [pc, #68]	; (b264 <AddConnection+0xf4>)
    b21e:	18c0      	adds	r0, r0, r3
    b220:	7241      	strb	r1, [r0, #9]
                }
            #endif
    
            #ifdef ENABLE_SECURITY
                // if security is enabled, clear the incoming frame control
                IncomingFrameCounter[connectionSlot].Val = 0;
    b222:	2100      	movs	r1, #0
    b224:	4b13      	ldr	r3, [pc, #76]	; (b274 <AddConnection+0x104>)
    b226:	50d1      	str	r1, [r2, r3]
            #endif
            LatestConnection = connectionSlot;
    b228:	4b13      	ldr	r3, [pc, #76]	; (b278 <AddConnection+0x108>)
    b22a:	701f      	strb	r7, [r3, #0]
            P2PStatus.bits.SearchConnection = 0;   
    b22c:	4a13      	ldr	r2, [pc, #76]	; (b27c <AddConnection+0x10c>)
    b22e:	7813      	ldrb	r3, [r2, #0]
    b230:	3110      	adds	r1, #16
    b232:	438b      	bics	r3, r1
    b234:	7013      	strb	r3, [r2, #0]
        }
        conn_size = Total_Connections();
    b236:	4b12      	ldr	r3, [pc, #72]	; (b280 <AddConnection+0x110>)
    b238:	4798      	blx	r3
    b23a:	4b12      	ldr	r3, [pc, #72]	; (b284 <AddConnection+0x114>)
    b23c:	7018      	strb	r0, [r3, #0]
    #if defined (ENABLE_NETWORK_FREEZER)
		PDS_Store(PDS_EDC_ID);
    #endif

        return status;
    b23e:	e00a      	b.n	b256 <AddConnection+0xe6>
					ConnectionTable[connectionSlot].status.bits.RXOnWhenIdle = 0;
    b240:	0082      	lsls	r2, r0, #2
    b242:	1812      	adds	r2, r2, r0
    b244:	0052      	lsls	r2, r2, #1
    b246:	4907      	ldr	r1, [pc, #28]	; (b264 <AddConnection+0xf4>)
    b248:	188a      	adds	r2, r1, r2
    b24a:	7a11      	ldrb	r1, [r2, #8]
    b24c:	2501      	movs	r5, #1
    b24e:	43a9      	bics	r1, r5
    b250:	7211      	strb	r1, [r2, #8]
    b252:	e7df      	b.n	b214 <AddConnection+0xa4>
            return STATUS_NOT_ENOUGH_SPACE;
    b254:	24f1      	movs	r4, #241	; 0xf1
    }
    b256:	0020      	movs	r0, r4
    b258:	bc0c      	pop	{r2, r3}
    b25a:	4691      	mov	r9, r2
    b25c:	469a      	mov	sl, r3
    b25e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b260:	20002af0 	.word	0x20002af0
    b264:	2000280c 	.word	0x2000280c
    b268:	0000acf5 	.word	0x0000acf5
    b26c:	2000001c 	.word	0x2000001c
    b270:	2000287c 	.word	0x2000287c
    b274:	20002868 	.word	0x20002868
    b278:	20002808 	.word	0x20002808
    b27c:	20002880 	.word	0x20002880
    b280:	0000aac5 	.word	0x0000aac5
    b284:	20002865 	.word	0x20002865

0000b288 <MiApp_ConnectionMode>:
 *      None
 *
 *****************************************************************************************/ 
void MiApp_ConnectionMode(INPUT uint8_t Mode)
{
    if( Mode > 3 )
    b288:	2803      	cmp	r0, #3
    b28a:	d808      	bhi.n	b29e <MiApp_ConnectionMode+0x16>
    {
        return;
    }
    ConnMode = Mode;
    b28c:	4b04      	ldr	r3, [pc, #16]	; (b2a0 <MiApp_ConnectionMode+0x18>)
    b28e:	7018      	strb	r0, [r3, #0]
    P2PCapacityInfo = (P2PCapacityInfo & 0x0F) | (ConnMode << 4);
    b290:	4a04      	ldr	r2, [pc, #16]	; (b2a4 <MiApp_ConnectionMode+0x1c>)
    b292:	7811      	ldrb	r1, [r2, #0]
    b294:	230f      	movs	r3, #15
    b296:	400b      	ands	r3, r1
    b298:	0100      	lsls	r0, r0, #4
    b29a:	4318      	orrs	r0, r3
    b29c:	7010      	strb	r0, [r2, #0]
    
    #if defined(ENABLE_NETWORK_FREEZER)
		PDS_Store(PDS_CONNECTION_MODE_ID);
    #endif
}
    b29e:	4770      	bx	lr
    b2a0:	2000001c 	.word	0x2000001c
    b2a4:	20002859 	.word	0x20002859

0000b2a8 <MiApp_SubscribeDataIndicationCallback>:
 *      None
 *
 *****************************************************************************************/      
bool  MiApp_SubscribeDataIndicationCallback(PacketIndCallback_t callback)
{
    if (NULL != callback)
    b2a8:	2800      	cmp	r0, #0
    b2aa:	d003      	beq.n	b2b4 <MiApp_SubscribeDataIndicationCallback+0xc>
    {
        pktRxcallback = callback;
    b2ac:	4b02      	ldr	r3, [pc, #8]	; (b2b8 <MiApp_SubscribeDataIndicationCallback+0x10>)
    b2ae:	6018      	str	r0, [r3, #0]
        return true;
    b2b0:	2001      	movs	r0, #1
    }
    return false;
}
    b2b2:	4770      	bx	lr
    return false;
    b2b4:	2000      	movs	r0, #0
    b2b6:	e7fc      	b.n	b2b2 <MiApp_SubscribeDataIndicationCallback+0xa>
    b2b8:	2000049c 	.word	0x2000049c

0000b2bc <calculate_ToA>:
	}
}
#endif

uint16_t calculate_ToA(uint8_t payload_length)
{
    b2bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b2be:	46c6      	mov	lr, r8
    b2c0:	b500      	push	{lr}
    b2c2:	b086      	sub	sp, #24
	   Rev.7 - May 2020 */
	
	/* Tested only with EU868 channel plan SF = 7 to 12 , BW = 125 kHz */
	 
	    //LoRa Modem Settings
	    uint8_t spreadFactor = 0;
    b2c4:	ab04      	add	r3, sp, #16
    b2c6:	1dde      	adds	r6, r3, #7
    b2c8:	2300      	movs	r3, #0
    b2ca:	7033      	strb	r3, [r6, #0]
	    uint8_t bandWidth = 125;
	    uint8_t codingRate = 0;
    b2cc:	aa04      	add	r2, sp, #16
    b2ce:	1d97      	adds	r7, r2, #6
    b2d0:	7193      	strb	r3, [r2, #6]
	    bool ldro = false;   //LowDataRateOptimize
	    
	    //Packet Configuration
	    uint8_t payloadLength = 0;  
	    uint16_t programmedPreambleLength = 0;
    b2d2:	ad05      	add	r5, sp, #20
    b2d4:	802b      	strh	r3, [r5, #0]
	    bool implicitHeaderMode = 0; //Implicit or Explicit header
	    bool crcEnable = 0; //CRC
    b2d6:	3303      	adds	r3, #3
    b2d8:	4694      	mov	ip, r2
    b2da:	4463      	add	r3, ip
    b2dc:	4698      	mov	r8, r3
    b2de:	2300      	movs	r3, #0
    b2e0:	4642      	mov	r2, r8
    b2e2:	7013      	strb	r3, [r2, #0]
		if(payload_length > 255)
		{
			payload_length = 255;
		}
	    
	    RADIO_GetAttr(SPREADING_FACTOR,(void *)&spreadFactor);
    b2e4:	0031      	movs	r1, r6
    b2e6:	2016      	movs	r0, #22
    b2e8:	4c37      	ldr	r4, [pc, #220]	; (b3c8 <calculate_ToA+0x10c>)
    b2ea:	47a0      	blx	r4
	    RADIO_GetAttr(PREAMBLE_LEN,(void *)&programmedPreambleLength);
    b2ec:	0029      	movs	r1, r5
    b2ee:	2003      	movs	r0, #3
    b2f0:	47a0      	blx	r4
	    RADIO_GetAttr(CRC_ON,(void *)&crcEnable);
    b2f2:	4641      	mov	r1, r8
    b2f4:	2014      	movs	r0, #20
    b2f6:	47a0      	blx	r4
	    RADIO_GetAttr(ERROR_CODING_RATE,(void *)&codingRate);
    b2f8:	0039      	movs	r1, r7
    b2fa:	200b      	movs	r0, #11
    b2fc:	47a0      	blx	r4


	    symbolRate = (bandWidth * 1000) /  ((float)(1 << spreadFactor));
    b2fe:	7836      	ldrb	r6, [r6, #0]
    b300:	2001      	movs	r0, #1
    b302:	40b0      	lsls	r0, r6
    b304:	4b31      	ldr	r3, [pc, #196]	; (b3cc <calculate_ToA+0x110>)
    b306:	4798      	blx	r3
    b308:	1c01      	adds	r1, r0, #0
    b30a:	4c31      	ldr	r4, [pc, #196]	; (b3d0 <calculate_ToA+0x114>)
    b30c:	4831      	ldr	r0, [pc, #196]	; (b3d4 <calculate_ToA+0x118>)
    b30e:	47a0      	blx	r4
    b310:	1c01      	adds	r1, r0, #0
	    symbolTime = 1000 / (symbolRate);
    b312:	4831      	ldr	r0, [pc, #196]	; (b3d8 <calculate_ToA+0x11c>)
    b314:	47a0      	blx	r4
    b316:	1c04      	adds	r4, r0, #0
	    preambleDuration = (programmedPreambleLength + 4.25) * symbolTime;
    b318:	8828      	ldrh	r0, [r5, #0]
    b31a:	4b30      	ldr	r3, [pc, #192]	; (b3dc <calculate_ToA+0x120>)
    b31c:	4798      	blx	r3
    b31e:	2200      	movs	r2, #0
    b320:	4b2f      	ldr	r3, [pc, #188]	; (b3e0 <calculate_ToA+0x124>)
    b322:	4d30      	ldr	r5, [pc, #192]	; (b3e4 <calculate_ToA+0x128>)
    b324:	47a8      	blx	r5
    b326:	9000      	str	r0, [sp, #0]
    b328:	9101      	str	r1, [sp, #4]
    b32a:	1c20      	adds	r0, r4, #0
    b32c:	4b2e      	ldr	r3, [pc, #184]	; (b3e8 <calculate_ToA+0x12c>)
    b32e:	4798      	blx	r3
    b330:	0002      	movs	r2, r0
    b332:	000b      	movs	r3, r1
    b334:	9800      	ldr	r0, [sp, #0]
    b336:	9901      	ldr	r1, [sp, #4]
    b338:	4d2c      	ldr	r5, [pc, #176]	; (b3ec <calculate_ToA+0x130>)
    b33a:	47a8      	blx	r5
    b33c:	4b2c      	ldr	r3, [pc, #176]	; (b3f0 <calculate_ToA+0x134>)
    b33e:	4798      	blx	r3
    b340:	9000      	str	r0, [sp, #0]

	    if ( ((spreadFactor == 12) && ((bandWidth == 125) || (bandWidth == 250))) || ((spreadFactor == 11) && (bandWidth == 125)))
    b342:	2e0c      	cmp	r6, #12
    b344:	d03b      	beq.n	b3be <calculate_ToA+0x102>
    b346:	0033      	movs	r3, r6
    b348:	3b0b      	subs	r3, #11
    b34a:	425a      	negs	r2, r3
    b34c:	4153      	adcs	r3, r2
    b34e:	b2db      	uxtb	r3, r3
	    {
		    ldro = false;
	    }
	    
	    ceilValueNumerator = (8 * payloadLength - 4 * spreadFactor + 28 + 16 * crcEnable - 20 * implicitHeaderMode);
	    ceilValueDenominator= (4 * (spreadFactor - 2 * ldro));
    b350:	005b      	lsls	r3, r3, #1
    b352:	1af3      	subs	r3, r6, r3
    b354:	009b      	lsls	r3, r3, #2
	    ceilValue = (ceilValueNumerator + ceilValueDenominator - 1.0) / ceilValueDenominator;
    b356:	b2df      	uxtb	r7, r3
	    ceilValueNumerator = (8 * payloadLength - 4 * spreadFactor + 28 + 16 * crcEnable - 20 * implicitHeaderMode);
    b358:	ab04      	add	r3, sp, #16
    b35a:	78d8      	ldrb	r0, [r3, #3]
    b35c:	0080      	lsls	r0, r0, #2
    b35e:	1b80      	subs	r0, r0, r6
    b360:	3007      	adds	r0, #7
    b362:	0080      	lsls	r0, r0, #2
	    ceilValue = (ceilValueNumerator + ceilValueDenominator - 1.0) / ceilValueDenominator;
    b364:	b280      	uxth	r0, r0
    b366:	19c0      	adds	r0, r0, r7
    b368:	4d1c      	ldr	r5, [pc, #112]	; (b3dc <calculate_ToA+0x120>)
    b36a:	47a8      	blx	r5
    b36c:	2200      	movs	r2, #0
    b36e:	4b21      	ldr	r3, [pc, #132]	; (b3f4 <calculate_ToA+0x138>)
    b370:	4e21      	ldr	r6, [pc, #132]	; (b3f8 <calculate_ToA+0x13c>)
    b372:	47b0      	blx	r6
    b374:	9002      	str	r0, [sp, #8]
    b376:	9103      	str	r1, [sp, #12]
    b378:	0038      	movs	r0, r7
    b37a:	47a8      	blx	r5
    b37c:	0002      	movs	r2, r0
    b37e:	000b      	movs	r3, r1
    b380:	9802      	ldr	r0, [sp, #8]
    b382:	9903      	ldr	r1, [sp, #12]
    b384:	4e1d      	ldr	r6, [pc, #116]	; (b3fc <calculate_ToA+0x140>)
    b386:	47b0      	blx	r6
    b388:	4b1d      	ldr	r3, [pc, #116]	; (b400 <calculate_ToA+0x144>)
    b38a:	4798      	blx	r3
	    
	    if ((ceilValue * (codingRate + 4)) > 0)
    b38c:	b282      	uxth	r2, r0
    b38e:	ab04      	add	r3, sp, #16
    b390:	7998      	ldrb	r0, [r3, #6]
    b392:	3004      	adds	r0, #4
    b394:	4350      	muls	r0, r2
    b396:	2800      	cmp	r0, #0
    b398:	dd13      	ble.n	b3c2 <calculate_ToA+0x106>
	    {
		    maxCeilValue = ceilValue * (codingRate + 4);
    b39a:	4b0c      	ldr	r3, [pc, #48]	; (b3cc <calculate_ToA+0x110>)
    b39c:	4798      	blx	r3
	    else
	    {
		    maxCeilValue = 0;
	    }

	    numberOfPayloadSymbols = 8 + maxCeilValue;
    b39e:	4e19      	ldr	r6, [pc, #100]	; (b404 <calculate_ToA+0x148>)
    b3a0:	2182      	movs	r1, #130	; 0x82
    b3a2:	05c9      	lsls	r1, r1, #23
    b3a4:	47b0      	blx	r6
	    payloadDuration = numberOfPayloadSymbols * symbolTime;
    b3a6:	1c21      	adds	r1, r4, #0
    b3a8:	4b17      	ldr	r3, [pc, #92]	; (b408 <calculate_ToA+0x14c>)
    b3aa:	4798      	blx	r3
		
	    totalTimeOnAir = preambleDuration + payloadDuration;
    b3ac:	9900      	ldr	r1, [sp, #0]
    b3ae:	47b0      	blx	r6
		
		return ((uint16_t)totalTimeOnAir) ;
    b3b0:	4b16      	ldr	r3, [pc, #88]	; (b40c <calculate_ToA+0x150>)
    b3b2:	4798      	blx	r3
    b3b4:	b280      	uxth	r0, r0
    b3b6:	b006      	add	sp, #24
    b3b8:	bc04      	pop	{r2}
    b3ba:	4690      	mov	r8, r2
    b3bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		    ldro =  true;
    b3be:	2301      	movs	r3, #1
    b3c0:	e7c6      	b.n	b350 <calculate_ToA+0x94>
		    maxCeilValue = 0;
    b3c2:	2000      	movs	r0, #0
    b3c4:	e7eb      	b.n	b39e <calculate_ToA+0xe2>
    b3c6:	46c0      	nop			; (mov r8, r8)
    b3c8:	0000dc25 	.word	0x0000dc25
    b3cc:	00013639 	.word	0x00013639
    b3d0:	00012ca1 	.word	0x00012ca1
    b3d4:	47f42400 	.word	0x47f42400
    b3d8:	447a0000 	.word	0x447a0000
    b3dc:	00014f81 	.word	0x00014f81
    b3e0:	40110000 	.word	0x40110000
    b3e4:	00013765 	.word	0x00013765
    b3e8:	00015075 	.word	0x00015075
    b3ec:	000143ed 	.word	0x000143ed
    b3f0:	00015119 	.word	0x00015119
    b3f4:	3ff00000 	.word	0x3ff00000
    b3f8:	000148ed 	.word	0x000148ed
    b3fc:	00013d85 	.word	0x00013d85
    b400:	00012781 	.word	0x00012781
    b404:	0001297d 	.word	0x0001297d
    b408:	00013081 	.word	0x00013081
    b40c:	00012751 	.word	0x00012751

0000b410 <P2PTasks>:
{
    b410:	b5f0      	push	{r4, r5, r6, r7, lr}
    b412:	46de      	mov	lr, fp
    b414:	4657      	mov	r7, sl
    b416:	464e      	mov	r6, r9
    b418:	4645      	mov	r5, r8
    b41a:	b5e0      	push	{r5, r6, r7, lr}
    b41c:	b08b      	sub	sp, #44	; 0x2c
    MiMAC_Task();
    b41e:	4bb6      	ldr	r3, [pc, #728]	; (b6f8 <P2PTasks+0x2e8>)
    b420:	4798      	blx	r3
            if( indirectMessages[i].flags.bits.isValid )
    b422:	4bb6      	ldr	r3, [pc, #728]	; (b6fc <P2PTasks+0x2ec>)
    b424:	7b9b      	ldrb	r3, [r3, #14]
    b426:	07db      	lsls	r3, r3, #31
    b428:	d423      	bmi.n	b472 <P2PTasks+0x62>
    b42a:	2391      	movs	r3, #145	; 0x91
    b42c:	005b      	lsls	r3, r3, #1
    b42e:	4ab3      	ldr	r2, [pc, #716]	; (b6fc <P2PTasks+0x2ec>)
    b430:	5cd3      	ldrb	r3, [r2, r3]
    b432:	07db      	lsls	r3, r3, #31
    b434:	d434      	bmi.n	b4a0 <P2PTasks+0x90>
	ack_timeout_variable = calculate_ToA(PACKETLEN_ACK);
    b436:	2016      	movs	r0, #22
    b438:	4bb1      	ldr	r3, [pc, #708]	; (b700 <P2PTasks+0x2f0>)
    b43a:	4798      	blx	r3
	ack_timeout_variable = (ack_timeout_variable + TOTAL_ACK_PROCESSING_DELAY) * 1000;
    b43c:	23fa      	movs	r3, #250	; 0xfa
    b43e:	009b      	lsls	r3, r3, #2
    b440:	4358      	muls	r0, r3
    b442:	4bb0      	ldr	r3, [pc, #704]	; (b704 <P2PTasks+0x2f4>)
    b444:	469c      	mov	ip, r3
    b446:	4460      	add	r0, ip
    b448:	4baf      	ldr	r3, [pc, #700]	; (b708 <P2PTasks+0x2f8>)
    b44a:	6018      	str	r0, [r3, #0]
	if((AckReqData) && (DataTxAckTimer.Val)) // AckReqData
    b44c:	4baf      	ldr	r3, [pc, #700]	; (b70c <P2PTasks+0x2fc>)
    b44e:	781b      	ldrb	r3, [r3, #0]
    b450:	2b00      	cmp	r3, #0
    b452:	d003      	beq.n	b45c <P2PTasks+0x4c>
    b454:	4bae      	ldr	r3, [pc, #696]	; (b710 <P2PTasks+0x300>)
    b456:	681b      	ldr	r3, [r3, #0]
    b458:	2b00      	cmp	r3, #0
    b45a:	d13b      	bne.n	b4d4 <P2PTasks+0xc4>
    if( P2PStatus.bits.RxHasUserData == 0 && MiMAC_ReceivedPacket() )
    b45c:	4bad      	ldr	r3, [pc, #692]	; (b714 <P2PTasks+0x304>)
    b45e:	781b      	ldrb	r3, [r3, #0]
    b460:	071b      	lsls	r3, r3, #28
    b462:	d54c      	bpl.n	b4fe <P2PTasks+0xee>
}
    b464:	b00b      	add	sp, #44	; 0x2c
    b466:	bc3c      	pop	{r2, r3, r4, r5}
    b468:	4690      	mov	r8, r2
    b46a:	4699      	mov	r9, r3
    b46c:	46a2      	mov	sl, r4
    b46e:	46ab      	mov	fp, r5
    b470:	bdf0      	pop	{r4, r5, r6, r7, pc}
                tmpTick.Val = MiWi_TickGet();
    b472:	4ba9      	ldr	r3, [pc, #676]	; (b718 <P2PTasks+0x308>)
    b474:	4798      	blx	r3
                if( MiWi_TickGetDiff(tmpTick, indirectMessages[i].TickStart) > INDIRECT_MESSAGE_TIMEOUT )
    b476:	4ba1      	ldr	r3, [pc, #644]	; (b6fc <P2PTasks+0x2ec>)
    b478:	6819      	ldr	r1, [r3, #0]
    b47a:	4ba8      	ldr	r3, [pc, #672]	; (b71c <P2PTasks+0x30c>)
    b47c:	4798      	blx	r3
    b47e:	4ba8      	ldr	r3, [pc, #672]	; (b720 <P2PTasks+0x310>)
    b480:	4298      	cmp	r0, r3
    b482:	d9d2      	bls.n	b42a <P2PTasks+0x1a>
                    indirectMessages[i].flags.Val = 0x00;   
    b484:	4b9d      	ldr	r3, [pc, #628]	; (b6fc <P2PTasks+0x2ec>)
    b486:	2200      	movs	r2, #0
    b488:	739a      	strb	r2, [r3, #14]
                    indirectMessages[i].indirectConfCallback(indirectMessages[i].indirectDataHandle, TRANSACTION_EXPIRED, indirectMessages[i].PayLoad);
    b48a:	001a      	movs	r2, r3
    b48c:	3210      	adds	r2, #16
    b48e:	2110      	movs	r1, #16
    b490:	31ff      	adds	r1, #255	; 0xff
    b492:	5c58      	ldrb	r0, [r3, r1]
    b494:	3101      	adds	r1, #1
    b496:	585b      	ldr	r3, [r3, r1]
    b498:	390c      	subs	r1, #12
    b49a:	39ff      	subs	r1, #255	; 0xff
    b49c:	4798      	blx	r3
    b49e:	e7c4      	b.n	b42a <P2PTasks+0x1a>
                tmpTick.Val = MiWi_TickGet();
    b4a0:	4b9d      	ldr	r3, [pc, #628]	; (b718 <P2PTasks+0x308>)
    b4a2:	4798      	blx	r3
                if( MiWi_TickGetDiff(tmpTick, indirectMessages[i].TickStart) > INDIRECT_MESSAGE_TIMEOUT )
    b4a4:	238a      	movs	r3, #138	; 0x8a
    b4a6:	005b      	lsls	r3, r3, #1
    b4a8:	4a94      	ldr	r2, [pc, #592]	; (b6fc <P2PTasks+0x2ec>)
    b4aa:	58d1      	ldr	r1, [r2, r3]
    b4ac:	4b9b      	ldr	r3, [pc, #620]	; (b71c <P2PTasks+0x30c>)
    b4ae:	4798      	blx	r3
    b4b0:	4b9b      	ldr	r3, [pc, #620]	; (b720 <P2PTasks+0x310>)
    b4b2:	4298      	cmp	r0, r3
    b4b4:	d9bf      	bls.n	b436 <P2PTasks+0x26>
                    indirectMessages[i].flags.Val = 0x00;   
    b4b6:	4b91      	ldr	r3, [pc, #580]	; (b6fc <P2PTasks+0x2ec>)
    b4b8:	2100      	movs	r1, #0
    b4ba:	2291      	movs	r2, #145	; 0x91
    b4bc:	0052      	lsls	r2, r2, #1
    b4be:	5499      	strb	r1, [r3, r2]
                    indirectMessages[i].indirectConfCallback(indirectMessages[i].indirectDataHandle, TRANSACTION_EXPIRED, indirectMessages[i].PayLoad);
    b4c0:	001a      	movs	r2, r3
    b4c2:	3225      	adds	r2, #37	; 0x25
    b4c4:	32ff      	adds	r2, #255	; 0xff
    b4c6:	4997      	ldr	r1, [pc, #604]	; (b724 <P2PTasks+0x314>)
    b4c8:	5c58      	ldrb	r0, [r3, r1]
    b4ca:	3101      	adds	r1, #1
    b4cc:	585b      	ldr	r3, [r3, r1]
    b4ce:	2105      	movs	r1, #5
    b4d0:	4798      	blx	r3
    b4d2:	e7b0      	b.n	b436 <P2PTasks+0x26>
		tmpTick.Val = MiWi_TickGet();
    b4d4:	4b90      	ldr	r3, [pc, #576]	; (b718 <P2PTasks+0x308>)
    b4d6:	4798      	blx	r3
		if( MiWi_TickGetDiff(tmpTick, DataTxAckTimer) > ((ack_timeout_variable) * ACK_TIMEOUT_INTERVAL) )
    b4d8:	4b8d      	ldr	r3, [pc, #564]	; (b710 <P2PTasks+0x300>)
    b4da:	6819      	ldr	r1, [r3, #0]
    b4dc:	4b8f      	ldr	r3, [pc, #572]	; (b71c <P2PTasks+0x30c>)
    b4de:	4798      	blx	r3
    b4e0:	4b89      	ldr	r3, [pc, #548]	; (b708 <P2PTasks+0x2f8>)
    b4e2:	681b      	ldr	r3, [r3, #0]
    b4e4:	4298      	cmp	r0, r3
    b4e6:	d9b9      	bls.n	b45c <P2PTasks+0x4c>
			DataTxAckTimer.Val =0;
    b4e8:	2300      	movs	r3, #0
    b4ea:	4a89      	ldr	r2, [pc, #548]	; (b710 <P2PTasks+0x300>)
    b4ec:	6013      	str	r3, [r2, #0]
			AckReqData = 0;
    b4ee:	4a87      	ldr	r2, [pc, #540]	; (b70c <P2PTasks+0x2fc>)
    b4f0:	7013      	strb	r3, [r2, #0]
			MiMAC_RetryPacket();
    b4f2:	4b8d      	ldr	r3, [pc, #564]	; (b728 <P2PTasks+0x318>)
    b4f4:	4798      	blx	r3
			printf("\r\n Ack Timeout\r\n");
    b4f6:	488d      	ldr	r0, [pc, #564]	; (b72c <P2PTasks+0x31c>)
    b4f8:	4b8d      	ldr	r3, [pc, #564]	; (b730 <P2PTasks+0x320>)
    b4fa:	4798      	blx	r3
    b4fc:	e7ae      	b.n	b45c <P2PTasks+0x4c>
    if( P2PStatus.bits.RxHasUserData == 0 && MiMAC_ReceivedPacket() )
    b4fe:	4b8d      	ldr	r3, [pc, #564]	; (b734 <P2PTasks+0x324>)
    b500:	4798      	blx	r3
    b502:	2800      	cmp	r0, #0
    b504:	d0ae      	beq.n	b464 <P2PTasks+0x54>
        FW_Stat = false;  // Used for SW_Generated ACK T PAN CO
    b506:	2200      	movs	r2, #0
    b508:	4b8b      	ldr	r3, [pc, #556]	; (b738 <P2PTasks+0x328>)
    b50a:	701a      	strb	r2, [r3, #0]
            temp_bit = MACRxPacket.flags.bits.broadcast;
    b50c:	4b8b      	ldr	r3, [pc, #556]	; (b73c <P2PTasks+0x32c>)
    b50e:	7819      	ldrb	r1, [r3, #0]
    b510:	074b      	lsls	r3, r1, #29
    b512:	0fdb      	lsrs	r3, r3, #31
    b514:	4a8a      	ldr	r2, [pc, #552]	; (b740 <P2PTasks+0x330>)
    b516:	7013      	strb	r3, [r2, #0]
            rxMessage.flags.bits.broadcast = temp_bit;
    b518:	2203      	movs	r2, #3
        rxMessage.flags.bits.secEn = MACRxPacket.flags.bits.secEn;
    b51a:	08cc      	lsrs	r4, r1, #3
    b51c:	2001      	movs	r0, #1
    b51e:	4004      	ands	r4, r0
    b520:	00e4      	lsls	r4, r4, #3
    b522:	4013      	ands	r3, r2
        rxMessage.flags.bits.command = (MACRxPacket.flags.bits.packetType == PACKET_TYPE_COMMAND) ? 1:0;
    b524:	400a      	ands	r2, r1
    b526:	3a01      	subs	r2, #1
    b528:	4255      	negs	r5, r2
    b52a:	416a      	adcs	r2, r5
    b52c:	4002      	ands	r2, r0
    b52e:	0152      	lsls	r2, r2, #5
    b530:	4323      	orrs	r3, r4
        rxMessage.flags.bits.srcPrsnt = MACRxPacket.flags.bits.sourcePrsnt;
    b532:	09cc      	lsrs	r4, r1, #7
    b534:	4020      	ands	r0, r4
    b536:	0180      	lsls	r0, r0, #6
    b538:	4313      	orrs	r3, r2
    b53a:	4303      	orrs	r3, r0
    b53c:	4a81      	ldr	r2, [pc, #516]	; (b744 <P2PTasks+0x334>)
    b53e:	7013      	strb	r3, [r2, #0]
        if( MACRxPacket.flags.bits.sourcePrsnt )
    b540:	b249      	sxtb	r1, r1
    b542:	2900      	cmp	r1, #0
    b544:	db36      	blt.n	b5b4 <P2PTasks+0x1a4>
            rxMessage.SourcePANID.Val = MACRxPacket.SourcePANID.Val;
    b546:	4a7d      	ldr	r2, [pc, #500]	; (b73c <P2PTasks+0x32c>)
    b548:	8a17      	ldrh	r7, [r2, #16]
    b54a:	4b7e      	ldr	r3, [pc, #504]	; (b744 <P2PTasks+0x334>)
    b54c:	805f      	strh	r7, [r3, #2]
        rxMessage.PayloadSize = MACRxPacket.PayloadLen;
    b54e:	7b11      	ldrb	r1, [r2, #12]
    b550:	7319      	strb	r1, [r3, #12]
        rxMessage.Payload = MACRxPacket.Payload;
    b552:	6895      	ldr	r5, [r2, #8]
    b554:	609d      	str	r5, [r3, #8]
            rxMessage.PacketLQI = MACRxPacket.LQIValue;
    b556:	7b90      	ldrb	r0, [r2, #14]
    b558:	4680      	mov	r8, r0
    b55a:	7398      	strb	r0, [r3, #14]
            rxMessage.PacketRSSI = MACRxPacket.RSSIValue;
    b55c:	7b52      	ldrb	r2, [r2, #13]
    b55e:	4691      	mov	r9, r2
    b560:	735a      	strb	r2, [r3, #13]
        if( rxMessage.flags.bits.command )
    b562:	781b      	ldrb	r3, [r3, #0]
    b564:	069b      	lsls	r3, r3, #26
    b566:	d400      	bmi.n	b56a <P2PTasks+0x15a>
    b568:	e277      	b.n	ba5a <P2PTasks+0x64a>
            switch( rxMessage.Payload[0] )
    b56a:	782b      	ldrb	r3, [r5, #0]
    b56c:	b2da      	uxtb	r2, r3
    b56e:	2a83      	cmp	r2, #131	; 0x83
    b570:	d100      	bne.n	b574 <P2PTasks+0x164>
    b572:	e210      	b.n	b996 <P2PTasks+0x586>
    b574:	d923      	bls.n	b5be <P2PTasks+0x1ae>
    b576:	b2da      	uxtb	r2, r3
    b578:	2a91      	cmp	r2, #145	; 0x91
    b57a:	d100      	bne.n	b57e <P2PTasks+0x16e>
    b57c:	e174      	b.n	b868 <P2PTasks+0x458>
    b57e:	d935      	bls.n	b5ec <P2PTasks+0x1dc>
    b580:	b2da      	uxtb	r2, r3
    b582:	2a92      	cmp	r2, #146	; 0x92
    b584:	d100      	bne.n	b588 <P2PTasks+0x178>
    b586:	e1e1      	b.n	b94c <P2PTasks+0x53c>
    b588:	2a97      	cmp	r2, #151	; 0x97
    b58a:	d11f      	bne.n	b5cc <P2PTasks+0x1bc>
                            if( P2PStatus.bits.Resync )
    b58c:	4b61      	ldr	r3, [pc, #388]	; (b714 <P2PTasks+0x304>)
    b58e:	781b      	ldrb	r3, [r3, #0]
    b590:	069b      	lsls	r3, r3, #26
    b592:	d500      	bpl.n	b596 <P2PTasks+0x186>
    b594:	e198      	b.n	b8c8 <P2PTasks+0x4b8>
                                    for(; i < ActiveScanResultIndex; i++)
    b596:	4b6c      	ldr	r3, [pc, #432]	; (b748 <P2PTasks+0x338>)
    b598:	781b      	ldrb	r3, [r3, #0]
    b59a:	469a      	mov	sl, r3
    b59c:	2b00      	cmp	r3, #0
    b59e:	d100      	bne.n	b5a2 <P2PTasks+0x192>
    b5a0:	e1af      	b.n	b902 <P2PTasks+0x4f2>
                                        if( (ActiveScanResults[i].Channel == currentChannel) &&
    b5a2:	4b6a      	ldr	r3, [pc, #424]	; (b74c <P2PTasks+0x33c>)
    b5a4:	781b      	ldrb	r3, [r3, #0]
    b5a6:	469b      	mov	fp, r3
                                            isSameAddress(ActiveScanResults[i].Address, rxMessage.SourceAddress)
    b5a8:	4b66      	ldr	r3, [pc, #408]	; (b744 <P2PTasks+0x334>)
    b5aa:	685b      	ldr	r3, [r3, #4]
    b5ac:	9306      	str	r3, [sp, #24]
    b5ae:	4e68      	ldr	r6, [pc, #416]	; (b750 <P2PTasks+0x340>)
    b5b0:	2400      	movs	r4, #0
    b5b2:	e196      	b.n	b8e2 <P2PTasks+0x4d2>
            rxMessage.SourceAddress = MACRxPacket.SourceAddress;
    b5b4:	4b61      	ldr	r3, [pc, #388]	; (b73c <P2PTasks+0x32c>)
    b5b6:	685a      	ldr	r2, [r3, #4]
    b5b8:	4b62      	ldr	r3, [pc, #392]	; (b744 <P2PTasks+0x334>)
    b5ba:	605a      	str	r2, [r3, #4]
    b5bc:	e7c3      	b.n	b546 <P2PTasks+0x136>
            switch( rxMessage.Payload[0] )
    b5be:	2a81      	cmp	r2, #129	; 0x81
    b5c0:	d023      	beq.n	b60a <P2PTasks+0x1fa>
    b5c2:	d900      	bls.n	b5c6 <P2PTasks+0x1b6>
    b5c4:	e118      	b.n	b7f8 <P2PTasks+0x3e8>
    b5c6:	2b04      	cmp	r3, #4
    b5c8:	d100      	bne.n	b5cc <P2PTasks+0x1bc>
    b5ca:	e1e4      	b.n	b996 <P2PTasks+0x586>
                    P2PStatus.bits.RxHasUserData = 1;
    b5cc:	4c51      	ldr	r4, [pc, #324]	; (b714 <P2PTasks+0x304>)
    b5ce:	7823      	ldrb	r3, [r4, #0]
    b5d0:	2208      	movs	r2, #8
    b5d2:	4313      	orrs	r3, r2
    b5d4:	7023      	strb	r3, [r4, #0]
					pktRxcallback(&rxMessage);
    b5d6:	4b5f      	ldr	r3, [pc, #380]	; (b754 <P2PTasks+0x344>)
    b5d8:	681b      	ldr	r3, [r3, #0]
    b5da:	485a      	ldr	r0, [pc, #360]	; (b744 <P2PTasks+0x334>)
    b5dc:	4798      	blx	r3
					P2PStatus.bits.RxHasUserData = 0;
    b5de:	7823      	ldrb	r3, [r4, #0]
    b5e0:	2208      	movs	r2, #8
    b5e2:	4393      	bics	r3, r2
    b5e4:	7023      	strb	r3, [r4, #0]
					MiMAC_DiscardPacket();
    b5e6:	4b5c      	ldr	r3, [pc, #368]	; (b758 <P2PTasks+0x348>)
    b5e8:	4798      	blx	r3
                    break;
    b5ea:	e245      	b.n	ba78 <P2PTasks+0x668>
            switch( rxMessage.Payload[0] )
    b5ec:	2a87      	cmp	r2, #135	; 0x87
    b5ee:	d1ed      	bne.n	b5cc <P2PTasks+0x1bc>
                        if(ConnMode > ENABLE_ACTIVE_SCAN_RSP)
    b5f0:	4b5a      	ldr	r3, [pc, #360]	; (b75c <P2PTasks+0x34c>)
    b5f2:	781b      	ldrb	r3, [r3, #0]
    b5f4:	2b02      	cmp	r3, #2
    b5f6:	d87b      	bhi.n	b6f0 <P2PTasks+0x2e0>
                            if( currentChannel != rxMessage.Payload[1] )
    b5f8:	786a      	ldrb	r2, [r5, #1]
    b5fa:	4b54      	ldr	r3, [pc, #336]	; (b74c <P2PTasks+0x33c>)
    b5fc:	781b      	ldrb	r3, [r3, #0]
    b5fe:	429a      	cmp	r2, r3
    b600:	d100      	bne.n	b604 <P2PTasks+0x1f4>
    b602:	e0c7      	b.n	b794 <P2PTasks+0x384>
                                MiMAC_DiscardPacket();
    b604:	4b54      	ldr	r3, [pc, #336]	; (b758 <P2PTasks+0x348>)
    b606:	4798      	blx	r3
                                break;
    b608:	e236      	b.n	ba78 <P2PTasks+0x668>
                                if( currentChannel != rxMessage.Payload[1] )
    b60a:	786a      	ldrb	r2, [r5, #1]
    b60c:	4b4f      	ldr	r3, [pc, #316]	; (b74c <P2PTasks+0x33c>)
    b60e:	781b      	ldrb	r3, [r3, #0]
    b610:	429a      	cmp	r2, r3
    b612:	d002      	beq.n	b61a <P2PTasks+0x20a>
                                    MiMAC_DiscardPacket();
    b614:	4b50      	ldr	r3, [pc, #320]	; (b758 <P2PTasks+0x348>)
    b616:	4798      	blx	r3
                                    break;
    b618:	e22e      	b.n	ba78 <P2PTasks+0x668>
                                if( ConnMode == DISABLE_ALL_CONN )
    b61a:	4b50      	ldr	r3, [pc, #320]	; (b75c <P2PTasks+0x34c>)
    b61c:	781b      	ldrb	r3, [r3, #0]
    b61e:	2b03      	cmp	r3, #3
    b620:	d047      	beq.n	b6b2 <P2PTasks+0x2a2>
                                    if( rxMessage.SourcePANID.Val != 0xFFFF &&
    b622:	4b4f      	ldr	r3, [pc, #316]	; (b760 <P2PTasks+0x350>)
    b624:	429f      	cmp	r7, r3
    b626:	d006      	beq.n	b636 <P2PTasks+0x226>
                                        rxMessage.SourcePANID.Val != myPANID.Val &&
    b628:	4b4e      	ldr	r3, [pc, #312]	; (b764 <P2PTasks+0x354>)
                                    if( rxMessage.SourcePANID.Val != 0xFFFF &&
    b62a:	881b      	ldrh	r3, [r3, #0]
    b62c:	42bb      	cmp	r3, r7
    b62e:	d002      	beq.n	b636 <P2PTasks+0x226>
                                        rxMessage.SourcePANID.Val != myPANID.Val &&
    b630:	2902      	cmp	r1, #2
    b632:	d900      	bls.n	b636 <P2PTasks+0x226>
    b634:	e235      	b.n	baa2 <P2PTasks+0x692>
                                    status = AddConnection();
    b636:	4b4c      	ldr	r3, [pc, #304]	; (b768 <P2PTasks+0x358>)
    b638:	4798      	blx	r3
    b63a:	0005      	movs	r5, r0
                                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    b63c:	4b47      	ldr	r3, [pc, #284]	; (b75c <P2PTasks+0x34c>)
    b63e:	781b      	ldrb	r3, [r3, #0]
    b640:	2b01      	cmp	r3, #1
    b642:	d039      	beq.n	b6b8 <P2PTasks+0x2a8>
                                dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(TX_BUFFER_SIZE));
    b644:	20e0      	movs	r0, #224	; 0xe0
    b646:	4b49      	ldr	r3, [pc, #292]	; (b76c <P2PTasks+0x35c>)
    b648:	4798      	blx	r3
    b64a:	1e04      	subs	r4, r0, #0
                                if (NULL == dataPtr)
    b64c:	d100      	bne.n	b650 <P2PTasks+0x240>
    b64e:	e709      	b.n	b464 <P2PTasks+0x54>
                                dataPtr[dataLen++] = CMD_P2P_CONNECTION_RESPONSE;
    b650:	2391      	movs	r3, #145	; 0x91
    b652:	7003      	strb	r3, [r0, #0]
                                dataPtr[dataLen++] = status;
    b654:	7045      	strb	r5, [r0, #1]
    b656:	2602      	movs	r6, #2
                                if( status == STATUS_SUCCESS ||
    b658:	2d01      	cmp	r5, #1
    b65a:	d93d      	bls.n	b6d8 <P2PTasks+0x2c8>
                                MiMAC_DiscardPacket();
    b65c:	4b3e      	ldr	r3, [pc, #248]	; (b758 <P2PTasks+0x348>)
    b65e:	4798      	blx	r3
                                i = PHY_RandomReq();
    b660:	4b43      	ldr	r3, [pc, #268]	; (b770 <P2PTasks+0x360>)
    b662:	4798      	blx	r3
    b664:	b2c5      	uxtb	r5, r0
                                delay_s(i % (CONNECTION_INTERVAL-1));
    b666:	2103      	movs	r1, #3
    b668:	0028      	movs	r0, r5
    b66a:	4b42      	ldr	r3, [pc, #264]	; (b774 <P2PTasks+0x364>)
    b66c:	4798      	blx	r3
    b66e:	b2c9      	uxtb	r1, r1
    b670:	2900      	cmp	r1, #0
    b672:	d039      	beq.n	b6e8 <P2PTasks+0x2d8>
    b674:	20fa      	movs	r0, #250	; 0xfa
    b676:	0080      	lsls	r0, r0, #2
    b678:	4368      	muls	r0, r5
    b67a:	2103      	movs	r1, #3
    b67c:	4b3e      	ldr	r3, [pc, #248]	; (b778 <P2PTasks+0x368>)
    b67e:	4798      	blx	r3
    b680:	0008      	movs	r0, r1
    b682:	4b3e      	ldr	r3, [pc, #248]	; (b77c <P2PTasks+0x36c>)
    b684:	4798      	blx	r3
                                        SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn, 
    b686:	4b2f      	ldr	r3, [pc, #188]	; (b744 <P2PTasks+0x334>)
    b688:	685a      	ldr	r2, [r3, #4]
    b68a:	8859      	ldrh	r1, [r3, #2]
    b68c:	483c      	ldr	r0, [pc, #240]	; (b780 <P2PTasks+0x370>)
    b68e:	9005      	str	r0, [sp, #20]
    b690:	2001      	movs	r0, #1
    b692:	9004      	str	r0, [sp, #16]
    b694:	2000      	movs	r0, #0
    b696:	9003      	str	r0, [sp, #12]
    b698:	9402      	str	r4, [sp, #8]
    b69a:	9601      	str	r6, [sp, #4]
    b69c:	781b      	ldrb	r3, [r3, #0]
    b69e:	071b      	lsls	r3, r3, #28
    b6a0:	0fdb      	lsrs	r3, r3, #31
    b6a2:	9300      	str	r3, [sp, #0]
    b6a4:	2301      	movs	r3, #1
    b6a6:	4c37      	ldr	r4, [pc, #220]	; (b784 <P2PTasks+0x374>)
    b6a8:	47a0      	blx	r4
								delay_ms (100);
    b6aa:	2064      	movs	r0, #100	; 0x64
    b6ac:	4b33      	ldr	r3, [pc, #204]	; (b77c <P2PTasks+0x36c>)
    b6ae:	4798      	blx	r3
                        break; 
    b6b0:	e1e2      	b.n	ba78 <P2PTasks+0x668>
                                    MiMAC_DiscardPacket();
    b6b2:	4b29      	ldr	r3, [pc, #164]	; (b758 <P2PTasks+0x348>)
    b6b4:	4798      	blx	r3
                                    break;
    b6b6:	e1df      	b.n	ba78 <P2PTasks+0x668>
                                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    b6b8:	3801      	subs	r0, #1
    b6ba:	b2c0      	uxtb	r0, r0
    b6bc:	2801      	cmp	r0, #1
    b6be:	d9c1      	bls.n	b644 <P2PTasks+0x234>
                                dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(TX_BUFFER_SIZE));
    b6c0:	20e0      	movs	r0, #224	; 0xe0
    b6c2:	4b2a      	ldr	r3, [pc, #168]	; (b76c <P2PTasks+0x35c>)
    b6c4:	4798      	blx	r3
    b6c6:	1e04      	subs	r4, r0, #0
                                if (NULL == dataPtr)
    b6c8:	d100      	bne.n	b6cc <P2PTasks+0x2bc>
    b6ca:	e6cb      	b.n	b464 <P2PTasks+0x54>
                                dataPtr[dataLen++] = CMD_P2P_CONNECTION_RESPONSE;
    b6cc:	2391      	movs	r3, #145	; 0x91
    b6ce:	7023      	strb	r3, [r4, #0]
                                dataPtr[dataLen++] = status;
    b6d0:	3362      	adds	r3, #98	; 0x62
    b6d2:	7063      	strb	r3, [r4, #1]
    b6d4:	2602      	movs	r6, #2
    b6d6:	e7c1      	b.n	b65c <P2PTasks+0x24c>
                                    dataPtr[dataLen++] = P2PCapacityInfo;
    b6d8:	4b2b      	ldr	r3, [pc, #172]	; (b788 <P2PTasks+0x378>)
    b6da:	781b      	ldrb	r3, [r3, #0]
    b6dc:	7083      	strb	r3, [r0, #2]
                                            dataPtr[dataLen++] = AdditionalNodeID[i];
    b6de:	4b2b      	ldr	r3, [pc, #172]	; (b78c <P2PTasks+0x37c>)
    b6e0:	781b      	ldrb	r3, [r3, #0]
    b6e2:	70c3      	strb	r3, [r0, #3]
    b6e4:	3602      	adds	r6, #2
    b6e6:	e7b9      	b.n	b65c <P2PTasks+0x24c>
                                delay_s(i % (CONNECTION_INTERVAL-1));
    b6e8:	2001      	movs	r0, #1
    b6ea:	4b29      	ldr	r3, [pc, #164]	; (b790 <P2PTasks+0x380>)
    b6ec:	4798      	blx	r3
    b6ee:	e7ca      	b.n	b686 <P2PTasks+0x276>
                                MiMAC_DiscardPacket();
    b6f0:	4b19      	ldr	r3, [pc, #100]	; (b758 <P2PTasks+0x348>)
    b6f2:	4798      	blx	r3
                                break;
    b6f4:	e1c0      	b.n	ba78 <P2PTasks+0x668>
    b6f6:	46c0      	nop			; (mov r8, r8)
    b6f8:	0000a671 	.word	0x0000a671
    b6fc:	20002884 	.word	0x20002884
    b700:	0000b2bd 	.word	0x0000b2bd
    b704:	000c8708 	.word	0x000c8708
    b708:	20000498 	.word	0x20000498
    b70c:	20000483 	.word	0x20000483
    b710:	20002b04 	.word	0x20002b04
    b714:	20002880 	.word	0x20002880
    b718:	0000c111 	.word	0x0000c111
    b71c:	0000c171 	.word	0x0000c171
    b720:	016e3600 	.word	0x016e3600
    b724:	00000223 	.word	0x00000223
    b728:	00009f21 	.word	0x00009f21
    b72c:	00017b1c 	.word	0x00017b1c
    b730:	00015c95 	.word	0x00015c95
    b734:	00009f65 	.word	0x00009f65
    b738:	20002866 	.word	0x20002866
    b73c:	20002844 	.word	0x20002844
    b740:	20002864 	.word	0x20002864
    b744:	20002af0 	.word	0x20002af0
    b748:	20002b00 	.word	0x20002b00
    b74c:	2000001d 	.word	0x2000001d
    b750:	20002ab0 	.word	0x20002ab0
    b754:	2000049c 	.word	0x2000049c
    b758:	00009ee5 	.word	0x00009ee5
    b75c:	2000001c 	.word	0x2000001c
    b760:	0000ffff 	.word	0x0000ffff
    b764:	2000285c 	.word	0x2000285c
    b768:	0000b171 	.word	0x0000b171
    b76c:	0000bed1 	.word	0x0000bed1
    b770:	0000aa79 	.word	0x0000aa79
    b774:	00012469 	.word	0x00012469
    b778:	0001263d 	.word	0x0001263d
    b77c:	0000471d 	.word	0x0000471d
    b780:	0000aab5 	.word	0x0000aab5
    b784:	0000ac21 	.word	0x0000ac21
    b788:	20002859 	.word	0x20002859
    b78c:	20000018 	.word	0x20000018
    b790:	000046f1 	.word	0x000046f1
                            dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_ACTIVE_SCAN_RESPONSE));
    b794:	2010      	movs	r0, #16
    b796:	4bc6      	ldr	r3, [pc, #792]	; (bab0 <P2PTasks+0x6a0>)
    b798:	4798      	blx	r3
    b79a:	1e04      	subs	r4, r0, #0
                            if (NULL == dataPtr)
    b79c:	d100      	bne.n	b7a0 <P2PTasks+0x390>
    b79e:	e661      	b.n	b464 <P2PTasks+0x54>
                            dataPtr[dataLen++] = CMD_P2P_ACTIVE_SCAN_RESPONSE;
    b7a0:	2397      	movs	r3, #151	; 0x97
    b7a2:	7003      	strb	r3, [r0, #0]
                            dataPtr[dataLen++] = P2PCapacityInfo;
    b7a4:	4bc3      	ldr	r3, [pc, #780]	; (bab4 <P2PTasks+0x6a4>)
    b7a6:	781b      	ldrb	r3, [r3, #0]
    b7a8:	7043      	strb	r3, [r0, #1]
                                    dataPtr[dataLen++] = (AdditionalNodeID[i]);
    b7aa:	4bc3      	ldr	r3, [pc, #780]	; (bab8 <P2PTasks+0x6a8>)
    b7ac:	781b      	ldrb	r3, [r3, #0]
    b7ae:	7083      	strb	r3, [r0, #2]
                            MiMAC_DiscardPacket();
    b7b0:	4bc2      	ldr	r3, [pc, #776]	; (babc <P2PTasks+0x6ac>)
    b7b2:	4798      	blx	r3
							i = PHY_RandomReq();
    b7b4:	4bc2      	ldr	r3, [pc, #776]	; (bac0 <P2PTasks+0x6b0>)
    b7b6:	4798      	blx	r3
							delay_ms(i*100);
    b7b8:	b2c3      	uxtb	r3, r0
    b7ba:	2064      	movs	r0, #100	; 0x64
    b7bc:	4358      	muls	r0, r3
    b7be:	2800      	cmp	r0, #0
    b7c0:	d016      	beq.n	b7f0 <P2PTasks+0x3e0>
    b7c2:	4bc0      	ldr	r3, [pc, #768]	; (bac4 <P2PTasks+0x6b4>)
    b7c4:	4798      	blx	r3
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn, 
    b7c6:	4bc0      	ldr	r3, [pc, #768]	; (bac8 <P2PTasks+0x6b8>)
    b7c8:	685a      	ldr	r2, [r3, #4]
    b7ca:	8859      	ldrh	r1, [r3, #2]
    b7cc:	48bf      	ldr	r0, [pc, #764]	; (bacc <P2PTasks+0x6bc>)
    b7ce:	9005      	str	r0, [sp, #20]
    b7d0:	2001      	movs	r0, #1
    b7d2:	9004      	str	r0, [sp, #16]
    b7d4:	2000      	movs	r0, #0
    b7d6:	9003      	str	r0, [sp, #12]
    b7d8:	9402      	str	r4, [sp, #8]
    b7da:	3003      	adds	r0, #3
    b7dc:	9001      	str	r0, [sp, #4]
    b7de:	781b      	ldrb	r3, [r3, #0]
    b7e0:	071b      	lsls	r3, r3, #28
    b7e2:	0fdb      	lsrs	r3, r3, #31
    b7e4:	9300      	str	r3, [sp, #0]
    b7e6:	2301      	movs	r3, #1
    b7e8:	2000      	movs	r0, #0
    b7ea:	4cb9      	ldr	r4, [pc, #740]	; (bad0 <P2PTasks+0x6c0>)
    b7ec:	47a0      	blx	r4
                        break;
    b7ee:	e143      	b.n	ba78 <P2PTasks+0x668>
							delay_ms(i*100);
    b7f0:	2001      	movs	r0, #1
    b7f2:	4bb8      	ldr	r3, [pc, #736]	; (bad4 <P2PTasks+0x6c4>)
    b7f4:	4798      	blx	r3
    b7f6:	e7e6      	b.n	b7c6 <P2PTasks+0x3b6>
                            dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_CONNECTION_REMOVAL_RESPONSE));
    b7f8:	2010      	movs	r0, #16
    b7fa:	4bad      	ldr	r3, [pc, #692]	; (bab0 <P2PTasks+0x6a0>)
    b7fc:	4798      	blx	r3
    b7fe:	4680      	mov	r8, r0
                            if (NULL == dataPtr)
    b800:	2800      	cmp	r0, #0
    b802:	d100      	bne.n	b806 <P2PTasks+0x3f6>
    b804:	e62e      	b.n	b464 <P2PTasks+0x54>
                            dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_RESPONSE;
    b806:	2392      	movs	r3, #146	; 0x92
    b808:	7003      	strb	r3, [r0, #0]
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    b80a:	4baf      	ldr	r3, [pc, #700]	; (bac8 <P2PTasks+0x6b8>)
    b80c:	685b      	ldr	r3, [r3, #4]
    b80e:	9307      	str	r3, [sp, #28]
    b810:	4eb1      	ldr	r6, [pc, #708]	; (bad8 <P2PTasks+0x6c8>)
    b812:	2700      	movs	r7, #0
                            for(i = 0; i < CONNECTION_SIZE; i++)
    b814:	2400      	movs	r4, #0
                                if( ConnectionTable[i].status.bits.isValid )
    b816:	0035      	movs	r5, r6
    b818:	e006      	b.n	b828 <P2PTasks+0x418>
                            for(i = 0; i < CONNECTION_SIZE; i++)
    b81a:	3401      	adds	r4, #1
    b81c:	b2e4      	uxtb	r4, r4
    b81e:	3701      	adds	r7, #1
    b820:	360a      	adds	r6, #10
    b822:	2c05      	cmp	r4, #5
    b824:	d100      	bne.n	b828 <P2PTasks+0x418>
    b826:	e179      	b.n	bb1c <P2PTasks+0x70c>
                                if( ConnectionTable[i].status.bits.isValid )
    b828:	9706      	str	r7, [sp, #24]
    b82a:	00bb      	lsls	r3, r7, #2
    b82c:	19db      	adds	r3, r3, r7
    b82e:	005b      	lsls	r3, r3, #1
    b830:	18eb      	adds	r3, r5, r3
    b832:	7a1b      	ldrb	r3, [r3, #8]
    b834:	09db      	lsrs	r3, r3, #7
    b836:	d0f0      	beq.n	b81a <P2PTasks+0x40a>
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    b838:	0031      	movs	r1, r6
    b83a:	9807      	ldr	r0, [sp, #28]
    b83c:	4ba7      	ldr	r3, [pc, #668]	; (badc <P2PTasks+0x6cc>)
    b83e:	4798      	blx	r3
    b840:	2800      	cmp	r0, #0
    b842:	d0ea      	beq.n	b81a <P2PTasks+0x40a>
                                        ConnectionTable[i].status.Val = 0;
    b844:	9a06      	ldr	r2, [sp, #24]
    b846:	0093      	lsls	r3, r2, #2
    b848:	189d      	adds	r5, r3, r2
    b84a:	006d      	lsls	r5, r5, #1
    b84c:	4ba2      	ldr	r3, [pc, #648]	; (bad8 <P2PTasks+0x6c8>)
    b84e:	195d      	adds	r5, r3, r5
    b850:	2300      	movs	r3, #0
    b852:	722b      	strb	r3, [r5, #8]
                                        dataPtr[dataLen++] = STATUS_SUCCESS;
    b854:	4642      	mov	r2, r8
    b856:	7053      	strb	r3, [r2, #1]
                            MiMAC_DiscardPacket();
    b858:	4b98      	ldr	r3, [pc, #608]	; (babc <P2PTasks+0x6ac>)
    b85a:	4798      	blx	r3
                            if( i == CONNECTION_SIZE ) 
    b85c:	2c05      	cmp	r4, #5
    b85e:	d001      	beq.n	b864 <P2PTasks+0x454>
                                        dataPtr[dataLen++] = STATUS_SUCCESS;
    b860:	2402      	movs	r4, #2
    b862:	e162      	b.n	bb2a <P2PTasks+0x71a>
    b864:	2302      	movs	r3, #2
    b866:	e15c      	b.n	bb22 <P2PTasks+0x712>
                            switch( rxMessage.Payload[1] )
    b868:	786b      	ldrb	r3, [r5, #1]
    b86a:	2b00      	cmp	r3, #0
    b86c:	d014      	beq.n	b898 <P2PTasks+0x488>
    b86e:	2b01      	cmp	r3, #1
    b870:	d10f      	bne.n	b892 <P2PTasks+0x482>
                                    if (EstConfCallback)
    b872:	4b9b      	ldr	r3, [pc, #620]	; (bae0 <P2PTasks+0x6d0>)
    b874:	681b      	ldr	r3, [r3, #0]
    b876:	2b00      	cmp	r3, #0
    b878:	d004      	beq.n	b884 <P2PTasks+0x474>
                                        EstConfCallback(ALREADY_EXISTS);
    b87a:	2006      	movs	r0, #6
    b87c:	4798      	blx	r3
                                        EstConfCallback = NULL;
    b87e:	2200      	movs	r2, #0
    b880:	4b97      	ldr	r3, [pc, #604]	; (bae0 <P2PTasks+0x6d0>)
    b882:	601a      	str	r2, [r3, #0]
                                        if( myPANID.Val == 0xFFFF )
    b884:	4b97      	ldr	r3, [pc, #604]	; (bae4 <P2PTasks+0x6d4>)
    b886:	881a      	ldrh	r2, [r3, #0]
    b888:	4b97      	ldr	r3, [pc, #604]	; (bae8 <P2PTasks+0x6d8>)
    b88a:	429a      	cmp	r2, r3
    b88c:	d00e      	beq.n	b8ac <P2PTasks+0x49c>
                                    AddConnection();
    b88e:	4b97      	ldr	r3, [pc, #604]	; (baec <P2PTasks+0x6dc>)
    b890:	4798      	blx	r3
                        MiMAC_DiscardPacket();
    b892:	4b8a      	ldr	r3, [pc, #552]	; (babc <P2PTasks+0x6ac>)
    b894:	4798      	blx	r3
                        break; 
    b896:	e0ef      	b.n	ba78 <P2PTasks+0x668>
                                    if (EstConfCallback)
    b898:	4b91      	ldr	r3, [pc, #580]	; (bae0 <P2PTasks+0x6d0>)
    b89a:	681b      	ldr	r3, [r3, #0]
    b89c:	2b00      	cmp	r3, #0
    b89e:	d0f1      	beq.n	b884 <P2PTasks+0x474>
                                        EstConfCallback(SUCCESS);
    b8a0:	2000      	movs	r0, #0
    b8a2:	4798      	blx	r3
                                        EstConfCallback = NULL;
    b8a4:	2200      	movs	r2, #0
    b8a6:	4b8e      	ldr	r3, [pc, #568]	; (bae0 <P2PTasks+0x6d0>)
    b8a8:	601a      	str	r2, [r3, #0]
    b8aa:	e7eb      	b.n	b884 <P2PTasks+0x474>
                                            myPANID.Val = rxMessage.SourcePANID.Val;
    b8ac:	498d      	ldr	r1, [pc, #564]	; (bae4 <P2PTasks+0x6d4>)
    b8ae:	4b86      	ldr	r3, [pc, #536]	; (bac8 <P2PTasks+0x6b8>)
    b8b0:	885b      	ldrh	r3, [r3, #2]
    b8b2:	800b      	strh	r3, [r1, #0]
                                                uint16_t tmp = 0xFFFF;
    b8b4:	201e      	movs	r0, #30
    b8b6:	ab02      	add	r3, sp, #8
    b8b8:	469c      	mov	ip, r3
    b8ba:	4460      	add	r0, ip
    b8bc:	2301      	movs	r3, #1
    b8be:	425b      	negs	r3, r3
    b8c0:	8003      	strh	r3, [r0, #0]
                                                MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    b8c2:	4b8b      	ldr	r3, [pc, #556]	; (baf0 <P2PTasks+0x6e0>)
    b8c4:	4798      	blx	r3
    b8c6:	e7e2      	b.n	b88e <P2PTasks+0x47e>
                                P2PStatus.bits.Resync = 0;   
    b8c8:	4a8a      	ldr	r2, [pc, #552]	; (baf4 <P2PTasks+0x6e4>)
    b8ca:	7813      	ldrb	r3, [r2, #0]
    b8cc:	2120      	movs	r1, #32
    b8ce:	438b      	bics	r3, r1
    b8d0:	7013      	strb	r3, [r2, #0]
                            MiMAC_DiscardPacket(); 
    b8d2:	4b7a      	ldr	r3, [pc, #488]	; (babc <P2PTasks+0x6ac>)
    b8d4:	4798      	blx	r3
                        break;                
    b8d6:	e0cf      	b.n	ba78 <P2PTasks+0x668>
                                    for(; i < ActiveScanResultIndex; i++)
    b8d8:	3401      	adds	r4, #1
    b8da:	b2e4      	uxtb	r4, r4
    b8dc:	3610      	adds	r6, #16
    b8de:	4554      	cmp	r4, sl
    b8e0:	d00d      	beq.n	b8fe <P2PTasks+0x4ee>
                                        if( (ActiveScanResults[i].Channel == currentChannel) &&
    b8e2:	7833      	ldrb	r3, [r6, #0]
    b8e4:	455b      	cmp	r3, fp
    b8e6:	d1f7      	bne.n	b8d8 <P2PTasks+0x4c8>
    b8e8:	8973      	ldrh	r3, [r6, #10]
    b8ea:	42bb      	cmp	r3, r7
    b8ec:	d1f4      	bne.n	b8d8 <P2PTasks+0x4c8>
                                            isSameAddress(ActiveScanResults[i].Address, rxMessage.SourceAddress)
    b8ee:	1c70      	adds	r0, r6, #1
    b8f0:	9906      	ldr	r1, [sp, #24]
    b8f2:	4b7a      	ldr	r3, [pc, #488]	; (badc <P2PTasks+0x6cc>)
    b8f4:	4798      	blx	r3
                                            (ActiveScanResults[i].PANID.Val == rxMessage.SourcePANID.Val) &&
    b8f6:	2800      	cmp	r0, #0
    b8f8:	d0ee      	beq.n	b8d8 <P2PTasks+0x4c8>
                                    if( i == ActiveScanResultIndex && (i < ACTIVE_SCAN_RESULT_SIZE))
    b8fa:	45a2      	cmp	sl, r4
    b8fc:	d1e9      	bne.n	b8d2 <P2PTasks+0x4c2>
    b8fe:	2c03      	cmp	r4, #3
    b900:	d8e7      	bhi.n	b8d2 <P2PTasks+0x4c2>
                                        ActiveScanResults[ActiveScanResultIndex].Channel = currentChannel;
    b902:	497d      	ldr	r1, [pc, #500]	; (baf8 <P2PTasks+0x6e8>)
    b904:	4653      	mov	r3, sl
    b906:	011b      	lsls	r3, r3, #4
    b908:	4a7c      	ldr	r2, [pc, #496]	; (bafc <P2PTasks+0x6ec>)
    b90a:	7812      	ldrb	r2, [r2, #0]
    b90c:	545a      	strb	r2, [r3, r1]
                                        ActiveScanResults[ActiveScanResultIndex].RSSIValue = rxMessage.PacketRSSI;
    b90e:	18ca      	adds	r2, r1, r3
    b910:	4648      	mov	r0, r9
    b912:	7310      	strb	r0, [r2, #12]
                                        ActiveScanResults[ActiveScanResultIndex].LQIValue = rxMessage.PacketLQI;
    b914:	4640      	mov	r0, r8
    b916:	7350      	strb	r0, [r2, #13]
                                            ActiveScanResults[ActiveScanResultIndex].PANID.Val = rxMessage.SourcePANID.Val;
    b918:	8157      	strh	r7, [r2, #10]
                                            ActiveScanResults[ActiveScanResultIndex].Address[i] = rxMessage.SourceAddress[i];
    b91a:	4a6b      	ldr	r2, [pc, #428]	; (bac8 <P2PTasks+0x6b8>)
    b91c:	6852      	ldr	r2, [r2, #4]
    b91e:	3301      	adds	r3, #1
    b920:	185b      	adds	r3, r3, r1
    b922:	0010      	movs	r0, r2
    b924:	3008      	adds	r0, #8
    b926:	7811      	ldrb	r1, [r2, #0]
    b928:	7019      	strb	r1, [r3, #0]
    b92a:	3201      	adds	r2, #1
    b92c:	3301      	adds	r3, #1
                                        for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    b92e:	4290      	cmp	r0, r2
    b930:	d1f9      	bne.n	b926 <P2PTasks+0x516>
                                        ActiveScanResults[ActiveScanResultIndex].Capability.Val = rxMessage.Payload[1];
    b932:	786a      	ldrb	r2, [r5, #1]
    b934:	4653      	mov	r3, sl
    b936:	0119      	lsls	r1, r3, #4
    b938:	4b6f      	ldr	r3, [pc, #444]	; (baf8 <P2PTasks+0x6e8>)
    b93a:	185b      	adds	r3, r3, r1
    b93c:	739a      	strb	r2, [r3, #14]
                                                ActiveScanResults[ActiveScanResultIndex].PeerInfo[i] = rxMessage.Payload[2+i];
    b93e:	78aa      	ldrb	r2, [r5, #2]
    b940:	73da      	strb	r2, [r3, #15]
                                        ActiveScanResultIndex++;
    b942:	4653      	mov	r3, sl
    b944:	3301      	adds	r3, #1
    b946:	4a6e      	ldr	r2, [pc, #440]	; (bb00 <P2PTasks+0x6f0>)
    b948:	7013      	strb	r3, [r2, #0]
    b94a:	e7c2      	b.n	b8d2 <P2PTasks+0x4c2>
                            if( rxMessage.Payload[1] == STATUS_SUCCESS )
    b94c:	786b      	ldrb	r3, [r5, #1]
    b94e:	2b00      	cmp	r3, #0
    b950:	d11e      	bne.n	b990 <P2PTasks+0x580>
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    b952:	4b5d      	ldr	r3, [pc, #372]	; (bac8 <P2PTasks+0x6b8>)
    b954:	685b      	ldr	r3, [r3, #4]
    b956:	9306      	str	r3, [sp, #24]
    b958:	4e5f      	ldr	r6, [pc, #380]	; (bad8 <P2PTasks+0x6c8>)
    b95a:	2700      	movs	r7, #0
                                    if( ConnectionTable[i].status.bits.isValid )
    b95c:	0035      	movs	r5, r6
    b95e:	e003      	b.n	b968 <P2PTasks+0x558>
    b960:	3701      	adds	r7, #1
    b962:	360a      	adds	r6, #10
                                for(i = 0; i < CONNECTION_SIZE; i++)
    b964:	2f05      	cmp	r7, #5
    b966:	d013      	beq.n	b990 <P2PTasks+0x580>
                                    if( ConnectionTable[i].status.bits.isValid )
    b968:	00bb      	lsls	r3, r7, #2
    b96a:	19db      	adds	r3, r3, r7
    b96c:	005b      	lsls	r3, r3, #1
    b96e:	18eb      	adds	r3, r5, r3
    b970:	7a1b      	ldrb	r3, [r3, #8]
    b972:	09db      	lsrs	r3, r3, #7
    b974:	d0f4      	beq.n	b960 <P2PTasks+0x550>
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    b976:	0031      	movs	r1, r6
    b978:	9806      	ldr	r0, [sp, #24]
    b97a:	4b58      	ldr	r3, [pc, #352]	; (badc <P2PTasks+0x6cc>)
    b97c:	4798      	blx	r3
    b97e:	2800      	cmp	r0, #0
    b980:	d0ee      	beq.n	b960 <P2PTasks+0x550>
                                            ConnectionTable[i].status.Val = 0;
    b982:	00bb      	lsls	r3, r7, #2
    b984:	19dc      	adds	r4, r3, r7
    b986:	0064      	lsls	r4, r4, #1
    b988:	4b53      	ldr	r3, [pc, #332]	; (bad8 <P2PTasks+0x6c8>)
    b98a:	191c      	adds	r4, r3, r4
    b98c:	2300      	movs	r3, #0
    b98e:	7223      	strb	r3, [r4, #8]
                        MiMAC_DiscardPacket();
    b990:	4b4a      	ldr	r3, [pc, #296]	; (babc <P2PTasks+0x6ac>)
    b992:	4798      	blx	r3
                        break;
    b994:	e070      	b.n	ba78 <P2PTasks+0x668>
                            dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_TIME_SYNC_DATA_PACKET));
    b996:	20e0      	movs	r0, #224	; 0xe0
    b998:	4b45      	ldr	r3, [pc, #276]	; (bab0 <P2PTasks+0x6a0>)
    b99a:	4798      	blx	r3
    b99c:	1e04      	subs	r4, r0, #0
                            if (NULL == dataPtr)
    b99e:	d100      	bne.n	b9a2 <P2PTasks+0x592>
    b9a0:	e560      	b.n	b464 <P2PTasks+0x54>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    b9a2:	4b49      	ldr	r3, [pc, #292]	; (bac8 <P2PTasks+0x6b8>)
    b9a4:	685d      	ldr	r5, [r3, #4]
                                if( indirectMessages[i].flags.bits.isValid )
    b9a6:	4b57      	ldr	r3, [pc, #348]	; (bb04 <P2PTasks+0x6f4>)
    b9a8:	7b9b      	ldrb	r3, [r3, #14]
    b9aa:	07db      	lsls	r3, r3, #31
    b9ac:	d505      	bpl.n	b9ba <P2PTasks+0x5aa>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    b9ae:	0029      	movs	r1, r5
    b9b0:	4855      	ldr	r0, [pc, #340]	; (bb08 <P2PTasks+0x6f8>)
    b9b2:	4b4a      	ldr	r3, [pc, #296]	; (badc <P2PTasks+0x6cc>)
    b9b4:	4798      	blx	r3
    b9b6:	2800      	cmp	r0, #0
    b9b8:	d14c      	bne.n	ba54 <P2PTasks+0x644>
                                if( indirectMessages[i].flags.bits.isValid )
    b9ba:	2391      	movs	r3, #145	; 0x91
    b9bc:	005b      	lsls	r3, r3, #1
    b9be:	4a51      	ldr	r2, [pc, #324]	; (bb04 <P2PTasks+0x6f4>)
    b9c0:	5cd3      	ldrb	r3, [r2, r3]
    b9c2:	07db      	lsls	r3, r3, #31
    b9c4:	d505      	bpl.n	b9d2 <P2PTasks+0x5c2>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    b9c6:	0029      	movs	r1, r5
    b9c8:	4850      	ldr	r0, [pc, #320]	; (bb0c <P2PTasks+0x6fc>)
    b9ca:	4b44      	ldr	r3, [pc, #272]	; (badc <P2PTasks+0x6cc>)
    b9cc:	4798      	blx	r3
    b9ce:	2800      	cmp	r0, #0
    b9d0:	d110      	bne.n	b9f4 <P2PTasks+0x5e4>
                                        SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, isCommand, false, 
    b9d2:	4b3d      	ldr	r3, [pc, #244]	; (bac8 <P2PTasks+0x6b8>)
    b9d4:	8859      	ldrh	r1, [r3, #2]
    b9d6:	4b4e      	ldr	r3, [pc, #312]	; (bb10 <P2PTasks+0x700>)
    b9d8:	9305      	str	r3, [sp, #20]
    b9da:	2300      	movs	r3, #0
    b9dc:	9304      	str	r3, [sp, #16]
    b9de:	9303      	str	r3, [sp, #12]
    b9e0:	9402      	str	r4, [sp, #8]
    b9e2:	9301      	str	r3, [sp, #4]
    b9e4:	9300      	str	r3, [sp, #0]
    b9e6:	002a      	movs	r2, r5
    b9e8:	2000      	movs	r0, #0
    b9ea:	4c39      	ldr	r4, [pc, #228]	; (bad0 <P2PTasks+0x6c0>)
    b9ec:	47a0      	blx	r4
                            MiMAC_DiscardPacket();
    b9ee:	4b33      	ldr	r3, [pc, #204]	; (babc <P2PTasks+0x6ac>)
    b9f0:	4798      	blx	r3
                        break;
    b9f2:	e041      	b.n	ba78 <P2PTasks+0x668>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    b9f4:	4a45      	ldr	r2, [pc, #276]	; (bb0c <P2PTasks+0x6fc>)
                                if( indirectMessages[i].flags.bits.isValid )
    b9f6:	2001      	movs	r0, #1
                                        for(j = 0; j < indirectMessages[i].PayLoadSize; j++)
    b9f8:	218a      	movs	r1, #138	; 0x8a
    b9fa:	0049      	lsls	r1, r1, #1
    b9fc:	4341      	muls	r1, r0
    b9fe:	4b41      	ldr	r3, [pc, #260]	; (bb04 <P2PTasks+0x6f4>)
    ba00:	185b      	adds	r3, r3, r1
    ba02:	7bdb      	ldrb	r3, [r3, #15]
    ba04:	2b00      	cmp	r3, #0
    ba06:	d00e      	beq.n	ba26 <P2PTasks+0x616>
    ba08:	2600      	movs	r6, #0
                                            dataPtr[dataLen++] =indirectMessages[i].PayLoad[j];
    ba0a:	000b      	movs	r3, r1
    ba0c:	493d      	ldr	r1, [pc, #244]	; (bb04 <P2PTasks+0x6f4>)
    ba0e:	18c9      	adds	r1, r1, r3
                                        for(j = 0; j < indirectMessages[i].PayLoadSize; j++)
    ba10:	000f      	movs	r7, r1
    ba12:	370f      	adds	r7, #15
                                            dataPtr[dataLen++] =indirectMessages[i].PayLoad[j];
    ba14:	1c73      	adds	r3, r6, #1
    ba16:	b2db      	uxtb	r3, r3
    ba18:	198d      	adds	r5, r1, r6
    ba1a:	7c2d      	ldrb	r5, [r5, #16]
    ba1c:	55a5      	strb	r5, [r4, r6]
    ba1e:	001e      	movs	r6, r3
                                        for(j = 0; j < indirectMessages[i].PayLoadSize; j++)
    ba20:	783d      	ldrb	r5, [r7, #0]
    ba22:	429d      	cmp	r5, r3
    ba24:	d8f6      	bhi.n	ba14 <P2PTasks+0x604>
                                            SendPacket(false, indirectMessages[i].DestPANID, indirectMessages[i].DestAddress.DestLongAddress, isCommand, (bool)indirectMessages[i].flags.bits.isSecured,
    ba26:	258a      	movs	r5, #138	; 0x8a
    ba28:	006d      	lsls	r5, r5, #1
    ba2a:	4368      	muls	r0, r5
    ba2c:	4d35      	ldr	r5, [pc, #212]	; (bb04 <P2PTasks+0x6f4>)
    ba2e:	182d      	adds	r5, r5, r0
    ba30:	88a9      	ldrh	r1, [r5, #4]
    ba32:	4837      	ldr	r0, [pc, #220]	; (bb10 <P2PTasks+0x700>)
    ba34:	9005      	str	r0, [sp, #20]
    ba36:	2600      	movs	r6, #0
    ba38:	9604      	str	r6, [sp, #16]
    ba3a:	9603      	str	r6, [sp, #12]
    ba3c:	9402      	str	r4, [sp, #8]
    ba3e:	9301      	str	r3, [sp, #4]
    ba40:	7bab      	ldrb	r3, [r5, #14]
    ba42:	071b      	lsls	r3, r3, #28
    ba44:	0fdb      	lsrs	r3, r3, #31
    ba46:	9300      	str	r3, [sp, #0]
    ba48:	2300      	movs	r3, #0
    ba4a:	2000      	movs	r0, #0
    ba4c:	4c20      	ldr	r4, [pc, #128]	; (bad0 <P2PTasks+0x6c0>)
    ba4e:	47a0      	blx	r4
                                        indirectMessages[i].flags.Val = 0;   
    ba50:	73ae      	strb	r6, [r5, #14]
                                        goto END_OF_SENDING_INDIRECT_MESSAGE;    
    ba52:	e7cc      	b.n	b9ee <P2PTasks+0x5de>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    ba54:	4a2c      	ldr	r2, [pc, #176]	; (bb08 <P2PTasks+0x6f8>)
                                if( indirectMessages[i].flags.bits.isValid )
    ba56:	2000      	movs	r0, #0
    ba58:	e7ce      	b.n	b9f8 <P2PTasks+0x5e8>
            P2PStatus.bits.RxHasUserData = 1;
    ba5a:	4c26      	ldr	r4, [pc, #152]	; (baf4 <P2PTasks+0x6e4>)
    ba5c:	7823      	ldrb	r3, [r4, #0]
    ba5e:	2208      	movs	r2, #8
    ba60:	4313      	orrs	r3, r2
    ba62:	7023      	strb	r3, [r4, #0]
			pktRxcallback(&rxMessage);
    ba64:	4b2b      	ldr	r3, [pc, #172]	; (bb14 <P2PTasks+0x704>)
    ba66:	681b      	ldr	r3, [r3, #0]
    ba68:	4817      	ldr	r0, [pc, #92]	; (bac8 <P2PTasks+0x6b8>)
    ba6a:	4798      	blx	r3
			P2PStatus.bits.RxHasUserData = 0;
    ba6c:	7823      	ldrb	r3, [r4, #0]
    ba6e:	2208      	movs	r2, #8
    ba70:	4393      	bics	r3, r2
    ba72:	7023      	strb	r3, [r4, #0]
			MiMAC_DiscardPacket();
    ba74:	4b11      	ldr	r3, [pc, #68]	; (babc <P2PTasks+0x6ac>)
    ba76:	4798      	blx	r3
        if( rxMessage.PayloadSize == 0  || P2PStatus.bits.SearchConnection || P2PStatus.bits.Resync )
    ba78:	4b13      	ldr	r3, [pc, #76]	; (bac8 <P2PTasks+0x6b8>)
    ba7a:	7b1b      	ldrb	r3, [r3, #12]
    ba7c:	2b00      	cmp	r3, #0
    ba7e:	d008      	beq.n	ba92 <P2PTasks+0x682>
    ba80:	4b1c      	ldr	r3, [pc, #112]	; (baf4 <P2PTasks+0x6e4>)
    ba82:	781b      	ldrb	r3, [r3, #0]
    ba84:	06db      	lsls	r3, r3, #27
    ba86:	d404      	bmi.n	ba92 <P2PTasks+0x682>
    ba88:	4b1a      	ldr	r3, [pc, #104]	; (baf4 <P2PTasks+0x6e4>)
    ba8a:	781b      	ldrb	r3, [r3, #0]
    ba8c:	069b      	lsls	r3, r3, #26
    ba8e:	d400      	bmi.n	ba92 <P2PTasks+0x682>
    ba90:	e4e8      	b.n	b464 <P2PTasks+0x54>
            P2PStatus.bits.RxHasUserData = 0;
    ba92:	4a18      	ldr	r2, [pc, #96]	; (baf4 <P2PTasks+0x6e4>)
    ba94:	7813      	ldrb	r3, [r2, #0]
    ba96:	2108      	movs	r1, #8
    ba98:	438b      	bics	r3, r1
    ba9a:	7013      	strb	r3, [r2, #0]
            MiMAC_DiscardPacket();
    ba9c:	4b07      	ldr	r3, [pc, #28]	; (babc <P2PTasks+0x6ac>)
    ba9e:	4798      	blx	r3
    baa0:	e4e0      	b.n	b464 <P2PTasks+0x54>
                                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    baa2:	4b1d      	ldr	r3, [pc, #116]	; (bb18 <P2PTasks+0x708>)
    baa4:	781b      	ldrb	r3, [r3, #0]
    baa6:	2b01      	cmp	r3, #1
    baa8:	d100      	bne.n	baac <P2PTasks+0x69c>
    baaa:	e609      	b.n	b6c0 <P2PTasks+0x2b0>
                                        status = STATUS_NOT_SAME_PAN;
    baac:	25f2      	movs	r5, #242	; 0xf2
    baae:	e5c9      	b.n	b644 <P2PTasks+0x234>
    bab0:	0000bed1 	.word	0x0000bed1
    bab4:	20002859 	.word	0x20002859
    bab8:	20000018 	.word	0x20000018
    babc:	00009ee5 	.word	0x00009ee5
    bac0:	0000aa79 	.word	0x0000aa79
    bac4:	0000471d 	.word	0x0000471d
    bac8:	20002af0 	.word	0x20002af0
    bacc:	0000aab5 	.word	0x0000aab5
    bad0:	0000ac21 	.word	0x0000ac21
    bad4:	000046f1 	.word	0x000046f1
    bad8:	2000280c 	.word	0x2000280c
    badc:	0000acf5 	.word	0x0000acf5
    bae0:	20002860 	.word	0x20002860
    bae4:	2000285c 	.word	0x2000285c
    bae8:	0000ffff 	.word	0x0000ffff
    baec:	0000b171 	.word	0x0000b171
    baf0:	000096d1 	.word	0x000096d1
    baf4:	20002880 	.word	0x20002880
    baf8:	20002ab0 	.word	0x20002ab0
    bafc:	2000001d 	.word	0x2000001d
    bb00:	20002b00 	.word	0x20002b00
    bb04:	20002884 	.word	0x20002884
    bb08:	2000288a 	.word	0x2000288a
    bb0c:	2000299e 	.word	0x2000299e
    bb10:	00007bf1 	.word	0x00007bf1
    bb14:	2000049c 	.word	0x2000049c
    bb18:	2000001c 	.word	0x2000001c
                            MiMAC_DiscardPacket();
    bb1c:	4b0d      	ldr	r3, [pc, #52]	; (bb54 <P2PTasks+0x744>)
    bb1e:	4798      	blx	r3
                            dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_RESPONSE;
    bb20:	2301      	movs	r3, #1
                                dataPtr[dataLen++] = STATUS_ENTRY_NOT_EXIST;
    bb22:	1c5c      	adds	r4, r3, #1
    bb24:	22f0      	movs	r2, #240	; 0xf0
    bb26:	4641      	mov	r1, r8
    bb28:	54ca      	strb	r2, [r1, r3]
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn, 
    bb2a:	4b0b      	ldr	r3, [pc, #44]	; (bb58 <P2PTasks+0x748>)
    bb2c:	685a      	ldr	r2, [r3, #4]
    bb2e:	8859      	ldrh	r1, [r3, #2]
    bb30:	480a      	ldr	r0, [pc, #40]	; (bb5c <P2PTasks+0x74c>)
    bb32:	9005      	str	r0, [sp, #20]
    bb34:	2001      	movs	r0, #1
    bb36:	9004      	str	r0, [sp, #16]
    bb38:	2000      	movs	r0, #0
    bb3a:	9003      	str	r0, [sp, #12]
    bb3c:	4640      	mov	r0, r8
    bb3e:	9002      	str	r0, [sp, #8]
    bb40:	9401      	str	r4, [sp, #4]
    bb42:	781b      	ldrb	r3, [r3, #0]
    bb44:	071b      	lsls	r3, r3, #28
    bb46:	0fdb      	lsrs	r3, r3, #31
    bb48:	9300      	str	r3, [sp, #0]
    bb4a:	2301      	movs	r3, #1
    bb4c:	2000      	movs	r0, #0
    bb4e:	4c04      	ldr	r4, [pc, #16]	; (bb60 <P2PTasks+0x750>)
    bb50:	47a0      	blx	r4
                            break;
    bb52:	e791      	b.n	ba78 <P2PTasks+0x668>
    bb54:	00009ee5 	.word	0x00009ee5
    bb58:	20002af0 	.word	0x20002af0
    bb5c:	0000aab5 	.word	0x0000aab5
    bb60:	0000ac21 	.word	0x0000ac21

0000bb64 <MiApp_EstablishConnection>:
    {
    bb64:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb66:	46de      	mov	lr, fp
    bb68:	4657      	mov	r7, sl
    bb6a:	464e      	mov	r6, r9
    bb6c:	4645      	mov	r5, r8
    bb6e:	b5e0      	push	{r5, r6, r7, lr}
    bb70:	b08b      	sub	sp, #44	; 0x2c
    bb72:	0016      	movs	r6, r2
    bb74:	231f      	movs	r3, #31
    bb76:	aa02      	add	r2, sp, #8
    bb78:	4694      	mov	ip, r2
    bb7a:	4463      	add	r3, ip
    bb7c:	7018      	strb	r0, [r3, #0]
        uint8_t    tmpConnectionMode = ConnMode;
    bb7e:	4c61      	ldr	r4, [pc, #388]	; (bd04 <MiApp_EstablishConnection+0x1a0>)
    bb80:	7823      	ldrb	r3, [r4, #0]
    bb82:	9308      	str	r3, [sp, #32]
        tick1.Val = MiWi_TickGet();
    bb84:	4d60      	ldr	r5, [pc, #384]	; (bd08 <MiApp_EstablishConnection+0x1a4>)
    bb86:	47a8      	blx	r5
    bb88:	4b60      	ldr	r3, [pc, #384]	; (bd0c <MiApp_EstablishConnection+0x1a8>)
    bb8a:	6018      	str	r0, [r3, #0]
        t1.Val = MiWi_TickGet();
    bb8c:	47a8      	blx	r5
        t1.Val -= (ONE_SECOND);
    bb8e:	4b60      	ldr	r3, [pc, #384]	; (bd10 <MiApp_EstablishConnection+0x1ac>)
    bb90:	18c5      	adds	r5, r0, r3
        ConnMode = ENABLE_ALL_CONN;
    bb92:	2300      	movs	r3, #0
    bb94:	7023      	strb	r3, [r4, #0]
        P2PStatus.bits.SearchConnection = 1;
    bb96:	4a5f      	ldr	r2, [pc, #380]	; (bd14 <MiApp_EstablishConnection+0x1b0>)
    bb98:	7813      	ldrb	r3, [r2, #0]
    bb9a:	2110      	movs	r1, #16
    bb9c:	430b      	orrs	r3, r1
    bb9e:	7013      	strb	r3, [r2, #0]
        EstConfCallback = ConfCallback;
    bba0:	4b5d      	ldr	r3, [pc, #372]	; (bd18 <MiApp_EstablishConnection+0x1b4>)
    bba2:	9a14      	ldr	r2, [sp, #80]	; 0x50
    bba4:	601a      	str	r2, [r3, #0]
        uint8_t    connectionInterval = 0;
    bba6:	2400      	movs	r4, #0
        uint8_t    retry = CONNECTION_RETRY_TIMES;
    bba8:	2703      	movs	r7, #3
        while( P2PStatus.bits.SearchConnection )
    bbaa:	4b5a      	ldr	r3, [pc, #360]	; (bd14 <MiApp_EstablishConnection+0x1b0>)
    bbac:	4699      	mov	r9, r3
            t2.Val = MiWi_TickGet();
    bbae:	4b56      	ldr	r3, [pc, #344]	; (bd08 <MiApp_EstablishConnection+0x1a4>)
    bbb0:	4698      	mov	r8, r3
    bbb2:	002b      	movs	r3, r5
    bbb4:	003d      	movs	r5, r7
    bbb6:	001f      	movs	r7, r3
        while( P2PStatus.bits.SearchConnection )
    bbb8:	e08c      	b.n	bcd4 <MiApp_EstablishConnection+0x170>
                if( retry-- == 0 )
    bbba:	1e6b      	subs	r3, r5, #1
    bbbc:	b2db      	uxtb	r3, r3
    bbbe:	9307      	str	r3, [sp, #28]
    bbc0:	2d00      	cmp	r5, #0
    bbc2:	d02d      	beq.n	bc20 <MiApp_EstablishConnection+0xbc>
                MiApp_Set(CHANNEL, &Channel);
    bbc4:	211f      	movs	r1, #31
    bbc6:	ab02      	add	r3, sp, #8
    bbc8:	469c      	mov	ip, r3
    bbca:	4461      	add	r1, ip
    bbcc:	2000      	movs	r0, #0
    bbce:	4b53      	ldr	r3, [pc, #332]	; (bd1c <MiApp_EstablishConnection+0x1b8>)
    bbd0:	4798      	blx	r3
                dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_CONNECTION_REQUEST));
    bbd2:	2010      	movs	r0, #16
    bbd4:	4b52      	ldr	r3, [pc, #328]	; (bd20 <MiApp_EstablishConnection+0x1bc>)
    bbd6:	4798      	blx	r3
    bbd8:	1e07      	subs	r7, r0, #0
                if (NULL == dataPtr)
    bbda:	d045      	beq.n	bc68 <MiApp_EstablishConnection+0x104>
                dataPtr[dataLen++] = CMD_P2P_CONNECTION_REQUEST;
    bbdc:	2381      	movs	r3, #129	; 0x81
    bbde:	7003      	strb	r3, [r0, #0]
                dataPtr[dataLen++] = currentChannel;
    bbe0:	4b50      	ldr	r3, [pc, #320]	; (bd24 <MiApp_EstablishConnection+0x1c0>)
    bbe2:	781b      	ldrb	r3, [r3, #0]
    bbe4:	7043      	strb	r3, [r0, #1]
                dataPtr[dataLen++] = P2PCapacityInfo;
    bbe6:	4b50      	ldr	r3, [pc, #320]	; (bd28 <MiApp_EstablishConnection+0x1c4>)
    bbe8:	781b      	ldrb	r3, [r3, #0]
    bbea:	7083      	strb	r3, [r0, #2]
                            dataPtr[dataLen++] = AdditionalNodeID[i];
    bbec:	4b4f      	ldr	r3, [pc, #316]	; (bd2c <MiApp_EstablishConnection+0x1c8>)
    bbee:	781b      	ldrb	r3, [r3, #0]
    bbf0:	70c3      	strb	r3, [r0, #3]
                        uint16_t DestinationAddress16 = ((addr[1] << 8) + addr[0]);	
    bbf2:	7872      	ldrb	r2, [r6, #1]
    bbf4:	0212      	lsls	r2, r2, #8
    bbf6:	7833      	ldrb	r3, [r6, #0]
    bbf8:	189b      	adds	r3, r3, r2
                        if( DestinationAddress16 == 0xFFFF )
    bbfa:	b29b      	uxth	r3, r3
    bbfc:	4a4c      	ldr	r2, [pc, #304]	; (bd30 <MiApp_EstablishConnection+0x1cc>)
    bbfe:	4293      	cmp	r3, r2
    bc00:	d015      	beq.n	bc2e <MiApp_EstablishConnection+0xca>
							MiApp_Set(CHANNEL, &Channel);
    bc02:	211f      	movs	r1, #31
    bc04:	ab02      	add	r3, sp, #8
    bc06:	469c      	mov	ip, r3
    bc08:	4461      	add	r1, ip
    bc0a:	2000      	movs	r0, #0
    bc0c:	4b43      	ldr	r3, [pc, #268]	; (bd1c <MiApp_EstablishConnection+0x1b8>)
    bc0e:	4798      	blx	r3
								  if (addr[j] != ActiveScanResults[i].Address[j])
    bc10:	7833      	ldrb	r3, [r6, #0]
    bc12:	469b      	mov	fp, r3
    bc14:	4b47      	ldr	r3, [pc, #284]	; (bd34 <MiApp_EstablishConnection+0x1d0>)
    bc16:	0035      	movs	r5, r6
    bc18:	3508      	adds	r5, #8
    bc1a:	46bc      	mov	ip, r7
    bc1c:	001f      	movs	r7, r3
    bc1e:	e030      	b.n	bc82 <MiApp_EstablishConnection+0x11e>
                    P2PStatus.bits.SearchConnection = 0;
    bc20:	4a3c      	ldr	r2, [pc, #240]	; (bd14 <MiApp_EstablishConnection+0x1b0>)
    bc22:	7813      	ldrb	r3, [r2, #0]
    bc24:	2110      	movs	r1, #16
    bc26:	438b      	bics	r3, r1
    bc28:	7013      	strb	r3, [r2, #0]
                    return 0xFF;
    bc2a:	24ff      	movs	r4, #255	; 0xff
    bc2c:	e01c      	b.n	bc68 <MiApp_EstablishConnection+0x104>
                            SendPacket(true, myPANID, NULL, true, false, dataLen, dataPtr,0, true, CommandConfCallback);
    bc2e:	4b42      	ldr	r3, [pc, #264]	; (bd38 <MiApp_EstablishConnection+0x1d4>)
    bc30:	8819      	ldrh	r1, [r3, #0]
    bc32:	4b42      	ldr	r3, [pc, #264]	; (bd3c <MiApp_EstablishConnection+0x1d8>)
    bc34:	9305      	str	r3, [sp, #20]
    bc36:	2301      	movs	r3, #1
    bc38:	9304      	str	r3, [sp, #16]
    bc3a:	2300      	movs	r3, #0
    bc3c:	9303      	str	r3, [sp, #12]
    bc3e:	9002      	str	r0, [sp, #8]
    bc40:	2204      	movs	r2, #4
    bc42:	9201      	str	r2, [sp, #4]
    bc44:	9300      	str	r3, [sp, #0]
    bc46:	3301      	adds	r3, #1
    bc48:	2200      	movs	r2, #0
    bc4a:	2001      	movs	r0, #1
    bc4c:	4c3c      	ldr	r4, [pc, #240]	; (bd40 <MiApp_EstablishConnection+0x1dc>)
    bc4e:	47a0      	blx	r4
                t1.Val = t2.Val;
    bc50:	9f06      	ldr	r7, [sp, #24]
                if( retry-- == 0 )
    bc52:	9d07      	ldr	r5, [sp, #28]
                connectionInterval = CONNECTION_INTERVAL-1;
    bc54:	2403      	movs	r4, #3
    bc56:	e039      	b.n	bccc <MiApp_EstablishConnection+0x168>
        ConnMode = tmpConnectionMode;
    bc58:	4b2a      	ldr	r3, [pc, #168]	; (bd04 <MiApp_EstablishConnection+0x1a0>)
    bc5a:	466a      	mov	r2, sp
    bc5c:	2120      	movs	r1, #32
    bc5e:	1852      	adds	r2, r2, r1
    bc60:	7812      	ldrb	r2, [r2, #0]
    bc62:	701a      	strb	r2, [r3, #0]
        return LatestConnection;
    bc64:	4b37      	ldr	r3, [pc, #220]	; (bd44 <MiApp_EstablishConnection+0x1e0>)
    bc66:	781c      	ldrb	r4, [r3, #0]
    }
    bc68:	0020      	movs	r0, r4
    bc6a:	b00b      	add	sp, #44	; 0x2c
    bc6c:	bc3c      	pop	{r2, r3, r4, r5}
    bc6e:	4690      	mov	r8, r2
    bc70:	4699      	mov	r9, r3
    bc72:	46a2      	mov	sl, r4
    bc74:	46ab      	mov	fp, r5
    bc76:	bdf0      	pop	{r4, r5, r6, r7, pc}
							for(i = 0; i < ACTIVE_SCAN_RESULT_SIZE; i++)
    bc78:	3401      	adds	r4, #1
    bc7a:	b2e4      	uxtb	r4, r4
    bc7c:	3710      	adds	r7, #16
    bc7e:	2c04      	cmp	r4, #4
    bc80:	d03b      	beq.n	bcfa <MiApp_EstablishConnection+0x196>
								  if (addr[j] != ActiveScanResults[i].Address[j])
    bc82:	787b      	ldrb	r3, [r7, #1]
    bc84:	455b      	cmp	r3, fp
    bc86:	d1f7      	bne.n	bc78 <MiApp_EstablishConnection+0x114>
    bc88:	1c73      	adds	r3, r6, #1
    bc8a:	1cba      	adds	r2, r7, #2
    bc8c:	7818      	ldrb	r0, [r3, #0]
    bc8e:	7811      	ldrb	r1, [r2, #0]
    bc90:	4288      	cmp	r0, r1
    bc92:	d1f1      	bne.n	bc78 <MiApp_EstablishConnection+0x114>
    bc94:	3301      	adds	r3, #1
    bc96:	3201      	adds	r2, #1
								for(j = 0; j < MY_ADDRESS_LENGTH; j++)
    bc98:	42ab      	cmp	r3, r5
    bc9a:	d1f7      	bne.n	bc8c <MiApp_EstablishConnection+0x128>
    bc9c:	4667      	mov	r7, ip
								SendPacket(false, ActiveScanResults[i].PANID, ActiveScanResults[i].Address, true, false, 
    bc9e:	0124      	lsls	r4, r4, #4
    bca0:	1c62      	adds	r2, r4, #1
    bca2:	4b24      	ldr	r3, [pc, #144]	; (bd34 <MiApp_EstablishConnection+0x1d0>)
    bca4:	18d2      	adds	r2, r2, r3
    bca6:	191b      	adds	r3, r3, r4
    bca8:	8959      	ldrh	r1, [r3, #10]
    bcaa:	4b24      	ldr	r3, [pc, #144]	; (bd3c <MiApp_EstablishConnection+0x1d8>)
    bcac:	9305      	str	r3, [sp, #20]
    bcae:	2301      	movs	r3, #1
    bcb0:	9304      	str	r3, [sp, #16]
    bcb2:	2300      	movs	r3, #0
    bcb4:	9303      	str	r3, [sp, #12]
    bcb6:	9702      	str	r7, [sp, #8]
    bcb8:	2004      	movs	r0, #4
    bcba:	9001      	str	r0, [sp, #4]
    bcbc:	9300      	str	r3, [sp, #0]
    bcbe:	3301      	adds	r3, #1
    bcc0:	2000      	movs	r0, #0
    bcc2:	4c1f      	ldr	r4, [pc, #124]	; (bd40 <MiApp_EstablishConnection+0x1dc>)
    bcc4:	47a0      	blx	r4
                t1.Val = t2.Val;
    bcc6:	9f06      	ldr	r7, [sp, #24]
                if( retry-- == 0 )
    bcc8:	9d07      	ldr	r5, [sp, #28]
                connectionInterval = CONNECTION_INTERVAL-1;
    bcca:	2403      	movs	r4, #3
            P2PTasks();
    bccc:	4b1e      	ldr	r3, [pc, #120]	; (bd48 <MiApp_EstablishConnection+0x1e4>)
    bcce:	4798      	blx	r3
			SYSTEM_RunTasks();
    bcd0:	4b1e      	ldr	r3, [pc, #120]	; (bd4c <MiApp_EstablishConnection+0x1e8>)
    bcd2:	4798      	blx	r3
        while( P2PStatus.bits.SearchConnection )
    bcd4:	464b      	mov	r3, r9
    bcd6:	781b      	ldrb	r3, [r3, #0]
    bcd8:	06db      	lsls	r3, r3, #27
    bcda:	d5bd      	bpl.n	bc58 <MiApp_EstablishConnection+0xf4>
            t2.Val = MiWi_TickGet();
    bcdc:	47c0      	blx	r8
            if( MiWi_TickGetDiff(t2, t1) > (ONE_SECOND) )
    bcde:	0039      	movs	r1, r7
    bce0:	9006      	str	r0, [sp, #24]
    bce2:	4b1b      	ldr	r3, [pc, #108]	; (bd50 <MiApp_EstablishConnection+0x1ec>)
    bce4:	4798      	blx	r3
    bce6:	4b1b      	ldr	r3, [pc, #108]	; (bd54 <MiApp_EstablishConnection+0x1f0>)
    bce8:	4298      	cmp	r0, r3
    bcea:	d9ef      	bls.n	bccc <MiApp_EstablishConnection+0x168>
                if( connectionInterval-- > 0 )
    bcec:	2c00      	cmp	r4, #0
    bcee:	d100      	bne.n	bcf2 <MiApp_EstablishConnection+0x18e>
    bcf0:	e763      	b.n	bbba <MiApp_EstablishConnection+0x56>
    bcf2:	3c01      	subs	r4, #1
    bcf4:	b2e4      	uxtb	r4, r4
                t1.Val = t2.Val;
    bcf6:	9f06      	ldr	r7, [sp, #24]
    bcf8:	e7ec      	b.n	bcd4 <MiApp_EstablishConnection+0x170>
    bcfa:	9f06      	ldr	r7, [sp, #24]
                if( retry-- == 0 )
    bcfc:	9d07      	ldr	r5, [sp, #28]
                connectionInterval = CONNECTION_INTERVAL-1;
    bcfe:	3c01      	subs	r4, #1
    bd00:	e7e4      	b.n	bccc <MiApp_EstablishConnection+0x168>
    bd02:	46c0      	nop			; (mov r8, r8)
    bd04:	2000001c 	.word	0x2000001c
    bd08:	0000c111 	.word	0x0000c111
    bd0c:	20002aac 	.word	0x20002aac
    bd10:	fff0bdc0 	.word	0xfff0bdc0
    bd14:	20002880 	.word	0x20002880
    bd18:	20002860 	.word	0x20002860
    bd1c:	0000ae51 	.word	0x0000ae51
    bd20:	0000bed1 	.word	0x0000bed1
    bd24:	2000001d 	.word	0x2000001d
    bd28:	20002859 	.word	0x20002859
    bd2c:	20000018 	.word	0x20000018
    bd30:	0000ffff 	.word	0x0000ffff
    bd34:	20002ab0 	.word	0x20002ab0
    bd38:	2000285c 	.word	0x2000285c
    bd3c:	0000aab5 	.word	0x0000aab5
    bd40:	0000ac21 	.word	0x0000ac21
    bd44:	20002808 	.word	0x20002808
    bd48:	0000b411 	.word	0x0000b411
    bd4c:	0000d2e9 	.word	0x0000d2e9
    bd50:	0000c171 	.word	0x0000c171
    bd54:	000f4240 	.word	0x000f4240

0000bd58 <MiApp_SearchConnection>:
    {
    bd58:	b5f0      	push	{r4, r5, r6, r7, lr}
    bd5a:	46d6      	mov	lr, sl
    bd5c:	464f      	mov	r7, r9
    bd5e:	4646      	mov	r6, r8
    bd60:	b5c0      	push	{r6, r7, lr}
    bd62:	b08a      	sub	sp, #40	; 0x28
    bd64:	4690      	mov	r8, r2
        uint8_t backupChannel = currentChannel;
    bd66:	4b3d      	ldr	r3, [pc, #244]	; (be5c <MiApp_SearchConnection+0x104>)
    bd68:	781a      	ldrb	r2, [r3, #0]
    bd6a:	231e      	movs	r3, #30
    bd6c:	ac02      	add	r4, sp, #8
    bd6e:	46a4      	mov	ip, r4
    bd70:	4463      	add	r3, ip
    bd72:	701a      	strb	r2, [r3, #0]
            ActiveScanResults[i].Channel = 0xFF;
    bd74:	4b3a      	ldr	r3, [pc, #232]	; (be60 <MiApp_SearchConnection+0x108>)
    bd76:	22ff      	movs	r2, #255	; 0xff
    bd78:	701a      	strb	r2, [r3, #0]
    bd7a:	741a      	strb	r2, [r3, #16]
    bd7c:	2420      	movs	r4, #32
    bd7e:	551a      	strb	r2, [r3, r4]
    bd80:	3410      	adds	r4, #16
    bd82:	551a      	strb	r2, [r3, r4]
        ActiveScanResultIndex = 0;
    bd84:	2300      	movs	r3, #0
    bd86:	4a37      	ldr	r2, [pc, #220]	; (be64 <MiApp_SearchConnection+0x10c>)
    bd88:	7013      	strb	r3, [r2, #0]
        i = 0;
    bd8a:	221f      	movs	r2, #31
    bd8c:	4462      	add	r2, ip
    bd8e:	7013      	strb	r3, [r2, #0]
		scan_symbols =   ABASESUPERFRAMEDURATION *((1<<scan_duration) + 1);
    bd90:	3301      	adds	r3, #1
    bd92:	4083      	lsls	r3, r0
    bd94:	3301      	adds	r3, #1
    bd96:	011d      	lsls	r5, r3, #4
    bd98:	1aeb      	subs	r3, r5, r3
    bd9a:	019b      	lsls	r3, r3, #6
		return SYMBOLS_TO_TICKS(scan_symbols);
    bd9c:	25fa      	movs	r5, #250	; 0xfa
    bd9e:	00ad      	lsls	r5, r5, #2
    bda0:	435d      	muls	r5, r3
    bda2:	2300      	movs	r3, #0
            if( ChannelMap & FULL_CHANNEL_MAP & (channelMask << i) )
    bda4:	2603      	movs	r6, #3
    bda6:	400e      	ands	r6, r1
    bda8:	46b2      	mov	sl, r6
                printf("\r\nScan Channel ");
    bdaa:	4a2f      	ldr	r2, [pc, #188]	; (be68 <MiApp_SearchConnection+0x110>)
    bdac:	4691      	mov	r9, r2
    bdae:	e009      	b.n	bdc4 <MiApp_SearchConnection+0x6c>
            i++;
    bdb0:	221f      	movs	r2, #31
    bdb2:	ab02      	add	r3, sp, #8
    bdb4:	469c      	mov	ip, r3
    bdb6:	4462      	add	r2, ip
    bdb8:	7813      	ldrb	r3, [r2, #0]
    bdba:	3301      	adds	r3, #1
    bdbc:	b2db      	uxtb	r3, r3
    bdbe:	7013      	strb	r3, [r2, #0]
        while( i < 32 )
    bdc0:	2b1f      	cmp	r3, #31
    bdc2:	d83b      	bhi.n	be3c <MiApp_SearchConnection+0xe4>
            if( ChannelMap & FULL_CHANNEL_MAP & (channelMask << i) )
    bdc4:	2201      	movs	r2, #1
    bdc6:	409a      	lsls	r2, r3
    bdc8:	4653      	mov	r3, sl
    bdca:	421a      	tst	r2, r3
    bdcc:	d0f0      	beq.n	bdb0 <MiApp_SearchConnection+0x58>
                printf("\r\nScan Channel ");
    bdce:	4827      	ldr	r0, [pc, #156]	; (be6c <MiApp_SearchConnection+0x114>)
    bdd0:	47c8      	blx	r9
                printf("%d",i);
    bdd2:	241f      	movs	r4, #31
    bdd4:	ab02      	add	r3, sp, #8
    bdd6:	469c      	mov	ip, r3
    bdd8:	4464      	add	r4, ip
    bdda:	7821      	ldrb	r1, [r4, #0]
    bddc:	4824      	ldr	r0, [pc, #144]	; (be70 <MiApp_SearchConnection+0x118>)
    bdde:	47c8      	blx	r9
                MiApp_Set(CHANNEL, &i);
    bde0:	0021      	movs	r1, r4
    bde2:	2000      	movs	r0, #0
    bde4:	4b23      	ldr	r3, [pc, #140]	; (be74 <MiApp_SearchConnection+0x11c>)
    bde6:	4798      	blx	r3
                dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_ACTIVE_SCAN_REQUEST));
    bde8:	2010      	movs	r0, #16
    bdea:	4b23      	ldr	r3, [pc, #140]	; (be78 <MiApp_SearchConnection+0x120>)
    bdec:	4798      	blx	r3
                if (NULL == dataPtr)
    bdee:	2800      	cmp	r0, #0
    bdf0:	d02e      	beq.n	be50 <MiApp_SearchConnection+0xf8>
                dataPtr[dataLen++] = CMD_P2P_ACTIVE_SCAN_REQUEST;
    bdf2:	2387      	movs	r3, #135	; 0x87
    bdf4:	7003      	strb	r3, [r0, #0]
                dataPtr[dataLen++] = currentChannel;
    bdf6:	4b19      	ldr	r3, [pc, #100]	; (be5c <MiApp_SearchConnection+0x104>)
    bdf8:	781b      	ldrb	r3, [r3, #0]
    bdfa:	7043      	strb	r3, [r0, #1]
                    SendPacket(true, tmpPANID, NULL, true, false, dataLen, dataPtr,0, true, CommandConfCallback);
    bdfc:	4b1f      	ldr	r3, [pc, #124]	; (be7c <MiApp_SearchConnection+0x124>)
    bdfe:	9305      	str	r3, [sp, #20]
    be00:	2301      	movs	r3, #1
    be02:	9304      	str	r3, [sp, #16]
    be04:	2300      	movs	r3, #0
    be06:	9303      	str	r3, [sp, #12]
    be08:	9002      	str	r0, [sp, #8]
    be0a:	2202      	movs	r2, #2
    be0c:	9201      	str	r2, [sp, #4]
    be0e:	9300      	str	r3, [sp, #0]
    be10:	3301      	adds	r3, #1
    be12:	2200      	movs	r2, #0
    be14:	2101      	movs	r1, #1
    be16:	4249      	negs	r1, r1
    be18:	2001      	movs	r0, #1
    be1a:	4c19      	ldr	r4, [pc, #100]	; (be80 <MiApp_SearchConnection+0x128>)
    be1c:	47a0      	blx	r4
                t1.Val = MiWi_TickGet();
    be1e:	4b19      	ldr	r3, [pc, #100]	; (be84 <MiApp_SearchConnection+0x12c>)
    be20:	4798      	blx	r3
    be22:	9007      	str	r0, [sp, #28]
                    P2PTasks();
    be24:	4e18      	ldr	r6, [pc, #96]	; (be88 <MiApp_SearchConnection+0x130>)
					SYSTEM_RunTasks();			
    be26:	4f19      	ldr	r7, [pc, #100]	; (be8c <MiApp_SearchConnection+0x134>)
                    t2.Val = MiWi_TickGet();
    be28:	4c16      	ldr	r4, [pc, #88]	; (be84 <MiApp_SearchConnection+0x12c>)
                    P2PTasks();
    be2a:	47b0      	blx	r6
					SYSTEM_RunTasks();			
    be2c:	47b8      	blx	r7
                    t2.Val = MiWi_TickGet();
    be2e:	47a0      	blx	r4
                    if( MiWi_TickGetDiff(t2, t1) > ((uint32_t)(miwi_scan_duration_ticks(ScanDuration))) )
    be30:	9907      	ldr	r1, [sp, #28]
    be32:	4b17      	ldr	r3, [pc, #92]	; (be90 <MiApp_SearchConnection+0x138>)
    be34:	4798      	blx	r3
    be36:	42a8      	cmp	r0, r5
    be38:	d9f7      	bls.n	be2a <MiApp_SearchConnection+0xd2>
    be3a:	e7b9      	b.n	bdb0 <MiApp_SearchConnection+0x58>
        MiApp_Set(CHANNEL, &backupChannel);
    be3c:	211e      	movs	r1, #30
    be3e:	4461      	add	r1, ip
    be40:	2000      	movs	r0, #0
    be42:	4b0c      	ldr	r3, [pc, #48]	; (be74 <MiApp_SearchConnection+0x11c>)
    be44:	4798      	blx	r3
        ConfCallback(ActiveScanResultIndex, (uint8_t*)ActiveScanResults);
    be46:	4c07      	ldr	r4, [pc, #28]	; (be64 <MiApp_SearchConnection+0x10c>)
    be48:	7820      	ldrb	r0, [r4, #0]
    be4a:	4905      	ldr	r1, [pc, #20]	; (be60 <MiApp_SearchConnection+0x108>)
    be4c:	47c0      	blx	r8
        return ActiveScanResultIndex;
    be4e:	7820      	ldrb	r0, [r4, #0]
    }   
    be50:	b00a      	add	sp, #40	; 0x28
    be52:	bc1c      	pop	{r2, r3, r4}
    be54:	4690      	mov	r8, r2
    be56:	4699      	mov	r9, r3
    be58:	46a2      	mov	sl, r4
    be5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    be5c:	2000001d 	.word	0x2000001d
    be60:	20002ab0 	.word	0x20002ab0
    be64:	20002b00 	.word	0x20002b00
    be68:	00015b79 	.word	0x00015b79
    be6c:	00017b0c 	.word	0x00017b0c
    be70:	00017150 	.word	0x00017150
    be74:	0000ae51 	.word	0x0000ae51
    be78:	0000bed1 	.word	0x0000bed1
    be7c:	0000aab5 	.word	0x0000aab5
    be80:	0000ac21 	.word	0x0000ac21
    be84:	0000c111 	.word	0x0000c111
    be88:	0000b411 	.word	0x0000b411
    be8c:	0000d2e9 	.word	0x0000d2e9
    be90:	0000c171 	.word	0x0000c171

0000be94 <MiMem_Init>:
* Output:		    none
*
* Overview:		    This function will initialize the Mimem buffers
********************************************************************/
void MiMem_Init(void)
{
    be94:	b510      	push	{r4, lr}
	size_t startAddress =  ALIGN((size_t)heapMem);
    be96:	4a0b      	ldr	r2, [pc, #44]	; (bec4 <MiMem_Init+0x30>)
    be98:	1e50      	subs	r0, r2, #1
    be9a:	2403      	movs	r4, #3
    be9c:	43a0      	bics	r0, r4
    be9e:	1d01      	adds	r1, r0, #4

	/*Aligned heap is the base */
	base = (Block_t*) startAddress;
    bea0:	4b09      	ldr	r3, [pc, #36]	; (bec8 <MiMem_Init+0x34>)
    bea2:	6019      	str	r1, [r3, #0]
	base->size = totalFreeBytesRemaining = HEAP_SIZE - (startAddress - (size_t)heapMem);
    bea4:	4253      	negs	r3, r2
    bea6:	43a3      	bics	r3, r4
    bea8:	24c0      	movs	r4, #192	; 0xc0
    beaa:	0164      	lsls	r4, r4, #5
    beac:	46a4      	mov	ip, r4
    beae:	4462      	add	r2, ip
    beb0:	189b      	adds	r3, r3, r2
    beb2:	4a06      	ldr	r2, [pc, #24]	; (becc <MiMem_Init+0x38>)
    beb4:	6013      	str	r3, [r2, #0]
    beb6:	60c3      	str	r3, [r0, #12]
	base->free = true;
    beb8:	2301      	movs	r3, #1
    beba:	7403      	strb	r3, [r0, #16]
	base->next = NULL;
    bebc:	2300      	movs	r3, #0
    bebe:	6043      	str	r3, [r0, #4]
	base->prev = NULL;
    bec0:	6083      	str	r3, [r0, #8]
}
    bec2:	bd10      	pop	{r4, pc}
    bec4:	200004a4 	.word	0x200004a4
    bec8:	200004a0 	.word	0x200004a0
    becc:	20001ca4 	.word	0x20001ca4

0000bed0 <MiMem_Alloc>:
*  or returns NULL if no memory available
*
* Note:			    none
********************************************************************/
uint8_t* MiMem_Alloc(uint8_t size)
{
    bed0:	b570      	push	{r4, r5, r6, lr}
    bed2:	0005      	movs	r5, r0
	size_t requestedSize = 0U;
	void* requestedMemPtr = NULL;

	/* Initialize the Heap */
	if (!base)
    bed4:	4b29      	ldr	r3, [pc, #164]	; (bf7c <MiMem_Alloc+0xac>)
    bed6:	681b      	ldr	r3, [r3, #0]
    bed8:	2b00      	cmp	r3, #0
    beda:	d012      	beq.n	bf02 <MiMem_Alloc+0x32>
	{
		MiMem_Init();
	}
	/* if requested size is of non zero */
	if (size)
    bedc:	2d00      	cmp	r5, #0
    bede:	d047      	beq.n	bf70 <MiMem_Alloc+0xa0>
	{
		requestedSize =  size + blockMetaDataSize;
		requestedSize = ALIGN(requestedSize);
    bee0:	0029      	movs	r1, r5
    bee2:	310f      	adds	r1, #15
    bee4:	2303      	movs	r3, #3
    bee6:	4399      	bics	r1, r3
    bee8:	3104      	adds	r1, #4
		if (requestedSize <= totalFreeBytesRemaining)
    beea:	4b25      	ldr	r3, [pc, #148]	; (bf80 <MiMem_Alloc+0xb0>)
    beec:	6818      	ldr	r0, [r3, #0]
    beee:	4281      	cmp	r1, r0
    bef0:	d840      	bhi.n	bf74 <MiMem_Alloc+0xa4>
		{
			size_t receivedSize = (size_t)~0U;
			Block_t *requestedBlock = NULL;
			Block_t *blockPtr = base;
    bef2:	4b22      	ldr	r3, [pc, #136]	; (bf7c <MiMem_Alloc+0xac>)
    bef4:	681b      	ldr	r3, [r3, #0]

			/* Find best fit free Block */
			while (blockPtr)
    bef6:	2b00      	cmp	r3, #0
    bef8:	d03e      	beq.n	bf78 <MiMem_Alloc+0xa8>
    befa:	2600      	movs	r6, #0
    befc:	2401      	movs	r4, #1
    befe:	4264      	negs	r4, r4
    bf00:	e005      	b.n	bf0e <MiMem_Alloc+0x3e>
		MiMem_Init();
    bf02:	4b20      	ldr	r3, [pc, #128]	; (bf84 <MiMem_Alloc+0xb4>)
    bf04:	4798      	blx	r3
    bf06:	e7e9      	b.n	bedc <MiMem_Alloc+0xc>
				if ((blockPtr->free) && (blockPtr->size >= requestedSize) && (blockPtr->size < receivedSize))
				{
					receivedSize = blockPtr->size;
					requestedBlock = blockPtr;
				}
				blockPtr = blockPtr->next;
    bf08:	681b      	ldr	r3, [r3, #0]
			while (blockPtr)
    bf0a:	2b00      	cmp	r3, #0
    bf0c:	d00a      	beq.n	bf24 <MiMem_Alloc+0x54>
				if ((blockPtr->free) && (blockPtr->size >= requestedSize) && (blockPtr->size < receivedSize))
    bf0e:	7b1a      	ldrb	r2, [r3, #12]
    bf10:	2a00      	cmp	r2, #0
    bf12:	d0f9      	beq.n	bf08 <MiMem_Alloc+0x38>
    bf14:	689a      	ldr	r2, [r3, #8]
    bf16:	4291      	cmp	r1, r2
    bf18:	d8f6      	bhi.n	bf08 <MiMem_Alloc+0x38>
    bf1a:	42a2      	cmp	r2, r4
    bf1c:	d2f4      	bcs.n	bf08 <MiMem_Alloc+0x38>
    bf1e:	001e      	movs	r6, r3
					receivedSize = blockPtr->size;
    bf20:	0014      	movs	r4, r2
    bf22:	e7f1      	b.n	bf08 <MiMem_Alloc+0x38>
    bf24:	2400      	movs	r4, #0
			}

			if (requestedBlock)
    bf26:	2e00      	cmp	r6, #0
    bf28:	d012      	beq.n	bf50 <MiMem_Alloc+0x80>
			{
				if ((requestedBlock->size - requestedSize) > HEAP_MINIMUM_BLOCK_SIZE)
    bf2a:	68b3      	ldr	r3, [r6, #8]
    bf2c:	1a5b      	subs	r3, r3, r1
    bf2e:	2b14      	cmp	r3, #20
    bf30:	d810      	bhi.n	bf54 <MiMem_Alloc+0x84>
				splitBlock (requestedBlock, requestedSize);
				requestedBlock->free = false;
    bf32:	2300      	movs	r3, #0
    bf34:	7333      	strb	r3, [r6, #12]
				totalFreeBytesRemaining -= requestedBlock->size;
    bf36:	68b3      	ldr	r3, [r6, #8]
    bf38:	1ac0      	subs	r0, r0, r3
    bf3a:	4b11      	ldr	r3, [pc, #68]	; (bf80 <MiMem_Alloc+0xb0>)
    bf3c:	6018      	str	r0, [r3, #0]
				requestedMemPtr = ( void* )(((uint8_t*)requestedBlock) + blockMetaDataSize);
    bf3e:	0034      	movs	r4, r6
    bf40:	3410      	adds	r4, #16
			}
		}
	}
	if (NULL != requestedMemPtr)
    bf42:	2c00      	cmp	r4, #0
    bf44:	d004      	beq.n	bf50 <MiMem_Alloc+0x80>
	{
		memset(requestedMemPtr, 0, size);
    bf46:	002a      	movs	r2, r5
    bf48:	2100      	movs	r1, #0
    bf4a:	0020      	movs	r0, r4
    bf4c:	4b0e      	ldr	r3, [pc, #56]	; (bf88 <MiMem_Alloc+0xb8>)
    bf4e:	4798      	blx	r3
	}
	return requestedMemPtr;
}
    bf50:	0020      	movs	r0, r4
    bf52:	bd70      	pop	{r4, r5, r6, pc}
  \param[in] size size of the memory chunk requested
  \return None.
 ******************************************************************************/
static void splitBlock(Block_t* blockTobeSplitted, size_t size)
{
	uint8_t* ptr = (uint8_t*)blockTobeSplitted + size;
    bf54:	1872      	adds	r2, r6, r1
	Block_t* newBlock = (Block_t*)ptr;

	newBlock->size = blockTobeSplitted->size - size;
    bf56:	6093      	str	r3, [r2, #8]

	if (blockTobeSplitted->next)
    bf58:	6833      	ldr	r3, [r6, #0]
    bf5a:	2b00      	cmp	r3, #0
    bf5c:	d000      	beq.n	bf60 <MiMem_Alloc+0x90>
		blockTobeSplitted->next->prev = newBlock;
    bf5e:	605a      	str	r2, [r3, #4]

	newBlock->next = blockTobeSplitted->next;
    bf60:	6833      	ldr	r3, [r6, #0]
    bf62:	6013      	str	r3, [r2, #0]
	newBlock->prev = blockTobeSplitted;
    bf64:	6056      	str	r6, [r2, #4]
	newBlock->free = true;
    bf66:	2301      	movs	r3, #1
    bf68:	7313      	strb	r3, [r2, #12]

	blockTobeSplitted->next = newBlock;
    bf6a:	6032      	str	r2, [r6, #0]
	blockTobeSplitted->size = size;
    bf6c:	60b1      	str	r1, [r6, #8]
    bf6e:	e7e0      	b.n	bf32 <MiMem_Alloc+0x62>
    bf70:	2400      	movs	r4, #0
    bf72:	e7ed      	b.n	bf50 <MiMem_Alloc+0x80>
    bf74:	2400      	movs	r4, #0
    bf76:	e7eb      	b.n	bf50 <MiMem_Alloc+0x80>
			while (blockPtr)
    bf78:	2400      	movs	r4, #0
    bf7a:	e7e9      	b.n	bf50 <MiMem_Alloc+0x80>
    bf7c:	200004a0 	.word	0x200004a0
    bf80:	20001ca4 	.word	0x20001ca4
    bf84:	0000be95 	.word	0x0000be95
    bf88:	000155d1 	.word	0x000155d1

0000bf8c <MiMem_Free>:
	Block_t* blockPtr = base;
    bf8c:	4b1c      	ldr	r3, [pc, #112]	; (c000 <MiMem_Free+0x74>)
    bf8e:	681b      	ldr	r3, [r3, #0]
	Block_t* freeBlockPtr = (Block_t*)((uint8_t*)ptr - (uint8_t*)blockMetaDataSize);
    bf90:	3810      	subs	r0, #16
	for(; ((blockPtr != NULL) && (blockPtr != freeBlockPtr)); blockPtr = blockPtr->next);
    bf92:	2b00      	cmp	r3, #0
    bf94:	d030      	beq.n	bff8 <MiMem_Free+0x6c>
    bf96:	4283      	cmp	r3, r0
    bf98:	d02f      	beq.n	bffa <MiMem_Free+0x6e>
    bf9a:	681b      	ldr	r3, [r3, #0]
    bf9c:	2b00      	cmp	r3, #0
    bf9e:	d02b      	beq.n	bff8 <MiMem_Free+0x6c>
    bfa0:	4298      	cmp	r0, r3
    bfa2:	d1fa      	bne.n	bf9a <MiMem_Free+0xe>
		blockPtr->free = true;
    bfa4:	2301      	movs	r3, #1
    bfa6:	7303      	strb	r3, [r0, #12]
		totalFreeBytesRemaining += blockPtr->size;
    bfa8:	6881      	ldr	r1, [r0, #8]
    bfaa:	4a16      	ldr	r2, [pc, #88]	; (c004 <MiMem_Free+0x78>)
    bfac:	6813      	ldr	r3, [r2, #0]
    bfae:	185b      	adds	r3, r3, r1
    bfb0:	6013      	str	r3, [r2, #0]
		if (blockPtr->prev && blockPtr->prev->free)
    bfb2:	6843      	ldr	r3, [r0, #4]
    bfb4:	2b00      	cmp	r3, #0
    bfb6:	d00f      	beq.n	bfd8 <MiMem_Free+0x4c>
    bfb8:	7b1a      	ldrb	r2, [r3, #12]
    bfba:	2a00      	cmp	r2, #0
    bfbc:	d00c      	beq.n	bfd8 <MiMem_Free+0x4c>
			blockPtr->prev->size += blockPtr->size;
    bfbe:	689a      	ldr	r2, [r3, #8]
    bfc0:	4694      	mov	ip, r2
    bfc2:	4461      	add	r1, ip
    bfc4:	6099      	str	r1, [r3, #8]
			if (blockPtr->next)
    bfc6:	6803      	ldr	r3, [r0, #0]
    bfc8:	2b00      	cmp	r3, #0
    bfca:	d001      	beq.n	bfd0 <MiMem_Free+0x44>
			blockPtr->next->prev = blockPtr->prev;
    bfcc:	6842      	ldr	r2, [r0, #4]
    bfce:	605a      	str	r2, [r3, #4]
			blockPtr->prev->next = blockPtr->next;
    bfd0:	6843      	ldr	r3, [r0, #4]
    bfd2:	6802      	ldr	r2, [r0, #0]
    bfd4:	601a      	str	r2, [r3, #0]
			blockPtr = blockPtr->prev;
    bfd6:	6840      	ldr	r0, [r0, #4]
		if (blockPtr->next && blockPtr->next->free)
    bfd8:	6803      	ldr	r3, [r0, #0]
    bfda:	2b00      	cmp	r3, #0
    bfdc:	d00c      	beq.n	bff8 <MiMem_Free+0x6c>
    bfde:	7b1a      	ldrb	r2, [r3, #12]
    bfe0:	2a00      	cmp	r2, #0
    bfe2:	d009      	beq.n	bff8 <MiMem_Free+0x6c>
			blockPtr->size += blockPtr->next->size ;
    bfe4:	6882      	ldr	r2, [r0, #8]
    bfe6:	6899      	ldr	r1, [r3, #8]
    bfe8:	468c      	mov	ip, r1
    bfea:	4462      	add	r2, ip
    bfec:	6082      	str	r2, [r0, #8]
			blockPtr->next = blockPtr->next->next;
    bfee:	681b      	ldr	r3, [r3, #0]
    bff0:	6003      	str	r3, [r0, #0]
			if (blockPtr->next)
    bff2:	2b00      	cmp	r3, #0
    bff4:	d000      	beq.n	bff8 <MiMem_Free+0x6c>
			blockPtr->next->prev = blockPtr;
    bff6:	6058      	str	r0, [r3, #4]
}
    bff8:	4770      	bx	lr
	Block_t* blockPtr = base;
    bffa:	0018      	movs	r0, r3
    bffc:	e7d2      	b.n	bfa4 <MiMem_Free+0x18>
    bffe:	46c0      	nop			; (mov r8, r8)
    c000:	200004a0 	.word	0x200004a0
    c004:	20001ca4 	.word	0x20001ca4

0000c008 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    c008:	b530      	push	{r4, r5, lr}
	if (timers) {
    c00a:	4b14      	ldr	r3, [pc, #80]	; (c05c <placeTimer+0x54>)
    c00c:	681d      	ldr	r5, [r3, #0]
    c00e:	2d00      	cmp	r5, #0
    c010:	d01c      	beq.n	c04c <placeTimer+0x44>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    c012:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    c014:	6869      	ldr	r1, [r5, #4]
    c016:	428a      	cmp	r2, r1
    c018:	d309      	bcc.n	c02e <placeTimer+0x26>
    c01a:	002c      	movs	r4, r5
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    c01c:	1a52      	subs	r2, r2, r1
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    c01e:	6823      	ldr	r3, [r4, #0]
    c020:	2b00      	cmp	r3, #0
    c022:	d008      	beq.n	c036 <placeTimer+0x2e>
			if (timeout < t->timeout) {
    c024:	6859      	ldr	r1, [r3, #4]
    c026:	4291      	cmp	r1, r2
    c028:	d803      	bhi.n	c032 <placeTimer+0x2a>
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    c02a:	001c      	movs	r4, r3
    c02c:	e7f6      	b.n	c01c <placeTimer+0x14>
    c02e:	002b      	movs	r3, r5
		SYS_Timer_t *prev = NULL;
    c030:	2400      	movs	r4, #0
				t->timeout -= timeout;
    c032:	1a89      	subs	r1, r1, r2
    c034:	6059      	str	r1, [r3, #4]
			}

			prev = t;
		}

		timer->timeout = timeout;
    c036:	6042      	str	r2, [r0, #4]

		if (prev) {
    c038:	2c00      	cmp	r4, #0
    c03a:	d003      	beq.n	c044 <placeTimer+0x3c>
			timer->next = prev->next;
    c03c:	6823      	ldr	r3, [r4, #0]
    c03e:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    c040:	6020      	str	r0, [r4, #0]
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    c042:	bd30      	pop	{r4, r5, pc}
			timer->next = timers;
    c044:	6005      	str	r5, [r0, #0]
			timers = timer;
    c046:	4b05      	ldr	r3, [pc, #20]	; (c05c <placeTimer+0x54>)
    c048:	6018      	str	r0, [r3, #0]
    c04a:	e7fa      	b.n	c042 <placeTimer+0x3a>
		timer->next = NULL;
    c04c:	2300      	movs	r3, #0
    c04e:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    c050:	6883      	ldr	r3, [r0, #8]
    c052:	6043      	str	r3, [r0, #4]
		timers = timer;
    c054:	4b01      	ldr	r3, [pc, #4]	; (c05c <placeTimer+0x54>)
    c056:	6018      	str	r0, [r3, #0]
}
    c058:	e7f3      	b.n	c042 <placeTimer+0x3a>
    c05a:	46c0      	nop			; (mov r8, r8)
    c05c:	20001ca8 	.word	0x20001ca8

0000c060 <SYS_HwOverflow_Cb>:
}

//static void SYS_HwOverflow_Cb(void)
void SYS_HwOverflow_Cb(void)
{
	timerExtension1++;
    c060:	4a06      	ldr	r2, [pc, #24]	; (c07c <SYS_HwOverflow_Cb+0x1c>)
    c062:	7813      	ldrb	r3, [r2, #0]
    c064:	3301      	adds	r3, #1
    c066:	b2db      	uxtb	r3, r3
    c068:	7013      	strb	r3, [r2, #0]
	if(timerExtension1 == 0)
    c06a:	7813      	ldrb	r3, [r2, #0]
    c06c:	2b00      	cmp	r3, #0
    c06e:	d104      	bne.n	c07a <SYS_HwOverflow_Cb+0x1a>
	{
		timerExtension2++;
    c070:	4a03      	ldr	r2, [pc, #12]	; (c080 <SYS_HwOverflow_Cb+0x20>)
    c072:	7813      	ldrb	r3, [r2, #0]
    c074:	3301      	adds	r3, #1
    c076:	b2db      	uxtb	r3, r3
    c078:	7013      	strb	r3, [r2, #0]
	}
}
    c07a:	4770      	bx	lr
    c07c:	20002b09 	.word	0x20002b09
    c080:	20002b0a 	.word	0x20002b0a

0000c084 <SYS_TimerStop>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    c084:	4b0e      	ldr	r3, [pc, #56]	; (c0c0 <SYS_TimerStop+0x3c>)
    c086:	681a      	ldr	r2, [r3, #0]
    c088:	2a00      	cmp	r2, #0
    c08a:	d014      	beq.n	c0b6 <SYS_TimerStop+0x32>
		if (t == timer) {
    c08c:	4282      	cmp	r2, r0
    c08e:	d013      	beq.n	c0b8 <SYS_TimerStop+0x34>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    c090:	6813      	ldr	r3, [r2, #0]
    c092:	2b00      	cmp	r3, #0
    c094:	d00f      	beq.n	c0b6 <SYS_TimerStop+0x32>
		if (t == timer) {
    c096:	4298      	cmp	r0, r3
    c098:	d001      	beq.n	c09e <SYS_TimerStop+0x1a>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    c09a:	001a      	movs	r2, r3
    c09c:	e7f8      	b.n	c090 <SYS_TimerStop+0xc>
			if (prev) {
    c09e:	2a00      	cmp	r2, #0
    c0a0:	d00a      	beq.n	c0b8 <SYS_TimerStop+0x34>
				prev->next = t->next;
    c0a2:	6803      	ldr	r3, [r0, #0]
    c0a4:	6013      	str	r3, [r2, #0]
			if (t->next) {
    c0a6:	6803      	ldr	r3, [r0, #0]
    c0a8:	2b00      	cmp	r3, #0
    c0aa:	d004      	beq.n	c0b6 <SYS_TimerStop+0x32>
				t->next->timeout += timer->timeout;
    c0ac:	6842      	ldr	r2, [r0, #4]
    c0ae:	6859      	ldr	r1, [r3, #4]
    c0b0:	468c      	mov	ip, r1
    c0b2:	4462      	add	r2, ip
    c0b4:	605a      	str	r2, [r3, #4]
}
    c0b6:	4770      	bx	lr
				timers = t->next;
    c0b8:	4b01      	ldr	r3, [pc, #4]	; (c0c0 <SYS_TimerStop+0x3c>)
    c0ba:	6802      	ldr	r2, [r0, #0]
    c0bc:	601a      	str	r2, [r3, #0]
    c0be:	e7f2      	b.n	c0a6 <SYS_TimerStop+0x22>
    c0c0:	20001ca8 	.word	0x20001ca8

0000c0c4 <SYS_TimerStarted>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    c0c4:	4b09      	ldr	r3, [pc, #36]	; (c0ec <SYS_TimerStarted+0x28>)
    c0c6:	681b      	ldr	r3, [r3, #0]
    c0c8:	2b00      	cmp	r3, #0
    c0ca:	d00a      	beq.n	c0e2 <SYS_TimerStarted+0x1e>
		if (t == timer) {
    c0cc:	4283      	cmp	r3, r0
    c0ce:	d00a      	beq.n	c0e6 <SYS_TimerStarted+0x22>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    c0d0:	681b      	ldr	r3, [r3, #0]
    c0d2:	2b00      	cmp	r3, #0
    c0d4:	d003      	beq.n	c0de <SYS_TimerStarted+0x1a>
		if (t == timer) {
    c0d6:	4298      	cmp	r0, r3
    c0d8:	d1fa      	bne.n	c0d0 <SYS_TimerStarted+0xc>
			return true;
    c0da:	2001      	movs	r0, #1
    c0dc:	e000      	b.n	c0e0 <SYS_TimerStarted+0x1c>
	return false;
    c0de:	2000      	movs	r0, #0
}
    c0e0:	4770      	bx	lr
	return false;
    c0e2:	2000      	movs	r0, #0
    c0e4:	e7fc      	b.n	c0e0 <SYS_TimerStarted+0x1c>
			return true;
    c0e6:	2001      	movs	r0, #1
    c0e8:	e7fa      	b.n	c0e0 <SYS_TimerStarted+0x1c>
    c0ea:	46c0      	nop			; (mov r8, r8)
    c0ec:	20001ca8 	.word	0x20001ca8

0000c0f0 <SYS_TimerStart>:
{
    c0f0:	b510      	push	{r4, lr}
    c0f2:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    c0f4:	4b04      	ldr	r3, [pc, #16]	; (c108 <SYS_TimerStart+0x18>)
    c0f6:	4798      	blx	r3
    c0f8:	2800      	cmp	r0, #0
    c0fa:	d000      	beq.n	c0fe <SYS_TimerStart+0xe>
}
    c0fc:	bd10      	pop	{r4, pc}
		placeTimer(timer);
    c0fe:	0020      	movs	r0, r4
    c100:	4b02      	ldr	r3, [pc, #8]	; (c10c <SYS_TimerStart+0x1c>)
    c102:	4798      	blx	r3
}
    c104:	e7fa      	b.n	c0fc <SYS_TimerStart+0xc>
    c106:	46c0      	nop			; (mov r8, r8)
    c108:	0000c0c5 	.word	0x0000c0c5
    c10c:	0000c009 	.word	0x0000c009

0000c110 <MiWi_TickGet>:
{
    c110:	b570      	push	{r4, r5, r6, lr}
	uint8_t current_timerExtension1 = timerExtension1;
    c112:	4e11      	ldr	r6, [pc, #68]	; (c158 <MiWi_TickGet+0x48>)
    c114:	7835      	ldrb	r5, [r6, #0]
    c116:	b2ed      	uxtb	r5, r5
	tmr_disable_ovf_interrupt();
    c118:	4b10      	ldr	r3, [pc, #64]	; (c15c <MiWi_TickGet+0x4c>)
    c11a:	4798      	blx	r3
	currentTime.word.w0 = common_tc_read_count();
    c11c:	4b10      	ldr	r3, [pc, #64]	; (c160 <MiWi_TickGet+0x50>)
    c11e:	4798      	blx	r3
    c120:	0004      	movs	r4, r0
	tmr_enable_ovf_interrupt();
    c122:	4b10      	ldr	r3, [pc, #64]	; (c164 <MiWi_TickGet+0x54>)
    c124:	4798      	blx	r3
  __ASM volatile ("nop");
    c126:	46c0      	nop			; (mov r8, r8)
	if (current_timerExtension1 != timerExtension1)
    c128:	7833      	ldrb	r3, [r6, #0]
    c12a:	b2db      	uxtb	r3, r3
    c12c:	429d      	cmp	r5, r3
    c12e:	d004      	beq.n	c13a <MiWi_TickGet+0x2a>
		currentTime.word.w0 = common_tc_read_count();
    c130:	4b0b      	ldr	r3, [pc, #44]	; (c160 <MiWi_TickGet+0x50>)
    c132:	4798      	blx	r3
    c134:	0c24      	lsrs	r4, r4, #16
    c136:	0424      	lsls	r4, r4, #16
    c138:	4304      	orrs	r4, r0
    currentTime.byte.b2 = timerExtension1;
    c13a:	4b07      	ldr	r3, [pc, #28]	; (c158 <MiWi_TickGet+0x48>)
    c13c:	781b      	ldrb	r3, [r3, #0]
    c13e:	041b      	lsls	r3, r3, #16
    c140:	4809      	ldr	r0, [pc, #36]	; (c168 <MiWi_TickGet+0x58>)
    c142:	4004      	ands	r4, r0
    c144:	431c      	orrs	r4, r3
    currentTime.byte.b3 = timerExtension2;
    c146:	4b09      	ldr	r3, [pc, #36]	; (c16c <MiWi_TickGet+0x5c>)
    c148:	781b      	ldrb	r3, [r3, #0]
    c14a:	061b      	lsls	r3, r3, #24
    c14c:	0224      	lsls	r4, r4, #8
    c14e:	0a24      	lsrs	r4, r4, #8
    c150:	431c      	orrs	r4, r3
}
    c152:	0020      	movs	r0, r4
    c154:	bd70      	pop	{r4, r5, r6, pc}
    c156:	46c0      	nop			; (mov r8, r8)
    c158:	20002b09 	.word	0x20002b09
    c15c:	0000d62d 	.word	0x0000d62d
    c160:	000121b9 	.word	0x000121b9
    c164:	0000d641 	.word	0x0000d641
    c168:	ff00ffff 	.word	0xff00ffff
    c16c:	20002b0a 	.word	0x20002b0a

0000c170 <MiWi_TickGetDiff>:
	if (current_tick.Val > previous_tick.Val)
    c170:	4288      	cmp	r0, r1
    c172:	d802      	bhi.n	c17a <MiWi_TickGetDiff+0xa>
		ret_val = (0xFFFFFFFF - previous_tick.Val) + current_tick.Val;
    c174:	3801      	subs	r0, #1
    c176:	1a40      	subs	r0, r0, r1
}
    c178:	4770      	bx	lr
		ret_val = current_tick.Val - previous_tick.Val;
    c17a:	1a40      	subs	r0, r0, r1
    c17c:	e7fc      	b.n	c178 <MiWi_TickGetDiff+0x8>
    c17e:	Address 0x0000c17e is out of bounds.


0000c180 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    c180:	b570      	push	{r4, r5, r6, lr}
    c182:	b082      	sub	sp, #8
    c184:	0005      	movs	r5, r0
    c186:	000e      	movs	r6, r1
	uint16_t temp = 0;
    c188:	2200      	movs	r2, #0
    c18a:	466b      	mov	r3, sp
    c18c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    c18e:	4c06      	ldr	r4, [pc, #24]	; (c1a8 <usart_serial_getchar+0x28>)
    c190:	466b      	mov	r3, sp
    c192:	1d99      	adds	r1, r3, #6
    c194:	0028      	movs	r0, r5
    c196:	47a0      	blx	r4
    c198:	2800      	cmp	r0, #0
    c19a:	d1f9      	bne.n	c190 <usart_serial_getchar+0x10>

	*c = temp;
    c19c:	466b      	mov	r3, sp
    c19e:	3306      	adds	r3, #6
    c1a0:	881b      	ldrh	r3, [r3, #0]
    c1a2:	7033      	strb	r3, [r6, #0]
}
    c1a4:	b002      	add	sp, #8
    c1a6:	bd70      	pop	{r4, r5, r6, pc}
    c1a8:	00006705 	.word	0x00006705

0000c1ac <usart_serial_putchar>:
{
    c1ac:	b570      	push	{r4, r5, r6, lr}
    c1ae:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    c1b0:	b28c      	uxth	r4, r1
    c1b2:	4e03      	ldr	r6, [pc, #12]	; (c1c0 <usart_serial_putchar+0x14>)
    c1b4:	0021      	movs	r1, r4
    c1b6:	0028      	movs	r0, r5
    c1b8:	47b0      	blx	r6
    c1ba:	2800      	cmp	r0, #0
    c1bc:	d1fa      	bne.n	c1b4 <usart_serial_putchar+0x8>
}
    c1be:	bd70      	pop	{r4, r5, r6, pc}
    c1c0:	000066d9 	.word	0x000066d9

0000c1c4 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35 || (WLR089)
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    c1c4:	b510      	push	{r4, lr}
    c1c6:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    c1c8:	466b      	mov	r3, sp
    c1ca:	1ddc      	adds	r4, r3, #7
    c1cc:	2201      	movs	r2, #1
    c1ce:	0021      	movs	r1, r4
    c1d0:	480f      	ldr	r0, [pc, #60]	; (c210 <USART_HOST_ISR_VECT+0x4c>)
    c1d2:	4b10      	ldr	r3, [pc, #64]	; (c214 <USART_HOST_ISR_VECT+0x50>)
    c1d4:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    c1d6:	b672      	cpsid	i
  __ASM volatile ("dmb");
    c1d8:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    c1dc:	2200      	movs	r2, #0
    c1de:	4b0e      	ldr	r3, [pc, #56]	; (c218 <USART_HOST_ISR_VECT+0x54>)
    c1e0:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    c1e2:	4b0e      	ldr	r3, [pc, #56]	; (c21c <USART_HOST_ISR_VECT+0x58>)
    c1e4:	781b      	ldrb	r3, [r3, #0]
    c1e6:	7821      	ldrb	r1, [r4, #0]
    c1e8:	4a0d      	ldr	r2, [pc, #52]	; (c220 <USART_HOST_ISR_VECT+0x5c>)
    c1ea:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    c1ec:	2b7f      	cmp	r3, #127	; 0x7f
    c1ee:	d00a      	beq.n	c206 <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    c1f0:	3301      	adds	r3, #1
    c1f2:	4a0a      	ldr	r2, [pc, #40]	; (c21c <USART_HOST_ISR_VECT+0x58>)
    c1f4:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    c1f6:	2201      	movs	r2, #1
    c1f8:	4b07      	ldr	r3, [pc, #28]	; (c218 <USART_HOST_ISR_VECT+0x54>)
    c1fa:	701a      	strb	r2, [r3, #0]
    c1fc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c200:	b662      	cpsie	i
}
    c202:	b002      	add	sp, #8
    c204:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    c206:	2200      	movs	r2, #0
    c208:	4b04      	ldr	r3, [pc, #16]	; (c21c <USART_HOST_ISR_VECT+0x58>)
    c20a:	701a      	strb	r2, [r3, #0]
    c20c:	e7f3      	b.n	c1f6 <USART_HOST_ISR_VECT+0x32>
    c20e:	46c0      	nop			; (mov r8, r8)
    c210:	20001cac 	.word	0x20001cac
    c214:	00006835 	.word	0x00006835
    c218:	20000014 	.word	0x20000014
    c21c:	20001d60 	.word	0x20001d60
    c220:	20001ce0 	.word	0x20001ce0

0000c224 <sio2host_init>:
{
    c224:	b5f0      	push	{r4, r5, r6, r7, lr}
    c226:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    c228:	2380      	movs	r3, #128	; 0x80
    c22a:	05db      	lsls	r3, r3, #23
    c22c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    c22e:	2300      	movs	r3, #0
    c230:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    c232:	22ff      	movs	r2, #255	; 0xff
    c234:	4669      	mov	r1, sp
    c236:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    c238:	2200      	movs	r2, #0
    c23a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    c23c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    c23e:	2401      	movs	r4, #1
    c240:	2124      	movs	r1, #36	; 0x24
    c242:	4668      	mov	r0, sp
    c244:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    c246:	3101      	adds	r1, #1
    c248:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    c24a:	3101      	adds	r1, #1
    c24c:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    c24e:	3101      	adds	r1, #1
    c250:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    c252:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    c254:	3105      	adds	r1, #5
    c256:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    c258:	3101      	adds	r1, #1
    c25a:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    c25c:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    c25e:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    c260:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    c262:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    c264:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    c266:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    c268:	2313      	movs	r3, #19
    c26a:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    c26c:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    c26e:	2380      	movs	r3, #128	; 0x80
    c270:	035b      	lsls	r3, r3, #13
    c272:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    c274:	4b2f      	ldr	r3, [pc, #188]	; (c334 <sio2host_init+0x110>)
    c276:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    c278:	4b2f      	ldr	r3, [pc, #188]	; (c338 <sio2host_init+0x114>)
    c27a:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    c27c:	2301      	movs	r3, #1
    c27e:	425b      	negs	r3, r3
    c280:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    c282:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    c284:	23e1      	movs	r3, #225	; 0xe1
    c286:	025b      	lsls	r3, r3, #9
    c288:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    c28a:	4d2c      	ldr	r5, [pc, #176]	; (c33c <sio2host_init+0x118>)
    c28c:	4b2c      	ldr	r3, [pc, #176]	; (c340 <sio2host_init+0x11c>)
    c28e:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    c290:	4a2c      	ldr	r2, [pc, #176]	; (c344 <sio2host_init+0x120>)
    c292:	4b2d      	ldr	r3, [pc, #180]	; (c348 <sio2host_init+0x124>)
    c294:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    c296:	4a2d      	ldr	r2, [pc, #180]	; (c34c <sio2host_init+0x128>)
    c298:	4b2d      	ldr	r3, [pc, #180]	; (c350 <sio2host_init+0x12c>)
    c29a:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    c29c:	466a      	mov	r2, sp
    c29e:	2184      	movs	r1, #132	; 0x84
    c2a0:	05c9      	lsls	r1, r1, #23
    c2a2:	0028      	movs	r0, r5
    c2a4:	4b2b      	ldr	r3, [pc, #172]	; (c354 <sio2host_init+0x130>)
    c2a6:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    c2a8:	4f2b      	ldr	r7, [pc, #172]	; (c358 <sio2host_init+0x134>)
    c2aa:	683b      	ldr	r3, [r7, #0]
    c2ac:	6898      	ldr	r0, [r3, #8]
    c2ae:	2100      	movs	r1, #0
    c2b0:	4e2a      	ldr	r6, [pc, #168]	; (c35c <sio2host_init+0x138>)
    c2b2:	47b0      	blx	r6
	setbuf(stdin, NULL);
    c2b4:	683b      	ldr	r3, [r7, #0]
    c2b6:	6858      	ldr	r0, [r3, #4]
    c2b8:	2100      	movs	r1, #0
    c2ba:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    c2bc:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    c2be:	0030      	movs	r0, r6
    c2c0:	4b27      	ldr	r3, [pc, #156]	; (c360 <sio2host_init+0x13c>)
    c2c2:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    c2c4:	231f      	movs	r3, #31
    c2c6:	4018      	ands	r0, r3
    c2c8:	4084      	lsls	r4, r0
    c2ca:	4b26      	ldr	r3, [pc, #152]	; (c364 <sio2host_init+0x140>)
    c2cc:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    c2ce:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    c2d0:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    c2d2:	2b00      	cmp	r3, #0
    c2d4:	d1fc      	bne.n	c2d0 <sio2host_init+0xac>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    c2d6:	6833      	ldr	r3, [r6, #0]
    c2d8:	2202      	movs	r2, #2
    c2da:	4313      	orrs	r3, r2
    c2dc:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    c2de:	4b17      	ldr	r3, [pc, #92]	; (c33c <sio2host_init+0x118>)
    c2e0:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    c2e2:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    c2e4:	2a00      	cmp	r2, #0
    c2e6:	d1fc      	bne.n	c2e2 <sio2host_init+0xbe>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    c2e8:	6859      	ldr	r1, [r3, #4]
    c2ea:	2280      	movs	r2, #128	; 0x80
    c2ec:	0252      	lsls	r2, r2, #9
    c2ee:	430a      	orrs	r2, r1
    c2f0:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    c2f2:	2101      	movs	r1, #1
    c2f4:	4a11      	ldr	r2, [pc, #68]	; (c33c <sio2host_init+0x118>)
    c2f6:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    c2f8:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    c2fa:	2a00      	cmp	r2, #0
    c2fc:	d1fc      	bne.n	c2f8 <sio2host_init+0xd4>
	return (usart_hw->SYNCBUSY.reg);
    c2fe:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    c300:	2a00      	cmp	r2, #0
    c302:	d1fc      	bne.n	c2fe <sio2host_init+0xda>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    c304:	6859      	ldr	r1, [r3, #4]
    c306:	2280      	movs	r2, #128	; 0x80
    c308:	0292      	lsls	r2, r2, #10
    c30a:	430a      	orrs	r2, r1
    c30c:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    c30e:	2101      	movs	r1, #1
    c310:	4a0a      	ldr	r2, [pc, #40]	; (c33c <sio2host_init+0x118>)
    c312:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    c314:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    c316:	2a00      	cmp	r2, #0
    c318:	d1fc      	bne.n	c314 <sio2host_init+0xf0>
	USART_HOST_RX_ISR_ENABLE();
    c31a:	4913      	ldr	r1, [pc, #76]	; (c368 <sio2host_init+0x144>)
    c31c:	2000      	movs	r0, #0
    c31e:	4b13      	ldr	r3, [pc, #76]	; (c36c <sio2host_init+0x148>)
    c320:	4798      	blx	r3
    c322:	2204      	movs	r2, #4
    c324:	2384      	movs	r3, #132	; 0x84
    c326:	05db      	lsls	r3, r3, #23
    c328:	759a      	strb	r2, [r3, #22]
    c32a:	32fc      	adds	r2, #252	; 0xfc
    c32c:	4b0d      	ldr	r3, [pc, #52]	; (c364 <sio2host_init+0x140>)
    c32e:	601a      	str	r2, [r3, #0]
}
    c330:	b011      	add	sp, #68	; 0x44
    c332:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c334:	00040003 	.word	0x00040003
    c338:	00050003 	.word	0x00050003
    c33c:	20001cac 	.word	0x20001cac
    c340:	20002124 	.word	0x20002124
    c344:	0000c1ad 	.word	0x0000c1ad
    c348:	20002120 	.word	0x20002120
    c34c:	0000c181 	.word	0x0000c181
    c350:	2000211c 	.word	0x2000211c
    c354:	0000636d 	.word	0x0000636d
    c358:	2000002c 	.word	0x2000002c
    c35c:	00015d7d 	.word	0x00015d7d
    c360:	00005c99 	.word	0x00005c99
    c364:	e000e100 	.word	0xe000e100
    c368:	0000c1c5 	.word	0x0000c1c5
    c36c:	00005c5d 	.word	0x00005c5d

0000c370 <sio2host_tx>:
{
    c370:	b5f0      	push	{r4, r5, r6, r7, lr}
    c372:	b083      	sub	sp, #12
    c374:	0006      	movs	r6, r0
    c376:	9101      	str	r1, [sp, #4]
	return usart_write_buffer_wait(module, tx_data, length);
    c378:	466b      	mov	r3, sp
    c37a:	889d      	ldrh	r5, [r3, #4]
    c37c:	4c05      	ldr	r4, [pc, #20]	; (c394 <sio2host_tx+0x24>)
    c37e:	4f06      	ldr	r7, [pc, #24]	; (c398 <sio2host_tx+0x28>)
    c380:	002a      	movs	r2, r5
    c382:	0031      	movs	r1, r6
    c384:	0020      	movs	r0, r4
    c386:	47b8      	blx	r7
	} while (status != STATUS_OK);
    c388:	2800      	cmp	r0, #0
    c38a:	d1f9      	bne.n	c380 <sio2host_tx+0x10>
}
    c38c:	9801      	ldr	r0, [sp, #4]
    c38e:	b003      	add	sp, #12
    c390:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c392:	46c0      	nop			; (mov r8, r8)
    c394:	20001cac 	.word	0x20001cac
    c398:	00006775 	.word	0x00006775

0000c39c <sio2host_putchar>:
{
    c39c:	b500      	push	{lr}
    c39e:	b083      	sub	sp, #12
    c3a0:	466b      	mov	r3, sp
    c3a2:	71d8      	strb	r0, [r3, #7]
    c3a4:	3307      	adds	r3, #7
	sio2host_tx(&ch, 1);
    c3a6:	2101      	movs	r1, #1
    c3a8:	0018      	movs	r0, r3
    c3aa:	4b02      	ldr	r3, [pc, #8]	; (c3b4 <sio2host_putchar+0x18>)
    c3ac:	4798      	blx	r3
}
    c3ae:	b003      	add	sp, #12
    c3b0:	bd00      	pop	{pc}
    c3b2:	46c0      	nop			; (mov r8, r8)
    c3b4:	0000c371 	.word	0x0000c371

0000c3b8 <HAL_SPISend>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    c3b8:	4b13      	ldr	r3, [pc, #76]	; (c408 <HAL_SPISend+0x50>)
    c3ba:	681b      	ldr	r3, [r3, #0]
static uint8_t HAL_SPISend(uint8_t data)
{
	uint16_t read_val = 0;
	
	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master));
    c3bc:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    c3be:	7e1a      	ldrb	r2, [r3, #24]
    c3c0:	420a      	tst	r2, r1
    c3c2:	d0fc      	beq.n	c3be <HAL_SPISend+0x6>
    c3c4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    c3c6:	07d2      	lsls	r2, r2, #31
    c3c8:	d500      	bpl.n	c3cc <HAL_SPISend+0x14>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    c3ca:	6298      	str	r0, [r3, #40]	; 0x28
	spi_write(&master, data);
	while (!spi_is_write_complete(&master));
    c3cc:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    c3ce:	7e1a      	ldrb	r2, [r3, #24]
    c3d0:	420a      	tst	r2, r1
    c3d2:	d0fc      	beq.n	c3ce <HAL_SPISend+0x16>
	
	while (!spi_is_ready_to_read(&master));
    c3d4:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    c3d6:	7e1a      	ldrb	r2, [r3, #24]
    c3d8:	420a      	tst	r2, r1
    c3da:	d0fc      	beq.n	c3d6 <HAL_SPISend+0x1e>
    c3dc:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t read_val = 0;
    c3de:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
    c3e0:	0752      	lsls	r2, r2, #29
    c3e2:	d50a      	bpl.n	c3fa <HAL_SPISend+0x42>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    c3e4:	8b5a      	ldrh	r2, [r3, #26]
    c3e6:	0752      	lsls	r2, r2, #29
    c3e8:	d501      	bpl.n	c3ee <HAL_SPISend+0x36>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    c3ea:	2204      	movs	r2, #4
    c3ec:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    c3ee:	4a06      	ldr	r2, [pc, #24]	; (c408 <HAL_SPISend+0x50>)
    c3f0:	7992      	ldrb	r2, [r2, #6]
    c3f2:	2a01      	cmp	r2, #1
    c3f4:	d003      	beq.n	c3fe <HAL_SPISend+0x46>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    c3f6:	6a98      	ldr	r0, [r3, #40]	; 0x28
    c3f8:	b2c0      	uxtb	r0, r0
	spi_read(&master, &read_val);
	
	return ((uint8_t)read_val);
    c3fa:	b2c0      	uxtb	r0, r0
}
    c3fc:	4770      	bx	lr
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    c3fe:	6a98      	ldr	r0, [r3, #40]	; 0x28
    c400:	05c0      	lsls	r0, r0, #23
    c402:	0dc0      	lsrs	r0, r0, #23
    c404:	e7f9      	b.n	c3fa <HAL_SPISend+0x42>
    c406:	46c0      	nop			; (mov r8, r8)
    c408:	20001d70 	.word	0x20001d70

0000c40c <HAL_ResetPinMakeOutput>:
{
    c40c:	b500      	push	{lr}
    c40e:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    c410:	a901      	add	r1, sp, #4
    c412:	2301      	movs	r3, #1
    c414:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    c416:	2200      	movs	r2, #0
    c418:	708a      	strb	r2, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    c41a:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    c41c:	202f      	movs	r0, #47	; 0x2f
    c41e:	4b02      	ldr	r3, [pc, #8]	; (c428 <HAL_ResetPinMakeOutput+0x1c>)
    c420:	4798      	blx	r3
}
    c422:	b003      	add	sp, #12
    c424:	bd00      	pop	{pc}
    c426:	46c0      	nop			; (mov r8, r8)
    c428:	00005155 	.word	0x00005155

0000c42c <HAL_RadioDIO2Callback>:
{
    c42c:	b510      	push	{r4, lr}
  if (interruptHandlerDio2)
    c42e:	4b05      	ldr	r3, [pc, #20]	; (c444 <HAL_RadioDIO2Callback+0x18>)
    c430:	681b      	ldr	r3, [r3, #0]
    c432:	2b00      	cmp	r3, #0
    c434:	d004      	beq.n	c440 <HAL_RadioDIO2Callback+0x14>
	PMM_Wakeup();
    c436:	4b04      	ldr	r3, [pc, #16]	; (c448 <HAL_RadioDIO2Callback+0x1c>)
    c438:	4798      	blx	r3
    interruptHandlerDio2();
    c43a:	4b02      	ldr	r3, [pc, #8]	; (c444 <HAL_RadioDIO2Callback+0x18>)
    c43c:	681b      	ldr	r3, [r3, #0]
    c43e:	4798      	blx	r3
}
    c440:	bd10      	pop	{r4, pc}
    c442:	46c0      	nop			; (mov r8, r8)
    c444:	20001d6c 	.word	0x20001d6c
    c448:	0000c875 	.word	0x0000c875

0000c44c <HAL_RadioDIO1Callback>:
{
    c44c:	b510      	push	{r4, lr}
  if (interruptHandlerDio1)
    c44e:	4b05      	ldr	r3, [pc, #20]	; (c464 <HAL_RadioDIO1Callback+0x18>)
    c450:	681b      	ldr	r3, [r3, #0]
    c452:	2b00      	cmp	r3, #0
    c454:	d004      	beq.n	c460 <HAL_RadioDIO1Callback+0x14>
	PMM_Wakeup();
    c456:	4b04      	ldr	r3, [pc, #16]	; (c468 <HAL_RadioDIO1Callback+0x1c>)
    c458:	4798      	blx	r3
    interruptHandlerDio1();
    c45a:	4b02      	ldr	r3, [pc, #8]	; (c464 <HAL_RadioDIO1Callback+0x18>)
    c45c:	681b      	ldr	r3, [r3, #0]
    c45e:	4798      	blx	r3
}
    c460:	bd10      	pop	{r4, pc}
    c462:	46c0      	nop			; (mov r8, r8)
    c464:	20001d68 	.word	0x20001d68
    c468:	0000c875 	.word	0x0000c875

0000c46c <HAL_RadioDIO0Callback>:
{
    c46c:	b510      	push	{r4, lr}
  if (interruptHandlerDio0)
    c46e:	4b05      	ldr	r3, [pc, #20]	; (c484 <HAL_RadioDIO0Callback+0x18>)
    c470:	681b      	ldr	r3, [r3, #0]
    c472:	2b00      	cmp	r3, #0
    c474:	d004      	beq.n	c480 <HAL_RadioDIO0Callback+0x14>
	PMM_Wakeup();
    c476:	4b04      	ldr	r3, [pc, #16]	; (c488 <HAL_RadioDIO0Callback+0x1c>)
    c478:	4798      	blx	r3
    interruptHandlerDio0();
    c47a:	4b02      	ldr	r3, [pc, #8]	; (c484 <HAL_RadioDIO0Callback+0x18>)
    c47c:	681b      	ldr	r3, [r3, #0]
    c47e:	4798      	blx	r3
}
    c480:	bd10      	pop	{r4, pc}
    c482:	46c0      	nop			; (mov r8, r8)
    c484:	20001d64 	.word	0x20001d64
    c488:	0000c875 	.word	0x0000c875

0000c48c <HAL_SPICSAssert>:
{
    c48c:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, true);
    c48e:	2201      	movs	r2, #1
    c490:	4902      	ldr	r1, [pc, #8]	; (c49c <HAL_SPICSAssert+0x10>)
    c492:	4803      	ldr	r0, [pc, #12]	; (c4a0 <HAL_SPICSAssert+0x14>)
    c494:	4b03      	ldr	r3, [pc, #12]	; (c4a4 <HAL_SPICSAssert+0x18>)
    c496:	4798      	blx	r3
}
    c498:	bd10      	pop	{r4, pc}
    c49a:	46c0      	nop			; (mov r8, r8)
    c49c:	20002b0c 	.word	0x20002b0c
    c4a0:	20001d70 	.word	0x20001d70
    c4a4:	00006075 	.word	0x00006075

0000c4a8 <HAL_SPICSDeassert>:
{
    c4a8:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, false);
    c4aa:	2200      	movs	r2, #0
    c4ac:	4902      	ldr	r1, [pc, #8]	; (c4b8 <HAL_SPICSDeassert+0x10>)
    c4ae:	4803      	ldr	r0, [pc, #12]	; (c4bc <HAL_SPICSDeassert+0x14>)
    c4b0:	4b03      	ldr	r3, [pc, #12]	; (c4c0 <HAL_SPICSDeassert+0x18>)
    c4b2:	4798      	blx	r3
}
    c4b4:	bd10      	pop	{r4, pc}
    c4b6:	46c0      	nop			; (mov r8, r8)
    c4b8:	20002b0c 	.word	0x20002b0c
    c4bc:	20001d70 	.word	0x20001d70
    c4c0:	00006075 	.word	0x00006075

0000c4c4 <HAL_RadioInit>:
{
    c4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c4c6:	46d6      	mov	lr, sl
    c4c8:	464f      	mov	r7, r9
    c4ca:	4646      	mov	r6, r8
    c4cc:	b5c0      	push	{r6, r7, lr}
    c4ce:	b090      	sub	sp, #64	; 0x40
	config->input_pull = PORT_PIN_PULL_UP;
    c4d0:	ac01      	add	r4, sp, #4
    c4d2:	2601      	movs	r6, #1
    c4d4:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    c4d6:	2500      	movs	r5, #0
    c4d8:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    c4da:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(SX_RF_SPI_SCK, &pin_conf);
    c4dc:	0021      	movs	r1, r4
    c4de:	2052      	movs	r0, #82	; 0x52
    c4e0:	4f52      	ldr	r7, [pc, #328]	; (c62c <HAL_RadioInit+0x168>)
    c4e2:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_MOSI, &pin_conf);
    c4e4:	0021      	movs	r1, r4
    c4e6:	203e      	movs	r0, #62	; 0x3e
    c4e8:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_CS, &pin_conf);
    c4ea:	0021      	movs	r1, r4
    c4ec:	203f      	movs	r0, #63	; 0x3f
    c4ee:	47b8      	blx	r7
	port_pin_set_config(SX_RF_RESET_PIN, &pin_conf);
    c4f0:	0021      	movs	r1, r4
    c4f2:	202f      	movs	r0, #47	; 0x2f
    c4f4:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    c4f6:	2280      	movs	r2, #128	; 0x80
    c4f8:	02d2      	lsls	r2, r2, #11
    c4fa:	4b4d      	ldr	r3, [pc, #308]	; (c630 <HAL_RadioInit+0x16c>)
    c4fc:	619a      	str	r2, [r3, #24]
    c4fe:	4b4d      	ldr	r3, [pc, #308]	; (c634 <HAL_RadioInit+0x170>)
    c500:	2280      	movs	r2, #128	; 0x80
    c502:	05d2      	lsls	r2, r2, #23
    c504:	619a      	str	r2, [r3, #24]
    c506:	2280      	movs	r2, #128	; 0x80
    c508:	0612      	lsls	r2, r2, #24
    c50a:	619a      	str	r2, [r3, #24]
    c50c:	2280      	movs	r2, #128	; 0x80
    c50e:	0212      	lsls	r2, r2, #8
    c510:	619a      	str	r2, [r3, #24]
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    c512:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(SX_RF_SPI_MISO, &pin_conf);
    c514:	0021      	movs	r1, r4
    c516:	2053      	movs	r0, #83	; 0x53
    c518:	47b8      	blx	r7
	extint_chan_get_config_defaults(&config_extint_chan);
    c51a:	ac02      	add	r4, sp, #8
    c51c:	0020      	movs	r0, r4
    c51e:	4b46      	ldr	r3, [pc, #280]	; (c638 <HAL_RadioInit+0x174>)
    c520:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO0_EIC_PIN;
    c522:	2330      	movs	r3, #48	; 0x30
    c524:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO0_EIC_MUX;
    c526:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    c528:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    c52a:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO0_EIC_LINE, &config_extint_chan);
    c52c:	0021      	movs	r1, r4
    c52e:	2000      	movs	r0, #0
    c530:	4b42      	ldr	r3, [pc, #264]	; (c63c <HAL_RadioInit+0x178>)
    c532:	469a      	mov	sl, r3
    c534:	4798      	blx	r3
	extint_register_callback(HAL_RadioDIO0Callback,DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    c536:	2200      	movs	r2, #0
    c538:	2100      	movs	r1, #0
    c53a:	4841      	ldr	r0, [pc, #260]	; (c640 <HAL_RadioInit+0x17c>)
    c53c:	4b41      	ldr	r3, [pc, #260]	; (c644 <HAL_RadioInit+0x180>)
    c53e:	4699      	mov	r9, r3
    c540:	4798      	blx	r3
	extint_chan_enable_callback(DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    c542:	2100      	movs	r1, #0
    c544:	2000      	movs	r0, #0
    c546:	4b40      	ldr	r3, [pc, #256]	; (c648 <HAL_RadioInit+0x184>)
    c548:	4698      	mov	r8, r3
    c54a:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO1_EIC_PIN;
    c54c:	230b      	movs	r3, #11
    c54e:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO1_EIC_MUX;
    c550:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    c552:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    c554:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO1_EIC_LINE, &config_extint_chan);
    c556:	0021      	movs	r1, r4
    c558:	200b      	movs	r0, #11
    c55a:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO1Callback,DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    c55c:	2200      	movs	r2, #0
    c55e:	210b      	movs	r1, #11
    c560:	483a      	ldr	r0, [pc, #232]	; (c64c <HAL_RadioInit+0x188>)
    c562:	47c8      	blx	r9
	extint_chan_enable_callback(DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    c564:	2100      	movs	r1, #0
    c566:	200b      	movs	r0, #11
    c568:	47c0      	blx	r8
	config_extint_chan.gpio_pin           = DIO2_EIC_PIN;
    c56a:	230c      	movs	r3, #12
    c56c:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO2_EIC_MUX;
    c56e:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    c570:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    c572:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO2_EIC_LINE, &config_extint_chan);
    c574:	0021      	movs	r1, r4
    c576:	200c      	movs	r0, #12
    c578:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO2Callback,DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    c57a:	2200      	movs	r2, #0
    c57c:	210c      	movs	r1, #12
    c57e:	4834      	ldr	r0, [pc, #208]	; (c650 <HAL_RadioInit+0x18c>)
    c580:	47c8      	blx	r9
	extint_chan_enable_callback(DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    c582:	2100      	movs	r1, #0
    c584:	200c      	movs	r0, #12
    c586:	47c0      	blx	r8
	slave->ss_pin          = config->ss_pin;
    c588:	4b32      	ldr	r3, [pc, #200]	; (c654 <HAL_RadioInit+0x190>)
    c58a:	4698      	mov	r8, r3
    c58c:	233f      	movs	r3, #63	; 0x3f
    c58e:	4642      	mov	r2, r8
    c590:	7013      	strb	r3, [r2, #0]
	slave->address_enabled = config->address_enabled;
    c592:	7055      	strb	r5, [r2, #1]
	slave->address         = config->address;
    c594:	7095      	strb	r5, [r2, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    c596:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    c598:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    c59a:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    c59c:	0021      	movs	r1, r4
    c59e:	203f      	movs	r0, #63	; 0x3f
    c5a0:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
    c5a2:	4643      	mov	r3, r8
    c5a4:	781a      	ldrb	r2, [r3, #0]
	if (port_index < PORT_INST_NUM) {
    c5a6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    c5a8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    c5aa:	2900      	cmp	r1, #0
    c5ac:	d104      	bne.n	c5b8 <HAL_RadioInit+0xf4>
		return &(ports[port_index]->Group[group_index]);
    c5ae:	0953      	lsrs	r3, r2, #5
    c5b0:	01db      	lsls	r3, r3, #7
    c5b2:	4929      	ldr	r1, [pc, #164]	; (c658 <HAL_RadioInit+0x194>)
    c5b4:	468c      	mov	ip, r1
    c5b6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    c5b8:	211f      	movs	r1, #31
    c5ba:	4011      	ands	r1, r2
    c5bc:	2201      	movs	r2, #1
    c5be:	0010      	movs	r0, r2
    c5c0:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    c5c2:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    c5c4:	ac02      	add	r4, sp, #8
    c5c6:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    c5c8:	2300      	movs	r3, #0
    c5ca:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    c5cc:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    c5ce:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    c5d0:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    c5d2:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    c5d4:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    c5d6:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    c5d8:	3223      	adds	r2, #35	; 0x23
    c5da:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    c5dc:	3a18      	subs	r2, #24
    c5de:	2100      	movs	r1, #0
    c5e0:	a808      	add	r0, sp, #32
    c5e2:	4b1e      	ldr	r3, [pc, #120]	; (c65c <HAL_RadioInit+0x198>)
    c5e4:	4798      	blx	r3
	config_spi_master.mode_specific.master.baudrate = SX_RF_SPI_BAUDRATE;
    c5e6:	4b1e      	ldr	r3, [pc, #120]	; (c660 <HAL_RadioInit+0x19c>)
    c5e8:	61a3      	str	r3, [r4, #24]
	config_spi_master.mux_setting = SX_RF_SPI_SERCOM_MUX_SETTING;
    c5ea:	2380      	movs	r3, #128	; 0x80
    c5ec:	025b      	lsls	r3, r3, #9
    c5ee:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = SX_RF_SPI_SERCOM_PINMUX_PAD0;
    c5f0:	4b1c      	ldr	r3, [pc, #112]	; (c664 <HAL_RadioInit+0x1a0>)
    c5f2:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    c5f4:	2301      	movs	r3, #1
    c5f6:	425b      	negs	r3, r3
    c5f8:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = SX_RF_SPI_SERCOM_PINMUX_PAD2;
    c5fa:	4b1b      	ldr	r3, [pc, #108]	; (c668 <HAL_RadioInit+0x1a4>)
    c5fc:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = SX_RF_SPI_SERCOM_PINMUX_PAD3;
    c5fe:	4b1b      	ldr	r3, [pc, #108]	; (c66c <HAL_RadioInit+0x1a8>)
    c600:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, SX_RF_SPI, &config_spi_master);	
    c602:	4d1b      	ldr	r5, [pc, #108]	; (c670 <HAL_RadioInit+0x1ac>)
    c604:	0022      	movs	r2, r4
    c606:	491b      	ldr	r1, [pc, #108]	; (c674 <HAL_RadioInit+0x1b0>)
    c608:	0028      	movs	r0, r5
    c60a:	4b1b      	ldr	r3, [pc, #108]	; (c678 <HAL_RadioInit+0x1b4>)
    c60c:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    c60e:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    c610:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    c612:	2b00      	cmp	r3, #0
    c614:	d1fc      	bne.n	c610 <HAL_RadioInit+0x14c>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    c616:	6813      	ldr	r3, [r2, #0]
    c618:	2102      	movs	r1, #2
    c61a:	430b      	orrs	r3, r1
    c61c:	6013      	str	r3, [r2, #0]
}
    c61e:	b010      	add	sp, #64	; 0x40
    c620:	bc1c      	pop	{r2, r3, r4}
    c622:	4690      	mov	r8, r2
    c624:	4699      	mov	r9, r3
    c626:	46a2      	mov	sl, r4
    c628:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c62a:	46c0      	nop			; (mov r8, r8)
    c62c:	00005155 	.word	0x00005155
    c630:	40002900 	.word	0x40002900
    c634:	40002880 	.word	0x40002880
    c638:	00004ea1 	.word	0x00004ea1
    c63c:	00004eb5 	.word	0x00004eb5
    c640:	0000c46d 	.word	0x0000c46d
    c644:	00004d61 	.word	0x00004d61
    c648:	00004d8d 	.word	0x00004d8d
    c64c:	0000c44d 	.word	0x0000c44d
    c650:	0000c42d 	.word	0x0000c42d
    c654:	20002b0c 	.word	0x20002b0c
    c658:	40002800 	.word	0x40002800
    c65c:	000155d1 	.word	0x000155d1
    c660:	001e8480 	.word	0x001e8480
    c664:	00530005 	.word	0x00530005
    c668:	003e0005 	.word	0x003e0005
    c66c:	00520005 	.word	0x00520005
    c670:	20001d70 	.word	0x20001d70
    c674:	42001000 	.word	0x42001000
    c678:	00005d29 	.word	0x00005d29

0000c67c <RADIO_Reset>:
{
    c67c:	b570      	push	{r4, r5, r6, lr}
    c67e:	b082      	sub	sp, #8
	HAL_ResetPinMakeOutput();
    c680:	4c0a      	ldr	r4, [pc, #40]	; (c6ac <RADIO_Reset+0x30>)
    c682:	47a0      	blx	r4
		port_base->OUTCLR.reg = pin_mask;
    c684:	4d0a      	ldr	r5, [pc, #40]	; (c6b0 <RADIO_Reset+0x34>)
    c686:	2680      	movs	r6, #128	; 0x80
    c688:	0236      	lsls	r6, r6, #8
    c68a:	616e      	str	r6, [r5, #20]
	SystemBlockingWaitMs(1);
    c68c:	2001      	movs	r0, #1
    c68e:	4b09      	ldr	r3, [pc, #36]	; (c6b4 <RADIO_Reset+0x38>)
    c690:	4798      	blx	r3
	config->direction  = PORT_PIN_DIR_INPUT;
    c692:	a901      	add	r1, sp, #4
    c694:	2300      	movs	r3, #0
    c696:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    c698:	2201      	movs	r2, #1
    c69a:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    c69c:	708b      	strb	r3, [r1, #2]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    c69e:	202f      	movs	r0, #47	; 0x2f
    c6a0:	4b05      	ldr	r3, [pc, #20]	; (c6b8 <RADIO_Reset+0x3c>)
    c6a2:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    c6a4:	61ae      	str	r6, [r5, #24]
	HAL_ResetPinMakeOutput();
    c6a6:	47a0      	blx	r4
}
    c6a8:	b002      	add	sp, #8
    c6aa:	bd70      	pop	{r4, r5, r6, pc}
    c6ac:	0000c40d 	.word	0x0000c40d
    c6b0:	40002880 	.word	0x40002880
    c6b4:	0000c841 	.word	0x0000c841
    c6b8:	00005155 	.word	0x00005155

0000c6bc <RADIO_RegisterWrite>:
{
    c6bc:	b570      	push	{r4, r5, r6, lr}
    c6be:	0004      	movs	r4, r0
    c6c0:	000d      	movs	r5, r1
	HAL_SPICSAssert();
    c6c2:	4b05      	ldr	r3, [pc, #20]	; (c6d8 <RADIO_RegisterWrite+0x1c>)
    c6c4:	4798      	blx	r3
	HAL_SPISend(REG_WRITE_CMD | reg);
    c6c6:	2080      	movs	r0, #128	; 0x80
    c6c8:	4320      	orrs	r0, r4
    c6ca:	4c04      	ldr	r4, [pc, #16]	; (c6dc <RADIO_RegisterWrite+0x20>)
    c6cc:	47a0      	blx	r4
	HAL_SPISend(value);
    c6ce:	0028      	movs	r0, r5
    c6d0:	47a0      	blx	r4
	HAL_SPICSDeassert();
    c6d2:	4b03      	ldr	r3, [pc, #12]	; (c6e0 <RADIO_RegisterWrite+0x24>)
    c6d4:	4798      	blx	r3
}
    c6d6:	bd70      	pop	{r4, r5, r6, pc}
    c6d8:	0000c48d 	.word	0x0000c48d
    c6dc:	0000c3b9 	.word	0x0000c3b9
    c6e0:	0000c4a9 	.word	0x0000c4a9

0000c6e4 <RADIO_RegisterRead>:
{
    c6e4:	b510      	push	{r4, lr}
    c6e6:	0004      	movs	r4, r0
	HAL_SPICSAssert();
    c6e8:	4b06      	ldr	r3, [pc, #24]	; (c704 <RADIO_RegisterRead+0x20>)
    c6ea:	4798      	blx	r3
	HAL_SPISend(reg);
    c6ec:	207f      	movs	r0, #127	; 0x7f
    c6ee:	4020      	ands	r0, r4
    c6f0:	4c05      	ldr	r4, [pc, #20]	; (c708 <RADIO_RegisterRead+0x24>)
    c6f2:	47a0      	blx	r4
	readValue = HAL_SPISend(0xFF);
    c6f4:	20ff      	movs	r0, #255	; 0xff
    c6f6:	47a0      	blx	r4
    c6f8:	0004      	movs	r4, r0
	HAL_SPICSDeassert();
    c6fa:	4b04      	ldr	r3, [pc, #16]	; (c70c <RADIO_RegisterRead+0x28>)
    c6fc:	4798      	blx	r3
}
    c6fe:	0020      	movs	r0, r4
    c700:	bd10      	pop	{r4, pc}
    c702:	46c0      	nop			; (mov r8, r8)
    c704:	0000c48d 	.word	0x0000c48d
    c708:	0000c3b9 	.word	0x0000c3b9
    c70c:	0000c4a9 	.word	0x0000c4a9

0000c710 <RADIO_FrameWrite>:
{
    c710:	b570      	push	{r4, r5, r6, lr}
    c712:	0004      	movs	r4, r0
    c714:	000e      	movs	r6, r1
    c716:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    c718:	4b0a      	ldr	r3, [pc, #40]	; (c744 <RADIO_FrameWrite+0x34>)
    c71a:	4798      	blx	r3
    HAL_SPISend(REG_WRITE_CMD | offset);
    c71c:	2080      	movs	r0, #128	; 0x80
    c71e:	4320      	orrs	r0, r4
    c720:	4b09      	ldr	r3, [pc, #36]	; (c748 <RADIO_FrameWrite+0x38>)
    c722:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    c724:	2d00      	cmp	r5, #0
    c726:	d00a      	beq.n	c73e <RADIO_FrameWrite+0x2e>
    c728:	0034      	movs	r4, r6
    c72a:	3d01      	subs	r5, #1
    c72c:	b2ed      	uxtb	r5, r5
    c72e:	3501      	adds	r5, #1
    c730:	1975      	adds	r5, r6, r5
	    HAL_SPISend(buffer[i]);
    c732:	4e05      	ldr	r6, [pc, #20]	; (c748 <RADIO_FrameWrite+0x38>)
    c734:	7820      	ldrb	r0, [r4, #0]
    c736:	47b0      	blx	r6
    c738:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    c73a:	42ac      	cmp	r4, r5
    c73c:	d1fa      	bne.n	c734 <RADIO_FrameWrite+0x24>
    HAL_SPICSDeassert();
    c73e:	4b03      	ldr	r3, [pc, #12]	; (c74c <RADIO_FrameWrite+0x3c>)
    c740:	4798      	blx	r3
}
    c742:	bd70      	pop	{r4, r5, r6, pc}
    c744:	0000c48d 	.word	0x0000c48d
    c748:	0000c3b9 	.word	0x0000c3b9
    c74c:	0000c4a9 	.word	0x0000c4a9

0000c750 <RADIO_FrameRead>:
{
    c750:	b570      	push	{r4, r5, r6, lr}
    c752:	0004      	movs	r4, r0
    c754:	000e      	movs	r6, r1
    c756:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    c758:	4b0a      	ldr	r3, [pc, #40]	; (c784 <RADIO_FrameRead+0x34>)
    c75a:	4798      	blx	r3
    HAL_SPISend(offset);
    c75c:	0020      	movs	r0, r4
    c75e:	4b0a      	ldr	r3, [pc, #40]	; (c788 <RADIO_FrameRead+0x38>)
    c760:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    c762:	2d00      	cmp	r5, #0
    c764:	d00b      	beq.n	c77e <RADIO_FrameRead+0x2e>
    c766:	0034      	movs	r4, r6
    c768:	3d01      	subs	r5, #1
    c76a:	b2ed      	uxtb	r5, r5
    c76c:	3501      	adds	r5, #1
    c76e:	1975      	adds	r5, r6, r5
	    buffer[i] = HAL_SPISend(0xFF);
    c770:	4e05      	ldr	r6, [pc, #20]	; (c788 <RADIO_FrameRead+0x38>)
    c772:	20ff      	movs	r0, #255	; 0xff
    c774:	47b0      	blx	r6
    c776:	7020      	strb	r0, [r4, #0]
    c778:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    c77a:	42ac      	cmp	r4, r5
    c77c:	d1f9      	bne.n	c772 <RADIO_FrameRead+0x22>
    HAL_SPICSDeassert();
    c77e:	4b03      	ldr	r3, [pc, #12]	; (c78c <RADIO_FrameRead+0x3c>)
    c780:	4798      	blx	r3
}
    c782:	bd70      	pop	{r4, r5, r6, pc}
    c784:	0000c48d 	.word	0x0000c48d
    c788:	0000c3b9 	.word	0x0000c3b9
    c78c:	0000c4a9 	.word	0x0000c4a9

0000c790 <HAL_RegisterDioInterruptHandler>:
 * \param[in] dioPin  - DIO pin
 * \param[in] handler - function to be called upon given DIO interrupt
 */
void HAL_RegisterDioInterruptHandler(uint8_t dioPin, DioInterruptHandler_t handler)
{
  switch (dioPin)
    c790:	2802      	cmp	r0, #2
    c792:	d007      	beq.n	c7a4 <HAL_RegisterDioInterruptHandler+0x14>
    c794:	2804      	cmp	r0, #4
    c796:	d008      	beq.n	c7aa <HAL_RegisterDioInterruptHandler+0x1a>
    c798:	2801      	cmp	r0, #1
    c79a:	d000      	beq.n	c79e <HAL_RegisterDioInterruptHandler+0xe>
#endif

    default:
      break;
  }
}
    c79c:	4770      	bx	lr
      interruptHandlerDio0 = handler;
    c79e:	4b04      	ldr	r3, [pc, #16]	; (c7b0 <HAL_RegisterDioInterruptHandler+0x20>)
    c7a0:	6019      	str	r1, [r3, #0]
      break;
    c7a2:	e7fb      	b.n	c79c <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio1 = handler;
    c7a4:	4b03      	ldr	r3, [pc, #12]	; (c7b4 <HAL_RegisterDioInterruptHandler+0x24>)
    c7a6:	6019      	str	r1, [r3, #0]
      break;
    c7a8:	e7f8      	b.n	c79c <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio2 = handler;
    c7aa:	4b03      	ldr	r3, [pc, #12]	; (c7b8 <HAL_RegisterDioInterruptHandler+0x28>)
    c7ac:	6019      	str	r1, [r3, #0]
}
    c7ae:	e7f5      	b.n	c79c <HAL_RegisterDioInterruptHandler+0xc>
    c7b0:	20001d64 	.word	0x20001d64
    c7b4:	20001d68 	.word	0x20001d68
    c7b8:	20001d6c 	.word	0x20001d6c

0000c7bc <HAL_EnableRFCtrl>:

void HAL_EnableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
   if (RFCtrl1 == RFO_HF)
    c7bc:	2801      	cmp	r0, #1
    c7be:	d000      	beq.n	c7c2 <HAL_EnableRFCtrl+0x6>
   {
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_ACTIVE);		
   }
#endif	
}
    c7c0:	4770      	bx	lr
    c7c2:	2280      	movs	r2, #128	; 0x80
    c7c4:	0192      	lsls	r2, r2, #6
    c7c6:	4b01      	ldr	r3, [pc, #4]	; (c7cc <HAL_EnableRFCtrl+0x10>)
    c7c8:	619a      	str	r2, [r3, #24]
    c7ca:	e7f9      	b.n	c7c0 <HAL_EnableRFCtrl+0x4>
    c7cc:	40002800 	.word	0x40002800

0000c7d0 <HAL_DisableRFCtrl>:

void HAL_DisableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
	if (RFCtrl1 == RFO_HF)
    c7d0:	2801      	cmp	r0, #1
    c7d2:	d000      	beq.n	c7d6 <HAL_DisableRFCtrl+0x6>
	{
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
	}
#endif	
}
    c7d4:	4770      	bx	lr
		port_base->OUTCLR.reg = pin_mask;
    c7d6:	2280      	movs	r2, #128	; 0x80
    c7d8:	0192      	lsls	r2, r2, #6
    c7da:	4b01      	ldr	r3, [pc, #4]	; (c7e0 <HAL_DisableRFCtrl+0x10>)
    c7dc:	615a      	str	r2, [r3, #20]
    c7de:	e7f9      	b.n	c7d4 <HAL_DisableRFCtrl+0x4>
    c7e0:	40002800 	.word	0x40002800

0000c7e4 <HAL_GetRadioClkStabilizationDelay>:
 * \param[out] Time value in ms
 */
uint8_t HAL_GetRadioClkStabilizationDelay(void)
{
	return RADIO_CLK_STABILITATION_DELAY;
}
    c7e4:	2002      	movs	r0, #2
    c7e6:	4770      	bx	lr

0000c7e8 <HAL_GetRadioClkSrc>:
 * \param[out] Type of clock source TCXO or XTAL
 */
RadioClockSources_t HAL_GetRadioClkSrc(void)
{
	return RADIO_CLK_SRC;
}
    c7e8:	2000      	movs	r0, #0
    c7ea:	4770      	bx	lr

0000c7ec <HAL_TCXOPowerOn>:
 *
 * \param[in] None
 * \param[out] None
 */
void HAL_TCXOPowerOn(void)
{
    c7ec:	b510      	push	{r4, lr}
		port_base->OUTSET.reg = pin_mask;
    c7ee:	2280      	movs	r2, #128	; 0x80
    c7f0:	0092      	lsls	r2, r2, #2
    c7f2:	4b03      	ldr	r3, [pc, #12]	; (c800 <HAL_TCXOPowerOn+0x14>)
    c7f4:	619a      	str	r2, [r3, #24]
#ifdef TCXO_ENABLE
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_ACTIVE);
	delay_ms(RADIO_CLK_STABILITATION_DELAY);
    c7f6:	2002      	movs	r0, #2
    c7f8:	4b02      	ldr	r3, [pc, #8]	; (c804 <HAL_TCXOPowerOn+0x18>)
    c7fa:	4798      	blx	r3
#endif
}
    c7fc:	bd10      	pop	{r4, pc}
    c7fe:	46c0      	nop			; (mov r8, r8)
    c800:	40002800 	.word	0x40002800
    c804:	0000471d 	.word	0x0000471d

0000c808 <HAL_TCXOPowerOff>:
		port_base->OUTCLR.reg = pin_mask;
    c808:	2280      	movs	r2, #128	; 0x80
    c80a:	0092      	lsls	r2, r2, #2
    c80c:	4b01      	ldr	r3, [pc, #4]	; (c814 <HAL_TCXOPowerOff+0xc>)
    c80e:	615a      	str	r2, [r3, #20]
void HAL_TCXOPowerOff(void)
{
#ifdef TCXO_ENABLE
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
}
    c810:	4770      	bx	lr
    c812:	46c0      	nop			; (mov r8, r8)
    c814:	40002800 	.word	0x40002800

0000c818 <SleepTimerGetElapsedTime>:
/**
* \brief Calculate the Elapsed Time from the previous call of this function
* \retval Elapsed time in ticks
*/
uint32_t SleepTimerGetElapsedTime(void)
{
    c818:	b510      	push	{r4, lr}
	return rtc_count_get_count(&rtc);
    c81a:	4802      	ldr	r0, [pc, #8]	; (c824 <SleepTimerGetElapsedTime+0xc>)
    c81c:	4b02      	ldr	r3, [pc, #8]	; (c828 <SleepTimerGetElapsedTime+0x10>)
    c81e:	4798      	blx	r3
}
    c820:	bd10      	pop	{r4, pc}
    c822:	46c0      	nop			; (mov r8, r8)
    c824:	20002b10 	.word	0x20002b10
    c828:	00005185 	.word	0x00005185

0000c82c <SleepTimerStop>:

/**
* \brief Stop the sleep timer
*/
void SleepTimerStop(void)
{
    c82c:	b510      	push	{r4, lr}
	rtc_count_disable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    c82e:	2108      	movs	r1, #8
    c830:	4801      	ldr	r0, [pc, #4]	; (c838 <SleepTimerStop+0xc>)
    c832:	4b02      	ldr	r3, [pc, #8]	; (c83c <SleepTimerStop+0x10>)
    c834:	4798      	blx	r3
}
    c836:	bd10      	pop	{r4, pc}
    c838:	20002b10 	.word	0x20002b10
    c83c:	000051b1 	.word	0x000051b1

0000c840 <SystemBlockingWaitMs>:
 * waiting with the MCU in sleep.
 * Find out how long it takes the MCU to go to and wake up from sleep to see if
 * it makes sense to go to sleep at all 
 */
void SystemBlockingWaitMs(uint32_t ms)
{
    c840:	b510      	push	{r4, lr}
#ifndef UT
    delay_ms(ms);
    c842:	2800      	cmp	r0, #0
    c844:	d103      	bne.n	c84e <SystemBlockingWaitMs+0xe>
    c846:	2001      	movs	r0, #1
    c848:	4b02      	ldr	r3, [pc, #8]	; (c854 <SystemBlockingWaitMs+0x14>)
    c84a:	4798      	blx	r3
#endif
}
    c84c:	bd10      	pop	{r4, pc}
    delay_ms(ms);
    c84e:	4b02      	ldr	r3, [pc, #8]	; (c858 <SystemBlockingWaitMs+0x18>)
    c850:	4798      	blx	r3
    c852:	e7fb      	b.n	c84c <SystemBlockingWaitMs+0xc>
    c854:	000046f1 	.word	0x000046f1
    c858:	0000471d 	.word	0x0000471d

0000c85c <system_enter_critical_section>:
{

}

void system_enter_critical_section(void)
{
    c85c:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
    c85e:	4b01      	ldr	r3, [pc, #4]	; (c864 <system_enter_critical_section+0x8>)
    c860:	4798      	blx	r3
#ifndef UT
	system_interrupt_enter_critical_section();
#endif
}
    c862:	bd10      	pop	{r4, pc}
    c864:	00004aa5 	.word	0x00004aa5

0000c868 <system_leave_critical_section>:

void system_leave_critical_section(void)
{
    c868:	b510      	push	{r4, lr}
	cpu_irq_leave_critical();
    c86a:	4b01      	ldr	r3, [pc, #4]	; (c870 <system_leave_critical_section+0x8>)
    c86c:	4798      	blx	r3
#ifndef UT
	system_interrupt_leave_critical_section();
#endif
}
    c86e:	bd10      	pop	{r4, pc}
    c870:	00004ae5 	.word	0x00004ae5

0000c874 <PMM_Wakeup>:

/**
* \brief Wakeup from sleep
*/
void PMM_Wakeup(void)
{
    c874:	b570      	push	{r4, r5, r6, lr}
    uint64_t sleptTimeUs = 0;

    if (PMM_STATE_SLEEP == pmmState)
    c876:	4b16      	ldr	r3, [pc, #88]	; (c8d0 <PMM_Wakeup+0x5c>)
    c878:	781b      	ldrb	r3, [r3, #0]
    c87a:	2b01      	cmp	r3, #1
    c87c:	d000      	beq.n	c880 <PMM_Wakeup+0xc>
        {
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
            sleepReq = NULL;
        }
    }
}
    c87e:	bd70      	pop	{r4, r5, r6, pc}
		pmmState = PMM_STATE_ACTIVE;
    c880:	2200      	movs	r2, #0
    c882:	4b13      	ldr	r3, [pc, #76]	; (c8d0 <PMM_Wakeup+0x5c>)
    c884:	701a      	strb	r2, [r3, #0]
        sleptTimeUs = SLEEP_TICKS_TO_US(SleepTimerGetElapsedTime());
    c886:	4b13      	ldr	r3, [pc, #76]	; (c8d4 <PMM_Wakeup+0x60>)
    c888:	4798      	blx	r3
    c88a:	4b13      	ldr	r3, [pc, #76]	; (c8d8 <PMM_Wakeup+0x64>)
    c88c:	4798      	blx	r3
    c88e:	4913      	ldr	r1, [pc, #76]	; (c8dc <PMM_Wakeup+0x68>)
    c890:	4b13      	ldr	r3, [pc, #76]	; (c8e0 <PMM_Wakeup+0x6c>)
    c892:	4798      	blx	r3
    c894:	4b13      	ldr	r3, [pc, #76]	; (c8e4 <PMM_Wakeup+0x70>)
    c896:	4798      	blx	r3
    c898:	0004      	movs	r4, r0
    c89a:	000d      	movs	r5, r1
        SleepTimerStop();
    c89c:	4b12      	ldr	r3, [pc, #72]	; (c8e8 <PMM_Wakeup+0x74>)
    c89e:	4798      	blx	r3
        SystemTimerSync(sleptTimeUs);
    c8a0:	0020      	movs	r0, r4
    c8a2:	0029      	movs	r1, r5
    c8a4:	4b11      	ldr	r3, [pc, #68]	; (c8ec <PMM_Wakeup+0x78>)
    c8a6:	4798      	blx	r3
        if (sleepReq && sleepReq->pmmWakeupCallback)
    c8a8:	4b11      	ldr	r3, [pc, #68]	; (c8f0 <PMM_Wakeup+0x7c>)
    c8aa:	681b      	ldr	r3, [r3, #0]
    c8ac:	2b00      	cmp	r3, #0
    c8ae:	d0e6      	beq.n	c87e <PMM_Wakeup+0xa>
    c8b0:	689e      	ldr	r6, [r3, #8]
    c8b2:	2e00      	cmp	r6, #0
    c8b4:	d0e3      	beq.n	c87e <PMM_Wakeup+0xa>
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
    c8b6:	22fa      	movs	r2, #250	; 0xfa
    c8b8:	0092      	lsls	r2, r2, #2
    c8ba:	2300      	movs	r3, #0
    c8bc:	0020      	movs	r0, r4
    c8be:	0029      	movs	r1, r5
    c8c0:	4c0c      	ldr	r4, [pc, #48]	; (c8f4 <PMM_Wakeup+0x80>)
    c8c2:	47a0      	blx	r4
    c8c4:	47b0      	blx	r6
            sleepReq = NULL;
    c8c6:	2200      	movs	r2, #0
    c8c8:	4b09      	ldr	r3, [pc, #36]	; (c8f0 <PMM_Wakeup+0x7c>)
    c8ca:	601a      	str	r2, [r3, #0]
}
    c8cc:	e7d7      	b.n	c87e <PMM_Wakeup+0xa>
    c8ce:	46c0      	nop			; (mov r8, r8)
    c8d0:	20001d7c 	.word	0x20001d7c
    c8d4:	0000c819 	.word	0x0000c819
    c8d8:	000136d9 	.word	0x000136d9
    c8dc:	41f423d7 	.word	0x41f423d7
    c8e0:	00013081 	.word	0x00013081
    c8e4:	000127bd 	.word	0x000127bd
    c8e8:	0000c82d 	.word	0x0000c82d
    c8ec:	0000d211 	.word	0x0000d211
    c8f0:	20001d80 	.word	0x20001d80
    c8f4:	000126bd 	.word	0x000126bd

0000c8f8 <LORAREG_GetAttr>:
 * \param[out] Result of the GET operation
 * \retval LORAWAN_SUCCESS : If GET is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_GetAttr(LorawanRegionalAttributes_t attrType, void *attrInput, void *attrOutput)
{
    c8f8:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    c8fa:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    c8fc:	2836      	cmp	r0, #54	; 0x36
    c8fe:	d901      	bls.n	c904 <LORAREG_GetAttr+0xc>
	{
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
	}

	return result;
}
    c900:	0018      	movs	r0, r3
    c902:	bd10      	pop	{r4, pc}
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
    c904:	0084      	lsls	r4, r0, #2
    c906:	4b02      	ldr	r3, [pc, #8]	; (c910 <LORAREG_GetAttr+0x18>)
    c908:	58e3      	ldr	r3, [r4, r3]
    c90a:	4798      	blx	r3
    c90c:	0003      	movs	r3, r0
    c90e:	e7f7      	b.n	c900 <LORAREG_GetAttr+0x8>
    c910:	20001d84 	.word	0x20001d84

0000c914 <LORAREG_ValidateAttr>:
 * \param[in] attrInput Input used to validate the attribute value
 * \retval LORAWAN_SUCCESS : If Validate is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_ValidateAttr(LorawanRegionalAttributes_t attrType, void *attrInput)
{
    c914:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    c916:	230a      	movs	r3, #10
	
	if(attrType < REG_NUM_ATTRIBUTES)
    c918:	2836      	cmp	r0, #54	; 0x36
    c91a:	d901      	bls.n	c920 <LORAREG_ValidateAttr+0xc>
	{
	    result = pValidateAttr[attrType](attrType, attrInput);		
	}

	return result;
}
    c91c:	0018      	movs	r0, r3
    c91e:	bd10      	pop	{r4, pc}
	    result = pValidateAttr[attrType](attrType, attrInput);		
    c920:	0082      	lsls	r2, r0, #2
    c922:	4b02      	ldr	r3, [pc, #8]	; (c92c <LORAREG_ValidateAttr+0x18>)
    c924:	58d3      	ldr	r3, [r2, r3]
    c926:	4798      	blx	r3
    c928:	0003      	movs	r3, r0
    c92a:	e7f7      	b.n	c91c <LORAREG_ValidateAttr+0x8>
    c92c:	20001f3c 	.word	0x20001f3c

0000c930 <LORAREG_SetAttr>:
 * \param[in] attrInput Input used to update the attribute value
 * \retval LORAWAN_SUCCESS : If Update is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_SetAttr(LorawanRegionalAttributes_t attrType, void *attrInput)
{
    c930:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    c932:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    c934:	2836      	cmp	r0, #54	; 0x36
    c936:	d901      	bls.n	c93c <LORAREG_SetAttr+0xc>
	{
	    result = pSetAttr[attrType](attrType, attrInput);		
	}

	return result;
}
    c938:	0018      	movs	r0, r3
    c93a:	bd10      	pop	{r4, pc}
	    result = pSetAttr[attrType](attrType, attrInput);		
    c93c:	0082      	lsls	r2, r0, #2
    c93e:	4b02      	ldr	r3, [pc, #8]	; (c948 <LORAREG_SetAttr+0x18>)
    c940:	58d3      	ldr	r3, [r2, r3]
    c942:	4798      	blx	r3
    c944:	0003      	movs	r3, r0
    c946:	e7f7      	b.n	c938 <LORAREG_SetAttr+0x8>
    c948:	20001e60 	.word	0x20001e60

0000c94c <AESEncode>:
 * \brief Encrypts the given block of data
 * \param[in,out] block Block of input data to be encrypted
 * \param[in] key Cryptographic key to be used in AES encryption
 */
void AESEncode(unsigned char* block, unsigned char* masterKey)
{
    c94c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c94e:	b083      	sub	sp, #12
    c950:	0004      	movs	r4, r0
    c952:	000e      	movs	r6, r1
#ifndef UT	
	
	/* Configure the AES. */
	g_aes_cfg.encrypt_mode = AES_ENCRYPTION;
    c954:	4a2b      	ldr	r2, [pc, #172]	; (ca04 <AESEncode+0xb8>)
    c956:	2101      	movs	r1, #1
    c958:	7011      	strb	r1, [r2, #0]
	g_aes_cfg.key_size = AES_KEY_SIZE_128;
    c95a:	2300      	movs	r3, #0
    c95c:	7053      	strb	r3, [r2, #1]
	g_aes_cfg.start_mode = AES_AUTO_START;
    c95e:	7091      	strb	r1, [r2, #2]
	g_aes_cfg.opmode = AES_ECB_MODE;
    c960:	70d3      	strb	r3, [r2, #3]
	g_aes_cfg.cfb_size = AES_CFB_SIZE_128;
    c962:	7113      	strb	r3, [r2, #4]
	g_aes_cfg.lod = false;
    c964:	7213      	strb	r3, [r2, #8]
	aes_set_config(&aes_instance,AES, &g_aes_cfg);
    c966:	4928      	ldr	r1, [pc, #160]	; (ca08 <AESEncode+0xbc>)
    c968:	4828      	ldr	r0, [pc, #160]	; (ca0c <AESEncode+0xc0>)
    c96a:	4b29      	ldr	r3, [pc, #164]	; (ca10 <AESEncode+0xc4>)
    c96c:	4798      	blx	r3
    c96e:	2100      	movs	r1, #0
		uint8_t u8[4];
	}long_addr;
	uint8_t index;
	for (index = 0; index < 4; index++)
	{
		long_addr.u8[index] = *data++;
    c970:	ad01      	add	r5, sp, #4
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(masterKey+(i*(sizeof(uint32_t))));
    c972:	4f28      	ldr	r7, [pc, #160]	; (ca14 <AESEncode+0xc8>)
    c974:	1870      	adds	r0, r6, r1
    c976:	2300      	movs	r3, #0
    c978:	5cc2      	ldrb	r2, [r0, r3]
    c97a:	555a      	strb	r2, [r3, r5]
    c97c:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    c97e:	2b04      	cmp	r3, #4
    c980:	d1fa      	bne.n	c978 <AESEncode+0x2c>
    c982:	9b01      	ldr	r3, [sp, #4]
    c984:	51cb      	str	r3, [r1, r7]
    c986:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    c988:	2910      	cmp	r1, #16
    c98a:	d1f3      	bne.n	c974 <AESEncode+0x28>
	}
	
	/* Set the cryptographic key. */
	aes_write_key(&aes_instance, io_data);
    c98c:	4d1f      	ldr	r5, [pc, #124]	; (ca0c <AESEncode+0xc0>)
    c98e:	4921      	ldr	r1, [pc, #132]	; (ca14 <AESEncode+0xc8>)
    c990:	0028      	movs	r0, r5
    c992:	4b21      	ldr	r3, [pc, #132]	; (ca18 <AESEncode+0xcc>)
    c994:	4798      	blx	r3
 */
static inline void aes_set_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg |= AES_CTRLB_NEWMSG;
    c996:	682a      	ldr	r2, [r5, #0]
    c998:	7913      	ldrb	r3, [r2, #4]
    c99a:	2102      	movs	r1, #2
    c99c:	430b      	orrs	r3, r1
    c99e:	7113      	strb	r3, [r2, #4]
    c9a0:	2100      	movs	r1, #0
		long_addr.u8[index] = *data++;
    c9a2:	ad01      	add	r5, sp, #4
	
	aes_set_new_message(&aes_instance);
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(block+(i*(sizeof(uint32_t))));			
    c9a4:	4e1b      	ldr	r6, [pc, #108]	; (ca14 <AESEncode+0xc8>)
    c9a6:	1860      	adds	r0, r4, r1
    c9a8:	2300      	movs	r3, #0
    c9aa:	5cc2      	ldrb	r2, [r0, r3]
    c9ac:	555a      	strb	r2, [r3, r5]
    c9ae:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    c9b0:	2b04      	cmp	r3, #4
    c9b2:	d1fa      	bne.n	c9aa <AESEncode+0x5e>
    c9b4:	9b01      	ldr	r3, [sp, #4]
    c9b6:	518b      	str	r3, [r1, r6]
    c9b8:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    c9ba:	2910      	cmp	r1, #16
    c9bc:	d1f3      	bne.n	c9a6 <AESEncode+0x5a>
	}
		
	/* Write the data to be ciphered to the input data registers. */
	aes_write_input_data(&aes_instance, io_data);
    c9be:	4d13      	ldr	r5, [pc, #76]	; (ca0c <AESEncode+0xc0>)
    c9c0:	4914      	ldr	r1, [pc, #80]	; (ca14 <AESEncode+0xc8>)
    c9c2:	0028      	movs	r0, r5
    c9c4:	4b15      	ldr	r3, [pc, #84]	; (ca1c <AESEncode+0xd0>)
    c9c6:	4798      	blx	r3
 */
static inline void aes_clear_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg &= ~AES_CTRLB_NEWMSG;
    c9c8:	682d      	ldr	r5, [r5, #0]
    c9ca:	792b      	ldrb	r3, [r5, #4]
    c9cc:	2202      	movs	r2, #2
    c9ce:	4393      	bics	r3, r2
    c9d0:	712b      	strb	r3, [r5, #4]
	Assert(module->hw);

	uint32_t int_flags = module->hw->INTFLAG.reg;
	uint32_t status_flags = 0;

	if (int_flags & AES_INTFLAG_ENCCMP) {
    c9d2:	2101      	movs	r1, #1
		status_flags |= AES_ENCRYPTION_COMPLETE;
	}

	if (int_flags & AES_INTFLAG_GFMCMP) {
    c9d4:	2002      	movs	r0, #2
    c9d6:	e001      	b.n	c9dc <AESEncode+0x90>
	aes_clear_new_message(&aes_instance);
	/* Wait for the end of the encryption process. */
	while (!(aes_get_status(&aes_instance) & AES_ENCRYPTION_COMPLETE)) {
    c9d8:	4211      	tst	r1, r2
    c9da:	d107      	bne.n	c9ec <AESEncode+0xa0>
	uint32_t int_flags = module->hw->INTFLAG.reg;
    c9dc:	79eb      	ldrb	r3, [r5, #7]
    c9de:	b2db      	uxtb	r3, r3
	if (int_flags & AES_INTFLAG_ENCCMP) {
    c9e0:	000a      	movs	r2, r1
    c9e2:	401a      	ands	r2, r3
	if (int_flags & AES_INTFLAG_GFMCMP) {
    c9e4:	4218      	tst	r0, r3
    c9e6:	d0f7      	beq.n	c9d8 <AESEncode+0x8c>
		status_flags |= AES_GF_MULTI_COMPLETE;
    c9e8:	4302      	orrs	r2, r0
    c9ea:	e7f5      	b.n	c9d8 <AESEncode+0x8c>
	}
	aes_read_output_data(&aes_instance,io_data);
    c9ec:	4d09      	ldr	r5, [pc, #36]	; (ca14 <AESEncode+0xc8>)
    c9ee:	0029      	movs	r1, r5
    c9f0:	4806      	ldr	r0, [pc, #24]	; (ca0c <AESEncode+0xc0>)
    c9f2:	4b0b      	ldr	r3, [pc, #44]	; (ca20 <AESEncode+0xd4>)
    c9f4:	4798      	blx	r3
	
	memcpy(block,io_data,BLOCKSIZE);
    c9f6:	2210      	movs	r2, #16
    c9f8:	0029      	movs	r1, r5
    c9fa:	0020      	movs	r0, r4
    c9fc:	4b09      	ldr	r3, [pc, #36]	; (ca24 <AESEncode+0xd8>)
    c9fe:	4798      	blx	r3
#endif	
}
    ca00:	b003      	add	sp, #12
    ca02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ca04:	20002b48 	.word	0x20002b48
    ca08:	42003400 	.word	0x42003400
    ca0c:	20002b54 	.word	0x20002b54
    ca10:	00004bbd 	.word	0x00004bbd
    ca14:	20002018 	.word	0x20002018
    ca18:	00004c51 	.word	0x00004c51
    ca1c:	00004c85 	.word	0x00004c85
    ca20:	00004cd5 	.word	0x00004cd5
    ca24:	000155bf 	.word	0x000155bf

0000ca28 <AESInit>:

/**
 * \brief Initializes the AES Engine.
 */
void AESInit(void)
{
    ca28:	b570      	push	{r4, r5, r6, lr}
#ifndef UT	
	//! [setup_config]
	aes_get_config_defaults(&g_aes_cfg);
    ca2a:	4d07      	ldr	r5, [pc, #28]	; (ca48 <AESInit+0x20>)
    ca2c:	0028      	movs	r0, r5
    ca2e:	4b07      	ldr	r3, [pc, #28]	; (ca4c <AESInit+0x24>)
    ca30:	4798      	blx	r3
	//! [setup_config]

	//! [setup_config_defaults]
	aes_init(&aes_instance,AES, &g_aes_cfg);
    ca32:	4c07      	ldr	r4, [pc, #28]	; (ca50 <AESInit+0x28>)
    ca34:	002a      	movs	r2, r5
    ca36:	4907      	ldr	r1, [pc, #28]	; (ca54 <AESInit+0x2c>)
    ca38:	0020      	movs	r0, r4
    ca3a:	4b07      	ldr	r3, [pc, #28]	; (ca58 <AESInit+0x30>)
    ca3c:	4798      	blx	r3
	//! [setup_config_defaults]
	//! [module_enable]
	aes_enable(&aes_instance);
    ca3e:	0020      	movs	r0, r4
    ca40:	4b06      	ldr	r3, [pc, #24]	; (ca5c <AESInit+0x34>)
    ca42:	4798      	blx	r3
#endif	
}
    ca44:	bd70      	pop	{r4, r5, r6, pc}
    ca46:	46c0      	nop			; (mov r8, r8)
    ca48:	20002b48 	.word	0x20002b48
    ca4c:	00004b81 	.word	0x00004b81
    ca50:	20002b54 	.word	0x20002b54
    ca54:	42003400 	.word	0x42003400
    ca58:	00004c31 	.word	0x00004c31
    ca5c:	00004b9b 	.word	0x00004b9b

0000ca60 <hwTimerExpiryCallback>:
	SYS_HwOverflow_Cb();	 
}

/* ISR to handle CC0 interrupt from TC0 */
static void hwTimerExpiryCallback(void)
{
    ca60:	b510      	push	{r4, lr}
    if (0 < runningTimers)
    ca62:	4b06      	ldr	r3, [pc, #24]	; (ca7c <hwTimerExpiryCallback+0x1c>)
    ca64:	781b      	ldrb	r3, [r3, #0]
    ca66:	2b00      	cmp	r3, #0
    ca68:	d100      	bne.n	ca6c <hwTimerExpiryCallback+0xc>
    {
        isTimerTriggered = true;
        SYSTEM_PostTask(TIMER_TASK_ID);
    }
}
    ca6a:	bd10      	pop	{r4, pc}
        isTimerTriggered = true;
    ca6c:	2201      	movs	r2, #1
    ca6e:	4b04      	ldr	r3, [pc, #16]	; (ca80 <hwTimerExpiryCallback+0x20>)
    ca70:	701a      	strb	r2, [r3, #0]
        SYSTEM_PostTask(TIMER_TASK_ID);
    ca72:	2001      	movs	r0, #1
    ca74:	4b03      	ldr	r3, [pc, #12]	; (ca84 <hwTimerExpiryCallback+0x24>)
    ca76:	4798      	blx	r3
}
    ca78:	e7f7      	b.n	ca6a <hwTimerExpiryCallback+0xa>
    ca7a:	46c0      	nop			; (mov r8, r8)
    ca7c:	20002038 	.word	0x20002038
    ca80:	20002cee 	.word	0x20002cee
    ca84:	0000d355 	.word	0x0000d355

0000ca88 <hwTimerOverflowCallback>:
{
    ca88:	b510      	push	{r4, lr}
    ca8a:	b082      	sub	sp, #8
    uint16_t temp = sysTime;
    ca8c:	4925      	ldr	r1, [pc, #148]	; (cb24 <hwTimerOverflowCallback+0x9c>)
    ca8e:	880a      	ldrh	r2, [r1, #0]
    ca90:	b292      	uxth	r2, r2
    if (++sysTime < temp)
    ca92:	880b      	ldrh	r3, [r1, #0]
    ca94:	3301      	adds	r3, #1
    ca96:	b29b      	uxth	r3, r3
    ca98:	800b      	strh	r3, [r1, #0]
    ca9a:	429a      	cmp	r2, r3
    ca9c:	d903      	bls.n	caa6 <hwTimerOverflowCallback+0x1e>
        sysTimeOvf++;
    ca9e:	4a22      	ldr	r2, [pc, #136]	; (cb28 <hwTimerOverflowCallback+0xa0>)
    caa0:	6813      	ldr	r3, [r2, #0]
    caa2:	3301      	adds	r3, #1
    caa4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    caa6:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    caaa:	425a      	negs	r2, r3
    caac:	4153      	adcs	r3, r2
    caae:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    cab0:	b672      	cpsid	i
    cab2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    cab6:	2200      	movs	r2, #0
    cab8:	4b1c      	ldr	r3, [pc, #112]	; (cb2c <hwTimerOverflowCallback+0xa4>)
    caba:	701a      	strb	r2, [r3, #0]
	return flags;
    cabc:	9c01      	ldr	r4, [sp, #4]
{
    uint32_t tmo32;
    uint16_t tmoHigh16, tmoLow16;
    uint8_t flags = cpu_irq_save();

    if (SWTIMER_INVALID != runningTimerQueueHead && !swTimers[runningTimerQueueHead].loaded)
    cabe:	4b1c      	ldr	r3, [pc, #112]	; (cb30 <hwTimerOverflowCallback+0xa8>)
    cac0:	681b      	ldr	r3, [r3, #0]
    cac2:	2bff      	cmp	r3, #255	; 0xff
    cac4:	d00d      	beq.n	cae2 <hwTimerOverflowCallback+0x5a>
    cac6:	0119      	lsls	r1, r3, #4
    cac8:	4a1a      	ldr	r2, [pc, #104]	; (cb34 <hwTimerOverflowCallback+0xac>)
    caca:	1852      	adds	r2, r2, r1
    cacc:	7b52      	ldrb	r2, [r2, #13]
    cace:	2a00      	cmp	r2, #0
    cad0:	d107      	bne.n	cae2 <hwTimerOverflowCallback+0x5a>
    {
        tmo32 = swTimers[runningTimerQueueHead].absoluteExpiryTime;
    cad2:	4a18      	ldr	r2, [pc, #96]	; (cb34 <hwTimerOverflowCallback+0xac>)
    cad4:	5888      	ldr	r0, [r1, r2]
        tmoHigh16 = (uint16_t)(tmo32 >> SWTIMER_SYSTIME_SHIFTMASK);

        if (tmoHigh16 == sysTime)
    cad6:	4b13      	ldr	r3, [pc, #76]	; (cb24 <hwTimerOverflowCallback+0x9c>)
    cad8:	881b      	ldrh	r3, [r3, #0]
    cada:	b29b      	uxth	r3, r3
    cadc:	0c02      	lsrs	r2, r0, #16
    cade:	429a      	cmp	r2, r3
    cae0:	d00c      	beq.n	cafc <hwTimerOverflowCallback+0x74>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    cae2:	23ff      	movs	r3, #255	; 0xff
    cae4:	4223      	tst	r3, r4
    cae6:	d005      	beq.n	caf4 <hwTimerOverflowCallback+0x6c>
		cpu_irq_enable();
    cae8:	2201      	movs	r2, #1
    caea:	4b10      	ldr	r3, [pc, #64]	; (cb2c <hwTimerOverflowCallback+0xa4>)
    caec:	701a      	strb	r2, [r3, #0]
    caee:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    caf2:	b662      	cpsie	i
	SYS_HwOverflow_Cb();	 
    caf4:	4b10      	ldr	r3, [pc, #64]	; (cb38 <hwTimerOverflowCallback+0xb0>)
    caf6:	4798      	blx	r3
}
    caf8:	b002      	add	sp, #8
    cafa:	bd10      	pop	{r4, pc}
        {
            tmoLow16 = (uint16_t)(tmo32 & SWTIMER_HWTIME_MASK);
    cafc:	b280      	uxth	r0, r0
            if (SWTIMER_MIN_TIMEOUT < tmoLow16)
    cafe:	28ff      	cmp	r0, #255	; 0xff
    cb00:	d909      	bls.n	cb16 <hwTimerOverflowCallback+0x8e>
            {
                common_tc_delay(tmoLow16);
    cb02:	4b0e      	ldr	r3, [pc, #56]	; (cb3c <hwTimerOverflowCallback+0xb4>)
    cb04:	4798      	blx	r3
                swTimers[runningTimerQueueHead].loaded = true;
    cb06:	4b0a      	ldr	r3, [pc, #40]	; (cb30 <hwTimerOverflowCallback+0xa8>)
    cb08:	681a      	ldr	r2, [r3, #0]
    cb0a:	0112      	lsls	r2, r2, #4
    cb0c:	4b09      	ldr	r3, [pc, #36]	; (cb34 <hwTimerOverflowCallback+0xac>)
    cb0e:	189b      	adds	r3, r3, r2
    cb10:	2201      	movs	r2, #1
    cb12:	735a      	strb	r2, [r3, #13]
    cb14:	e7e5      	b.n	cae2 <hwTimerOverflowCallback+0x5a>
            }
            else
            {
                isTimerTriggered = true;
    cb16:	2201      	movs	r2, #1
    cb18:	4b09      	ldr	r3, [pc, #36]	; (cb40 <hwTimerOverflowCallback+0xb8>)
    cb1a:	701a      	strb	r2, [r3, #0]
                SYSTEM_PostTask(TIMER_TASK_ID);
    cb1c:	2001      	movs	r0, #1
    cb1e:	4b09      	ldr	r3, [pc, #36]	; (cb44 <hwTimerOverflowCallback+0xbc>)
    cb20:	4798      	blx	r3
    cb22:	e7de      	b.n	cae2 <hwTimerOverflowCallback+0x5a>
    cb24:	20002cec 	.word	0x20002cec
    cb28:	20002cf0 	.word	0x20002cf0
    cb2c:	20000014 	.word	0x20000014
    cb30:	20002034 	.word	0x20002034
    cb34:	20002b5c 	.word	0x20002b5c
    cb38:	0000c061 	.word	0x0000c061
    cb3c:	0001222d 	.word	0x0001222d
    cb40:	20002cee 	.word	0x20002cee
    cb44:	0000d355 	.word	0x0000d355

0000cb48 <loadHwTimer>:
{
    cb48:	b570      	push	{r4, r5, r6, lr}
    cb4a:	0004      	movs	r4, r0
    if (SWTIMER_INVALID != timerId)
    cb4c:	28ff      	cmp	r0, #255	; 0xff
    cb4e:	d030      	beq.n	cbb2 <loadHwTimer+0x6a>
    time |= ((uint64_t) sysTimeOvf) << 32;
    cb50:	4b19      	ldr	r3, [pc, #100]	; (cbb8 <loadHwTimer+0x70>)
    cb52:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    cb54:	4b19      	ldr	r3, [pc, #100]	; (cbbc <loadHwTimer+0x74>)
    cb56:	881d      	ldrh	r5, [r3, #0]
    cb58:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    cb5a:	4b19      	ldr	r3, [pc, #100]	; (cbc0 <loadHwTimer+0x78>)
    cb5c:	4798      	blx	r3
        uint32_t expiryTime = swTimers[timerId].absoluteExpiryTime;
    cb5e:	0123      	lsls	r3, r4, #4
    time |= (uint64_t) common_tc_read_count();
    cb60:	4328      	orrs	r0, r5
    return ((t2 - t1) < INT32_MAX);
    cb62:	4a18      	ldr	r2, [pc, #96]	; (cbc4 <loadHwTimer+0x7c>)
    cb64:	589b      	ldr	r3, [r3, r2]
    cb66:	1a18      	subs	r0, r3, r0
        if (swtimerCompareTime(now, expiryTime))
    cb68:	4b17      	ldr	r3, [pc, #92]	; (cbc8 <loadHwTimer+0x80>)
    cb6a:	4298      	cmp	r0, r3
    cb6c:	d81a      	bhi.n	cba4 <loadHwTimer+0x5c>
            if (!swTimers[timerId].loaded)
    cb6e:	0122      	lsls	r2, r4, #4
    cb70:	4b14      	ldr	r3, [pc, #80]	; (cbc4 <loadHwTimer+0x7c>)
    cb72:	189b      	adds	r3, r3, r2
    cb74:	7b5b      	ldrb	r3, [r3, #13]
    cb76:	2b00      	cmp	r3, #0
    cb78:	d11d      	bne.n	cbb6 <loadHwTimer+0x6e>
                if (SWTIMER_MIN_TIMEOUT >= timeDiff)
    cb7a:	28ff      	cmp	r0, #255	; 0xff
    cb7c:	d90b      	bls.n	cb96 <loadHwTimer+0x4e>
                else  if ((uint32_t)TIMER_PERIOD >= timeDiff)
    cb7e:	4b13      	ldr	r3, [pc, #76]	; (cbcc <loadHwTimer+0x84>)
    cb80:	4298      	cmp	r0, r3
    cb82:	d818      	bhi.n	cbb6 <loadHwTimer+0x6e>
                    common_tc_delay((uint16_t)timeDiff);
    cb84:	b280      	uxth	r0, r0
    cb86:	4b12      	ldr	r3, [pc, #72]	; (cbd0 <loadHwTimer+0x88>)
    cb88:	4798      	blx	r3
                    swTimers[timerId].loaded = true;
    cb8a:	0124      	lsls	r4, r4, #4
    cb8c:	4b0d      	ldr	r3, [pc, #52]	; (cbc4 <loadHwTimer+0x7c>)
    cb8e:	191c      	adds	r4, r3, r4
    cb90:	2301      	movs	r3, #1
    cb92:	7363      	strb	r3, [r4, #13]
    cb94:	e00f      	b.n	cbb6 <loadHwTimer+0x6e>
                    isTimerTriggered = true;
    cb96:	2201      	movs	r2, #1
    cb98:	4b0e      	ldr	r3, [pc, #56]	; (cbd4 <loadHwTimer+0x8c>)
    cb9a:	701a      	strb	r2, [r3, #0]
                    SYSTEM_PostTask(TIMER_TASK_ID);
    cb9c:	2001      	movs	r0, #1
    cb9e:	4b0e      	ldr	r3, [pc, #56]	; (cbd8 <loadHwTimer+0x90>)
    cba0:	4798      	blx	r3
    cba2:	e008      	b.n	cbb6 <loadHwTimer+0x6e>
            isTimerTriggered = true;
    cba4:	2201      	movs	r2, #1
    cba6:	4b0b      	ldr	r3, [pc, #44]	; (cbd4 <loadHwTimer+0x8c>)
    cba8:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    cbaa:	2001      	movs	r0, #1
    cbac:	4b0a      	ldr	r3, [pc, #40]	; (cbd8 <loadHwTimer+0x90>)
    cbae:	4798      	blx	r3
    cbb0:	e001      	b.n	cbb6 <loadHwTimer+0x6e>
        common_tc_compare_stop();
    cbb2:	4b0a      	ldr	r3, [pc, #40]	; (cbdc <loadHwTimer+0x94>)
    cbb4:	4798      	blx	r3
}
    cbb6:	bd70      	pop	{r4, r5, r6, pc}
    cbb8:	20002cf0 	.word	0x20002cf0
    cbbc:	20002cec 	.word	0x20002cec
    cbc0:	000121b9 	.word	0x000121b9
    cbc4:	20002b5c 	.word	0x20002b5c
    cbc8:	7ffffffe 	.word	0x7ffffffe
    cbcc:	0000ffff 	.word	0x0000ffff
    cbd0:	0001222d 	.word	0x0001222d
    cbd4:	20002cee 	.word	0x20002cee
    cbd8:	0000d355 	.word	0x0000d355
    cbdc:	00012205 	.word	0x00012205

0000cbe0 <swtimerInternalHandler>:

/**************************************************************************//**
\brief Internal handler for the timer trigger
******************************************************************************/
static void swtimerInternalHandler(void)
{
    cbe0:	b510      	push	{r4, lr}
    if (isTimerTriggered)
    cbe2:	4b1d      	ldr	r3, [pc, #116]	; (cc58 <swtimerInternalHandler+0x78>)
    cbe4:	781b      	ldrb	r3, [r3, #0]
    cbe6:	2b00      	cmp	r3, #0
    cbe8:	d027      	beq.n	cc3a <swtimerInternalHandler+0x5a>
    {
        isTimerTriggered = false;
    cbea:	2200      	movs	r2, #0
    cbec:	4b1a      	ldr	r3, [pc, #104]	; (cc58 <swtimerInternalHandler+0x78>)
    cbee:	701a      	strb	r2, [r3, #0]

        if (0 < runningTimers)
    cbf0:	4b1a      	ldr	r3, [pc, #104]	; (cc5c <swtimerInternalHandler+0x7c>)
    cbf2:	781b      	ldrb	r3, [r3, #0]
    cbf4:	2b00      	cmp	r3, #0
    cbf6:	d020      	beq.n	cc3a <swtimerInternalHandler+0x5a>
        { /* Holds the number of running timers */
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    cbf8:	4b19      	ldr	r3, [pc, #100]	; (cc60 <swtimerInternalHandler+0x80>)
    cbfa:	681b      	ldr	r3, [r3, #0]
    cbfc:	2bff      	cmp	r3, #255	; 0xff
    cbfe:	d01d      	beq.n	cc3c <swtimerInternalHandler+0x5c>
                expiredTimerQueueHead = runningTimerQueueHead;
                expiredTimerQueueTail = runningTimerQueueHead;
            }
            else
            { /* there were already some timers expired before this one */
                swTimers[expiredTimerQueueTail].nextTimer = runningTimerQueueHead;
    cc00:	4b18      	ldr	r3, [pc, #96]	; (cc64 <swtimerInternalHandler+0x84>)
    cc02:	6818      	ldr	r0, [r3, #0]
    cc04:	4918      	ldr	r1, [pc, #96]	; (cc68 <swtimerInternalHandler+0x88>)
    cc06:	680b      	ldr	r3, [r1, #0]
    cc08:	011a      	lsls	r2, r3, #4
    cc0a:	4b18      	ldr	r3, [pc, #96]	; (cc6c <swtimerInternalHandler+0x8c>)
    cc0c:	189b      	adds	r3, r3, r2
    cc0e:	7318      	strb	r0, [r3, #12]
                expiredTimerQueueTail = runningTimerQueueHead;
    cc10:	6008      	str	r0, [r1, #0]
            }

            runningTimerQueueHead = swTimers[runningTimerQueueHead].nextTimer;
    cc12:	4a16      	ldr	r2, [pc, #88]	; (cc6c <swtimerInternalHandler+0x8c>)
    cc14:	4913      	ldr	r1, [pc, #76]	; (cc64 <swtimerInternalHandler+0x84>)
    cc16:	680b      	ldr	r3, [r1, #0]
    cc18:	011b      	lsls	r3, r3, #4
    cc1a:	18d3      	adds	r3, r2, r3
    cc1c:	7b18      	ldrb	r0, [r3, #12]
    cc1e:	6008      	str	r0, [r1, #0]

            swTimers[expiredTimerQueueTail].nextTimer = SWTIMER_INVALID;
    cc20:	4b11      	ldr	r3, [pc, #68]	; (cc68 <swtimerInternalHandler+0x88>)
    cc22:	681b      	ldr	r3, [r3, #0]
    cc24:	011b      	lsls	r3, r3, #4
    cc26:	18d2      	adds	r2, r2, r3
    cc28:	23ff      	movs	r3, #255	; 0xff
    cc2a:	7313      	strb	r3, [r2, #12]

            if ((--runningTimers) > 0)
    cc2c:	4a0b      	ldr	r2, [pc, #44]	; (cc5c <swtimerInternalHandler+0x7c>)
    cc2e:	7813      	ldrb	r3, [r2, #0]
    cc30:	3b01      	subs	r3, #1
    cc32:	b2db      	uxtb	r3, r3
    cc34:	7013      	strb	r3, [r2, #0]
    cc36:	2b00      	cmp	r3, #0
    cc38:	d10b      	bne.n	cc52 <swtimerInternalHandler+0x72>
            { /* keep the ball rolling! load the next head timer from the queue */
                loadHwTimer(runningTimerQueueHead);
            }
        }
    }
}
    cc3a:	bd10      	pop	{r4, pc}
                (expiredTimerQueueTail == SWTIMER_INVALID))
    cc3c:	4b0a      	ldr	r3, [pc, #40]	; (cc68 <swtimerInternalHandler+0x88>)
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    cc3e:	681b      	ldr	r3, [r3, #0]
    cc40:	2bff      	cmp	r3, #255	; 0xff
    cc42:	d1dd      	bne.n	cc00 <swtimerInternalHandler+0x20>
                expiredTimerQueueHead = runningTimerQueueHead;
    cc44:	4b07      	ldr	r3, [pc, #28]	; (cc64 <swtimerInternalHandler+0x84>)
    cc46:	681b      	ldr	r3, [r3, #0]
    cc48:	4a05      	ldr	r2, [pc, #20]	; (cc60 <swtimerInternalHandler+0x80>)
    cc4a:	6013      	str	r3, [r2, #0]
                expiredTimerQueueTail = runningTimerQueueHead;
    cc4c:	4a06      	ldr	r2, [pc, #24]	; (cc68 <swtimerInternalHandler+0x88>)
    cc4e:	6013      	str	r3, [r2, #0]
    cc50:	e7df      	b.n	cc12 <swtimerInternalHandler+0x32>
                loadHwTimer(runningTimerQueueHead);
    cc52:	4b07      	ldr	r3, [pc, #28]	; (cc70 <swtimerInternalHandler+0x90>)
    cc54:	4798      	blx	r3
}
    cc56:	e7f0      	b.n	cc3a <swtimerInternalHandler+0x5a>
    cc58:	20002cee 	.word	0x20002cee
    cc5c:	20002038 	.word	0x20002038
    cc60:	2000202c 	.word	0x2000202c
    cc64:	20002034 	.word	0x20002034
    cc68:	20002030 	.word	0x20002030
    cc6c:	20002b5c 	.word	0x20002b5c
    cc70:	0000cb49 	.word	0x0000cb49

0000cc74 <SwTimerReset>:
    /*
    * Initialize the timer resources like timer arrays queues, timer registers
    */
    uint8_t index;

    runningTimers = 0u;
    cc74:	2300      	movs	r3, #0
    cc76:	4a0d      	ldr	r2, [pc, #52]	; (ccac <SwTimerReset+0x38>)
    cc78:	7013      	strb	r3, [r2, #0]
    isTimerTriggered = false;
    cc7a:	4a0d      	ldr	r2, [pc, #52]	; (ccb0 <SwTimerReset+0x3c>)
    cc7c:	7013      	strb	r3, [r2, #0]

    runningTimerQueueHead = SWTIMER_INVALID;
    cc7e:	33ff      	adds	r3, #255	; 0xff
    cc80:	4a0c      	ldr	r2, [pc, #48]	; (ccb4 <SwTimerReset+0x40>)
    cc82:	6013      	str	r3, [r2, #0]
    expiredTimerQueueHead = SWTIMER_INVALID;
    cc84:	4a0c      	ldr	r2, [pc, #48]	; (ccb8 <SwTimerReset+0x44>)
    cc86:	6013      	str	r3, [r2, #0]
    expiredTimerQueueTail = SWTIMER_INVALID;
    cc88:	4a0c      	ldr	r2, [pc, #48]	; (ccbc <SwTimerReset+0x48>)
    cc8a:	6013      	str	r3, [r2, #0]
    cc8c:	4b0c      	ldr	r3, [pc, #48]	; (ccc0 <SwTimerReset+0x4c>)
    cc8e:	0018      	movs	r0, r3
    cc90:	3091      	adds	r0, #145	; 0x91
    cc92:	30ff      	adds	r0, #255	; 0xff

    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    {
        swTimers[index].nextTimer = SWTIMER_INVALID;
    cc94:	21ff      	movs	r1, #255	; 0xff
        swTimers[index].timerCb = NULL;
    cc96:	2200      	movs	r2, #0
        swTimers[index].nextTimer = SWTIMER_INVALID;
    cc98:	7219      	strb	r1, [r3, #8]
        swTimers[index].timerCb = NULL;
    cc9a:	601a      	str	r2, [r3, #0]
    cc9c:	3310      	adds	r3, #16
    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    cc9e:	4283      	cmp	r3, r0
    cca0:	d1fa      	bne.n	cc98 <SwTimerReset+0x24>
    }

    allocatedTimerId = 0u;
    cca2:	2200      	movs	r2, #0
    cca4:	4b07      	ldr	r3, [pc, #28]	; (ccc4 <SwTimerReset+0x50>)
    cca6:	701a      	strb	r2, [r3, #0]
}
    cca8:	4770      	bx	lr
    ccaa:	46c0      	nop			; (mov r8, r8)
    ccac:	20002038 	.word	0x20002038
    ccb0:	20002cee 	.word	0x20002cee
    ccb4:	20002034 	.word	0x20002034
    ccb8:	2000202c 	.word	0x2000202c
    ccbc:	20002030 	.word	0x20002030
    ccc0:	20002b60 	.word	0x20002b60
    ccc4:	20002028 	.word	0x20002028

0000ccc8 <SystemTimerInit>:

/**************************************************************************//**
\brief Initializes the Software Timer module
******************************************************************************/
void SystemTimerInit(void)
{
    ccc8:	b510      	push	{r4, lr}
    SwTimerReset();
    ccca:	4b08      	ldr	r3, [pc, #32]	; (ccec <SystemTimerInit+0x24>)
    cccc:	4798      	blx	r3

    /* initialize system time parameters */
    sysTimeOvf = sysTime = 0u;
    ccce:	2300      	movs	r3, #0
    ccd0:	4a07      	ldr	r2, [pc, #28]	; (ccf0 <SystemTimerInit+0x28>)
    ccd2:	8013      	strh	r3, [r2, #0]
    ccd4:	4a07      	ldr	r2, [pc, #28]	; (ccf4 <SystemTimerInit+0x2c>)
    ccd6:	6013      	str	r3, [r2, #0]

    common_tc_init();
    ccd8:	4b07      	ldr	r3, [pc, #28]	; (ccf8 <SystemTimerInit+0x30>)
    ccda:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    ccdc:	4807      	ldr	r0, [pc, #28]	; (ccfc <SystemTimerInit+0x34>)
    ccde:	4b08      	ldr	r3, [pc, #32]	; (cd00 <SystemTimerInit+0x38>)
    cce0:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    cce2:	4808      	ldr	r0, [pc, #32]	; (cd04 <SystemTimerInit+0x3c>)
    cce4:	4b08      	ldr	r3, [pc, #32]	; (cd08 <SystemTimerInit+0x40>)
    cce6:	4798      	blx	r3
}
    cce8:	bd10      	pop	{r4, pc}
    ccea:	46c0      	nop			; (mov r8, r8)
    ccec:	0000cc75 	.word	0x0000cc75
    ccf0:	20002cec 	.word	0x20002cec
    ccf4:	20002cf0 	.word	0x20002cf0
    ccf8:	00012299 	.word	0x00012299
    ccfc:	0000ca89 	.word	0x0000ca89
    cd00:	0001231d 	.word	0x0001231d
    cd04:	0000ca61 	.word	0x0000ca61
    cd08:	00012329 	.word	0x00012329

0000cd0c <SwTimerGetTime>:
/**************************************************************************//**
\brief Get current system time.
\return Returns current system time in microseconds
******************************************************************************/
uint64_t SwTimerGetTime(void)
{
    cd0c:	b570      	push	{r4, r5, r6, lr}
    time |= ((uint64_t) sysTimeOvf) << 32;
    cd0e:	4b05      	ldr	r3, [pc, #20]	; (cd24 <SwTimerGetTime+0x18>)
    cd10:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    cd12:	4b05      	ldr	r3, [pc, #20]	; (cd28 <SwTimerGetTime+0x1c>)
    cd14:	881d      	ldrh	r5, [r3, #0]
    cd16:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    cd18:	4b04      	ldr	r3, [pc, #16]	; (cd2c <SwTimerGetTime+0x20>)
    cd1a:	4798      	blx	r3
    cd1c:	4328      	orrs	r0, r5
    return gettime();
}
    cd1e:	0021      	movs	r1, r4
    cd20:	bd70      	pop	{r4, r5, r6, pc}
    cd22:	46c0      	nop			; (mov r8, r8)
    cd24:	20002cf0 	.word	0x20002cf0
    cd28:	20002cec 	.word	0x20002cec
    cd2c:	000121b9 	.word	0x000121b9

0000cd30 <SwTimerCreate>:

\return LORAWAN_SUCCESS if new timerId is allocated
        LORAWAN_RESOURCE_UNAVAILABLE if there is no more timerId to allocate
******************************************************************************/
StackRetStatus_t SwTimerCreate(uint8_t *timerId)
{
    cd30:	b510      	push	{r4, lr}
    cd32:	0004      	movs	r4, r0
    StackRetStatus_t retVal = LORAWAN_SUCCESS;

    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    cd34:	4b08      	ldr	r3, [pc, #32]	; (cd58 <SwTimerCreate+0x28>)
    cd36:	781b      	ldrb	r3, [r3, #0]
        * If you reach this spot it means the TOTAL_NUMBER_OF_SW_TIMERS
        * is #defined to a lower value than the number of timers that have
        * been SwTimerCreate()
        */
        SYS_ASSERT_FATAL(ASSERT_HAL_TIMERID_EXHAUSTED);
        retVal = LORAWAN_RESOURCE_UNAVAILABLE;
    cd38:	2014      	movs	r0, #20
    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    cd3a:	2b18      	cmp	r3, #24
    cd3c:	d900      	bls.n	cd40 <SwTimerCreate+0x10>
    }

    return retVal;
}
    cd3e:	bd10      	pop	{r4, pc}
        ATOMIC_SECTION_ENTER
    cd40:	4b06      	ldr	r3, [pc, #24]	; (cd5c <SwTimerCreate+0x2c>)
    cd42:	4798      	blx	r3
        *timerId = allocatedTimerId;
    cd44:	4a04      	ldr	r2, [pc, #16]	; (cd58 <SwTimerCreate+0x28>)
    cd46:	7813      	ldrb	r3, [r2, #0]
    cd48:	7023      	strb	r3, [r4, #0]
        allocatedTimerId++;
    cd4a:	3301      	adds	r3, #1
    cd4c:	7013      	strb	r3, [r2, #0]
        ATOMIC_SECTION_EXIT
    cd4e:	4b04      	ldr	r3, [pc, #16]	; (cd60 <SwTimerCreate+0x30>)
    cd50:	4798      	blx	r3
    StackRetStatus_t retVal = LORAWAN_SUCCESS;
    cd52:	2008      	movs	r0, #8
    cd54:	e7f3      	b.n	cd3e <SwTimerCreate+0xe>
    cd56:	46c0      	nop			; (mov r8, r8)
    cd58:	20002028 	.word	0x20002028
    cd5c:	0000c85d 	.word	0x0000c85d
    cd60:	0000c869 	.word	0x0000c869

0000cd64 <SwTimerStart>:
        LORAWAN_INVALID_REQUEST if \timerId is already running
        LORAWAN_SUCCESS if \timerId is successfully queued for running
******************************************************************************/
StackRetStatus_t SwTimerStart(uint8_t timerId, uint32_t timerCount,
    SwTimeoutType_t timeoutType, void *timerCb, void *paramCb)
{
    cd64:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd66:	46d6      	mov	lr, sl
    cd68:	464f      	mov	r7, r9
    cd6a:	4646      	mov	r6, r8
    cd6c:	b5c0      	push	{r6, r7, lr}
    cd6e:	b084      	sub	sp, #16
    cd70:	0007      	movs	r7, r0
    cd72:	000d      	movs	r5, r1
    cd74:	0016      	movs	r6, r2
    cd76:	001c      	movs	r4, r3
    uint32_t pointInTime;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    cd78:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    cd7a:	2f18      	cmp	r7, #24
    cd7c:	d809      	bhi.n	cd92 <SwTimerStart+0x2e>
    cd7e:	2b00      	cmp	r3, #0
    cd80:	d100      	bne.n	cd84 <SwTimerStart+0x20>
    cd82:	e08c      	b.n	ce9e <SwTimerStart+0x13a>
    }

    if (NULL != swTimers[timerId].timerCb)
    cd84:	013a      	lsls	r2, r7, #4
    cd86:	4b52      	ldr	r3, [pc, #328]	; (ced0 <SwTimerStart+0x16c>)
    cd88:	189b      	adds	r3, r3, r2
    cd8a:	685b      	ldr	r3, [r3, #4]
        /*
        * Timer is already running if the callback function of the
        * corresponding timer index in the timer array is not NULL.
        */
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_REQUEST;
    cd8c:	300b      	adds	r0, #11
    if (NULL != swTimers[timerId].timerCb)
    cd8e:	2b00      	cmp	r3, #0
    cd90:	d005      	beq.n	cd9e <SwTimerStart+0x3a>
        }
    }

    swtimerStartAbsoluteTimer(timerId, pointInTime, timerCb, paramCb);
    return LORAWAN_SUCCESS;
}
    cd92:	b004      	add	sp, #16
    cd94:	bc1c      	pop	{r2, r3, r4}
    cd96:	4690      	mov	r8, r2
    cd98:	4699      	mov	r9, r3
    cd9a:	46a2      	mov	sl, r4
    cd9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    time |= ((uint64_t) sysTimeOvf) << 32;
    cd9e:	4b4d      	ldr	r3, [pc, #308]	; (ced4 <SwTimerStart+0x170>)
    cda0:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    cda2:	4b4d      	ldr	r3, [pc, #308]	; (ced8 <SwTimerStart+0x174>)
    cda4:	8818      	ldrh	r0, [r3, #0]
    cda6:	0403      	lsls	r3, r0, #16
    cda8:	4698      	mov	r8, r3
    time |= (uint64_t) common_tc_read_count();
    cdaa:	4b4c      	ldr	r3, [pc, #304]	; (cedc <SwTimerStart+0x178>)
    cdac:	4798      	blx	r3
    cdae:	4643      	mov	r3, r8
    cdb0:	4303      	orrs	r3, r0
    switch (timeoutType)
    cdb2:	2e00      	cmp	r6, #0
    cdb4:	d003      	beq.n	cdbe <SwTimerStart+0x5a>
    cdb6:	2e01      	cmp	r6, #1
    cdb8:	d038      	beq.n	ce2c <SwTimerStart+0xc8>
            return LORAWAN_INVALID_PARAMETER;
    cdba:	200a      	movs	r0, #10
    cdbc:	e7e9      	b.n	cd92 <SwTimerStart+0x2e>
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    cdbe:	4948      	ldr	r1, [pc, #288]	; (cee0 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    cdc0:	200a      	movs	r0, #10
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    cdc2:	002a      	movs	r2, r5
    cdc4:	3aff      	subs	r2, #255	; 0xff
            pointInTime = ADD_TIME(timerCount, now);
    cdc6:	18ed      	adds	r5, r5, r3
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    cdc8:	428a      	cmp	r2, r1
    cdca:	d8e2      	bhi.n	cd92 <SwTimerStart+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    cdcc:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    cdd0:	425a      	negs	r2, r3
    cdd2:	4153      	adcs	r3, r2
    cdd4:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    cdd6:	b672      	cpsid	i
    cdd8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    cddc:	2600      	movs	r6, #0
    cdde:	4b41      	ldr	r3, [pc, #260]	; (cee4 <SwTimerStart+0x180>)
    cde0:	701e      	strb	r6, [r3, #0]
	return flags;
    cde2:	9b03      	ldr	r3, [sp, #12]
    cde4:	4699      	mov	r9, r3
    swtimerInternalHandler();
    cde6:	4b40      	ldr	r3, [pc, #256]	; (cee8 <SwTimerStart+0x184>)
    cde8:	4798      	blx	r3
    swTimers[timerId].absoluteExpiryTime = pointInTime;
    cdea:	4b39      	ldr	r3, [pc, #228]	; (ced0 <SwTimerStart+0x16c>)
    cdec:	013a      	lsls	r2, r7, #4
    cdee:	50d5      	str	r5, [r2, r3]
    swTimers[timerId].timerCb = (void (*)(void*))handlerCb;
    cdf0:	189b      	adds	r3, r3, r2
    cdf2:	605c      	str	r4, [r3, #4]
    swTimers[timerId].paramCb = parameter;
    cdf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cdf6:	609a      	str	r2, [r3, #8]
    swTimers[timerId].loaded = false;
    cdf8:	735e      	strb	r6, [r3, #13]
    runningTimers++;
    cdfa:	4a3c      	ldr	r2, [pc, #240]	; (ceec <SwTimerStart+0x188>)
    cdfc:	7813      	ldrb	r3, [r2, #0]
    cdfe:	3301      	adds	r3, #1
    ce00:	b2db      	uxtb	r3, r3
    ce02:	7013      	strb	r3, [r2, #0]
    if (SWTIMER_INVALID == runningTimerQueueHead)
    ce04:	4b3a      	ldr	r3, [pc, #232]	; (cef0 <SwTimerStart+0x18c>)
    ce06:	681b      	ldr	r3, [r3, #0]
    ce08:	469a      	mov	sl, r3
    ce0a:	2bff      	cmp	r3, #255	; 0xff
    ce0c:	d016      	beq.n	ce3c <SwTimerStart+0xd8>
        uint8_t currIndex = runningTimerQueueHead;
    ce0e:	466a      	mov	r2, sp
    ce10:	7013      	strb	r3, [r2, #0]
    ce12:	7812      	ldrb	r2, [r2, #0]
        for (index = 0; index < runningTimers; index++)
    ce14:	4b35      	ldr	r3, [pc, #212]	; (ceec <SwTimerStart+0x188>)
    ce16:	781b      	ldrb	r3, [r3, #0]
    ce18:	2b00      	cmp	r3, #0
    ce1a:	d042      	beq.n	cea2 <SwTimerStart+0x13e>
    ce1c:	9200      	str	r2, [sp, #0]
    ce1e:	2300      	movs	r3, #0
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    ce20:	492b      	ldr	r1, [pc, #172]	; (ced0 <SwTimerStart+0x16c>)
    ce22:	4688      	mov	r8, r1
    ce24:	4833      	ldr	r0, [pc, #204]	; (cef4 <SwTimerStart+0x190>)
                    currIndex = swTimers[currIndex].nextTimer;
    ce26:	468c      	mov	ip, r1
        for (index = 0; index < runningTimers; index++)
    ce28:	4c30      	ldr	r4, [pc, #192]	; (ceec <SwTimerStart+0x188>)
    ce2a:	e02a      	b.n	ce82 <SwTimerStart+0x11e>
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    ce2c:	0028      	movs	r0, r5
    ce2e:	38ff      	subs	r0, #255	; 0xff
    ce30:	1ac3      	subs	r3, r0, r3
    ce32:	4a2b      	ldr	r2, [pc, #172]	; (cee0 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    ce34:	200a      	movs	r0, #10
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    ce36:	4293      	cmp	r3, r2
    ce38:	d9c8      	bls.n	cdcc <SwTimerStart+0x68>
    ce3a:	e7aa      	b.n	cd92 <SwTimerStart+0x2e>
        runningTimerQueueHead = timerId;
    ce3c:	4b2c      	ldr	r3, [pc, #176]	; (cef0 <SwTimerStart+0x18c>)
    ce3e:	601f      	str	r7, [r3, #0]
        loadHwTimer(runningTimerQueueHead);
    ce40:	0038      	movs	r0, r7
    ce42:	4b2d      	ldr	r3, [pc, #180]	; (cef8 <SwTimerStart+0x194>)
    ce44:	4798      	blx	r3
    ce46:	e036      	b.n	ceb6 <SwTimerStart+0x152>
                    swTimers[timerId].nextTimer = currIndex;
    ce48:	4b21      	ldr	r3, [pc, #132]	; (ced0 <SwTimerStart+0x16c>)
    ce4a:	013c      	lsls	r4, r7, #4
    ce4c:	191c      	adds	r4, r3, r4
    ce4e:	7322      	strb	r2, [r4, #12]
                    swTimers[currIndex].loaded = false;
    ce50:	9901      	ldr	r1, [sp, #4]
    ce52:	0109      	lsls	r1, r1, #4
    ce54:	1859      	adds	r1, r3, r1
    ce56:	2300      	movs	r3, #0
    ce58:	734b      	strb	r3, [r1, #13]
                    if (runningTimerQueueHead == currIndex)
    ce5a:	4592      	cmp	sl, r2
    ce5c:	d005      	beq.n	ce6a <SwTimerStart+0x106>
                        swTimers[prevIndex].nextTimer = timerId;
    ce5e:	9b00      	ldr	r3, [sp, #0]
    ce60:	0118      	lsls	r0, r3, #4
    ce62:	4b1b      	ldr	r3, [pc, #108]	; (ced0 <SwTimerStart+0x16c>)
    ce64:	1818      	adds	r0, r3, r0
    ce66:	7307      	strb	r7, [r0, #12]
    ce68:	e025      	b.n	ceb6 <SwTimerStart+0x152>
                        runningTimerQueueHead = timerId;
    ce6a:	4b21      	ldr	r3, [pc, #132]	; (cef0 <SwTimerStart+0x18c>)
    ce6c:	601f      	str	r7, [r3, #0]
                        loadHwTimer(runningTimerQueueHead);
    ce6e:	0038      	movs	r0, r7
    ce70:	4b21      	ldr	r3, [pc, #132]	; (cef8 <SwTimerStart+0x194>)
    ce72:	4798      	blx	r3
    ce74:	e01f      	b.n	ceb6 <SwTimerStart+0x152>
        for (index = 0; index < runningTimers; index++)
    ce76:	3301      	adds	r3, #1
    ce78:	b2db      	uxtb	r3, r3
    ce7a:	7821      	ldrb	r1, [r4, #0]
    ce7c:	b2c9      	uxtb	r1, r1
    ce7e:	428b      	cmp	r3, r1
    ce80:	d210      	bcs.n	cea4 <SwTimerStart+0x140>
            if (SWTIMER_INVALID != currIndex)
    ce82:	2aff      	cmp	r2, #255	; 0xff
    ce84:	d0f7      	beq.n	ce76 <SwTimerStart+0x112>
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    ce86:	9201      	str	r2, [sp, #4]
    ce88:	0111      	lsls	r1, r2, #4
    return ((t2 - t1) < INT32_MAX);
    ce8a:	4646      	mov	r6, r8
    ce8c:	5989      	ldr	r1, [r1, r6]
    ce8e:	1a69      	subs	r1, r5, r1
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    ce90:	4281      	cmp	r1, r0
    ce92:	d8d9      	bhi.n	ce48 <SwTimerStart+0xe4>
                    currIndex = swTimers[currIndex].nextTimer;
    ce94:	0111      	lsls	r1, r2, #4
    ce96:	4461      	add	r1, ip
    ce98:	9200      	str	r2, [sp, #0]
    ce9a:	7b0a      	ldrb	r2, [r1, #12]
    ce9c:	e7eb      	b.n	ce76 <SwTimerStart+0x112>
        return LORAWAN_INVALID_PARAMETER;
    ce9e:	200a      	movs	r0, #10
    cea0:	e777      	b.n	cd92 <SwTimerStart+0x2e>
        uint8_t prevIndex = runningTimerQueueHead;
    cea2:	9200      	str	r2, [sp, #0]
            swTimers[prevIndex].nextTimer = timerId;
    cea4:	4b0a      	ldr	r3, [pc, #40]	; (ced0 <SwTimerStart+0x16c>)
    cea6:	9a00      	ldr	r2, [sp, #0]
    cea8:	0110      	lsls	r0, r2, #4
    ceaa:	1818      	adds	r0, r3, r0
    ceac:	7307      	strb	r7, [r0, #12]
            swTimers[timerId].nextTimer = SWTIMER_INVALID;
    ceae:	013f      	lsls	r7, r7, #4
    ceb0:	19df      	adds	r7, r3, r7
    ceb2:	23ff      	movs	r3, #255	; 0xff
    ceb4:	733b      	strb	r3, [r7, #12]
	if (cpu_irq_is_enabled_flags(flags))
    ceb6:	23ff      	movs	r3, #255	; 0xff
    return LORAWAN_SUCCESS;
    ceb8:	2008      	movs	r0, #8
    ceba:	464a      	mov	r2, r9
    cebc:	4213      	tst	r3, r2
    cebe:	d100      	bne.n	cec2 <SwTimerStart+0x15e>
    cec0:	e767      	b.n	cd92 <SwTimerStart+0x2e>
		cpu_irq_enable();
    cec2:	2201      	movs	r2, #1
    cec4:	4b07      	ldr	r3, [pc, #28]	; (cee4 <SwTimerStart+0x180>)
    cec6:	701a      	strb	r2, [r3, #0]
    cec8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    cecc:	b662      	cpsie	i
    cece:	e760      	b.n	cd92 <SwTimerStart+0x2e>
    ced0:	20002b5c 	.word	0x20002b5c
    ced4:	20002cf0 	.word	0x20002cf0
    ced8:	20002cec 	.word	0x20002cec
    cedc:	000121b9 	.word	0x000121b9
    cee0:	7fffff00 	.word	0x7fffff00
    cee4:	20000014 	.word	0x20000014
    cee8:	0000cbe1 	.word	0x0000cbe1
    ceec:	20002038 	.word	0x20002038
    cef0:	20002034 	.word	0x20002034
    cef4:	7ffffffe 	.word	0x7ffffffe
    cef8:	0000cb49 	.word	0x0000cb49

0000cefc <SwTimerIsRunning>:
\param[in] timerId Timer ID to be checked for running
\return True if the timer is running else False
******************************************************************************/
bool SwTimerIsRunning(uint8_t timerId)
{
    if (NULL == swTimers[timerId].timerCb)
    cefc:	0103      	lsls	r3, r0, #4
    cefe:	4803      	ldr	r0, [pc, #12]	; (cf0c <SwTimerIsRunning+0x10>)
    cf00:	18c0      	adds	r0, r0, r3
    cf02:	6840      	ldr	r0, [r0, #4]
    cf04:	1e43      	subs	r3, r0, #1
    cf06:	4198      	sbcs	r0, r3
    cf08:	b2c0      	uxtb	r0, r0
    {
        return false;
    }

    return true;
}
    cf0a:	4770      	bx	lr
    cf0c:	20002b5c 	.word	0x20002b5c

0000cf10 <SwTimerReadValue>:
\brief Returns the remaining timeout for the given timerId
\param[in] timerId Timer ID to get the remaining time
\return Remaining time until expiry in microseconds
******************************************************************************/
uint32_t SwTimerReadValue(uint8_t timerId)
{
    cf10:	b570      	push	{r4, r5, r6, lr}
    cf12:	0005      	movs	r5, r0
    time |= ((uint64_t) sysTimeOvf) << 32;
    cf14:	4b09      	ldr	r3, [pc, #36]	; (cf3c <SwTimerReadValue+0x2c>)
    cf16:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    cf18:	4b09      	ldr	r3, [pc, #36]	; (cf40 <SwTimerReadValue+0x30>)
    cf1a:	881e      	ldrh	r6, [r3, #0]
    cf1c:	0436      	lsls	r6, r6, #16
    time |= (uint64_t) common_tc_read_count();
    cf1e:	4b09      	ldr	r3, [pc, #36]	; (cf44 <SwTimerReadValue+0x34>)
    cf20:	4798      	blx	r3
    cf22:	4306      	orrs	r6, r0
    uint32_t tv = 0u;
    uint64_t t1 = gettime();
    uint64_t t2 = (uint64_t)swTimers[timerId].absoluteExpiryTime;
    cf24:	012d      	lsls	r5, r5, #4
    cf26:	4b08      	ldr	r3, [pc, #32]	; (cf48 <SwTimerReadValue+0x38>)
    cf28:	58e8      	ldr	r0, [r5, r3]
    cf2a:	0002      	movs	r2, r0

    if (t2 > t1)
    cf2c:	2c00      	cmp	r4, #0
    cf2e:	d102      	bne.n	cf36 <SwTimerReadValue+0x26>
    {
        tv = (uint32_t)(t2 - t1);
    cf30:	1b80      	subs	r0, r0, r6
    if (t2 > t1)
    cf32:	42b2      	cmp	r2, r6
    cf34:	d800      	bhi.n	cf38 <SwTimerReadValue+0x28>
    uint32_t tv = 0u;
    cf36:	2000      	movs	r0, #0
    }

    return tv;
}
    cf38:	bd70      	pop	{r4, r5, r6, pc}
    cf3a:	46c0      	nop			; (mov r8, r8)
    cf3c:	20002cf0 	.word	0x20002cf0
    cf40:	20002cec 	.word	0x20002cec
    cf44:	000121b9 	.word	0x000121b9
    cf48:	20002b5c 	.word	0x20002b5c

0000cf4c <SwTimerNextExpiryDuration>:
/**************************************************************************//**
\brief Returns the duration until the next timer expiry
\return Returns the duration until the next timeout in microseconds
******************************************************************************/
uint32_t SwTimerNextExpiryDuration(void)
{
    cf4c:	b510      	push	{r4, lr}
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;

    if (SWTIMER_INVALID != runningTimerQueueHead)
    cf4e:	4b05      	ldr	r3, [pc, #20]	; (cf64 <SwTimerNextExpiryDuration+0x18>)
    cf50:	6818      	ldr	r0, [r3, #0]
    cf52:	28ff      	cmp	r0, #255	; 0xff
    cf54:	d102      	bne.n	cf5c <SwTimerNextExpiryDuration+0x10>
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;
    cf56:	2001      	movs	r0, #1
    cf58:	4240      	negs	r0, r0
    {
        duration = SwTimerReadValue(runningTimerQueueHead);
    }

    return duration;
}
    cf5a:	bd10      	pop	{r4, pc}
        duration = SwTimerReadValue(runningTimerQueueHead);
    cf5c:	b2c0      	uxtb	r0, r0
    cf5e:	4b02      	ldr	r3, [pc, #8]	; (cf68 <SwTimerNextExpiryDuration+0x1c>)
    cf60:	4798      	blx	r3
    cf62:	e7fa      	b.n	cf5a <SwTimerNextExpiryDuration+0xe>
    cf64:	20002034 	.word	0x20002034
    cf68:	0000cf11 	.word	0x0000cf11

0000cf6c <SwTimersExecute>:

/**************************************************************************//**
\brief Handles Queues and Callbacks for Expired Timers
******************************************************************************/
void SwTimersExecute(void)
{
    cf6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    cf6e:	46de      	mov	lr, fp
    cf70:	4657      	mov	r7, sl
    cf72:	464e      	mov	r6, r9
    cf74:	4645      	mov	r5, r8
    cf76:	b5e0      	push	{r5, r6, r7, lr}
    cf78:	b083      	sub	sp, #12
    time |= ((uint64_t) sysTimeOvf) << 32;
    cf7a:	4b2f      	ldr	r3, [pc, #188]	; (d038 <SwTimersExecute+0xcc>)
    cf7c:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    cf7e:	4b2f      	ldr	r3, [pc, #188]	; (d03c <SwTimersExecute+0xd0>)
    cf80:	881b      	ldrh	r3, [r3, #0]
    time |= (uint64_t) common_tc_read_count();
    cf82:	4b2f      	ldr	r3, [pc, #188]	; (d040 <SwTimersExecute+0xd4>)
    cf84:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    cf86:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    cf8a:	4253      	negs	r3, r2
    cf8c:	4153      	adcs	r3, r2
    cf8e:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    cf90:	b672      	cpsid	i
    cf92:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    cf96:	2200      	movs	r2, #0
    cf98:	4b2a      	ldr	r3, [pc, #168]	; (d044 <SwTimersExecute+0xd8>)
    cf9a:	701a      	strb	r2, [r3, #0]
	return flags;
    cf9c:	9c00      	ldr	r4, [sp, #0]
    uint64_t now = gettime();

    uint8_t flags = cpu_irq_save();
    swtimerInternalHandler();
    cf9e:	4b2a      	ldr	r3, [pc, #168]	; (d048 <SwTimersExecute+0xdc>)
    cfa0:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    cfa2:	23ff      	movs	r3, #255	; 0xff
    cfa4:	4223      	tst	r3, r4
    cfa6:	d005      	beq.n	cfb4 <SwTimersExecute+0x48>
		cpu_irq_enable();
    cfa8:	2201      	movs	r2, #1
    cfaa:	4b26      	ldr	r3, [pc, #152]	; (d044 <SwTimersExecute+0xd8>)
    cfac:	701a      	strb	r2, [r3, #0]
    cfae:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    cfb2:	b662      	cpsie	i
	cpu_irq_disable();
    cfb4:	4b23      	ldr	r3, [pc, #140]	; (d044 <SwTimersExecute+0xd8>)
    cfb6:	469a      	mov	sl, r3
        /* Expired timer if any will be processed here */
        while (SWTIMER_INVALID != expiredTimerQueueHead)
        {
            flags = cpu_irq_save();

            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    cfb8:	4c24      	ldr	r4, [pc, #144]	; (d04c <SwTimersExecute+0xe0>)
    cfba:	4b25      	ldr	r3, [pc, #148]	; (d050 <SwTimersExecute+0xe4>)
    cfbc:	4699      	mov	r9, r3
    cfbe:	2200      	movs	r2, #0

            /*
            * The expired timer's structure elements are updated
            * and the timer is taken out of expired timer queue
            */
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    cfc0:	20ff      	movs	r0, #255	; 0xff
            */
            expiredTimerQueueHead = nextExpiredTimer;

            if (SWTIMER_INVALID == expiredTimerQueueHead)
            {
                expiredTimerQueueTail = SWTIMER_INVALID;
    cfc2:	4b24      	ldr	r3, [pc, #144]	; (d054 <SwTimersExecute+0xe8>)
    cfc4:	4698      	mov	r8, r3
		cpu_irq_enable();
    cfc6:	4b1f      	ldr	r3, [pc, #124]	; (d044 <SwTimersExecute+0xd8>)
    cfc8:	469c      	mov	ip, r3
    cfca:	e004      	b.n	cfd6 <SwTimersExecute+0x6a>
    cfcc:	4643      	mov	r3, r8
    cfce:	6018      	str	r0, [r3, #0]
    cfd0:	e01e      	b.n	d010 <SwTimersExecute+0xa4>
            }

            cpu_irq_restore(flags);

            if (NULL != callback)
    cfd2:	2e00      	cmp	r6, #0
    cfd4:	d125      	bne.n	d022 <SwTimersExecute+0xb6>
        while (SWTIMER_INVALID != expiredTimerQueueHead)
    cfd6:	4b1d      	ldr	r3, [pc, #116]	; (d04c <SwTimersExecute+0xe0>)
    cfd8:	681b      	ldr	r3, [r3, #0]
    cfda:	2bff      	cmp	r3, #255	; 0xff
    cfdc:	d024      	beq.n	d028 <SwTimersExecute+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    cfde:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    cfe2:	424b      	negs	r3, r1
    cfe4:	414b      	adcs	r3, r1
    cfe6:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    cfe8:	b672      	cpsid	i
    cfea:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    cfee:	4653      	mov	r3, sl
    cff0:	701a      	strb	r2, [r3, #0]
	return flags;
    cff2:	9f01      	ldr	r7, [sp, #4]
            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    cff4:	6823      	ldr	r3, [r4, #0]
    cff6:	011b      	lsls	r3, r3, #4
    cff8:	444b      	add	r3, r9
    cffa:	7b19      	ldrb	r1, [r3, #12]
            callback = (SwTimerCallbackFunc_t)swTimers[expiredTimerQueueHead].timerCb;
    cffc:	685e      	ldr	r6, [r3, #4]
            cbParam = swTimers[expiredTimerQueueHead].paramCb;
    cffe:	689d      	ldr	r5, [r3, #8]
    d000:	46ab      	mov	fp, r5
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    d002:	7318      	strb	r0, [r3, #12]
            swTimers[expiredTimerQueueHead].timerCb = NULL;
    d004:	605a      	str	r2, [r3, #4]
            swTimers[expiredTimerQueueHead].paramCb = NULL;
    d006:	609a      	str	r2, [r3, #8]
            swTimers[expiredTimerQueueHead].loaded = false;
    d008:	735a      	strb	r2, [r3, #13]
            expiredTimerQueueHead = nextExpiredTimer;
    d00a:	6021      	str	r1, [r4, #0]
            if (SWTIMER_INVALID == expiredTimerQueueHead)
    d00c:	29ff      	cmp	r1, #255	; 0xff
    d00e:	d0dd      	beq.n	cfcc <SwTimersExecute+0x60>
	if (cpu_irq_is_enabled_flags(flags))
    d010:	4238      	tst	r0, r7
    d012:	d0de      	beq.n	cfd2 <SwTimersExecute+0x66>
		cpu_irq_enable();
    d014:	2301      	movs	r3, #1
    d016:	4661      	mov	r1, ip
    d018:	700b      	strb	r3, [r1, #0]
    d01a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d01e:	b662      	cpsie	i
    d020:	e7d7      	b.n	cfd2 <SwTimersExecute+0x66>
            {
                /* Callback function is called */
                callback(cbParam);
    d022:	4658      	mov	r0, fp
    d024:	47b0      	blx	r6
    d026:	e7ca      	b.n	cfbe <SwTimersExecute+0x52>
                (void)now;
            }
        }
    }
}
    d028:	b003      	add	sp, #12
    d02a:	bc3c      	pop	{r2, r3, r4, r5}
    d02c:	4690      	mov	r8, r2
    d02e:	4699      	mov	r9, r3
    d030:	46a2      	mov	sl, r4
    d032:	46ab      	mov	fp, r5
    d034:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d036:	46c0      	nop			; (mov r8, r8)
    d038:	20002cf0 	.word	0x20002cf0
    d03c:	20002cec 	.word	0x20002cec
    d040:	000121b9 	.word	0x000121b9
    d044:	20000014 	.word	0x20000014
    d048:	0000cbe1 	.word	0x0000cbe1
    d04c:	2000202c 	.word	0x2000202c
    d050:	20002b5c 	.word	0x20002b5c
    d054:	20002030 	.word	0x20002030

0000d058 <TIMER_TaskHandler>:
{
    d058:	b510      	push	{r4, lr}
    SwTimersExecute();
    d05a:	4b02      	ldr	r3, [pc, #8]	; (d064 <TIMER_TaskHandler+0xc>)
    d05c:	4798      	blx	r3
}
    d05e:	2000      	movs	r0, #0
    d060:	bd10      	pop	{r4, pc}
    d062:	46c0      	nop			; (mov r8, r8)
    d064:	0000cf6d 	.word	0x0000cf6d

0000d068 <SwTimerStop>:
        LORAWAN_INVALID_PARAMETER if timerId is not valid
        LORAWAN_INVALID_REQUEST if timerId was not started before
        LORAWAN_SUCCESS if it is successfully stopped
******************************************************************************/
StackRetStatus_t SwTimerStop(uint8_t timerId)
{
    d068:	b570      	push	{r4, r5, r6, lr}
    d06a:	b082      	sub	sp, #8
    d06c:	0004      	movs	r4, r0
    uint8_t prevIndex;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    d06e:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    d070:	2c18      	cmp	r4, #24
    d072:	d901      	bls.n	d078 <SwTimerStop+0x10>
        return LORAWAN_SUCCESS;
    }

    SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
    return LORAWAN_INVALID_REQUEST;
}
    d074:	b002      	add	sp, #8
    d076:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    d078:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d07c:	425a      	negs	r2, r3
    d07e:	4153      	adcs	r3, r2
    d080:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    d082:	b672      	cpsid	i
    d084:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d088:	2200      	movs	r2, #0
    d08a:	4b47      	ldr	r3, [pc, #284]	; (d1a8 <SwTimerStop+0x140>)
    d08c:	701a      	strb	r2, [r3, #0]
	return flags;
    d08e:	9d01      	ldr	r5, [sp, #4]
    swtimerInternalHandler();
    d090:	4b46      	ldr	r3, [pc, #280]	; (d1ac <SwTimerStop+0x144>)
    d092:	4798      	blx	r3
    if (runningTimers > 0)
    d094:	4b46      	ldr	r3, [pc, #280]	; (d1b0 <SwTimerStop+0x148>)
    d096:	781b      	ldrb	r3, [r3, #0]
    d098:	2b00      	cmp	r3, #0
    d09a:	d040      	beq.n	d11e <SwTimerStop+0xb6>
        uint8_t timer_count = runningTimers;
    d09c:	4b44      	ldr	r3, [pc, #272]	; (d1b0 <SwTimerStop+0x148>)
    d09e:	781b      	ldrb	r3, [r3, #0]
    d0a0:	b2db      	uxtb	r3, r3
        prevIndex = currIndex = runningTimerQueueHead;
    d0a2:	4a44      	ldr	r2, [pc, #272]	; (d1b4 <SwTimerStop+0x14c>)
    d0a4:	6816      	ldr	r6, [r2, #0]
    d0a6:	b2f1      	uxtb	r1, r6
        while (timer_count > 0)
    d0a8:	2b00      	cmp	r3, #0
    d0aa:	d038      	beq.n	d11e <SwTimerStop+0xb6>
            if (timerId == currIndex)
    d0ac:	428c      	cmp	r4, r1
    d0ae:	d00b      	beq.n	d0c8 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    d0b0:	4841      	ldr	r0, [pc, #260]	; (d1b8 <SwTimerStop+0x150>)
    d0b2:	010a      	lsls	r2, r1, #4
    d0b4:	1882      	adds	r2, r0, r2
    d0b6:	7b12      	ldrb	r2, [r2, #12]
            timer_count--;
    d0b8:	3b01      	subs	r3, #1
    d0ba:	b2db      	uxtb	r3, r3
        while (timer_count > 0)
    d0bc:	2b00      	cmp	r3, #0
    d0be:	d02e      	beq.n	d11e <SwTimerStop+0xb6>
            if (timerId == currIndex)
    d0c0:	4294      	cmp	r4, r2
    d0c2:	d001      	beq.n	d0c8 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    d0c4:	0011      	movs	r1, r2
    d0c6:	e7f4      	b.n	d0b2 <SwTimerStop+0x4a>
                if (timerId == runningTimerQueueHead)
    d0c8:	42a6      	cmp	r6, r4
    d0ca:	d01d      	beq.n	d108 <SwTimerStop+0xa0>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    d0cc:	4b3a      	ldr	r3, [pc, #232]	; (d1b8 <SwTimerStop+0x150>)
    d0ce:	0122      	lsls	r2, r4, #4
    d0d0:	189a      	adds	r2, r3, r2
    d0d2:	7b12      	ldrb	r2, [r2, #12]
    d0d4:	0109      	lsls	r1, r1, #4
    d0d6:	1859      	adds	r1, r3, r1
    d0d8:	730a      	strb	r2, [r1, #12]
                swTimers[timerId].nextTimer  = SWTIMER_INVALID;
    d0da:	0122      	lsls	r2, r4, #4
    d0dc:	4b36      	ldr	r3, [pc, #216]	; (d1b8 <SwTimerStop+0x150>)
    d0de:	189b      	adds	r3, r3, r2
    d0e0:	22ff      	movs	r2, #255	; 0xff
    d0e2:	731a      	strb	r2, [r3, #12]
            runningTimers--;
    d0e4:	4a32      	ldr	r2, [pc, #200]	; (d1b0 <SwTimerStop+0x148>)
    d0e6:	7813      	ldrb	r3, [r2, #0]
    d0e8:	3b01      	subs	r3, #1
    d0ea:	b2db      	uxtb	r3, r3
    d0ec:	7013      	strb	r3, [r2, #0]
        swTimers[timerId].timerCb = NULL;
    d0ee:	0124      	lsls	r4, r4, #4
    d0f0:	4b31      	ldr	r3, [pc, #196]	; (d1b8 <SwTimerStop+0x150>)
    d0f2:	191c      	adds	r4, r3, r4
    d0f4:	2300      	movs	r3, #0
    d0f6:	6063      	str	r3, [r4, #4]
        swTimers[timerId].paramCb = NULL;
    d0f8:	60a3      	str	r3, [r4, #8]
        swTimers[timerId].loaded = false;
    d0fa:	7363      	strb	r3, [r4, #13]
	if (cpu_irq_is_enabled_flags(flags))
    d0fc:	33ff      	adds	r3, #255	; 0xff
        return LORAWAN_SUCCESS;
    d0fe:	2008      	movs	r0, #8
    d100:	422b      	tst	r3, r5
    d102:	d0b7      	beq.n	d074 <SwTimerStop+0xc>
    d104:	2301      	movs	r3, #1
    d106:	e040      	b.n	d18a <SwTimerStop+0x122>
                    common_tc_compare_stop();
    d108:	4b2c      	ldr	r3, [pc, #176]	; (d1bc <SwTimerStop+0x154>)
    d10a:	4798      	blx	r3
                    runningTimerQueueHead = swTimers[timerId].nextTimer;
    d10c:	0122      	lsls	r2, r4, #4
    d10e:	4b2a      	ldr	r3, [pc, #168]	; (d1b8 <SwTimerStop+0x150>)
    d110:	189b      	adds	r3, r3, r2
    d112:	7b18      	ldrb	r0, [r3, #12]
    d114:	4b27      	ldr	r3, [pc, #156]	; (d1b4 <SwTimerStop+0x14c>)
    d116:	6018      	str	r0, [r3, #0]
                    loadHwTimer(runningTimerQueueHead);
    d118:	4b29      	ldr	r3, [pc, #164]	; (d1c0 <SwTimerStop+0x158>)
    d11a:	4798      	blx	r3
    d11c:	e7dd      	b.n	d0da <SwTimerStop+0x72>
        prevIndex = currIndex = expiredTimerQueueHead;
    d11e:	4b29      	ldr	r3, [pc, #164]	; (d1c4 <SwTimerStop+0x15c>)
    d120:	6818      	ldr	r0, [r3, #0]
    d122:	b2c2      	uxtb	r2, r0
        while (SWTIMER_INVALID != currIndex)
    d124:	2aff      	cmp	r2, #255	; 0xff
    d126:	d02c      	beq.n	d182 <SwTimerStop+0x11a>
            if (timerId == currIndex)
    d128:	4294      	cmp	r4, r2
    d12a:	d009      	beq.n	d140 <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    d12c:	4922      	ldr	r1, [pc, #136]	; (d1b8 <SwTimerStop+0x150>)
    d12e:	0113      	lsls	r3, r2, #4
    d130:	18cb      	adds	r3, r1, r3
    d132:	7b1b      	ldrb	r3, [r3, #12]
        while (SWTIMER_INVALID != currIndex)
    d134:	2bff      	cmp	r3, #255	; 0xff
    d136:	d024      	beq.n	d182 <SwTimerStop+0x11a>
            if (timerId == currIndex)
    d138:	429c      	cmp	r4, r3
    d13a:	d001      	beq.n	d140 <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    d13c:	001a      	movs	r2, r3
    d13e:	e7f6      	b.n	d12e <SwTimerStop+0xc6>
                if (timerId == expiredTimerQueueHead)
    d140:	42a0      	cmp	r0, r4
    d142:	d00d      	beq.n	d160 <SwTimerStop+0xf8>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    d144:	4b1c      	ldr	r3, [pc, #112]	; (d1b8 <SwTimerStop+0x150>)
    d146:	0121      	lsls	r1, r4, #4
    d148:	1859      	adds	r1, r3, r1
    d14a:	7b09      	ldrb	r1, [r1, #12]
    d14c:	0110      	lsls	r0, r2, #4
    d14e:	181b      	adds	r3, r3, r0
    d150:	7319      	strb	r1, [r3, #12]
                    if (timerId == expiredTimerQueueTail)
    d152:	4b1d      	ldr	r3, [pc, #116]	; (d1c8 <SwTimerStop+0x160>)
    d154:	681b      	ldr	r3, [r3, #0]
    d156:	429c      	cmp	r4, r3
    d158:	d1c9      	bne.n	d0ee <SwTimerStop+0x86>
                        expiredTimerQueueTail = prevIndex;
    d15a:	4b1b      	ldr	r3, [pc, #108]	; (d1c8 <SwTimerStop+0x160>)
    d15c:	601a      	str	r2, [r3, #0]
    d15e:	e7c6      	b.n	d0ee <SwTimerStop+0x86>
                    if (expiredTimerQueueHead == expiredTimerQueueTail)
    d160:	4b19      	ldr	r3, [pc, #100]	; (d1c8 <SwTimerStop+0x160>)
    d162:	681b      	ldr	r3, [r3, #0]
    d164:	4298      	cmp	r0, r3
    d166:	d006      	beq.n	d176 <SwTimerStop+0x10e>
                        expiredTimerQueueHead = swTimers[expiredTimerQueueHead].nextTimer;
    d168:	0100      	lsls	r0, r0, #4
    d16a:	4b13      	ldr	r3, [pc, #76]	; (d1b8 <SwTimerStop+0x150>)
    d16c:	1818      	adds	r0, r3, r0
    d16e:	7b02      	ldrb	r2, [r0, #12]
    d170:	4b14      	ldr	r3, [pc, #80]	; (d1c4 <SwTimerStop+0x15c>)
    d172:	601a      	str	r2, [r3, #0]
    d174:	e7bb      	b.n	d0ee <SwTimerStop+0x86>
                        expiredTimerQueueHead = expiredTimerQueueTail = SWTIMER_INVALID;
    d176:	23ff      	movs	r3, #255	; 0xff
    d178:	4a13      	ldr	r2, [pc, #76]	; (d1c8 <SwTimerStop+0x160>)
    d17a:	6013      	str	r3, [r2, #0]
    d17c:	4a11      	ldr	r2, [pc, #68]	; (d1c4 <SwTimerStop+0x15c>)
    d17e:	6013      	str	r3, [r2, #0]
    d180:	e7b5      	b.n	d0ee <SwTimerStop+0x86>
    d182:	23ff      	movs	r3, #255	; 0xff
    d184:	422b      	tst	r3, r5
    d186:	d00a      	beq.n	d19e <SwTimerStop+0x136>
    d188:	2300      	movs	r3, #0
		cpu_irq_enable();
    d18a:	2101      	movs	r1, #1
    d18c:	4a06      	ldr	r2, [pc, #24]	; (d1a8 <SwTimerStop+0x140>)
    d18e:	7011      	strb	r1, [r2, #0]
    d190:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d194:	b662      	cpsie	i
    if (timerStopReqStatus)
    d196:	2b00      	cmp	r3, #0
    d198:	d103      	bne.n	d1a2 <SwTimerStop+0x13a>
    return LORAWAN_INVALID_REQUEST;
    d19a:	2015      	movs	r0, #21
    d19c:	e76a      	b.n	d074 <SwTimerStop+0xc>
    d19e:	2015      	movs	r0, #21
    d1a0:	e768      	b.n	d074 <SwTimerStop+0xc>
        return LORAWAN_SUCCESS;
    d1a2:	2008      	movs	r0, #8
    d1a4:	e766      	b.n	d074 <SwTimerStop+0xc>
    d1a6:	46c0      	nop			; (mov r8, r8)
    d1a8:	20000014 	.word	0x20000014
    d1ac:	0000cbe1 	.word	0x0000cbe1
    d1b0:	20002038 	.word	0x20002038
    d1b4:	20002034 	.word	0x20002034
    d1b8:	20002b5c 	.word	0x20002b5c
    d1bc:	00012205 	.word	0x00012205
    d1c0:	0000cb49 	.word	0x0000cb49
    d1c4:	2000202c 	.word	0x2000202c
    d1c8:	20002030 	.word	0x20002030

0000d1cc <SwTimerRunRemainingTime>:
{
    d1cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    d1ce:	b083      	sub	sp, #12
    d1d0:	0005      	movs	r5, r0
    void * timerCb = (void*)(swTimers[runningTimerQueueHead].timerCb);
    d1d2:	4b0b      	ldr	r3, [pc, #44]	; (d200 <SwTimerRunRemainingTime+0x34>)
    d1d4:	681c      	ldr	r4, [r3, #0]
    d1d6:	0122      	lsls	r2, r4, #4
    d1d8:	4b0a      	ldr	r3, [pc, #40]	; (d204 <SwTimerRunRemainingTime+0x38>)
    d1da:	189b      	adds	r3, r3, r2
    d1dc:	685e      	ldr	r6, [r3, #4]
    void *paramCb = swTimers[runningTimerQueueHead].paramCb;
    d1de:	689f      	ldr	r7, [r3, #8]
    uint8_t timerId = runningTimerQueueHead;
    d1e0:	b2e4      	uxtb	r4, r4
    if (LORAWAN_SUCCESS == SwTimerStop(runningTimerQueueHead))
    d1e2:	0020      	movs	r0, r4
    d1e4:	4b08      	ldr	r3, [pc, #32]	; (d208 <SwTimerRunRemainingTime+0x3c>)
    d1e6:	4798      	blx	r3
    d1e8:	2808      	cmp	r0, #8
    d1ea:	d001      	beq.n	d1f0 <SwTimerRunRemainingTime+0x24>
}
    d1ec:	b003      	add	sp, #12
    d1ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        SwTimerStart(timerId, offset, SW_TIMEOUT_RELATIVE, timerCb, paramCb);
    d1f0:	9700      	str	r7, [sp, #0]
    d1f2:	0033      	movs	r3, r6
    d1f4:	2200      	movs	r2, #0
    d1f6:	0029      	movs	r1, r5
    d1f8:	0020      	movs	r0, r4
    d1fa:	4c04      	ldr	r4, [pc, #16]	; (d20c <SwTimerRunRemainingTime+0x40>)
    d1fc:	47a0      	blx	r4
}
    d1fe:	e7f5      	b.n	d1ec <SwTimerRunRemainingTime+0x20>
    d200:	20002034 	.word	0x20002034
    d204:	20002b5c 	.word	0x20002b5c
    d208:	0000d069 	.word	0x0000d069
    d20c:	0000cd65 	.word	0x0000cd65

0000d210 <SystemTimerSync>:
/**************************************************************************//**
\brief Resumes the software timer by offseting it with given time
\param[in] timeToSync Amount of duration to offset from known system time
******************************************************************************/
void SystemTimerSync(uint64_t timeToSync)
{
    d210:	b570      	push	{r4, r5, r6, lr}
    uint8_t timerId;
    uint16_t adjustOffset;

    sysTimeLastKnown += timeToSync;
    d212:	4b22      	ldr	r3, [pc, #136]	; (d29c <SystemTimerSync+0x8c>)
    d214:	681c      	ldr	r4, [r3, #0]
    d216:	685d      	ldr	r5, [r3, #4]
    d218:	1900      	adds	r0, r0, r4
    d21a:	4169      	adcs	r1, r5
    d21c:	6018      	str	r0, [r3, #0]
    d21e:	6059      	str	r1, [r3, #4]

    /* 1. Update system time */
    sysTimeOvf = (uint32_t) (sysTimeLastKnown >> 32);
    d220:	4b1f      	ldr	r3, [pc, #124]	; (d2a0 <SystemTimerSync+0x90>)
    d222:	6019      	str	r1, [r3, #0]
    sysTime = (uint16_t) ((sysTimeLastKnown >> SWTIMER_SYSTIME_SHIFTMASK) & 0xffff);
    d224:	0c02      	lsrs	r2, r0, #16
    d226:	4b1f      	ldr	r3, [pc, #124]	; (d2a4 <SystemTimerSync+0x94>)
    d228:	801a      	strh	r2, [r3, #0]

    /* 2. Adjust expiration of running timers */
    adjustOffset = (uint16_t) sysTimeLastKnown;
    d22a:	b280      	uxth	r0, r0
    timerId = runningTimerQueueHead;
    d22c:	4b1e      	ldr	r3, [pc, #120]	; (d2a8 <SystemTimerSync+0x98>)
    d22e:	781b      	ldrb	r3, [r3, #0]
    for (uint8_t index = 0; index < runningTimers; index++)
    d230:	4a1e      	ldr	r2, [pc, #120]	; (d2ac <SystemTimerSync+0x9c>)
    d232:	7812      	ldrb	r2, [r2, #0]
    d234:	2a00      	cmp	r2, #0
    d236:	d012      	beq.n	d25e <SystemTimerSync+0x4e>
    d238:	2200      	movs	r2, #0
    {
        if (SWTIMER_INVALID != timerId)
        {
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    d23a:	4c1d      	ldr	r4, [pc, #116]	; (d2b0 <SystemTimerSync+0xa0>)
    for (uint8_t index = 0; index < runningTimers; index++)
    d23c:	4d1b      	ldr	r5, [pc, #108]	; (d2ac <SystemTimerSync+0x9c>)
    d23e:	e005      	b.n	d24c <SystemTimerSync+0x3c>
    d240:	3201      	adds	r2, #1
    d242:	b2d2      	uxtb	r2, r2
    d244:	7829      	ldrb	r1, [r5, #0]
    d246:	b2c9      	uxtb	r1, r1
    d248:	4291      	cmp	r1, r2
    d24a:	d908      	bls.n	d25e <SystemTimerSync+0x4e>
        if (SWTIMER_INVALID != timerId)
    d24c:	2bff      	cmp	r3, #255	; 0xff
    d24e:	d0f7      	beq.n	d240 <SystemTimerSync+0x30>
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    d250:	011b      	lsls	r3, r3, #4
    d252:	5919      	ldr	r1, [r3, r4]
    d254:	1a09      	subs	r1, r1, r0
    d256:	5119      	str	r1, [r3, r4]
            timerId = swTimers[timerId].nextTimer;
    d258:	18e3      	adds	r3, r4, r3
    d25a:	7b1b      	ldrb	r3, [r3, #12]
    d25c:	e7f0      	b.n	d240 <SystemTimerSync+0x30>
        }
    }

    /* 3. Start hardware timer */
    common_tc_init();
    d25e:	4b15      	ldr	r3, [pc, #84]	; (d2b4 <SystemTimerSync+0xa4>)
    d260:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    d262:	4815      	ldr	r0, [pc, #84]	; (d2b8 <SystemTimerSync+0xa8>)
    d264:	4b15      	ldr	r3, [pc, #84]	; (d2bc <SystemTimerSync+0xac>)
    d266:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    d268:	4815      	ldr	r0, [pc, #84]	; (d2c0 <SystemTimerSync+0xb0>)
    d26a:	4b16      	ldr	r3, [pc, #88]	; (d2c4 <SystemTimerSync+0xb4>)
    d26c:	4798      	blx	r3

    /* 4. Resume timer queue operations */
    if (runningTimers && (SWTIMER_INVALID != runningTimerQueueHead))
    d26e:	4b0f      	ldr	r3, [pc, #60]	; (d2ac <SystemTimerSync+0x9c>)
    d270:	781b      	ldrb	r3, [r3, #0]
    d272:	2b00      	cmp	r3, #0
    d274:	d009      	beq.n	d28a <SystemTimerSync+0x7a>
    d276:	4b0c      	ldr	r3, [pc, #48]	; (d2a8 <SystemTimerSync+0x98>)
    d278:	681b      	ldr	r3, [r3, #0]
    d27a:	2bff      	cmp	r3, #255	; 0xff
    d27c:	d005      	beq.n	d28a <SystemTimerSync+0x7a>
    {
        uint32_t remainingTime = SwTimerNextExpiryDuration();
    d27e:	4b12      	ldr	r3, [pc, #72]	; (d2c8 <SystemTimerSync+0xb8>)
    d280:	4798      	blx	r3

        if (SWTIMER_MIN_TIMEOUT > remainingTime)
    d282:	28fe      	cmp	r0, #254	; 0xfe
    d284:	d902      	bls.n	d28c <SystemTimerSync+0x7c>
        else
        {
            /*
            * There is some time left in head timer, so restart it.
            */
            SwTimerRunRemainingTime(remainingTime);
    d286:	4b11      	ldr	r3, [pc, #68]	; (d2cc <SystemTimerSync+0xbc>)
    d288:	4798      	blx	r3
        }
    }
}
    d28a:	bd70      	pop	{r4, r5, r6, pc}
            isTimerTriggered = true;
    d28c:	2201      	movs	r2, #1
    d28e:	4b10      	ldr	r3, [pc, #64]	; (d2d0 <SystemTimerSync+0xc0>)
    d290:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    d292:	2001      	movs	r0, #1
    d294:	4b0f      	ldr	r3, [pc, #60]	; (d2d4 <SystemTimerSync+0xc4>)
    d296:	4798      	blx	r3
    d298:	e7f7      	b.n	d28a <SystemTimerSync+0x7a>
    d29a:	46c0      	nop			; (mov r8, r8)
    d29c:	20002040 	.word	0x20002040
    d2a0:	20002cf0 	.word	0x20002cf0
    d2a4:	20002cec 	.word	0x20002cec
    d2a8:	20002034 	.word	0x20002034
    d2ac:	20002038 	.word	0x20002038
    d2b0:	20002b5c 	.word	0x20002b5c
    d2b4:	00012299 	.word	0x00012299
    d2b8:	0000ca89 	.word	0x0000ca89
    d2bc:	0001231d 	.word	0x0001231d
    d2c0:	0000ca61 	.word	0x0000ca61
    d2c4:	00012329 	.word	0x00012329
    d2c8:	0000cf4d 	.word	0x0000cf4d
    d2cc:	0000d1cd 	.word	0x0000d1cd
    d2d0:	20002cee 	.word	0x20002cee
    d2d4:	0000d355 	.word	0x0000d355

0000d2d8 <Stack_Init>:
/**************************************************************************//**
\brief Initializes the system. This is the first stack function to be called
       by the application in the main() function.
******************************************************************************/
void Stack_Init(void)
{
    d2d8:	b510      	push	{r4, lr}
	
	/* LORAWAN_Init() should have been called form here, 
	   but parser application has a round-about way to call it now */
 
	/* Post application task to initiate the execution from there */
	SYSTEM_PostTask(APP_TASK_ID);
    d2da:	2010      	movs	r0, #16
    d2dc:	4b01      	ldr	r3, [pc, #4]	; (d2e4 <Stack_Init+0xc>)
    d2de:	4798      	blx	r3
}
    d2e0:	bd10      	pop	{r4, pc}
    d2e2:	46c0      	nop			; (mov r8, r8)
    d2e4:	0000d355 	.word	0x0000d355

0000d2e8 <SYSTEM_RunTasks>:
/************************************************************************/
/*********************************************************************//**
\brief System tasks execution entry point
*************************************************************************/
void SYSTEM_RunTasks(void)
{
    d2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((1 << SYSTEM_TASK_ID_COUNT) > sysTaskFlag)
    d2ea:	4b16      	ldr	r3, [pc, #88]	; (d344 <SYSTEM_RunTasks+0x5c>)
    d2ec:	881b      	ldrh	r3, [r3, #0]
    d2ee:	b29b      	uxth	r3, r3
    d2f0:	2b1f      	cmp	r3, #31
    d2f2:	d922      	bls.n	d33a <SYSTEM_RunTasks+0x52>
    d2f4:	e7fe      	b.n	d2f4 <SYSTEM_RunTasks+0xc>
    { /* Only valid task bits are set */
        while (sysTaskFlag)
        { /* One or more task are pending to execute */
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
            {
                if ((1 << taskId) & sysTaskFlag)
    d2f6:	2500      	movs	r5, #0
                    /*
                    * Reset the task bit since it is to be executed now.
                    * It is done inside atomic section to avoid any interrupt context
                    * corrupting the bits.
                    */
                    ATOMIC_SECTION_ENTER
    d2f8:	4b13      	ldr	r3, [pc, #76]	; (d348 <SYSTEM_RunTasks+0x60>)
    d2fa:	4798      	blx	r3
                    sysTaskFlag &= ~(1 << taskId);
    d2fc:	4911      	ldr	r1, [pc, #68]	; (d344 <SYSTEM_RunTasks+0x5c>)
    d2fe:	880b      	ldrh	r3, [r1, #0]
    d300:	2201      	movs	r2, #1
    d302:	40aa      	lsls	r2, r5
    d304:	4393      	bics	r3, r2
    d306:	800b      	strh	r3, [r1, #0]
                    ATOMIC_SECTION_EXIT
    d308:	4b10      	ldr	r3, [pc, #64]	; (d34c <SYSTEM_RunTasks+0x64>)
    d30a:	4798      	blx	r3

                    /* Return value is not used now, can be used later */
                    taskHandlers[taskId]();
    d30c:	00ad      	lsls	r5, r5, #2
    d30e:	4b10      	ldr	r3, [pc, #64]	; (d350 <SYSTEM_RunTasks+0x68>)
    d310:	58eb      	ldr	r3, [r5, r3]
    d312:	4798      	blx	r3
                if ((1 << taskId) & sysTaskFlag)
    d314:	2101      	movs	r1, #1
        while (sysTaskFlag)
    d316:	883b      	ldrh	r3, [r7, #0]
    d318:	b29b      	uxth	r3, r3
    d31a:	2b00      	cmp	r3, #0
    d31c:	d011      	beq.n	d342 <SYSTEM_RunTasks+0x5a>
                if ((1 << taskId) & sysTaskFlag)
    d31e:	8823      	ldrh	r3, [r4, #0]
    d320:	420b      	tst	r3, r1
    d322:	d1e8      	bne.n	d2f6 <SYSTEM_RunTasks+0xe>
    d324:	2201      	movs	r2, #1
    d326:	8833      	ldrh	r3, [r6, #0]
    d328:	b29b      	uxth	r3, r3
    d32a:	0015      	movs	r5, r2
    d32c:	4113      	asrs	r3, r2
    d32e:	4219      	tst	r1, r3
    d330:	d1e2      	bne.n	d2f8 <SYSTEM_RunTasks+0x10>
    d332:	3201      	adds	r2, #1
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
    d334:	2a05      	cmp	r2, #5
    d336:	d1f6      	bne.n	d326 <SYSTEM_RunTasks+0x3e>
    d338:	e7ed      	b.n	d316 <SYSTEM_RunTasks+0x2e>
        while (sysTaskFlag)
    d33a:	4f02      	ldr	r7, [pc, #8]	; (d344 <SYSTEM_RunTasks+0x5c>)
                if ((1 << taskId) & sysTaskFlag)
    d33c:	003c      	movs	r4, r7
    d33e:	003e      	movs	r6, r7
    d340:	e7e8      	b.n	d314 <SYSTEM_RunTasks+0x2c>
        * Can happen only due to corruption, so halt
        * TODO : replace this with assert implementation
        */
        while(1);
    }
}
    d342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d344:	20002048 	.word	0x20002048
    d348:	0000c85d 	.word	0x0000c85d
    d34c:	0000c869 	.word	0x0000c869
    d350:	00017b2c 	.word	0x00017b2c

0000d354 <SYSTEM_PostTask>:

\param[in] task - ID of the posted task.
*************************************************************************/

void SYSTEM_PostTask(SYSTEM_Task_t task)
{
    d354:	b510      	push	{r4, lr}
    d356:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    d358:	4b04      	ldr	r3, [pc, #16]	; (d36c <SYSTEM_PostTask+0x18>)
    d35a:	4798      	blx	r3
    sysTaskFlag |= task;
    d35c:	4b04      	ldr	r3, [pc, #16]	; (d370 <SYSTEM_PostTask+0x1c>)
    d35e:	8818      	ldrh	r0, [r3, #0]
    d360:	4320      	orrs	r0, r4
    d362:	8018      	strh	r0, [r3, #0]
    ATOMIC_SECTION_EXIT
    d364:	4b03      	ldr	r3, [pc, #12]	; (d374 <SYSTEM_PostTask+0x20>)
    d366:	4798      	blx	r3
}
    d368:	bd10      	pop	{r4, pc}
    d36a:	46c0      	nop			; (mov r8, r8)
    d36c:	0000c85d 	.word	0x0000c85d
    d370:	20002048 	.word	0x20002048
    d374:	0000c869 	.word	0x0000c869

0000d378 <Radio_WriteMode>:
\param newModulation	- Sets the modulation.
\param blocking			- Sets if its blocking call or not.
\return					- none.
*************************************************************************/
void Radio_WriteMode(RadioMode_t newMode, RadioModulation_t newModulation, uint8_t blocking)
{
    d378:	b5f0      	push	{r4, r5, r6, r7, lr}
    d37a:	46d6      	mov	lr, sl
    d37c:	464f      	mov	r7, r9
    d37e:	b580      	push	{r7, lr}
    d380:	b083      	sub	sp, #12
    d382:	9201      	str	r2, [sp, #4]
    uint8_t opMode;
    uint8_t dioMapping;
    RadioModulation_t currentModulation;
    RadioMode_t currentMode;

    if ((MODULATION_FSK == newModulation) &&
    d384:	2900      	cmp	r1, #0
    d386:	d102      	bne.n	d38e <Radio_WriteMode+0x16>
    d388:	1f83      	subs	r3, r0, #6
    d38a:	2b01      	cmp	r3, #1
    d38c:	d92a      	bls.n	d3e4 <Radio_WriteMode+0x6c>
        // Unavailable modes for FSK. Just return.
        return;
    }

    // Sanity enforcement on parameters
    newMode &= 0x07;
    d38e:	2307      	movs	r3, #7
    d390:	4699      	mov	r9, r3
    d392:	001c      	movs	r4, r3
    d394:	4004      	ands	r4, r0
    newModulation &= 0x01;
    d396:	2601      	movs	r6, #1
    d398:	400e      	ands	r6, r1

    opMode = RADIO_RegisterRead(REG_OPMODE);
    d39a:	2001      	movs	r0, #1
    d39c:	4b2b      	ldr	r3, [pc, #172]	; (d44c <Radio_WriteMode+0xd4>)
    d39e:	4798      	blx	r3
    d3a0:	0005      	movs	r5, r0
    d3a2:	0007      	movs	r7, r0

    if ((opMode & 0x80) != 0)
    d3a4:	b243      	sxtb	r3, r0
    d3a6:	469a      	mov	sl, r3
    else
    {
        currentModulation = MODULATION_FSK;
    }

    currentMode = opMode & 0x07;
    d3a8:	464b      	mov	r3, r9
    d3aa:	4003      	ands	r3, r0

    // If we need to change modulation, we need to do this in sleep mode.
    // Otherwise, we can go straight to changing the current mode to newMode.
    if (newModulation != currentModulation)
    d3ac:	4652      	mov	r2, sl
    d3ae:	0fd2      	lsrs	r2, r2, #31
    d3b0:	4296      	cmp	r6, r2
    d3b2:	d00a      	beq.n	d3ca <Radio_WriteMode+0x52>
    {
        // Go to sleep
        if (MODE_SLEEP != currentMode)
    d3b4:	2b00      	cmp	r3, #0
    d3b6:	d11a      	bne.n	d3ee <Radio_WriteMode+0x76>
            // Clear mode bits, effectively going to sleep
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
            currentMode = MODE_SLEEP;
        }
        // Change modulation
        if (MODULATION_FSK == newModulation)
    d3b8:	2e00      	cmp	r6, #0
    d3ba:	d11e      	bne.n	d3fa <Radio_WriteMode+0x82>
        {
            // Clear MSB and sleep bits to make it stay in sleep
            opMode = opMode & (~0x87);
    d3bc:	2778      	movs	r7, #120	; 0x78
    d3be:	402f      	ands	r7, r5
        else
        {
            // LoRa mode. Set MSB and clear sleep bits to make it stay in sleep
            opMode = 0x80 | (opMode & (~0x87));
        }
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    d3c0:	0039      	movs	r1, r7
    d3c2:	2001      	movs	r0, #1
    d3c4:	4b22      	ldr	r3, [pc, #136]	; (d450 <Radio_WriteMode+0xd8>)
    d3c6:	4798      	blx	r3
    d3c8:	2300      	movs	r3, #0

    // From here on currentModulation is no longer current, we will use
    // newModulation instead as it reflects the chip configuration.
    // opMode reflects the actual configuration of the chip.

    if (newMode != currentMode)
    d3ca:	42a3      	cmp	r3, r4
    d3cc:	d00a      	beq.n	d3e4 <Radio_WriteMode+0x6c>
    {
        // If we need to block until the mode switch is ready, configure the
        // DIO5 pin to relay this information.
        if ((MODE_SLEEP != newMode) && (1 == blocking))
    d3ce:	2c00      	cmp	r4, #0
    d3d0:	d030      	beq.n	d434 <Radio_WriteMode+0xbc>
    d3d2:	9b01      	ldr	r3, [sp, #4]
    d3d4:	2b01      	cmp	r3, #1
    d3d6:	d016      	beq.n	d406 <Radio_WriteMode+0x8e>
            }
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
        }

        // Do the actual mode switch.
        opMode &= ~0x07;                // Clear old mode bits
    d3d8:	21f8      	movs	r1, #248	; 0xf8
    d3da:	4039      	ands	r1, r7
        opMode |= newMode;              // Set new mode bits
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    d3dc:	4321      	orrs	r1, r4
    d3de:	2001      	movs	r0, #1
    d3e0:	4b1b      	ldr	r3, [pc, #108]	; (d450 <Radio_WriteMode+0xd8>)
    d3e2:	4798      	blx	r3
                SystemBlockingWaitMs(1);
            }
        }
    }
#endif
}
    d3e4:	b003      	add	sp, #12
    d3e6:	bc0c      	pop	{r2, r3}
    d3e8:	4691      	mov	r9, r2
    d3ea:	469a      	mov	sl, r3
    d3ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
    d3ee:	21f8      	movs	r1, #248	; 0xf8
    d3f0:	4001      	ands	r1, r0
    d3f2:	2001      	movs	r0, #1
    d3f4:	4b16      	ldr	r3, [pc, #88]	; (d450 <Radio_WriteMode+0xd8>)
    d3f6:	4798      	blx	r3
    d3f8:	e7de      	b.n	d3b8 <Radio_WriteMode+0x40>
            opMode = 0x80 | (opMode & (~0x87));
    d3fa:	2778      	movs	r7, #120	; 0x78
    d3fc:	4653      	mov	r3, sl
    d3fe:	401f      	ands	r7, r3
    d400:	2180      	movs	r1, #128	; 0x80
    d402:	430f      	orrs	r7, r1
    d404:	e7dc      	b.n	d3c0 <Radio_WriteMode+0x48>
            dioMapping = RADIO_RegisterRead(REG_DIOMAPPING2);
    d406:	2041      	movs	r0, #65	; 0x41
    d408:	4b10      	ldr	r3, [pc, #64]	; (d44c <Radio_WriteMode+0xd4>)
    d40a:	4798      	blx	r3
            if (MODULATION_FSK == newModulation)
    d40c:	2e00      	cmp	r6, #0
    d40e:	d10e      	bne.n	d42e <Radio_WriteMode+0xb6>
                dioMapping |= 0x30;     // DIO5 = 11 means ModeReady in FSK mode
    d410:	2130      	movs	r1, #48	; 0x30
    d412:	4301      	orrs	r1, r0
    d414:	b2c9      	uxtb	r1, r1
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
    d416:	2041      	movs	r0, #65	; 0x41
    d418:	4d0d      	ldr	r5, [pc, #52]	; (d450 <Radio_WriteMode+0xd8>)
    d41a:	47a8      	blx	r5
        opMode &= ~0x07;                // Clear old mode bits
    d41c:	21f8      	movs	r1, #248	; 0xf8
    d41e:	4039      	ands	r1, r7
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    d420:	4321      	orrs	r1, r4
    d422:	2001      	movs	r0, #1
    d424:	47a8      	blx	r5
			   delay_ms(1);
    d426:	2001      	movs	r0, #1
    d428:	4b0a      	ldr	r3, [pc, #40]	; (d454 <Radio_WriteMode+0xdc>)
    d42a:	4798      	blx	r3
    d42c:	e7da      	b.n	d3e4 <Radio_WriteMode+0x6c>
                dioMapping &= ~0x30;    // DIO5 = 00 means ModeReady in LoRa mode
    d42e:	21cf      	movs	r1, #207	; 0xcf
    d430:	4001      	ands	r1, r0
    d432:	e7f0      	b.n	d416 <Radio_WriteMode+0x9e>
        opMode &= ~0x07;                // Clear old mode bits
    d434:	21f8      	movs	r1, #248	; 0xf8
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    d436:	4039      	ands	r1, r7
    d438:	2001      	movs	r0, #1
    d43a:	4b05      	ldr	r3, [pc, #20]	; (d450 <Radio_WriteMode+0xd8>)
    d43c:	4798      	blx	r3
        if (1 == blocking)
    d43e:	9b01      	ldr	r3, [sp, #4]
    d440:	2b01      	cmp	r3, #1
    d442:	d1cf      	bne.n	d3e4 <Radio_WriteMode+0x6c>
                SystemBlockingWaitMs(1);
    d444:	2001      	movs	r0, #1
    d446:	4b04      	ldr	r3, [pc, #16]	; (d458 <Radio_WriteMode+0xe0>)
    d448:	4798      	blx	r3
    d44a:	e7cb      	b.n	d3e4 <Radio_WriteMode+0x6c>
    d44c:	0000c6e5 	.word	0x0000c6e5
    d450:	0000c6bd 	.word	0x0000c6bd
    d454:	0000471d 	.word	0x0000471d
    d458:	0000c841 	.word	0x0000c841

0000d45c <RADIO_FHSSChangeChannel>:

\param		- none	
\return		- none.
*************************************************************************/
void RADIO_FHSSChangeChannel(void)
{
    d45c:	b500      	push	{lr}
    d45e:	b083      	sub	sp, #12
    uint32_t freq;
    RADIO_RegisterRead(REG_LORA_IRQFLAGS);
    d460:	2012      	movs	r0, #18
    d462:	4b0d      	ldr	r3, [pc, #52]	; (d498 <RADIO_FHSSChangeChannel+0x3c>)
    d464:	4798      	blx	r3

    if (radioConfiguration.frequencyHopPeriod)
    d466:	4b0d      	ldr	r3, [pc, #52]	; (d49c <RADIO_FHSSChangeChannel+0x40>)
    d468:	8adb      	ldrh	r3, [r3, #22]
    d46a:	2b00      	cmp	r3, #0
    d46c:	d007      	beq.n	d47e <RADIO_FHSSChangeChannel+0x22>
    {
        if ((radioConfiguration.radioCallback) &&
    d46e:	4b0b      	ldr	r3, [pc, #44]	; (d49c <RADIO_FHSSChangeChannel+0x40>)
    d470:	691b      	ldr	r3, [r3, #16]
    d472:	2b00      	cmp	r3, #0
    d474:	d003      	beq.n	d47e <RADIO_FHSSChangeChannel+0x22>
            (1 == radioCallbackMask.BitMask.radioFhssfreqCallback))
    d476:	4a0a      	ldr	r2, [pc, #40]	; (d4a0 <RADIO_FHSSChangeChannel+0x44>)
    d478:	7812      	ldrb	r2, [r2, #0]
        if ((radioConfiguration.radioCallback) &&
    d47a:	0692      	lsls	r2, r2, #26
    d47c:	d405      	bmi.n	d48a <RADIO_FHSSChangeChannel+0x2e>
            Radio_WriteFrequency(freq);
        }
    }

    // Clear FHSSChangeChannel interrupt
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 1 << SHIFT1);
    d47e:	2102      	movs	r1, #2
    d480:	2012      	movs	r0, #18
    d482:	4b08      	ldr	r3, [pc, #32]	; (d4a4 <RADIO_FHSSChangeChannel+0x48>)
    d484:	4798      	blx	r3
}
    d486:	b003      	add	sp, #12
    d488:	bd00      	pop	{pc}
            radioConfiguration.radioCallback(RADIO_FHSS_NEXT_FREQ_CALLBACK, (void *)&freq);
    d48a:	a901      	add	r1, sp, #4
    d48c:	2020      	movs	r0, #32
    d48e:	4798      	blx	r3
            Radio_WriteFrequency(freq);
    d490:	9801      	ldr	r0, [sp, #4]
    d492:	4b05      	ldr	r3, [pc, #20]	; (d4a8 <RADIO_FHSSChangeChannel+0x4c>)
    d494:	4798      	blx	r3
    d496:	e7f2      	b.n	d47e <RADIO_FHSSChangeChannel+0x22>
    d498:	0000c6e5 	.word	0x0000c6e5
    d49c:	20002cf4 	.word	0x20002cf4
    d4a0:	20002fbe 	.word	0x20002fbe
    d4a4:	0000c6bd 	.word	0x0000c6bd
    d4a8:	0000df85 	.word	0x0000df85

0000d4ac <RADIO_ReadRandom>:

\param		- none	
\return		- returns the random number generated.
*************************************************************************/
uint16_t RADIO_ReadRandom(void)
{
    d4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    uint16_t retVal;
    retVal = 0;
	
	// Turn on the RF switch.
	Radio_EnableRfControl(RADIO_RFCTRL_RX); 
    d4ae:	2000      	movs	r0, #0
    d4b0:	4b1a      	ldr	r3, [pc, #104]	; (d51c <RADIO_ReadRandom+0x70>)
    d4b2:	4798      	blx	r3
	// Enabling Radio Clock
	Radio_SetClockInput();
    d4b4:	4b1a      	ldr	r3, [pc, #104]	; (d520 <RADIO_ReadRandom+0x74>)
    d4b6:	4798      	blx	r3
	
    // Mask all interrupts, do many measurements of RSSI
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    d4b8:	2201      	movs	r2, #1
    d4ba:	2101      	movs	r1, #1
    d4bc:	2000      	movs	r0, #0
    d4be:	4c19      	ldr	r4, [pc, #100]	; (d524 <RADIO_ReadRandom+0x78>)
    d4c0:	47a0      	blx	r4
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0xFF);
    d4c2:	21ff      	movs	r1, #255	; 0xff
    d4c4:	2011      	movs	r0, #17
    d4c6:	4b18      	ldr	r3, [pc, #96]	; (d528 <RADIO_ReadRandom+0x7c>)
    d4c8:	4798      	blx	r3
    Radio_WriteMode(MODE_RXCONT, MODULATION_LORA, 1);
    d4ca:	2201      	movs	r2, #1
    d4cc:	2101      	movs	r1, #1
    d4ce:	2005      	movs	r0, #5
    d4d0:	47a0      	blx	r4
    d4d2:	2410      	movs	r4, #16
    retVal = 0;
    d4d4:	2500      	movs	r5, #0
    for (i = 0; i < 16; i++)
    {
        SystemBlockingWaitMs(1);
    d4d6:	4f15      	ldr	r7, [pc, #84]	; (d52c <RADIO_ReadRandom+0x80>)
        retVal <<= SHIFT1;
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    d4d8:	4e15      	ldr	r6, [pc, #84]	; (d530 <RADIO_ReadRandom+0x84>)
        SystemBlockingWaitMs(1);
    d4da:	2001      	movs	r0, #1
    d4dc:	47b8      	blx	r7
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    d4de:	202c      	movs	r0, #44	; 0x2c
    d4e0:	47b0      	blx	r6
    d4e2:	2301      	movs	r3, #1
    d4e4:	4018      	ands	r0, r3
        retVal <<= SHIFT1;
    d4e6:	006d      	lsls	r5, r5, #1
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    d4e8:	4305      	orrs	r5, r0
    d4ea:	b2ad      	uxth	r5, r5
    d4ec:	3c01      	subs	r4, #1
    d4ee:	b2e4      	uxtb	r4, r4
    for (i = 0; i < 16; i++)
    d4f0:	2c00      	cmp	r4, #0
    d4f2:	d1f2      	bne.n	d4da <RADIO_ReadRandom+0x2e>
    }
	
	// Turning off the RF switch now.
	Radio_DisableRfControl(RADIO_RFCTRL_RX);
    d4f4:	2000      	movs	r0, #0
    d4f6:	4b0f      	ldr	r3, [pc, #60]	; (d534 <RADIO_ReadRandom+0x88>)
    d4f8:	4798      	blx	r3
	
    // Return radio to sleep
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    d4fa:	2201      	movs	r2, #1
    d4fc:	2101      	movs	r1, #1
    d4fe:	2000      	movs	r0, #0
    d500:	4b08      	ldr	r3, [pc, #32]	; (d524 <RADIO_ReadRandom+0x78>)
    d502:	4798      	blx	r3
    // Clear interrupts in case any have been generated
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 0xFF);
    d504:	21ff      	movs	r1, #255	; 0xff
    d506:	2012      	movs	r0, #18
    d508:	4c07      	ldr	r4, [pc, #28]	; (d528 <RADIO_ReadRandom+0x7c>)
    d50a:	47a0      	blx	r4
    // Unmask all interrupts
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0x00);
    d50c:	2100      	movs	r1, #0
    d50e:	2011      	movs	r0, #17
    d510:	47a0      	blx	r4
	// Disabling Radio Clock save power
	Radio_ResetClockInput();
    d512:	4b09      	ldr	r3, [pc, #36]	; (d538 <RADIO_ReadRandom+0x8c>)
    d514:	4798      	blx	r3
	
    return retVal;
}
    d516:	0028      	movs	r0, r5
    d518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d51a:	46c0      	nop			; (mov r8, r8)
    d51c:	0000e841 	.word	0x0000e841
    d520:	0000ecf1 	.word	0x0000ecf1
    d524:	0000d379 	.word	0x0000d379
    d528:	0000c6bd 	.word	0x0000c6bd
    d52c:	0000c841 	.word	0x0000c841
    d530:	0000c6e5 	.word	0x0000c6e5
    d534:	0000e969 	.word	0x0000e969
    d538:	0000ed25 	.word	0x0000ed25

0000d53c <Radio_ReadRssi>:

\param rssi	- The RSSI measured in the channel.
\return		- ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t Radio_ReadRssi(int16_t *rssi)
{
    d53c:	b510      	push	{r4, lr}
    d53e:	0004      	movs	r4, r0
	if (MODULATION_LORA == radioConfiguration.modulation)
    d540:	2334      	movs	r3, #52	; 0x34
    d542:	4a11      	ldr	r2, [pc, #68]	; (d588 <Radio_ReadRssi+0x4c>)
    d544:	5cd3      	ldrb	r3, [r2, r3]
    d546:	2b01      	cmp	r3, #1
    d548:	d003      	beq.n	d552 <Radio_ReadRssi+0x16>
		*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
#endif // UT
	}
	else
	{
		return ERR_UNSUPPORTED_ATTR;
    d54a:	2006      	movs	r0, #6
	else if (MODULATION_FSK == radioConfiguration.modulation)
    d54c:	2b00      	cmp	r3, #0
    d54e:	d012      	beq.n	d576 <Radio_ReadRssi+0x3a>
	}
	return ERR_NONE;
}
    d550:	bd10      	pop	{r4, pc}
		if (radioConfiguration.frequency >= HF_FREQ_HZ)
    d552:	4b0e      	ldr	r3, [pc, #56]	; (d58c <Radio_ReadRssi+0x50>)
    d554:	6812      	ldr	r2, [r2, #0]
    d556:	429a      	cmp	r2, r3
    d558:	d906      	bls.n	d568 <Radio_ReadRssi+0x2c>
			*rssi = RSSI_HF_OFFSET + RADIO_RegisterRead(REG_LORA_PKTRSSIVALUE);
    d55a:	201a      	movs	r0, #26
    d55c:	4b0c      	ldr	r3, [pc, #48]	; (d590 <Radio_ReadRssi+0x54>)
    d55e:	4798      	blx	r3
    d560:	389d      	subs	r0, #157	; 0x9d
    d562:	8020      	strh	r0, [r4, #0]
	return ERR_NONE;
    d564:	2000      	movs	r0, #0
    d566:	e7f3      	b.n	d550 <Radio_ReadRssi+0x14>
			*rssi = RSSI_LF_OFFSET + RADIO_RegisterRead(REG_LORA_PKTRSSIVALUE);
    d568:	201a      	movs	r0, #26
    d56a:	4b09      	ldr	r3, [pc, #36]	; (d590 <Radio_ReadRssi+0x54>)
    d56c:	4798      	blx	r3
    d56e:	38a4      	subs	r0, #164	; 0xa4
    d570:	8020      	strh	r0, [r4, #0]
	return ERR_NONE;
    d572:	2000      	movs	r0, #0
    d574:	e7ec      	b.n	d550 <Radio_ReadRssi+0x14>
		*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
    d576:	300b      	adds	r0, #11
    d578:	4b05      	ldr	r3, [pc, #20]	; (d590 <Radio_ReadRssi+0x54>)
    d57a:	4798      	blx	r3
    d57c:	0840      	lsrs	r0, r0, #1
    d57e:	b2c3      	uxtb	r3, r0
    d580:	425b      	negs	r3, r3
    d582:	8023      	strh	r3, [r4, #0]
	return ERR_NONE;
    d584:	2000      	movs	r0, #0
    d586:	e7e3      	b.n	d550 <Radio_ReadRssi+0x14>
    d588:	20002cf4 	.word	0x20002cf4
    d58c:	3361137f 	.word	0x3361137f
    d590:	0000c6e5 	.word	0x0000c6e5

0000d594 <Radio_ReadFSKRssi>:

\param rssi	- The RSSI measured in the channel.
\return		- ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t Radio_ReadFSKRssi(int16_t *rssi)
{	
    d594:	b510      	push	{r4, lr}
    d596:	0004      	movs	r4, r0
#ifdef UT
	*rssi = testRssi;
#else // UT
	*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
    d598:	2011      	movs	r0, #17
    d59a:	4b04      	ldr	r3, [pc, #16]	; (d5ac <Radio_ReadFSKRssi+0x18>)
    d59c:	4798      	blx	r3
    d59e:	0840      	lsrs	r0, r0, #1
    d5a0:	b2c0      	uxtb	r0, r0
    d5a2:	4240      	negs	r0, r0
    d5a4:	8020      	strh	r0, [r4, #0]
#endif // UT
	
	return ERR_NONE;
}
    d5a6:	2000      	movs	r0, #0
    d5a8:	bd10      	pop	{r4, pc}
    d5aa:	46c0      	nop			; (mov r8, r8)
    d5ac:	0000c6e5 	.word	0x0000c6e5

0000d5b0 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    d5b0:	b510      	push	{r4, lr}
	tmr_cca_callback();
    d5b2:	4b01      	ldr	r3, [pc, #4]	; (d5b8 <tc_cca_callback+0x8>)
    d5b4:	4798      	blx	r3
}
    d5b6:	bd10      	pop	{r4, pc}
    d5b8:	00012301 	.word	0x00012301

0000d5bc <tc_ovf_callback>:
{
    d5bc:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    d5be:	4b01      	ldr	r3, [pc, #4]	; (d5c4 <tc_ovf_callback+0x8>)
    d5c0:	4798      	blx	r3
}
    d5c2:	bd10      	pop	{r4, pc}
    d5c4:	000122b9 	.word	0x000122b9

0000d5c8 <tmr_read_count>:
{
    d5c8:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    d5ca:	4802      	ldr	r0, [pc, #8]	; (d5d4 <tmr_read_count+0xc>)
    d5cc:	4b02      	ldr	r3, [pc, #8]	; (d5d8 <tmr_read_count+0x10>)
    d5ce:	4798      	blx	r3
    d5d0:	b280      	uxth	r0, r0
}
    d5d2:	bd10      	pop	{r4, pc}
    d5d4:	20002d84 	.word	0x20002d84
    d5d8:	000075e5 	.word	0x000075e5

0000d5dc <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    d5dc:	4b03      	ldr	r3, [pc, #12]	; (d5ec <tmr_disable_cc_interrupt+0x10>)
    d5de:	2110      	movs	r1, #16
    d5e0:	681a      	ldr	r2, [r3, #0]
    d5e2:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    d5e4:	7e5a      	ldrb	r2, [r3, #25]
    d5e6:	438a      	bics	r2, r1
    d5e8:	765a      	strb	r2, [r3, #25]
}
    d5ea:	4770      	bx	lr
    d5ec:	20002d84 	.word	0x20002d84

0000d5f0 <tmr_enable_cc_interrupt>:
{
    d5f0:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    d5f2:	4c0a      	ldr	r4, [pc, #40]	; (d61c <tmr_enable_cc_interrupt+0x2c>)
    d5f4:	6820      	ldr	r0, [r4, #0]
    d5f6:	4b0a      	ldr	r3, [pc, #40]	; (d620 <tmr_enable_cc_interrupt+0x30>)
    d5f8:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    d5fa:	4b0a      	ldr	r3, [pc, #40]	; (d624 <tmr_enable_cc_interrupt+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    d5fc:	5c1b      	ldrb	r3, [r3, r0]
    d5fe:	221f      	movs	r2, #31
    d600:	401a      	ands	r2, r3
    d602:	2301      	movs	r3, #1
    d604:	4093      	lsls	r3, r2
    d606:	4a08      	ldr	r2, [pc, #32]	; (d628 <tmr_enable_cc_interrupt+0x38>)
    d608:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    d60a:	7e63      	ldrb	r3, [r4, #25]
    d60c:	2210      	movs	r2, #16
    d60e:	4313      	orrs	r3, r2
    d610:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    d612:	6823      	ldr	r3, [r4, #0]
    d614:	2210      	movs	r2, #16
    d616:	725a      	strb	r2, [r3, #9]
}
    d618:	bd10      	pop	{r4, pc}
    d61a:	46c0      	nop			; (mov r8, r8)
    d61c:	20002d84 	.word	0x20002d84
    d620:	000072b9 	.word	0x000072b9
    d624:	00017b40 	.word	0x00017b40
    d628:	e000e100 	.word	0xe000e100

0000d62c <tmr_disable_ovf_interrupt>:
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(2);
		module->enable_callback_mask &= ~TC_INTFLAG_MC(2);
	}
	else {
		module->hw->COUNT8.INTENCLR.reg = (1 << callback_type);
    d62c:	4b03      	ldr	r3, [pc, #12]	; (d63c <tmr_disable_ovf_interrupt+0x10>)
    d62e:	2101      	movs	r1, #1
    d630:	681a      	ldr	r2, [r3, #0]
    d632:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~(1 << callback_type);
    d634:	7e5a      	ldrb	r2, [r3, #25]
    d636:	438a      	bics	r2, r1
    d638:	765a      	strb	r2, [r3, #25]
}
    d63a:	4770      	bx	lr
    d63c:	20002d84 	.word	0x20002d84

0000d640 <tmr_enable_ovf_interrupt>:
{
    d640:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    d642:	4c0a      	ldr	r4, [pc, #40]	; (d66c <tmr_enable_ovf_interrupt+0x2c>)
    d644:	6820      	ldr	r0, [r4, #0]
    d646:	4b0a      	ldr	r3, [pc, #40]	; (d670 <tmr_enable_ovf_interrupt+0x30>)
    d648:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    d64a:	4b0a      	ldr	r3, [pc, #40]	; (d674 <tmr_enable_ovf_interrupt+0x34>)
    d64c:	5c1a      	ldrb	r2, [r3, r0]
    d64e:	231f      	movs	r3, #31
    d650:	4013      	ands	r3, r2
    d652:	2201      	movs	r2, #1
    d654:	0011      	movs	r1, r2
    d656:	4099      	lsls	r1, r3
    d658:	4b07      	ldr	r3, [pc, #28]	; (d678 <tmr_enable_ovf_interrupt+0x38>)
    d65a:	6019      	str	r1, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    d65c:	7e63      	ldrb	r3, [r4, #25]
    d65e:	2101      	movs	r1, #1
    d660:	430b      	orrs	r3, r1
    d662:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    d664:	6823      	ldr	r3, [r4, #0]
    d666:	725a      	strb	r2, [r3, #9]
}
    d668:	bd10      	pop	{r4, pc}
    d66a:	46c0      	nop			; (mov r8, r8)
    d66c:	20002d84 	.word	0x20002d84
    d670:	000072b9 	.word	0x000072b9
    d674:	00017b40 	.word	0x00017b40
    d678:	e000e100 	.word	0xe000e100

0000d67c <tmr_write_cmpreg>:
{
    d67c:	b510      	push	{r4, lr}
    d67e:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    d680:	2100      	movs	r1, #0
    d682:	4802      	ldr	r0, [pc, #8]	; (d68c <tmr_write_cmpreg+0x10>)
    d684:	4b02      	ldr	r3, [pc, #8]	; (d690 <tmr_write_cmpreg+0x14>)
    d686:	4798      	blx	r3
}
    d688:	bd10      	pop	{r4, pc}
    d68a:	46c0      	nop			; (mov r8, r8)
    d68c:	20002d84 	.word	0x20002d84
    d690:	0000762d 	.word	0x0000762d

0000d694 <save_cpu_interrupt>:
{
    d694:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    d696:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d69a:	425a      	negs	r2, r3
    d69c:	4153      	adcs	r3, r2
    d69e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    d6a0:	b672      	cpsid	i
    d6a2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d6a6:	2200      	movs	r2, #0
    d6a8:	4b02      	ldr	r3, [pc, #8]	; (d6b4 <save_cpu_interrupt+0x20>)
    d6aa:	701a      	strb	r2, [r3, #0]
	return flags;
    d6ac:	9801      	ldr	r0, [sp, #4]
	return cpu_irq_save();
    d6ae:	b2c0      	uxtb	r0, r0
}
    d6b0:	b002      	add	sp, #8
    d6b2:	4770      	bx	lr
    d6b4:	20000014 	.word	0x20000014

0000d6b8 <restore_cpu_interrupt>:
	if (cpu_irq_is_enabled_flags(flags))
    d6b8:	2800      	cmp	r0, #0
    d6ba:	d005      	beq.n	d6c8 <restore_cpu_interrupt+0x10>
		cpu_irq_enable();
    d6bc:	2201      	movs	r2, #1
    d6be:	4b03      	ldr	r3, [pc, #12]	; (d6cc <restore_cpu_interrupt+0x14>)
    d6c0:	701a      	strb	r2, [r3, #0]
    d6c2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d6c6:	b662      	cpsie	i
}
    d6c8:	4770      	bx	lr
    d6ca:	46c0      	nop			; (mov r8, r8)
    d6cc:	20000014 	.word	0x20000014

0000d6d0 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    d6d0:	b570      	push	{r4, r5, r6, lr}
	config->clock_source               = GCLK_GENERATOR_0;
    d6d2:	4a33      	ldr	r2, [pc, #204]	; (d7a0 <tmr_init+0xd0>)
    d6d4:	2100      	movs	r1, #0
    d6d6:	2300      	movs	r3, #0
    d6d8:	7011      	strb	r1, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    d6da:	70d1      	strb	r1, [r2, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    d6dc:	2000      	movs	r0, #0
    d6de:	8091      	strh	r1, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    d6e0:	7190      	strb	r0, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    d6e2:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
    d6e4:	7053      	strb	r3, [r2, #1]
	config->on_demand                  = false;
    d6e6:	7093      	strb	r3, [r2, #2]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    d6e8:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    d6ea:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    d6ec:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    d6ee:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    d6f0:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    d6f2:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    d6f4:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    d6f6:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    d6f8:	6151      	str	r1, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    d6fa:	6191      	str	r1, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    d6fc:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    d6fe:	6211      	str	r1, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    d700:	6251      	str	r1, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    d702:	8511      	strh	r1, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    d704:	8591      	strh	r1, [r2, #44]	; 0x2c
	config->double_buffering_enabled = false;
    d706:	2334      	movs	r3, #52	; 0x34
    d708:	54d0      	strb	r0, [r2, r3]
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    d70a:	3b35      	subs	r3, #53	; 0x35
    d70c:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    d70e:	4c25      	ldr	r4, [pc, #148]	; (d7a4 <tmr_init+0xd4>)
    d710:	4925      	ldr	r1, [pc, #148]	; (d7a8 <tmr_init+0xd8>)
    d712:	0020      	movs	r0, r4
    d714:	4b25      	ldr	r3, [pc, #148]	; (d7ac <tmr_init+0xdc>)
    d716:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    d718:	2200      	movs	r2, #0
    d71a:	4925      	ldr	r1, [pc, #148]	; (d7b0 <tmr_init+0xe0>)
    d71c:	0020      	movs	r0, r4
    d71e:	4d25      	ldr	r5, [pc, #148]	; (d7b4 <tmr_init+0xe4>)
    d720:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    d722:	2202      	movs	r2, #2
    d724:	4924      	ldr	r1, [pc, #144]	; (d7b8 <tmr_init+0xe8>)
    d726:	0020      	movs	r0, r4
    d728:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    d72a:	6820      	ldr	r0, [r4, #0]
    d72c:	4b23      	ldr	r3, [pc, #140]	; (d7bc <tmr_init+0xec>)
    d72e:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    d730:	4b23      	ldr	r3, [pc, #140]	; (d7c0 <tmr_init+0xf0>)
    d732:	5c1a      	ldrb	r2, [r3, r0]
    d734:	231f      	movs	r3, #31
    d736:	4013      	ands	r3, r2
    d738:	2101      	movs	r1, #1
    d73a:	000a      	movs	r2, r1
    d73c:	409a      	lsls	r2, r3
    d73e:	4b21      	ldr	r3, [pc, #132]	; (d7c4 <tmr_init+0xf4>)
    d740:	601a      	str	r2, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    d742:	7e63      	ldrb	r3, [r4, #25]
    d744:	2201      	movs	r2, #1
    d746:	4313      	orrs	r3, r2
    d748:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    d74a:	6822      	ldr	r2, [r4, #0]
    d74c:	7251      	strb	r1, [r2, #9]
	return (tc_module->SYNCBUSY.reg);
    d74e:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    d750:	2b00      	cmp	r3, #0
    d752:	d1fc      	bne.n	d74e <tmr_init+0x7e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    d754:	6813      	ldr	r3, [r2, #0]
    d756:	2102      	movs	r1, #2
    d758:	430b      	orrs	r3, r1
    d75a:	6013      	str	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;	
    d75c:	2000      	movs	r0, #0
    d75e:	4b1a      	ldr	r3, [pc, #104]	; (d7c8 <tmr_init+0xf8>)
    d760:	4798      	blx	r3
    d762:	4d1a      	ldr	r5, [pc, #104]	; (d7cc <tmr_init+0xfc>)
    d764:	47a8      	blx	r5
    d766:	491a      	ldr	r1, [pc, #104]	; (d7d0 <tmr_init+0x100>)
    d768:	4b1a      	ldr	r3, [pc, #104]	; (d7d4 <tmr_init+0x104>)
    d76a:	4798      	blx	r3
    d76c:	1c04      	adds	r4, r0, #0
	#endif
	
	if ((timer_multiplier - (uint32_t)timer_multiplier) >= 0.5f)
    d76e:	4b1a      	ldr	r3, [pc, #104]	; (d7d8 <tmr_init+0x108>)
    d770:	4798      	blx	r3
    d772:	47a8      	blx	r5
    d774:	1c01      	adds	r1, r0, #0
    d776:	1c20      	adds	r0, r4, #0
    d778:	4b18      	ldr	r3, [pc, #96]	; (d7dc <tmr_init+0x10c>)
    d77a:	4798      	blx	r3
    d77c:	21fc      	movs	r1, #252	; 0xfc
    d77e:	0589      	lsls	r1, r1, #22
    d780:	4b17      	ldr	r3, [pc, #92]	; (d7e0 <tmr_init+0x110>)
    d782:	4798      	blx	r3
    d784:	2800      	cmp	r0, #0
    d786:	d005      	beq.n	d794 <tmr_init+0xc4>
	{
		timer_multiplier += 1.0f;
    d788:	21fe      	movs	r1, #254	; 0xfe
    d78a:	0589      	lsls	r1, r1, #22
    d78c:	1c20      	adds	r0, r4, #0
    d78e:	4b15      	ldr	r3, [pc, #84]	; (d7e4 <tmr_init+0x114>)
    d790:	4798      	blx	r3
    d792:	1c04      	adds	r4, r0, #0
	}
	
	return (uint8_t) timer_multiplier;
    d794:	1c20      	adds	r0, r4, #0
    d796:	4b10      	ldr	r3, [pc, #64]	; (d7d8 <tmr_init+0x108>)
    d798:	4798      	blx	r3
    d79a:	b2c0      	uxtb	r0, r0
}
    d79c:	bd70      	pop	{r4, r5, r6, pc}
    d79e:	46c0      	nop			; (mov r8, r8)
    d7a0:	20002d4c 	.word	0x20002d4c
    d7a4:	20002d84 	.word	0x20002d84
    d7a8:	42002000 	.word	0x42002000
    d7ac:	000072f5 	.word	0x000072f5
    d7b0:	0000d5bd 	.word	0x0000d5bd
    d7b4:	000071f1 	.word	0x000071f1
    d7b8:	0000d5b1 	.word	0x0000d5b1
    d7bc:	000072b9 	.word	0x000072b9
    d7c0:	00017b40 	.word	0x00017b40
    d7c4:	e000e100 	.word	0xe000e100
    d7c8:	00006fb9 	.word	0x00006fb9
    d7cc:	000136d9 	.word	0x000136d9
    d7d0:	49742400 	.word	0x49742400
    d7d4:	00012ca1 	.word	0x00012ca1
    d7d8:	00012751 	.word	0x00012751
    d7dc:	000132c1 	.word	0x000132c1
    d7e0:	000126a9 	.word	0x000126a9
    d7e4:	0001297d 	.word	0x0001297d

0000d7e8 <edbg_eui_read_eui64>:
#define LEN_EUI    256
uint8_t readbuf[LEN_EUI];

uint8_t *
edbg_eui_read_eui64(void)
{
    d7e8:	b570      	push	{r4, r5, r6, lr}
    d7ea:	b090      	sub	sp, #64	; 0x40
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    d7ec:	aa03      	add	r2, sp, #12
    d7ee:	2364      	movs	r3, #100	; 0x64
    d7f0:	9303      	str	r3, [sp, #12]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    d7f2:	4b54      	ldr	r3, [pc, #336]	; (d944 <edbg_eui_read_eui64+0x15c>)
    d7f4:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    d7f6:	2300      	movs	r3, #0
    d7f8:	6093      	str	r3, [r2, #8]
	config->generator_source = GCLK_GENERATOR_0;
    d7fa:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    d7fc:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    d7fe:	2180      	movs	r1, #128	; 0x80
    d800:	0389      	lsls	r1, r1, #14
    d802:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
    d804:	2101      	movs	r1, #1
    d806:	4249      	negs	r1, r1
    d808:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
    d80a:	8291      	strh	r1, [r2, #20]
	config->scl_low_timeout  = false;
    d80c:	3125      	adds	r1, #37	; 0x25
    d80e:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    d810:	6293      	str	r3, [r2, #40]	; 0x28
	config->scl_stretch_only_after_ack_bit = false;
    d812:	3108      	adds	r1, #8
    d814:	5453      	strb	r3, [r2, r1]
	config->slave_scl_low_extend_timeout   = false;
    d816:	3101      	adds	r1, #1
    d818:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    d81a:	3101      	adds	r1, #1
    d81c:	5453      	strb	r3, [r2, r1]
	config->sda_scl_rise_time_ns = 215;
    d81e:	33d7      	adds	r3, #215	; 0xd7
    d820:	8613      	strh	r3, [r2, #48]	; 0x30
  int timeout2 = 0;
  bool random_mac_address = false;
  uint8_t edbg_status = 0xFF;
  struct i2c_master_config config_i2c_master;
  i2c_master_get_config_defaults(&config_i2c_master);
  config_i2c_master.pinmux_pad0  = EDBG_I2C_SERCOM_PINMUX_PAD0;
    d822:	4b49      	ldr	r3, [pc, #292]	; (d948 <edbg_eui_read_eui64+0x160>)
    d824:	61d3      	str	r3, [r2, #28]
  config_i2c_master.pinmux_pad1  = EDBG_I2C_SERCOM_PINMUX_PAD1;
    d826:	4b49      	ldr	r3, [pc, #292]	; (d94c <edbg_eui_read_eui64+0x164>)
    d828:	6213      	str	r3, [r2, #32]

  i2c_master_init(&i2c_master_instance, EDBG_I2C_MODULE, &config_i2c_master);
    d82a:	4c49      	ldr	r4, [pc, #292]	; (d950 <edbg_eui_read_eui64+0x168>)
    d82c:	4949      	ldr	r1, [pc, #292]	; (d954 <edbg_eui_read_eui64+0x16c>)
    d82e:	0020      	movs	r0, r4
    d830:	4b49      	ldr	r3, [pc, #292]	; (d958 <edbg_eui_read_eui64+0x170>)
    d832:	4798      	blx	r3
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    d834:	6822      	ldr	r2, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    d836:	2107      	movs	r1, #7
    d838:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
    d83a:	4219      	tst	r1, r3
    d83c:	d1fc      	bne.n	d838 <edbg_eui_read_eui64+0x50>
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    d83e:	6813      	ldr	r3, [r2, #0]
    d840:	2102      	movs	r1, #2
    d842:	430b      	orrs	r3, r1
    d844:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    d846:	4b42      	ldr	r3, [pc, #264]	; (d950 <edbg_eui_read_eui64+0x168>)
    d848:	88dc      	ldrh	r4, [r3, #6]
	uint32_t timeout_counter = 0;
    d84a:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    d84c:	2010      	movs	r0, #16
    d84e:	8b51      	ldrh	r1, [r2, #26]
    d850:	4201      	tst	r1, r0
    d852:	d104      	bne.n	d85e <edbg_eui_read_eui64+0x76>
		timeout_counter++;
    d854:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    d856:	42a3      	cmp	r3, r4
    d858:	d3f9      	bcc.n	d84e <edbg_eui_read_eui64+0x66>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    d85a:	2310      	movs	r3, #16
    d85c:	8353      	strh	r3, [r2, #26]

  i2c_master_enable(&i2c_master_instance);

  struct i2c_master_packet packet = {
    d85e:	466a      	mov	r2, sp
    d860:	4b3e      	ldr	r3, [pc, #248]	; (d95c <edbg_eui_read_eui64+0x174>)
    d862:	cb13      	ldmia	r3!, {r0, r1, r4}
    d864:	c213      	stmia	r2!, {r0, r1, r4}
  int timeout2 = 0;
    d866:	2600      	movs	r6, #0
    .hs_master_code  = 0x0,
  };
   
    do
    {
	    edbg_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &packet);
    d868:	4c39      	ldr	r4, [pc, #228]	; (d950 <edbg_eui_read_eui64+0x168>)
    d86a:	4d3d      	ldr	r5, [pc, #244]	; (d960 <edbg_eui_read_eui64+0x178>)
    d86c:	e003      	b.n	d876 <edbg_eui_read_eui64+0x8e>
	    if(edbg_status == STATUS_ERR_BAD_ADDRESS)
		{
			if(timeout2++ == SLAVE_WAIT_TIMEOUT)
    d86e:	1c73      	adds	r3, r6, #1
    d870:	2e0a      	cmp	r6, #10
    d872:	d033      	beq.n	d8dc <edbg_eui_read_eui64+0xf4>
    d874:	001e      	movs	r6, r3
	    edbg_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &packet);
    d876:	4669      	mov	r1, sp
    d878:	0020      	movs	r0, r4
    d87a:	47a8      	blx	r5
	    if(edbg_status == STATUS_ERR_BAD_ADDRESS)
    d87c:	2818      	cmp	r0, #24
    d87e:	d0f6      	beq.n	d86e <edbg_eui_read_eui64+0x86>
				random_mac_address = true;
				timeout2 = 0;
				break;
			}
		}
		else if(edbg_status == STATUS_ERR_TIMEOUT) {
    d880:	2812      	cmp	r0, #18
    d882:	d02f      	beq.n	d8e4 <edbg_eui_read_eui64+0xfc>
		PRINTF("Timeout 1\n");
		random_mac_address = true;	
		break;
		}
    } while (edbg_status!=STATUS_OK && edbg_status!=0xFF);
    d884:	3801      	subs	r0, #1
    d886:	b2c0      	uxtb	r0, r0
    d888:	28fd      	cmp	r0, #253	; 0xfd
    d88a:	d9f4      	bls.n	d876 <edbg_eui_read_eui64+0x8e>
	
  packet.data = readbuf;
    d88c:	4b35      	ldr	r3, [pc, #212]	; (d964 <edbg_eui_read_eui64+0x17c>)
    d88e:	9301      	str	r3, [sp, #4]
  packet.data_length = sizeof(readbuf);
    d890:	2380      	movs	r3, #128	; 0x80
    d892:	005b      	lsls	r3, r3, #1
    d894:	466a      	mov	r2, sp
    d896:	8053      	strh	r3, [r2, #2]
if(random_mac_address == false)
{
  do 
  {
	  edbg_status = i2c_master_read_packet_wait(&i2c_master_instance, &packet) ;
    d898:	4c2d      	ldr	r4, [pc, #180]	; (d950 <edbg_eui_read_eui64+0x168>)
    d89a:	4d33      	ldr	r5, [pc, #204]	; (d968 <edbg_eui_read_eui64+0x180>)
    d89c:	4669      	mov	r1, sp
    d89e:	0020      	movs	r0, r4
    d8a0:	47a8      	blx	r5
	    if(edbg_status==STATUS_ERR_BAD_ADDRESS)
    d8a2:	2818      	cmp	r0, #24
    d8a4:	d043      	beq.n	d92e <edbg_eui_read_eui64+0x146>
	    {			
			PRINTF("I2C Slave Not Available");
			random_mac_address = true;	
		    break;
	    }
		else if(edbg_status == STATUS_ERR_TIMEOUT) {
    d8a6:	2812      	cmp	r0, #18
    d8a8:	d048      	beq.n	d93c <edbg_eui_read_eui64+0x154>
			random_mac_address = true;	
			PRINTF("Timeout 2\n");
			break;
		}		
  } while (edbg_status!=STATUS_OK && edbg_status!=0xFF);
    d8aa:	3801      	subs	r0, #1
    d8ac:	b2c0      	uxtb	r0, r0
    d8ae:	28fd      	cmp	r0, #253	; 0xfd
    d8b0:	d9f4      	bls.n	d89c <edbg_eui_read_eui64+0xb4>
}
  i2c_master_reset(&i2c_master_instance);
    d8b2:	4827      	ldr	r0, [pc, #156]	; (d950 <edbg_eui_read_eui64+0x168>)
    d8b4:	4b2d      	ldr	r3, [pc, #180]	; (d96c <edbg_eui_read_eui64+0x184>)
    d8b6:	4798      	blx	r3
  if(random_mac_address || !(readbuf[0] ^ readbuf[1] ^ readbuf[2] ^ readbuf[3] ^ readbuf[4] ^ readbuf[5] ^ readbuf[6] ^ readbuf[7]))
    d8b8:	4a2a      	ldr	r2, [pc, #168]	; (d964 <edbg_eui_read_eui64+0x17c>)
    d8ba:	7813      	ldrb	r3, [r2, #0]
    d8bc:	7851      	ldrb	r1, [r2, #1]
    d8be:	404b      	eors	r3, r1
    d8c0:	7891      	ldrb	r1, [r2, #2]
    d8c2:	404b      	eors	r3, r1
    d8c4:	78d1      	ldrb	r1, [r2, #3]
    d8c6:	404b      	eors	r3, r1
    d8c8:	7911      	ldrb	r1, [r2, #4]
    d8ca:	404b      	eors	r3, r1
    d8cc:	7951      	ldrb	r1, [r2, #5]
    d8ce:	404b      	eors	r3, r1
    d8d0:	7991      	ldrb	r1, [r2, #6]
    d8d2:	79d2      	ldrb	r2, [r2, #7]
    d8d4:	404b      	eors	r3, r1
    d8d6:	429a      	cmp	r2, r3
    d8d8:	d126      	bne.n	d928 <edbg_eui_read_eui64+0x140>
    d8da:	e00f      	b.n	d8fc <edbg_eui_read_eui64+0x114>
				PRINTF("I2C Slave Not Available");
    d8dc:	4824      	ldr	r0, [pc, #144]	; (d970 <edbg_eui_read_eui64+0x188>)
    d8de:	4b25      	ldr	r3, [pc, #148]	; (d974 <edbg_eui_read_eui64+0x18c>)
    d8e0:	4798      	blx	r3
				break;
    d8e2:	e002      	b.n	d8ea <edbg_eui_read_eui64+0x102>
		PRINTF("Timeout 1\n");
    d8e4:	4824      	ldr	r0, [pc, #144]	; (d978 <edbg_eui_read_eui64+0x190>)
    d8e6:	4b25      	ldr	r3, [pc, #148]	; (d97c <edbg_eui_read_eui64+0x194>)
    d8e8:	4798      	blx	r3
  packet.data = readbuf;
    d8ea:	4b1e      	ldr	r3, [pc, #120]	; (d964 <edbg_eui_read_eui64+0x17c>)
    d8ec:	9301      	str	r3, [sp, #4]
  packet.data_length = sizeof(readbuf);
    d8ee:	2380      	movs	r3, #128	; 0x80
    d8f0:	005b      	lsls	r3, r3, #1
    d8f2:	466a      	mov	r2, sp
    d8f4:	8053      	strh	r3, [r2, #2]
  i2c_master_reset(&i2c_master_instance);
    d8f6:	4816      	ldr	r0, [pc, #88]	; (d950 <edbg_eui_read_eui64+0x168>)
    d8f8:	4b1c      	ldr	r3, [pc, #112]	; (d96c <edbg_eui_read_eui64+0x184>)
    d8fa:	4798      	blx	r3
  {
	  unsigned int seed;
	  seed = ((*S_NO_WORD0) ^ (*S_NO_WORD1) ^ (*S_NO_WORD2) ^ (*S_NO_WORD3));
    d8fc:	4b20      	ldr	r3, [pc, #128]	; (d980 <edbg_eui_read_eui64+0x198>)
    d8fe:	6818      	ldr	r0, [r3, #0]
    d900:	4b20      	ldr	r3, [pc, #128]	; (d984 <edbg_eui_read_eui64+0x19c>)
    d902:	681b      	ldr	r3, [r3, #0]
    d904:	4058      	eors	r0, r3
    d906:	4b20      	ldr	r3, [pc, #128]	; (d988 <edbg_eui_read_eui64+0x1a0>)
    d908:	681b      	ldr	r3, [r3, #0]
    d90a:	4058      	eors	r0, r3
    d90c:	4b1f      	ldr	r3, [pc, #124]	; (d98c <edbg_eui_read_eui64+0x1a4>)
    d90e:	681b      	ldr	r3, [r3, #0]
    d910:	4058      	eors	r0, r3
	  srand(seed);
    d912:	4b1f      	ldr	r3, [pc, #124]	; (d990 <edbg_eui_read_eui64+0x1a8>)
    d914:	4798      	blx	r3
    d916:	4c13      	ldr	r4, [pc, #76]	; (d964 <edbg_eui_read_eui64+0x17c>)
    d918:	0026      	movs	r6, r4
    d91a:	3608      	adds	r6, #8
	  //printf("\r\n Generating Random MAC \r\n");
	  for (uint8_t i = 0; i < 8; i++) {
		  *(readbuf+i) = rand();
    d91c:	4d1d      	ldr	r5, [pc, #116]	; (d994 <edbg_eui_read_eui64+0x1ac>)
    d91e:	47a8      	blx	r5
    d920:	7020      	strb	r0, [r4, #0]
    d922:	3401      	adds	r4, #1
	  for (uint8_t i = 0; i < 8; i++) {
    d924:	42a6      	cmp	r6, r4
    d926:	d1fa      	bne.n	d91e <edbg_eui_read_eui64+0x136>
	  }
	  
  }
  return readbuf;
}
    d928:	480e      	ldr	r0, [pc, #56]	; (d964 <edbg_eui_read_eui64+0x17c>)
    d92a:	b010      	add	sp, #64	; 0x40
    d92c:	bd70      	pop	{r4, r5, r6, pc}
			PRINTF("I2C Slave Not Available");
    d92e:	4810      	ldr	r0, [pc, #64]	; (d970 <edbg_eui_read_eui64+0x188>)
    d930:	4b10      	ldr	r3, [pc, #64]	; (d974 <edbg_eui_read_eui64+0x18c>)
    d932:	4798      	blx	r3
  i2c_master_reset(&i2c_master_instance);
    d934:	4806      	ldr	r0, [pc, #24]	; (d950 <edbg_eui_read_eui64+0x168>)
    d936:	4b0d      	ldr	r3, [pc, #52]	; (d96c <edbg_eui_read_eui64+0x184>)
    d938:	4798      	blx	r3
    d93a:	e7df      	b.n	d8fc <edbg_eui_read_eui64+0x114>
			PRINTF("Timeout 2\n");
    d93c:	4816      	ldr	r0, [pc, #88]	; (d998 <edbg_eui_read_eui64+0x1b0>)
    d93e:	4b0f      	ldr	r3, [pc, #60]	; (d97c <edbg_eui_read_eui64+0x194>)
    d940:	4798      	blx	r3
			break;
    d942:	e7f7      	b.n	d934 <edbg_eui_read_eui64+0x14c>
    d944:	00000d48 	.word	0x00000d48
    d948:	00100002 	.word	0x00100002
    d94c:	00110002 	.word	0x00110002
    d950:	20002ea0 	.word	0x20002ea0
    d954:	42000400 	.word	0x42000400
    d958:	000052c1 	.word	0x000052c1
    d95c:	00017b48 	.word	0x00017b48
    d960:	000058ed 	.word	0x000058ed
    d964:	20002da0 	.word	0x20002da0
    d968:	000058d9 	.word	0x000058d9
    d96c:	0000559d 	.word	0x0000559d
    d970:	00017b54 	.word	0x00017b54
    d974:	00015b79 	.word	0x00015b79
    d978:	00017b6c 	.word	0x00017b6c
    d97c:	00015c95 	.word	0x00015c95
    d980:	0080a00c 	.word	0x0080a00c
    d984:	0080a040 	.word	0x0080a040
    d988:	0080a044 	.word	0x0080a044
    d98c:	0080a048 	.word	0x0080a048
    d990:	00015ca9 	.word	0x00015ca9
    d994:	00015d05 	.word	0x00015d05
    d998:	00017b78 	.word	0x00017b78

0000d99c <LORAWAN_TxHandler>:
    d99c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d99e:	b087      	sub	sp, #28
    d9a0:	466b      	mov	r3, sp
    d9a2:	2501      	movs	r5, #1
    d9a4:	4c30      	ldr	r4, [pc, #192]	; (da68 <LORAWAN_TxHandler+0xcc>)
    d9a6:	701d      	strb	r5, [r3, #0]
    d9a8:	0023      	movs	r3, r4
    d9aa:	466a      	mov	r2, sp
    d9ac:	33c1      	adds	r3, #193	; 0xc1
    d9ae:	781b      	ldrb	r3, [r3, #0]
    d9b0:	4669      	mov	r1, sp
    d9b2:	7053      	strb	r3, [r2, #1]
    d9b4:	0023      	movs	r3, r4
    d9b6:	33bf      	adds	r3, #191	; 0xbf
    d9b8:	781b      	ldrb	r3, [r3, #0]
    d9ba:	202f      	movs	r0, #47	; 0x2f
    d9bc:	7093      	strb	r3, [r2, #2]
    d9be:	aa03      	add	r2, sp, #12
    d9c0:	4b2a      	ldr	r3, [pc, #168]	; (da6c <LORAWAN_TxHandler+0xd0>)
    d9c2:	4798      	blx	r3
    d9c4:	2808      	cmp	r0, #8
    d9c6:	d004      	beq.n	d9d2 <LORAWAN_TxHandler+0x36>
    d9c8:	4b29      	ldr	r3, [pc, #164]	; (da70 <LORAWAN_TxHandler+0xd4>)
    d9ca:	4798      	blx	r3
    d9cc:	2000      	movs	r0, #0
    d9ce:	b007      	add	sp, #28
    d9d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d9d2:	0023      	movs	r3, r4
    d9d4:	33d4      	adds	r3, #212	; 0xd4
    d9d6:	781b      	ldrb	r3, [r3, #0]
    d9d8:	ae01      	add	r6, sp, #4
    d9da:	2b04      	cmp	r3, #4
    d9dc:	d103      	bne.n	d9e6 <LORAWAN_TxHandler+0x4a>
    d9de:	0030      	movs	r0, r6
    d9e0:	4b24      	ldr	r3, [pc, #144]	; (da74 <LORAWAN_TxHandler+0xd8>)
    d9e2:	7035      	strb	r5, [r6, #0]
    d9e4:	4798      	blx	r3
    d9e6:	4b24      	ldr	r3, [pc, #144]	; (da78 <LORAWAN_TxHandler+0xdc>)
    d9e8:	9803      	ldr	r0, [sp, #12]
    d9ea:	9904      	ldr	r1, [sp, #16]
    d9ec:	9a05      	ldr	r2, [sp, #20]
    d9ee:	4798      	blx	r3
    d9f0:	0023      	movs	r3, r4
    d9f2:	33dc      	adds	r3, #220	; 0xdc
    d9f4:	681d      	ldr	r5, [r3, #0]
    d9f6:	23df      	movs	r3, #223	; 0xdf
    d9f8:	4f20      	ldr	r7, [pc, #128]	; (da7c <LORAWAN_TxHandler+0xe0>)
    d9fa:	005b      	lsls	r3, r3, #1
    d9fc:	2d00      	cmp	r5, #0
    d9fe:	d023      	beq.n	da48 <LORAWAN_TxHandler+0xac>
    da00:	2201      	movs	r2, #1
    da02:	54e2      	strb	r2, [r4, r3]
    da04:	7828      	ldrb	r0, [r5, #0]
    da06:	7a2b      	ldrb	r3, [r5, #8]
    da08:	1e42      	subs	r2, r0, #1
    da0a:	4190      	sbcs	r0, r2
    da0c:	7869      	ldrb	r1, [r5, #1]
    da0e:	686a      	ldr	r2, [r5, #4]
    da10:	b2c0      	uxtb	r0, r0
    da12:	47b8      	blx	r7
    da14:	0023      	movs	r3, r4
    da16:	33a6      	adds	r3, #166	; 0xa6
    da18:	881b      	ldrh	r3, [r3, #0]
    da1a:	0030      	movs	r0, r6
    da1c:	7033      	strb	r3, [r6, #0]
    da1e:	4b18      	ldr	r3, [pc, #96]	; (da80 <LORAWAN_TxHandler+0xe4>)
    da20:	6073      	str	r3, [r6, #4]
    da22:	4b18      	ldr	r3, [pc, #96]	; (da84 <LORAWAN_TxHandler+0xe8>)
    da24:	4798      	blx	r3
    da26:	2800      	cmp	r0, #0
    da28:	d114      	bne.n	da54 <LORAWAN_TxHandler+0xb8>
    da2a:	0021      	movs	r1, r4
    da2c:	220e      	movs	r2, #14
    da2e:	315c      	adds	r1, #92	; 0x5c
    da30:	780b      	ldrb	r3, [r1, #0]
    da32:	4393      	bics	r3, r2
    da34:	001a      	movs	r2, r3
    da36:	2302      	movs	r3, #2
    da38:	4313      	orrs	r3, r2
    da3a:	700b      	strb	r3, [r1, #0]
    da3c:	2208      	movs	r2, #8
    da3e:	346c      	adds	r4, #108	; 0x6c
    da40:	7823      	ldrb	r3, [r4, #0]
    da42:	4393      	bics	r3, r2
    da44:	7023      	strb	r3, [r4, #0]
    da46:	e7c1      	b.n	d9cc <LORAWAN_TxHandler+0x30>
    da48:	54e5      	strb	r5, [r4, r3]
    da4a:	002a      	movs	r2, r5
    da4c:	002b      	movs	r3, r5
    da4e:	0029      	movs	r1, r5
    da50:	0028      	movs	r0, r5
    da52:	e7de      	b.n	da12 <LORAWAN_TxHandler+0x76>
    da54:	0022      	movs	r2, r4
    da56:	2120      	movs	r1, #32
    da58:	326c      	adds	r2, #108	; 0x6c
    da5a:	7813      	ldrb	r3, [r2, #0]
    da5c:	438b      	bics	r3, r1
    da5e:	7013      	strb	r3, [r2, #0]
    da60:	4b03      	ldr	r3, [pc, #12]	; (da70 <LORAWAN_TxHandler+0xd4>)
    da62:	4798      	blx	r3
    da64:	e7ea      	b.n	da3c <LORAWAN_TxHandler+0xa0>
    da66:	46c0      	nop			; (mov r8, r8)
    da68:	200030e4 	.word	0x200030e4
    da6c:	0000c8f9 	.word	0x0000c8f9
    da70:	000108f5 	.word	0x000108f5
    da74:	0000ef35 	.word	0x0000ef35
    da78:	000101d1 	.word	0x000101d1
    da7c:	0001060d 	.word	0x0001060d
    da80:	200032b4 	.word	0x200032b4
    da84:	0000e661 	.word	0x0000e661

0000da88 <LORAWAN_JoinReqHandler>:
    da88:	b530      	push	{r4, r5, lr}
    da8a:	b087      	sub	sp, #28
    da8c:	466a      	mov	r2, sp
    da8e:	2300      	movs	r3, #0
    da90:	4c2a      	ldr	r4, [pc, #168]	; (db3c <LORAWAN_JoinReqHandler+0xb4>)
    da92:	7013      	strb	r3, [r2, #0]
    da94:	0023      	movs	r3, r4
    da96:	33c1      	adds	r3, #193	; 0xc1
    da98:	781b      	ldrb	r3, [r3, #0]
    da9a:	7053      	strb	r3, [r2, #1]
    da9c:	0023      	movs	r3, r4
    da9e:	33bf      	adds	r3, #191	; 0xbf
    daa0:	781b      	ldrb	r3, [r3, #0]
    daa2:	7093      	strb	r3, [r2, #2]
    daa4:	0023      	movs	r3, r4
    daa6:	33f0      	adds	r3, #240	; 0xf0
    daa8:	781b      	ldrb	r3, [r3, #0]
    daaa:	069b      	lsls	r3, r3, #26
    daac:	d511      	bpl.n	dad2 <LORAWAN_JoinReqHandler+0x4a>
    daae:	0023      	movs	r3, r4
    dab0:	334f      	adds	r3, #79	; 0x4f
    dab2:	781a      	ldrb	r2, [r3, #0]
    dab4:	6d23      	ldr	r3, [r4, #80]	; 0x50
    dab6:	021b      	lsls	r3, r3, #8
    dab8:	4313      	orrs	r3, r2
    daba:	0022      	movs	r2, r4
    dabc:	3253      	adds	r2, #83	; 0x53
    dabe:	7811      	ldrb	r1, [r2, #0]
    dac0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    dac2:	0212      	lsls	r2, r2, #8
    dac4:	430a      	orrs	r2, r1
    dac6:	4313      	orrs	r3, r2
    dac8:	d103      	bne.n	dad2 <LORAWAN_JoinReqHandler+0x4a>
    daca:	0023      	movs	r3, r4
    dacc:	2201      	movs	r2, #1
    dace:	335b      	adds	r3, #91	; 0x5b
    dad0:	701a      	strb	r2, [r3, #0]
    dad2:	aa03      	add	r2, sp, #12
    dad4:	4669      	mov	r1, sp
    dad6:	202f      	movs	r0, #47	; 0x2f
    dad8:	4b19      	ldr	r3, [pc, #100]	; (db40 <LORAWAN_JoinReqHandler+0xb8>)
    dada:	4798      	blx	r3
    dadc:	2808      	cmp	r0, #8
    dade:	d004      	beq.n	daea <LORAWAN_JoinReqHandler+0x62>
    dae0:	4b18      	ldr	r3, [pc, #96]	; (db44 <LORAWAN_JoinReqHandler+0xbc>)
    dae2:	4798      	blx	r3
    dae4:	2000      	movs	r0, #0
    dae6:	b007      	add	sp, #28
    dae8:	bd30      	pop	{r4, r5, pc}
    daea:	4b17      	ldr	r3, [pc, #92]	; (db48 <LORAWAN_JoinReqHandler+0xc0>)
    daec:	9803      	ldr	r0, [sp, #12]
    daee:	9904      	ldr	r1, [sp, #16]
    daf0:	9a05      	ldr	r2, [sp, #20]
    daf2:	4798      	blx	r3
    daf4:	0023      	movs	r3, r4
    daf6:	33d4      	adds	r3, #212	; 0xd4
    daf8:	781b      	ldrb	r3, [r3, #0]
    dafa:	ad01      	add	r5, sp, #4
    dafc:	2b04      	cmp	r3, #4
    dafe:	d104      	bne.n	db0a <LORAWAN_JoinReqHandler+0x82>
    db00:	3b03      	subs	r3, #3
    db02:	702b      	strb	r3, [r5, #0]
    db04:	0028      	movs	r0, r5
    db06:	4b11      	ldr	r3, [pc, #68]	; (db4c <LORAWAN_JoinReqHandler+0xc4>)
    db08:	4798      	blx	r3
    db0a:	23df      	movs	r3, #223	; 0xdf
    db0c:	2200      	movs	r2, #0
    db0e:	005b      	lsls	r3, r3, #1
    db10:	54e2      	strb	r2, [r4, r3]
    db12:	4b0f      	ldr	r3, [pc, #60]	; (db50 <LORAWAN_JoinReqHandler+0xc8>)
    db14:	4798      	blx	r3
    db16:	4b0f      	ldr	r3, [pc, #60]	; (db54 <LORAWAN_JoinReqHandler+0xcc>)
    db18:	7028      	strb	r0, [r5, #0]
    db1a:	606b      	str	r3, [r5, #4]
    db1c:	0028      	movs	r0, r5
    db1e:	4b0e      	ldr	r3, [pc, #56]	; (db58 <LORAWAN_JoinReqHandler+0xd0>)
    db20:	4798      	blx	r3
    db22:	2800      	cmp	r0, #0
    db24:	d001      	beq.n	db2a <LORAWAN_JoinReqHandler+0xa2>
    db26:	201b      	movs	r0, #27
    db28:	e7da      	b.n	dae0 <LORAWAN_JoinReqHandler+0x58>
    db2a:	220e      	movs	r2, #14
    db2c:	345c      	adds	r4, #92	; 0x5c
    db2e:	7823      	ldrb	r3, [r4, #0]
    db30:	4393      	bics	r3, r2
    db32:	001a      	movs	r2, r3
    db34:	2302      	movs	r3, #2
    db36:	4313      	orrs	r3, r2
    db38:	7023      	strb	r3, [r4, #0]
    db3a:	e7d3      	b.n	dae4 <LORAWAN_JoinReqHandler+0x5c>
    db3c:	200030e4 	.word	0x200030e4
    db40:	0000c8f9 	.word	0x0000c8f9
    db44:	0000fd11 	.word	0x0000fd11
    db48:	000101d1 	.word	0x000101d1
    db4c:	0000ef35 	.word	0x0000ef35
    db50:	000100c1 	.word	0x000100c1
    db54:	200032a4 	.word	0x200032a4
    db58:	0000e661 	.word	0x0000e661

0000db5c <LORAWAN_RxHandler>:
    db5c:	b513      	push	{r0, r1, r4, lr}
    db5e:	4b0c      	ldr	r3, [pc, #48]	; (db90 <LORAWAN_RxHandler+0x34>)
    db60:	781b      	ldrb	r3, [r3, #0]
    db62:	2b08      	cmp	r3, #8
    db64:	d011      	beq.n	db8a <LORAWAN_RxHandler+0x2e>
    db66:	2b10      	cmp	r3, #16
    db68:	d001      	beq.n	db6e <LORAWAN_RxHandler+0x12>
    db6a:	2b01      	cmp	r3, #1
    db6c:	d10b      	bne.n	db86 <LORAWAN_RxHandler+0x2a>
    db6e:	466b      	mov	r3, sp
    db70:	1c9c      	adds	r4, r3, #2
    db72:	0021      	movs	r1, r4
    db74:	a801      	add	r0, sp, #4
    db76:	4b07      	ldr	r3, [pc, #28]	; (db94 <LORAWAN_RxHandler+0x38>)
    db78:	4798      	blx	r3
    db7a:	9801      	ldr	r0, [sp, #4]
    db7c:	2800      	cmp	r0, #0
    db7e:	d002      	beq.n	db86 <LORAWAN_RxHandler+0x2a>
    db80:	7821      	ldrb	r1, [r4, #0]
    db82:	4b05      	ldr	r3, [pc, #20]	; (db98 <LORAWAN_RxHandler+0x3c>)
    db84:	4798      	blx	r3
    db86:	2000      	movs	r0, #0
    db88:	bd16      	pop	{r1, r2, r4, pc}
    db8a:	4b04      	ldr	r3, [pc, #16]	; (db9c <LORAWAN_RxHandler+0x40>)
    db8c:	4798      	blx	r3
    db8e:	e7fa      	b.n	db86 <LORAWAN_RxHandler+0x2a>
    db90:	200023f3 	.word	0x200023f3
    db94:	0000e82d 	.word	0x0000e82d
    db98:	00011195 	.word	0x00011195
    db9c:	00010bed 	.word	0x00010bed

0000dba0 <LORAWAN_PostTask>:
    dba0:	b510      	push	{r4, lr}
    dba2:	4b08      	ldr	r3, [pc, #32]	; (dbc4 <LORAWAN_PostTask+0x24>)
    dba4:	0004      	movs	r4, r0
    dba6:	4798      	blx	r3
    dba8:	2201      	movs	r2, #1
    dbaa:	40a2      	lsls	r2, r4
    dbac:	4906      	ldr	r1, [pc, #24]	; (dbc8 <LORAWAN_PostTask+0x28>)
    dbae:	780b      	ldrb	r3, [r1, #0]
    dbb0:	4313      	orrs	r3, r2
    dbb2:	b2db      	uxtb	r3, r3
    dbb4:	700b      	strb	r3, [r1, #0]
    dbb6:	4b05      	ldr	r3, [pc, #20]	; (dbcc <LORAWAN_PostTask+0x2c>)
    dbb8:	4798      	blx	r3
    dbba:	2004      	movs	r0, #4
    dbbc:	4b04      	ldr	r3, [pc, #16]	; (dbd0 <LORAWAN_PostTask+0x30>)
    dbbe:	4798      	blx	r3
    dbc0:	bd10      	pop	{r4, pc}
    dbc2:	46c0      	nop			; (mov r8, r8)
    dbc4:	0000c85d 	.word	0x0000c85d
    dbc8:	2000204a 	.word	0x2000204a
    dbcc:	0000c869 	.word	0x0000c869
    dbd0:	0000d355 	.word	0x0000d355

0000dbd4 <LORAWAN_TaskHandler>:
    dbd4:	b570      	push	{r4, r5, r6, lr}
    dbd6:	2601      	movs	r6, #1
    dbd8:	4d0e      	ldr	r5, [pc, #56]	; (dc14 <LORAWAN_TaskHandler+0x40>)
    dbda:	e015      	b.n	dc08 <LORAWAN_TaskHandler+0x34>
    dbdc:	2400      	movs	r4, #0
    dbde:	782b      	ldrb	r3, [r5, #0]
    dbe0:	4123      	asrs	r3, r4
    dbe2:	4233      	tst	r3, r6
    dbe4:	d00d      	beq.n	dc02 <LORAWAN_TaskHandler+0x2e>
    dbe6:	4b0c      	ldr	r3, [pc, #48]	; (dc18 <LORAWAN_TaskHandler+0x44>)
    dbe8:	4798      	blx	r3
    dbea:	0032      	movs	r2, r6
    dbec:	40a2      	lsls	r2, r4
    dbee:	782b      	ldrb	r3, [r5, #0]
    dbf0:	00a4      	lsls	r4, r4, #2
    dbf2:	4393      	bics	r3, r2
    dbf4:	702b      	strb	r3, [r5, #0]
    dbf6:	4b09      	ldr	r3, [pc, #36]	; (dc1c <LORAWAN_TaskHandler+0x48>)
    dbf8:	4798      	blx	r3
    dbfa:	4b09      	ldr	r3, [pc, #36]	; (dc20 <LORAWAN_TaskHandler+0x4c>)
    dbfc:	58e3      	ldr	r3, [r4, r3]
    dbfe:	4798      	blx	r3
    dc00:	e7ea      	b.n	dbd8 <LORAWAN_TaskHandler+0x4>
    dc02:	3401      	adds	r4, #1
    dc04:	2c03      	cmp	r4, #3
    dc06:	d1ea      	bne.n	dbde <LORAWAN_TaskHandler+0xa>
    dc08:	7828      	ldrb	r0, [r5, #0]
    dc0a:	b2c0      	uxtb	r0, r0
    dc0c:	2800      	cmp	r0, #0
    dc0e:	d1e5      	bne.n	dbdc <LORAWAN_TaskHandler+0x8>
    dc10:	bd70      	pop	{r4, r5, r6, pc}
    dc12:	46c0      	nop			; (mov r8, r8)
    dc14:	2000204a 	.word	0x2000204a
    dc18:	0000c85d 	.word	0x0000c85d
    dc1c:	0000c869 	.word	0x0000c869
    dc20:	00017b84 	.word	0x00017b84

0000dc24 <RADIO_GetAttr>:
    dc24:	b510      	push	{r4, lr}
    dc26:	000b      	movs	r3, r1
    dc28:	281f      	cmp	r0, #31
    dc2a:	d900      	bls.n	dc2e <RADIO_GetAttr+0xa>
    dc2c:	e067      	b.n	dcfe <RADIO_GetAttr+0xda>
    dc2e:	f004 fb8b 	bl	12348 <__gnu_thumb1_case_uqi>
    dc32:	1410      	.short	0x1410
    dc34:	66201c19 	.word	0x66201c19
    dc38:	312e2a27 	.word	0x312e2a27
    dc3c:	3d3a3734 	.word	0x3d3a3734
    dc40:	46434054 	.word	0x46434054
    dc44:	66245149 	.word	0x66245149
    dc48:	66666659 	.word	0x66666659
    dc4c:	5c666617 	.word	0x5c666617
    dc50:	6360      	.short	0x6360
    dc52:	4a2c      	ldr	r2, [pc, #176]	; (dd04 <RADIO_GetAttr+0xe0>)
    dc54:	7e12      	ldrb	r2, [r2, #24]
    dc56:	701a      	strb	r2, [r3, #0]
    dc58:	e002      	b.n	dc60 <RADIO_GetAttr+0x3c>
    dc5a:	4a2a      	ldr	r2, [pc, #168]	; (dd04 <RADIO_GetAttr+0xe0>)
    dc5c:	6812      	ldr	r2, [r2, #0]
    dc5e:	601a      	str	r2, [r3, #0]
    dc60:	2000      	movs	r0, #0
    dc62:	bd10      	pop	{r4, pc}
    dc64:	4a27      	ldr	r2, [pc, #156]	; (dd04 <RADIO_GetAttr+0xe0>)
    dc66:	6852      	ldr	r2, [r2, #4]
    dc68:	e7f9      	b.n	dc5e <RADIO_GetAttr+0x3a>
    dc6a:	4a26      	ldr	r2, [pc, #152]	; (dd04 <RADIO_GetAttr+0xe0>)
    dc6c:	8a92      	ldrh	r2, [r2, #20]
    dc6e:	801a      	strh	r2, [r3, #0]
    dc70:	e7f6      	b.n	dc60 <RADIO_GetAttr+0x3c>
    dc72:	4a24      	ldr	r2, [pc, #144]	; (dd04 <RADIO_GetAttr+0xe0>)
    dc74:	3203      	adds	r2, #3
    dc76:	7fd2      	ldrb	r2, [r2, #31]
    dc78:	e7ed      	b.n	dc56 <RADIO_GetAttr+0x32>
    dc7a:	4a22      	ldr	r2, [pc, #136]	; (dd04 <RADIO_GetAttr+0xe0>)
    dc7c:	3204      	adds	r2, #4
    dc7e:	e7fa      	b.n	dc76 <RADIO_GetAttr+0x52>
    dc80:	4a20      	ldr	r2, [pc, #128]	; (dd04 <RADIO_GetAttr+0xe0>)
    dc82:	3206      	adds	r2, #6
    dc84:	e7f7      	b.n	dc76 <RADIO_GetAttr+0x52>
    dc86:	4a1f      	ldr	r2, [pc, #124]	; (dd04 <RADIO_GetAttr+0xe0>)
    dc88:	3236      	adds	r2, #54	; 0x36
    dc8a:	7812      	ldrb	r2, [r2, #0]
    dc8c:	e7e3      	b.n	dc56 <RADIO_GetAttr+0x32>
    dc8e:	4a1d      	ldr	r2, [pc, #116]	; (dd04 <RADIO_GetAttr+0xe0>)
    dc90:	3205      	adds	r2, #5
    dc92:	e7f0      	b.n	dc76 <RADIO_GetAttr+0x52>
    dc94:	4a1b      	ldr	r2, [pc, #108]	; (dd04 <RADIO_GetAttr+0xe0>)
    dc96:	3234      	adds	r2, #52	; 0x34
    dc98:	e7f7      	b.n	dc8a <RADIO_GetAttr+0x66>
    dc9a:	4a1a      	ldr	r2, [pc, #104]	; (dd04 <RADIO_GetAttr+0xe0>)
    dc9c:	8ad2      	ldrh	r2, [r2, #22]
    dc9e:	e7e6      	b.n	dc6e <RADIO_GetAttr+0x4a>
    dca0:	4a18      	ldr	r2, [pc, #96]	; (dd04 <RADIO_GetAttr+0xe0>)
    dca2:	3233      	adds	r2, #51	; 0x33
    dca4:	e7f1      	b.n	dc8a <RADIO_GetAttr+0x66>
    dca6:	4a17      	ldr	r2, [pc, #92]	; (dd04 <RADIO_GetAttr+0xe0>)
    dca8:	68d2      	ldr	r2, [r2, #12]
    dcaa:	e7d8      	b.n	dc5e <RADIO_GetAttr+0x3a>
    dcac:	4a15      	ldr	r2, [pc, #84]	; (dd04 <RADIO_GetAttr+0xe0>)
    dcae:	6892      	ldr	r2, [r2, #8]
    dcb0:	e7d5      	b.n	dc5e <RADIO_GetAttr+0x3a>
    dcb2:	4a14      	ldr	r2, [pc, #80]	; (dd04 <RADIO_GetAttr+0xe0>)
    dcb4:	3237      	adds	r2, #55	; 0x37
    dcb6:	e7e8      	b.n	dc8a <RADIO_GetAttr+0x66>
    dcb8:	4a12      	ldr	r2, [pc, #72]	; (dd04 <RADIO_GetAttr+0xe0>)
    dcba:	3238      	adds	r2, #56	; 0x38
    dcbc:	e7e5      	b.n	dc8a <RADIO_GetAttr+0x66>
    dcbe:	4a11      	ldr	r2, [pc, #68]	; (dd04 <RADIO_GetAttr+0xe0>)
    dcc0:	3239      	adds	r2, #57	; 0x39
    dcc2:	e7e2      	b.n	dc8a <RADIO_GetAttr+0x66>
    dcc4:	4a0f      	ldr	r2, [pc, #60]	; (dd04 <RADIO_GetAttr+0xe0>)
    dcc6:	4910      	ldr	r1, [pc, #64]	; (dd08 <RADIO_GetAttr+0xe4>)
    dcc8:	3202      	adds	r2, #2
    dcca:	7fd2      	ldrb	r2, [r2, #31]
    dccc:	0018      	movs	r0, r3
    dcce:	4b0f      	ldr	r3, [pc, #60]	; (dd0c <RADIO_GetAttr+0xe8>)
    dcd0:	4798      	blx	r3
    dcd2:	e7c5      	b.n	dc60 <RADIO_GetAttr+0x3c>
    dcd4:	4a0b      	ldr	r2, [pc, #44]	; (dd04 <RADIO_GetAttr+0xe0>)
    dcd6:	3202      	adds	r2, #2
    dcd8:	e7cd      	b.n	dc76 <RADIO_GetAttr+0x52>
    dcda:	4a0a      	ldr	r2, [pc, #40]	; (dd04 <RADIO_GetAttr+0xe0>)
    dcdc:	3232      	adds	r2, #50	; 0x32
    dcde:	7812      	ldrb	r2, [r2, #0]
    dce0:	b252      	sxtb	r2, r2
    dce2:	e7b8      	b.n	dc56 <RADIO_GetAttr+0x32>
    dce4:	4a07      	ldr	r2, [pc, #28]	; (dd04 <RADIO_GetAttr+0xe0>)
    dce6:	3235      	adds	r2, #53	; 0x35
    dce8:	e7cf      	b.n	dc8a <RADIO_GetAttr+0x66>
    dcea:	4906      	ldr	r1, [pc, #24]	; (dd04 <RADIO_GetAttr+0xe0>)
    dcec:	2206      	movs	r2, #6
    dcee:	313c      	adds	r1, #60	; 0x3c
    dcf0:	e7ec      	b.n	dccc <RADIO_GetAttr+0xa8>
    dcf2:	4a04      	ldr	r2, [pc, #16]	; (dd04 <RADIO_GetAttr+0xe0>)
    dcf4:	3254      	adds	r2, #84	; 0x54
    dcf6:	e7c8      	b.n	dc8a <RADIO_GetAttr+0x66>
    dcf8:	4a02      	ldr	r2, [pc, #8]	; (dd04 <RADIO_GetAttr+0xe0>)
    dcfa:	3256      	adds	r2, #86	; 0x56
    dcfc:	e7ef      	b.n	dcde <RADIO_GetAttr+0xba>
    dcfe:	2005      	movs	r0, #5
    dd00:	e7af      	b.n	dc62 <RADIO_GetAttr+0x3e>
    dd02:	46c0      	nop			; (mov r8, r8)
    dd04:	20002cf4 	.word	0x20002cf4
    dd08:	20002d0d 	.word	0x20002d0d
    dd0c:	000155bf 	.word	0x000155bf

0000dd10 <RADIO_SetAttr>:
    dd10:	b5f0      	push	{r4, r5, r6, r7, lr}
    dd12:	4b77      	ldr	r3, [pc, #476]	; (def0 <RADIO_SetAttr+0x1e0>)
    dd14:	b085      	sub	sp, #20
    dd16:	0006      	movs	r6, r0
    dd18:	000d      	movs	r5, r1
    dd1a:	4798      	blx	r3
    dd1c:	2404      	movs	r4, #4
    dd1e:	2801      	cmp	r0, #1
    dd20:	d11a      	bne.n	dd58 <RADIO_SetAttr+0x48>
    dd22:	2e1d      	cmp	r6, #29
    dd24:	d900      	bls.n	dd28 <RADIO_SetAttr+0x18>
    dd26:	e0e0      	b.n	deea <RADIO_SetAttr+0x1da>
    dd28:	0030      	movs	r0, r6
    dd2a:	f004 fb0d 	bl	12348 <__gnu_thumb1_case_uqi>
    dd2e:	514d      	.short	0x514d
    dd30:	de6d6965 	.word	0xde6d6965
    dd34:	8f8b8179 	.word	0x8f8b8179
    dd38:	a7a49b97 	.word	0xa7a49b97
    dd3c:	bcb3abde 	.word	0xbcb3abde
    dd40:	de72cdc5 	.word	0xde72cdc5
    dd44:	dededed5 	.word	0xdededed5
    dd48:	18dede0f 	.word	0x18dede0f
    dd4c:	2403      	movs	r4, #3
    dd4e:	2d00      	cmp	r5, #0
    dd50:	d002      	beq.n	dd58 <RADIO_SetAttr+0x48>
    dd52:	4b68      	ldr	r3, [pc, #416]	; (def4 <RADIO_SetAttr+0x1e4>)
    dd54:	611d      	str	r5, [r3, #16]
    dd56:	2400      	movs	r4, #0
    dd58:	0020      	movs	r0, r4
    dd5a:	b005      	add	sp, #20
    dd5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dd5e:	796e      	ldrb	r6, [r5, #5]
    dd60:	2e00      	cmp	r6, #0
    dd62:	d109      	bne.n	dd78 <RADIO_SetAttr+0x68>
    dd64:	4b63      	ldr	r3, [pc, #396]	; (def4 <RADIO_SetAttr+0x1e4>)
    dd66:	001a      	movs	r2, r3
    dd68:	649e      	str	r6, [r3, #72]	; 0x48
    dd6a:	879e      	strh	r6, [r3, #60]	; 0x3c
    dd6c:	87de      	strh	r6, [r3, #62]	; 0x3e
    dd6e:	3240      	adds	r2, #64	; 0x40
    dd70:	3341      	adds	r3, #65	; 0x41
    dd72:	7016      	strb	r6, [r2, #0]
    dd74:	701e      	strb	r6, [r3, #0]
    dd76:	e7ee      	b.n	dd56 <RADIO_SetAttr+0x46>
    dd78:	882b      	ldrh	r3, [r5, #0]
    dd7a:	2403      	movs	r4, #3
    dd7c:	9301      	str	r3, [sp, #4]
    dd7e:	2b00      	cmp	r3, #0
    dd80:	d0ea      	beq.n	dd58 <RADIO_SetAttr+0x48>
    dd82:	792f      	ldrb	r7, [r5, #4]
    dd84:	2f00      	cmp	r7, #0
    dd86:	d0e7      	beq.n	dd58 <RADIO_SetAttr+0x48>
    dd88:	20fa      	movs	r0, #250	; 0xfa
    dd8a:	0080      	lsls	r0, r0, #2
    dd8c:	0039      	movs	r1, r7
    dd8e:	4358      	muls	r0, r3
    dd90:	4b59      	ldr	r3, [pc, #356]	; (def8 <RADIO_SetAttr+0x1e8>)
    dd92:	4798      	blx	r3
    dd94:	4b59      	ldr	r3, [pc, #356]	; (defc <RADIO_SetAttr+0x1ec>)
    dd96:	4798      	blx	r3
    dd98:	4959      	ldr	r1, [pc, #356]	; (df00 <RADIO_SetAttr+0x1f0>)
    dd9a:	9002      	str	r0, [sp, #8]
    dd9c:	4b59      	ldr	r3, [pc, #356]	; (df04 <RADIO_SetAttr+0x1f4>)
    dd9e:	4798      	blx	r3
    dda0:	9003      	str	r0, [sp, #12]
    dda2:	2800      	cmp	r0, #0
    dda4:	d1d8      	bne.n	dd58 <RADIO_SetAttr+0x48>
    dda6:	2302      	movs	r3, #2
    dda8:	5eed      	ldrsh	r5, [r5, r3]
    ddaa:	9802      	ldr	r0, [sp, #8]
    ddac:	4b56      	ldr	r3, [pc, #344]	; (df08 <RADIO_SetAttr+0x1f8>)
    ddae:	4798      	blx	r3
    ddb0:	466b      	mov	r3, sp
    ddb2:	4c50      	ldr	r4, [pc, #320]	; (def4 <RADIO_SetAttr+0x1e4>)
    ddb4:	889b      	ldrh	r3, [r3, #4]
    ddb6:	64a0      	str	r0, [r4, #72]	; 0x48
    ddb8:	87a3      	strh	r3, [r4, #60]	; 0x3c
    ddba:	0023      	movs	r3, r4
    ddbc:	87e5      	strh	r5, [r4, #62]	; 0x3e
    ddbe:	3340      	adds	r3, #64	; 0x40
    ddc0:	3441      	adds	r4, #65	; 0x41
    ddc2:	701f      	strb	r7, [r3, #0]
    ddc4:	7026      	strb	r6, [r4, #0]
    ddc6:	e7c6      	b.n	dd56 <RADIO_SetAttr+0x46>
    ddc8:	782a      	ldrb	r2, [r5, #0]
    ddca:	4b4a      	ldr	r3, [pc, #296]	; (def4 <RADIO_SetAttr+0x1e4>)
    ddcc:	761a      	strb	r2, [r3, #24]
    ddce:	e7c2      	b.n	dd56 <RADIO_SetAttr+0x46>
    ddd0:	4a4e      	ldr	r2, [pc, #312]	; (df0c <RADIO_SetAttr+0x1fc>)
    ddd2:	682b      	ldr	r3, [r5, #0]
    ddd4:	1899      	adds	r1, r3, r2
    ddd6:	4a4e      	ldr	r2, [pc, #312]	; (df10 <RADIO_SetAttr+0x200>)
    ddd8:	4291      	cmp	r1, r2
    ddda:	d90a      	bls.n	ddf2 <RADIO_SetAttr+0xe2>
    dddc:	4a4d      	ldr	r2, [pc, #308]	; (df14 <RADIO_SetAttr+0x204>)
    ddde:	494e      	ldr	r1, [pc, #312]	; (df18 <RADIO_SetAttr+0x208>)
    dde0:	189a      	adds	r2, r3, r2
    dde2:	428a      	cmp	r2, r1
    dde4:	d905      	bls.n	ddf2 <RADIO_SetAttr+0xe2>
    dde6:	4a4d      	ldr	r2, [pc, #308]	; (df1c <RADIO_SetAttr+0x20c>)
    dde8:	494d      	ldr	r1, [pc, #308]	; (df20 <RADIO_SetAttr+0x210>)
    ddea:	189a      	adds	r2, r3, r2
    ddec:	2405      	movs	r4, #5
    ddee:	428a      	cmp	r2, r1
    ddf0:	d8b2      	bhi.n	dd58 <RADIO_SetAttr+0x48>
    ddf2:	4a40      	ldr	r2, [pc, #256]	; (def4 <RADIO_SetAttr+0x1e4>)
    ddf4:	6013      	str	r3, [r2, #0]
    ddf6:	e7ae      	b.n	dd56 <RADIO_SetAttr+0x46>
    ddf8:	682a      	ldr	r2, [r5, #0]
    ddfa:	4b3e      	ldr	r3, [pc, #248]	; (def4 <RADIO_SetAttr+0x1e4>)
    ddfc:	605a      	str	r2, [r3, #4]
    ddfe:	e7aa      	b.n	dd56 <RADIO_SetAttr+0x46>
    de00:	882a      	ldrh	r2, [r5, #0]
    de02:	4b3c      	ldr	r3, [pc, #240]	; (def4 <RADIO_SetAttr+0x1e4>)
    de04:	829a      	strh	r2, [r3, #20]
    de06:	e7a6      	b.n	dd56 <RADIO_SetAttr+0x46>
    de08:	4b3a      	ldr	r3, [pc, #232]	; (def4 <RADIO_SetAttr+0x1e4>)
    de0a:	782a      	ldrb	r2, [r5, #0]
    de0c:	3303      	adds	r3, #3
    de0e:	77da      	strb	r2, [r3, #31]
    de10:	e7a1      	b.n	dd56 <RADIO_SetAttr+0x46>
    de12:	782a      	ldrb	r2, [r5, #0]
    de14:	2405      	movs	r4, #5
    de16:	2a01      	cmp	r2, #1
    de18:	d89e      	bhi.n	dd58 <RADIO_SetAttr+0x48>
    de1a:	4b36      	ldr	r3, [pc, #216]	; (def4 <RADIO_SetAttr+0x1e4>)
    de1c:	3304      	adds	r3, #4
    de1e:	e7f6      	b.n	de0e <RADIO_SetAttr+0xfe>
    de20:	782a      	ldrb	r2, [r5, #0]
    de22:	2405      	movs	r4, #5
    de24:	2a01      	cmp	r2, #1
    de26:	d900      	bls.n	de2a <RADIO_SetAttr+0x11a>
    de28:	e796      	b.n	dd58 <RADIO_SetAttr+0x48>
    de2a:	4b32      	ldr	r3, [pc, #200]	; (def4 <RADIO_SetAttr+0x1e4>)
    de2c:	3306      	adds	r3, #6
    de2e:	e7ee      	b.n	de0e <RADIO_SetAttr+0xfe>
    de30:	782a      	ldrb	r2, [r5, #0]
    de32:	2405      	movs	r4, #5
    de34:	1fd3      	subs	r3, r2, #7
    de36:	2b02      	cmp	r3, #2
    de38:	d900      	bls.n	de3c <RADIO_SetAttr+0x12c>
    de3a:	e78d      	b.n	dd58 <RADIO_SetAttr+0x48>
    de3c:	4b2d      	ldr	r3, [pc, #180]	; (def4 <RADIO_SetAttr+0x1e4>)
    de3e:	3336      	adds	r3, #54	; 0x36
    de40:	701a      	strb	r2, [r3, #0]
    de42:	e788      	b.n	dd56 <RADIO_SetAttr+0x46>
    de44:	4b2b      	ldr	r3, [pc, #172]	; (def4 <RADIO_SetAttr+0x1e4>)
    de46:	782a      	ldrb	r2, [r5, #0]
    de48:	3305      	adds	r3, #5
    de4a:	e7e0      	b.n	de0e <RADIO_SetAttr+0xfe>
    de4c:	782a      	ldrb	r2, [r5, #0]
    de4e:	2405      	movs	r4, #5
    de50:	2a01      	cmp	r2, #1
    de52:	d900      	bls.n	de56 <RADIO_SetAttr+0x146>
    de54:	e780      	b.n	dd58 <RADIO_SetAttr+0x48>
    de56:	4b27      	ldr	r3, [pc, #156]	; (def4 <RADIO_SetAttr+0x1e4>)
    de58:	3334      	adds	r3, #52	; 0x34
    de5a:	e7f1      	b.n	de40 <RADIO_SetAttr+0x130>
    de5c:	882a      	ldrh	r2, [r5, #0]
    de5e:	4b25      	ldr	r3, [pc, #148]	; (def4 <RADIO_SetAttr+0x1e4>)
    de60:	82da      	strh	r2, [r3, #22]
    de62:	e778      	b.n	dd56 <RADIO_SetAttr+0x46>
    de64:	782a      	ldrb	r2, [r5, #0]
    de66:	2405      	movs	r4, #5
    de68:	1e53      	subs	r3, r2, #1
    de6a:	2b03      	cmp	r3, #3
    de6c:	d900      	bls.n	de70 <RADIO_SetAttr+0x160>
    de6e:	e773      	b.n	dd58 <RADIO_SetAttr+0x48>
    de70:	4b20      	ldr	r3, [pc, #128]	; (def4 <RADIO_SetAttr+0x1e4>)
    de72:	3333      	adds	r3, #51	; 0x33
    de74:	e7e4      	b.n	de40 <RADIO_SetAttr+0x130>
    de76:	4b1f      	ldr	r3, [pc, #124]	; (def4 <RADIO_SetAttr+0x1e4>)
    de78:	682a      	ldr	r2, [r5, #0]
    de7a:	60da      	str	r2, [r3, #12]
    de7c:	682a      	ldr	r2, [r5, #0]
    de7e:	4b1d      	ldr	r3, [pc, #116]	; (def4 <RADIO_SetAttr+0x1e4>)
    de80:	609a      	str	r2, [r3, #8]
    de82:	e768      	b.n	dd56 <RADIO_SetAttr+0x46>
    de84:	782a      	ldrb	r2, [r5, #0]
    de86:	2405      	movs	r4, #5
    de88:	2a03      	cmp	r2, #3
    de8a:	d900      	bls.n	de8e <RADIO_SetAttr+0x17e>
    de8c:	e764      	b.n	dd58 <RADIO_SetAttr+0x48>
    de8e:	4b19      	ldr	r3, [pc, #100]	; (def4 <RADIO_SetAttr+0x1e4>)
    de90:	3337      	adds	r3, #55	; 0x37
    de92:	e7d5      	b.n	de40 <RADIO_SetAttr+0x130>
    de94:	782a      	ldrb	r2, [r5, #0]
    de96:	2405      	movs	r4, #5
    de98:	1e53      	subs	r3, r2, #1
    de9a:	2b16      	cmp	r3, #22
    de9c:	d900      	bls.n	dea0 <RADIO_SetAttr+0x190>
    de9e:	e75b      	b.n	dd58 <RADIO_SetAttr+0x48>
    dea0:	4b14      	ldr	r3, [pc, #80]	; (def4 <RADIO_SetAttr+0x1e4>)
    dea2:	3338      	adds	r3, #56	; 0x38
    dea4:	e7cc      	b.n	de40 <RADIO_SetAttr+0x130>
    dea6:	782a      	ldrb	r2, [r5, #0]
    dea8:	2405      	movs	r4, #5
    deaa:	1e53      	subs	r3, r2, #1
    deac:	2b16      	cmp	r3, #22
    deae:	d900      	bls.n	deb2 <RADIO_SetAttr+0x1a2>
    deb0:	e752      	b.n	dd58 <RADIO_SetAttr+0x48>
    deb2:	4b10      	ldr	r3, [pc, #64]	; (def4 <RADIO_SetAttr+0x1e4>)
    deb4:	3339      	adds	r3, #57	; 0x39
    deb6:	e7c3      	b.n	de40 <RADIO_SetAttr+0x130>
    deb8:	4b0e      	ldr	r3, [pc, #56]	; (def4 <RADIO_SetAttr+0x1e4>)
    deba:	0029      	movs	r1, r5
    debc:	3302      	adds	r3, #2
    debe:	7fda      	ldrb	r2, [r3, #31]
    dec0:	4818      	ldr	r0, [pc, #96]	; (df24 <RADIO_SetAttr+0x214>)
    dec2:	4b19      	ldr	r3, [pc, #100]	; (df28 <RADIO_SetAttr+0x218>)
    dec4:	4798      	blx	r3
    dec6:	e746      	b.n	dd56 <RADIO_SetAttr+0x46>
    dec8:	782b      	ldrb	r3, [r5, #0]
    deca:	1c1a      	adds	r2, r3, #0
    decc:	2b08      	cmp	r3, #8
    dece:	d900      	bls.n	ded2 <RADIO_SetAttr+0x1c2>
    ded0:	2208      	movs	r2, #8
    ded2:	4b08      	ldr	r3, [pc, #32]	; (def4 <RADIO_SetAttr+0x1e4>)
    ded4:	3302      	adds	r3, #2
    ded6:	e79a      	b.n	de0e <RADIO_SetAttr+0xfe>
    ded8:	2405      	movs	r4, #5
    deda:	782a      	ldrb	r2, [r5, #0]
    dedc:	1fd3      	subs	r3, r2, #7
    dede:	42a3      	cmp	r3, r4
    dee0:	d900      	bls.n	dee4 <RADIO_SetAttr+0x1d4>
    dee2:	e739      	b.n	dd58 <RADIO_SetAttr+0x48>
    dee4:	4b03      	ldr	r3, [pc, #12]	; (def4 <RADIO_SetAttr+0x1e4>)
    dee6:	3335      	adds	r3, #53	; 0x35
    dee8:	e7aa      	b.n	de40 <RADIO_SetAttr+0x130>
    deea:	2405      	movs	r4, #5
    deec:	e734      	b.n	dd58 <RADIO_SetAttr+0x48>
    deee:	46c0      	nop			; (mov r8, r8)
    def0:	0000e645 	.word	0x0000e645
    def4:	20002cf4 	.word	0x20002cf4
    def8:	00012471 	.word	0x00012471
    defc:	00013639 	.word	0x00013639
    df00:	43fa0000 	.word	0x43fa0000
    df04:	0001266d 	.word	0x0001266d
    df08:	00012751 	.word	0x00012751
    df0c:	f7d58bc0 	.word	0xf7d58bc0
    df10:	0243d580 	.word	0x0243d580
    df14:	e78fe580 	.word	0xe78fe580
    df18:	06dac2c0 	.word	0x06dac2c0
    df1c:	cc9eec80 	.word	0xcc9eec80
    df20:	096ae380 	.word	0x096ae380
    df24:	20002d0d 	.word	0x20002d0d
    df28:	000155bf 	.word	0x000155bf

0000df2c <RADIO_Init>:
    df2c:	b510      	push	{r4, lr}
    df2e:	4b0c      	ldr	r3, [pc, #48]	; (df60 <RADIO_Init+0x34>)
    df30:	4798      	blx	r3
    df32:	4b0c      	ldr	r3, [pc, #48]	; (df64 <RADIO_Init+0x38>)
    df34:	201f      	movs	r0, #31
    df36:	4798      	blx	r3
    df38:	4c0b      	ldr	r4, [pc, #44]	; (df68 <RADIO_Init+0x3c>)
    df3a:	490c      	ldr	r1, [pc, #48]	; (df6c <RADIO_Init+0x40>)
    df3c:	2001      	movs	r0, #1
    df3e:	47a0      	blx	r4
    df40:	490b      	ldr	r1, [pc, #44]	; (df70 <RADIO_Init+0x44>)
    df42:	2002      	movs	r0, #2
    df44:	47a0      	blx	r4
    df46:	490b      	ldr	r1, [pc, #44]	; (df74 <RADIO_Init+0x48>)
    df48:	2004      	movs	r0, #4
    df4a:	47a0      	blx	r4
    df4c:	490a      	ldr	r1, [pc, #40]	; (df78 <RADIO_Init+0x4c>)
    df4e:	2008      	movs	r0, #8
    df50:	47a0      	blx	r4
    df52:	490a      	ldr	r1, [pc, #40]	; (df7c <RADIO_Init+0x50>)
    df54:	2010      	movs	r0, #16
    df56:	47a0      	blx	r4
    df58:	4909      	ldr	r1, [pc, #36]	; (df80 <RADIO_Init+0x54>)
    df5a:	2020      	movs	r0, #32
    df5c:	47a0      	blx	r4
    df5e:	bd10      	pop	{r4, pc}
    df60:	0000ed41 	.word	0x0000ed41
    df64:	0000e651 	.word	0x0000e651
    df68:	0000c791 	.word	0x0000c791
    df6c:	0000e3dd 	.word	0x0000e3dd
    df70:	0000e455 	.word	0x0000e455
    df74:	0000e4c5 	.word	0x0000e4c5
    df78:	0000e515 	.word	0x0000e515
    df7c:	0000e53d 	.word	0x0000e53d
    df80:	0000e565 	.word	0x0000e565

0000df84 <Radio_WriteFrequency>:
    df84:	b570      	push	{r4, r5, r6, lr}
    df86:	490d      	ldr	r1, [pc, #52]	; (dfbc <Radio_WriteFrequency+0x38>)
    df88:	4d0d      	ldr	r5, [pc, #52]	; (dfc0 <Radio_WriteFrequency+0x3c>)
    df8a:	0006      	movs	r6, r0
    df8c:	47a8      	blx	r5
    df8e:	4b0d      	ldr	r3, [pc, #52]	; (dfc4 <Radio_WriteFrequency+0x40>)
    df90:	0004      	movs	r4, r0
    df92:	490a      	ldr	r1, [pc, #40]	; (dfbc <Radio_WriteFrequency+0x38>)
    df94:	0030      	movs	r0, r6
    df96:	4798      	blx	r3
    df98:	0208      	lsls	r0, r1, #8
    df9a:	4908      	ldr	r1, [pc, #32]	; (dfbc <Radio_WriteFrequency+0x38>)
    df9c:	47a8      	blx	r5
    df9e:	0224      	lsls	r4, r4, #8
    dfa0:	1904      	adds	r4, r0, r4
    dfa2:	0c21      	lsrs	r1, r4, #16
    dfa4:	4d08      	ldr	r5, [pc, #32]	; (dfc8 <Radio_WriteFrequency+0x44>)
    dfa6:	b2c9      	uxtb	r1, r1
    dfa8:	2006      	movs	r0, #6
    dfaa:	47a8      	blx	r5
    dfac:	0a21      	lsrs	r1, r4, #8
    dfae:	b2c9      	uxtb	r1, r1
    dfb0:	2007      	movs	r0, #7
    dfb2:	47a8      	blx	r5
    dfb4:	b2e1      	uxtb	r1, r4
    dfb6:	2008      	movs	r0, #8
    dfb8:	47a8      	blx	r5
    dfba:	bd70      	pop	{r4, r5, r6, pc}
    dfbc:	00003d09 	.word	0x00003d09
    dfc0:	0001235d 	.word	0x0001235d
    dfc4:	00012469 	.word	0x00012469
    dfc8:	0000c6bd 	.word	0x0000c6bd

0000dfcc <Radio_WriteConfiguration>:
    dfcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    dfce:	4cb0      	ldr	r4, [pc, #704]	; (e290 <Radio_WriteConfiguration+0x2c4>)
    dfd0:	2200      	movs	r2, #0
    dfd2:	0023      	movs	r3, r4
    dfd4:	b085      	sub	sp, #20
    dfd6:	9002      	str	r0, [sp, #8]
    dfd8:	3334      	adds	r3, #52	; 0x34
    dfda:	0010      	movs	r0, r2
    dfdc:	7819      	ldrb	r1, [r3, #0]
    dfde:	4bad      	ldr	r3, [pc, #692]	; (e294 <Radio_WriteConfiguration+0x2c8>)
    dfe0:	4798      	blx	r3
    dfe2:	4bad      	ldr	r3, [pc, #692]	; (e298 <Radio_WriteConfiguration+0x2cc>)
    dfe4:	6820      	ldr	r0, [r4, #0]
    dfe6:	4798      	blx	r3
    dfe8:	1ce3      	adds	r3, r4, #3
    dfea:	1d62      	adds	r2, r4, #5
    dfec:	7fdb      	ldrb	r3, [r3, #31]
    dfee:	7fd2      	ldrb	r2, [r2, #31]
    dff0:	b25b      	sxtb	r3, r3
    dff2:	4eaa      	ldr	r6, [pc, #680]	; (e29c <Radio_WriteConfiguration+0x2d0>)
    dff4:	4daa      	ldr	r5, [pc, #680]	; (e2a0 <Radio_WriteConfiguration+0x2d4>)
    dff6:	2a00      	cmp	r2, #0
    dff8:	d000      	beq.n	dffc <Radio_WriteConfiguration+0x30>
    dffa:	e0fc      	b.n	e1f6 <Radio_WriteConfiguration+0x22a>
    dffc:	1c1f      	adds	r7, r3, #0
    dffe:	2b0f      	cmp	r3, #15
    e000:	dc00      	bgt.n	e004 <Radio_WriteConfiguration+0x38>
    e002:	e0ec      	b.n	e1de <Radio_WriteConfiguration+0x212>
    e004:	270f      	movs	r7, #15
    e006:	b27b      	sxtb	r3, r7
    e008:	204d      	movs	r0, #77	; 0x4d
    e00a:	9301      	str	r3, [sp, #4]
    e00c:	47b0      	blx	r6
    e00e:	21f8      	movs	r1, #248	; 0xf8
    e010:	4008      	ands	r0, r1
    e012:	39f4      	subs	r1, #244	; 0xf4
    e014:	4301      	orrs	r1, r0
    e016:	204d      	movs	r0, #77	; 0x4d
    e018:	47a8      	blx	r5
    e01a:	b27b      	sxtb	r3, r7
    e01c:	2b00      	cmp	r3, #0
    e01e:	db00      	blt.n	e022 <Radio_WriteConfiguration+0x56>
    e020:	e0e4      	b.n	e1ec <Radio_WriteConfiguration+0x220>
    e022:	3703      	adds	r7, #3
    e024:	b2f9      	uxtb	r1, r7
    e026:	2720      	movs	r7, #32
    e028:	4339      	orrs	r1, r7
    e02a:	2009      	movs	r0, #9
    e02c:	47a8      	blx	r5
    e02e:	0023      	movs	r3, r4
    e030:	3334      	adds	r3, #52	; 0x34
    e032:	781f      	ldrb	r7, [r3, #0]
    e034:	2f01      	cmp	r7, #1
    e036:	d000      	beq.n	e03a <Radio_WriteConfiguration+0x6e>
    e038:	e144      	b.n	e2c4 <Radio_WriteConfiguration+0x2f8>
    e03a:	7e21      	ldrb	r1, [r4, #24]
    e03c:	2039      	movs	r0, #57	; 0x39
    e03e:	47a8      	blx	r5
    e040:	4b98      	ldr	r3, [pc, #608]	; (e2a4 <Radio_WriteConfiguration+0x2d8>)
    e042:	201d      	movs	r0, #29
    e044:	7819      	ldrb	r1, [r3, #0]
    e046:	0023      	movs	r3, r4
    e048:	3333      	adds	r3, #51	; 0x33
    e04a:	781b      	ldrb	r3, [r3, #0]
    e04c:	0109      	lsls	r1, r1, #4
    e04e:	005b      	lsls	r3, r3, #1
    e050:	4319      	orrs	r1, r3
    e052:	1de3      	adds	r3, r4, #7
    e054:	7fdb      	ldrb	r3, [r3, #31]
    e056:	401f      	ands	r7, r3
    e058:	4339      	orrs	r1, r7
    e05a:	b2c9      	uxtb	r1, r1
    e05c:	47a8      	blx	r5
    e05e:	1d23      	adds	r3, r4, #4
    e060:	7fd9      	ldrb	r1, [r3, #31]
    e062:	2304      	movs	r3, #4
    e064:	0089      	lsls	r1, r1, #2
    e066:	4019      	ands	r1, r3
    e068:	0023      	movs	r3, r4
    e06a:	3335      	adds	r3, #53	; 0x35
    e06c:	781b      	ldrb	r3, [r3, #0]
    e06e:	201e      	movs	r0, #30
    e070:	011b      	lsls	r3, r3, #4
    e072:	4319      	orrs	r1, r3
    e074:	9b02      	ldr	r3, [sp, #8]
    e076:	059b      	lsls	r3, r3, #22
    e078:	0f9b      	lsrs	r3, r3, #30
    e07a:	4319      	orrs	r1, r3
    e07c:	b2c9      	uxtb	r1, r1
    e07e:	47a8      	blx	r5
    e080:	2300      	movs	r3, #0
    e082:	8ae1      	ldrh	r1, [r4, #22]
    e084:	4299      	cmp	r1, r3
    e086:	d011      	beq.n	e0ac <Radio_WriteConfiguration+0xe0>
    e088:	4a86      	ldr	r2, [pc, #536]	; (e2a4 <Radio_WriteConfiguration+0x2d8>)
    e08a:	7812      	ldrb	r2, [r2, #0]
    e08c:	2a08      	cmp	r2, #8
    e08e:	d100      	bne.n	e092 <Radio_WriteConfiguration+0xc6>
    e090:	e0e4      	b.n	e25c <Radio_WriteConfiguration+0x290>
    e092:	2a09      	cmp	r2, #9
    e094:	d100      	bne.n	e098 <Radio_WriteConfiguration+0xcc>
    e096:	e0e3      	b.n	e260 <Radio_WriteConfiguration+0x294>
    e098:	2a07      	cmp	r2, #7
    e09a:	d000      	beq.n	e09e <Radio_WriteConfiguration+0xd2>
    e09c:	e0e3      	b.n	e266 <Radio_WriteConfiguration+0x29a>
    e09e:	337d      	adds	r3, #125	; 0x7d
    e0a0:	4359      	muls	r1, r3
    e0a2:	0023      	movs	r3, r4
    e0a4:	3335      	adds	r3, #53	; 0x35
    e0a6:	781b      	ldrb	r3, [r3, #0]
    e0a8:	40d9      	lsrs	r1, r3
    e0aa:	000b      	movs	r3, r1
    e0ac:	b2d9      	uxtb	r1, r3
    e0ae:	2024      	movs	r0, #36	; 0x24
    e0b0:	4d7b      	ldr	r5, [pc, #492]	; (e2a0 <Radio_WriteConfiguration+0x2d4>)
    e0b2:	47a8      	blx	r5
    e0b4:	466b      	mov	r3, sp
    e0b6:	201f      	movs	r0, #31
    e0b8:	7a19      	ldrb	r1, [r3, #8]
    e0ba:	47a8      	blx	r5
    e0bc:	2026      	movs	r0, #38	; 0x26
    e0be:	47b0      	blx	r6
    e0c0:	0023      	movs	r3, r4
    e0c2:	3335      	adds	r3, #53	; 0x35
    e0c4:	781b      	ldrb	r3, [r3, #0]
    e0c6:	2b0c      	cmp	r3, #12
    e0c8:	d105      	bne.n	e0d6 <Radio_WriteConfiguration+0x10a>
    e0ca:	0023      	movs	r3, r4
    e0cc:	3336      	adds	r3, #54	; 0x36
    e0ce:	781b      	ldrb	r3, [r3, #0]
    e0d0:	3b07      	subs	r3, #7
    e0d2:	2b01      	cmp	r3, #1
    e0d4:	d906      	bls.n	e0e4 <Radio_WriteConfiguration+0x118>
    e0d6:	6b62      	ldr	r2, [r4, #52]	; 0x34
    e0d8:	4b73      	ldr	r3, [pc, #460]	; (e2a8 <Radio_WriteConfiguration+0x2dc>)
    e0da:	4013      	ands	r3, r2
    e0dc:	4a73      	ldr	r2, [pc, #460]	; (e2ac <Radio_WriteConfiguration+0x2e0>)
    e0de:	4293      	cmp	r3, r2
    e0e0:	d000      	beq.n	e0e4 <Radio_WriteConfiguration+0x118>
    e0e2:	e0c2      	b.n	e26a <Radio_WriteConfiguration+0x29e>
    e0e4:	2108      	movs	r1, #8
    e0e6:	4308      	orrs	r0, r1
    e0e8:	b2c0      	uxtb	r0, r0
    e0ea:	2104      	movs	r1, #4
    e0ec:	4301      	orrs	r1, r0
    e0ee:	2026      	movs	r0, #38	; 0x26
    e0f0:	47a8      	blx	r5
    e0f2:	2031      	movs	r0, #49	; 0x31
    e0f4:	47b0      	blx	r6
    e0f6:	21f8      	movs	r1, #248	; 0xf8
    e0f8:	4008      	ands	r0, r1
    e0fa:	39f5      	subs	r1, #245	; 0xf5
    e0fc:	4301      	orrs	r1, r0
    e0fe:	2031      	movs	r0, #49	; 0x31
    e100:	47a8      	blx	r5
    e102:	210a      	movs	r1, #10
    e104:	2037      	movs	r0, #55	; 0x37
    e106:	47a8      	blx	r5
    e108:	0023      	movs	r3, r4
    e10a:	3331      	adds	r3, #49	; 0x31
    e10c:	781b      	ldrb	r3, [r3, #0]
    e10e:	2b12      	cmp	r3, #18
    e110:	d11e      	bne.n	e150 <Radio_WriteConfiguration+0x184>
    e112:	0023      	movs	r3, r4
    e114:	3336      	adds	r3, #54	; 0x36
    e116:	781b      	ldrb	r3, [r3, #0]
    e118:	3b07      	subs	r3, #7
    e11a:	2b01      	cmp	r3, #1
    e11c:	d80b      	bhi.n	e136 <Radio_WriteConfiguration+0x16a>
    e11e:	2031      	movs	r0, #49	; 0x31
    e120:	47b0      	blx	r6
    e122:	217f      	movs	r1, #127	; 0x7f
    e124:	4001      	ands	r1, r0
    e126:	2031      	movs	r0, #49	; 0x31
    e128:	47a8      	blx	r5
    e12a:	2140      	movs	r1, #64	; 0x40
    e12c:	202f      	movs	r0, #47	; 0x2f
    e12e:	47a8      	blx	r5
    e130:	2100      	movs	r1, #0
    e132:	2030      	movs	r0, #48	; 0x30
    e134:	47a8      	blx	r5
    e136:	0023      	movs	r3, r4
    e138:	3336      	adds	r3, #54	; 0x36
    e13a:	781b      	ldrb	r3, [r3, #0]
    e13c:	2b09      	cmp	r3, #9
    e13e:	d107      	bne.n	e150 <Radio_WriteConfiguration+0x184>
    e140:	2031      	movs	r0, #49	; 0x31
    e142:	47b0      	blx	r6
    e144:	2180      	movs	r1, #128	; 0x80
    e146:	4249      	negs	r1, r1
    e148:	4301      	orrs	r1, r0
    e14a:	b2c9      	uxtb	r1, r1
    e14c:	2031      	movs	r0, #49	; 0x31
    e14e:	47a8      	blx	r5
    e150:	2033      	movs	r0, #51	; 0x33
    e152:	47b0      	blx	r6
    e154:	1da3      	adds	r3, r4, #6
    e156:	7fd9      	ldrb	r1, [r3, #31]
    e158:	2340      	movs	r3, #64	; 0x40
    e15a:	0189      	lsls	r1, r1, #6
    e15c:	4398      	bics	r0, r3
    e15e:	4019      	ands	r1, r3
    e160:	4301      	orrs	r1, r0
    e162:	b2c9      	uxtb	r1, r1
    e164:	2033      	movs	r0, #51	; 0x33
    e166:	47a8      	blx	r5
    e168:	8aa1      	ldrh	r1, [r4, #20]
    e16a:	2020      	movs	r0, #32
    e16c:	0a09      	lsrs	r1, r1, #8
    e16e:	47a8      	blx	r5
    e170:	7d21      	ldrb	r1, [r4, #20]
    e172:	2021      	movs	r0, #33	; 0x21
    e174:	47a8      	blx	r5
    e176:	2100      	movs	r1, #0
    e178:	200d      	movs	r0, #13
    e17a:	47a8      	blx	r5
    e17c:	2100      	movs	r1, #0
    e17e:	200e      	movs	r0, #14
    e180:	47a8      	blx	r5
    e182:	2100      	movs	r1, #0
    e184:	200f      	movs	r0, #15
    e186:	47a8      	blx	r5
    e188:	0023      	movs	r3, r4
    e18a:	3331      	adds	r3, #49	; 0x31
    e18c:	781b      	ldrb	r3, [r3, #0]
    e18e:	2b12      	cmp	r3, #18
    e190:	d120      	bne.n	e1d4 <Radio_WriteConfiguration+0x208>
    e192:	0023      	movs	r3, r4
    e194:	3336      	adds	r3, #54	; 0x36
    e196:	781b      	ldrb	r3, [r3, #0]
    e198:	2b09      	cmp	r3, #9
    e19a:	d000      	beq.n	e19e <Radio_WriteConfiguration+0x1d2>
    e19c:	e072      	b.n	e284 <Radio_WriteConfiguration+0x2b8>
    e19e:	4a44      	ldr	r2, [pc, #272]	; (e2b0 <Radio_WriteConfiguration+0x2e4>)
    e1a0:	6823      	ldr	r3, [r4, #0]
    e1a2:	1899      	adds	r1, r3, r2
    e1a4:	4a43      	ldr	r2, [pc, #268]	; (e2b4 <Radio_WriteConfiguration+0x2e8>)
    e1a6:	4291      	cmp	r1, r2
    e1a8:	d862      	bhi.n	e270 <Radio_WriteConfiguration+0x2a4>
    e1aa:	2102      	movs	r1, #2
    e1ac:	2036      	movs	r0, #54	; 0x36
    e1ae:	47a8      	blx	r5
    e1b0:	2164      	movs	r1, #100	; 0x64
    e1b2:	203a      	movs	r0, #58	; 0x3a
    e1b4:	47a8      	blx	r5
    e1b6:	0023      	movs	r3, r4
    e1b8:	3336      	adds	r3, #54	; 0x36
    e1ba:	781b      	ldrb	r3, [r3, #0]
    e1bc:	2165      	movs	r1, #101	; 0x65
    e1be:	203a      	movs	r0, #58	; 0x3a
    e1c0:	2b09      	cmp	r3, #9
    e1c2:	d162      	bne.n	e28a <Radio_WriteConfiguration+0x2be>
    e1c4:	3406      	adds	r4, #6
    e1c6:	7fe3      	ldrb	r3, [r4, #31]
    e1c8:	2b01      	cmp	r3, #1
    e1ca:	d15e      	bne.n	e28a <Radio_WriteConfiguration+0x2be>
    e1cc:	47a8      	blx	r5
    e1ce:	2119      	movs	r1, #25
    e1d0:	203b      	movs	r0, #59	; 0x3b
    e1d2:	47a8      	blx	r5
    e1d4:	21ff      	movs	r1, #255	; 0xff
    e1d6:	2012      	movs	r0, #18
    e1d8:	47a8      	blx	r5
    e1da:	b005      	add	sp, #20
    e1dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e1de:	b25b      	sxtb	r3, r3
    e1e0:	3303      	adds	r3, #3
    e1e2:	db00      	blt.n	e1e6 <Radio_WriteConfiguration+0x21a>
    e1e4:	e70f      	b.n	e006 <Radio_WriteConfiguration+0x3a>
    e1e6:	4b34      	ldr	r3, [pc, #208]	; (e2b8 <Radio_WriteConfiguration+0x2ec>)
    e1e8:	781f      	ldrb	r7, [r3, #0]
    e1ea:	e70c      	b.n	e006 <Radio_WriteConfiguration+0x3a>
    e1ec:	2170      	movs	r1, #112	; 0x70
    e1ee:	9b01      	ldr	r3, [sp, #4]
    e1f0:	4319      	orrs	r1, r3
    e1f2:	b2c9      	uxtb	r1, r1
    e1f4:	e719      	b.n	e02a <Radio_WriteConfiguration+0x5e>
    e1f6:	2b01      	cmp	r3, #1
    e1f8:	dd07      	ble.n	e20a <Radio_WriteConfiguration+0x23e>
    e1fa:	2714      	movs	r7, #20
    e1fc:	2b13      	cmp	r3, #19
    e1fe:	dc06      	bgt.n	e20e <Radio_WriteConfiguration+0x242>
    e200:	1c1f      	adds	r7, r3, #0
    e202:	2b11      	cmp	r3, #17
    e204:	dd02      	ble.n	e20c <Radio_WriteConfiguration+0x240>
    e206:	2711      	movs	r7, #17
    e208:	e000      	b.n	e20c <Radio_WriteConfiguration+0x240>
    e20a:	2702      	movs	r7, #2
    e20c:	b27f      	sxtb	r7, r7
    e20e:	200b      	movs	r0, #11
    e210:	47b0      	blx	r6
    e212:	9003      	str	r0, [sp, #12]
    e214:	204d      	movs	r0, #77	; 0x4d
    e216:	47b0      	blx	r6
    e218:	2307      	movs	r3, #7
    e21a:	4398      	bics	r0, r3
    e21c:	b2c1      	uxtb	r1, r0
    e21e:	2f14      	cmp	r7, #20
    e220:	d112      	bne.n	e248 <Radio_WriteConfiguration+0x27c>
    e222:	4319      	orrs	r1, r3
    e224:	9b03      	ldr	r3, [sp, #12]
    e226:	37cb      	adds	r7, #203	; 0xcb
    e228:	403b      	ands	r3, r7
    e22a:	001f      	movs	r7, r3
    e22c:	230f      	movs	r3, #15
    e22e:	9301      	str	r3, [sp, #4]
    e230:	204d      	movs	r0, #77	; 0x4d
    e232:	47a8      	blx	r5
    e234:	2180      	movs	r1, #128	; 0x80
    e236:	9b01      	ldr	r3, [sp, #4]
    e238:	4249      	negs	r1, r1
    e23a:	4319      	orrs	r1, r3
    e23c:	b2c9      	uxtb	r1, r1
    e23e:	2009      	movs	r0, #9
    e240:	47a8      	blx	r5
    e242:	0039      	movs	r1, r7
    e244:	200b      	movs	r0, #11
    e246:	e6f1      	b.n	e02c <Radio_WriteConfiguration+0x60>
    e248:	3f02      	subs	r7, #2
    e24a:	b27b      	sxtb	r3, r7
    e24c:	2720      	movs	r7, #32
    e24e:	2004      	movs	r0, #4
    e250:	9301      	str	r3, [sp, #4]
    e252:	9b03      	ldr	r3, [sp, #12]
    e254:	4301      	orrs	r1, r0
    e256:	431f      	orrs	r7, r3
    e258:	b2ff      	uxtb	r7, r7
    e25a:	e7e9      	b.n	e230 <Radio_WriteConfiguration+0x264>
    e25c:	23fa      	movs	r3, #250	; 0xfa
    e25e:	e71f      	b.n	e0a0 <Radio_WriteConfiguration+0xd4>
    e260:	23fa      	movs	r3, #250	; 0xfa
    e262:	005b      	lsls	r3, r3, #1
    e264:	e71c      	b.n	e0a0 <Radio_WriteConfiguration+0xd4>
    e266:	0019      	movs	r1, r3
    e268:	e71b      	b.n	e0a2 <Radio_WriteConfiguration+0xd6>
    e26a:	21f7      	movs	r1, #247	; 0xf7
    e26c:	4008      	ands	r0, r1
    e26e:	e73c      	b.n	e0ea <Radio_WriteConfiguration+0x11e>
    e270:	4a12      	ldr	r2, [pc, #72]	; (e2bc <Radio_WriteConfiguration+0x2f0>)
    e272:	189b      	adds	r3, r3, r2
    e274:	4a12      	ldr	r2, [pc, #72]	; (e2c0 <Radio_WriteConfiguration+0x2f4>)
    e276:	4293      	cmp	r3, r2
    e278:	d804      	bhi.n	e284 <Radio_WriteConfiguration+0x2b8>
    e27a:	2102      	movs	r1, #2
    e27c:	2036      	movs	r0, #54	; 0x36
    e27e:	47a8      	blx	r5
    e280:	217f      	movs	r1, #127	; 0x7f
    e282:	e796      	b.n	e1b2 <Radio_WriteConfiguration+0x1e6>
    e284:	2103      	movs	r1, #3
    e286:	2036      	movs	r0, #54	; 0x36
    e288:	e794      	b.n	e1b4 <Radio_WriteConfiguration+0x1e8>
    e28a:	47a8      	blx	r5
    e28c:	211d      	movs	r1, #29
    e28e:	e79f      	b.n	e1d0 <Radio_WriteConfiguration+0x204>
    e290:	20002cf4 	.word	0x20002cf4
    e294:	0000d379 	.word	0x0000d379
    e298:	0000df85 	.word	0x0000df85
    e29c:	0000c6e5 	.word	0x0000c6e5
    e2a0:	0000c6bd 	.word	0x0000c6bd
    e2a4:	20002d2a 	.word	0x20002d2a
    e2a8:	00ffff00 	.word	0x00ffff00
    e2ac:	00070b00 	.word	0x00070b00
    e2b0:	cc9eec80 	.word	0xcc9eec80
    e2b4:	096ae380 	.word	0x096ae380
    e2b8:	00017b90 	.word	0x00017b90
    e2bc:	e78fe580 	.word	0xe78fe580
    e2c0:	06dac2c0 	.word	0x06dac2c0
    e2c4:	6863      	ldr	r3, [r4, #4]
    e2c6:	492c      	ldr	r1, [pc, #176]	; (e378 <Radio_WriteConfiguration+0x3ac>)
    e2c8:	0218      	lsls	r0, r3, #8
    e2ca:	4b2c      	ldr	r3, [pc, #176]	; (e37c <Radio_WriteConfiguration+0x3b0>)
    e2cc:	4798      	blx	r3
    e2ce:	0007      	movs	r7, r0
    e2d0:	0a01      	lsrs	r1, r0, #8
    e2d2:	b2c9      	uxtb	r1, r1
    e2d4:	2004      	movs	r0, #4
    e2d6:	47a8      	blx	r5
    e2d8:	b2f9      	uxtb	r1, r7
    e2da:	2005      	movs	r0, #5
    e2dc:	47a8      	blx	r5
    e2de:	4b27      	ldr	r3, [pc, #156]	; (e37c <Radio_WriteConfiguration+0x3b0>)
    e2e0:	68a1      	ldr	r1, [r4, #8]
    e2e2:	4827      	ldr	r0, [pc, #156]	; (e380 <Radio_WriteConfiguration+0x3b4>)
    e2e4:	4798      	blx	r3
    e2e6:	0007      	movs	r7, r0
    e2e8:	0a01      	lsrs	r1, r0, #8
    e2ea:	b2c9      	uxtb	r1, r1
    e2ec:	2002      	movs	r0, #2
    e2ee:	47a8      	blx	r5
    e2f0:	b2f9      	uxtb	r1, r7
    e2f2:	2003      	movs	r0, #3
    e2f4:	47a8      	blx	r5
    e2f6:	2100      	movs	r1, #0
    e2f8:	205d      	movs	r0, #93	; 0x5d
    e2fa:	47a8      	blx	r5
    e2fc:	8aa1      	ldrh	r1, [r4, #20]
    e2fe:	2025      	movs	r0, #37	; 0x25
    e300:	0a09      	lsrs	r1, r1, #8
    e302:	47a8      	blx	r5
    e304:	7d21      	ldrb	r1, [r4, #20]
    e306:	2026      	movs	r0, #38	; 0x26
    e308:	47a8      	blx	r5
    e30a:	219e      	movs	r1, #158	; 0x9e
    e30c:	200d      	movs	r0, #13
    e30e:	47a8      	blx	r5
    e310:	21bf      	movs	r1, #191	; 0xbf
    e312:	2035      	movs	r0, #53	; 0x35
    e314:	47a8      	blx	r5
    e316:	200a      	movs	r0, #10
    e318:	47b0      	blx	r6
    e31a:	0023      	movs	r3, r4
    e31c:	3337      	adds	r3, #55	; 0x37
    e31e:	7819      	ldrb	r1, [r3, #0]
    e320:	2360      	movs	r3, #96	; 0x60
    e322:	0149      	lsls	r1, r1, #5
    e324:	4398      	bics	r0, r3
    e326:	4301      	orrs	r1, r0
    e328:	b2c9      	uxtb	r1, r1
    e32a:	200a      	movs	r0, #10
    e32c:	47a8      	blx	r5
    e32e:	1d23      	adds	r3, r4, #4
    e330:	7fdb      	ldrb	r3, [r3, #31]
    e332:	21c0      	movs	r1, #192	; 0xc0
    e334:	2b00      	cmp	r3, #0
    e336:	d000      	beq.n	e33a <Radio_WriteConfiguration+0x36e>
    e338:	3110      	adds	r1, #16
    e33a:	2030      	movs	r0, #48	; 0x30
    e33c:	47a8      	blx	r5
    e33e:	2600      	movs	r6, #0
    e340:	1ca3      	adds	r3, r4, #2
    e342:	7fd9      	ldrb	r1, [r3, #31]
    e344:	428e      	cmp	r6, r1
    e346:	d30d      	bcc.n	e364 <Radio_WriteConfiguration+0x398>
    e348:	2900      	cmp	r1, #0
    e34a:	d003      	beq.n	e354 <Radio_WriteConfiguration+0x388>
    e34c:	2310      	movs	r3, #16
    e34e:	3901      	subs	r1, #1
    e350:	4319      	orrs	r1, r3
    e352:	b2c9      	uxtb	r1, r1
    e354:	2027      	movs	r0, #39	; 0x27
    e356:	47a8      	blx	r5
    e358:	21ff      	movs	r1, #255	; 0xff
    e35a:	203e      	movs	r0, #62	; 0x3e
    e35c:	47a8      	blx	r5
    e35e:	21ff      	movs	r1, #255	; 0xff
    e360:	203f      	movs	r0, #63	; 0x3f
    e362:	e739      	b.n	e1d8 <Radio_WriteConfiguration+0x20c>
    e364:	0030      	movs	r0, r6
    e366:	19a3      	adds	r3, r4, r6
    e368:	3028      	adds	r0, #40	; 0x28
    e36a:	7e59      	ldrb	r1, [r3, #25]
    e36c:	b2c0      	uxtb	r0, r0
    e36e:	3601      	adds	r6, #1
    e370:	47a8      	blx	r5
    e372:	b2f6      	uxtb	r6, r6
    e374:	e7e4      	b.n	e340 <Radio_WriteConfiguration+0x374>
    e376:	46c0      	nop			; (mov r8, r8)
    e378:	00003d09 	.word	0x00003d09
    e37c:	0001235d 	.word	0x0001235d
    e380:	01e84800 	.word	0x01e84800

0000e384 <RADIO_getMappingAndOpmode>:
    e384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e386:	0006      	movs	r6, r0
    e388:	4d06      	ldr	r5, [pc, #24]	; (e3a4 <RADIO_getMappingAndOpmode+0x20>)
    e38a:	2040      	movs	r0, #64	; 0x40
    e38c:	001f      	movs	r7, r3
    e38e:	0014      	movs	r4, r2
    e390:	9101      	str	r1, [sp, #4]
    e392:	47a8      	blx	r5
    e394:	4004      	ands	r4, r0
    e396:	413c      	asrs	r4, r7
    e398:	2001      	movs	r0, #1
    e39a:	7034      	strb	r4, [r6, #0]
    e39c:	47a8      	blx	r5
    e39e:	9b01      	ldr	r3, [sp, #4]
    e3a0:	7018      	strb	r0, [r3, #0]
    e3a2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    e3a4:	0000c6e5 	.word	0x0000c6e5

0000e3a8 <RADIO_UnhandledInterrupt.part.0>:
    e3a8:	b510      	push	{r4, lr}
    e3aa:	21ff      	movs	r1, #255	; 0xff
    e3ac:	2012      	movs	r0, #18
    e3ae:	4b01      	ldr	r3, [pc, #4]	; (e3b4 <RADIO_UnhandledInterrupt.part.0+0xc>)
    e3b0:	4798      	blx	r3
    e3b2:	bd10      	pop	{r4, pc}
    e3b4:	0000c6bd 	.word	0x0000c6bd

0000e3b8 <RADIO_UnhandledInterrupt>:
    e3b8:	b510      	push	{r4, lr}
    e3ba:	2801      	cmp	r0, #1
    e3bc:	d102      	bne.n	e3c4 <RADIO_UnhandledInterrupt+0xc>
    e3be:	4b05      	ldr	r3, [pc, #20]	; (e3d4 <RADIO_UnhandledInterrupt+0x1c>)
    e3c0:	4798      	blx	r3
    e3c2:	bd10      	pop	{r4, pc}
    e3c4:	21ff      	movs	r1, #255	; 0xff
    e3c6:	203e      	movs	r0, #62	; 0x3e
    e3c8:	4c03      	ldr	r4, [pc, #12]	; (e3d8 <RADIO_UnhandledInterrupt+0x20>)
    e3ca:	47a0      	blx	r4
    e3cc:	21ff      	movs	r1, #255	; 0xff
    e3ce:	203f      	movs	r0, #63	; 0x3f
    e3d0:	47a0      	blx	r4
    e3d2:	e7f6      	b.n	e3c2 <RADIO_UnhandledInterrupt+0xa>
    e3d4:	0000e3a9 	.word	0x0000e3a9
    e3d8:	0000c6bd 	.word	0x0000c6bd

0000e3dc <RADIO_DIO0>:
    e3dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e3de:	466b      	mov	r3, sp
    e3e0:	1ddc      	adds	r4, r3, #7
    e3e2:	1d9d      	adds	r5, r3, #6
    e3e4:	22c0      	movs	r2, #192	; 0xc0
    e3e6:	2306      	movs	r3, #6
    e3e8:	0028      	movs	r0, r5
    e3ea:	0021      	movs	r1, r4
    e3ec:	4e12      	ldr	r6, [pc, #72]	; (e438 <RADIO_DIO0+0x5c>)
    e3ee:	47b0      	blx	r6
    e3f0:	7823      	ldrb	r3, [r4, #0]
    e3f2:	7828      	ldrb	r0, [r5, #0]
    e3f4:	b25a      	sxtb	r2, r3
    e3f6:	b2c0      	uxtb	r0, r0
    e3f8:	2a00      	cmp	r2, #0
    e3fa:	da0b      	bge.n	e414 <RADIO_DIO0+0x38>
    e3fc:	2800      	cmp	r0, #0
    e3fe:	d004      	beq.n	e40a <RADIO_DIO0+0x2e>
    e400:	2801      	cmp	r0, #1
    e402:	d005      	beq.n	e410 <RADIO_DIO0+0x34>
    e404:	4b0d      	ldr	r3, [pc, #52]	; (e43c <RADIO_DIO0+0x60>)
    e406:	4798      	blx	r3
    e408:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    e40a:	4b0d      	ldr	r3, [pc, #52]	; (e440 <RADIO_DIO0+0x64>)
    e40c:	4798      	blx	r3
    e40e:	e7fb      	b.n	e408 <RADIO_DIO0+0x2c>
    e410:	4b0c      	ldr	r3, [pc, #48]	; (e444 <RADIO_DIO0+0x68>)
    e412:	e7fb      	b.n	e40c <RADIO_DIO0+0x30>
    e414:	2800      	cmp	r0, #0
    e416:	d10a      	bne.n	e42e <RADIO_DIO0+0x52>
    e418:	2207      	movs	r2, #7
    e41a:	4013      	ands	r3, r2
    e41c:	7023      	strb	r3, [r4, #0]
    e41e:	2b03      	cmp	r3, #3
    e420:	d101      	bne.n	e426 <RADIO_DIO0+0x4a>
    e422:	4b09      	ldr	r3, [pc, #36]	; (e448 <RADIO_DIO0+0x6c>)
    e424:	e7f2      	b.n	e40c <RADIO_DIO0+0x30>
    e426:	2b05      	cmp	r3, #5
    e428:	d102      	bne.n	e430 <RADIO_DIO0+0x54>
    e42a:	4b08      	ldr	r3, [pc, #32]	; (e44c <RADIO_DIO0+0x70>)
    e42c:	e7ee      	b.n	e40c <RADIO_DIO0+0x30>
    e42e:	2000      	movs	r0, #0
    e430:	4b07      	ldr	r3, [pc, #28]	; (e450 <RADIO_DIO0+0x74>)
    e432:	4798      	blx	r3
    e434:	e7e8      	b.n	e408 <RADIO_DIO0+0x2c>
    e436:	46c0      	nop			; (mov r8, r8)
    e438:	0000e385 	.word	0x0000e385
    e43c:	0000e3a9 	.word	0x0000e3a9
    e440:	0000eb61 	.word	0x0000eb61
    e444:	0000ea65 	.word	0x0000ea65
    e448:	0000eae1 	.word	0x0000eae1
    e44c:	0000ebdd 	.word	0x0000ebdd
    e450:	0000e3b9 	.word	0x0000e3b9

0000e454 <RADIO_DIO1>:
    e454:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e456:	466b      	mov	r3, sp
    e458:	1ddc      	adds	r4, r3, #7
    e45a:	1d9d      	adds	r5, r3, #6
    e45c:	2230      	movs	r2, #48	; 0x30
    e45e:	2304      	movs	r3, #4
    e460:	0021      	movs	r1, r4
    e462:	0028      	movs	r0, r5
    e464:	4e11      	ldr	r6, [pc, #68]	; (e4ac <RADIO_DIO1+0x58>)
    e466:	47b0      	blx	r6
    e468:	7822      	ldrb	r2, [r4, #0]
    e46a:	782b      	ldrb	r3, [r5, #0]
    e46c:	b251      	sxtb	r1, r2
    e46e:	2900      	cmp	r1, #0
    e470:	da0c      	bge.n	e48c <RADIO_DIO1+0x38>
    e472:	b2db      	uxtb	r3, r3
    e474:	2b00      	cmp	r3, #0
    e476:	d004      	beq.n	e482 <RADIO_DIO1+0x2e>
    e478:	2b01      	cmp	r3, #1
    e47a:	d005      	beq.n	e488 <RADIO_DIO1+0x34>
    e47c:	4b0c      	ldr	r3, [pc, #48]	; (e4b0 <RADIO_DIO1+0x5c>)
    e47e:	4798      	blx	r3
    e480:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    e482:	4b0c      	ldr	r3, [pc, #48]	; (e4b4 <RADIO_DIO1+0x60>)
    e484:	4798      	blx	r3
    e486:	e7fb      	b.n	e480 <RADIO_DIO1+0x2c>
    e488:	4b0b      	ldr	r3, [pc, #44]	; (e4b8 <RADIO_DIO1+0x64>)
    e48a:	e7fb      	b.n	e484 <RADIO_DIO1+0x30>
    e48c:	2107      	movs	r1, #7
    e48e:	b2db      	uxtb	r3, r3
    e490:	400a      	ands	r2, r1
    e492:	7022      	strb	r2, [r4, #0]
    e494:	2b00      	cmp	r3, #0
    e496:	d005      	beq.n	e4a4 <RADIO_DIO1+0x50>
    e498:	2b01      	cmp	r3, #1
    e49a:	d1f1      	bne.n	e480 <RADIO_DIO1+0x2c>
    e49c:	2a03      	cmp	r2, #3
    e49e:	d1ef      	bne.n	e480 <RADIO_DIO1+0x2c>
    e4a0:	4b06      	ldr	r3, [pc, #24]	; (e4bc <RADIO_DIO1+0x68>)
    e4a2:	e7ef      	b.n	e484 <RADIO_DIO1+0x30>
    e4a4:	4b06      	ldr	r3, [pc, #24]	; (e4c0 <RADIO_DIO1+0x6c>)
    e4a6:	2a05      	cmp	r2, #5
    e4a8:	d1ea      	bne.n	e480 <RADIO_DIO1+0x2c>
    e4aa:	e7eb      	b.n	e484 <RADIO_DIO1+0x30>
    e4ac:	0000e385 	.word	0x0000e385
    e4b0:	0000e3a9 	.word	0x0000e3a9
    e4b4:	0000e9e9 	.word	0x0000e9e9
    e4b8:	0000d45d 	.word	0x0000d45d
    e4bc:	0000e811 	.word	0x0000e811
    e4c0:	0000e775 	.word	0x0000e775

0000e4c4 <RADIO_DIO2>:
    e4c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e4c6:	466b      	mov	r3, sp
    e4c8:	1ddc      	adds	r4, r3, #7
    e4ca:	1d9d      	adds	r5, r3, #6
    e4cc:	220c      	movs	r2, #12
    e4ce:	2302      	movs	r3, #2
    e4d0:	0021      	movs	r1, r4
    e4d2:	0028      	movs	r0, r5
    e4d4:	4e0b      	ldr	r6, [pc, #44]	; (e504 <RADIO_DIO2+0x40>)
    e4d6:	47b0      	blx	r6
    e4d8:	7823      	ldrb	r3, [r4, #0]
    e4da:	782a      	ldrb	r2, [r5, #0]
    e4dc:	b259      	sxtb	r1, r3
    e4de:	2900      	cmp	r1, #0
    e4e0:	da05      	bge.n	e4ee <RADIO_DIO2+0x2a>
    e4e2:	4b09      	ldr	r3, [pc, #36]	; (e508 <RADIO_DIO2+0x44>)
    e4e4:	2a02      	cmp	r2, #2
    e4e6:	d90a      	bls.n	e4fe <RADIO_DIO2+0x3a>
    e4e8:	4b08      	ldr	r3, [pc, #32]	; (e50c <RADIO_DIO2+0x48>)
    e4ea:	4798      	blx	r3
    e4ec:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    e4ee:	2107      	movs	r1, #7
    e4f0:	400b      	ands	r3, r1
    e4f2:	7023      	strb	r3, [r4, #0]
    e4f4:	2a03      	cmp	r2, #3
    e4f6:	d1f9      	bne.n	e4ec <RADIO_DIO2+0x28>
    e4f8:	2b05      	cmp	r3, #5
    e4fa:	d1f7      	bne.n	e4ec <RADIO_DIO2+0x28>
    e4fc:	4b04      	ldr	r3, [pc, #16]	; (e510 <RADIO_DIO2+0x4c>)
    e4fe:	4798      	blx	r3
    e500:	e7f4      	b.n	e4ec <RADIO_DIO2+0x28>
    e502:	46c0      	nop			; (mov r8, r8)
    e504:	0000e385 	.word	0x0000e385
    e508:	0000d45d 	.word	0x0000d45d
    e50c:	0000e3a9 	.word	0x0000e3a9
    e510:	0000e745 	.word	0x0000e745

0000e514 <RADIO_DIO3>:
    e514:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e516:	466b      	mov	r3, sp
    e518:	4668      	mov	r0, sp
    e51a:	1ddc      	adds	r4, r3, #7
    e51c:	2203      	movs	r2, #3
    e51e:	2300      	movs	r3, #0
    e520:	0021      	movs	r1, r4
    e522:	3006      	adds	r0, #6
    e524:	4d03      	ldr	r5, [pc, #12]	; (e534 <RADIO_DIO3+0x20>)
    e526:	47a8      	blx	r5
    e528:	7823      	ldrb	r3, [r4, #0]
    e52a:	2b7f      	cmp	r3, #127	; 0x7f
    e52c:	d901      	bls.n	e532 <RADIO_DIO3+0x1e>
    e52e:	4b02      	ldr	r3, [pc, #8]	; (e538 <RADIO_DIO3+0x24>)
    e530:	4798      	blx	r3
    e532:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    e534:	0000e385 	.word	0x0000e385
    e538:	0000e3a9 	.word	0x0000e3a9

0000e53c <RADIO_DIO4>:
    e53c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e53e:	466b      	mov	r3, sp
    e540:	4668      	mov	r0, sp
    e542:	1ddc      	adds	r4, r3, #7
    e544:	2306      	movs	r3, #6
    e546:	22c0      	movs	r2, #192	; 0xc0
    e548:	18c0      	adds	r0, r0, r3
    e54a:	0021      	movs	r1, r4
    e54c:	4d03      	ldr	r5, [pc, #12]	; (e55c <RADIO_DIO4+0x20>)
    e54e:	47a8      	blx	r5
    e550:	7823      	ldrb	r3, [r4, #0]
    e552:	2b7f      	cmp	r3, #127	; 0x7f
    e554:	d901      	bls.n	e55a <RADIO_DIO4+0x1e>
    e556:	4b02      	ldr	r3, [pc, #8]	; (e560 <RADIO_DIO4+0x24>)
    e558:	4798      	blx	r3
    e55a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    e55c:	0000e385 	.word	0x0000e385
    e560:	0000e3a9 	.word	0x0000e3a9

0000e564 <RADIO_DIO5>:
    e564:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e566:	466b      	mov	r3, sp
    e568:	4668      	mov	r0, sp
    e56a:	1ddc      	adds	r4, r3, #7
    e56c:	2230      	movs	r2, #48	; 0x30
    e56e:	2304      	movs	r3, #4
    e570:	0021      	movs	r1, r4
    e572:	3006      	adds	r0, #6
    e574:	4d03      	ldr	r5, [pc, #12]	; (e584 <RADIO_DIO5+0x20>)
    e576:	47a8      	blx	r5
    e578:	7823      	ldrb	r3, [r4, #0]
    e57a:	2b7f      	cmp	r3, #127	; 0x7f
    e57c:	d901      	bls.n	e582 <RADIO_DIO5+0x1e>
    e57e:	4b02      	ldr	r3, [pc, #8]	; (e588 <RADIO_DIO5+0x24>)
    e580:	4798      	blx	r3
    e582:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    e584:	0000e385 	.word	0x0000e385
    e588:	0000e3a9 	.word	0x0000e3a9

0000e58c <radioPostTask>:
    e58c:	b510      	push	{r4, lr}
    e58e:	0004      	movs	r4, r0
    e590:	4b05      	ldr	r3, [pc, #20]	; (e5a8 <radioPostTask+0x1c>)
    e592:	4798      	blx	r3
    e594:	4b05      	ldr	r3, [pc, #20]	; (e5ac <radioPostTask+0x20>)
    e596:	8818      	ldrh	r0, [r3, #0]
    e598:	4320      	orrs	r0, r4
    e59a:	8018      	strh	r0, [r3, #0]
    e59c:	4b04      	ldr	r3, [pc, #16]	; (e5b0 <radioPostTask+0x24>)
    e59e:	4798      	blx	r3
    e5a0:	2002      	movs	r0, #2
    e5a2:	4b04      	ldr	r3, [pc, #16]	; (e5b4 <radioPostTask+0x28>)
    e5a4:	4798      	blx	r3
    e5a6:	bd10      	pop	{r4, pc}
    e5a8:	0000c85d 	.word	0x0000c85d
    e5ac:	2000204c 	.word	0x2000204c
    e5b0:	0000c869 	.word	0x0000c869
    e5b4:	0000d355 	.word	0x0000d355

0000e5b8 <radioClearTask>:
    e5b8:	b510      	push	{r4, lr}
    e5ba:	0004      	movs	r4, r0
    e5bc:	4b04      	ldr	r3, [pc, #16]	; (e5d0 <radioClearTask+0x18>)
    e5be:	4798      	blx	r3
    e5c0:	4a04      	ldr	r2, [pc, #16]	; (e5d4 <radioClearTask+0x1c>)
    e5c2:	8813      	ldrh	r3, [r2, #0]
    e5c4:	43a3      	bics	r3, r4
    e5c6:	8013      	strh	r3, [r2, #0]
    e5c8:	4b03      	ldr	r3, [pc, #12]	; (e5d8 <radioClearTask+0x20>)
    e5ca:	4798      	blx	r3
    e5cc:	bd10      	pop	{r4, pc}
    e5ce:	46c0      	nop			; (mov r8, r8)
    e5d0:	0000c85d 	.word	0x0000c85d
    e5d4:	2000204c 	.word	0x2000204c
    e5d8:	0000c869 	.word	0x0000c869

0000e5dc <RADIO_TaskHandler>:
    e5dc:	b570      	push	{r4, r5, r6, lr}
    e5de:	2400      	movs	r4, #0
    e5e0:	4d10      	ldr	r5, [pc, #64]	; (e624 <RADIO_TaskHandler+0x48>)
    e5e2:	2601      	movs	r6, #1
    e5e4:	882b      	ldrh	r3, [r5, #0]
    e5e6:	42a3      	cmp	r3, r4
    e5e8:	d015      	beq.n	e616 <RADIO_TaskHandler+0x3a>
    e5ea:	882b      	ldrh	r3, [r5, #0]
    e5ec:	4123      	asrs	r3, r4
    e5ee:	4233      	tst	r3, r6
    e5f0:	d013      	beq.n	e61a <RADIO_TaskHandler+0x3e>
    e5f2:	40a6      	lsls	r6, r4
    e5f4:	4b0c      	ldr	r3, [pc, #48]	; (e628 <RADIO_TaskHandler+0x4c>)
    e5f6:	4798      	blx	r3
    e5f8:	882b      	ldrh	r3, [r5, #0]
    e5fa:	00a4      	lsls	r4, r4, #2
    e5fc:	43b3      	bics	r3, r6
    e5fe:	802b      	strh	r3, [r5, #0]
    e600:	4b0a      	ldr	r3, [pc, #40]	; (e62c <RADIO_TaskHandler+0x50>)
    e602:	4798      	blx	r3
    e604:	4b0a      	ldr	r3, [pc, #40]	; (e630 <RADIO_TaskHandler+0x54>)
    e606:	58e3      	ldr	r3, [r4, r3]
    e608:	4798      	blx	r3
    e60a:	882b      	ldrh	r3, [r5, #0]
    e60c:	2b00      	cmp	r3, #0
    e60e:	d002      	beq.n	e616 <RADIO_TaskHandler+0x3a>
    e610:	2002      	movs	r0, #2
    e612:	4b08      	ldr	r3, [pc, #32]	; (e634 <RADIO_TaskHandler+0x58>)
    e614:	4798      	blx	r3
    e616:	2000      	movs	r0, #0
    e618:	bd70      	pop	{r4, r5, r6, pc}
    e61a:	3401      	adds	r4, #1
    e61c:	2c05      	cmp	r4, #5
    e61e:	d1e4      	bne.n	e5ea <RADIO_TaskHandler+0xe>
    e620:	e7f9      	b.n	e616 <RADIO_TaskHandler+0x3a>
    e622:	46c0      	nop			; (mov r8, r8)
    e624:	2000204c 	.word	0x2000204c
    e628:	0000c85d 	.word	0x0000c85d
    e62c:	0000c869 	.word	0x0000c869
    e630:	00017b94 	.word	0x00017b94
    e634:	0000d355 	.word	0x0000d355

0000e638 <RadioSetState>:
    e638:	4b01      	ldr	r3, [pc, #4]	; (e640 <RadioSetState+0x8>)
    e63a:	7018      	strb	r0, [r3, #0]
    e63c:	4770      	bx	lr
    e63e:	46c0      	nop			; (mov r8, r8)
    e640:	20002fbf 	.word	0x20002fbf

0000e644 <RADIO_GetState>:
    e644:	4b01      	ldr	r3, [pc, #4]	; (e64c <RADIO_GetState+0x8>)
    e646:	7818      	ldrb	r0, [r3, #0]
    e648:	b2c0      	uxtb	r0, r0
    e64a:	4770      	bx	lr
    e64c:	20002fbf 	.word	0x20002fbf

0000e650 <RADIO_SetCallbackBitmask>:
    e650:	4a02      	ldr	r2, [pc, #8]	; (e65c <RADIO_SetCallbackBitmask+0xc>)
    e652:	7813      	ldrb	r3, [r2, #0]
    e654:	4318      	orrs	r0, r3
    e656:	7010      	strb	r0, [r2, #0]
    e658:	4770      	bx	lr
    e65a:	46c0      	nop			; (mov r8, r8)
    e65c:	20002fbe 	.word	0x20002fbe

0000e660 <RADIO_Transmit>:
    e660:	b570      	push	{r4, r5, r6, lr}
    e662:	4d10      	ldr	r5, [pc, #64]	; (e6a4 <RADIO_Transmit+0x44>)
    e664:	0006      	movs	r6, r0
    e666:	782b      	ldrb	r3, [r5, #0]
    e668:	2004      	movs	r0, #4
    e66a:	2b01      	cmp	r3, #1
    e66c:	d118      	bne.n	e6a0 <RADIO_Transmit+0x40>
    e66e:	4c0e      	ldr	r4, [pc, #56]	; (e6a8 <RADIO_Transmit+0x48>)
    e670:	0023      	movs	r3, r4
    e672:	332f      	adds	r3, #47	; 0x2f
    e674:	7818      	ldrb	r0, [r3, #0]
    e676:	4b0d      	ldr	r3, [pc, #52]	; (e6ac <RADIO_Transmit+0x4c>)
    e678:	4798      	blx	r3
    e67a:	4b0d      	ldr	r3, [pc, #52]	; (e6b0 <RADIO_Transmit+0x50>)
    e67c:	7832      	ldrb	r2, [r6, #0]
    e67e:	6871      	ldr	r1, [r6, #4]
    e680:	701a      	strb	r2, [r3, #0]
    e682:	4b0c      	ldr	r3, [pc, #48]	; (e6b4 <RADIO_Transmit+0x54>)
    e684:	3434      	adds	r4, #52	; 0x34
    e686:	6019      	str	r1, [r3, #0]
    e688:	7821      	ldrb	r1, [r4, #0]
    e68a:	2302      	movs	r3, #2
    e68c:	2900      	cmp	r1, #0
    e68e:	d102      	bne.n	e696 <RADIO_Transmit+0x36>
    e690:	0018      	movs	r0, r3
    e692:	2a3f      	cmp	r2, #63	; 0x3f
    e694:	d804      	bhi.n	e6a0 <RADIO_Transmit+0x40>
    e696:	702b      	strb	r3, [r5, #0]
    e698:	2004      	movs	r0, #4
    e69a:	4b07      	ldr	r3, [pc, #28]	; (e6b8 <RADIO_Transmit+0x58>)
    e69c:	4798      	blx	r3
    e69e:	2000      	movs	r0, #0
    e6a0:	bd70      	pop	{r4, r5, r6, pc}
    e6a2:	46c0      	nop			; (mov r8, r8)
    e6a4:	20002fbf 	.word	0x20002fbf
    e6a8:	20002cf4 	.word	0x20002cf4
    e6ac:	0000d069 	.word	0x0000d069
    e6b0:	2000206c 	.word	0x2000206c
    e6b4:	20002068 	.word	0x20002068
    e6b8:	0000e58d 	.word	0x0000e58d

0000e6bc <Radio_FSKTxPayloadHandler>:
    e6bc:	b570      	push	{r4, r5, r6, lr}
    e6be:	4b1c      	ldr	r3, [pc, #112]	; (e730 <Radio_FSKTxPayloadHandler+0x74>)
    e6c0:	000d      	movs	r5, r1
    e6c2:	4798      	blx	r3
    e6c4:	4c1b      	ldr	r4, [pc, #108]	; (e734 <Radio_FSKTxPayloadHandler+0x78>)
    e6c6:	3457      	adds	r4, #87	; 0x57
    e6c8:	7820      	ldrb	r0, [r4, #0]
    e6ca:	b2c0      	uxtb	r0, r0
    e6cc:	2800      	cmp	r0, #0
    e6ce:	d112      	bne.n	e6f6 <Radio_FSKTxPayloadHandler+0x3a>
    e6d0:	2d00      	cmp	r5, #0
    e6d2:	d007      	beq.n	e6e4 <Radio_FSKTxPayloadHandler+0x28>
    e6d4:	4918      	ldr	r1, [pc, #96]	; (e738 <Radio_FSKTxPayloadHandler+0x7c>)
    e6d6:	4b19      	ldr	r3, [pc, #100]	; (e73c <Radio_FSKTxPayloadHandler+0x80>)
    e6d8:	2d3e      	cmp	r5, #62	; 0x3e
    e6da:	d806      	bhi.n	e6ea <Radio_FSKTxPayloadHandler+0x2e>
    e6dc:	002a      	movs	r2, r5
    e6de:	6809      	ldr	r1, [r1, #0]
    e6e0:	4798      	blx	r3
    e6e2:	7025      	strb	r5, [r4, #0]
    e6e4:	4b16      	ldr	r3, [pc, #88]	; (e740 <Radio_FSKTxPayloadHandler+0x84>)
    e6e6:	4798      	blx	r3
    e6e8:	bd70      	pop	{r4, r5, r6, pc}
    e6ea:	223f      	movs	r2, #63	; 0x3f
    e6ec:	6809      	ldr	r1, [r1, #0]
    e6ee:	4798      	blx	r3
    e6f0:	233f      	movs	r3, #63	; 0x3f
    e6f2:	7023      	strb	r3, [r4, #0]
    e6f4:	e7f6      	b.n	e6e4 <Radio_FSKTxPayloadHandler+0x28>
    e6f6:	7823      	ldrb	r3, [r4, #0]
    e6f8:	429d      	cmp	r5, r3
    e6fa:	d0f3      	beq.n	e6e4 <Radio_FSKTxPayloadHandler+0x28>
    e6fc:	7822      	ldrb	r2, [r4, #0]
    e6fe:	480e      	ldr	r0, [pc, #56]	; (e738 <Radio_FSKTxPayloadHandler+0x7c>)
    e700:	1aaa      	subs	r2, r5, r2
    e702:	b2d2      	uxtb	r2, r2
    e704:	4b0d      	ldr	r3, [pc, #52]	; (e73c <Radio_FSKTxPayloadHandler+0x80>)
    e706:	2a3f      	cmp	r2, #63	; 0x3f
    e708:	d807      	bhi.n	e71a <Radio_FSKTxPayloadHandler+0x5e>
    e70a:	7826      	ldrb	r6, [r4, #0]
    e70c:	7822      	ldrb	r2, [r4, #0]
    e70e:	6801      	ldr	r1, [r0, #0]
    e710:	1aaa      	subs	r2, r5, r2
    e712:	b2d2      	uxtb	r2, r2
    e714:	1989      	adds	r1, r1, r6
    e716:	2000      	movs	r0, #0
    e718:	e7e2      	b.n	e6e0 <Radio_FSKTxPayloadHandler+0x24>
    e71a:	7822      	ldrb	r2, [r4, #0]
    e71c:	6801      	ldr	r1, [r0, #0]
    e71e:	2000      	movs	r0, #0
    e720:	1889      	adds	r1, r1, r2
    e722:	223f      	movs	r2, #63	; 0x3f
    e724:	4798      	blx	r3
    e726:	7823      	ldrb	r3, [r4, #0]
    e728:	333f      	adds	r3, #63	; 0x3f
    e72a:	b2db      	uxtb	r3, r3
    e72c:	e7e1      	b.n	e6f2 <Radio_FSKTxPayloadHandler+0x36>
    e72e:	46c0      	nop			; (mov r8, r8)
    e730:	00004aa5 	.word	0x00004aa5
    e734:	20002cf4 	.word	0x20002cf4
    e738:	20002068 	.word	0x20002068
    e73c:	0000c711 	.word	0x0000c711
    e740:	00004ae5 	.word	0x00004ae5

0000e744 <RADIO_FSKSyncAddr>:
    e744:	4b08      	ldr	r3, [pc, #32]	; (e768 <RADIO_FSKSyncAddr+0x24>)
    e746:	b510      	push	{r4, lr}
    e748:	4798      	blx	r3
    e74a:	4b08      	ldr	r3, [pc, #32]	; (e76c <RADIO_FSKSyncAddr+0x28>)
    e74c:	001a      	movs	r2, r3
    e74e:	3234      	adds	r2, #52	; 0x34
    e750:	7812      	ldrb	r2, [r2, #0]
    e752:	2a00      	cmp	r2, #0
    e754:	d104      	bne.n	e760 <RADIO_FSKSyncAddr+0x1c>
    e756:	0019      	movs	r1, r3
    e758:	3357      	adds	r3, #87	; 0x57
    e75a:	312c      	adds	r1, #44	; 0x2c
    e75c:	700a      	strb	r2, [r1, #0]
    e75e:	701a      	strb	r2, [r3, #0]
    e760:	4b03      	ldr	r3, [pc, #12]	; (e770 <RADIO_FSKSyncAddr+0x2c>)
    e762:	4798      	blx	r3
    e764:	bd10      	pop	{r4, pc}
    e766:	46c0      	nop			; (mov r8, r8)
    e768:	00004aa5 	.word	0x00004aa5
    e76c:	20002cf4 	.word	0x20002cf4
    e770:	00004ae5 	.word	0x00004ae5

0000e774 <RADIO_FSKFifoLevel>:
    e774:	b570      	push	{r4, r5, r6, lr}
    e776:	4b22      	ldr	r3, [pc, #136]	; (e800 <RADIO_FSKFifoLevel+0x8c>)
    e778:	4798      	blx	r3
    e77a:	4d22      	ldr	r5, [pc, #136]	; (e804 <RADIO_FSKFifoLevel+0x90>)
    e77c:	002a      	movs	r2, r5
    e77e:	002b      	movs	r3, r5
    e780:	322c      	adds	r2, #44	; 0x2c
    e782:	3357      	adds	r3, #87	; 0x57
    e784:	7810      	ldrb	r0, [r2, #0]
    e786:	7819      	ldrb	r1, [r3, #0]
    e788:	4288      	cmp	r0, r1
    e78a:	d105      	bne.n	e798 <RADIO_FSKFifoLevel+0x24>
    e78c:	7812      	ldrb	r2, [r2, #0]
    e78e:	2a00      	cmp	r2, #0
    e790:	d002      	beq.n	e798 <RADIO_FSKFifoLevel+0x24>
    e792:	781b      	ldrb	r3, [r3, #0]
    e794:	2b00      	cmp	r3, #0
    e796:	d11f      	bne.n	e7d8 <RADIO_FSKFifoLevel+0x64>
    e798:	0029      	movs	r1, r5
    e79a:	312c      	adds	r1, #44	; 0x2c
    e79c:	7808      	ldrb	r0, [r1, #0]
    e79e:	b2c0      	uxtb	r0, r0
    e7a0:	2800      	cmp	r0, #0
    e7a2:	d102      	bne.n	e7aa <RADIO_FSKFifoLevel+0x36>
    e7a4:	2201      	movs	r2, #1
    e7a6:	4b18      	ldr	r3, [pc, #96]	; (e808 <RADIO_FSKFifoLevel+0x94>)
    e7a8:	4798      	blx	r3
    e7aa:	002e      	movs	r6, r5
    e7ac:	002c      	movs	r4, r5
    e7ae:	362c      	adds	r6, #44	; 0x2c
    e7b0:	3457      	adds	r4, #87	; 0x57
    e7b2:	7833      	ldrb	r3, [r6, #0]
    e7b4:	7822      	ldrb	r2, [r4, #0]
    e7b6:	1a9b      	subs	r3, r3, r2
    e7b8:	b2db      	uxtb	r3, r3
    e7ba:	2b3e      	cmp	r3, #62	; 0x3e
    e7bc:	d80f      	bhi.n	e7de <RADIO_FSKFifoLevel+0x6a>
    e7be:	7823      	ldrb	r3, [r4, #0]
    e7c0:	7832      	ldrb	r2, [r6, #0]
    e7c2:	7821      	ldrb	r1, [r4, #0]
    e7c4:	2000      	movs	r0, #0
    e7c6:	1a52      	subs	r2, r2, r1
    e7c8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    e7ca:	b2d2      	uxtb	r2, r2
    e7cc:	18c9      	adds	r1, r1, r3
    e7ce:	4b0e      	ldr	r3, [pc, #56]	; (e808 <RADIO_FSKFifoLevel+0x94>)
    e7d0:	4798      	blx	r3
    e7d2:	7833      	ldrb	r3, [r6, #0]
    e7d4:	b2db      	uxtb	r3, r3
    e7d6:	7023      	strb	r3, [r4, #0]
    e7d8:	4b0c      	ldr	r3, [pc, #48]	; (e80c <RADIO_FSKFifoLevel+0x98>)
    e7da:	4798      	blx	r3
    e7dc:	bd70      	pop	{r4, r5, r6, pc}
    e7de:	7833      	ldrb	r3, [r6, #0]
    e7e0:	7822      	ldrb	r2, [r4, #0]
    e7e2:	1a9b      	subs	r3, r3, r2
    e7e4:	b2db      	uxtb	r3, r3
    e7e6:	2b3f      	cmp	r3, #63	; 0x3f
    e7e8:	d9f6      	bls.n	e7d8 <RADIO_FSKFifoLevel+0x64>
    e7ea:	7823      	ldrb	r3, [r4, #0]
    e7ec:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    e7ee:	223f      	movs	r2, #63	; 0x3f
    e7f0:	18c9      	adds	r1, r1, r3
    e7f2:	2000      	movs	r0, #0
    e7f4:	4b04      	ldr	r3, [pc, #16]	; (e808 <RADIO_FSKFifoLevel+0x94>)
    e7f6:	4798      	blx	r3
    e7f8:	7823      	ldrb	r3, [r4, #0]
    e7fa:	333f      	adds	r3, #63	; 0x3f
    e7fc:	e7ea      	b.n	e7d4 <RADIO_FSKFifoLevel+0x60>
    e7fe:	46c0      	nop			; (mov r8, r8)
    e800:	00004aa5 	.word	0x00004aa5
    e804:	20002cf4 	.word	0x20002cf4
    e808:	0000c751 	.word	0x0000c751
    e80c:	00004ae5 	.word	0x00004ae5

0000e810 <RADIO_FSKFifoEmpty>:
    e810:	b510      	push	{r4, lr}
    e812:	4b03      	ldr	r3, [pc, #12]	; (e820 <RADIO_FSKFifoEmpty+0x10>)
    e814:	7819      	ldrb	r1, [r3, #0]
    e816:	4b03      	ldr	r3, [pc, #12]	; (e824 <RADIO_FSKFifoEmpty+0x14>)
    e818:	6818      	ldr	r0, [r3, #0]
    e81a:	4b03      	ldr	r3, [pc, #12]	; (e828 <RADIO_FSKFifoEmpty+0x18>)
    e81c:	4798      	blx	r3
    e81e:	bd10      	pop	{r4, pc}
    e820:	2000206c 	.word	0x2000206c
    e824:	20002068 	.word	0x20002068
    e828:	0000e6bd 	.word	0x0000e6bd

0000e82c <RADIO_GetData>:
    e82c:	4b03      	ldr	r3, [pc, #12]	; (e83c <RADIO_GetData+0x10>)
    e82e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e830:	332c      	adds	r3, #44	; 0x2c
    e832:	6002      	str	r2, [r0, #0]
    e834:	781b      	ldrb	r3, [r3, #0]
    e836:	2000      	movs	r0, #0
    e838:	800b      	strh	r3, [r1, #0]
    e83a:	4770      	bx	lr
    e83c:	20002cf4 	.word	0x20002cf4

0000e840 <Radio_EnableRfControl>:
    e840:	b510      	push	{r4, lr}
    e842:	4b08      	ldr	r3, [pc, #32]	; (e864 <Radio_EnableRfControl+0x24>)
    e844:	0001      	movs	r1, r0
    e846:	681a      	ldr	r2, [r3, #0]
    e848:	4807      	ldr	r0, [pc, #28]	; (e868 <Radio_EnableRfControl+0x28>)
    e84a:	4c08      	ldr	r4, [pc, #32]	; (e86c <Radio_EnableRfControl+0x2c>)
    e84c:	1812      	adds	r2, r2, r0
    e84e:	2000      	movs	r0, #0
    e850:	42a2      	cmp	r2, r4
    e852:	d804      	bhi.n	e85e <Radio_EnableRfControl+0x1e>
    e854:	3305      	adds	r3, #5
    e856:	7fdb      	ldrb	r3, [r3, #31]
    e858:	1e58      	subs	r0, r3, #1
    e85a:	4183      	sbcs	r3, r0
    e85c:	1c58      	adds	r0, r3, #1
    e85e:	4b04      	ldr	r3, [pc, #16]	; (e870 <Radio_EnableRfControl+0x30>)
    e860:	4798      	blx	r3
    e862:	bd10      	pop	{r4, pc}
    e864:	20002cf4 	.word	0x20002cf4
    e868:	cc9eec80 	.word	0xcc9eec80
    e86c:	096ae380 	.word	0x096ae380
    e870:	0000c7bd 	.word	0x0000c7bd

0000e874 <RADIO_RxHandler>:
    e874:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e876:	4b33      	ldr	r3, [pc, #204]	; (e944 <RADIO_RxHandler+0xd0>)
    e878:	2000      	movs	r0, #0
    e87a:	4798      	blx	r3
    e87c:	4e32      	ldr	r6, [pc, #200]	; (e948 <RADIO_RxHandler+0xd4>)
    e87e:	4b33      	ldr	r3, [pc, #204]	; (e94c <RADIO_RxHandler+0xd8>)
    e880:	8830      	ldrh	r0, [r6, #0]
    e882:	2800      	cmp	r0, #0
    e884:	d100      	bne.n	e888 <RADIO_RxHandler+0x14>
    e886:	3004      	adds	r0, #4
    e888:	4798      	blx	r3
    e88a:	4c31      	ldr	r4, [pc, #196]	; (e950 <RADIO_RxHandler+0xdc>)
    e88c:	4d31      	ldr	r5, [pc, #196]	; (e954 <RADIO_RxHandler+0xe0>)
    e88e:	0023      	movs	r3, r4
    e890:	3334      	adds	r3, #52	; 0x34
    e892:	7819      	ldrb	r1, [r3, #0]
    e894:	2901      	cmp	r1, #1
    e896:	d122      	bne.n	e8de <RADIO_RxHandler+0x6a>
    e898:	2022      	movs	r0, #34	; 0x22
    e89a:	47a8      	blx	r5
    e89c:	2100      	movs	r1, #0
    e89e:	2040      	movs	r0, #64	; 0x40
    e8a0:	47a8      	blx	r5
    e8a2:	2100      	movs	r1, #0
    e8a4:	2041      	movs	r0, #65	; 0x41
    e8a6:	47a8      	blx	r5
    e8a8:	8832      	ldrh	r2, [r6, #0]
    e8aa:	4b2b      	ldr	r3, [pc, #172]	; (e958 <RADIO_RxHandler+0xe4>)
    e8ac:	2a00      	cmp	r2, #0
    e8ae:	d131      	bne.n	e914 <RADIO_RxHandler+0xa0>
    e8b0:	0021      	movs	r1, r4
    e8b2:	2005      	movs	r0, #5
    e8b4:	3134      	adds	r1, #52	; 0x34
    e8b6:	7809      	ldrb	r1, [r1, #0]
    e8b8:	4798      	blx	r3
    e8ba:	68e3      	ldr	r3, [r4, #12]
    e8bc:	2b00      	cmp	r3, #0
    e8be:	d00c      	beq.n	e8da <RADIO_RxHandler+0x66>
    e8c0:	8832      	ldrh	r2, [r6, #0]
    e8c2:	2a00      	cmp	r2, #0
    e8c4:	d009      	beq.n	e8da <RADIO_RxHandler+0x66>
    e8c6:	21fa      	movs	r1, #250	; 0xfa
    e8c8:	2200      	movs	r2, #0
    e8ca:	342f      	adds	r4, #47	; 0x2f
    e8cc:	0089      	lsls	r1, r1, #2
    e8ce:	7820      	ldrb	r0, [r4, #0]
    e8d0:	4359      	muls	r1, r3
    e8d2:	9200      	str	r2, [sp, #0]
    e8d4:	4b21      	ldr	r3, [pc, #132]	; (e95c <RADIO_RxHandler+0xe8>)
    e8d6:	4c22      	ldr	r4, [pc, #136]	; (e960 <RADIO_RxHandler+0xec>)
    e8d8:	47a0      	blx	r4
    e8da:	2000      	movs	r0, #0
    e8dc:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    e8de:	0023      	movs	r3, r4
    e8e0:	3338      	adds	r3, #56	; 0x38
    e8e2:	7819      	ldrb	r1, [r3, #0]
    e8e4:	2012      	movs	r0, #18
    e8e6:	47a8      	blx	r5
    e8e8:	0023      	movs	r3, r4
    e8ea:	3339      	adds	r3, #57	; 0x39
    e8ec:	7819      	ldrb	r1, [r3, #0]
    e8ee:	2013      	movs	r0, #19
    e8f0:	47a8      	blx	r5
    e8f2:	210c      	movs	r1, #12
    e8f4:	2040      	movs	r0, #64	; 0x40
    e8f6:	47a8      	blx	r5
    e8f8:	2100      	movs	r1, #0
    e8fa:	2041      	movs	r0, #65	; 0x41
    e8fc:	47a8      	blx	r5
    e8fe:	0022      	movs	r2, r4
    e900:	2300      	movs	r3, #0
    e902:	3256      	adds	r2, #86	; 0x56
    e904:	7013      	strb	r3, [r2, #0]
    e906:	0022      	movs	r2, r4
    e908:	322c      	adds	r2, #44	; 0x2c
    e90a:	7013      	strb	r3, [r2, #0]
    e90c:	0022      	movs	r2, r4
    e90e:	3257      	adds	r2, #87	; 0x57
    e910:	7013      	strb	r3, [r2, #0]
    e912:	e7c9      	b.n	e8a8 <RADIO_RxHandler+0x34>
    e914:	0022      	movs	r2, r4
    e916:	3234      	adds	r2, #52	; 0x34
    e918:	7811      	ldrb	r1, [r2, #0]
    e91a:	2200      	movs	r2, #0
    e91c:	2901      	cmp	r1, #1
    e91e:	d101      	bne.n	e924 <RADIO_RxHandler+0xb0>
    e920:	2006      	movs	r0, #6
    e922:	e7c9      	b.n	e8b8 <RADIO_RxHandler+0x44>
    e924:	0011      	movs	r1, r2
    e926:	2005      	movs	r0, #5
    e928:	4798      	blx	r3
    e92a:	21fa      	movs	r1, #250	; 0xfa
    e92c:	8833      	ldrh	r3, [r6, #0]
    e92e:	0089      	lsls	r1, r1, #2
    e930:	4359      	muls	r1, r3
    e932:	0023      	movs	r3, r4
    e934:	2200      	movs	r2, #0
    e936:	332e      	adds	r3, #46	; 0x2e
    e938:	7818      	ldrb	r0, [r3, #0]
    e93a:	4d09      	ldr	r5, [pc, #36]	; (e960 <RADIO_RxHandler+0xec>)
    e93c:	9200      	str	r2, [sp, #0]
    e93e:	4b09      	ldr	r3, [pc, #36]	; (e964 <RADIO_RxHandler+0xf0>)
    e940:	47a8      	blx	r5
    e942:	e7ba      	b.n	e8ba <RADIO_RxHandler+0x46>
    e944:	0000e841 	.word	0x0000e841
    e948:	20002058 	.word	0x20002058
    e94c:	0000dfcd 	.word	0x0000dfcd
    e950:	20002cf4 	.word	0x20002cf4
    e954:	0000c6bd 	.word	0x0000c6bd
    e958:	0000d379 	.word	0x0000d379
    e95c:	0000e99d 	.word	0x0000e99d
    e960:	0000cd65 	.word	0x0000cd65
    e964:	0000ea2d 	.word	0x0000ea2d

0000e968 <Radio_DisableRfControl>:
    e968:	b510      	push	{r4, lr}
    e96a:	4b08      	ldr	r3, [pc, #32]	; (e98c <Radio_DisableRfControl+0x24>)
    e96c:	0001      	movs	r1, r0
    e96e:	681a      	ldr	r2, [r3, #0]
    e970:	4807      	ldr	r0, [pc, #28]	; (e990 <Radio_DisableRfControl+0x28>)
    e972:	4c08      	ldr	r4, [pc, #32]	; (e994 <Radio_DisableRfControl+0x2c>)
    e974:	1812      	adds	r2, r2, r0
    e976:	2000      	movs	r0, #0
    e978:	42a2      	cmp	r2, r4
    e97a:	d804      	bhi.n	e986 <Radio_DisableRfControl+0x1e>
    e97c:	3305      	adds	r3, #5
    e97e:	7fdb      	ldrb	r3, [r3, #31]
    e980:	1e58      	subs	r0, r3, #1
    e982:	4183      	sbcs	r3, r0
    e984:	1c58      	adds	r0, r3, #1
    e986:	4b04      	ldr	r3, [pc, #16]	; (e998 <Radio_DisableRfControl+0x30>)
    e988:	4798      	blx	r3
    e98a:	bd10      	pop	{r4, pc}
    e98c:	20002cf4 	.word	0x20002cf4
    e990:	cc9eec80 	.word	0xcc9eec80
    e994:	096ae380 	.word	0x096ae380
    e998:	0000c7d1 	.word	0x0000c7d1

0000e99c <Radio_WatchdogTimeout>:
    e99c:	b510      	push	{r4, lr}
    e99e:	4b0e      	ldr	r3, [pc, #56]	; (e9d8 <Radio_WatchdogTimeout+0x3c>)
    e9a0:	781a      	ldrb	r2, [r3, #0]
    e9a2:	2a04      	cmp	r2, #4
    e9a4:	d10b      	bne.n	e9be <Radio_WatchdogTimeout+0x22>
    e9a6:	2320      	movs	r3, #32
    e9a8:	4a0c      	ldr	r2, [pc, #48]	; (e9dc <Radio_WatchdogTimeout+0x40>)
    e9aa:	2000      	movs	r0, #0
    e9ac:	8811      	ldrh	r1, [r2, #0]
    e9ae:	430b      	orrs	r3, r1
    e9b0:	8013      	strh	r3, [r2, #0]
    e9b2:	4b0b      	ldr	r3, [pc, #44]	; (e9e0 <Radio_WatchdogTimeout+0x44>)
    e9b4:	4798      	blx	r3
    e9b6:	2002      	movs	r0, #2
    e9b8:	4b0a      	ldr	r3, [pc, #40]	; (e9e4 <Radio_WatchdogTimeout+0x48>)
    e9ba:	4798      	blx	r3
    e9bc:	bd10      	pop	{r4, pc}
    e9be:	781b      	ldrb	r3, [r3, #0]
    e9c0:	2b02      	cmp	r3, #2
    e9c2:	d1fb      	bne.n	e9bc <Radio_WatchdogTimeout+0x20>
    e9c4:	4a05      	ldr	r2, [pc, #20]	; (e9dc <Radio_WatchdogTimeout+0x40>)
    e9c6:	330e      	adds	r3, #14
    e9c8:	8811      	ldrh	r1, [r2, #0]
    e9ca:	2001      	movs	r0, #1
    e9cc:	430b      	orrs	r3, r1
    e9ce:	8013      	strh	r3, [r2, #0]
    e9d0:	4b03      	ldr	r3, [pc, #12]	; (e9e0 <Radio_WatchdogTimeout+0x44>)
    e9d2:	4798      	blx	r3
    e9d4:	2001      	movs	r0, #1
    e9d6:	e7ef      	b.n	e9b8 <Radio_WatchdogTimeout+0x1c>
    e9d8:	20002fbf 	.word	0x20002fbf
    e9dc:	20002fbc 	.word	0x20002fbc
    e9e0:	0000e969 	.word	0x0000e969
    e9e4:	0000e58d 	.word	0x0000e58d

0000e9e8 <RADIO_RxTimeout>:
    e9e8:	b510      	push	{r4, lr}
    e9ea:	4b0a      	ldr	r3, [pc, #40]	; (ea14 <RADIO_RxTimeout+0x2c>)
    e9ec:	332f      	adds	r3, #47	; 0x2f
    e9ee:	7818      	ldrb	r0, [r3, #0]
    e9f0:	4b09      	ldr	r3, [pc, #36]	; (ea18 <RADIO_RxTimeout+0x30>)
    e9f2:	4798      	blx	r3
    e9f4:	2000      	movs	r0, #0
    e9f6:	4b09      	ldr	r3, [pc, #36]	; (ea1c <RADIO_RxTimeout+0x34>)
    e9f8:	4798      	blx	r3
    e9fa:	2180      	movs	r1, #128	; 0x80
    e9fc:	2012      	movs	r0, #18
    e9fe:	4b08      	ldr	r3, [pc, #32]	; (ea20 <RADIO_RxTimeout+0x38>)
    ea00:	4798      	blx	r3
    ea02:	2340      	movs	r3, #64	; 0x40
    ea04:	4a07      	ldr	r2, [pc, #28]	; (ea24 <RADIO_RxTimeout+0x3c>)
    ea06:	2002      	movs	r0, #2
    ea08:	8811      	ldrh	r1, [r2, #0]
    ea0a:	430b      	orrs	r3, r1
    ea0c:	8013      	strh	r3, [r2, #0]
    ea0e:	4b06      	ldr	r3, [pc, #24]	; (ea28 <RADIO_RxTimeout+0x40>)
    ea10:	4798      	blx	r3
    ea12:	bd10      	pop	{r4, pc}
    ea14:	20002cf4 	.word	0x20002cf4
    ea18:	0000d069 	.word	0x0000d069
    ea1c:	0000e969 	.word	0x0000e969
    ea20:	0000c6bd 	.word	0x0000c6bd
    ea24:	20002fbc 	.word	0x20002fbc
    ea28:	0000e58d 	.word	0x0000e58d

0000ea2c <Radio_RxFSKTimeout>:
    ea2c:	b510      	push	{r4, lr}
    ea2e:	4b08      	ldr	r3, [pc, #32]	; (ea50 <Radio_RxFSKTimeout+0x24>)
    ea30:	332f      	adds	r3, #47	; 0x2f
    ea32:	7818      	ldrb	r0, [r3, #0]
    ea34:	4b07      	ldr	r3, [pc, #28]	; (ea54 <Radio_RxFSKTimeout+0x28>)
    ea36:	4798      	blx	r3
    ea38:	2000      	movs	r0, #0
    ea3a:	4b07      	ldr	r3, [pc, #28]	; (ea58 <Radio_RxFSKTimeout+0x2c>)
    ea3c:	4798      	blx	r3
    ea3e:	2380      	movs	r3, #128	; 0x80
    ea40:	4a06      	ldr	r2, [pc, #24]	; (ea5c <Radio_RxFSKTimeout+0x30>)
    ea42:	2002      	movs	r0, #2
    ea44:	8811      	ldrh	r1, [r2, #0]
    ea46:	430b      	orrs	r3, r1
    ea48:	8013      	strh	r3, [r2, #0]
    ea4a:	4b05      	ldr	r3, [pc, #20]	; (ea60 <Radio_RxFSKTimeout+0x34>)
    ea4c:	4798      	blx	r3
    ea4e:	bd10      	pop	{r4, pc}
    ea50:	20002cf4 	.word	0x20002cf4
    ea54:	0000d069 	.word	0x0000d069
    ea58:	0000e969 	.word	0x0000e969
    ea5c:	20002fbc 	.word	0x20002fbc
    ea60:	0000e58d 	.word	0x0000e58d

0000ea64 <RADIO_TxDone>:
    ea64:	b570      	push	{r4, r5, r6, lr}
    ea66:	4b14      	ldr	r3, [pc, #80]	; (eab8 <RADIO_TxDone+0x54>)
    ea68:	332f      	adds	r3, #47	; 0x2f
    ea6a:	7818      	ldrb	r0, [r3, #0]
    ea6c:	4b13      	ldr	r3, [pc, #76]	; (eabc <RADIO_TxDone+0x58>)
    ea6e:	4798      	blx	r3
    ea70:	2001      	movs	r0, #1
    ea72:	4b13      	ldr	r3, [pc, #76]	; (eac0 <RADIO_TxDone+0x5c>)
    ea74:	4798      	blx	r3
    ea76:	4b13      	ldr	r3, [pc, #76]	; (eac4 <RADIO_TxDone+0x60>)
    ea78:	2108      	movs	r1, #8
    ea7a:	2012      	movs	r0, #18
    ea7c:	4798      	blx	r3
    ea7e:	4b12      	ldr	r3, [pc, #72]	; (eac8 <RADIO_TxDone+0x64>)
    ea80:	781a      	ldrb	r2, [r3, #0]
    ea82:	4b12      	ldr	r3, [pc, #72]	; (eacc <RADIO_TxDone+0x68>)
    ea84:	2a02      	cmp	r2, #2
    ea86:	d002      	beq.n	ea8e <RADIO_TxDone+0x2a>
    ea88:	881a      	ldrh	r2, [r3, #0]
    ea8a:	0692      	lsls	r2, r2, #26
    ea8c:	d413      	bmi.n	eab6 <RADIO_TxDone+0x52>
    ea8e:	2001      	movs	r0, #1
    ea90:	881a      	ldrh	r2, [r3, #0]
    ea92:	4302      	orrs	r2, r0
    ea94:	801a      	strh	r2, [r3, #0]
    ea96:	4b0e      	ldr	r3, [pc, #56]	; (ead0 <RADIO_TxDone+0x6c>)
    ea98:	4798      	blx	r3
    ea9a:	4b0e      	ldr	r3, [pc, #56]	; (ead4 <RADIO_TxDone+0x70>)
    ea9c:	4798      	blx	r3
    ea9e:	4c0e      	ldr	r4, [pc, #56]	; (ead8 <RADIO_TxDone+0x74>)
    eaa0:	4d0e      	ldr	r5, [pc, #56]	; (eadc <RADIO_TxDone+0x78>)
    eaa2:	6822      	ldr	r2, [r4, #0]
    eaa4:	6863      	ldr	r3, [r4, #4]
    eaa6:	1a80      	subs	r0, r0, r2
    eaa8:	4199      	sbcs	r1, r3
    eaaa:	22fa      	movs	r2, #250	; 0xfa
    eaac:	2300      	movs	r3, #0
    eaae:	0092      	lsls	r2, r2, #2
    eab0:	47a8      	blx	r5
    eab2:	6020      	str	r0, [r4, #0]
    eab4:	6061      	str	r1, [r4, #4]
    eab6:	bd70      	pop	{r4, r5, r6, pc}
    eab8:	20002cf4 	.word	0x20002cf4
    eabc:	0000d069 	.word	0x0000d069
    eac0:	0000e969 	.word	0x0000e969
    eac4:	0000c6bd 	.word	0x0000c6bd
    eac8:	20002fbf 	.word	0x20002fbf
    eacc:	20002fbc 	.word	0x20002fbc
    ead0:	0000e58d 	.word	0x0000e58d
    ead4:	0000cd0d 	.word	0x0000cd0d
    ead8:	20002060 	.word	0x20002060
    eadc:	000126bd 	.word	0x000126bd

0000eae0 <RADIO_FSKPacketSent>:
    eae0:	b570      	push	{r4, r5, r6, lr}
    eae2:	4b15      	ldr	r3, [pc, #84]	; (eb38 <RADIO_FSKPacketSent+0x58>)
    eae4:	203f      	movs	r0, #63	; 0x3f
    eae6:	4798      	blx	r3
    eae8:	0703      	lsls	r3, r0, #28
    eaea:	d524      	bpl.n	eb36 <RADIO_FSKPacketSent+0x56>
    eaec:	4b13      	ldr	r3, [pc, #76]	; (eb3c <RADIO_FSKPacketSent+0x5c>)
    eaee:	332f      	adds	r3, #47	; 0x2f
    eaf0:	7818      	ldrb	r0, [r3, #0]
    eaf2:	4b13      	ldr	r3, [pc, #76]	; (eb40 <RADIO_FSKPacketSent+0x60>)
    eaf4:	4798      	blx	r3
    eaf6:	4b13      	ldr	r3, [pc, #76]	; (eb44 <RADIO_FSKPacketSent+0x64>)
    eaf8:	2001      	movs	r0, #1
    eafa:	4798      	blx	r3
    eafc:	4b12      	ldr	r3, [pc, #72]	; (eb48 <RADIO_FSKPacketSent+0x68>)
    eafe:	4c13      	ldr	r4, [pc, #76]	; (eb4c <RADIO_FSKPacketSent+0x6c>)
    eb00:	781b      	ldrb	r3, [r3, #0]
    eb02:	2b02      	cmp	r3, #2
    eb04:	d002      	beq.n	eb0c <RADIO_FSKPacketSent+0x2c>
    eb06:	8823      	ldrh	r3, [r4, #0]
    eb08:	069b      	lsls	r3, r3, #26
    eb0a:	d414      	bmi.n	eb36 <RADIO_FSKPacketSent+0x56>
    eb0c:	4b10      	ldr	r3, [pc, #64]	; (eb50 <RADIO_FSKPacketSent+0x70>)
    eb0e:	4798      	blx	r3
    eb10:	4d10      	ldr	r5, [pc, #64]	; (eb54 <RADIO_FSKPacketSent+0x74>)
    eb12:	4e11      	ldr	r6, [pc, #68]	; (eb58 <RADIO_FSKPacketSent+0x78>)
    eb14:	682a      	ldr	r2, [r5, #0]
    eb16:	686b      	ldr	r3, [r5, #4]
    eb18:	1a80      	subs	r0, r0, r2
    eb1a:	4199      	sbcs	r1, r3
    eb1c:	22fa      	movs	r2, #250	; 0xfa
    eb1e:	2300      	movs	r3, #0
    eb20:	0092      	lsls	r2, r2, #2
    eb22:	47b0      	blx	r6
    eb24:	4b0d      	ldr	r3, [pc, #52]	; (eb5c <RADIO_FSKPacketSent+0x7c>)
    eb26:	6028      	str	r0, [r5, #0]
    eb28:	6069      	str	r1, [r5, #4]
    eb2a:	2001      	movs	r0, #1
    eb2c:	4798      	blx	r3
    eb2e:	2304      	movs	r3, #4
    eb30:	8822      	ldrh	r2, [r4, #0]
    eb32:	4313      	orrs	r3, r2
    eb34:	8023      	strh	r3, [r4, #0]
    eb36:	bd70      	pop	{r4, r5, r6, pc}
    eb38:	0000c6e5 	.word	0x0000c6e5
    eb3c:	20002cf4 	.word	0x20002cf4
    eb40:	0000d069 	.word	0x0000d069
    eb44:	0000e969 	.word	0x0000e969
    eb48:	20002fbf 	.word	0x20002fbf
    eb4c:	20002fbc 	.word	0x20002fbc
    eb50:	0000cd0d 	.word	0x0000cd0d
    eb54:	20002060 	.word	0x20002060
    eb58:	000126bd 	.word	0x000126bd
    eb5c:	0000e58d 	.word	0x0000e58d

0000eb60 <RADIO_RxDone>:
    eb60:	b570      	push	{r4, r5, r6, lr}
    eb62:	2012      	movs	r0, #18
    eb64:	4e16      	ldr	r6, [pc, #88]	; (ebc0 <RADIO_RxDone+0x60>)
    eb66:	47b0      	blx	r6
    eb68:	4b16      	ldr	r3, [pc, #88]	; (ebc4 <RADIO_RxDone+0x64>)
    eb6a:	0005      	movs	r5, r0
    eb6c:	2170      	movs	r1, #112	; 0x70
    eb6e:	2012      	movs	r0, #18
    eb70:	4798      	blx	r3
    eb72:	2350      	movs	r3, #80	; 0x50
    eb74:	402b      	ands	r3, r5
    eb76:	2b50      	cmp	r3, #80	; 0x50
    eb78:	d119      	bne.n	ebae <RADIO_RxDone+0x4e>
    eb7a:	4c13      	ldr	r4, [pc, #76]	; (ebc8 <RADIO_RxDone+0x68>)
    eb7c:	0023      	movs	r3, r4
    eb7e:	332f      	adds	r3, #47	; 0x2f
    eb80:	7818      	ldrb	r0, [r3, #0]
    eb82:	4b12      	ldr	r3, [pc, #72]	; (ebcc <RADIO_RxDone+0x6c>)
    eb84:	4798      	blx	r3
    eb86:	4b12      	ldr	r3, [pc, #72]	; (ebd0 <RADIO_RxDone+0x70>)
    eb88:	2000      	movs	r0, #0
    eb8a:	4798      	blx	r3
    eb8c:	3404      	adds	r4, #4
    eb8e:	201c      	movs	r0, #28
    eb90:	47b0      	blx	r6
    eb92:	7fe2      	ldrb	r2, [r4, #31]
    eb94:	4b0f      	ldr	r3, [pc, #60]	; (ebd4 <RADIO_RxDone+0x74>)
    eb96:	4910      	ldr	r1, [pc, #64]	; (ebd8 <RADIO_RxDone+0x78>)
    eb98:	2a00      	cmp	r2, #0
    eb9a:	d003      	beq.n	eba4 <RADIO_RxDone+0x44>
    eb9c:	06aa      	lsls	r2, r5, #26
    eb9e:	d407      	bmi.n	ebb0 <RADIO_RxDone+0x50>
    eba0:	0642      	lsls	r2, r0, #25
    eba2:	d505      	bpl.n	ebb0 <RADIO_RxDone+0x50>
    eba4:	2002      	movs	r0, #2
    eba6:	881a      	ldrh	r2, [r3, #0]
    eba8:	4302      	orrs	r2, r0
    ebaa:	801a      	strh	r2, [r3, #0]
    ebac:	4788      	blx	r1
    ebae:	bd70      	pop	{r4, r5, r6, pc}
    ebb0:	2280      	movs	r2, #128	; 0x80
    ebb2:	8818      	ldrh	r0, [r3, #0]
    ebb4:	0052      	lsls	r2, r2, #1
    ebb6:	4302      	orrs	r2, r0
    ebb8:	801a      	strh	r2, [r3, #0]
    ebba:	2002      	movs	r0, #2
    ebbc:	e7f6      	b.n	ebac <RADIO_RxDone+0x4c>
    ebbe:	46c0      	nop			; (mov r8, r8)
    ebc0:	0000c6e5 	.word	0x0000c6e5
    ebc4:	0000c6bd 	.word	0x0000c6bd
    ebc8:	20002cf4 	.word	0x20002cf4
    ebcc:	0000d069 	.word	0x0000d069
    ebd0:	0000e969 	.word	0x0000e969
    ebd4:	20002fbc 	.word	0x20002fbc
    ebd8:	0000e58d 	.word	0x0000e58d

0000ebdc <RADIO_FSKPayloadReady>:
    ebdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ebde:	203f      	movs	r0, #63	; 0x3f
    ebe0:	4b39      	ldr	r3, [pc, #228]	; (ecc8 <RADIO_FSKPayloadReady+0xec>)
    ebe2:	4798      	blx	r3
    ebe4:	0743      	lsls	r3, r0, #29
    ebe6:	d559      	bpl.n	ec9c <RADIO_FSKPayloadReady+0xc0>
    ebe8:	4c38      	ldr	r4, [pc, #224]	; (eccc <RADIO_FSKPayloadReady+0xf0>)
    ebea:	4d39      	ldr	r5, [pc, #228]	; (ecd0 <RADIO_FSKPayloadReady+0xf4>)
    ebec:	1d23      	adds	r3, r4, #4
    ebee:	7fdb      	ldrb	r3, [r3, #31]
    ebf0:	2b01      	cmp	r3, #1
    ebf2:	d154      	bne.n	ec9e <RADIO_FSKPayloadReady+0xc2>
    ebf4:	2202      	movs	r2, #2
    ebf6:	4210      	tst	r0, r2
    ebf8:	d048      	beq.n	ec8c <RADIO_FSKPayloadReady+0xb0>
    ebfa:	0023      	movs	r3, r4
    ebfc:	332f      	adds	r3, #47	; 0x2f
    ebfe:	7818      	ldrb	r0, [r3, #0]
    ec00:	4e34      	ldr	r6, [pc, #208]	; (ecd4 <RADIO_FSKPayloadReady+0xf8>)
    ec02:	47b0      	blx	r6
    ec04:	0023      	movs	r3, r4
    ec06:	332e      	adds	r3, #46	; 0x2e
    ec08:	7818      	ldrb	r0, [r3, #0]
    ec0a:	47b0      	blx	r6
    ec0c:	4b32      	ldr	r3, [pc, #200]	; (ecd8 <RADIO_FSKPayloadReady+0xfc>)
    ec0e:	4798      	blx	r3
    ec10:	0022      	movs	r2, r4
    ec12:	0023      	movs	r3, r4
    ec14:	322c      	adds	r2, #44	; 0x2c
    ec16:	3357      	adds	r3, #87	; 0x57
    ec18:	7810      	ldrb	r0, [r2, #0]
    ec1a:	7819      	ldrb	r1, [r3, #0]
    ec1c:	4288      	cmp	r0, r1
    ec1e:	d105      	bne.n	ec2c <RADIO_FSKPayloadReady+0x50>
    ec20:	7812      	ldrb	r2, [r2, #0]
    ec22:	2a00      	cmp	r2, #0
    ec24:	d002      	beq.n	ec2c <RADIO_FSKPayloadReady+0x50>
    ec26:	781b      	ldrb	r3, [r3, #0]
    ec28:	2b00      	cmp	r3, #0
    ec2a:	d118      	bne.n	ec5e <RADIO_FSKPayloadReady+0x82>
    ec2c:	0021      	movs	r1, r4
    ec2e:	312c      	adds	r1, #44	; 0x2c
    ec30:	7808      	ldrb	r0, [r1, #0]
    ec32:	b2c0      	uxtb	r0, r0
    ec34:	2800      	cmp	r0, #0
    ec36:	d102      	bne.n	ec3e <RADIO_FSKPayloadReady+0x62>
    ec38:	2201      	movs	r2, #1
    ec3a:	4b28      	ldr	r3, [pc, #160]	; (ecdc <RADIO_FSKPayloadReady+0x100>)
    ec3c:	4798      	blx	r3
    ec3e:	0026      	movs	r6, r4
    ec40:	0027      	movs	r7, r4
    ec42:	3657      	adds	r6, #87	; 0x57
    ec44:	7830      	ldrb	r0, [r6, #0]
    ec46:	372c      	adds	r7, #44	; 0x2c
    ec48:	b2c0      	uxtb	r0, r0
    ec4a:	2800      	cmp	r0, #0
    ec4c:	d110      	bne.n	ec70 <RADIO_FSKPayloadReady+0x94>
    ec4e:	783a      	ldrb	r2, [r7, #0]
    ec50:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    ec52:	b2d2      	uxtb	r2, r2
    ec54:	4b21      	ldr	r3, [pc, #132]	; (ecdc <RADIO_FSKPayloadReady+0x100>)
    ec56:	4798      	blx	r3
    ec58:	783b      	ldrb	r3, [r7, #0]
    ec5a:	b2db      	uxtb	r3, r3
    ec5c:	7033      	strb	r3, [r6, #0]
    ec5e:	4b20      	ldr	r3, [pc, #128]	; (ece0 <RADIO_FSKPayloadReady+0x104>)
    ec60:	4798      	blx	r3
    ec62:	4b20      	ldr	r3, [pc, #128]	; (ece4 <RADIO_FSKPayloadReady+0x108>)
    ec64:	2000      	movs	r0, #0
    ec66:	4798      	blx	r3
    ec68:	2308      	movs	r3, #8
    ec6a:	882a      	ldrh	r2, [r5, #0]
    ec6c:	4313      	orrs	r3, r2
    ec6e:	e011      	b.n	ec94 <RADIO_FSKPayloadReady+0xb8>
    ec70:	783b      	ldrb	r3, [r7, #0]
    ec72:	7832      	ldrb	r2, [r6, #0]
    ec74:	1a9b      	subs	r3, r3, r2
    ec76:	2b00      	cmp	r3, #0
    ec78:	ddf1      	ble.n	ec5e <RADIO_FSKPayloadReady+0x82>
    ec7a:	7833      	ldrb	r3, [r6, #0]
    ec7c:	783a      	ldrb	r2, [r7, #0]
    ec7e:	7831      	ldrb	r1, [r6, #0]
    ec80:	2000      	movs	r0, #0
    ec82:	1a52      	subs	r2, r2, r1
    ec84:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    ec86:	b2d2      	uxtb	r2, r2
    ec88:	18c9      	adds	r1, r1, r3
    ec8a:	e7e3      	b.n	ec54 <RADIO_FSKPayloadReady+0x78>
    ec8c:	2380      	movs	r3, #128	; 0x80
    ec8e:	8829      	ldrh	r1, [r5, #0]
    ec90:	005b      	lsls	r3, r3, #1
    ec92:	430b      	orrs	r3, r1
    ec94:	802b      	strh	r3, [r5, #0]
    ec96:	2002      	movs	r0, #2
    ec98:	4b13      	ldr	r3, [pc, #76]	; (ece8 <RADIO_FSKPayloadReady+0x10c>)
    ec9a:	4798      	blx	r3
    ec9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ec9e:	0023      	movs	r3, r4
    eca0:	332f      	adds	r3, #47	; 0x2f
    eca2:	4e0c      	ldr	r6, [pc, #48]	; (ecd4 <RADIO_FSKPayloadReady+0xf8>)
    eca4:	7818      	ldrb	r0, [r3, #0]
    eca6:	47b0      	blx	r6
    eca8:	0023      	movs	r3, r4
    ecaa:	332e      	adds	r3, #46	; 0x2e
    ecac:	7818      	ldrb	r0, [r3, #0]
    ecae:	47b0      	blx	r6
    ecb0:	4e0e      	ldr	r6, [pc, #56]	; (ecec <RADIO_FSKPayloadReady+0x110>)
    ecb2:	2201      	movs	r2, #1
    ecb4:	0031      	movs	r1, r6
    ecb6:	2000      	movs	r0, #0
    ecb8:	4f08      	ldr	r7, [pc, #32]	; (ecdc <RADIO_FSKPayloadReady+0x100>)
    ecba:	47b8      	blx	r7
    ecbc:	7832      	ldrb	r2, [r6, #0]
    ecbe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    ecc0:	b2d2      	uxtb	r2, r2
    ecc2:	2000      	movs	r0, #0
    ecc4:	47b8      	blx	r7
    ecc6:	e7cc      	b.n	ec62 <RADIO_FSKPayloadReady+0x86>
    ecc8:	0000c6e5 	.word	0x0000c6e5
    eccc:	20002cf4 	.word	0x20002cf4
    ecd0:	20002fbc 	.word	0x20002fbc
    ecd4:	0000d069 	.word	0x0000d069
    ecd8:	00004aa5 	.word	0x00004aa5
    ecdc:	0000c751 	.word	0x0000c751
    ece0:	00004ae5 	.word	0x00004ae5
    ece4:	0000e969 	.word	0x0000e969
    ece8:	0000e58d 	.word	0x0000e58d
    ecec:	20002d20 	.word	0x20002d20

0000ecf0 <Radio_SetClockInput>:
    ecf0:	b510      	push	{r4, lr}
    ecf2:	4b08      	ldr	r3, [pc, #32]	; (ed14 <Radio_SetClockInput+0x24>)
    ecf4:	3355      	adds	r3, #85	; 0x55
    ecf6:	781b      	ldrb	r3, [r3, #0]
    ecf8:	2b00      	cmp	r3, #0
    ecfa:	d10a      	bne.n	ed12 <Radio_SetClockInput+0x22>
    ecfc:	4b06      	ldr	r3, [pc, #24]	; (ed18 <Radio_SetClockInput+0x28>)
    ecfe:	204b      	movs	r0, #75	; 0x4b
    ed00:	4798      	blx	r3
    ed02:	2110      	movs	r1, #16
    ed04:	4301      	orrs	r1, r0
    ed06:	4b05      	ldr	r3, [pc, #20]	; (ed1c <Radio_SetClockInput+0x2c>)
    ed08:	b2c9      	uxtb	r1, r1
    ed0a:	204b      	movs	r0, #75	; 0x4b
    ed0c:	4798      	blx	r3
    ed0e:	4b04      	ldr	r3, [pc, #16]	; (ed20 <Radio_SetClockInput+0x30>)
    ed10:	4798      	blx	r3
    ed12:	bd10      	pop	{r4, pc}
    ed14:	20002cf4 	.word	0x20002cf4
    ed18:	0000c6e5 	.word	0x0000c6e5
    ed1c:	0000c6bd 	.word	0x0000c6bd
    ed20:	0000c7ed 	.word	0x0000c7ed

0000ed24 <Radio_ResetClockInput>:
    ed24:	b510      	push	{r4, lr}
    ed26:	4b04      	ldr	r3, [pc, #16]	; (ed38 <Radio_ResetClockInput+0x14>)
    ed28:	3355      	adds	r3, #85	; 0x55
    ed2a:	781b      	ldrb	r3, [r3, #0]
    ed2c:	2b00      	cmp	r3, #0
    ed2e:	d101      	bne.n	ed34 <Radio_ResetClockInput+0x10>
    ed30:	4b02      	ldr	r3, [pc, #8]	; (ed3c <Radio_ResetClockInput+0x18>)
    ed32:	4798      	blx	r3
    ed34:	bd10      	pop	{r4, pc}
    ed36:	46c0      	nop			; (mov r8, r8)
    ed38:	20002cf4 	.word	0x20002cf4
    ed3c:	0000c809 	.word	0x0000c809

0000ed40 <RADIO_InitDefaultAttributes>:
    ed40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ed42:	2501      	movs	r5, #1
    ed44:	4b64      	ldr	r3, [pc, #400]	; (eed8 <RADIO_InitDefaultAttributes+0x198>)
    ed46:	4c65      	ldr	r4, [pc, #404]	; (eedc <RADIO_InitDefaultAttributes+0x19c>)
    ed48:	701d      	strb	r5, [r3, #0]
    ed4a:	4b65      	ldr	r3, [pc, #404]	; (eee0 <RADIO_InitDefaultAttributes+0x1a0>)
    ed4c:	2207      	movs	r2, #7
    ed4e:	6023      	str	r3, [r4, #0]
    ed50:	4b64      	ldr	r3, [pc, #400]	; (eee4 <RADIO_InitDefaultAttributes+0x1a4>)
    ed52:	18a1      	adds	r1, r4, r2
    ed54:	6063      	str	r3, [r4, #4]
    ed56:	4b64      	ldr	r3, [pc, #400]	; (eee8 <RADIO_InitDefaultAttributes+0x1a8>)
    ed58:	0027      	movs	r7, r4
    ed5a:	60a3      	str	r3, [r4, #8]
    ed5c:	0023      	movs	r3, r4
    ed5e:	3334      	adds	r3, #52	; 0x34
    ed60:	701d      	strb	r5, [r3, #0]
    ed62:	0023      	movs	r3, r4
    ed64:	3336      	adds	r3, #54	; 0x36
    ed66:	701a      	strb	r2, [r3, #0]
    ed68:	1ce3      	adds	r3, r4, #3
    ed6a:	77dd      	strb	r5, [r3, #31]
    ed6c:	0023      	movs	r3, r4
    ed6e:	3333      	adds	r3, #51	; 0x33
    ed70:	701d      	strb	r5, [r3, #0]
    ed72:	2300      	movs	r3, #0
    ed74:	77cb      	strb	r3, [r1, #31]
    ed76:	2108      	movs	r1, #8
    ed78:	82a1      	strh	r1, [r4, #20]
    ed7a:	0021      	movs	r1, r4
    ed7c:	3135      	adds	r1, #53	; 0x35
    ed7e:	700a      	strb	r2, [r1, #0]
    ed80:	1d22      	adds	r2, r4, #4
    ed82:	77d5      	strb	r5, [r2, #31]
    ed84:	1d62      	adds	r2, r4, #5
    ed86:	77d3      	strb	r3, [r2, #31]
    ed88:	1da2      	adds	r2, r4, #6
    ed8a:	77d3      	strb	r3, [r2, #31]
    ed8c:	2194      	movs	r1, #148	; 0x94
    ed8e:	22c1      	movs	r2, #193	; 0xc1
    ed90:	76a1      	strb	r1, [r4, #26]
    ed92:	7662      	strb	r2, [r4, #25]
    ed94:	76e2      	strb	r2, [r4, #27]
    ed96:	3991      	subs	r1, #145	; 0x91
    ed98:	1ca2      	adds	r2, r4, #2
    ed9a:	77d1      	strb	r1, [r2, #31]
    ed9c:	2234      	movs	r2, #52	; 0x34
    ed9e:	7622      	strb	r2, [r4, #24]
    eda0:	0022      	movs	r2, r4
    eda2:	317d      	adds	r1, #125	; 0x7d
    eda4:	3232      	adds	r2, #50	; 0x32
    eda6:	7011      	strb	r1, [r2, #0]
    eda8:	4a50      	ldr	r2, [pc, #320]	; (eeec <RADIO_InitDefaultAttributes+0x1ac>)
    edaa:	397e      	subs	r1, #126	; 0x7e
    edac:	60e2      	str	r2, [r4, #12]
    edae:	0022      	movs	r2, r4
    edb0:	3237      	adds	r2, #55	; 0x37
    edb2:	7011      	strb	r1, [r2, #0]
    edb4:	0022      	movs	r2, r4
    edb6:	3109      	adds	r1, #9
    edb8:	3238      	adds	r2, #56	; 0x38
    edba:	7011      	strb	r1, [r2, #0]
    edbc:	0022      	movs	r2, r4
    edbe:	3107      	adds	r1, #7
    edc0:	3239      	adds	r2, #57	; 0x39
    edc2:	7011      	strb	r1, [r2, #0]
    edc4:	0022      	movs	r2, r4
    edc6:	322c      	adds	r2, #44	; 0x2c
    edc8:	7013      	strb	r3, [r2, #0]
    edca:	4a49      	ldr	r2, [pc, #292]	; (eef0 <RADIO_InitDefaultAttributes+0x1b0>)
    edcc:	82e3      	strh	r3, [r4, #22]
    edce:	62a2      	str	r2, [r4, #40]	; 0x28
    edd0:	0022      	movs	r2, r4
    edd2:	324c      	adds	r2, #76	; 0x4c
    edd4:	8013      	strh	r3, [r2, #0]
    edd6:	0022      	movs	r2, r4
    edd8:	324e      	adds	r2, #78	; 0x4e
    edda:	7013      	strb	r3, [r2, #0]
    eddc:	0022      	movs	r2, r4
    edde:	324f      	adds	r2, #79	; 0x4f
    ede0:	7013      	strb	r3, [r2, #0]
    ede2:	0022      	movs	r2, r4
    ede4:	3240      	adds	r2, #64	; 0x40
    ede6:	7013      	strb	r3, [r2, #0]
    ede8:	0022      	movs	r2, r4
    edea:	3241      	adds	r2, #65	; 0x41
    edec:	7013      	strb	r3, [r2, #0]
    edee:	0022      	movs	r2, r4
    edf0:	3254      	adds	r2, #84	; 0x54
    edf2:	7013      	strb	r3, [r2, #0]
    edf4:	0022      	movs	r2, r4
    edf6:	3255      	adds	r2, #85	; 0x55
    edf8:	7015      	strb	r5, [r2, #0]
    edfa:	0022      	movs	r2, r4
    edfc:	3257      	adds	r2, #87	; 0x57
    edfe:	6463      	str	r3, [r4, #68]	; 0x44
    ee00:	64a3      	str	r3, [r4, #72]	; 0x48
    ee02:	87a3      	strh	r3, [r4, #60]	; 0x3c
    ee04:	87e3      	strh	r3, [r4, #62]	; 0x3e
    ee06:	7013      	strb	r3, [r2, #0]
    ee08:	3730      	adds	r7, #48	; 0x30
    ee0a:	783b      	ldrb	r3, [r7, #0]
    ee0c:	2b00      	cmp	r3, #0
    ee0e:	d151      	bne.n	eeb4 <RADIO_InitDefaultAttributes+0x174>
    ee10:	4838      	ldr	r0, [pc, #224]	; (eef4 <RADIO_InitDefaultAttributes+0x1b4>)
    ee12:	4e39      	ldr	r6, [pc, #228]	; (eef8 <RADIO_InitDefaultAttributes+0x1b8>)
    ee14:	47b0      	blx	r6
    ee16:	2808      	cmp	r0, #8
    ee18:	d149      	bne.n	eeae <RADIO_InitDefaultAttributes+0x16e>
    ee1a:	4838      	ldr	r0, [pc, #224]	; (eefc <RADIO_InitDefaultAttributes+0x1bc>)
    ee1c:	47b0      	blx	r6
    ee1e:	2808      	cmp	r0, #8
    ee20:	d145      	bne.n	eeae <RADIO_InitDefaultAttributes+0x16e>
    ee22:	4837      	ldr	r0, [pc, #220]	; (ef00 <RADIO_InitDefaultAttributes+0x1c0>)
    ee24:	47b0      	blx	r6
    ee26:	2808      	cmp	r0, #8
    ee28:	d141      	bne.n	eeae <RADIO_InitDefaultAttributes+0x16e>
    ee2a:	4836      	ldr	r0, [pc, #216]	; (ef04 <RADIO_InitDefaultAttributes+0x1c4>)
    ee2c:	47b0      	blx	r6
    ee2e:	2808      	cmp	r0, #8
    ee30:	d13d      	bne.n	eeae <RADIO_InitDefaultAttributes+0x16e>
    ee32:	703d      	strb	r5, [r7, #0]
    ee34:	4b34      	ldr	r3, [pc, #208]	; (ef08 <RADIO_InitDefaultAttributes+0x1c8>)
    ee36:	4798      	blx	r3
    ee38:	4b34      	ldr	r3, [pc, #208]	; (ef0c <RADIO_InitDefaultAttributes+0x1cc>)
    ee3a:	4798      	blx	r3
    ee3c:	2800      	cmp	r0, #0
    ee3e:	d107      	bne.n	ee50 <RADIO_InitDefaultAttributes+0x110>
    ee40:	0023      	movs	r3, r4
    ee42:	3355      	adds	r3, #85	; 0x55
    ee44:	7018      	strb	r0, [r3, #0]
    ee46:	4b32      	ldr	r3, [pc, #200]	; (ef10 <RADIO_InitDefaultAttributes+0x1d0>)
    ee48:	4798      	blx	r3
    ee4a:	0023      	movs	r3, r4
    ee4c:	3354      	adds	r3, #84	; 0x54
    ee4e:	7018      	strb	r0, [r3, #0]
    ee50:	4b30      	ldr	r3, [pc, #192]	; (ef14 <RADIO_InitDefaultAttributes+0x1d4>)
    ee52:	4798      	blx	r3
    ee54:	2201      	movs	r2, #1
    ee56:	2100      	movs	r1, #0
    ee58:	0010      	movs	r0, r2
    ee5a:	4f2f      	ldr	r7, [pc, #188]	; (ef18 <RADIO_InitDefaultAttributes+0x1d8>)
    ee5c:	47b8      	blx	r7
    ee5e:	6820      	ldr	r0, [r4, #0]
    ee60:	4b2e      	ldr	r3, [pc, #184]	; (ef1c <RADIO_InitDefaultAttributes+0x1dc>)
    ee62:	4798      	blx	r3
    ee64:	2142      	movs	r1, #66	; 0x42
    ee66:	203b      	movs	r0, #59	; 0x3b
    ee68:	4d2d      	ldr	r5, [pc, #180]	; (ef20 <RADIO_InitDefaultAttributes+0x1e0>)
    ee6a:	47a8      	blx	r5
    ee6c:	203b      	movs	r0, #59	; 0x3b
    ee6e:	4b2d      	ldr	r3, [pc, #180]	; (ef24 <RADIO_InitDefaultAttributes+0x1e4>)
    ee70:	4798      	blx	r3
    ee72:	2620      	movs	r6, #32
    ee74:	4006      	ands	r6, r0
    ee76:	d1f9      	bne.n	ee6c <RADIO_InitDefaultAttributes+0x12c>
    ee78:	2123      	movs	r1, #35	; 0x23
    ee7a:	200c      	movs	r0, #12
    ee7c:	47a8      	blx	r5
    ee7e:	21aa      	movs	r1, #170	; 0xaa
    ee80:	201f      	movs	r0, #31
    ee82:	47a8      	blx	r5
    ee84:	21ff      	movs	r1, #255	; 0xff
    ee86:	2032      	movs	r0, #50	; 0x32
    ee88:	47a8      	blx	r5
    ee8a:	2140      	movs	r1, #64	; 0x40
    ee8c:	2031      	movs	r0, #49	; 0x31
    ee8e:	47a8      	blx	r5
    ee90:	2201      	movs	r2, #1
    ee92:	0030      	movs	r0, r6
    ee94:	0011      	movs	r1, r2
    ee96:	47b8      	blx	r7
    ee98:	21ff      	movs	r1, #255	; 0xff
    ee9a:	2023      	movs	r0, #35	; 0x23
    ee9c:	47a8      	blx	r5
    ee9e:	4b21      	ldr	r3, [pc, #132]	; (ef24 <RADIO_InitDefaultAttributes+0x1e4>)
    eea0:	2042      	movs	r0, #66	; 0x42
    eea2:	4798      	blx	r3
    eea4:	3431      	adds	r4, #49	; 0x31
    eea6:	4b20      	ldr	r3, [pc, #128]	; (ef28 <RADIO_InitDefaultAttributes+0x1e8>)
    eea8:	7020      	strb	r0, [r4, #0]
    eeaa:	4798      	blx	r3
    eeac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eeae:	4b1f      	ldr	r3, [pc, #124]	; (ef2c <RADIO_InitDefaultAttributes+0x1ec>)
    eeb0:	4798      	blx	r3
    eeb2:	e7bf      	b.n	ee34 <RADIO_InitDefaultAttributes+0xf4>
    eeb4:	0023      	movs	r3, r4
    eeb6:	332d      	adds	r3, #45	; 0x2d
    eeb8:	4d1d      	ldr	r5, [pc, #116]	; (ef30 <RADIO_InitDefaultAttributes+0x1f0>)
    eeba:	7818      	ldrb	r0, [r3, #0]
    eebc:	47a8      	blx	r5
    eebe:	0023      	movs	r3, r4
    eec0:	332e      	adds	r3, #46	; 0x2e
    eec2:	7818      	ldrb	r0, [r3, #0]
    eec4:	47a8      	blx	r5
    eec6:	0023      	movs	r3, r4
    eec8:	332f      	adds	r3, #47	; 0x2f
    eeca:	7818      	ldrb	r0, [r3, #0]
    eecc:	47a8      	blx	r5
    eece:	0023      	movs	r3, r4
    eed0:	3350      	adds	r3, #80	; 0x50
    eed2:	7818      	ldrb	r0, [r3, #0]
    eed4:	47a8      	blx	r5
    eed6:	e7ad      	b.n	ee34 <RADIO_InitDefaultAttributes+0xf4>
    eed8:	20002fbf 	.word	0x20002fbf
    eedc:	20002cf4 	.word	0x20002cf4
    eee0:	33be27a0 	.word	0x33be27a0
    eee4:	000061a8 	.word	0x000061a8
    eee8:	0000c350 	.word	0x0000c350
    eeec:	00003a98 	.word	0x00003a98
    eef0:	20002ebc 	.word	0x20002ebc
    eef4:	20002d21 	.word	0x20002d21
    eef8:	0000cd31 	.word	0x0000cd31
    eefc:	20002d22 	.word	0x20002d22
    ef00:	20002d23 	.word	0x20002d23
    ef04:	20002d44 	.word	0x20002d44
    ef08:	0000c67d 	.word	0x0000c67d
    ef0c:	0000c7e9 	.word	0x0000c7e9
    ef10:	0000c7e5 	.word	0x0000c7e5
    ef14:	0000ecf1 	.word	0x0000ecf1
    ef18:	0000d379 	.word	0x0000d379
    ef1c:	0000df85 	.word	0x0000df85
    ef20:	0000c6bd 	.word	0x0000c6bd
    ef24:	0000c6e5 	.word	0x0000c6e5
    ef28:	0000ed25 	.word	0x0000ed25
    ef2c:	0000cc75 	.word	0x0000cc75
    ef30:	0000d069 	.word	0x0000d069

0000ef34 <RADIO_Receive>:
    ef34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ef36:	7803      	ldrb	r3, [r0, #0]
    ef38:	0006      	movs	r6, r0
    ef3a:	4d24      	ldr	r5, [pc, #144]	; (efcc <RADIO_Receive+0x98>)
    ef3c:	2b00      	cmp	r3, #0
    ef3e:	d11d      	bne.n	ef7c <RADIO_Receive+0x48>
    ef40:	782b      	ldrb	r3, [r5, #0]
    ef42:	2004      	movs	r0, #4
    ef44:	2b01      	cmp	r3, #1
    ef46:	d118      	bne.n	ef7a <RADIO_Receive+0x46>
    ef48:	4c21      	ldr	r4, [pc, #132]	; (efd0 <RADIO_Receive+0x9c>)
    ef4a:	4f22      	ldr	r7, [pc, #136]	; (efd4 <RADIO_Receive+0xa0>)
    ef4c:	0023      	movs	r3, r4
    ef4e:	332f      	adds	r3, #47	; 0x2f
    ef50:	7818      	ldrb	r0, [r3, #0]
    ef52:	47b8      	blx	r7
    ef54:	0023      	movs	r3, r4
    ef56:	3334      	adds	r3, #52	; 0x34
    ef58:	781b      	ldrb	r3, [r3, #0]
    ef5a:	2b00      	cmp	r3, #0
    ef5c:	d102      	bne.n	ef64 <RADIO_Receive+0x30>
    ef5e:	342e      	adds	r4, #46	; 0x2e
    ef60:	7820      	ldrb	r0, [r4, #0]
    ef62:	47b8      	blx	r7
    ef64:	8872      	ldrh	r2, [r6, #2]
    ef66:	4b1c      	ldr	r3, [pc, #112]	; (efd8 <RADIO_Receive+0xa4>)
    ef68:	2008      	movs	r0, #8
    ef6a:	801a      	strh	r2, [r3, #0]
    ef6c:	2304      	movs	r3, #4
    ef6e:	702b      	strb	r3, [r5, #0]
    ef70:	4b1a      	ldr	r3, [pc, #104]	; (efdc <RADIO_Receive+0xa8>)
    ef72:	4798      	blx	r3
    ef74:	4b1a      	ldr	r3, [pc, #104]	; (efe0 <RADIO_Receive+0xac>)
    ef76:	4798      	blx	r3
    ef78:	2000      	movs	r0, #0
    ef7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ef7c:	782b      	ldrb	r3, [r5, #0]
    ef7e:	2000      	movs	r0, #0
    ef80:	2b01      	cmp	r3, #1
    ef82:	d0fa      	beq.n	ef7a <RADIO_Receive+0x46>
    ef84:	782b      	ldrb	r3, [r5, #0]
    ef86:	3003      	adds	r0, #3
    ef88:	2b04      	cmp	r3, #4
    ef8a:	d1f6      	bne.n	ef7a <RADIO_Receive+0x46>
    ef8c:	4c10      	ldr	r4, [pc, #64]	; (efd0 <RADIO_Receive+0x9c>)
    ef8e:	4e11      	ldr	r6, [pc, #68]	; (efd4 <RADIO_Receive+0xa0>)
    ef90:	0023      	movs	r3, r4
    ef92:	332f      	adds	r3, #47	; 0x2f
    ef94:	7818      	ldrb	r0, [r3, #0]
    ef96:	47b0      	blx	r6
    ef98:	0023      	movs	r3, r4
    ef9a:	3334      	adds	r3, #52	; 0x34
    ef9c:	781b      	ldrb	r3, [r3, #0]
    ef9e:	2b00      	cmp	r3, #0
    efa0:	d103      	bne.n	efaa <RADIO_Receive+0x76>
    efa2:	0023      	movs	r3, r4
    efa4:	332e      	adds	r3, #46	; 0x2e
    efa6:	7818      	ldrb	r0, [r3, #0]
    efa8:	47b0      	blx	r6
    efaa:	2200      	movs	r2, #0
    efac:	3434      	adds	r4, #52	; 0x34
    efae:	7821      	ldrb	r1, [r4, #0]
    efb0:	0010      	movs	r0, r2
    efb2:	4b0c      	ldr	r3, [pc, #48]	; (efe4 <RADIO_Receive+0xb0>)
    efb4:	4798      	blx	r3
    efb6:	4b0c      	ldr	r3, [pc, #48]	; (efe8 <RADIO_Receive+0xb4>)
    efb8:	4798      	blx	r3
    efba:	2301      	movs	r3, #1
    efbc:	2008      	movs	r0, #8
    efbe:	4c0b      	ldr	r4, [pc, #44]	; (efec <RADIO_Receive+0xb8>)
    efc0:	702b      	strb	r3, [r5, #0]
    efc2:	47a0      	blx	r4
    efc4:	2002      	movs	r0, #2
    efc6:	47a0      	blx	r4
    efc8:	e7d6      	b.n	ef78 <RADIO_Receive+0x44>
    efca:	46c0      	nop			; (mov r8, r8)
    efcc:	20002fbf 	.word	0x20002fbf
    efd0:	20002cf4 	.word	0x20002cf4
    efd4:	0000d069 	.word	0x0000d069
    efd8:	20002058 	.word	0x20002058
    efdc:	0000e58d 	.word	0x0000e58d
    efe0:	0000ecf1 	.word	0x0000ecf1
    efe4:	0000d379 	.word	0x0000d379
    efe8:	0000ed25 	.word	0x0000ed25
    efec:	0000e5b9 	.word	0x0000e5b9

0000eff0 <RADIO_TxHandler>:
    eff0:	b5f0      	push	{r4, r5, r6, r7, lr}
    eff2:	4d5d      	ldr	r5, [pc, #372]	; (f168 <RADIO_TxHandler+0x178>)
    eff4:	b087      	sub	sp, #28
    eff6:	47a8      	blx	r5
    eff8:	2001      	movs	r0, #1
    effa:	4c5c      	ldr	r4, [pc, #368]	; (f16c <RADIO_TxHandler+0x17c>)
    effc:	47a0      	blx	r4
    effe:	4f5c      	ldr	r7, [pc, #368]	; (f170 <RADIO_TxHandler+0x180>)
    f000:	003b      	movs	r3, r7
    f002:	332d      	adds	r3, #45	; 0x2d
    f004:	7818      	ldrb	r0, [r3, #0]
    f006:	4b5b      	ldr	r3, [pc, #364]	; (f174 <RADIO_TxHandler+0x184>)
    f008:	4798      	blx	r3
    f00a:	003b      	movs	r3, r7
    f00c:	3341      	adds	r3, #65	; 0x41
    f00e:	781b      	ldrb	r3, [r3, #0]
    f010:	2b00      	cmp	r3, #0
    f012:	d035      	beq.n	f080 <RADIO_TxHandler+0x90>
    f014:	8fbe      	ldrh	r6, [r7, #60]	; 0x3c
    f016:	47a8      	blx	r5
    f018:	2000      	movs	r0, #0
    f01a:	47a0      	blx	r4
    f01c:	6838      	ldr	r0, [r7, #0]
    f01e:	4b56      	ldr	r3, [pc, #344]	; (f178 <RADIO_TxHandler+0x188>)
    f020:	4798      	blx	r3
    f022:	003b      	movs	r3, r7
    f024:	2400      	movs	r4, #0
    f026:	334c      	adds	r3, #76	; 0x4c
    f028:	801c      	strh	r4, [r3, #0]
    f02a:	2201      	movs	r2, #1
    f02c:	0021      	movs	r1, r4
    f02e:	0020      	movs	r0, r4
    f030:	4b52      	ldr	r3, [pc, #328]	; (f17c <RADIO_TxHandler+0x18c>)
    f032:	4798      	blx	r3
    f034:	2109      	movs	r1, #9
    f036:	2012      	movs	r0, #18
    f038:	4b51      	ldr	r3, [pc, #324]	; (f180 <RADIO_TxHandler+0x190>)
    f03a:	4798      	blx	r3
    f03c:	2201      	movs	r2, #1
    f03e:	0021      	movs	r1, r4
    f040:	2005      	movs	r0, #5
    f042:	4b4e      	ldr	r3, [pc, #312]	; (f17c <RADIO_TxHandler+0x18c>)
    f044:	4798      	blx	r3
    f046:	4b4f      	ldr	r3, [pc, #316]	; (f184 <RADIO_TxHandler+0x194>)
    f048:	4798      	blx	r3
    f04a:	22fa      	movs	r2, #250	; 0xfa
    f04c:	2300      	movs	r3, #0
    f04e:	0092      	lsls	r2, r2, #2
    f050:	4c4d      	ldr	r4, [pc, #308]	; (f188 <RADIO_TxHandler+0x198>)
    f052:	47a0      	blx	r4
    f054:	4b4d      	ldr	r3, [pc, #308]	; (f18c <RADIO_TxHandler+0x19c>)
    f056:	3601      	adds	r6, #1
    f058:	6018      	str	r0, [r3, #0]
    f05a:	6059      	str	r1, [r3, #4]
    f05c:	b2b6      	uxth	r6, r6
    f05e:	4b49      	ldr	r3, [pc, #292]	; (f184 <RADIO_TxHandler+0x194>)
    f060:	4798      	blx	r3
    f062:	22fa      	movs	r2, #250	; 0xfa
    f064:	2300      	movs	r3, #0
    f066:	0092      	lsls	r2, r2, #2
    f068:	4d47      	ldr	r5, [pc, #284]	; (f188 <RADIO_TxHandler+0x198>)
    f06a:	47a8      	blx	r5
    f06c:	4b47      	ldr	r3, [pc, #284]	; (f18c <RADIO_TxHandler+0x19c>)
    f06e:	2400      	movs	r4, #0
    f070:	681a      	ldr	r2, [r3, #0]
    f072:	685b      	ldr	r3, [r3, #4]
    f074:	1a80      	subs	r0, r0, r2
    f076:	4199      	sbcs	r1, r3
    f078:	428c      	cmp	r4, r1
    f07a:	d101      	bne.n	f080 <RADIO_TxHandler+0x90>
    f07c:	4286      	cmp	r6, r0
    f07e:	d842      	bhi.n	f106 <RADIO_TxHandler+0x116>
    f080:	4b43      	ldr	r3, [pc, #268]	; (f190 <RADIO_TxHandler+0x1a0>)
    f082:	2004      	movs	r0, #4
    f084:	4798      	blx	r3
    f086:	4b43      	ldr	r3, [pc, #268]	; (f194 <RADIO_TxHandler+0x1a4>)
    f088:	4c3d      	ldr	r4, [pc, #244]	; (f180 <RADIO_TxHandler+0x190>)
    f08a:	781e      	ldrb	r6, [r3, #0]
    f08c:	4d42      	ldr	r5, [pc, #264]	; (f198 <RADIO_TxHandler+0x1a8>)
    f08e:	2e01      	cmp	r6, #1
    f090:	d158      	bne.n	f144 <RADIO_TxHandler+0x154>
    f092:	7829      	ldrb	r1, [r5, #0]
    f094:	2022      	movs	r0, #34	; 0x22
    f096:	47a0      	blx	r4
    f098:	4b40      	ldr	r3, [pc, #256]	; (f19c <RADIO_TxHandler+0x1ac>)
    f09a:	200a      	movs	r0, #10
    f09c:	4798      	blx	r3
    f09e:	21f0      	movs	r1, #240	; 0xf0
    f0a0:	4008      	ands	r0, r1
    f0a2:	39e8      	subs	r1, #232	; 0xe8
    f0a4:	4301      	orrs	r1, r0
    f0a6:	200a      	movs	r0, #10
    f0a8:	47a0      	blx	r4
    f0aa:	2140      	movs	r1, #64	; 0x40
    f0ac:	0008      	movs	r0, r1
    f0ae:	47a0      	blx	r4
    f0b0:	2100      	movs	r1, #0
    f0b2:	2041      	movs	r0, #65	; 0x41
    f0b4:	47a0      	blx	r4
    f0b6:	4b37      	ldr	r3, [pc, #220]	; (f194 <RADIO_TxHandler+0x1a4>)
    f0b8:	0032      	movs	r2, r6
    f0ba:	7819      	ldrb	r1, [r3, #0]
    f0bc:	0030      	movs	r0, r6
    f0be:	4b2f      	ldr	r3, [pc, #188]	; (f17c <RADIO_TxHandler+0x18c>)
    f0c0:	4798      	blx	r3
    f0c2:	4b37      	ldr	r3, [pc, #220]	; (f1a0 <RADIO_TxHandler+0x1b0>)
    f0c4:	782a      	ldrb	r2, [r5, #0]
    f0c6:	6819      	ldr	r1, [r3, #0]
    f0c8:	2000      	movs	r0, #0
    f0ca:	4b36      	ldr	r3, [pc, #216]	; (f1a4 <RADIO_TxHandler+0x1b4>)
    f0cc:	4798      	blx	r3
    f0ce:	003b      	movs	r3, r7
    f0d0:	3334      	adds	r3, #52	; 0x34
    f0d2:	7819      	ldrb	r1, [r3, #0]
    f0d4:	2200      	movs	r2, #0
    f0d6:	2003      	movs	r0, #3
    f0d8:	4b28      	ldr	r3, [pc, #160]	; (f17c <RADIO_TxHandler+0x18c>)
    f0da:	4798      	blx	r3
    f0dc:	4b29      	ldr	r3, [pc, #164]	; (f184 <RADIO_TxHandler+0x194>)
    f0de:	4798      	blx	r3
    f0e0:	4b31      	ldr	r3, [pc, #196]	; (f1a8 <RADIO_TxHandler+0x1b8>)
    f0e2:	6018      	str	r0, [r3, #0]
    f0e4:	6059      	str	r1, [r3, #4]
    f0e6:	68fb      	ldr	r3, [r7, #12]
    f0e8:	2b00      	cmp	r3, #0
    f0ea:	d009      	beq.n	f100 <RADIO_TxHandler+0x110>
    f0ec:	21fa      	movs	r1, #250	; 0xfa
    f0ee:	2200      	movs	r2, #0
    f0f0:	0089      	lsls	r1, r1, #2
    f0f2:	372f      	adds	r7, #47	; 0x2f
    f0f4:	4359      	muls	r1, r3
    f0f6:	7838      	ldrb	r0, [r7, #0]
    f0f8:	4b2c      	ldr	r3, [pc, #176]	; (f1ac <RADIO_TxHandler+0x1bc>)
    f0fa:	9200      	str	r2, [sp, #0]
    f0fc:	4c2c      	ldr	r4, [pc, #176]	; (f1b0 <RADIO_TxHandler+0x1c0>)
    f0fe:	47a0      	blx	r4
    f100:	2000      	movs	r0, #0
    f102:	b007      	add	sp, #28
    f104:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f106:	4d2b      	ldr	r5, [pc, #172]	; (f1b4 <RADIO_TxHandler+0x1c4>)
    f108:	4b2b      	ldr	r3, [pc, #172]	; (f1b8 <RADIO_TxHandler+0x1c8>)
    f10a:	0028      	movs	r0, r5
    f10c:	4798      	blx	r3
    f10e:	233e      	movs	r3, #62	; 0x3e
    f110:	5efa      	ldrsh	r2, [r7, r3]
    f112:	2100      	movs	r1, #0
    f114:	5e6b      	ldrsh	r3, [r5, r1]
    f116:	429a      	cmp	r2, r3
    f118:	daa1      	bge.n	f05e <RADIO_TxHandler+0x6e>
    f11a:	0020      	movs	r0, r4
    f11c:	4b27      	ldr	r3, [pc, #156]	; (f1bc <RADIO_TxHandler+0x1cc>)
    f11e:	4798      	blx	r3
    f120:	4b27      	ldr	r3, [pc, #156]	; (f1c0 <RADIO_TxHandler+0x1d0>)
    f122:	4798      	blx	r3
    f124:	2307      	movs	r3, #7
    f126:	2201      	movs	r2, #1
    f128:	a903      	add	r1, sp, #12
    f12a:	700b      	strb	r3, [r1, #0]
    f12c:	4b25      	ldr	r3, [pc, #148]	; (f1c4 <RADIO_TxHandler+0x1d4>)
    f12e:	701a      	strb	r2, [r3, #0]
    f130:	4b25      	ldr	r3, [pc, #148]	; (f1c8 <RADIO_TxHandler+0x1d8>)
    f132:	781b      	ldrb	r3, [r3, #0]
    f134:	079b      	lsls	r3, r3, #30
    f136:	d5a3      	bpl.n	f080 <RADIO_TxHandler+0x90>
    f138:	693b      	ldr	r3, [r7, #16]
    f13a:	2b00      	cmp	r3, #0
    f13c:	d0a0      	beq.n	f080 <RADIO_TxHandler+0x90>
    f13e:	2002      	movs	r0, #2
    f140:	4798      	blx	r3
    f142:	e79d      	b.n	f080 <RADIO_TxHandler+0x90>
    f144:	2100      	movs	r1, #0
    f146:	2040      	movs	r0, #64	; 0x40
    f148:	47a0      	blx	r4
    f14a:	2100      	movs	r1, #0
    f14c:	2041      	movs	r0, #65	; 0x41
    f14e:	47a0      	blx	r4
    f150:	003b      	movs	r3, r7
    f152:	2000      	movs	r0, #0
    f154:	3357      	adds	r3, #87	; 0x57
    f156:	7829      	ldrb	r1, [r5, #0]
    f158:	7018      	strb	r0, [r3, #0]
    f15a:	47a0      	blx	r4
    f15c:	4b10      	ldr	r3, [pc, #64]	; (f1a0 <RADIO_TxHandler+0x1b0>)
    f15e:	7829      	ldrb	r1, [r5, #0]
    f160:	6818      	ldr	r0, [r3, #0]
    f162:	4b1a      	ldr	r3, [pc, #104]	; (f1cc <RADIO_TxHandler+0x1dc>)
    f164:	4798      	blx	r3
    f166:	e7b2      	b.n	f0ce <RADIO_TxHandler+0xde>
    f168:	0000ecf1 	.word	0x0000ecf1
    f16c:	0000e841 	.word	0x0000e841
    f170:	20002cf4 	.word	0x20002cf4
    f174:	0000d069 	.word	0x0000d069
    f178:	0000df85 	.word	0x0000df85
    f17c:	0000d379 	.word	0x0000d379
    f180:	0000c6bd 	.word	0x0000c6bd
    f184:	0000cd0d 	.word	0x0000cd0d
    f188:	000126bd 	.word	0x000126bd
    f18c:	20002050 	.word	0x20002050
    f190:	0000dfcd 	.word	0x0000dfcd
    f194:	20002d28 	.word	0x20002d28
    f198:	2000206c 	.word	0x2000206c
    f19c:	0000c6e5 	.word	0x0000c6e5
    f1a0:	20002068 	.word	0x20002068
    f1a4:	0000c711 	.word	0x0000c711
    f1a8:	20002060 	.word	0x20002060
    f1ac:	0000e99d 	.word	0x0000e99d
    f1b0:	0000cd65 	.word	0x0000cd65
    f1b4:	2000204e 	.word	0x2000204e
    f1b8:	0000d595 	.word	0x0000d595
    f1bc:	0000e969 	.word	0x0000e969
    f1c0:	0000ed25 	.word	0x0000ed25
    f1c4:	20002fbf 	.word	0x20002fbf
    f1c8:	20002fbe 	.word	0x20002fbe
    f1cc:	0000e6bd 	.word	0x0000e6bd

0000f1d0 <RADIO_TxDoneHandler>:
    f1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f1d2:	4b35      	ldr	r3, [pc, #212]	; (f2a8 <RADIO_TxDoneHandler+0xd8>)
    f1d4:	b087      	sub	sp, #28
    f1d6:	881a      	ldrh	r2, [r3, #0]
    f1d8:	06d2      	lsls	r2, r2, #27
    f1da:	0fd2      	lsrs	r2, r2, #31
    f1dc:	9200      	str	r2, [sp, #0]
    f1de:	466a      	mov	r2, sp
    f1e0:	7810      	ldrb	r0, [r2, #0]
    f1e2:	881a      	ldrh	r2, [r3, #0]
    f1e4:	2801      	cmp	r0, #1
    f1e6:	d12b      	bne.n	f240 <RADIO_TxDoneHandler+0x70>
    f1e8:	4c30      	ldr	r4, [pc, #192]	; (f2ac <RADIO_TxDoneHandler+0xdc>)
    f1ea:	2110      	movs	r1, #16
    f1ec:	0027      	movs	r7, r4
    f1ee:	2500      	movs	r5, #0
    f1f0:	438a      	bics	r2, r1
    f1f2:	801a      	strh	r2, [r3, #0]
    f1f4:	3734      	adds	r7, #52	; 0x34
    f1f6:	0002      	movs	r2, r0
    f1f8:	7839      	ldrb	r1, [r7, #0]
    f1fa:	4b2d      	ldr	r3, [pc, #180]	; (f2b0 <RADIO_TxDoneHandler+0xe0>)
    f1fc:	4798      	blx	r3
    f1fe:	68e3      	ldr	r3, [r4, #12]
    f200:	ae03      	add	r6, sp, #12
    f202:	9304      	str	r3, [sp, #16]
    f204:	7035      	strb	r5, [r6, #0]
    f206:	002a      	movs	r2, r5
    f208:	4b29      	ldr	r3, [pc, #164]	; (f2b0 <RADIO_TxDoneHandler+0xe0>)
    f20a:	7839      	ldrb	r1, [r7, #0]
    f20c:	0028      	movs	r0, r5
    f20e:	4798      	blx	r3
    f210:	466a      	mov	r2, sp
    f212:	4b28      	ldr	r3, [pc, #160]	; (f2b4 <RADIO_TxDoneHandler+0xe4>)
    f214:	7812      	ldrb	r2, [r2, #0]
    f216:	701a      	strb	r2, [r3, #0]
    f218:	0023      	movs	r3, r4
    f21a:	3357      	adds	r3, #87	; 0x57
    f21c:	701d      	strb	r5, [r3, #0]
    f21e:	4b26      	ldr	r3, [pc, #152]	; (f2b8 <RADIO_TxDoneHandler+0xe8>)
    f220:	781b      	ldrb	r3, [r3, #0]
    f222:	075b      	lsls	r3, r3, #29
    f224:	d505      	bpl.n	f232 <RADIO_TxDoneHandler+0x62>
    f226:	6923      	ldr	r3, [r4, #16]
    f228:	42ab      	cmp	r3, r5
    f22a:	d002      	beq.n	f232 <RADIO_TxDoneHandler+0x62>
    f22c:	0031      	movs	r1, r6
    f22e:	2004      	movs	r0, #4
    f230:	4798      	blx	r3
    f232:	4b22      	ldr	r3, [pc, #136]	; (f2bc <RADIO_TxDoneHandler+0xec>)
    f234:	4798      	blx	r3
    f236:	4b22      	ldr	r3, [pc, #136]	; (f2c0 <RADIO_TxDoneHandler+0xf0>)
    f238:	4798      	blx	r3
    f23a:	2000      	movs	r0, #0
    f23c:	b007      	add	sp, #28
    f23e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f240:	07d2      	lsls	r2, r2, #31
    f242:	d402      	bmi.n	f24a <RADIO_TxDoneHandler+0x7a>
    f244:	881a      	ldrh	r2, [r3, #0]
    f246:	0752      	lsls	r2, r2, #29
    f248:	d527      	bpl.n	f29a <RADIO_TxDoneHandler+0xca>
    f24a:	2601      	movs	r6, #1
    f24c:	2104      	movs	r1, #4
    f24e:	881a      	ldrh	r2, [r3, #0]
    f250:	4f16      	ldr	r7, [pc, #88]	; (f2ac <RADIO_TxDoneHandler+0xdc>)
    f252:	43b2      	bics	r2, r6
    f254:	801a      	strh	r2, [r3, #0]
    f256:	881a      	ldrh	r2, [r3, #0]
    f258:	2400      	movs	r4, #0
    f25a:	438a      	bics	r2, r1
    f25c:	801a      	strh	r2, [r3, #0]
    f25e:	4b19      	ldr	r3, [pc, #100]	; (f2c4 <RADIO_TxDoneHandler+0xf4>)
    f260:	ad03      	add	r5, sp, #12
    f262:	681b      	ldr	r3, [r3, #0]
    f264:	702c      	strb	r4, [r5, #0]
    f266:	9304      	str	r3, [sp, #16]
    f268:	003b      	movs	r3, r7
    f26a:	3334      	adds	r3, #52	; 0x34
    f26c:	7819      	ldrb	r1, [r3, #0]
    f26e:	0022      	movs	r2, r4
    f270:	0020      	movs	r0, r4
    f272:	4b0f      	ldr	r3, [pc, #60]	; (f2b0 <RADIO_TxDoneHandler+0xe0>)
    f274:	4798      	blx	r3
    f276:	4b14      	ldr	r3, [pc, #80]	; (f2c8 <RADIO_TxDoneHandler+0xf8>)
    f278:	4798      	blx	r3
    f27a:	4b0e      	ldr	r3, [pc, #56]	; (f2b4 <RADIO_TxDoneHandler+0xe4>)
    f27c:	701e      	strb	r6, [r3, #0]
    f27e:	003b      	movs	r3, r7
    f280:	3357      	adds	r3, #87	; 0x57
    f282:	701c      	strb	r4, [r3, #0]
    f284:	4b0c      	ldr	r3, [pc, #48]	; (f2b8 <RADIO_TxDoneHandler+0xe8>)
    f286:	781b      	ldrb	r3, [r3, #0]
    f288:	079b      	lsls	r3, r3, #30
    f28a:	d5d6      	bpl.n	f23a <RADIO_TxDoneHandler+0x6a>
    f28c:	693b      	ldr	r3, [r7, #16]
    f28e:	42a3      	cmp	r3, r4
    f290:	d0d3      	beq.n	f23a <RADIO_TxDoneHandler+0x6a>
    f292:	0029      	movs	r1, r5
    f294:	2002      	movs	r0, #2
    f296:	4798      	blx	r3
    f298:	e7cf      	b.n	f23a <RADIO_TxDoneHandler+0x6a>
    f29a:	881b      	ldrh	r3, [r3, #0]
    f29c:	059b      	lsls	r3, r3, #22
    f29e:	d5cc      	bpl.n	f23a <RADIO_TxDoneHandler+0x6a>
    f2a0:	4b0a      	ldr	r3, [pc, #40]	; (f2cc <RADIO_TxDoneHandler+0xfc>)
    f2a2:	4798      	blx	r3
    f2a4:	e7c9      	b.n	f23a <RADIO_TxDoneHandler+0x6a>
    f2a6:	46c0      	nop			; (mov r8, r8)
    f2a8:	20002fbc 	.word	0x20002fbc
    f2ac:	20002cf4 	.word	0x20002cf4
    f2b0:	0000d379 	.word	0x0000d379
    f2b4:	20002fbf 	.word	0x20002fbf
    f2b8:	20002fbe 	.word	0x20002fbe
    f2bc:	0000c67d 	.word	0x0000c67d
    f2c0:	0000ed41 	.word	0x0000ed41
    f2c4:	20002060 	.word	0x20002060
    f2c8:	0000ed25 	.word	0x0000ed25
    f2cc:	00012131 	.word	0x00012131

0000f2d0 <RADIO_RxDoneHandler>:
    f2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f2d2:	4b95      	ldr	r3, [pc, #596]	; (f528 <RADIO_RxDoneHandler+0x258>)
    f2d4:	b085      	sub	sp, #20
    f2d6:	881c      	ldrh	r4, [r3, #0]
    f2d8:	881a      	ldrh	r2, [r3, #0]
    f2da:	06a4      	lsls	r4, r4, #26
    f2dc:	0fe4      	lsrs	r4, r4, #31
    f2de:	b2e0      	uxtb	r0, r4
    f2e0:	2801      	cmp	r0, #1
    f2e2:	d126      	bne.n	f332 <RADIO_RxDoneHandler+0x62>
    f2e4:	4d91      	ldr	r5, [pc, #580]	; (f52c <RADIO_RxDoneHandler+0x25c>)
    f2e6:	2120      	movs	r1, #32
    f2e8:	002e      	movs	r6, r5
    f2ea:	438a      	bics	r2, r1
    f2ec:	801a      	strh	r2, [r3, #0]
    f2ee:	3634      	adds	r6, #52	; 0x34
    f2f0:	0002      	movs	r2, r0
    f2f2:	7831      	ldrb	r1, [r6, #0]
    f2f4:	4f8e      	ldr	r7, [pc, #568]	; (f530 <RADIO_RxDoneHandler+0x260>)
    f2f6:	47b8      	blx	r7
    f2f8:	2200      	movs	r2, #0
    f2fa:	7831      	ldrb	r1, [r6, #0]
    f2fc:	0010      	movs	r0, r2
    f2fe:	47b8      	blx	r7
    f300:	4b8c      	ldr	r3, [pc, #560]	; (f534 <RADIO_RxDoneHandler+0x264>)
    f302:	4798      	blx	r3
    f304:	4b8c      	ldr	r3, [pc, #560]	; (f538 <RADIO_RxDoneHandler+0x268>)
    f306:	002a      	movs	r2, r5
    f308:	701c      	strb	r4, [r3, #0]
    f30a:	2300      	movs	r3, #0
    f30c:	322c      	adds	r2, #44	; 0x2c
    f30e:	7013      	strb	r3, [r2, #0]
    f310:	002a      	movs	r2, r5
    f312:	a901      	add	r1, sp, #4
    f314:	3257      	adds	r2, #87	; 0x57
    f316:	7013      	strb	r3, [r2, #0]
    f318:	700b      	strb	r3, [r1, #0]
    f31a:	4b88      	ldr	r3, [pc, #544]	; (f53c <RADIO_RxDoneHandler+0x26c>)
    f31c:	781b      	ldrb	r3, [r3, #0]
    f31e:	071b      	lsls	r3, r3, #28
    f320:	d504      	bpl.n	f32c <RADIO_RxDoneHandler+0x5c>
    f322:	692b      	ldr	r3, [r5, #16]
    f324:	2008      	movs	r0, #8
    f326:	2b00      	cmp	r3, #0
    f328:	d000      	beq.n	f32c <RADIO_RxDoneHandler+0x5c>
    f32a:	e084      	b.n	f436 <RADIO_RxDoneHandler+0x166>
    f32c:	2000      	movs	r0, #0
    f32e:	b005      	add	sp, #20
    f330:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f332:	0652      	lsls	r2, r2, #25
    f334:	d402      	bmi.n	f33c <RADIO_RxDoneHandler+0x6c>
    f336:	881a      	ldrh	r2, [r3, #0]
    f338:	0612      	lsls	r2, r2, #24
    f33a:	d523      	bpl.n	f384 <RADIO_RxDoneHandler+0xb4>
    f33c:	2140      	movs	r1, #64	; 0x40
    f33e:	881a      	ldrh	r2, [r3, #0]
    f340:	4c7a      	ldr	r4, [pc, #488]	; (f52c <RADIO_RxDoneHandler+0x25c>)
    f342:	438a      	bics	r2, r1
    f344:	801a      	strh	r2, [r3, #0]
    f346:	881a      	ldrh	r2, [r3, #0]
    f348:	1849      	adds	r1, r1, r1
    f34a:	438a      	bics	r2, r1
    f34c:	801a      	strh	r2, [r3, #0]
    f34e:	0023      	movs	r3, r4
    f350:	2200      	movs	r2, #0
    f352:	3334      	adds	r3, #52	; 0x34
    f354:	7819      	ldrb	r1, [r3, #0]
    f356:	0010      	movs	r0, r2
    f358:	4b75      	ldr	r3, [pc, #468]	; (f530 <RADIO_RxDoneHandler+0x260>)
    f35a:	4798      	blx	r3
    f35c:	4b75      	ldr	r3, [pc, #468]	; (f534 <RADIO_RxDoneHandler+0x264>)
    f35e:	4798      	blx	r3
    f360:	2201      	movs	r2, #1
    f362:	4b75      	ldr	r3, [pc, #468]	; (f538 <RADIO_RxDoneHandler+0x268>)
    f364:	a901      	add	r1, sp, #4
    f366:	701a      	strb	r2, [r3, #0]
    f368:	0022      	movs	r2, r4
    f36a:	2300      	movs	r3, #0
    f36c:	322c      	adds	r2, #44	; 0x2c
    f36e:	7013      	strb	r3, [r2, #0]
    f370:	0022      	movs	r2, r4
    f372:	3257      	adds	r2, #87	; 0x57
    f374:	7013      	strb	r3, [r2, #0]
    f376:	700b      	strb	r3, [r1, #0]
    f378:	4b70      	ldr	r3, [pc, #448]	; (f53c <RADIO_RxDoneHandler+0x26c>)
    f37a:	781b      	ldrb	r3, [r3, #0]
    f37c:	071b      	lsls	r3, r3, #28
    f37e:	d5d5      	bpl.n	f32c <RADIO_RxDoneHandler+0x5c>
    f380:	6923      	ldr	r3, [r4, #16]
    f382:	e7cf      	b.n	f324 <RADIO_RxDoneHandler+0x54>
    f384:	881a      	ldrh	r2, [r3, #0]
    f386:	0792      	lsls	r2, r2, #30
    f388:	d56e      	bpl.n	f468 <RADIO_RxDoneHandler+0x198>
    f38a:	2102      	movs	r1, #2
    f38c:	881a      	ldrh	r2, [r3, #0]
    f38e:	4d6c      	ldr	r5, [pc, #432]	; (f540 <RADIO_RxDoneHandler+0x270>)
    f390:	438a      	bics	r2, r1
    f392:	801a      	strh	r2, [r3, #0]
    f394:	2013      	movs	r0, #19
    f396:	47a8      	blx	r5
    f398:	4c64      	ldr	r4, [pc, #400]	; (f52c <RADIO_RxDoneHandler+0x25c>)
    f39a:	2100      	movs	r1, #0
    f39c:	0026      	movs	r6, r4
    f39e:	362c      	adds	r6, #44	; 0x2c
    f3a0:	7030      	strb	r0, [r6, #0]
    f3a2:	4b68      	ldr	r3, [pc, #416]	; (f544 <RADIO_RxDoneHandler+0x274>)
    f3a4:	200d      	movs	r0, #13
    f3a6:	4798      	blx	r3
    f3a8:	7832      	ldrb	r2, [r6, #0]
    f3aa:	4b67      	ldr	r3, [pc, #412]	; (f548 <RADIO_RxDoneHandler+0x278>)
    f3ac:	b2d2      	uxtb	r2, r2
    f3ae:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    f3b0:	2000      	movs	r0, #0
    f3b2:	4798      	blx	r3
    f3b4:	2019      	movs	r0, #25
    f3b6:	47a8      	blx	r5
    f3b8:	0023      	movs	r3, r4
    f3ba:	b240      	sxtb	r0, r0
    f3bc:	3332      	adds	r3, #50	; 0x32
    f3be:	2800      	cmp	r0, #0
    f3c0:	da3b      	bge.n	f43a <RADIO_RxDoneHandler+0x16a>
    f3c2:	4240      	negs	r0, r0
    f3c4:	1080      	asrs	r0, r0, #2
    f3c6:	4240      	negs	r0, r0
    f3c8:	7018      	strb	r0, [r3, #0]
    f3ca:	201a      	movs	r0, #26
    f3cc:	47a8      	blx	r5
    f3ce:	0022      	movs	r2, r4
    f3d0:	3232      	adds	r2, #50	; 0x32
    f3d2:	7812      	ldrb	r2, [r2, #0]
    f3d4:	b203      	sxth	r3, r0
    f3d6:	b252      	sxtb	r2, r2
    f3d8:	4d5c      	ldr	r5, [pc, #368]	; (f54c <RADIO_RxDoneHandler+0x27c>)
    f3da:	2a00      	cmp	r2, #0
    f3dc:	da36      	bge.n	f44c <RADIO_RxDoneHandler+0x17c>
    f3de:	6821      	ldr	r1, [r4, #0]
    f3e0:	4e5b      	ldr	r6, [pc, #364]	; (f550 <RADIO_RxDoneHandler+0x280>)
    f3e2:	198e      	adds	r6, r1, r6
    f3e4:	42ae      	cmp	r6, r5
    f3e6:	d82a      	bhi.n	f43e <RADIO_RxDoneHandler+0x16e>
    f3e8:	3263      	adds	r2, #99	; 0x63
    f3ea:	1880      	adds	r0, r0, r2
    f3ec:	111b      	asrs	r3, r3, #4
    f3ee:	1818      	adds	r0, r3, r0
    f3f0:	0023      	movs	r3, r4
    f3f2:	3356      	adds	r3, #86	; 0x56
    f3f4:	7018      	strb	r0, [r3, #0]
    f3f6:	0023      	movs	r3, r4
    f3f8:	2200      	movs	r2, #0
    f3fa:	3334      	adds	r3, #52	; 0x34
    f3fc:	7819      	ldrb	r1, [r3, #0]
    f3fe:	0010      	movs	r0, r2
    f400:	4b4b      	ldr	r3, [pc, #300]	; (f530 <RADIO_RxDoneHandler+0x260>)
    f402:	4798      	blx	r3
    f404:	4b4b      	ldr	r3, [pc, #300]	; (f534 <RADIO_RxDoneHandler+0x264>)
    f406:	4798      	blx	r3
    f408:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f40a:	a901      	add	r1, sp, #4
    f40c:	604b      	str	r3, [r1, #4]
    f40e:	0023      	movs	r3, r4
    f410:	332c      	adds	r3, #44	; 0x2c
    f412:	781b      	ldrb	r3, [r3, #0]
    f414:	2201      	movs	r2, #1
    f416:	720b      	strb	r3, [r1, #8]
    f418:	2300      	movs	r3, #0
    f41a:	700b      	strb	r3, [r1, #0]
    f41c:	4b46      	ldr	r3, [pc, #280]	; (f538 <RADIO_RxDoneHandler+0x268>)
    f41e:	701a      	strb	r2, [r3, #0]
    f420:	4b46      	ldr	r3, [pc, #280]	; (f53c <RADIO_RxDoneHandler+0x26c>)
    f422:	7818      	ldrb	r0, [r3, #0]
    f424:	07c0      	lsls	r0, r0, #31
    f426:	0fc0      	lsrs	r0, r0, #31
    f428:	4290      	cmp	r0, r2
    f42a:	d000      	beq.n	f42e <RADIO_RxDoneHandler+0x15e>
    f42c:	e77e      	b.n	f32c <RADIO_RxDoneHandler+0x5c>
    f42e:	6923      	ldr	r3, [r4, #16]
    f430:	2b00      	cmp	r3, #0
    f432:	d100      	bne.n	f436 <RADIO_RxDoneHandler+0x166>
    f434:	e77a      	b.n	f32c <RADIO_RxDoneHandler+0x5c>
    f436:	4798      	blx	r3
    f438:	e778      	b.n	f32c <RADIO_RxDoneHandler+0x5c>
    f43a:	1080      	asrs	r0, r0, #2
    f43c:	e7c4      	b.n	f3c8 <RADIO_RxDoneHandler+0xf8>
    f43e:	4d45      	ldr	r5, [pc, #276]	; (f554 <RADIO_RxDoneHandler+0x284>)
    f440:	1949      	adds	r1, r1, r5
    f442:	4d45      	ldr	r5, [pc, #276]	; (f558 <RADIO_RxDoneHandler+0x288>)
    f444:	42a9      	cmp	r1, r5
    f446:	d8d6      	bhi.n	f3f6 <RADIO_RxDoneHandler+0x126>
    f448:	325c      	adds	r2, #92	; 0x5c
    f44a:	e7ce      	b.n	f3ea <RADIO_RxDoneHandler+0x11a>
    f44c:	6822      	ldr	r2, [r4, #0]
    f44e:	4940      	ldr	r1, [pc, #256]	; (f550 <RADIO_RxDoneHandler+0x280>)
    f450:	1851      	adds	r1, r2, r1
    f452:	42a9      	cmp	r1, r5
    f454:	d801      	bhi.n	f45a <RADIO_RxDoneHandler+0x18a>
    f456:	3063      	adds	r0, #99	; 0x63
    f458:	e7c8      	b.n	f3ec <RADIO_RxDoneHandler+0x11c>
    f45a:	493e      	ldr	r1, [pc, #248]	; (f554 <RADIO_RxDoneHandler+0x284>)
    f45c:	1852      	adds	r2, r2, r1
    f45e:	493e      	ldr	r1, [pc, #248]	; (f558 <RADIO_RxDoneHandler+0x288>)
    f460:	428a      	cmp	r2, r1
    f462:	d8c8      	bhi.n	f3f6 <RADIO_RxDoneHandler+0x126>
    f464:	305c      	adds	r0, #92	; 0x5c
    f466:	e7c1      	b.n	f3ec <RADIO_RxDoneHandler+0x11c>
    f468:	881a      	ldrh	r2, [r3, #0]
    f46a:	0712      	lsls	r2, r2, #28
    f46c:	0fd5      	lsrs	r5, r2, #31
    f46e:	2a00      	cmp	r2, #0
    f470:	da27      	bge.n	f4c2 <RADIO_RxDoneHandler+0x1f2>
    f472:	2108      	movs	r1, #8
    f474:	881a      	ldrh	r2, [r3, #0]
    f476:	4c2d      	ldr	r4, [pc, #180]	; (f52c <RADIO_RxDoneHandler+0x25c>)
    f478:	438a      	bics	r2, r1
    f47a:	801a      	strh	r2, [r3, #0]
    f47c:	0023      	movs	r3, r4
    f47e:	2280      	movs	r2, #128	; 0x80
    f480:	3332      	adds	r3, #50	; 0x32
    f482:	701a      	strb	r2, [r3, #0]
    f484:	0023      	movs	r3, r4
    f486:	2200      	movs	r2, #0
    f488:	3334      	adds	r3, #52	; 0x34
    f48a:	7819      	ldrb	r1, [r3, #0]
    f48c:	0010      	movs	r0, r2
    f48e:	4b28      	ldr	r3, [pc, #160]	; (f530 <RADIO_RxDoneHandler+0x260>)
    f490:	4798      	blx	r3
    f492:	4b28      	ldr	r3, [pc, #160]	; (f534 <RADIO_RxDoneHandler+0x264>)
    f494:	4798      	blx	r3
    f496:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f498:	a901      	add	r1, sp, #4
    f49a:	604b      	str	r3, [r1, #4]
    f49c:	0023      	movs	r3, r4
    f49e:	332c      	adds	r3, #44	; 0x2c
    f4a0:	781b      	ldrb	r3, [r3, #0]
    f4a2:	0022      	movs	r2, r4
    f4a4:	720b      	strb	r3, [r1, #8]
    f4a6:	2300      	movs	r3, #0
    f4a8:	3257      	adds	r2, #87	; 0x57
    f4aa:	7013      	strb	r3, [r2, #0]
    f4ac:	700b      	strb	r3, [r1, #0]
    f4ae:	4b22      	ldr	r3, [pc, #136]	; (f538 <RADIO_RxDoneHandler+0x268>)
    f4b0:	701d      	strb	r5, [r3, #0]
    f4b2:	4b22      	ldr	r3, [pc, #136]	; (f53c <RADIO_RxDoneHandler+0x26c>)
    f4b4:	7818      	ldrb	r0, [r3, #0]
    f4b6:	07c0      	lsls	r0, r0, #31
    f4b8:	0fc0      	lsrs	r0, r0, #31
    f4ba:	2801      	cmp	r0, #1
    f4bc:	d000      	beq.n	f4c0 <RADIO_RxDoneHandler+0x1f0>
    f4be:	e735      	b.n	f32c <RADIO_RxDoneHandler+0x5c>
    f4c0:	e7b5      	b.n	f42e <RADIO_RxDoneHandler+0x15e>
    f4c2:	881a      	ldrh	r2, [r3, #0]
    f4c4:	05d2      	lsls	r2, r2, #23
    f4c6:	0fd5      	lsrs	r5, r2, #31
    f4c8:	2a00      	cmp	r2, #0
    f4ca:	db00      	blt.n	f4ce <RADIO_RxDoneHandler+0x1fe>
    f4cc:	e72e      	b.n	f32c <RADIO_RxDoneHandler+0x5c>
    f4ce:	4c17      	ldr	r4, [pc, #92]	; (f52c <RADIO_RxDoneHandler+0x25c>)
    f4d0:	881a      	ldrh	r2, [r3, #0]
    f4d2:	0026      	movs	r6, r4
    f4d4:	4921      	ldr	r1, [pc, #132]	; (f55c <RADIO_RxDoneHandler+0x28c>)
    f4d6:	362c      	adds	r6, #44	; 0x2c
    f4d8:	400a      	ands	r2, r1
    f4da:	801a      	strh	r2, [r3, #0]
    f4dc:	7832      	ldrb	r2, [r6, #0]
    f4de:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    f4e0:	b2d2      	uxtb	r2, r2
    f4e2:	2000      	movs	r0, #0
    f4e4:	4b18      	ldr	r3, [pc, #96]	; (f548 <RADIO_RxDoneHandler+0x278>)
    f4e6:	4798      	blx	r3
    f4e8:	0023      	movs	r3, r4
    f4ea:	2200      	movs	r2, #0
    f4ec:	3334      	adds	r3, #52	; 0x34
    f4ee:	7819      	ldrb	r1, [r3, #0]
    f4f0:	0010      	movs	r0, r2
    f4f2:	4b0f      	ldr	r3, [pc, #60]	; (f530 <RADIO_RxDoneHandler+0x260>)
    f4f4:	4798      	blx	r3
    f4f6:	4b0f      	ldr	r3, [pc, #60]	; (f534 <RADIO_RxDoneHandler+0x264>)
    f4f8:	4798      	blx	r3
    f4fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f4fc:	a901      	add	r1, sp, #4
    f4fe:	604b      	str	r3, [r1, #4]
    f500:	7833      	ldrb	r3, [r6, #0]
    f502:	0022      	movs	r2, r4
    f504:	720b      	strb	r3, [r1, #8]
    f506:	2300      	movs	r3, #0
    f508:	3257      	adds	r2, #87	; 0x57
    f50a:	7013      	strb	r3, [r2, #0]
    f50c:	700b      	strb	r3, [r1, #0]
    f50e:	4b0a      	ldr	r3, [pc, #40]	; (f538 <RADIO_RxDoneHandler+0x268>)
    f510:	701d      	strb	r5, [r3, #0]
    f512:	4b0a      	ldr	r3, [pc, #40]	; (f53c <RADIO_RxDoneHandler+0x26c>)
    f514:	781b      	ldrb	r3, [r3, #0]
    f516:	06db      	lsls	r3, r3, #27
    f518:	d400      	bmi.n	f51c <RADIO_RxDoneHandler+0x24c>
    f51a:	e707      	b.n	f32c <RADIO_RxDoneHandler+0x5c>
    f51c:	6923      	ldr	r3, [r4, #16]
    f51e:	2b00      	cmp	r3, #0
    f520:	d100      	bne.n	f524 <RADIO_RxDoneHandler+0x254>
    f522:	e703      	b.n	f32c <RADIO_RxDoneHandler+0x5c>
    f524:	2010      	movs	r0, #16
    f526:	e786      	b.n	f436 <RADIO_RxDoneHandler+0x166>
    f528:	20002fbc 	.word	0x20002fbc
    f52c:	20002cf4 	.word	0x20002cf4
    f530:	0000d379 	.word	0x0000d379
    f534:	0000ed25 	.word	0x0000ed25
    f538:	20002fbf 	.word	0x20002fbf
    f53c:	20002fbe 	.word	0x20002fbe
    f540:	0000c6e5 	.word	0x0000c6e5
    f544:	0000c6bd 	.word	0x0000c6bd
    f548:	0000c751 	.word	0x0000c751
    f54c:	096ae380 	.word	0x096ae380
    f550:	cc9eec80 	.word	0xcc9eec80
    f554:	e78fe580 	.word	0xe78fe580
    f558:	06dac2c0 	.word	0x06dac2c0
    f55c:	fffffeff 	.word	0xfffffeff

0000f560 <MacClearCommands>:
    f560:	490e      	ldr	r1, [pc, #56]	; (f59c <MacClearCommands+0x3c>)
    f562:	b570      	push	{r4, r5, r6, lr}
    f564:	000b      	movs	r3, r1
    f566:	33b8      	adds	r3, #184	; 0xb8
    f568:	7818      	ldrb	r0, [r3, #0]
    f56a:	2303      	movs	r3, #3
    f56c:	25a4      	movs	r5, #164	; 0xa4
    f56e:	4343      	muls	r3, r0
    f570:	2401      	movs	r4, #1
    f572:	20ff      	movs	r0, #255	; 0xff
    f574:	3371      	adds	r3, #113	; 0x71
    f576:	4a0a      	ldr	r2, [pc, #40]	; (f5a0 <MacClearCommands+0x40>)
    f578:	185b      	adds	r3, r3, r1
    f57a:	00ed      	lsls	r5, r5, #3
    f57c:	429a      	cmp	r2, r3
    f57e:	d100      	bne.n	f582 <MacClearCommands+0x22>
    f580:	bd70      	pop	{r4, r5, r6, pc}
    f582:	7811      	ldrb	r1, [r2, #0]
    f584:	29ff      	cmp	r1, #255	; 0xff
    f586:	d006      	beq.n	f596 <MacClearCommands+0x36>
    f588:	290a      	cmp	r1, #10
    f58a:	d803      	bhi.n	f594 <MacClearCommands+0x34>
    f58c:	0026      	movs	r6, r4
    f58e:	408e      	lsls	r6, r1
    f590:	422e      	tst	r6, r5
    f592:	d100      	bne.n	f596 <MacClearCommands+0x36>
    f594:	7010      	strb	r0, [r2, #0]
    f596:	3203      	adds	r2, #3
    f598:	e7f0      	b.n	f57c <MacClearCommands+0x1c>
    f59a:	46c0      	nop			; (mov r8, r8)
    f59c:	200030e4 	.word	0x200030e4
    f5a0:	20003155 	.word	0x20003155

0000f5a4 <CountfOptsLength>:
    f5a4:	2200      	movs	r2, #0
    f5a6:	490d      	ldr	r1, [pc, #52]	; (f5dc <CountfOptsLength+0x38>)
    f5a8:	b570      	push	{r4, r5, r6, lr}
    f5aa:	000b      	movs	r3, r1
    f5ac:	0010      	movs	r0, r2
    f5ae:	2503      	movs	r5, #3
    f5b0:	33b8      	adds	r3, #184	; 0xb8
    f5b2:	781c      	ldrb	r4, [r3, #0]
    f5b4:	4e0a      	ldr	r6, [pc, #40]	; (f5e0 <CountfOptsLength+0x3c>)
    f5b6:	b2d3      	uxtb	r3, r2
    f5b8:	429c      	cmp	r4, r3
    f5ba:	d800      	bhi.n	f5be <CountfOptsLength+0x1a>
    f5bc:	bd70      	pop	{r4, r5, r6, pc}
    f5be:	002b      	movs	r3, r5
    f5c0:	4353      	muls	r3, r2
    f5c2:	3371      	adds	r3, #113	; 0x71
    f5c4:	5ccb      	ldrb	r3, [r1, r3]
    f5c6:	2bff      	cmp	r3, #255	; 0xff
    f5c8:	d006      	beq.n	f5d8 <CountfOptsLength+0x34>
    f5ca:	18f3      	adds	r3, r6, r3
    f5cc:	3b02      	subs	r3, #2
    f5ce:	781b      	ldrb	r3, [r3, #0]
    f5d0:	18c3      	adds	r3, r0, r3
    f5d2:	2b0f      	cmp	r3, #15
    f5d4:	dcf2      	bgt.n	f5bc <CountfOptsLength+0x18>
    f5d6:	b2d8      	uxtb	r0, r3
    f5d8:	3201      	adds	r2, #1
    f5da:	e7ec      	b.n	f5b6 <CountfOptsLength+0x12>
    f5dc:	200030e4 	.word	0x200030e4
    f5e0:	00017bab 	.word	0x00017bab

0000f5e4 <LorawanGetMaxPayloadSize>:
    f5e4:	b513      	push	{r0, r1, r4, lr}
    f5e6:	466b      	mov	r3, sp
    f5e8:	1ddc      	adds	r4, r3, #7
    f5ea:	2300      	movs	r3, #0
    f5ec:	0022      	movs	r2, r4
    f5ee:	7023      	strb	r3, [r4, #0]
    f5f0:	4902      	ldr	r1, [pc, #8]	; (f5fc <LorawanGetMaxPayloadSize+0x18>)
    f5f2:	4b03      	ldr	r3, [pc, #12]	; (f600 <LorawanGetMaxPayloadSize+0x1c>)
    f5f4:	2005      	movs	r0, #5
    f5f6:	4798      	blx	r3
    f5f8:	7820      	ldrb	r0, [r4, #0]
    f5fa:	bd16      	pop	{r1, r2, r4, pc}
    f5fc:	200031a3 	.word	0x200031a3
    f600:	0000c8f9 	.word	0x0000c8f9

0000f604 <UpdateReceiveDelays>:
    f604:	23fa      	movs	r3, #250	; 0xfa
    f606:	b570      	push	{r4, r5, r6, lr}
    f608:	009b      	lsls	r3, r3, #2
    f60a:	4c0b      	ldr	r4, [pc, #44]	; (f638 <UpdateReceiveDelays+0x34>)
    f60c:	2800      	cmp	r0, #0
    f60e:	d000      	beq.n	f612 <UpdateReceiveDelays+0xe>
    f610:	4343      	muls	r3, r0
    f612:	0022      	movs	r2, r4
    f614:	4d09      	ldr	r5, [pc, #36]	; (f63c <UpdateReceiveDelays+0x38>)
    f616:	32a8      	adds	r2, #168	; 0xa8
    f618:	210c      	movs	r1, #12
    f61a:	2000      	movs	r0, #0
    f61c:	8013      	strh	r3, [r2, #0]
    f61e:	47a8      	blx	r5
    f620:	0023      	movs	r3, r4
    f622:	22fa      	movs	r2, #250	; 0xfa
    f624:	33a8      	adds	r3, #168	; 0xa8
    f626:	881b      	ldrh	r3, [r3, #0]
    f628:	0092      	lsls	r2, r2, #2
    f62a:	189b      	adds	r3, r3, r2
    f62c:	34aa      	adds	r4, #170	; 0xaa
    f62e:	210d      	movs	r1, #13
    f630:	2000      	movs	r0, #0
    f632:	8023      	strh	r3, [r4, #0]
    f634:	47a8      	blx	r5
    f636:	bd70      	pop	{r4, r5, r6, pc}
    f638:	200030e4 	.word	0x200030e4
    f63c:	0000948d 	.word	0x0000948d

0000f640 <IncludeMacCommandsResponse>:
    f640:	b5f0      	push	{r4, r5, r6, r7, lr}
    f642:	0005      	movs	r5, r0
    f644:	2600      	movs	r6, #0
    f646:	b087      	sub	sp, #28
    f648:	880c      	ldrh	r4, [r1, #0]
    f64a:	9101      	str	r1, [sp, #4]
    f64c:	9203      	str	r2, [sp, #12]
    f64e:	4a67      	ldr	r2, [pc, #412]	; (f7ec <IncludeMacCommandsResponse+0x1ac>)
    f650:	0013      	movs	r3, r2
    f652:	33b8      	adds	r3, #184	; 0xb8
    f654:	781b      	ldrb	r3, [r3, #0]
    f656:	42b3      	cmp	r3, r6
    f658:	d913      	bls.n	f682 <IncludeMacCommandsResponse+0x42>
    f65a:	9b03      	ldr	r3, [sp, #12]
    f65c:	2b00      	cmp	r3, #0
    f65e:	d019      	beq.n	f694 <IncludeMacCommandsResponse+0x54>
    f660:	2303      	movs	r3, #3
    f662:	4373      	muls	r3, r6
    f664:	18d3      	adds	r3, r2, r3
    f666:	3371      	adds	r3, #113	; 0x71
    f668:	7818      	ldrb	r0, [r3, #0]
    f66a:	28ff      	cmp	r0, #255	; 0xff
    f66c:	d012      	beq.n	f694 <IncludeMacCommandsResponse+0x54>
    f66e:	9b01      	ldr	r3, [sp, #4]
    f670:	8819      	ldrh	r1, [r3, #0]
    f672:	4b5f      	ldr	r3, [pc, #380]	; (f7f0 <IncludeMacCommandsResponse+0x1b0>)
    f674:	1a61      	subs	r1, r4, r1
    f676:	181b      	adds	r3, r3, r0
    f678:	3b02      	subs	r3, #2
    f67a:	781b      	ldrb	r3, [r3, #0]
    f67c:	18cb      	adds	r3, r1, r3
    f67e:	2b0f      	cmp	r3, #15
    f680:	dd08      	ble.n	f694 <IncludeMacCommandsResponse+0x54>
    f682:	2207      	movs	r2, #7
    f684:	2100      	movs	r1, #0
    f686:	4b5b      	ldr	r3, [pc, #364]	; (f7f4 <IncludeMacCommandsResponse+0x1b4>)
    f688:	485b      	ldr	r0, [pc, #364]	; (f7f8 <IncludeMacCommandsResponse+0x1b8>)
    f68a:	4798      	blx	r3
    f68c:	9b01      	ldr	r3, [sp, #4]
    f68e:	801c      	strh	r4, [r3, #0]
    f690:	b007      	add	sp, #28
    f692:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f694:	2303      	movs	r3, #3
    f696:	4373      	muls	r3, r6
    f698:	18d3      	adds	r3, r2, r3
    f69a:	3371      	adds	r3, #113	; 0x71
    f69c:	7819      	ldrb	r1, [r3, #0]
    f69e:	1e88      	subs	r0, r1, #2
    f6a0:	2808      	cmp	r0, #8
    f6a2:	d862      	bhi.n	f76a <IncludeMacCommandsResponse+0x12a>
    f6a4:	1c63      	adds	r3, r4, #1
    f6a6:	f002 fe4f 	bl	12348 <__gnu_thumb1_case_uqi>
    f6aa:	0594      	.short	0x0594
    f6ac:	6646269e 	.word	0x6646269e
    f6b0:	7b9e      	.short	0x7b9e
    f6b2:	7f          	.byte	0x7f
    f6b3:	00          	.byte	0x00
    f6b4:	2203      	movs	r2, #3
    f6b6:	20b8      	movs	r0, #184	; 0xb8
    f6b8:	552a      	strb	r2, [r5, r4]
    f6ba:	2200      	movs	r2, #0
    f6bc:	b29b      	uxth	r3, r3
    f6be:	18eb      	adds	r3, r5, r3
    f6c0:	4f4a      	ldr	r7, [pc, #296]	; (f7ec <IncludeMacCommandsResponse+0x1ac>)
    f6c2:	701a      	strb	r2, [r3, #0]
    f6c4:	30ff      	adds	r0, #255	; 0xff
    f6c6:	5c39      	ldrb	r1, [r7, r0]
    f6c8:	3201      	adds	r2, #1
    f6ca:	4011      	ands	r1, r2
    f6cc:	466a      	mov	r2, sp
    f6ce:	9102      	str	r1, [sp, #8]
    f6d0:	7a12      	ldrb	r2, [r2, #8]
    f6d2:	701a      	strb	r2, [r3, #0]
    f6d4:	5c3a      	ldrb	r2, [r7, r0]
    f6d6:	4694      	mov	ip, r2
    f6d8:	2202      	movs	r2, #2
    f6da:	4661      	mov	r1, ip
    f6dc:	4211      	tst	r1, r2
    f6de:	d002      	beq.n	f6e6 <IncludeMacCommandsResponse+0xa6>
    f6e0:	9902      	ldr	r1, [sp, #8]
    f6e2:	430a      	orrs	r2, r1
    f6e4:	701a      	strb	r2, [r3, #0]
    f6e6:	2204      	movs	r2, #4
    f6e8:	5c39      	ldrb	r1, [r7, r0]
    f6ea:	4211      	tst	r1, r2
    f6ec:	d06e      	beq.n	f7cc <IncludeMacCommandsResponse+0x18c>
    f6ee:	7819      	ldrb	r1, [r3, #0]
    f6f0:	430a      	orrs	r2, r1
    f6f2:	701a      	strb	r2, [r3, #0]
    f6f4:	e06a      	b.n	f7cc <IncludeMacCommandsResponse+0x18c>
    f6f6:	2205      	movs	r2, #5
    f6f8:	2103      	movs	r1, #3
    f6fa:	552a      	strb	r2, [r5, r4]
    f6fc:	2200      	movs	r2, #0
    f6fe:	b29b      	uxth	r3, r3
    f700:	4371      	muls	r1, r6
    f702:	18eb      	adds	r3, r5, r3
    f704:	701a      	strb	r2, [r3, #0]
    f706:	4a39      	ldr	r2, [pc, #228]	; (f7ec <IncludeMacCommandsResponse+0x1ac>)
    f708:	1851      	adds	r1, r2, r1
    f70a:	3170      	adds	r1, #112	; 0x70
    f70c:	7888      	ldrb	r0, [r1, #2]
    f70e:	0700      	lsls	r0, r0, #28
    f710:	0fc0      	lsrs	r0, r0, #31
    f712:	7018      	strb	r0, [r3, #0]
    f714:	7889      	ldrb	r1, [r1, #2]
    f716:	b2c7      	uxtb	r7, r0
    f718:	06c9      	lsls	r1, r1, #27
    f71a:	d502      	bpl.n	f722 <IncludeMacCommandsResponse+0xe2>
    f71c:	2102      	movs	r1, #2
    f71e:	4339      	orrs	r1, r7
    f720:	7019      	strb	r1, [r3, #0]
    f722:	2103      	movs	r1, #3
    f724:	4371      	muls	r1, r6
    f726:	1852      	adds	r2, r2, r1
    f728:	3270      	adds	r2, #112	; 0x70
    f72a:	7892      	ldrb	r2, [r2, #2]
    f72c:	0692      	lsls	r2, r2, #26
    f72e:	d54d      	bpl.n	f7cc <IncludeMacCommandsResponse+0x18c>
    f730:	7819      	ldrb	r1, [r3, #0]
    f732:	2204      	movs	r2, #4
    f734:	e7dc      	b.n	f6f0 <IncludeMacCommandsResponse+0xb0>
    f736:	ab04      	add	r3, sp, #16
    f738:	1ddf      	adds	r7, r3, #7
    f73a:	0039      	movs	r1, r7
    f73c:	4b2f      	ldr	r3, [pc, #188]	; (f7fc <IncludeMacCommandsResponse+0x1bc>)
    f73e:	200e      	movs	r0, #14
    f740:	4798      	blx	r3
    f742:	2306      	movs	r3, #6
    f744:	4a29      	ldr	r2, [pc, #164]	; (f7ec <IncludeMacCommandsResponse+0x1ac>)
    f746:	552b      	strb	r3, [r5, r4]
    f748:	32c0      	adds	r2, #192	; 0xc0
    f74a:	7811      	ldrb	r1, [r2, #0]
    f74c:	1c62      	adds	r2, r4, #1
    f74e:	b292      	uxth	r2, r2
    f750:	54a9      	strb	r1, [r5, r2]
    f752:	783a      	ldrb	r2, [r7, #0]
    f754:	1ca3      	adds	r3, r4, #2
    f756:	0011      	movs	r1, r2
    f758:	3120      	adds	r1, #32
    f75a:	3403      	adds	r4, #3
    f75c:	b2c9      	uxtb	r1, r1
    f75e:	b29b      	uxth	r3, r3
    f760:	b2a4      	uxth	r4, r4
    f762:	293f      	cmp	r1, #63	; 0x3f
    f764:	d904      	bls.n	f770 <IncludeMacCommandsResponse+0x130>
    f766:	2220      	movs	r2, #32
    f768:	54ea      	strb	r2, [r5, r3]
    f76a:	3601      	adds	r6, #1
    f76c:	b2f6      	uxtb	r6, r6
    f76e:	e76e      	b.n	f64e <IncludeMacCommandsResponse+0xe>
    f770:	213f      	movs	r1, #63	; 0x3f
    f772:	400a      	ands	r2, r1
    f774:	e7f8      	b.n	f768 <IncludeMacCommandsResponse+0x128>
    f776:	2207      	movs	r2, #7
    f778:	2103      	movs	r1, #3
    f77a:	552a      	strb	r2, [r5, r4]
    f77c:	2200      	movs	r2, #0
    f77e:	4371      	muls	r1, r6
    f780:	b29b      	uxth	r3, r3
    f782:	18eb      	adds	r3, r5, r3
    f784:	701a      	strb	r2, [r3, #0]
    f786:	4a19      	ldr	r2, [pc, #100]	; (f7ec <IncludeMacCommandsResponse+0x1ac>)
    f788:	1852      	adds	r2, r2, r1
    f78a:	3270      	adds	r2, #112	; 0x70
    f78c:	7891      	ldrb	r1, [r2, #2]
    f78e:	09c9      	lsrs	r1, r1, #7
    f790:	7019      	strb	r1, [r3, #0]
    f792:	7892      	ldrb	r2, [r2, #2]
    f794:	b2c8      	uxtb	r0, r1
    f796:	0652      	lsls	r2, r2, #25
    f798:	d518      	bpl.n	f7cc <IncludeMacCommandsResponse+0x18c>
    f79a:	2202      	movs	r2, #2
    f79c:	4302      	orrs	r2, r0
    f79e:	e7a8      	b.n	f6f2 <IncludeMacCommandsResponse+0xb2>
    f7a0:	2209      	movs	r2, #9
    f7a2:	552a      	strb	r2, [r5, r4]
    f7a4:	b29c      	uxth	r4, r3
    f7a6:	e7e0      	b.n	f76a <IncludeMacCommandsResponse+0x12a>
    f7a8:	220a      	movs	r2, #10
    f7aa:	2103      	movs	r1, #3
    f7ac:	552a      	strb	r2, [r5, r4]
    f7ae:	2200      	movs	r2, #0
    f7b0:	4371      	muls	r1, r6
    f7b2:	b29b      	uxth	r3, r3
    f7b4:	18eb      	adds	r3, r5, r3
    f7b6:	701a      	strb	r2, [r3, #0]
    f7b8:	4a0c      	ldr	r2, [pc, #48]	; (f7ec <IncludeMacCommandsResponse+0x1ac>)
    f7ba:	1852      	adds	r2, r2, r1
    f7bc:	3270      	adds	r2, #112	; 0x70
    f7be:	7891      	ldrb	r1, [r2, #2]
    f7c0:	09c9      	lsrs	r1, r1, #7
    f7c2:	7019      	strb	r1, [r3, #0]
    f7c4:	78d2      	ldrb	r2, [r2, #3]
    f7c6:	b2c8      	uxtb	r0, r1
    f7c8:	07d2      	lsls	r2, r2, #31
    f7ca:	d4e6      	bmi.n	f79a <IncludeMacCommandsResponse+0x15a>
    f7cc:	3402      	adds	r4, #2
    f7ce:	b2a4      	uxth	r4, r4
    f7d0:	e7cb      	b.n	f76a <IncludeMacCommandsResponse+0x12a>
    f7d2:	0013      	movs	r3, r2
    f7d4:	21ff      	movs	r1, #255	; 0xff
    f7d6:	33bd      	adds	r3, #189	; 0xbd
    f7d8:	7019      	strb	r1, [r3, #0]
    f7da:	2300      	movs	r3, #0
    f7dc:	32be      	adds	r2, #190	; 0xbe
    f7de:	7013      	strb	r3, [r2, #0]
    f7e0:	1c63      	adds	r3, r4, #1
    f7e2:	2202      	movs	r2, #2
    f7e4:	e7dd      	b.n	f7a2 <IncludeMacCommandsResponse+0x162>
    f7e6:	5529      	strb	r1, [r5, r4]
    f7e8:	e7dc      	b.n	f7a4 <IncludeMacCommandsResponse+0x164>
    f7ea:	46c0      	nop			; (mov r8, r8)
    f7ec:	200030e4 	.word	0x200030e4
    f7f0:	00017bab 	.word	0x00017bab
    f7f4:	000155d1 	.word	0x000155d1
    f7f8:	2000329b 	.word	0x2000329b
    f7fc:	0000dc25 	.word	0x0000dc25

0000f800 <UpdateJoinSuccessState>:
    f800:	b5f0      	push	{r4, r5, r6, r7, lr}
    f802:	4c33      	ldr	r4, [pc, #204]	; (f8d0 <UpdateJoinSuccessState+0xd0>)
    f804:	2104      	movs	r1, #4
    f806:	0022      	movs	r2, r4
    f808:	326c      	adds	r2, #108	; 0x6c
    f80a:	7813      	ldrb	r3, [r2, #0]
    f80c:	2001      	movs	r0, #1
    f80e:	438b      	bics	r3, r1
    f810:	7013      	strb	r3, [r2, #0]
    f812:	0022      	movs	r2, r4
    f814:	2500      	movs	r5, #0
    f816:	325c      	adds	r2, #92	; 0x5c
    f818:	7813      	ldrb	r3, [r2, #0]
    f81a:	b087      	sub	sp, #28
    f81c:	4303      	orrs	r3, r0
    f81e:	3107      	adds	r1, #7
    f820:	4f2c      	ldr	r7, [pc, #176]	; (f8d4 <UpdateJoinSuccessState+0xd4>)
    f822:	7013      	strb	r3, [r2, #0]
    f824:	47b8      	blx	r7
    f826:	2116      	movs	r1, #22
    f828:	0028      	movs	r0, r5
    f82a:	6625      	str	r5, [r4, #96]	; 0x60
    f82c:	47b8      	blx	r7
    f82e:	0023      	movs	r3, r4
    f830:	2020      	movs	r0, #32
    f832:	33f0      	adds	r3, #240	; 0xf0
    f834:	781b      	ldrb	r3, [r3, #0]
    f836:	4e28      	ldr	r6, [pc, #160]	; (f8d8 <UpdateJoinSuccessState+0xd8>)
    f838:	4203      	tst	r3, r0
    f83a:	d014      	beq.n	f866 <UpdateJoinSuccessState+0x66>
    f83c:	0023      	movs	r3, r4
    f83e:	335b      	adds	r3, #91	; 0x5b
    f840:	701d      	strb	r5, [r3, #0]
    f842:	0023      	movs	r3, r4
    f844:	a904      	add	r1, sp, #16
    f846:	334f      	adds	r3, #79	; 0x4f
    f848:	710d      	strb	r5, [r1, #4]
    f84a:	701d      	strb	r5, [r3, #0]
    f84c:	705d      	strb	r5, [r3, #1]
    f84e:	709d      	strb	r5, [r3, #2]
    f850:	70dd      	strb	r5, [r3, #3]
    f852:	711d      	strb	r5, [r3, #4]
    f854:	715d      	strb	r5, [r3, #5]
    f856:	719d      	strb	r5, [r3, #6]
    f858:	71dd      	strb	r5, [r3, #7]
    f85a:	47b0      	blx	r6
    f85c:	210f      	movs	r1, #15
    f85e:	2021      	movs	r0, #33	; 0x21
    f860:	4469      	add	r1, sp
    f862:	700d      	strb	r5, [r1, #0]
    f864:	47b0      	blx	r6
    f866:	2500      	movs	r5, #0
    f868:	210a      	movs	r1, #10
    f86a:	2001      	movs	r0, #1
    f86c:	6665      	str	r5, [r4, #100]	; 0x64
    f86e:	47b8      	blx	r7
    f870:	0023      	movs	r3, r4
    f872:	33a2      	adds	r3, #162	; 0xa2
    f874:	801d      	strh	r5, [r3, #0]
    f876:	0022      	movs	r2, r4
    f878:	0023      	movs	r3, r4
    f87a:	210e      	movs	r1, #14
    f87c:	325c      	adds	r2, #92	; 0x5c
    f87e:	33cd      	adds	r3, #205	; 0xcd
    f880:	701d      	strb	r5, [r3, #0]
    f882:	7813      	ldrb	r3, [r2, #0]
    f884:	203a      	movs	r0, #58	; 0x3a
    f886:	438b      	bics	r3, r1
    f888:	0029      	movs	r1, r5
    f88a:	7013      	strb	r3, [r2, #0]
    f88c:	47b0      	blx	r6
    f88e:	0023      	movs	r3, r4
    f890:	335d      	adds	r3, #93	; 0x5d
    f892:	781b      	ldrb	r3, [r3, #0]
    f894:	079b      	lsls	r3, r3, #30
    f896:	d50a      	bpl.n	f8ae <UpdateJoinSuccessState+0xae>
    f898:	21fa      	movs	r1, #250	; 0xfa
    f89a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    f89c:	0089      	lsls	r1, r1, #2
    f89e:	34c7      	adds	r4, #199	; 0xc7
    f8a0:	7820      	ldrb	r0, [r4, #0]
    f8a2:	4359      	muls	r1, r3
    f8a4:	9500      	str	r5, [sp, #0]
    f8a6:	4b0d      	ldr	r3, [pc, #52]	; (f8dc <UpdateJoinSuccessState+0xdc>)
    f8a8:	002a      	movs	r2, r5
    f8aa:	4c0d      	ldr	r4, [pc, #52]	; (f8e0 <UpdateJoinSuccessState+0xe0>)
    f8ac:	47a0      	blx	r4
    f8ae:	490d      	ldr	r1, [pc, #52]	; (f8e4 <UpdateJoinSuccessState+0xe4>)
    f8b0:	794a      	ldrb	r2, [r1, #5]
    f8b2:	790b      	ldrb	r3, [r1, #4]
    f8b4:	0212      	lsls	r2, r2, #8
    f8b6:	431a      	orrs	r2, r3
    f8b8:	798b      	ldrb	r3, [r1, #6]
    f8ba:	041b      	lsls	r3, r3, #16
    f8bc:	431a      	orrs	r2, r3
    f8be:	79cb      	ldrb	r3, [r1, #7]
    f8c0:	061b      	lsls	r3, r3, #24
    f8c2:	4313      	orrs	r3, r2
    f8c4:	d001      	beq.n	f8ca <UpdateJoinSuccessState+0xca>
    f8c6:	2008      	movs	r0, #8
    f8c8:	4798      	blx	r3
    f8ca:	b007      	add	sp, #28
    f8cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f8ce:	46c0      	nop			; (mov r8, r8)
    f8d0:	200030e4 	.word	0x200030e4
    f8d4:	0000948d 	.word	0x0000948d
    f8d8:	0000c931 	.word	0x0000c931
    f8dc:	0000fa21 	.word	0x0000fa21
    f8e0:	0000cd65 	.word	0x0000cd65
    f8e4:	200033b8 	.word	0x200033b8

0000f8e8 <PrepareSessionKeys>:
    f8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f8ea:	0004      	movs	r4, r0
    f8ec:	2603      	movs	r6, #3
    f8ee:	000d      	movs	r5, r1
    f8f0:	0017      	movs	r7, r2
    f8f2:	4b09      	ldr	r3, [pc, #36]	; (f918 <PrepareSessionKeys+0x30>)
    f8f4:	2210      	movs	r2, #16
    f8f6:	2100      	movs	r1, #0
    f8f8:	4798      	blx	r3
    f8fa:	0032      	movs	r2, r6
    f8fc:	0029      	movs	r1, r5
    f8fe:	1c60      	adds	r0, r4, #1
    f900:	4d06      	ldr	r5, [pc, #24]	; (f91c <PrepareSessionKeys+0x34>)
    f902:	47a8      	blx	r5
    f904:	0032      	movs	r2, r6
    f906:	0039      	movs	r1, r7
    f908:	1d20      	adds	r0, r4, #4
    f90a:	47a8      	blx	r5
    f90c:	1de0      	adds	r0, r4, #7
    f90e:	2202      	movs	r2, #2
    f910:	4903      	ldr	r1, [pc, #12]	; (f920 <PrepareSessionKeys+0x38>)
    f912:	47a8      	blx	r5
    f914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f916:	46c0      	nop			; (mov r8, r8)
    f918:	000155d1 	.word	0x000155d1
    f91c:	000155bf 	.word	0x000155bf
    f920:	20003188 	.word	0x20003188

0000f924 <AssembleEncryptionBlock>:
    f924:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f926:	001e      	movs	r6, r3
    f928:	4c0b      	ldr	r4, [pc, #44]	; (f958 <AssembleEncryptionBlock+0x34>)
    f92a:	0017      	movs	r7, r2
    f92c:	4b0b      	ldr	r3, [pc, #44]	; (f95c <AssembleEncryptionBlock+0x38>)
    f92e:	0005      	movs	r5, r0
    f930:	9101      	str	r1, [sp, #4]
    f932:	2210      	movs	r2, #16
    f934:	2100      	movs	r1, #0
    f936:	0020      	movs	r0, r4
    f938:	4798      	blx	r3
    f93a:	7026      	strb	r6, [r4, #0]
    f93c:	2604      	movs	r6, #4
    f93e:	7165      	strb	r5, [r4, #5]
    f940:	0032      	movs	r2, r6
    f942:	4d07      	ldr	r5, [pc, #28]	; (f960 <AssembleEncryptionBlock+0x3c>)
    f944:	a908      	add	r1, sp, #32
    f946:	1da0      	adds	r0, r4, #6
    f948:	47a8      	blx	r5
    f94a:	0020      	movs	r0, r4
    f94c:	0032      	movs	r2, r6
    f94e:	a901      	add	r1, sp, #4
    f950:	300a      	adds	r0, #10
    f952:	47a8      	blx	r5
    f954:	73e7      	strb	r7, [r4, #15]
    f956:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    f958:	2000206d 	.word	0x2000206d
    f95c:	000155d1 	.word	0x000155d1
    f960:	000155bf 	.word	0x000155bf

0000f964 <ConfigureRadio>:
    f964:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f966:	0001      	movs	r1, r0
    f968:	0005      	movs	r5, r0
    f96a:	4c11      	ldr	r4, [pc, #68]	; (f9b0 <ConfigureRadio+0x4c>)
    f96c:	3109      	adds	r1, #9
    f96e:	2009      	movs	r0, #9
    f970:	47a0      	blx	r4
    f972:	0029      	movs	r1, r5
    f974:	2001      	movs	r0, #1
    f976:	47a0      	blx	r4
    f978:	1d29      	adds	r1, r5, #4
    f97a:	200a      	movs	r0, #10
    f97c:	47a0      	blx	r4
    f97e:	7a6b      	ldrb	r3, [r5, #9]
    f980:	2b01      	cmp	r3, #1
    f982:	d10b      	bne.n	f99c <ConfigureRadio+0x38>
    f984:	0029      	movs	r1, r5
    f986:	2016      	movs	r0, #22
    f988:	310b      	adds	r1, #11
    f98a:	47a0      	blx	r4
    f98c:	0029      	movs	r1, r5
    f98e:	2007      	movs	r0, #7
    f990:	310a      	adds	r1, #10
    f992:	47a0      	blx	r4
    f994:	2000      	movs	r0, #0
    f996:	4907      	ldr	r1, [pc, #28]	; (f9b4 <ConfigureRadio+0x50>)
    f998:	47a0      	blx	r4
    f99a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    f99c:	466b      	mov	r3, sp
    f99e:	1dd9      	adds	r1, r3, #7
    f9a0:	2303      	movs	r3, #3
    f9a2:	2013      	movs	r0, #19
    f9a4:	700b      	strb	r3, [r1, #0]
    f9a6:	47a0      	blx	r4
    f9a8:	4903      	ldr	r1, [pc, #12]	; (f9b8 <ConfigureRadio+0x54>)
    f9aa:	2012      	movs	r0, #18
    f9ac:	e7f4      	b.n	f998 <ConfigureRadio+0x34>
    f9ae:	46c0      	nop			; (mov r8, r8)
    f9b0:	0000dd11 	.word	0x0000dd11
    f9b4:	200031bb 	.word	0x200031bb
    f9b8:	00017ba8 	.word	0x00017ba8

0000f9bc <StopReceiveWindow2Timer>:
    f9bc:	b510      	push	{r4, lr}
    f9be:	4c0b      	ldr	r4, [pc, #44]	; (f9ec <StopReceiveWindow2Timer+0x30>)
    f9c0:	0022      	movs	r2, r4
    f9c2:	32d4      	adds	r2, #212	; 0xd4
    f9c4:	7812      	ldrb	r2, [r2, #0]
    f9c6:	2a01      	cmp	r2, #1
    f9c8:	d10e      	bne.n	f9e8 <StopReceiveWindow2Timer+0x2c>
    f9ca:	0021      	movs	r1, r4
    f9cc:	200e      	movs	r0, #14
    f9ce:	315c      	adds	r1, #92	; 0x5c
    f9d0:	780a      	ldrb	r2, [r1, #0]
    f9d2:	34c5      	adds	r4, #197	; 0xc5
    f9d4:	4382      	bics	r2, r0
    f9d6:	700a      	strb	r2, [r1, #0]
    f9d8:	7820      	ldrb	r0, [r4, #0]
    f9da:	4b05      	ldr	r3, [pc, #20]	; (f9f0 <StopReceiveWindow2Timer+0x34>)
    f9dc:	4798      	blx	r3
    f9de:	2800      	cmp	r0, #0
    f9e0:	d002      	beq.n	f9e8 <StopReceiveWindow2Timer+0x2c>
    f9e2:	7820      	ldrb	r0, [r4, #0]
    f9e4:	4b03      	ldr	r3, [pc, #12]	; (f9f4 <StopReceiveWindow2Timer+0x38>)
    f9e6:	4798      	blx	r3
    f9e8:	bd10      	pop	{r4, pc}
    f9ea:	46c0      	nop			; (mov r8, r8)
    f9ec:	200030e4 	.word	0x200030e4
    f9f0:	0000cefd 	.word	0x0000cefd
    f9f4:	0000d069 	.word	0x0000d069

0000f9f8 <LorawanLinkCheckCallback.part.1>:
    f9f8:	b513      	push	{r0, r1, r4, lr}
    f9fa:	21fa      	movs	r1, #250	; 0xfa
    f9fc:	4b05      	ldr	r3, [pc, #20]	; (fa14 <LorawanLinkCheckCallback.part.1+0x1c>)
    f9fe:	0089      	lsls	r1, r1, #2
    fa00:	6e9a      	ldr	r2, [r3, #104]	; 0x68
    fa02:	33c7      	adds	r3, #199	; 0xc7
    fa04:	4351      	muls	r1, r2
    fa06:	2200      	movs	r2, #0
    fa08:	7818      	ldrb	r0, [r3, #0]
    fa0a:	4c03      	ldr	r4, [pc, #12]	; (fa18 <LorawanLinkCheckCallback.part.1+0x20>)
    fa0c:	9200      	str	r2, [sp, #0]
    fa0e:	4b03      	ldr	r3, [pc, #12]	; (fa1c <LorawanLinkCheckCallback.part.1+0x24>)
    fa10:	47a0      	blx	r4
    fa12:	bd13      	pop	{r0, r1, r4, pc}
    fa14:	200030e4 	.word	0x200030e4
    fa18:	0000cd65 	.word	0x0000cd65
    fa1c:	0000fa21 	.word	0x0000fa21

0000fa20 <LorawanLinkCheckCallback>:
    fa20:	4b17      	ldr	r3, [pc, #92]	; (fa80 <LorawanLinkCheckCallback+0x60>)
    fa22:	20a0      	movs	r0, #160	; 0xa0
    fa24:	001a      	movs	r2, r3
    fa26:	2180      	movs	r1, #128	; 0x80
    fa28:	b510      	push	{r4, lr}
    fa2a:	325c      	adds	r2, #92	; 0x5c
    fa2c:	8812      	ldrh	r2, [r2, #0]
    fa2e:	0080      	lsls	r0, r0, #2
    fa30:	0089      	lsls	r1, r1, #2
    fa32:	4002      	ands	r2, r0
    fa34:	428a      	cmp	r2, r1
    fa36:	d11c      	bne.n	fa72 <LorawanLinkCheckCallback+0x52>
    fa38:	001a      	movs	r2, r3
    fa3a:	32b8      	adds	r2, #184	; 0xb8
    fa3c:	7810      	ldrb	r0, [r2, #0]
    fa3e:	2403      	movs	r4, #3
    fa40:	2200      	movs	r2, #0
    fa42:	b2d1      	uxtb	r1, r2
    fa44:	4281      	cmp	r1, r0
    fa46:	d30d      	bcc.n	fa64 <LorawanLinkCheckCallback+0x44>
    fa48:	d113      	bne.n	fa72 <LorawanLinkCheckCallback+0x52>
    fa4a:	2203      	movs	r2, #3
    fa4c:	434a      	muls	r2, r1
    fa4e:	2102      	movs	r1, #2
    fa50:	189a      	adds	r2, r3, r2
    fa52:	3271      	adds	r2, #113	; 0x71
    fa54:	7011      	strb	r1, [r2, #0]
    fa56:	280f      	cmp	r0, #15
    fa58:	d80b      	bhi.n	fa72 <LorawanLinkCheckCallback+0x52>
    fa5a:	001a      	movs	r2, r3
    fa5c:	3001      	adds	r0, #1
    fa5e:	32b8      	adds	r2, #184	; 0xb8
    fa60:	7010      	strb	r0, [r2, #0]
    fa62:	e006      	b.n	fa72 <LorawanLinkCheckCallback+0x52>
    fa64:	0021      	movs	r1, r4
    fa66:	3201      	adds	r2, #1
    fa68:	4351      	muls	r1, r2
    fa6a:	316e      	adds	r1, #110	; 0x6e
    fa6c:	5c59      	ldrb	r1, [r3, r1]
    fa6e:	2902      	cmp	r1, #2
    fa70:	d1e7      	bne.n	fa42 <LorawanLinkCheckCallback+0x22>
    fa72:	335d      	adds	r3, #93	; 0x5d
    fa74:	781b      	ldrb	r3, [r3, #0]
    fa76:	079b      	lsls	r3, r3, #30
    fa78:	d501      	bpl.n	fa7e <LorawanLinkCheckCallback+0x5e>
    fa7a:	4b02      	ldr	r3, [pc, #8]	; (fa84 <LorawanLinkCheckCallback+0x64>)
    fa7c:	4798      	blx	r3
    fa7e:	bd10      	pop	{r4, pc}
    fa80:	200030e4 	.word	0x200030e4
    fa84:	0000f9f9 	.word	0x0000f9f9

0000fa88 <LORAWAN_Send>:
    fa88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    fa8a:	4c36      	ldr	r4, [pc, #216]	; (fb64 <LORAWAN_Send+0xdc>)
    fa8c:	0006      	movs	r6, r0
    fa8e:	0023      	movs	r3, r4
    fa90:	335c      	adds	r3, #92	; 0x5c
    fa92:	781b      	ldrb	r3, [r3, #0]
    fa94:	250f      	movs	r5, #15
    fa96:	b25a      	sxtb	r2, r3
    fa98:	2a00      	cmp	r2, #0
    fa9a:	db0b      	blt.n	fab4 <LORAWAN_Send+0x2c>
    fa9c:	3d03      	subs	r5, #3
    fa9e:	065a      	lsls	r2, r3, #25
    faa0:	d408      	bmi.n	fab4 <LORAWAN_Send+0x2c>
    faa2:	3d03      	subs	r5, #3
    faa4:	07db      	lsls	r3, r3, #31
    faa6:	d505      	bpl.n	fab4 <LORAWAN_Send+0x2c>
    faa8:	23da      	movs	r3, #218	; 0xda
    faaa:	005b      	lsls	r3, r3, #1
    faac:	5ce7      	ldrb	r7, [r4, r3]
    faae:	2f00      	cmp	r7, #0
    fab0:	d102      	bne.n	fab8 <LORAWAN_Send+0x30>
    fab2:	2511      	movs	r5, #17
    fab4:	0028      	movs	r0, r5
    fab6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    fab8:	2800      	cmp	r0, #0
    faba:	d10d      	bne.n	fad8 <LORAWAN_Send+0x50>
    fabc:	2700      	movs	r7, #0
    fabe:	6e23      	ldr	r3, [r4, #96]	; 0x60
    fac0:	3301      	adds	r3, #1
    fac2:	d123      	bne.n	fb0c <LORAWAN_Send+0x84>
    fac4:	2001      	movs	r0, #1
    fac6:	345c      	adds	r4, #92	; 0x5c
    fac8:	78a3      	ldrb	r3, [r4, #2]
    faca:	210b      	movs	r1, #11
    facc:	4303      	orrs	r3, r0
    face:	70a3      	strb	r3, [r4, #2]
    fad0:	4b25      	ldr	r3, [pc, #148]	; (fb68 <LORAWAN_Send+0xe0>)
    fad2:	4798      	blx	r3
    fad4:	250d      	movs	r5, #13
    fad6:	e7ed      	b.n	fab4 <LORAWAN_Send+0x2c>
    fad8:	7843      	ldrb	r3, [r0, #1]
    fada:	7a02      	ldrb	r2, [r0, #8]
    fadc:	3b01      	subs	r3, #1
    fade:	b2db      	uxtb	r3, r3
    fae0:	9201      	str	r2, [sp, #4]
    fae2:	2bdf      	cmp	r3, #223	; 0xdf
    fae4:	d902      	bls.n	faec <LORAWAN_Send+0x64>
    fae6:	250a      	movs	r5, #10
    fae8:	2a00      	cmp	r2, #0
    faea:	d1e3      	bne.n	fab4 <LORAWAN_Send+0x2c>
    faec:	4b1f      	ldr	r3, [pc, #124]	; (fb6c <LORAWAN_Send+0xe4>)
    faee:	4798      	blx	r3
    faf0:	4684      	mov	ip, r0
    faf2:	9b01      	ldr	r3, [sp, #4]
    faf4:	9000      	str	r0, [sp, #0]
    faf6:	4463      	add	r3, ip
    faf8:	001d      	movs	r5, r3
    fafa:	4b1d      	ldr	r3, [pc, #116]	; (fb70 <LORAWAN_Send+0xe8>)
    fafc:	4798      	blx	r3
    fafe:	4285      	cmp	r5, r0
    fb00:	dddc      	ble.n	fabc <LORAWAN_Send+0x34>
    fb02:	9b00      	ldr	r3, [sp, #0]
    fb04:	250e      	movs	r5, #14
    fb06:	2b00      	cmp	r3, #0
    fb08:	d0d4      	beq.n	fab4 <LORAWAN_Send+0x2c>
    fb0a:	e7d8      	b.n	fabe <LORAWAN_Send+0x36>
    fb0c:	0023      	movs	r3, r4
    fb0e:	33d4      	adds	r3, #212	; 0xd4
    fb10:	781b      	ldrb	r3, [r3, #0]
    fb12:	2b04      	cmp	r3, #4
    fb14:	d01d      	beq.n	fb52 <LORAWAN_Send+0xca>
    fb16:	0023      	movs	r3, r4
    fb18:	33d4      	adds	r3, #212	; 0xd4
    fb1a:	781b      	ldrb	r3, [r3, #0]
    fb1c:	2b01      	cmp	r3, #1
    fb1e:	d105      	bne.n	fb2c <LORAWAN_Send+0xa4>
    fb20:	0023      	movs	r3, r4
    fb22:	335c      	adds	r3, #92	; 0x5c
    fb24:	781a      	ldrb	r2, [r3, #0]
    fb26:	230e      	movs	r3, #14
    fb28:	421a      	tst	r2, r3
    fb2a:	d1c2      	bne.n	fab2 <LORAWAN_Send+0x2a>
    fb2c:	0023      	movs	r3, r4
    fb2e:	33dc      	adds	r3, #220	; 0xdc
    fb30:	2f00      	cmp	r7, #0
    fb32:	d113      	bne.n	fb5c <LORAWAN_Send+0xd4>
    fb34:	2508      	movs	r5, #8
    fb36:	601e      	str	r6, [r3, #0]
    fb38:	23da      	movs	r3, #218	; 0xda
    fb3a:	2200      	movs	r2, #0
    fb3c:	005b      	lsls	r3, r3, #1
    fb3e:	54e2      	strb	r2, [r4, r3]
    fb40:	2001      	movs	r0, #1
    fb42:	4b0c      	ldr	r3, [pc, #48]	; (fb74 <LORAWAN_Send+0xec>)
    fb44:	4798      	blx	r3
    fb46:	2320      	movs	r3, #32
    fb48:	346c      	adds	r4, #108	; 0x6c
    fb4a:	7822      	ldrb	r2, [r4, #0]
    fb4c:	4313      	orrs	r3, r2
    fb4e:	7023      	strb	r3, [r4, #0]
    fb50:	e7b0      	b.n	fab4 <LORAWAN_Send+0x2c>
    fb52:	4b09      	ldr	r3, [pc, #36]	; (fb78 <LORAWAN_Send+0xf0>)
    fb54:	4798      	blx	r3
    fb56:	2808      	cmp	r0, #8
    fb58:	d1ab      	bne.n	fab2 <LORAWAN_Send+0x2a>
    fb5a:	e7dc      	b.n	fb16 <LORAWAN_Send+0x8e>
    fb5c:	2200      	movs	r2, #0
    fb5e:	2511      	movs	r5, #17
    fb60:	601a      	str	r2, [r3, #0]
    fb62:	e7e9      	b.n	fb38 <LORAWAN_Send+0xb0>
    fb64:	200030e4 	.word	0x200030e4
    fb68:	0000948d 	.word	0x0000948d
    fb6c:	0000f5a5 	.word	0x0000f5a5
    fb70:	0000f5e5 	.word	0x0000f5e5
    fb74:	0000dba1 	.word	0x0000dba1
    fb78:	00011dc9 	.word	0x00011dc9

0000fb7c <AutomaticReplyCallback>:
    fb7c:	b510      	push	{r4, lr}
    fb7e:	4c0d      	ldr	r4, [pc, #52]	; (fbb4 <AutomaticReplyCallback+0x38>)
    fb80:	0023      	movs	r3, r4
    fb82:	33d4      	adds	r3, #212	; 0xd4
    fb84:	781b      	ldrb	r3, [r3, #0]
    fb86:	2b01      	cmp	r3, #1
    fb88:	d10e      	bne.n	fba8 <AutomaticReplyCallback+0x2c>
    fb8a:	0022      	movs	r2, r4
    fb8c:	210e      	movs	r1, #14
    fb8e:	325c      	adds	r2, #92	; 0x5c
    fb90:	7813      	ldrb	r3, [r2, #0]
    fb92:	438b      	bics	r3, r1
    fb94:	7013      	strb	r3, [r2, #0]
    fb96:	4b08      	ldr	r3, [pc, #32]	; (fbb8 <AutomaticReplyCallback+0x3c>)
    fb98:	2000      	movs	r0, #0
    fb9a:	4798      	blx	r3
    fb9c:	2208      	movs	r2, #8
    fb9e:	346c      	adds	r4, #108	; 0x6c
    fba0:	7823      	ldrb	r3, [r4, #0]
    fba2:	4393      	bics	r3, r2
    fba4:	7023      	strb	r3, [r4, #0]
    fba6:	bd10      	pop	{r4, pc}
    fba8:	2b04      	cmp	r3, #4
    fbaa:	d1f4      	bne.n	fb96 <AutomaticReplyCallback+0x1a>
    fbac:	4b03      	ldr	r3, [pc, #12]	; (fbbc <AutomaticReplyCallback+0x40>)
    fbae:	4798      	blx	r3
    fbb0:	e7f1      	b.n	fb96 <AutomaticReplyCallback+0x1a>
    fbb2:	46c0      	nop			; (mov r8, r8)
    fbb4:	200030e4 	.word	0x200030e4
    fbb8:	0000fa89 	.word	0x0000fa89
    fbbc:	0000e645 	.word	0x0000e645

0000fbc0 <UpdateCurrentDataRate>:
    fbc0:	b510      	push	{r4, lr}
    fbc2:	4b04      	ldr	r3, [pc, #16]	; (fbd4 <UpdateCurrentDataRate+0x14>)
    fbc4:	210c      	movs	r1, #12
    fbc6:	33bf      	adds	r3, #191	; 0xbf
    fbc8:	7018      	strb	r0, [r3, #0]
    fbca:	2001      	movs	r0, #1
    fbcc:	4b02      	ldr	r3, [pc, #8]	; (fbd8 <UpdateCurrentDataRate+0x18>)
    fbce:	4798      	blx	r3
    fbd0:	bd10      	pop	{r4, pc}
    fbd2:	46c0      	nop			; (mov r8, r8)
    fbd4:	200030e4 	.word	0x200030e4
    fbd8:	0000948d 	.word	0x0000948d

0000fbdc <UpdateDLSettings>:
    fbdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    fbde:	466b      	mov	r3, sp
    fbe0:	1dde      	adds	r6, r3, #7
    fbe2:	1d9c      	adds	r4, r3, #6
    fbe4:	71d8      	strb	r0, [r3, #7]
    fbe6:	7021      	strb	r1, [r4, #0]
    fbe8:	2017      	movs	r0, #23
    fbea:	0031      	movs	r1, r6
    fbec:	4d0c      	ldr	r5, [pc, #48]	; (fc20 <UpdateDLSettings+0x44>)
    fbee:	47a8      	blx	r5
    fbf0:	2808      	cmp	r0, #8
    fbf2:	d107      	bne.n	fc04 <UpdateDLSettings+0x28>
    fbf4:	4b0b      	ldr	r3, [pc, #44]	; (fc24 <UpdateDLSettings+0x48>)
    fbf6:	7832      	ldrb	r2, [r6, #0]
    fbf8:	334e      	adds	r3, #78	; 0x4e
    fbfa:	701a      	strb	r2, [r3, #0]
    fbfc:	2100      	movs	r1, #0
    fbfe:	3807      	subs	r0, #7
    fc00:	4b09      	ldr	r3, [pc, #36]	; (fc28 <UpdateDLSettings+0x4c>)
    fc02:	4798      	blx	r3
    fc04:	0021      	movs	r1, r4
    fc06:	2018      	movs	r0, #24
    fc08:	47a8      	blx	r5
    fc0a:	2808      	cmp	r0, #8
    fc0c:	d107      	bne.n	fc1e <UpdateDLSettings+0x42>
    fc0e:	2101      	movs	r1, #1
    fc10:	4b04      	ldr	r3, [pc, #16]	; (fc24 <UpdateDLSettings+0x48>)
    fc12:	7822      	ldrb	r2, [r4, #0]
    fc14:	33ce      	adds	r3, #206	; 0xce
    fc16:	701a      	strb	r2, [r3, #0]
    fc18:	0008      	movs	r0, r1
    fc1a:	4b03      	ldr	r3, [pc, #12]	; (fc28 <UpdateDLSettings+0x4c>)
    fc1c:	4798      	blx	r3
    fc1e:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    fc20:	0000c915 	.word	0x0000c915
    fc24:	200030e4 	.word	0x200030e4
    fc28:	0000948d 	.word	0x0000948d

0000fc2c <UpdateTxPower>:
    fc2c:	b510      	push	{r4, lr}
    fc2e:	4b04      	ldr	r3, [pc, #16]	; (fc40 <UpdateTxPower+0x14>)
    fc30:	210a      	movs	r1, #10
    fc32:	33c1      	adds	r3, #193	; 0xc1
    fc34:	7018      	strb	r0, [r3, #0]
    fc36:	2000      	movs	r0, #0
    fc38:	4b02      	ldr	r3, [pc, #8]	; (fc44 <UpdateTxPower+0x18>)
    fc3a:	4798      	blx	r3
    fc3c:	bd10      	pop	{r4, pc}
    fc3e:	46c0      	nop			; (mov r8, r8)
    fc40:	200030e4 	.word	0x200030e4
    fc44:	0000948d 	.word	0x0000948d

0000fc48 <UpdateRetransmissionAckTimeoutState>:
    fc48:	4b10      	ldr	r3, [pc, #64]	; (fc8c <UpdateRetransmissionAckTimeoutState+0x44>)
    fc4a:	b513      	push	{r0, r1, r4, lr}
    fc4c:	001a      	movs	r2, r3
    fc4e:	32d4      	adds	r2, #212	; 0xd4
    fc50:	7812      	ldrb	r2, [r2, #0]
    fc52:	2a01      	cmp	r2, #1
    fc54:	d108      	bne.n	fc68 <UpdateRetransmissionAckTimeoutState+0x20>
    fc56:	0018      	movs	r0, r3
    fc58:	210e      	movs	r1, #14
    fc5a:	305c      	adds	r0, #92	; 0x5c
    fc5c:	7802      	ldrb	r2, [r0, #0]
    fc5e:	438a      	bics	r2, r1
    fc60:	0011      	movs	r1, r2
    fc62:	220c      	movs	r2, #12
    fc64:	430a      	orrs	r2, r1
    fc66:	7002      	strb	r2, [r0, #0]
    fc68:	001a      	movs	r2, r3
    fc6a:	32b2      	adds	r2, #178	; 0xb2
    fc6c:	8811      	ldrh	r1, [r2, #0]
    fc6e:	22c0      	movs	r2, #192	; 0xc0
    fc70:	32ff      	adds	r2, #255	; 0xff
    fc72:	5c9a      	ldrb	r2, [r3, r2]
    fc74:	33c8      	adds	r3, #200	; 0xc8
    fc76:	1a8a      	subs	r2, r1, r2
    fc78:	21fa      	movs	r1, #250	; 0xfa
    fc7a:	0089      	lsls	r1, r1, #2
    fc7c:	4351      	muls	r1, r2
    fc7e:	2200      	movs	r2, #0
    fc80:	7818      	ldrb	r0, [r3, #0]
    fc82:	4c03      	ldr	r4, [pc, #12]	; (fc90 <UpdateRetransmissionAckTimeoutState+0x48>)
    fc84:	9200      	str	r2, [sp, #0]
    fc86:	4b03      	ldr	r3, [pc, #12]	; (fc94 <UpdateRetransmissionAckTimeoutState+0x4c>)
    fc88:	47a0      	blx	r4
    fc8a:	bd13      	pop	{r0, r1, r4, pc}
    fc8c:	200030e4 	.word	0x200030e4
    fc90:	0000cd65 	.word	0x0000cd65
    fc94:	00010b5d 	.word	0x00010b5d

0000fc98 <UpdateReceiveWindow2Parameters>:
    fc98:	4b06      	ldr	r3, [pc, #24]	; (fcb4 <UpdateReceiveWindow2Parameters+0x1c>)
    fc9a:	b510      	push	{r4, lr}
    fc9c:	001a      	movs	r2, r3
    fc9e:	334a      	adds	r3, #74	; 0x4a
    fca0:	8018      	strh	r0, [r3, #0]
    fca2:	324e      	adds	r2, #78	; 0x4e
    fca4:	0c00      	lsrs	r0, r0, #16
    fca6:	8058      	strh	r0, [r3, #2]
    fca8:	7011      	strb	r1, [r2, #0]
    fcaa:	2001      	movs	r0, #1
    fcac:	2100      	movs	r1, #0
    fcae:	4b02      	ldr	r3, [pc, #8]	; (fcb8 <UpdateReceiveWindow2Parameters+0x20>)
    fcb0:	4798      	blx	r3
    fcb2:	bd10      	pop	{r4, pc}
    fcb4:	200030e4 	.word	0x200030e4
    fcb8:	0000948d 	.word	0x0000948d

0000fcbc <ResetParametersForConfirmedTransmission>:
    fcbc:	4b0a      	ldr	r3, [pc, #40]	; (fce8 <ResetParametersForConfirmedTransmission+0x2c>)
    fcbe:	001a      	movs	r2, r3
    fcc0:	32d4      	adds	r2, #212	; 0xd4
    fcc2:	7812      	ldrb	r2, [r2, #0]
    fcc4:	2a01      	cmp	r2, #1
    fcc6:	d105      	bne.n	fcd4 <ResetParametersForConfirmedTransmission+0x18>
    fcc8:	0019      	movs	r1, r3
    fcca:	200e      	movs	r0, #14
    fccc:	315c      	adds	r1, #92	; 0x5c
    fcce:	780a      	ldrb	r2, [r1, #0]
    fcd0:	4382      	bics	r2, r0
    fcd2:	700a      	strb	r2, [r1, #0]
    fcd4:	001a      	movs	r2, r3
    fcd6:	2100      	movs	r1, #0
    fcd8:	336c      	adds	r3, #108	; 0x6c
    fcda:	32bc      	adds	r2, #188	; 0xbc
    fcdc:	7011      	strb	r1, [r2, #0]
    fcde:	781a      	ldrb	r2, [r3, #0]
    fce0:	3101      	adds	r1, #1
    fce2:	438a      	bics	r2, r1
    fce4:	701a      	strb	r2, [r3, #0]
    fce6:	4770      	bx	lr
    fce8:	200030e4 	.word	0x200030e4

0000fcec <ResetParametersForUnconfirmedTransmission>:
    fcec:	4b07      	ldr	r3, [pc, #28]	; (fd0c <ResetParametersForUnconfirmedTransmission+0x20>)
    fcee:	001a      	movs	r2, r3
    fcf0:	32d4      	adds	r2, #212	; 0xd4
    fcf2:	7812      	ldrb	r2, [r2, #0]
    fcf4:	2a01      	cmp	r2, #1
    fcf6:	d105      	bne.n	fd04 <ResetParametersForUnconfirmedTransmission+0x18>
    fcf8:	0019      	movs	r1, r3
    fcfa:	200e      	movs	r0, #14
    fcfc:	315c      	adds	r1, #92	; 0x5c
    fcfe:	780a      	ldrb	r2, [r1, #0]
    fd00:	4382      	bics	r2, r0
    fd02:	700a      	strb	r2, [r1, #0]
    fd04:	2200      	movs	r2, #0
    fd06:	33bb      	adds	r3, #187	; 0xbb
    fd08:	701a      	strb	r2, [r3, #0]
    fd0a:	4770      	bx	lr
    fd0c:	200030e4 	.word	0x200030e4

0000fd10 <SetJoinFailState>:
    fd10:	b570      	push	{r4, r5, r6, lr}
    fd12:	4c15      	ldr	r4, [pc, #84]	; (fd68 <SetJoinFailState+0x58>)
    fd14:	2604      	movs	r6, #4
    fd16:	0025      	movs	r5, r4
    fd18:	356c      	adds	r5, #108	; 0x6c
    fd1a:	782a      	ldrb	r2, [r5, #0]
    fd1c:	0021      	movs	r1, r4
    fd1e:	43b2      	bics	r2, r6
    fd20:	702a      	strb	r2, [r5, #0]
    fd22:	22f0      	movs	r2, #240	; 0xf0
    fd24:	315c      	adds	r1, #92	; 0x5c
    fd26:	780b      	ldrb	r3, [r1, #0]
    fd28:	4013      	ands	r3, r2
    fd2a:	700b      	strb	r3, [r1, #0]
    fd2c:	18a3      	adds	r3, r4, r2
    fd2e:	781b      	ldrb	r3, [r3, #0]
    fd30:	069b      	lsls	r3, r3, #26
    fd32:	d503      	bpl.n	fd3c <SetJoinFailState+0x2c>
    fd34:	0023      	movs	r3, r4
    fd36:	2200      	movs	r2, #0
    fd38:	335b      	adds	r3, #91	; 0x5b
    fd3a:	701a      	strb	r2, [r3, #0]
    fd3c:	490b      	ldr	r1, [pc, #44]	; (fd6c <SetJoinFailState+0x5c>)
    fd3e:	794a      	ldrb	r2, [r1, #5]
    fd40:	790b      	ldrb	r3, [r1, #4]
    fd42:	0212      	lsls	r2, r2, #8
    fd44:	431a      	orrs	r2, r3
    fd46:	798b      	ldrb	r3, [r1, #6]
    fd48:	041b      	lsls	r3, r3, #16
    fd4a:	431a      	orrs	r2, r3
    fd4c:	79cb      	ldrb	r3, [r1, #7]
    fd4e:	061b      	lsls	r3, r3, #24
    fd50:	4313      	orrs	r3, r2
    fd52:	d000      	beq.n	fd56 <SetJoinFailState+0x46>
    fd54:	4798      	blx	r3
    fd56:	2300      	movs	r3, #0
    fd58:	34d0      	adds	r4, #208	; 0xd0
    fd5a:	7023      	strb	r3, [r4, #0]
    fd5c:	210b      	movs	r1, #11
    fd5e:	4b04      	ldr	r3, [pc, #16]	; (fd70 <SetJoinFailState+0x60>)
    fd60:	2001      	movs	r0, #1
    fd62:	4798      	blx	r3
    fd64:	bd70      	pop	{r4, r5, r6, pc}
    fd66:	46c0      	nop			; (mov r8, r8)
    fd68:	200030e4 	.word	0x200030e4
    fd6c:	200033b8 	.word	0x200033b8
    fd70:	0000948d 	.word	0x0000948d

0000fd74 <ExecuteRxParamSetupReq>:
    fd74:	b5f0      	push	{r4, r5, r6, r7, lr}
    fd76:	b085      	sub	sp, #20
    fd78:	7805      	ldrb	r5, [r0, #0]
    fd7a:	0004      	movs	r4, r0
    fd7c:	1c41      	adds	r1, r0, #1
    fd7e:	2204      	movs	r2, #4
    fd80:	4b36      	ldr	r3, [pc, #216]	; (fe5c <ExecuteRxParamSetupReq+0xe8>)
    fd82:	a803      	add	r0, sp, #12
    fd84:	4798      	blx	r3
    fd86:	2264      	movs	r2, #100	; 0x64
    fd88:	9b03      	ldr	r3, [sp, #12]
    fd8a:	a903      	add	r1, sp, #12
    fd8c:	021b      	lsls	r3, r3, #8
    fd8e:	0a1b      	lsrs	r3, r3, #8
    fd90:	4353      	muls	r3, r2
    fd92:	9303      	str	r3, [sp, #12]
    fd94:	1d23      	adds	r3, r4, #4
    fd96:	9301      	str	r3, [sp, #4]
    fd98:	072b      	lsls	r3, r5, #28
    fd9a:	0f1b      	lsrs	r3, r3, #28
    fd9c:	b2da      	uxtb	r2, r3
    fd9e:	9200      	str	r2, [sp, #0]
    fda0:	aa02      	add	r2, sp, #8
    fda2:	1c96      	adds	r6, r2, #2
    fda4:	066d      	lsls	r5, r5, #25
    fda6:	7033      	strb	r3, [r6, #0]
    fda8:	1cd7      	adds	r7, r2, #3
    fdaa:	0f6d      	lsrs	r5, r5, #29
    fdac:	2001      	movs	r0, #1
    fdae:	4b2c      	ldr	r3, [pc, #176]	; (fe60 <ExecuteRxParamSetupReq+0xec>)
    fdb0:	703d      	strb	r5, [r7, #0]
    fdb2:	4798      	blx	r3
    fdb4:	4c2b      	ldr	r4, [pc, #172]	; (fe64 <ExecuteRxParamSetupReq+0xf0>)
    fdb6:	2808      	cmp	r0, #8
    fdb8:	d109      	bne.n	fdce <ExecuteRxParamSetupReq+0x5a>
    fdba:	0023      	movs	r3, r4
    fdbc:	33b8      	adds	r3, #184	; 0xb8
    fdbe:	781a      	ldrb	r2, [r3, #0]
    fdc0:	2303      	movs	r3, #3
    fdc2:	4353      	muls	r3, r2
    fdc4:	18e3      	adds	r3, r4, r3
    fdc6:	3370      	adds	r3, #112	; 0x70
    fdc8:	789a      	ldrb	r2, [r3, #2]
    fdca:	4310      	orrs	r0, r2
    fdcc:	7098      	strb	r0, [r3, #2]
    fdce:	0031      	movs	r1, r6
    fdd0:	200f      	movs	r0, #15
    fdd2:	4e23      	ldr	r6, [pc, #140]	; (fe60 <ExecuteRxParamSetupReq+0xec>)
    fdd4:	47b0      	blx	r6
    fdd6:	2808      	cmp	r0, #8
    fdd8:	d10a      	bne.n	fdf0 <ExecuteRxParamSetupReq+0x7c>
    fdda:	0023      	movs	r3, r4
    fddc:	33b8      	adds	r3, #184	; 0xb8
    fdde:	781a      	ldrb	r2, [r3, #0]
    fde0:	2303      	movs	r3, #3
    fde2:	4353      	muls	r3, r2
    fde4:	2210      	movs	r2, #16
    fde6:	18e3      	adds	r3, r4, r3
    fde8:	3370      	adds	r3, #112	; 0x70
    fdea:	7899      	ldrb	r1, [r3, #2]
    fdec:	430a      	orrs	r2, r1
    fdee:	709a      	strb	r2, [r3, #2]
    fdf0:	0039      	movs	r1, r7
    fdf2:	2018      	movs	r0, #24
    fdf4:	47b0      	blx	r6
    fdf6:	2808      	cmp	r0, #8
    fdf8:	d10a      	bne.n	fe10 <ExecuteRxParamSetupReq+0x9c>
    fdfa:	0023      	movs	r3, r4
    fdfc:	33b8      	adds	r3, #184	; 0xb8
    fdfe:	781a      	ldrb	r2, [r3, #0]
    fe00:	2303      	movs	r3, #3
    fe02:	4353      	muls	r3, r2
    fe04:	2220      	movs	r2, #32
    fe06:	18e3      	adds	r3, r4, r3
    fe08:	3370      	adds	r3, #112	; 0x70
    fe0a:	7899      	ldrb	r1, [r3, #2]
    fe0c:	430a      	orrs	r2, r1
    fe0e:	709a      	strb	r2, [r3, #2]
    fe10:	0023      	movs	r3, r4
    fe12:	33b8      	adds	r3, #184	; 0xb8
    fe14:	781a      	ldrb	r2, [r3, #0]
    fe16:	2303      	movs	r3, #3
    fe18:	4353      	muls	r3, r2
    fe1a:	18e3      	adds	r3, r4, r3
    fe1c:	3370      	adds	r3, #112	; 0x70
    fe1e:	789e      	ldrb	r6, [r3, #2]
    fe20:	06f3      	lsls	r3, r6, #27
    fe22:	d518      	bpl.n	fe56 <ExecuteRxParamSetupReq+0xe2>
    fe24:	0733      	lsls	r3, r6, #28
    fe26:	d516      	bpl.n	fe56 <ExecuteRxParamSetupReq+0xe2>
    fe28:	06b6      	lsls	r6, r6, #26
    fe2a:	0ff6      	lsrs	r6, r6, #31
    fe2c:	2e01      	cmp	r6, #1
    fe2e:	d112      	bne.n	fe56 <ExecuteRxParamSetupReq+0xe2>
    fe30:	0023      	movs	r3, r4
    fe32:	33ce      	adds	r3, #206	; 0xce
    fe34:	701d      	strb	r5, [r3, #0]
    fe36:	0031      	movs	r1, r6
    fe38:	0030      	movs	r0, r6
    fe3a:	4d0b      	ldr	r5, [pc, #44]	; (fe68 <ExecuteRxParamSetupReq+0xf4>)
    fe3c:	47a8      	blx	r5
    fe3e:	9900      	ldr	r1, [sp, #0]
    fe40:	9803      	ldr	r0, [sp, #12]
    fe42:	4b0a      	ldr	r3, [pc, #40]	; (fe6c <ExecuteRxParamSetupReq+0xf8>)
    fe44:	4798      	blx	r3
    fe46:	2340      	movs	r3, #64	; 0x40
    fe48:	345c      	adds	r4, #92	; 0x5c
    fe4a:	7862      	ldrb	r2, [r4, #1]
    fe4c:	210b      	movs	r1, #11
    fe4e:	4313      	orrs	r3, r2
    fe50:	7063      	strb	r3, [r4, #1]
    fe52:	0030      	movs	r0, r6
    fe54:	47a8      	blx	r5
    fe56:	9801      	ldr	r0, [sp, #4]
    fe58:	b005      	add	sp, #20
    fe5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fe5c:	000155bf 	.word	0x000155bf
    fe60:	0000c915 	.word	0x0000c915
    fe64:	200030e4 	.word	0x200030e4
    fe68:	0000948d 	.word	0x0000948d
    fe6c:	0000fc99 	.word	0x0000fc99

0000fe70 <ExecuteDutyCycle>:
    fe70:	b570      	push	{r4, r5, r6, lr}
    fe72:	7803      	ldrb	r3, [r0, #0]
    fe74:	1c46      	adds	r6, r0, #1
    fe76:	2b0f      	cmp	r3, #15
    fe78:	d80f      	bhi.n	fe9a <ExecuteDutyCycle+0x2a>
    fe7a:	4c09      	ldr	r4, [pc, #36]	; (fea0 <ExecuteDutyCycle+0x30>)
    fe7c:	210b      	movs	r1, #11
    fe7e:	0022      	movs	r2, r4
    fe80:	2000      	movs	r0, #0
    fe82:	3270      	adds	r2, #112	; 0x70
    fe84:	4d07      	ldr	r5, [pc, #28]	; (fea4 <ExecuteDutyCycle+0x34>)
    fe86:	7013      	strb	r3, [r2, #0]
    fe88:	47a8      	blx	r5
    fe8a:	2320      	movs	r3, #32
    fe8c:	345c      	adds	r4, #92	; 0x5c
    fe8e:	7862      	ldrb	r2, [r4, #1]
    fe90:	210b      	movs	r1, #11
    fe92:	4313      	orrs	r3, r2
    fe94:	7063      	strb	r3, [r4, #1]
    fe96:	2001      	movs	r0, #1
    fe98:	47a8      	blx	r5
    fe9a:	0030      	movs	r0, r6
    fe9c:	bd70      	pop	{r4, r5, r6, pc}
    fe9e:	46c0      	nop			; (mov r8, r8)
    fea0:	200030e4 	.word	0x200030e4
    fea4:	0000948d 	.word	0x0000948d

0000fea8 <ExecuteDlChannel>:
    fea8:	b5f0      	push	{r4, r5, r6, r7, lr}
    feaa:	b089      	sub	sp, #36	; 0x24
    feac:	7805      	ldrb	r5, [r0, #0]
    feae:	ab02      	add	r3, sp, #8
    feb0:	1c41      	adds	r1, r0, #1
    feb2:	0007      	movs	r7, r0
    feb4:	719d      	strb	r5, [r3, #6]
    feb6:	1d9e      	adds	r6, r3, #6
    feb8:	2204      	movs	r2, #4
    feba:	4b23      	ldr	r3, [pc, #140]	; (ff48 <ExecuteDlChannel+0xa0>)
    febc:	a805      	add	r0, sp, #20
    febe:	4798      	blx	r3
    fec0:	9b05      	ldr	r3, [sp, #20]
    fec2:	a904      	add	r1, sp, #16
    fec4:	021c      	lsls	r4, r3, #8
    fec6:	2364      	movs	r3, #100	; 0x64
    fec8:	0a24      	lsrs	r4, r4, #8
    feca:	435c      	muls	r4, r3
    fecc:	1d3b      	adds	r3, r7, #4
    fece:	9301      	str	r3, [sp, #4]
    fed0:	2301      	movs	r3, #1
    fed2:	2015      	movs	r0, #21
    fed4:	704b      	strb	r3, [r1, #1]
    fed6:	4b1d      	ldr	r3, [pc, #116]	; (ff4c <ExecuteDlChannel+0xa4>)
    fed8:	9405      	str	r4, [sp, #20]
    feda:	700d      	strb	r5, [r1, #0]
    fedc:	4798      	blx	r3
    fede:	2808      	cmp	r0, #8
    fee0:	d12f      	bne.n	ff42 <ExecuteDlChannel+0x9a>
    fee2:	ab02      	add	r3, sp, #8
    fee4:	1ddd      	adds	r5, r3, #7
    fee6:	2300      	movs	r3, #0
    fee8:	702b      	strb	r3, [r5, #0]
    feea:	7833      	ldrb	r3, [r6, #0]
    feec:	af06      	add	r7, sp, #24
    feee:	713b      	strb	r3, [r7, #4]
    fef0:	002a      	movs	r2, r5
    fef2:	0031      	movs	r1, r6
    fef4:	300e      	adds	r0, #14
    fef6:	4b16      	ldr	r3, [pc, #88]	; (ff50 <ExecuteDlChannel+0xa8>)
    fef8:	9406      	str	r4, [sp, #24]
    fefa:	4798      	blx	r3
    fefc:	280a      	cmp	r0, #10
    fefe:	d00d      	beq.n	ff1c <ExecuteDlChannel+0x74>
    ff00:	782a      	ldrb	r2, [r5, #0]
    ff02:	2a01      	cmp	r2, #1
    ff04:	d10a      	bne.n	ff1c <ExecuteDlChannel+0x74>
    ff06:	4b13      	ldr	r3, [pc, #76]	; (ff54 <ExecuteDlChannel+0xac>)
    ff08:	0019      	movs	r1, r3
    ff0a:	31b8      	adds	r1, #184	; 0xb8
    ff0c:	7808      	ldrb	r0, [r1, #0]
    ff0e:	2103      	movs	r1, #3
    ff10:	4341      	muls	r1, r0
    ff12:	185b      	adds	r3, r3, r1
    ff14:	3370      	adds	r3, #112	; 0x70
    ff16:	78d9      	ldrb	r1, [r3, #3]
    ff18:	430a      	orrs	r2, r1
    ff1a:	70da      	strb	r2, [r3, #3]
    ff1c:	0039      	movs	r1, r7
    ff1e:	2034      	movs	r0, #52	; 0x34
    ff20:	4b0d      	ldr	r3, [pc, #52]	; (ff58 <ExecuteDlChannel+0xb0>)
    ff22:	4798      	blx	r3
    ff24:	2808      	cmp	r0, #8
    ff26:	d10c      	bne.n	ff42 <ExecuteDlChannel+0x9a>
    ff28:	4b0a      	ldr	r3, [pc, #40]	; (ff54 <ExecuteDlChannel+0xac>)
    ff2a:	001a      	movs	r2, r3
    ff2c:	32b8      	adds	r2, #184	; 0xb8
    ff2e:	7811      	ldrb	r1, [r2, #0]
    ff30:	2203      	movs	r2, #3
    ff32:	434a      	muls	r2, r1
    ff34:	189b      	adds	r3, r3, r2
    ff36:	2280      	movs	r2, #128	; 0x80
    ff38:	3370      	adds	r3, #112	; 0x70
    ff3a:	7899      	ldrb	r1, [r3, #2]
    ff3c:	4252      	negs	r2, r2
    ff3e:	430a      	orrs	r2, r1
    ff40:	709a      	strb	r2, [r3, #2]
    ff42:	9801      	ldr	r0, [sp, #4]
    ff44:	b009      	add	sp, #36	; 0x24
    ff46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ff48:	000155bf 	.word	0x000155bf
    ff4c:	0000c915 	.word	0x0000c915
    ff50:	0000c8f9 	.word	0x0000c8f9
    ff54:	200030e4 	.word	0x200030e4
    ff58:	0000c931 	.word	0x0000c931

0000ff5c <ExecuteTxParamSetup>:
    ff5c:	220f      	movs	r2, #15
    ff5e:	b513      	push	{r0, r1, r4, lr}
    ff60:	7803      	ldrb	r3, [r0, #0]
    ff62:	4c0f      	ldr	r4, [pc, #60]	; (ffa0 <ExecuteTxParamSetup+0x44>)
    ff64:	401a      	ands	r2, r3
    ff66:	5ca2      	ldrb	r2, [r4, r2]
    ff68:	2401      	movs	r4, #1
    ff6a:	a901      	add	r1, sp, #4
    ff6c:	700a      	strb	r2, [r1, #0]
    ff6e:	111a      	asrs	r2, r3, #4
    ff70:	115b      	asrs	r3, r3, #5
    ff72:	4023      	ands	r3, r4
    ff74:	40a3      	lsls	r3, r4
    ff76:	4022      	ands	r2, r4
    ff78:	4313      	orrs	r3, r2
    ff7a:	704b      	strb	r3, [r1, #1]
    ff7c:	1904      	adds	r4, r0, r4
    ff7e:	4b09      	ldr	r3, [pc, #36]	; (ffa4 <ExecuteTxParamSetup+0x48>)
    ff80:	2035      	movs	r0, #53	; 0x35
    ff82:	4798      	blx	r3
    ff84:	2808      	cmp	r0, #8
    ff86:	d009      	beq.n	ff9c <ExecuteTxParamSetup+0x40>
    ff88:	4b07      	ldr	r3, [pc, #28]	; (ffa8 <ExecuteTxParamSetup+0x4c>)
    ff8a:	001a      	movs	r2, r3
    ff8c:	32b8      	adds	r2, #184	; 0xb8
    ff8e:	7811      	ldrb	r1, [r2, #0]
    ff90:	2203      	movs	r2, #3
    ff92:	434a      	muls	r2, r1
    ff94:	189b      	adds	r3, r3, r2
    ff96:	22ff      	movs	r2, #255	; 0xff
    ff98:	3371      	adds	r3, #113	; 0x71
    ff9a:	701a      	strb	r2, [r3, #0]
    ff9c:	0020      	movs	r0, r4
    ff9e:	bd16      	pop	{r1, r2, r4, pc}
    ffa0:	00017bb4 	.word	0x00017bb4
    ffa4:	0000c931 	.word	0x0000c931
    ffa8:	200030e4 	.word	0x200030e4

0000ffac <ExecuteLinkAdr>:
    ffac:	220f      	movs	r2, #15
    ffae:	b5f0      	push	{r4, r5, r6, r7, lr}
    ffb0:	0005      	movs	r5, r0
    ffb2:	7803      	ldrb	r3, [r0, #0]
    ffb4:	b089      	sub	sp, #36	; 0x24
    ffb6:	401a      	ands	r2, r3
    ffb8:	a905      	add	r1, sp, #20
    ffba:	700a      	strb	r2, [r1, #0]
    ffbc:	24b8      	movs	r4, #184	; 0xb8
    ffbe:	aa04      	add	r2, sp, #16
    ffc0:	1d96      	adds	r6, r2, #6
    ffc2:	091b      	lsrs	r3, r3, #4
    ffc4:	7153      	strb	r3, [r2, #5]
    ffc6:	1c41      	adds	r1, r0, #1
    ffc8:	2202      	movs	r2, #2
    ffca:	0030      	movs	r0, r6
    ffcc:	4b38      	ldr	r3, [pc, #224]	; (100b0 <ExecuteLinkAdr+0x104>)
    ffce:	4798      	blx	r3
    ffd0:	2201      	movs	r2, #1
    ffd2:	1d2b      	adds	r3, r5, #4
    ffd4:	9303      	str	r3, [sp, #12]
    ffd6:	78eb      	ldrb	r3, [r5, #3]
    ffd8:	4f36      	ldr	r7, [pc, #216]	; (100b4 <ExecuteLinkAdr+0x108>)
    ffda:	065b      	lsls	r3, r3, #25
    ffdc:	0f5b      	lsrs	r3, r3, #29
    ffde:	34ff      	adds	r4, #255	; 0xff
    ffe0:	9300      	str	r3, [sp, #0]
    ffe2:	5d3b      	ldrb	r3, [r7, r4]
    ffe4:	a906      	add	r1, sp, #24
    ffe6:	4393      	bics	r3, r2
    ffe8:	1892      	adds	r2, r2, r2
    ffea:	4393      	bics	r3, r2
    ffec:	3202      	adds	r2, #2
    ffee:	4393      	bics	r3, r2
    fff0:	553b      	strb	r3, [r7, r4]
    fff2:	466b      	mov	r3, sp
    fff4:	781b      	ldrb	r3, [r3, #0]
    fff6:	8836      	ldrh	r6, [r6, #0]
    fff8:	700b      	strb	r3, [r1, #0]
    fffa:	2038      	movs	r0, #56	; 0x38
    fffc:	4b2e      	ldr	r3, [pc, #184]	; (100b8 <ExecuteLinkAdr+0x10c>)
    fffe:	804e      	strh	r6, [r1, #2]
   10000:	4798      	blx	r3
   10002:	2808      	cmp	r0, #8
   10004:	d116      	bne.n	10034 <ExecuteLinkAdr+0x88>
   10006:	466b      	mov	r3, sp
   10008:	781b      	ldrb	r3, [r3, #0]
   1000a:	a907      	add	r1, sp, #28
   1000c:	708b      	strb	r3, [r1, #2]
   1000e:	3014      	adds	r0, #20
   10010:	4b2a      	ldr	r3, [pc, #168]	; (100bc <ExecuteLinkAdr+0x110>)
   10012:	800e      	strh	r6, [r1, #0]
   10014:	4798      	blx	r3
   10016:	2201      	movs	r2, #1
   10018:	5d3b      	ldrb	r3, [r7, r4]
   1001a:	2010      	movs	r0, #16
   1001c:	4313      	orrs	r3, r2
   1001e:	553b      	strb	r3, [r7, r4]
   10020:	ab04      	add	r3, sp, #16
   10022:	1d59      	adds	r1, r3, #5
   10024:	4b24      	ldr	r3, [pc, #144]	; (100b8 <ExecuteLinkAdr+0x10c>)
   10026:	4798      	blx	r3
   10028:	2808      	cmp	r0, #8
   1002a:	d103      	bne.n	10034 <ExecuteLinkAdr+0x88>
   1002c:	2202      	movs	r2, #2
   1002e:	5d3b      	ldrb	r3, [r7, r4]
   10030:	4313      	orrs	r3, r2
   10032:	553b      	strb	r3, [r7, r4]
   10034:	af05      	add	r7, sp, #20
   10036:	4b20      	ldr	r3, [pc, #128]	; (100b8 <ExecuteLinkAdr+0x10c>)
   10038:	0039      	movs	r1, r7
   1003a:	201d      	movs	r0, #29
   1003c:	4798      	blx	r3
   1003e:	4b1d      	ldr	r3, [pc, #116]	; (100b4 <ExecuteLinkAdr+0x108>)
   10040:	2808      	cmp	r0, #8
   10042:	d103      	bne.n	1004c <ExecuteLinkAdr+0xa0>
   10044:	2204      	movs	r2, #4
   10046:	5d19      	ldrb	r1, [r3, r4]
   10048:	430a      	orrs	r2, r1
   1004a:	551a      	strb	r2, [r3, r4]
   1004c:	2207      	movs	r2, #7
   1004e:	5d19      	ldrb	r1, [r3, r4]
   10050:	4011      	ands	r1, r2
   10052:	4291      	cmp	r1, r2
   10054:	d122      	bne.n	1009c <ExecuteLinkAdr+0xf0>
   10056:	22bc      	movs	r2, #188	; 0xbc
   10058:	32ff      	adds	r2, #255	; 0xff
   1005a:	549e      	strb	r6, [r3, r2]
   1005c:	001a      	movs	r2, r3
   1005e:	32bc      	adds	r2, #188	; 0xbc
   10060:	32ff      	adds	r2, #255	; 0xff
   10062:	0a36      	lsrs	r6, r6, #8
   10064:	7056      	strb	r6, [r2, #1]
   10066:	aa04      	add	r2, sp, #16
   10068:	7950      	ldrb	r0, [r2, #5]
   1006a:	22dc      	movs	r2, #220	; 0xdc
   1006c:	0052      	lsls	r2, r2, #1
   1006e:	5498      	strb	r0, [r3, r2]
   10070:	20be      	movs	r0, #190	; 0xbe
   10072:	2470      	movs	r4, #112	; 0x70
   10074:	78ea      	ldrb	r2, [r5, #3]
   10076:	30ff      	adds	r0, #255	; 0xff
   10078:	0912      	lsrs	r2, r2, #4
   1007a:	400a      	ands	r2, r1
   1007c:	5c19      	ldrb	r1, [r3, r0]
   1007e:	0112      	lsls	r2, r2, #4
   10080:	43a1      	bics	r1, r4
   10082:	430a      	orrs	r2, r1
   10084:	541a      	strb	r2, [r3, r0]
   10086:	78e9      	ldrb	r1, [r5, #3]
   10088:	3c61      	subs	r4, #97	; 0x61
   1008a:	b2d2      	uxtb	r2, r2
   1008c:	4021      	ands	r1, r4
   1008e:	43a2      	bics	r2, r4
   10090:	430a      	orrs	r2, r1
   10092:	541a      	strb	r2, [r3, r0]
   10094:	22ba      	movs	r2, #186	; 0xba
   10096:	7839      	ldrb	r1, [r7, #0]
   10098:	32ff      	adds	r2, #255	; 0xff
   1009a:	5499      	strb	r1, [r3, r2]
   1009c:	22dd      	movs	r2, #221	; 0xdd
   1009e:	4905      	ldr	r1, [pc, #20]	; (100b4 <ExecuteLinkAdr+0x108>)
   100a0:	0052      	lsls	r2, r2, #1
   100a2:	5c8b      	ldrb	r3, [r1, r2]
   100a4:	9803      	ldr	r0, [sp, #12]
   100a6:	3301      	adds	r3, #1
   100a8:	548b      	strb	r3, [r1, r2]
   100aa:	b009      	add	sp, #36	; 0x24
   100ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   100ae:	46c0      	nop			; (mov r8, r8)
   100b0:	000155bf 	.word	0x000155bf
   100b4:	200030e4 	.word	0x200030e4
   100b8:	0000c915 	.word	0x0000c915
   100bc:	0000c931 	.word	0x0000c931

000100c0 <PrepareJoinRequestFrame>:
   100c0:	2210      	movs	r2, #16
   100c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   100c4:	4d1b      	ldr	r5, [pc, #108]	; (10134 <PrepareJoinRequestFrame+0x74>)
   100c6:	4b1c      	ldr	r3, [pc, #112]	; (10138 <PrepareJoinRequestFrame+0x78>)
   100c8:	32ff      	adds	r2, #255	; 0xff
   100ca:	2100      	movs	r1, #0
   100cc:	0028      	movs	r0, r5
   100ce:	4798      	blx	r3
   100d0:	2300      	movs	r3, #0
   100d2:	203c      	movs	r0, #60	; 0x3c
   100d4:	4c19      	ldr	r4, [pc, #100]	; (1013c <PrepareJoinRequestFrame+0x7c>)
   100d6:	702b      	strb	r3, [r5, #0]
   100d8:	1ac1      	subs	r1, r0, r3
   100da:	5c61      	ldrb	r1, [r4, r1]
   100dc:	18ea      	adds	r2, r5, r3
   100de:	3301      	adds	r3, #1
   100e0:	7051      	strb	r1, [r2, #1]
   100e2:	2b08      	cmp	r3, #8
   100e4:	d1f8      	bne.n	100d8 <PrepareJoinRequestFrame+0x18>
   100e6:	2300      	movs	r3, #0
   100e8:	2044      	movs	r0, #68	; 0x44
   100ea:	1ac1      	subs	r1, r0, r3
   100ec:	5c61      	ldrb	r1, [r4, r1]
   100ee:	18ea      	adds	r2, r5, r3
   100f0:	3301      	adds	r3, #1
   100f2:	7251      	strb	r1, [r2, #9]
   100f4:	2b08      	cmp	r3, #8
   100f6:	d1f8      	bne.n	100ea <PrepareJoinRequestFrame+0x2a>
   100f8:	4b11      	ldr	r3, [pc, #68]	; (10140 <PrepareJoinRequestFrame+0x80>)
   100fa:	4798      	blx	r3
   100fc:	4b11      	ldr	r3, [pc, #68]	; (10144 <PrepareJoinRequestFrame+0x84>)
   100fe:	4912      	ldr	r1, [pc, #72]	; (10148 <PrepareJoinRequestFrame+0x88>)
   10100:	4798      	blx	r3
   10102:	34a4      	adds	r4, #164	; 0xa4
   10104:	8021      	strh	r1, [r4, #0]
   10106:	2202      	movs	r2, #2
   10108:	0021      	movs	r1, r4
   1010a:	4810      	ldr	r0, [pc, #64]	; (1014c <PrepareJoinRequestFrame+0x8c>)
   1010c:	4c10      	ldr	r4, [pc, #64]	; (10150 <PrepareJoinRequestFrame+0x90>)
   1010e:	47a0      	blx	r4
   10110:	4e10      	ldr	r6, [pc, #64]	; (10154 <PrepareJoinRequestFrame+0x94>)
   10112:	2313      	movs	r3, #19
   10114:	0031      	movs	r1, r6
   10116:	002a      	movs	r2, r5
   10118:	480f      	ldr	r0, [pc, #60]	; (10158 <PrepareJoinRequestFrame+0x98>)
   1011a:	4d10      	ldr	r5, [pc, #64]	; (1015c <PrepareJoinRequestFrame+0x9c>)
   1011c:	47a8      	blx	r5
   1011e:	0031      	movs	r1, r6
   10120:	2204      	movs	r2, #4
   10122:	a801      	add	r0, sp, #4
   10124:	47a0      	blx	r4
   10126:	2204      	movs	r2, #4
   10128:	a901      	add	r1, sp, #4
   1012a:	480d      	ldr	r0, [pc, #52]	; (10160 <PrepareJoinRequestFrame+0xa0>)
   1012c:	47a0      	blx	r4
   1012e:	2017      	movs	r0, #23
   10130:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   10132:	46c0      	nop			; (mov r8, r8)
   10134:	200032a4 	.word	0x200032a4
   10138:	000155d1 	.word	0x000155d1
   1013c:	200030e4 	.word	0x200030e4
   10140:	00015d05 	.word	0x00015d05
   10144:	0001263d 	.word	0x0001263d
   10148:	0000ffff 	.word	0x0000ffff
   1014c:	200032b5 	.word	0x200032b5
   10150:	000155bf 	.word	0x000155bf
   10154:	2000206d 	.word	0x2000206d
   10158:	20003109 	.word	0x20003109
   1015c:	00011c39 	.word	0x00011c39
   10160:	200032b7 	.word	0x200032b7

00010164 <ConfigureRadioRx>:
   10164:	b5f0      	push	{r4, r5, r6, r7, lr}
   10166:	b087      	sub	sp, #28
   10168:	466b      	mov	r3, sp
   1016a:	2600      	movs	r6, #0
   1016c:	1ddc      	adds	r4, r3, #7
   1016e:	71d8      	strb	r0, [r3, #7]
   10170:	729e      	strb	r6, [r3, #10]
   10172:	466a      	mov	r2, sp
   10174:	2301      	movs	r3, #1
   10176:	72d3      	strb	r3, [r2, #11]
   10178:	2215      	movs	r2, #21
   1017a:	ad03      	add	r5, sp, #12
   1017c:	4f11      	ldr	r7, [pc, #68]	; (101c4 <ConfigureRadioRx+0x60>)
   1017e:	9100      	str	r1, [sp, #0]
   10180:	446a      	add	r2, sp
   10182:	0021      	movs	r1, r4
   10184:	2023      	movs	r0, #35	; 0x23
   10186:	80ae      	strh	r6, [r5, #4]
   10188:	47b8      	blx	r7
   1018a:	2216      	movs	r2, #22
   1018c:	0021      	movs	r1, r4
   1018e:	446a      	add	r2, sp
   10190:	2024      	movs	r0, #36	; 0x24
   10192:	47b8      	blx	r7
   10194:	2217      	movs	r2, #23
   10196:	0021      	movs	r1, r4
   10198:	446a      	add	r2, sp
   1019a:	2025      	movs	r0, #37	; 0x25
   1019c:	47b8      	blx	r7
   1019e:	9b00      	ldr	r3, [sp, #0]
   101a0:	0028      	movs	r0, r5
   101a2:	9303      	str	r3, [sp, #12]
   101a4:	4b08      	ldr	r3, [pc, #32]	; (101c8 <ConfigureRadioRx+0x64>)
   101a6:	80ae      	strh	r6, [r5, #4]
   101a8:	4798      	blx	r3
   101aa:	230a      	movs	r3, #10
   101ac:	446b      	add	r3, sp
   101ae:	0019      	movs	r1, r3
   101b0:	4c06      	ldr	r4, [pc, #24]	; (101cc <ConfigureRadioRx+0x68>)
   101b2:	2014      	movs	r0, #20
   101b4:	47a0      	blx	r4
   101b6:	230b      	movs	r3, #11
   101b8:	446b      	add	r3, sp
   101ba:	0019      	movs	r1, r3
   101bc:	2006      	movs	r0, #6
   101be:	47a0      	blx	r4
   101c0:	b007      	add	sp, #28
   101c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   101c4:	0000c8f9 	.word	0x0000c8f9
   101c8:	0000f965 	.word	0x0000f965
   101cc:	0000dd11 	.word	0x0000dd11

000101d0 <ConfigureRadioTx>:
   101d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   101d2:	2517      	movs	r5, #23
   101d4:	2300      	movs	r3, #0
   101d6:	2616      	movs	r6, #22
   101d8:	2701      	movs	r7, #1
   101da:	b087      	sub	sp, #28
   101dc:	ac01      	add	r4, sp, #4
   101de:	446d      	add	r5, sp
   101e0:	9001      	str	r0, [sp, #4]
   101e2:	702b      	strb	r3, [r5, #0]
   101e4:	0020      	movs	r0, r4
   101e6:	4b10      	ldr	r3, [pc, #64]	; (10228 <ConfigureRadioTx+0x58>)
   101e8:	446e      	add	r6, sp
   101ea:	9102      	str	r1, [sp, #8]
   101ec:	9203      	str	r2, [sp, #12]
   101ee:	7037      	strb	r7, [r6, #0]
   101f0:	4798      	blx	r3
   101f2:	79e3      	ldrb	r3, [r4, #7]
   101f4:	4c0d      	ldr	r4, [pc, #52]	; (1022c <ConfigureRadioTx+0x5c>)
   101f6:	2b00      	cmp	r3, #0
   101f8:	d00b      	beq.n	10212 <ConfigureRadioTx+0x42>
   101fa:	23db      	movs	r3, #219	; 0xdb
   101fc:	4a0c      	ldr	r2, [pc, #48]	; (10230 <ConfigureRadioTx+0x60>)
   101fe:	005b      	lsls	r3, r3, #1
   10200:	54d7      	strb	r7, [r2, r3]
   10202:	490c      	ldr	r1, [pc, #48]	; (10234 <ConfigureRadioTx+0x64>)
   10204:	200b      	movs	r0, #11
   10206:	4b0c      	ldr	r3, [pc, #48]	; (10238 <ConfigureRadioTx+0x68>)
   10208:	4798      	blx	r3
   1020a:	210a      	movs	r1, #10
   1020c:	200b      	movs	r0, #11
   1020e:	4469      	add	r1, sp
   10210:	47a0      	blx	r4
   10212:	a903      	add	r1, sp, #12
   10214:	2004      	movs	r0, #4
   10216:	47a0      	blx	r4
   10218:	0031      	movs	r1, r6
   1021a:	2014      	movs	r0, #20
   1021c:	47a0      	blx	r4
   1021e:	0029      	movs	r1, r5
   10220:	2006      	movs	r0, #6
   10222:	47a0      	blx	r4
   10224:	b007      	add	sp, #28
   10226:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10228:	0000f965 	.word	0x0000f965
   1022c:	0000dd11 	.word	0x0000dd11
   10230:	200030e4 	.word	0x200030e4
   10234:	20003299 	.word	0x20003299
   10238:	0000dc25 	.word	0x0000dc25

0001023c <LorawanGetChAndInitiateRadioTransmit>:
   1023c:	2301      	movs	r3, #1
   1023e:	b530      	push	{r4, r5, lr}
   10240:	4c46      	ldr	r4, [pc, #280]	; (1035c <LorawanGetChAndInitiateRadioTransmit+0x120>)
   10242:	b089      	sub	sp, #36	; 0x24
   10244:	a902      	add	r1, sp, #8
   10246:	700b      	strb	r3, [r1, #0]
   10248:	0023      	movs	r3, r4
   1024a:	33c1      	adds	r3, #193	; 0xc1
   1024c:	781b      	ldrb	r3, [r3, #0]
   1024e:	704b      	strb	r3, [r1, #1]
   10250:	0023      	movs	r3, r4
   10252:	33bf      	adds	r3, #191	; 0xbf
   10254:	781b      	ldrb	r3, [r3, #0]
   10256:	708b      	strb	r3, [r1, #2]
   10258:	0023      	movs	r3, r4
   1025a:	33d4      	adds	r3, #212	; 0xd4
   1025c:	781b      	ldrb	r3, [r3, #0]
   1025e:	2b01      	cmp	r3, #1
   10260:	d108      	bne.n	10274 <LorawanGetChAndInitiateRadioTransmit+0x38>
   10262:	0020      	movs	r0, r4
   10264:	220e      	movs	r2, #14
   10266:	305c      	adds	r0, #92	; 0x5c
   10268:	7803      	ldrb	r3, [r0, #0]
   1026a:	4393      	bics	r3, r2
   1026c:	001a      	movs	r2, r3
   1026e:	230c      	movs	r3, #12
   10270:	4313      	orrs	r3, r2
   10272:	7003      	strb	r3, [r0, #0]
   10274:	aa05      	add	r2, sp, #20
   10276:	202f      	movs	r0, #47	; 0x2f
   10278:	4d39      	ldr	r5, [pc, #228]	; (10360 <LorawanGetChAndInitiateRadioTransmit+0x124>)
   1027a:	47a8      	blx	r5
   1027c:	0023      	movs	r3, r4
   1027e:	2808      	cmp	r0, #8
   10280:	d132      	bne.n	102e8 <LorawanGetChAndInitiateRadioTransmit+0xac>
   10282:	33d4      	adds	r3, #212	; 0xd4
   10284:	781b      	ldrb	r3, [r3, #0]
   10286:	ad03      	add	r5, sp, #12
   10288:	2b04      	cmp	r3, #4
   1028a:	d104      	bne.n	10296 <LorawanGetChAndInitiateRadioTransmit+0x5a>
   1028c:	3b03      	subs	r3, #3
   1028e:	702b      	strb	r3, [r5, #0]
   10290:	0028      	movs	r0, r5
   10292:	4b34      	ldr	r3, [pc, #208]	; (10364 <LorawanGetChAndInitiateRadioTransmit+0x128>)
   10294:	4798      	blx	r3
   10296:	9805      	ldr	r0, [sp, #20]
   10298:	4b33      	ldr	r3, [pc, #204]	; (10368 <LorawanGetChAndInitiateRadioTransmit+0x12c>)
   1029a:	9906      	ldr	r1, [sp, #24]
   1029c:	9a07      	ldr	r2, [sp, #28]
   1029e:	4798      	blx	r3
   102a0:	0023      	movs	r3, r4
   102a2:	33a6      	adds	r3, #166	; 0xa6
   102a4:	881b      	ldrh	r3, [r3, #0]
   102a6:	0028      	movs	r0, r5
   102a8:	702b      	strb	r3, [r5, #0]
   102aa:	4b30      	ldr	r3, [pc, #192]	; (1036c <LorawanGetChAndInitiateRadioTransmit+0x130>)
   102ac:	606b      	str	r3, [r5, #4]
   102ae:	4b30      	ldr	r3, [pc, #192]	; (10370 <LorawanGetChAndInitiateRadioTransmit+0x134>)
   102b0:	4798      	blx	r3
   102b2:	2800      	cmp	r0, #0
   102b4:	d109      	bne.n	102ca <LorawanGetChAndInitiateRadioTransmit+0x8e>
   102b6:	220e      	movs	r2, #14
   102b8:	345c      	adds	r4, #92	; 0x5c
   102ba:	7823      	ldrb	r3, [r4, #0]
   102bc:	4393      	bics	r3, r2
   102be:	001a      	movs	r2, r3
   102c0:	2302      	movs	r3, #2
   102c2:	4313      	orrs	r3, r2
   102c4:	7023      	strb	r3, [r4, #0]
   102c6:	b009      	add	sp, #36	; 0x24
   102c8:	bd30      	pop	{r4, r5, pc}
   102ca:	23c0      	movs	r3, #192	; 0xc0
   102cc:	2200      	movs	r2, #0
   102ce:	33ff      	adds	r3, #255	; 0xff
   102d0:	5ce3      	ldrb	r3, [r4, r3]
   102d2:	4928      	ldr	r1, [pc, #160]	; (10374 <LorawanGetChAndInitiateRadioTransmit+0x138>)
   102d4:	34d3      	adds	r4, #211	; 0xd3
   102d6:	4359      	muls	r1, r3
   102d8:	4b27      	ldr	r3, [pc, #156]	; (10378 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
   102da:	7820      	ldrb	r0, [r4, #0]
   102dc:	18c9      	adds	r1, r1, r3
   102de:	4b27      	ldr	r3, [pc, #156]	; (1037c <LorawanGetChAndInitiateRadioTransmit+0x140>)
   102e0:	9200      	str	r2, [sp, #0]
   102e2:	4c27      	ldr	r4, [pc, #156]	; (10380 <LorawanGetChAndInitiateRadioTransmit+0x144>)
   102e4:	47a0      	blx	r4
   102e6:	e7ee      	b.n	102c6 <LorawanGetChAndInitiateRadioTransmit+0x8a>
   102e8:	33f0      	adds	r3, #240	; 0xf0
   102ea:	781b      	ldrb	r3, [r3, #0]
   102ec:	079a      	lsls	r2, r3, #30
   102ee:	d516      	bpl.n	1031e <LorawanGetChAndInitiateRadioTransmit+0xe2>
   102f0:	aa03      	add	r2, sp, #12
   102f2:	4924      	ldr	r1, [pc, #144]	; (10384 <LorawanGetChAndInitiateRadioTransmit+0x148>)
   102f4:	2026      	movs	r0, #38	; 0x26
   102f6:	47a8      	blx	r5
   102f8:	9b03      	ldr	r3, [sp, #12]
   102fa:	1c5a      	adds	r2, r3, #1
   102fc:	d001      	beq.n	10302 <LorawanGetChAndInitiateRadioTransmit+0xc6>
   102fe:	3314      	adds	r3, #20
   10300:	9303      	str	r3, [sp, #12]
   10302:	23c0      	movs	r3, #192	; 0xc0
   10304:	21fa      	movs	r1, #250	; 0xfa
   10306:	33ff      	adds	r3, #255	; 0xff
   10308:	5ce3      	ldrb	r3, [r4, r3]
   1030a:	9a03      	ldr	r2, [sp, #12]
   1030c:	0089      	lsls	r1, r1, #2
   1030e:	1ad3      	subs	r3, r2, r3
   10310:	2200      	movs	r2, #0
   10312:	4359      	muls	r1, r3
   10314:	34c9      	adds	r4, #201	; 0xc9
   10316:	7820      	ldrb	r0, [r4, #0]
   10318:	9200      	str	r2, [sp, #0]
   1031a:	4b1b      	ldr	r3, [pc, #108]	; (10388 <LorawanGetChAndInitiateRadioTransmit+0x14c>)
   1031c:	e7e1      	b.n	102e2 <LorawanGetChAndInitiateRadioTransmit+0xa6>
   1031e:	075b      	lsls	r3, r3, #29
   10320:	d508      	bpl.n	10334 <LorawanGetChAndInitiateRadioTransmit+0xf8>
   10322:	aa03      	add	r2, sp, #12
   10324:	4917      	ldr	r1, [pc, #92]	; (10384 <LorawanGetChAndInitiateRadioTransmit+0x148>)
   10326:	2033      	movs	r0, #51	; 0x33
   10328:	47a8      	blx	r5
   1032a:	9b03      	ldr	r3, [sp, #12]
   1032c:	1c5a      	adds	r2, r3, #1
   1032e:	d0e8      	beq.n	10302 <LorawanGetChAndInitiateRadioTransmit+0xc6>
   10330:	3301      	adds	r3, #1
   10332:	e7e5      	b.n	10300 <LorawanGetChAndInitiateRadioTransmit+0xc4>
   10334:	0023      	movs	r3, r4
   10336:	2201      	movs	r2, #1
   10338:	336c      	adds	r3, #108	; 0x6c
   1033a:	781b      	ldrb	r3, [r3, #0]
   1033c:	401a      	ands	r2, r3
   1033e:	d109      	bne.n	10354 <LorawanGetChAndInitiateRadioTransmit+0x118>
   10340:	23c0      	movs	r3, #192	; 0xc0
   10342:	33ff      	adds	r3, #255	; 0xff
   10344:	5ce3      	ldrb	r3, [r4, r3]
   10346:	490b      	ldr	r1, [pc, #44]	; (10374 <LorawanGetChAndInitiateRadioTransmit+0x138>)
   10348:	34c9      	adds	r4, #201	; 0xc9
   1034a:	4359      	muls	r1, r3
   1034c:	4b0a      	ldr	r3, [pc, #40]	; (10378 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
   1034e:	7820      	ldrb	r0, [r4, #0]
   10350:	18c9      	adds	r1, r1, r3
   10352:	e7e1      	b.n	10318 <LorawanGetChAndInitiateRadioTransmit+0xdc>
   10354:	4b0d      	ldr	r3, [pc, #52]	; (1038c <LorawanGetChAndInitiateRadioTransmit+0x150>)
   10356:	4798      	blx	r3
   10358:	e7b5      	b.n	102c6 <LorawanGetChAndInitiateRadioTransmit+0x8a>
   1035a:	46c0      	nop			; (mov r8, r8)
   1035c:	200030e4 	.word	0x200030e4
   10360:	0000c8f9 	.word	0x0000c8f9
   10364:	0000ef35 	.word	0x0000ef35
   10368:	000101d1 	.word	0x000101d1
   1036c:	200032b4 	.word	0x200032b4
   10370:	0000e661 	.word	0x0000e661
   10374:	fffffc18 	.word	0xfffffc18
   10378:	001e8480 	.word	0x001e8480
   1037c:	00010391 	.word	0x00010391
   10380:	0000cd65 	.word	0x0000cd65
   10384:	200031a3 	.word	0x200031a3
   10388:	00010445 	.word	0x00010445
   1038c:	0000fc49 	.word	0x0000fc49

00010390 <TransmissionErrorCallback>:
   10390:	b530      	push	{r4, r5, lr}
   10392:	4c22      	ldr	r4, [pc, #136]	; (1041c <TransmissionErrorCallback+0x8c>)
   10394:	2501      	movs	r5, #1
   10396:	0023      	movs	r3, r4
   10398:	b08b      	sub	sp, #44	; 0x2c
   1039a:	a903      	add	r1, sp, #12
   1039c:	700d      	strb	r5, [r1, #0]
   1039e:	33c1      	adds	r3, #193	; 0xc1
   103a0:	781b      	ldrb	r3, [r3, #0]
   103a2:	aa07      	add	r2, sp, #28
   103a4:	704b      	strb	r3, [r1, #1]
   103a6:	0023      	movs	r3, r4
   103a8:	33bf      	adds	r3, #191	; 0xbf
   103aa:	781b      	ldrb	r3, [r3, #0]
   103ac:	202f      	movs	r0, #47	; 0x2f
   103ae:	708b      	strb	r3, [r1, #2]
   103b0:	4b1b      	ldr	r3, [pc, #108]	; (10420 <TransmissionErrorCallback+0x90>)
   103b2:	4798      	blx	r3
   103b4:	2808      	cmp	r0, #8
   103b6:	d121      	bne.n	103fc <TransmissionErrorCallback+0x6c>
   103b8:	a804      	add	r0, sp, #16
   103ba:	4b1a      	ldr	r3, [pc, #104]	; (10424 <TransmissionErrorCallback+0x94>)
   103bc:	7005      	strb	r5, [r0, #0]
   103be:	4798      	blx	r3
   103c0:	9807      	ldr	r0, [sp, #28]
   103c2:	4b19      	ldr	r3, [pc, #100]	; (10428 <TransmissionErrorCallback+0x98>)
   103c4:	9908      	ldr	r1, [sp, #32]
   103c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   103c8:	4798      	blx	r3
   103ca:	0023      	movs	r3, r4
   103cc:	33a6      	adds	r3, #166	; 0xa6
   103ce:	881b      	ldrh	r3, [r3, #0]
   103d0:	a805      	add	r0, sp, #20
   103d2:	7003      	strb	r3, [r0, #0]
   103d4:	4b15      	ldr	r3, [pc, #84]	; (1042c <TransmissionErrorCallback+0x9c>)
   103d6:	6043      	str	r3, [r0, #4]
   103d8:	4b15      	ldr	r3, [pc, #84]	; (10430 <TransmissionErrorCallback+0xa0>)
   103da:	4798      	blx	r3
   103dc:	2800      	cmp	r0, #0
   103de:	d01b      	beq.n	10418 <TransmissionErrorCallback+0x88>
   103e0:	0023      	movs	r3, r4
   103e2:	33d4      	adds	r3, #212	; 0xd4
   103e4:	781b      	ldrb	r3, [r3, #0]
   103e6:	42ab      	cmp	r3, r5
   103e8:	d108      	bne.n	103fc <TransmissionErrorCallback+0x6c>
   103ea:	0021      	movs	r1, r4
   103ec:	220e      	movs	r2, #14
   103ee:	315c      	adds	r1, #92	; 0x5c
   103f0:	780b      	ldrb	r3, [r1, #0]
   103f2:	4393      	bics	r3, r2
   103f4:	001a      	movs	r2, r3
   103f6:	230c      	movs	r3, #12
   103f8:	4313      	orrs	r3, r2
   103fa:	700b      	strb	r3, [r1, #0]
   103fc:	23c0      	movs	r3, #192	; 0xc0
   103fe:	2200      	movs	r2, #0
   10400:	33ff      	adds	r3, #255	; 0xff
   10402:	5ce3      	ldrb	r3, [r4, r3]
   10404:	490b      	ldr	r1, [pc, #44]	; (10434 <TransmissionErrorCallback+0xa4>)
   10406:	34d3      	adds	r4, #211	; 0xd3
   10408:	4359      	muls	r1, r3
   1040a:	4b0b      	ldr	r3, [pc, #44]	; (10438 <TransmissionErrorCallback+0xa8>)
   1040c:	7820      	ldrb	r0, [r4, #0]
   1040e:	18c9      	adds	r1, r1, r3
   10410:	9200      	str	r2, [sp, #0]
   10412:	4b0a      	ldr	r3, [pc, #40]	; (1043c <TransmissionErrorCallback+0xac>)
   10414:	4c0a      	ldr	r4, [pc, #40]	; (10440 <TransmissionErrorCallback+0xb0>)
   10416:	47a0      	blx	r4
   10418:	b00b      	add	sp, #44	; 0x2c
   1041a:	bd30      	pop	{r4, r5, pc}
   1041c:	200030e4 	.word	0x200030e4
   10420:	0000c8f9 	.word	0x0000c8f9
   10424:	0000ef35 	.word	0x0000ef35
   10428:	000101d1 	.word	0x000101d1
   1042c:	200032b4 	.word	0x200032b4
   10430:	0000e661 	.word	0x0000e661
   10434:	fffffc18 	.word	0xfffffc18
   10438:	001e8480 	.word	0x001e8480
   1043c:	00010391 	.word	0x00010391
   10440:	0000cd65 	.word	0x0000cd65

00010444 <UnconfirmedTransmissionCallback>:
   10444:	b5f0      	push	{r4, r5, r6, r7, lr}
   10446:	4c38      	ldr	r4, [pc, #224]	; (10528 <UnconfirmedTransmissionCallback+0xe4>)
   10448:	b08b      	sub	sp, #44	; 0x2c
   1044a:	0023      	movs	r3, r4
   1044c:	33a6      	adds	r3, #166	; 0xa6
   1044e:	881b      	ldrh	r3, [r3, #0]
   10450:	af05      	add	r7, sp, #20
   10452:	703b      	strb	r3, [r7, #0]
   10454:	4b35      	ldr	r3, [pc, #212]	; (1052c <UnconfirmedTransmissionCallback+0xe8>)
   10456:	a903      	add	r1, sp, #12
   10458:	9306      	str	r3, [sp, #24]
   1045a:	2301      	movs	r3, #1
   1045c:	700b      	strb	r3, [r1, #0]
   1045e:	0023      	movs	r3, r4
   10460:	0026      	movs	r6, r4
   10462:	33c1      	adds	r3, #193	; 0xc1
   10464:	781b      	ldrb	r3, [r3, #0]
   10466:	36bf      	adds	r6, #191	; 0xbf
   10468:	704b      	strb	r3, [r1, #1]
   1046a:	7833      	ldrb	r3, [r6, #0]
   1046c:	aa07      	add	r2, sp, #28
   1046e:	202f      	movs	r0, #47	; 0x2f
   10470:	4d2f      	ldr	r5, [pc, #188]	; (10530 <UnconfirmedTransmissionCallback+0xec>)
   10472:	708b      	strb	r3, [r1, #2]
   10474:	47a8      	blx	r5
   10476:	2808      	cmp	r0, #8
   10478:	d12c      	bne.n	104d4 <UnconfirmedTransmissionCallback+0x90>
   1047a:	2301      	movs	r3, #1
   1047c:	a804      	add	r0, sp, #16
   1047e:	7003      	strb	r3, [r0, #0]
   10480:	4b2c      	ldr	r3, [pc, #176]	; (10534 <UnconfirmedTransmissionCallback+0xf0>)
   10482:	4798      	blx	r3
   10484:	9807      	ldr	r0, [sp, #28]
   10486:	4b2c      	ldr	r3, [pc, #176]	; (10538 <UnconfirmedTransmissionCallback+0xf4>)
   10488:	9908      	ldr	r1, [sp, #32]
   1048a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1048c:	4798      	blx	r3
   1048e:	0038      	movs	r0, r7
   10490:	4b2a      	ldr	r3, [pc, #168]	; (1053c <UnconfirmedTransmissionCallback+0xf8>)
   10492:	4798      	blx	r3
   10494:	2800      	cmp	r0, #0
   10496:	d01b      	beq.n	104d0 <UnconfirmedTransmissionCallback+0x8c>
   10498:	0023      	movs	r3, r4
   1049a:	33d4      	adds	r3, #212	; 0xd4
   1049c:	781b      	ldrb	r3, [r3, #0]
   1049e:	2b01      	cmp	r3, #1
   104a0:	d108      	bne.n	104b4 <UnconfirmedTransmissionCallback+0x70>
   104a2:	0021      	movs	r1, r4
   104a4:	220e      	movs	r2, #14
   104a6:	315c      	adds	r1, #92	; 0x5c
   104a8:	780b      	ldrb	r3, [r1, #0]
   104aa:	4393      	bics	r3, r2
   104ac:	001a      	movs	r2, r3
   104ae:	230c      	movs	r3, #12
   104b0:	4313      	orrs	r3, r2
   104b2:	700b      	strb	r3, [r1, #0]
   104b4:	23c0      	movs	r3, #192	; 0xc0
   104b6:	2200      	movs	r2, #0
   104b8:	33ff      	adds	r3, #255	; 0xff
   104ba:	5ce3      	ldrb	r3, [r4, r3]
   104bc:	4920      	ldr	r1, [pc, #128]	; (10540 <UnconfirmedTransmissionCallback+0xfc>)
   104be:	34d3      	adds	r4, #211	; 0xd3
   104c0:	4359      	muls	r1, r3
   104c2:	4b20      	ldr	r3, [pc, #128]	; (10544 <UnconfirmedTransmissionCallback+0x100>)
   104c4:	7820      	ldrb	r0, [r4, #0]
   104c6:	18c9      	adds	r1, r1, r3
   104c8:	4b1f      	ldr	r3, [pc, #124]	; (10548 <UnconfirmedTransmissionCallback+0x104>)
   104ca:	9200      	str	r2, [sp, #0]
   104cc:	4c1f      	ldr	r4, [pc, #124]	; (1054c <UnconfirmedTransmissionCallback+0x108>)
   104ce:	47a0      	blx	r4
   104d0:	b00b      	add	sp, #44	; 0x2c
   104d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   104d4:	23fa      	movs	r3, #250	; 0xfa
   104d6:	00db      	lsls	r3, r3, #3
   104d8:	9304      	str	r3, [sp, #16]
   104da:	0023      	movs	r3, r4
   104dc:	33f0      	adds	r3, #240	; 0xf0
   104de:	781b      	ldrb	r3, [r3, #0]
   104e0:	079a      	lsls	r2, r3, #30
   104e2:	d516      	bpl.n	10512 <UnconfirmedTransmissionCallback+0xce>
   104e4:	aa04      	add	r2, sp, #16
   104e6:	0031      	movs	r1, r6
   104e8:	2026      	movs	r0, #38	; 0x26
   104ea:	47a8      	blx	r5
   104ec:	9b04      	ldr	r3, [sp, #16]
   104ee:	1c5a      	adds	r2, r3, #1
   104f0:	d001      	beq.n	104f6 <UnconfirmedTransmissionCallback+0xb2>
   104f2:	3314      	adds	r3, #20
   104f4:	9304      	str	r3, [sp, #16]
   104f6:	23c0      	movs	r3, #192	; 0xc0
   104f8:	33ff      	adds	r3, #255	; 0xff
   104fa:	5ce3      	ldrb	r3, [r4, r3]
   104fc:	9a04      	ldr	r2, [sp, #16]
   104fe:	21fa      	movs	r1, #250	; 0xfa
   10500:	1ad3      	subs	r3, r2, r3
   10502:	2200      	movs	r2, #0
   10504:	0089      	lsls	r1, r1, #2
   10506:	34c9      	adds	r4, #201	; 0xc9
   10508:	4359      	muls	r1, r3
   1050a:	7820      	ldrb	r0, [r4, #0]
   1050c:	4b10      	ldr	r3, [pc, #64]	; (10550 <UnconfirmedTransmissionCallback+0x10c>)
   1050e:	9200      	str	r2, [sp, #0]
   10510:	e7dc      	b.n	104cc <UnconfirmedTransmissionCallback+0x88>
   10512:	075b      	lsls	r3, r3, #29
   10514:	d5ef      	bpl.n	104f6 <UnconfirmedTransmissionCallback+0xb2>
   10516:	aa04      	add	r2, sp, #16
   10518:	0031      	movs	r1, r6
   1051a:	2033      	movs	r0, #51	; 0x33
   1051c:	47a8      	blx	r5
   1051e:	9b04      	ldr	r3, [sp, #16]
   10520:	1c5a      	adds	r2, r3, #1
   10522:	d0e8      	beq.n	104f6 <UnconfirmedTransmissionCallback+0xb2>
   10524:	3301      	adds	r3, #1
   10526:	e7e5      	b.n	104f4 <UnconfirmedTransmissionCallback+0xb0>
   10528:	200030e4 	.word	0x200030e4
   1052c:	200032b4 	.word	0x200032b4
   10530:	0000c8f9 	.word	0x0000c8f9
   10534:	0000ef35 	.word	0x0000ef35
   10538:	000101d1 	.word	0x000101d1
   1053c:	0000e661 	.word	0x0000e661
   10540:	fffffc18 	.word	0xfffffc18
   10544:	001e8480 	.word	0x001e8480
   10548:	00010391 	.word	0x00010391
   1054c:	0000cd65 	.word	0x0000cd65
   10550:	00010445 	.word	0x00010445

00010554 <EncryptFRMPayload>:
   10554:	b5f0      	push	{r4, r5, r6, r7, lr}
   10556:	0007      	movs	r7, r0
   10558:	2401      	movs	r4, #1
   1055a:	b089      	sub	sp, #36	; 0x24
   1055c:	9305      	str	r3, [sp, #20]
   1055e:	ab0e      	add	r3, sp, #56	; 0x38
   10560:	9204      	str	r2, [sp, #16]
   10562:	cb04      	ldmia	r3!, {r2}
   10564:	9103      	str	r1, [sp, #12]
   10566:	781d      	ldrb	r5, [r3, #0]
   10568:	090b      	lsrs	r3, r1, #4
   1056a:	9206      	str	r2, [sp, #24]
   1056c:	9302      	str	r3, [sp, #8]
   1056e:	9b02      	ldr	r3, [sp, #8]
   10570:	429c      	cmp	r4, r3
   10572:	d922      	bls.n	105ba <EncryptFRMPayload+0x66>
   10574:	260f      	movs	r6, #15
   10576:	9b03      	ldr	r3, [sp, #12]
   10578:	4033      	ands	r3, r6
   1057a:	1e1e      	subs	r6, r3, #0
   1057c:	d01b      	beq.n	105b6 <EncryptFRMPayload+0x62>
   1057e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10580:	0022      	movs	r2, r4
   10582:	9300      	str	r3, [sp, #0]
   10584:	9905      	ldr	r1, [sp, #20]
   10586:	2301      	movs	r3, #1
   10588:	9804      	ldr	r0, [sp, #16]
   1058a:	4c1d      	ldr	r4, [pc, #116]	; (10600 <EncryptFRMPayload+0xac>)
   1058c:	47a0      	blx	r4
   1058e:	4c1d      	ldr	r4, [pc, #116]	; (10604 <EncryptFRMPayload+0xb0>)
   10590:	4b1d      	ldr	r3, [pc, #116]	; (10608 <EncryptFRMPayload+0xb4>)
   10592:	9906      	ldr	r1, [sp, #24]
   10594:	0020      	movs	r0, r4
   10596:	4798      	blx	r3
   10598:	9b02      	ldr	r3, [sp, #8]
   1059a:	011a      	lsls	r2, r3, #4
   1059c:	2300      	movs	r3, #0
   1059e:	18ba      	adds	r2, r7, r2
   105a0:	5d1f      	ldrb	r7, [r3, r4]
   105a2:	5cd0      	ldrb	r0, [r2, r3]
   105a4:	18e9      	adds	r1, r5, r3
   105a6:	4078      	eors	r0, r7
   105a8:	9f10      	ldr	r7, [sp, #64]	; 0x40
   105aa:	b2c9      	uxtb	r1, r1
   105ac:	3301      	adds	r3, #1
   105ae:	5478      	strb	r0, [r7, r1]
   105b0:	b2d9      	uxtb	r1, r3
   105b2:	428e      	cmp	r6, r1
   105b4:	d8f4      	bhi.n	105a0 <EncryptFRMPayload+0x4c>
   105b6:	b009      	add	sp, #36	; 0x24
   105b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   105ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
   105bc:	0022      	movs	r2, r4
   105be:	9300      	str	r3, [sp, #0]
   105c0:	9905      	ldr	r1, [sp, #20]
   105c2:	2301      	movs	r3, #1
   105c4:	9804      	ldr	r0, [sp, #16]
   105c6:	4e0e      	ldr	r6, [pc, #56]	; (10600 <EncryptFRMPayload+0xac>)
   105c8:	47b0      	blx	r6
   105ca:	4e0e      	ldr	r6, [pc, #56]	; (10604 <EncryptFRMPayload+0xb0>)
   105cc:	4b0e      	ldr	r3, [pc, #56]	; (10608 <EncryptFRMPayload+0xb4>)
   105ce:	9906      	ldr	r1, [sp, #24]
   105d0:	0030      	movs	r0, r6
   105d2:	4798      	blx	r3
   105d4:	2300      	movs	r3, #0
   105d6:	1e62      	subs	r2, r4, #1
   105d8:	0112      	lsls	r2, r2, #4
   105da:	18ba      	adds	r2, r7, r2
   105dc:	9207      	str	r2, [sp, #28]
   105de:	9a07      	ldr	r2, [sp, #28]
   105e0:	18e9      	adds	r1, r5, r3
   105e2:	5cd0      	ldrb	r0, [r2, r3]
   105e4:	5d9a      	ldrb	r2, [r3, r6]
   105e6:	b2c9      	uxtb	r1, r1
   105e8:	4050      	eors	r0, r2
   105ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
   105ec:	3301      	adds	r3, #1
   105ee:	5450      	strb	r0, [r2, r1]
   105f0:	2b10      	cmp	r3, #16
   105f2:	d1f4      	bne.n	105de <EncryptFRMPayload+0x8a>
   105f4:	3510      	adds	r5, #16
   105f6:	3401      	adds	r4, #1
   105f8:	b2ed      	uxtb	r5, r5
   105fa:	b2e4      	uxtb	r4, r4
   105fc:	e7b7      	b.n	1056e <EncryptFRMPayload+0x1a>
   105fe:	46c0      	nop			; (mov r8, r8)
   10600:	0000f925 	.word	0x0000f925
   10604:	2000206d 	.word	0x2000206d
   10608:	00011bf9 	.word	0x00011bf9

0001060c <AssemblePacket>:
   1060c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1060e:	2710      	movs	r7, #16
   10610:	b08b      	sub	sp, #44	; 0x2c
   10612:	9304      	str	r3, [sp, #16]
   10614:	ab04      	add	r3, sp, #16
   10616:	829f      	strh	r7, [r3, #20]
   10618:	2316      	movs	r3, #22
   1061a:	9205      	str	r2, [sp, #20]
   1061c:	aa04      	add	r2, sp, #16
   1061e:	189b      	adds	r3, r3, r2
   10620:	2500      	movs	r5, #0
   10622:	2210      	movs	r2, #16
   10624:	ac08      	add	r4, sp, #32
   10626:	9006      	str	r0, [sp, #24]
   10628:	9107      	str	r1, [sp, #28]
   1062a:	32ff      	adds	r2, #255	; 0xff
   1062c:	0029      	movs	r1, r5
   1062e:	4ea1      	ldr	r6, [pc, #644]	; (108b4 <AssemblePacket+0x2a8>)
   10630:	7025      	strb	r5, [r4, #0]
   10632:	48a1      	ldr	r0, [pc, #644]	; (108b8 <AssemblePacket+0x2ac>)
   10634:	801d      	strh	r5, [r3, #0]
   10636:	47b0      	blx	r6
   10638:	003a      	movs	r2, r7
   1063a:	0029      	movs	r1, r5
   1063c:	489f      	ldr	r0, [pc, #636]	; (108bc <AssemblePacket+0x2b0>)
   1063e:	47b0      	blx	r6
   10640:	221f      	movs	r2, #31
   10642:	7823      	ldrb	r3, [r4, #0]
   10644:	9906      	ldr	r1, [sp, #24]
   10646:	4013      	ands	r3, r2
   10648:	42a9      	cmp	r1, r5
   1064a:	d041      	beq.n	106d0 <AssemblePacket+0xc4>
   1064c:	3a9f      	subs	r2, #159	; 0x9f
   1064e:	4313      	orrs	r3, r2
   10650:	7023      	strb	r3, [r4, #0]
   10652:	4b9b      	ldr	r3, [pc, #620]	; (108c0 <AssemblePacket+0x2b4>)
   10654:	3281      	adds	r2, #129	; 0x81
   10656:	336c      	adds	r3, #108	; 0x6c
   10658:	7819      	ldrb	r1, [r3, #0]
   1065a:	430a      	orrs	r2, r1
   1065c:	701a      	strb	r2, [r3, #0]
   1065e:	22e0      	movs	r2, #224	; 0xe0
   10660:	7823      	ldrb	r3, [r4, #0]
   10662:	4895      	ldr	r0, [pc, #596]	; (108b8 <AssemblePacket+0x2ac>)
   10664:	4013      	ands	r3, r2
   10666:	7023      	strb	r3, [r4, #0]
   10668:	4c95      	ldr	r4, [pc, #596]	; (108c0 <AssemblePacket+0x2b4>)
   1066a:	7403      	strb	r3, [r0, #16]
   1066c:	3adc      	subs	r2, #220	; 0xdc
   1066e:	4b95      	ldr	r3, [pc, #596]	; (108c4 <AssemblePacket+0x2b8>)
   10670:	3011      	adds	r0, #17
   10672:	1c61      	adds	r1, r4, #1
   10674:	4798      	blx	r3
   10676:	2315      	movs	r3, #21
   10678:	aa04      	add	r2, sp, #16
   1067a:	8293      	strh	r3, [r2, #20]
   1067c:	2300      	movs	r3, #0
   1067e:	469c      	mov	ip, r3
   10680:	0023      	movs	r3, r4
   10682:	335c      	adds	r3, #92	; 0x5c
   10684:	781b      	ldrb	r3, [r3, #0]
   10686:	069b      	lsls	r3, r3, #26
   10688:	d400      	bmi.n	1068c <AssemblePacket+0x80>
   1068a:	e0e2      	b.n	10852 <AssemblePacket+0x246>
   1068c:	0023      	movs	r3, r4
   1068e:	33bf      	adds	r3, #191	; 0xbf
   10690:	781a      	ldrb	r2, [r3, #0]
   10692:	4b8d      	ldr	r3, [pc, #564]	; (108c8 <AssemblePacket+0x2bc>)
   10694:	781d      	ldrb	r5, [r3, #0]
   10696:	42aa      	cmp	r2, r5
   10698:	d200      	bcs.n	1069c <AssemblePacket+0x90>
   1069a:	e0da      	b.n	10852 <AssemblePacket+0x246>
   1069c:	0021      	movs	r1, r4
   1069e:	0026      	movs	r6, r4
   106a0:	2780      	movs	r7, #128	; 0x80
   106a2:	31a2      	adds	r1, #162	; 0xa2
   106a4:	880b      	ldrh	r3, [r1, #0]
   106a6:	36b4      	adds	r6, #180	; 0xb4
   106a8:	3301      	adds	r3, #1
   106aa:	b29b      	uxth	r3, r3
   106ac:	800b      	strh	r3, [r1, #0]
   106ae:	7836      	ldrb	r6, [r6, #0]
   106b0:	427f      	negs	r7, r7
   106b2:	1c38      	adds	r0, r7, #0
   106b4:	42b3      	cmp	r3, r6
   106b6:	d10f      	bne.n	106d8 <AssemblePacket+0xcc>
   106b8:	0023      	movs	r3, r4
   106ba:	4662      	mov	r2, ip
   106bc:	33cd      	adds	r3, #205	; 0xcd
   106be:	701a      	strb	r2, [r3, #0]
   106c0:	2040      	movs	r0, #64	; 0x40
   106c2:	2310      	movs	r3, #16
   106c4:	346c      	adds	r4, #108	; 0x6c
   106c6:	7822      	ldrb	r2, [r4, #0]
   106c8:	4338      	orrs	r0, r7
   106ca:	4313      	orrs	r3, r2
   106cc:	7023      	strb	r3, [r4, #0]
   106ce:	e02e      	b.n	1072e <AssemblePacket+0x122>
   106d0:	2240      	movs	r2, #64	; 0x40
   106d2:	4313      	orrs	r3, r2
   106d4:	7023      	strb	r3, [r4, #0]
   106d6:	e7c2      	b.n	1065e <AssemblePacket+0x52>
   106d8:	42b3      	cmp	r3, r6
   106da:	d928      	bls.n	1072e <AssemblePacket+0x122>
   106dc:	42aa      	cmp	r2, r5
   106de:	d100      	bne.n	106e2 <AssemblePacket+0xd6>
   106e0:	e0b0      	b.n	10844 <AssemblePacket+0x238>
   106e2:	0021      	movs	r1, r4
   106e4:	0020      	movs	r0, r4
   106e6:	31cd      	adds	r1, #205	; 0xcd
   106e8:	780b      	ldrb	r3, [r1, #0]
   106ea:	30b5      	adds	r0, #181	; 0xb5
   106ec:	3301      	adds	r3, #1
   106ee:	b2db      	uxtb	r3, r3
   106f0:	700b      	strb	r3, [r1, #0]
   106f2:	7800      	ldrb	r0, [r0, #0]
   106f4:	3801      	subs	r0, #1
   106f6:	4283      	cmp	r3, r0
   106f8:	dbe2      	blt.n	106c0 <AssemblePacket+0xb4>
   106fa:	4663      	mov	r3, ip
   106fc:	700b      	strb	r3, [r1, #0]
   106fe:	42aa      	cmp	r2, r5
   10700:	d90d      	bls.n	1071e <AssemblePacket+0x112>
   10702:	2313      	movs	r3, #19
   10704:	a904      	add	r1, sp, #16
   10706:	3a01      	subs	r2, #1
   10708:	185b      	adds	r3, r3, r1
   1070a:	4d6f      	ldr	r5, [pc, #444]	; (108c8 <AssemblePacket+0x2bc>)
   1070c:	701a      	strb	r2, [r3, #0]
   1070e:	2613      	movs	r6, #19
   10710:	ab04      	add	r3, sp, #16
   10712:	18f6      	adds	r6, r6, r3
   10714:	782a      	ldrb	r2, [r5, #0]
   10716:	7833      	ldrb	r3, [r6, #0]
   10718:	429a      	cmp	r2, r3
   1071a:	d800      	bhi.n	1071e <AssemblePacket+0x112>
   1071c:	e084      	b.n	10828 <AssemblePacket+0x21c>
   1071e:	2210      	movs	r2, #16
   10720:	2040      	movs	r0, #64	; 0x40
   10722:	4b67      	ldr	r3, [pc, #412]	; (108c0 <AssemblePacket+0x2b4>)
   10724:	4338      	orrs	r0, r7
   10726:	336c      	adds	r3, #108	; 0x6c
   10728:	7819      	ldrb	r1, [r3, #0]
   1072a:	430a      	orrs	r2, r1
   1072c:	701a      	strb	r2, [r3, #0]
   1072e:	4b64      	ldr	r3, [pc, #400]	; (108c0 <AssemblePacket+0x2b4>)
   10730:	2402      	movs	r4, #2
   10732:	0019      	movs	r1, r3
   10734:	316c      	adds	r1, #108	; 0x6c
   10736:	780a      	ldrb	r2, [r1, #0]
   10738:	4222      	tst	r2, r4
   1073a:	d003      	beq.n	10744 <AssemblePacket+0x138>
   1073c:	2520      	movs	r5, #32
   1073e:	43a2      	bics	r2, r4
   10740:	4328      	orrs	r0, r5
   10742:	700a      	strb	r2, [r1, #0]
   10744:	2210      	movs	r2, #16
   10746:	0004      	movs	r4, r0
   10748:	33b8      	adds	r3, #184	; 0xb8
   1074a:	781e      	ldrb	r6, [r3, #0]
   1074c:	4394      	bics	r4, r2
   1074e:	2e00      	cmp	r6, #0
   10750:	d003      	beq.n	1075a <AssemblePacket+0x14e>
   10752:	9b04      	ldr	r3, [sp, #16]
   10754:	2b00      	cmp	r3, #0
   10756:	d000      	beq.n	1075a <AssemblePacket+0x14e>
   10758:	e07d      	b.n	10856 <AssemblePacket+0x24a>
   1075a:	230f      	movs	r3, #15
   1075c:	439c      	bics	r4, r3
   1075e:	0020      	movs	r0, r4
   10760:	ac09      	add	r4, sp, #36	; 0x24
   10762:	8825      	ldrh	r5, [r4, #0]
   10764:	4f54      	ldr	r7, [pc, #336]	; (108b8 <AssemblePacket+0x2ac>)
   10766:	2202      	movs	r2, #2
   10768:	5578      	strb	r0, [r7, r5]
   1076a:	1c68      	adds	r0, r5, #1
   1076c:	b280      	uxth	r0, r0
   1076e:	19c0      	adds	r0, r0, r7
   10770:	4956      	ldr	r1, [pc, #344]	; (108cc <AssemblePacket+0x2c0>)
   10772:	4b54      	ldr	r3, [pc, #336]	; (108c4 <AssemblePacket+0x2b8>)
   10774:	3503      	adds	r5, #3
   10776:	4798      	blx	r3
   10778:	8025      	strh	r5, [r4, #0]
   1077a:	2e00      	cmp	r6, #0
   1077c:	d007      	beq.n	1078e <AssemblePacket+0x182>
   1077e:	9b04      	ldr	r3, [sp, #16]
   10780:	2b00      	cmp	r3, #0
   10782:	d004      	beq.n	1078e <AssemblePacket+0x182>
   10784:	2201      	movs	r2, #1
   10786:	0021      	movs	r1, r4
   10788:	0038      	movs	r0, r7
   1078a:	4b51      	ldr	r3, [pc, #324]	; (108d0 <AssemblePacket+0x2c4>)
   1078c:	4798      	blx	r3
   1078e:	466a      	mov	r2, sp
   10790:	8823      	ldrh	r3, [r4, #0]
   10792:	7f12      	ldrb	r2, [r2, #28]
   10794:	1c5d      	adds	r5, r3, #1
   10796:	54fa      	strb	r2, [r7, r3]
   10798:	9b04      	ldr	r3, [sp, #16]
   1079a:	b2ad      	uxth	r5, r5
   1079c:	8025      	strh	r5, [r4, #0]
   1079e:	2b00      	cmp	r3, #0
   107a0:	d062      	beq.n	10868 <AssemblePacket+0x25c>
   107a2:	001a      	movs	r2, r3
   107a4:	1978      	adds	r0, r7, r5
   107a6:	9905      	ldr	r1, [sp, #20]
   107a8:	4b46      	ldr	r3, [pc, #280]	; (108c4 <AssemblePacket+0x2b8>)
   107aa:	4798      	blx	r3
   107ac:	466b      	mov	r3, sp
   107ae:	4a44      	ldr	r2, [pc, #272]	; (108c0 <AssemblePacket+0x2b4>)
   107b0:	7c19      	ldrb	r1, [r3, #16]
   107b2:	6813      	ldr	r3, [r2, #0]
   107b4:	b2ed      	uxtb	r5, r5
   107b6:	0a18      	lsrs	r0, r3, #8
   107b8:	7913      	ldrb	r3, [r2, #4]
   107ba:	9501      	str	r5, [sp, #4]
   107bc:	061b      	lsls	r3, r3, #24
   107be:	4303      	orrs	r3, r0
   107c0:	9303      	str	r3, [sp, #12]
   107c2:	4b44      	ldr	r3, [pc, #272]	; (108d4 <AssemblePacket+0x2c8>)
   107c4:	9702      	str	r7, [sp, #8]
   107c6:	9300      	str	r3, [sp, #0]
   107c8:	6e13      	ldr	r3, [r2, #96]	; 0x60
   107ca:	9805      	ldr	r0, [sp, #20]
   107cc:	2200      	movs	r2, #0
   107ce:	4d42      	ldr	r5, [pc, #264]	; (108d8 <AssemblePacket+0x2cc>)
   107d0:	47a8      	blx	r5
   107d2:	8823      	ldrh	r3, [r4, #0]
   107d4:	9a04      	ldr	r2, [sp, #16]
   107d6:	189b      	adds	r3, r3, r2
   107d8:	8023      	strh	r3, [r4, #0]
   107da:	4c39      	ldr	r4, [pc, #228]	; (108c0 <AssemblePacket+0x2b4>)
   107dc:	ae09      	add	r6, sp, #36	; 0x24
   107de:	6823      	ldr	r3, [r4, #0]
   107e0:	8832      	ldrh	r2, [r6, #0]
   107e2:	0a19      	lsrs	r1, r3, #8
   107e4:	7923      	ldrb	r3, [r4, #4]
   107e6:	3a10      	subs	r2, #16
   107e8:	061b      	lsls	r3, r3, #24
   107ea:	430b      	orrs	r3, r1
   107ec:	9300      	str	r3, [sp, #0]
   107ee:	6e21      	ldr	r1, [r4, #96]	; 0x60
   107f0:	b2d2      	uxtb	r2, r2
   107f2:	2349      	movs	r3, #73	; 0x49
   107f4:	2000      	movs	r0, #0
   107f6:	4d39      	ldr	r5, [pc, #228]	; (108dc <AssemblePacket+0x2d0>)
   107f8:	47a8      	blx	r5
   107fa:	4f2f      	ldr	r7, [pc, #188]	; (108b8 <AssemblePacket+0x2ac>)
   107fc:	2210      	movs	r2, #16
   107fe:	492f      	ldr	r1, [pc, #188]	; (108bc <AssemblePacket+0x2b0>)
   10800:	0038      	movs	r0, r7
   10802:	4b30      	ldr	r3, [pc, #192]	; (108c4 <AssemblePacket+0x2b8>)
   10804:	4798      	blx	r3
   10806:	7833      	ldrb	r3, [r6, #0]
   10808:	003a      	movs	r2, r7
   1080a:	492c      	ldr	r1, [pc, #176]	; (108bc <AssemblePacket+0x2b0>)
   1080c:	4834      	ldr	r0, [pc, #208]	; (108e0 <AssemblePacket+0x2d4>)
   1080e:	4d35      	ldr	r5, [pc, #212]	; (108e4 <AssemblePacket+0x2d8>)
   10810:	47a8      	blx	r5
   10812:	8836      	ldrh	r6, [r6, #0]
   10814:	2204      	movs	r2, #4
   10816:	19f0      	adds	r0, r6, r7
   10818:	4928      	ldr	r1, [pc, #160]	; (108bc <AssemblePacket+0x2b0>)
   1081a:	4b2a      	ldr	r3, [pc, #168]	; (108c4 <AssemblePacket+0x2b8>)
   1081c:	4798      	blx	r3
   1081e:	3e0c      	subs	r6, #12
   10820:	34a6      	adds	r4, #166	; 0xa6
   10822:	8026      	strh	r6, [r4, #0]
   10824:	b00b      	add	sp, #44	; 0x2c
   10826:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10828:	4b2f      	ldr	r3, [pc, #188]	; (108e8 <AssemblePacket+0x2dc>)
   1082a:	0031      	movs	r1, r6
   1082c:	2011      	movs	r0, #17
   1082e:	4798      	blx	r3
   10830:	7833      	ldrb	r3, [r6, #0]
   10832:	2808      	cmp	r0, #8
   10834:	d03a      	beq.n	108ac <AssemblePacket+0x2a0>
   10836:	782a      	ldrb	r2, [r5, #0]
   10838:	429a      	cmp	r2, r3
   1083a:	d300      	bcc.n	1083e <AssemblePacket+0x232>
   1083c:	e767      	b.n	1070e <AssemblePacket+0x102>
   1083e:	3b01      	subs	r3, #1
   10840:	7033      	strb	r3, [r6, #0]
   10842:	e764      	b.n	1070e <AssemblePacket+0x102>
   10844:	4663      	mov	r3, ip
   10846:	800b      	strh	r3, [r1, #0]
   10848:	2210      	movs	r2, #16
   1084a:	346c      	adds	r4, #108	; 0x6c
   1084c:	7823      	ldrb	r3, [r4, #0]
   1084e:	4393      	bics	r3, r2
   10850:	e73c      	b.n	106cc <AssemblePacket+0xc0>
   10852:	2000      	movs	r0, #0
   10854:	e7f8      	b.n	10848 <AssemblePacket+0x23c>
   10856:	4b25      	ldr	r3, [pc, #148]	; (108ec <AssemblePacket+0x2e0>)
   10858:	4798      	blx	r3
   1085a:	220f      	movs	r2, #15
   1085c:	0003      	movs	r3, r0
   1085e:	0020      	movs	r0, r4
   10860:	4013      	ands	r3, r2
   10862:	4390      	bics	r0, r2
   10864:	4318      	orrs	r0, r3
   10866:	e77b      	b.n	10760 <AssemblePacket+0x154>
   10868:	4d15      	ldr	r5, [pc, #84]	; (108c0 <AssemblePacket+0x2b4>)
   1086a:	002b      	movs	r3, r5
   1086c:	33b8      	adds	r3, #184	; 0xb8
   1086e:	781b      	ldrb	r3, [r3, #0]
   10870:	2b00      	cmp	r3, #0
   10872:	d0b2      	beq.n	107da <AssemblePacket+0x1ce>
   10874:	2616      	movs	r6, #22
   10876:	ab04      	add	r3, sp, #16
   10878:	18f6      	adds	r6, r6, r3
   1087a:	9a04      	ldr	r2, [sp, #16]
   1087c:	0031      	movs	r1, r6
   1087e:	481c      	ldr	r0, [pc, #112]	; (108f0 <AssemblePacket+0x2e4>)
   10880:	4b13      	ldr	r3, [pc, #76]	; (108d0 <AssemblePacket+0x2c4>)
   10882:	4798      	blx	r3
   10884:	682b      	ldr	r3, [r5, #0]
   10886:	7831      	ldrb	r1, [r6, #0]
   10888:	0a1a      	lsrs	r2, r3, #8
   1088a:	792b      	ldrb	r3, [r5, #4]
   1088c:	9702      	str	r7, [sp, #8]
   1088e:	061b      	lsls	r3, r3, #24
   10890:	4313      	orrs	r3, r2
   10892:	9303      	str	r3, [sp, #12]
   10894:	7823      	ldrb	r3, [r4, #0]
   10896:	9a04      	ldr	r2, [sp, #16]
   10898:	9301      	str	r3, [sp, #4]
   1089a:	4b11      	ldr	r3, [pc, #68]	; (108e0 <AssemblePacket+0x2d4>)
   1089c:	4814      	ldr	r0, [pc, #80]	; (108f0 <AssemblePacket+0x2e4>)
   1089e:	9300      	str	r3, [sp, #0]
   108a0:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   108a2:	4d0d      	ldr	r5, [pc, #52]	; (108d8 <AssemblePacket+0x2cc>)
   108a4:	47a8      	blx	r5
   108a6:	8823      	ldrh	r3, [r4, #0]
   108a8:	8832      	ldrh	r2, [r6, #0]
   108aa:	e794      	b.n	107d6 <AssemblePacket+0x1ca>
   108ac:	34bf      	adds	r4, #191	; 0xbf
   108ae:	7023      	strb	r3, [r4, #0]
   108b0:	e735      	b.n	1071e <AssemblePacket+0x112>
   108b2:	46c0      	nop			; (mov r8, r8)
   108b4:	000155d1 	.word	0x000155d1
   108b8:	200032a4 	.word	0x200032a4
   108bc:	2000206d 	.word	0x2000206d
   108c0:	200030e4 	.word	0x200030e4
   108c4:	000155bf 	.word	0x000155bf
   108c8:	200031ae 	.word	0x200031ae
   108cc:	20003144 	.word	0x20003144
   108d0:	0000f641 	.word	0x0000f641
   108d4:	200030f9 	.word	0x200030f9
   108d8:	00010555 	.word	0x00010555
   108dc:	0000f925 	.word	0x0000f925
   108e0:	200030e9 	.word	0x200030e9
   108e4:	00011c39 	.word	0x00011c39
   108e8:	0000c915 	.word	0x0000c915
   108ec:	0000f5a5 	.word	0x0000f5a5
   108f0:	20002eac 	.word	0x20002eac

000108f4 <UpdateTransactionCompleteCbParams>:
   108f4:	23da      	movs	r3, #218	; 0xda
   108f6:	2201      	movs	r2, #1
   108f8:	b570      	push	{r4, r5, r6, lr}
   108fa:	4915      	ldr	r1, [pc, #84]	; (10950 <UpdateTransactionCompleteCbParams+0x5c>)
   108fc:	4c15      	ldr	r4, [pc, #84]	; (10954 <UpdateTransactionCompleteCbParams+0x60>)
   108fe:	005b      	lsls	r3, r3, #1
   10900:	54e2      	strb	r2, [r4, r3]
   10902:	784a      	ldrb	r2, [r1, #1]
   10904:	780b      	ldrb	r3, [r1, #0]
   10906:	0212      	lsls	r2, r2, #8
   10908:	431a      	orrs	r2, r3
   1090a:	788b      	ldrb	r3, [r1, #2]
   1090c:	041b      	lsls	r3, r3, #16
   1090e:	431a      	orrs	r2, r3
   10910:	78cb      	ldrb	r3, [r1, #3]
   10912:	061b      	lsls	r3, r3, #24
   10914:	4313      	orrs	r3, r2
   10916:	d012      	beq.n	1093e <UpdateTransactionCompleteCbParams+0x4a>
   10918:	0022      	movs	r2, r4
   1091a:	2504      	movs	r5, #4
   1091c:	32d8      	adds	r2, #216	; 0xd8
   1091e:	6812      	ldr	r2, [r2, #0]
   10920:	422a      	tst	r2, r5
   10922:	d00c      	beq.n	1093e <UpdateTransactionCompleteCbParams+0x4a>
   10924:	0022      	movs	r2, r4
   10926:	32dc      	adds	r2, #220	; 0xdc
   10928:	6812      	ldr	r2, [r2, #0]
   1092a:	2a00      	cmp	r2, #0
   1092c:	d007      	beq.n	1093e <UpdateTransactionCompleteCbParams+0x4a>
   1092e:	0021      	movs	r1, r4
   10930:	31e0      	adds	r1, #224	; 0xe0
   10932:	700d      	strb	r5, [r1, #0]
   10934:	0025      	movs	r5, r4
   10936:	35e4      	adds	r5, #228	; 0xe4
   10938:	7028      	strb	r0, [r5, #0]
   1093a:	0010      	movs	r0, r2
   1093c:	4798      	blx	r3
   1093e:	23da      	movs	r3, #218	; 0xda
   10940:	005b      	lsls	r3, r3, #1
   10942:	5ce3      	ldrb	r3, [r4, r3]
   10944:	2b00      	cmp	r3, #0
   10946:	d002      	beq.n	1094e <UpdateTransactionCompleteCbParams+0x5a>
   10948:	2300      	movs	r3, #0
   1094a:	34dc      	adds	r4, #220	; 0xdc
   1094c:	6023      	str	r3, [r4, #0]
   1094e:	bd70      	pop	{r4, r5, r6, pc}
   10950:	200033b8 	.word	0x200033b8
   10954:	200030e4 	.word	0x200030e4

00010958 <UpdateRxDataAvailableCbParams>:
   10958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1095a:	4e13      	ldr	r6, [pc, #76]	; (109a8 <UpdateRxDataAvailableCbParams+0x50>)
   1095c:	7874      	ldrb	r4, [r6, #1]
   1095e:	7835      	ldrb	r5, [r6, #0]
   10960:	0224      	lsls	r4, r4, #8
   10962:	432c      	orrs	r4, r5
   10964:	78b5      	ldrb	r5, [r6, #2]
   10966:	042d      	lsls	r5, r5, #16
   10968:	432c      	orrs	r4, r5
   1096a:	78f5      	ldrb	r5, [r6, #3]
   1096c:	062d      	lsls	r5, r5, #24
   1096e:	4325      	orrs	r5, r4
   10970:	d019      	beq.n	109a6 <UpdateRxDataAvailableCbParams+0x4e>
   10972:	4c0e      	ldr	r4, [pc, #56]	; (109ac <UpdateRxDataAvailableCbParams+0x54>)
   10974:	2702      	movs	r7, #2
   10976:	0026      	movs	r6, r4
   10978:	36d8      	adds	r6, #216	; 0xd8
   1097a:	6836      	ldr	r6, [r6, #0]
   1097c:	423e      	tst	r6, r7
   1097e:	d012      	beq.n	109a6 <UpdateRxDataAvailableCbParams+0x4e>
   10980:	0026      	movs	r6, r4
   10982:	36e0      	adds	r6, #224	; 0xe0
   10984:	7037      	strb	r7, [r6, #0]
   10986:	0027      	movs	r7, r4
   10988:	37e4      	adds	r7, #228	; 0xe4
   1098a:	6038      	str	r0, [r7, #0]
   1098c:	0020      	movs	r0, r4
   1098e:	30e8      	adds	r0, #232	; 0xe8
   10990:	6001      	str	r1, [r0, #0]
   10992:	0021      	movs	r1, r4
   10994:	31ec      	adds	r1, #236	; 0xec
   10996:	700a      	strb	r2, [r1, #0]
   10998:	0022      	movs	r2, r4
   1099a:	34dc      	adds	r4, #220	; 0xdc
   1099c:	32ed      	adds	r2, #237	; 0xed
   1099e:	7013      	strb	r3, [r2, #0]
   109a0:	0031      	movs	r1, r6
   109a2:	6820      	ldr	r0, [r4, #0]
   109a4:	47a8      	blx	r5
   109a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   109a8:	200033b8 	.word	0x200033b8
   109ac:	200030e4 	.word	0x200030e4

000109b0 <LorawanNotifyAppOnRxdone>:
   109b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   109b2:	4c25      	ldr	r4, [pc, #148]	; (10a48 <LorawanNotifyAppOnRxdone+0x98>)
   109b4:	0007      	movs	r7, r0
   109b6:	0023      	movs	r3, r4
   109b8:	33d4      	adds	r3, #212	; 0xd4
   109ba:	781b      	ldrb	r3, [r3, #0]
   109bc:	000d      	movs	r5, r1
   109be:	0016      	movs	r6, r2
   109c0:	2b01      	cmp	r3, #1
   109c2:	d136      	bne.n	10a32 <LorawanNotifyAppOnRxdone+0x82>
   109c4:	0022      	movs	r2, r4
   109c6:	210e      	movs	r1, #14
   109c8:	325c      	adds	r2, #92	; 0x5c
   109ca:	7813      	ldrb	r3, [r2, #0]
   109cc:	438b      	bics	r3, r1
   109ce:	7013      	strb	r3, [r2, #0]
   109d0:	491e      	ldr	r1, [pc, #120]	; (10a4c <LorawanNotifyAppOnRxdone+0x9c>)
   109d2:	784a      	ldrb	r2, [r1, #1]
   109d4:	780b      	ldrb	r3, [r1, #0]
   109d6:	0212      	lsls	r2, r2, #8
   109d8:	431a      	orrs	r2, r3
   109da:	788b      	ldrb	r3, [r1, #2]
   109dc:	041b      	lsls	r3, r3, #16
   109de:	431a      	orrs	r2, r3
   109e0:	78cb      	ldrb	r3, [r1, #3]
   109e2:	061b      	lsls	r3, r3, #24
   109e4:	4313      	orrs	r3, r2
   109e6:	d023      	beq.n	10a30 <LorawanNotifyAppOnRxdone+0x80>
   109e8:	0022      	movs	r2, r4
   109ea:	2120      	movs	r1, #32
   109ec:	326c      	adds	r2, #108	; 0x6c
   109ee:	7813      	ldrb	r3, [r2, #0]
   109f0:	438b      	bics	r3, r1
   109f2:	7013      	strb	r3, [r2, #0]
   109f4:	0023      	movs	r3, r4
   109f6:	33d4      	adds	r3, #212	; 0xd4
   109f8:	781b      	ldrb	r3, [r3, #0]
   109fa:	7878      	ldrb	r0, [r7, #1]
   109fc:	469c      	mov	ip, r3
   109fe:	78fa      	ldrb	r2, [r7, #3]
   10a00:	78b9      	ldrb	r1, [r7, #2]
   10a02:	793b      	ldrb	r3, [r7, #4]
   10a04:	4667      	mov	r7, ip
   10a06:	0209      	lsls	r1, r1, #8
   10a08:	4301      	orrs	r1, r0
   10a0a:	0410      	lsls	r0, r2, #16
   10a0c:	4308      	orrs	r0, r1
   10a0e:	061b      	lsls	r3, r3, #24
   10a10:	4318      	orrs	r0, r3
   10a12:	0032      	movs	r2, r6
   10a14:	2308      	movs	r3, #8
   10a16:	0029      	movs	r1, r5
   10a18:	2f04      	cmp	r7, #4
   10a1a:	d112      	bne.n	10a42 <LorawanNotifyAppOnRxdone+0x92>
   10a1c:	4d0c      	ldr	r5, [pc, #48]	; (10a50 <LorawanNotifyAppOnRxdone+0xa0>)
   10a1e:	47a8      	blx	r5
   10a20:	23da      	movs	r3, #218	; 0xda
   10a22:	005b      	lsls	r3, r3, #1
   10a24:	5ce3      	ldrb	r3, [r4, r3]
   10a26:	2b00      	cmp	r3, #0
   10a28:	d102      	bne.n	10a30 <LorawanNotifyAppOnRxdone+0x80>
   10a2a:	2008      	movs	r0, #8
   10a2c:	4b09      	ldr	r3, [pc, #36]	; (10a54 <LorawanNotifyAppOnRxdone+0xa4>)
   10a2e:	4798      	blx	r3
   10a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10a32:	2b04      	cmp	r3, #4
   10a34:	d1cc      	bne.n	109d0 <LorawanNotifyAppOnRxdone+0x20>
   10a36:	0023      	movs	r3, r4
   10a38:	33c8      	adds	r3, #200	; 0xc8
   10a3a:	7818      	ldrb	r0, [r3, #0]
   10a3c:	4b06      	ldr	r3, [pc, #24]	; (10a58 <LorawanNotifyAppOnRxdone+0xa8>)
   10a3e:	4798      	blx	r3
   10a40:	e7c6      	b.n	109d0 <LorawanNotifyAppOnRxdone+0x20>
   10a42:	4d06      	ldr	r5, [pc, #24]	; (10a5c <LorawanNotifyAppOnRxdone+0xac>)
   10a44:	47a8      	blx	r5
   10a46:	e7eb      	b.n	10a20 <LorawanNotifyAppOnRxdone+0x70>
   10a48:	200030e4 	.word	0x200030e4
   10a4c:	200033b8 	.word	0x200033b8
   10a50:	00011e99 	.word	0x00011e99
   10a54:	000108f5 	.word	0x000108f5
   10a58:	0000d069 	.word	0x0000d069
   10a5c:	00010959 	.word	0x00010959

00010a60 <LorawanCheckAndDoRetryOnTimeout>:
   10a60:	b513      	push	{r0, r1, r4, lr}
   10a62:	4c34      	ldr	r4, [pc, #208]	; (10b34 <LorawanCheckAndDoRetryOnTimeout+0xd4>)
   10a64:	0023      	movs	r3, r4
   10a66:	336c      	adds	r3, #108	; 0x6c
   10a68:	781b      	ldrb	r3, [r3, #0]
   10a6a:	0022      	movs	r2, r4
   10a6c:	07db      	lsls	r3, r3, #31
   10a6e:	d54d      	bpl.n	10b0c <LorawanCheckAndDoRetryOnTimeout+0xac>
   10a70:	0023      	movs	r3, r4
   10a72:	32bc      	adds	r2, #188	; 0xbc
   10a74:	33ba      	adds	r3, #186	; 0xba
   10a76:	7812      	ldrb	r2, [r2, #0]
   10a78:	781b      	ldrb	r3, [r3, #0]
   10a7a:	429a      	cmp	r2, r3
   10a7c:	d838      	bhi.n	10af0 <LorawanCheckAndDoRetryOnTimeout+0x90>
   10a7e:	23df      	movs	r3, #223	; 0xdf
   10a80:	005b      	lsls	r3, r3, #1
   10a82:	5ce3      	ldrb	r3, [r4, r3]
   10a84:	2b00      	cmp	r3, #0
   10a86:	d033      	beq.n	10af0 <LorawanCheckAndDoRetryOnTimeout+0x90>
   10a88:	0023      	movs	r3, r4
   10a8a:	33d4      	adds	r3, #212	; 0xd4
   10a8c:	781b      	ldrb	r3, [r3, #0]
   10a8e:	2b01      	cmp	r3, #1
   10a90:	d11a      	bne.n	10ac8 <LorawanCheckAndDoRetryOnTimeout+0x68>
   10a92:	0021      	movs	r1, r4
   10a94:	220e      	movs	r2, #14
   10a96:	315c      	adds	r1, #92	; 0x5c
   10a98:	780b      	ldrb	r3, [r1, #0]
   10a9a:	4393      	bics	r3, r2
   10a9c:	001a      	movs	r2, r3
   10a9e:	230c      	movs	r3, #12
   10aa0:	4313      	orrs	r3, r2
   10aa2:	700b      	strb	r3, [r1, #0]
   10aa4:	0023      	movs	r3, r4
   10aa6:	33b2      	adds	r3, #178	; 0xb2
   10aa8:	8819      	ldrh	r1, [r3, #0]
   10aaa:	23c0      	movs	r3, #192	; 0xc0
   10aac:	33ff      	adds	r3, #255	; 0xff
   10aae:	5ce3      	ldrb	r3, [r4, r3]
   10ab0:	2200      	movs	r2, #0
   10ab2:	1acb      	subs	r3, r1, r3
   10ab4:	21fa      	movs	r1, #250	; 0xfa
   10ab6:	34c8      	adds	r4, #200	; 0xc8
   10ab8:	0089      	lsls	r1, r1, #2
   10aba:	7820      	ldrb	r0, [r4, #0]
   10abc:	4359      	muls	r1, r3
   10abe:	9200      	str	r2, [sp, #0]
   10ac0:	4b1d      	ldr	r3, [pc, #116]	; (10b38 <LorawanCheckAndDoRetryOnTimeout+0xd8>)
   10ac2:	4c1e      	ldr	r4, [pc, #120]	; (10b3c <LorawanCheckAndDoRetryOnTimeout+0xdc>)
   10ac4:	47a0      	blx	r4
   10ac6:	bd13      	pop	{r0, r1, r4, pc}
   10ac8:	2b04      	cmp	r3, #4
   10aca:	d1fc      	bne.n	10ac6 <LorawanCheckAndDoRetryOnTimeout+0x66>
   10acc:	4b1c      	ldr	r3, [pc, #112]	; (10b40 <LorawanCheckAndDoRetryOnTimeout+0xe0>)
   10ace:	4798      	blx	r3
   10ad0:	34a6      	adds	r4, #166	; 0xa6
   10ad2:	300d      	adds	r0, #13
   10ad4:	8823      	ldrh	r3, [r4, #0]
   10ad6:	b280      	uxth	r0, r0
   10ad8:	4283      	cmp	r3, r0
   10ada:	d802      	bhi.n	10ae2 <LorawanCheckAndDoRetryOnTimeout+0x82>
   10adc:	4b19      	ldr	r3, [pc, #100]	; (10b44 <LorawanCheckAndDoRetryOnTimeout+0xe4>)
   10ade:	4798      	blx	r3
   10ae0:	e7f1      	b.n	10ac6 <LorawanCheckAndDoRetryOnTimeout+0x66>
   10ae2:	200e      	movs	r0, #14
   10ae4:	4b18      	ldr	r3, [pc, #96]	; (10b48 <LorawanCheckAndDoRetryOnTimeout+0xe8>)
   10ae6:	4798      	blx	r3
   10ae8:	4b18      	ldr	r3, [pc, #96]	; (10b4c <LorawanCheckAndDoRetryOnTimeout+0xec>)
   10aea:	4798      	blx	r3
   10aec:	4b18      	ldr	r3, [pc, #96]	; (10b50 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   10aee:	e7f6      	b.n	10ade <LorawanCheckAndDoRetryOnTimeout+0x7e>
   10af0:	2012      	movs	r0, #18
   10af2:	4b15      	ldr	r3, [pc, #84]	; (10b48 <LorawanCheckAndDoRetryOnTimeout+0xe8>)
   10af4:	4798      	blx	r3
   10af6:	4b15      	ldr	r3, [pc, #84]	; (10b4c <LorawanCheckAndDoRetryOnTimeout+0xec>)
   10af8:	4798      	blx	r3
   10afa:	34d4      	adds	r4, #212	; 0xd4
   10afc:	4b14      	ldr	r3, [pc, #80]	; (10b50 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   10afe:	4798      	blx	r3
   10b00:	7823      	ldrb	r3, [r4, #0]
   10b02:	2b04      	cmp	r3, #4
   10b04:	d1df      	bne.n	10ac6 <LorawanCheckAndDoRetryOnTimeout+0x66>
   10b06:	4b13      	ldr	r3, [pc, #76]	; (10b54 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   10b08:	4798      	blx	r3
   10b0a:	e7dc      	b.n	10ac6 <LorawanCheckAndDoRetryOnTimeout+0x66>
   10b0c:	0023      	movs	r3, r4
   10b0e:	32bb      	adds	r2, #187	; 0xbb
   10b10:	33b9      	adds	r3, #185	; 0xb9
   10b12:	7812      	ldrb	r2, [r2, #0]
   10b14:	781b      	ldrb	r3, [r3, #0]
   10b16:	429a      	cmp	r2, r3
   10b18:	d804      	bhi.n	10b24 <LorawanCheckAndDoRetryOnTimeout+0xc4>
   10b1a:	23df      	movs	r3, #223	; 0xdf
   10b1c:	005b      	lsls	r3, r3, #1
   10b1e:	5ce3      	ldrb	r3, [r4, r3]
   10b20:	2b00      	cmp	r3, #0
   10b22:	d1db      	bne.n	10adc <LorawanCheckAndDoRetryOnTimeout+0x7c>
   10b24:	4b0c      	ldr	r3, [pc, #48]	; (10b58 <LorawanCheckAndDoRetryOnTimeout+0xf8>)
   10b26:	4798      	blx	r3
   10b28:	4b09      	ldr	r3, [pc, #36]	; (10b50 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   10b2a:	4798      	blx	r3
   10b2c:	2008      	movs	r0, #8
   10b2e:	4b06      	ldr	r3, [pc, #24]	; (10b48 <LorawanCheckAndDoRetryOnTimeout+0xe8>)
   10b30:	4798      	blx	r3
   10b32:	e7c8      	b.n	10ac6 <LorawanCheckAndDoRetryOnTimeout+0x66>
   10b34:	200030e4 	.word	0x200030e4
   10b38:	00010b5d 	.word	0x00010b5d
   10b3c:	0000cd65 	.word	0x0000cd65
   10b40:	0000f5e5 	.word	0x0000f5e5
   10b44:	0001023d 	.word	0x0001023d
   10b48:	000108f5 	.word	0x000108f5
   10b4c:	0000fcbd 	.word	0x0000fcbd
   10b50:	0000f561 	.word	0x0000f561
   10b54:	0000e645 	.word	0x0000e645
   10b58:	0000fced 	.word	0x0000fced

00010b5c <AckRetransmissionCallback>:
   10b5c:	b510      	push	{r4, lr}
   10b5e:	4c1c      	ldr	r4, [pc, #112]	; (10bd0 <AckRetransmissionCallback+0x74>)
   10b60:	0023      	movs	r3, r4
   10b62:	335c      	adds	r3, #92	; 0x5c
   10b64:	781b      	ldrb	r3, [r3, #0]
   10b66:	2b7f      	cmp	r3, #127	; 0x7f
   10b68:	d82e      	bhi.n	10bc8 <AckRetransmissionCallback+0x6c>
   10b6a:	0023      	movs	r3, r4
   10b6c:	33d4      	adds	r3, #212	; 0xd4
   10b6e:	781b      	ldrb	r3, [r3, #0]
   10b70:	2b04      	cmp	r3, #4
   10b72:	d102      	bne.n	10b7a <AckRetransmissionCallback+0x1e>
   10b74:	4b17      	ldr	r3, [pc, #92]	; (10bd4 <AckRetransmissionCallback+0x78>)
   10b76:	4798      	blx	r3
   10b78:	e01f      	b.n	10bba <AckRetransmissionCallback+0x5e>
   10b7a:	2b01      	cmp	r3, #1
   10b7c:	d11d      	bne.n	10bba <AckRetransmissionCallback+0x5e>
   10b7e:	0022      	movs	r2, r4
   10b80:	0023      	movs	r3, r4
   10b82:	32bc      	adds	r2, #188	; 0xbc
   10b84:	33ba      	adds	r3, #186	; 0xba
   10b86:	7812      	ldrb	r2, [r2, #0]
   10b88:	781b      	ldrb	r3, [r3, #0]
   10b8a:	429a      	cmp	r2, r3
   10b8c:	d816      	bhi.n	10bbc <AckRetransmissionCallback+0x60>
   10b8e:	23df      	movs	r3, #223	; 0xdf
   10b90:	005b      	lsls	r3, r3, #1
   10b92:	5ce3      	ldrb	r3, [r4, r3]
   10b94:	2b00      	cmp	r3, #0
   10b96:	d011      	beq.n	10bbc <AckRetransmissionCallback+0x60>
   10b98:	4b0f      	ldr	r3, [pc, #60]	; (10bd8 <AckRetransmissionCallback+0x7c>)
   10b9a:	4798      	blx	r3
   10b9c:	34a6      	adds	r4, #166	; 0xa6
   10b9e:	300d      	adds	r0, #13
   10ba0:	8823      	ldrh	r3, [r4, #0]
   10ba2:	b280      	uxth	r0, r0
   10ba4:	4283      	cmp	r3, r0
   10ba6:	d801      	bhi.n	10bac <AckRetransmissionCallback+0x50>
   10ba8:	4b0c      	ldr	r3, [pc, #48]	; (10bdc <AckRetransmissionCallback+0x80>)
   10baa:	e7e4      	b.n	10b76 <AckRetransmissionCallback+0x1a>
   10bac:	4b0c      	ldr	r3, [pc, #48]	; (10be0 <AckRetransmissionCallback+0x84>)
   10bae:	4798      	blx	r3
   10bb0:	4b0c      	ldr	r3, [pc, #48]	; (10be4 <AckRetransmissionCallback+0x88>)
   10bb2:	4798      	blx	r3
   10bb4:	200e      	movs	r0, #14
   10bb6:	4b0c      	ldr	r3, [pc, #48]	; (10be8 <AckRetransmissionCallback+0x8c>)
   10bb8:	4798      	blx	r3
   10bba:	bd10      	pop	{r4, pc}
   10bbc:	4b08      	ldr	r3, [pc, #32]	; (10be0 <AckRetransmissionCallback+0x84>)
   10bbe:	4798      	blx	r3
   10bc0:	4b08      	ldr	r3, [pc, #32]	; (10be4 <AckRetransmissionCallback+0x88>)
   10bc2:	4798      	blx	r3
   10bc4:	2012      	movs	r0, #18
   10bc6:	e7f6      	b.n	10bb6 <AckRetransmissionCallback+0x5a>
   10bc8:	4b05      	ldr	r3, [pc, #20]	; (10be0 <AckRetransmissionCallback+0x84>)
   10bca:	4798      	blx	r3
   10bcc:	4b05      	ldr	r3, [pc, #20]	; (10be4 <AckRetransmissionCallback+0x88>)
   10bce:	e7d2      	b.n	10b76 <AckRetransmissionCallback+0x1a>
   10bd0:	200030e4 	.word	0x200030e4
   10bd4:	00010a61 	.word	0x00010a61
   10bd8:	0000f5e5 	.word	0x0000f5e5
   10bdc:	0001023d 	.word	0x0001023d
   10be0:	0000fcbd 	.word	0x0000fcbd
   10be4:	0000f561 	.word	0x0000f561
   10be8:	000108f5 	.word	0x000108f5

00010bec <LORAWAN_RxTimeout>:
   10bec:	4b23      	ldr	r3, [pc, #140]	; (10c7c <LORAWAN_RxTimeout+0x90>)
   10bee:	b510      	push	{r4, lr}
   10bf0:	001a      	movs	r2, r3
   10bf2:	325c      	adds	r2, #92	; 0x5c
   10bf4:	7812      	ldrb	r2, [r2, #0]
   10bf6:	b251      	sxtb	r1, r2
   10bf8:	2900      	cmp	r1, #0
   10bfa:	db23      	blt.n	10c44 <LORAWAN_RxTimeout+0x58>
   10bfc:	0019      	movs	r1, r3
   10bfe:	31d4      	adds	r1, #212	; 0xd4
   10c00:	7809      	ldrb	r1, [r1, #0]
   10c02:	2904      	cmp	r1, #4
   10c04:	d104      	bne.n	10c10 <LORAWAN_RxTimeout+0x24>
   10c06:	07d1      	lsls	r1, r2, #31
   10c08:	d502      	bpl.n	10c10 <LORAWAN_RxTimeout+0x24>
   10c0a:	4b1d      	ldr	r3, [pc, #116]	; (10c80 <LORAWAN_RxTimeout+0x94>)
   10c0c:	4798      	blx	r3
   10c0e:	bd10      	pop	{r4, pc}
   10c10:	210e      	movs	r1, #14
   10c12:	0010      	movs	r0, r2
   10c14:	4008      	ands	r0, r1
   10c16:	2806      	cmp	r0, #6
   10c18:	d107      	bne.n	10c2a <LORAWAN_RxTimeout+0x3e>
   10c1a:	335c      	adds	r3, #92	; 0x5c
   10c1c:	781a      	ldrb	r2, [r3, #0]
   10c1e:	438a      	bics	r2, r1
   10c20:	0011      	movs	r1, r2
   10c22:	2208      	movs	r2, #8
   10c24:	430a      	orrs	r2, r1
   10c26:	701a      	strb	r2, [r3, #0]
   10c28:	e7f1      	b.n	10c0e <LORAWAN_RxTimeout+0x22>
   10c2a:	2004      	movs	r0, #4
   10c2c:	336c      	adds	r3, #108	; 0x6c
   10c2e:	781b      	ldrb	r3, [r3, #0]
   10c30:	4203      	tst	r3, r0
   10c32:	d002      	beq.n	10c3a <LORAWAN_RxTimeout+0x4e>
   10c34:	4b13      	ldr	r3, [pc, #76]	; (10c84 <LORAWAN_RxTimeout+0x98>)
   10c36:	4798      	blx	r3
   10c38:	e7e9      	b.n	10c0e <LORAWAN_RxTimeout+0x22>
   10c3a:	07d3      	lsls	r3, r2, #31
   10c3c:	d5e7      	bpl.n	10c0e <LORAWAN_RxTimeout+0x22>
   10c3e:	4b12      	ldr	r3, [pc, #72]	; (10c88 <LORAWAN_RxTimeout+0x9c>)
   10c40:	4798      	blx	r3
   10c42:	e7e4      	b.n	10c0e <LORAWAN_RxTimeout+0x22>
   10c44:	4811      	ldr	r0, [pc, #68]	; (10c8c <LORAWAN_RxTimeout+0xa0>)
   10c46:	7841      	ldrb	r1, [r0, #1]
   10c48:	7802      	ldrb	r2, [r0, #0]
   10c4a:	0209      	lsls	r1, r1, #8
   10c4c:	4311      	orrs	r1, r2
   10c4e:	7882      	ldrb	r2, [r0, #2]
   10c50:	0412      	lsls	r2, r2, #16
   10c52:	4311      	orrs	r1, r2
   10c54:	78c2      	ldrb	r2, [r0, #3]
   10c56:	0612      	lsls	r2, r2, #24
   10c58:	430a      	orrs	r2, r1
   10c5a:	d0d8      	beq.n	10c0e <LORAWAN_RxTimeout+0x22>
   10c5c:	21da      	movs	r1, #218	; 0xda
   10c5e:	2001      	movs	r0, #1
   10c60:	0049      	lsls	r1, r1, #1
   10c62:	5458      	strb	r0, [r3, r1]
   10c64:	0019      	movs	r1, r3
   10c66:	2404      	movs	r4, #4
   10c68:	31e0      	adds	r1, #224	; 0xe0
   10c6a:	700c      	strb	r4, [r1, #0]
   10c6c:	001c      	movs	r4, r3
   10c6e:	33dc      	adds	r3, #220	; 0xdc
   10c70:	34e4      	adds	r4, #228	; 0xe4
   10c72:	7020      	strb	r0, [r4, #0]
   10c74:	6818      	ldr	r0, [r3, #0]
   10c76:	4790      	blx	r2
   10c78:	e7c9      	b.n	10c0e <LORAWAN_RxTimeout+0x22>
   10c7a:	46c0      	nop			; (mov r8, r8)
   10c7c:	200030e4 	.word	0x200030e4
   10c80:	00011e6d 	.word	0x00011e6d
   10c84:	0000fd11 	.word	0x0000fd11
   10c88:	00010a61 	.word	0x00010a61
   10c8c:	200033b8 	.word	0x200033b8

00010c90 <LorawanConfigureRadioForRX2>:
   10c90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10c92:	466b      	mov	r3, sp
   10c94:	4c21      	ldr	r4, [pc, #132]	; (10d1c <LorawanConfigureRadioForRX2+0x8c>)
   10c96:	1cdd      	adds	r5, r3, #3
   10c98:	0023      	movs	r3, r4
   10c9a:	2100      	movs	r1, #0
   10c9c:	336c      	adds	r3, #108	; 0x6c
   10c9e:	781b      	ldrb	r3, [r3, #0]
   10ca0:	0007      	movs	r7, r0
   10ca2:	7029      	strb	r1, [r5, #0]
   10ca4:	075b      	lsls	r3, r3, #29
   10ca6:	d52c      	bpl.n	10d02 <LorawanConfigureRadioForRX2+0x72>
   10ca8:	002a      	movs	r2, r5
   10caa:	2009      	movs	r0, #9
   10cac:	4b1c      	ldr	r3, [pc, #112]	; (10d20 <LorawanConfigureRadioForRX2+0x90>)
   10cae:	4798      	blx	r3
   10cb0:	0022      	movs	r2, r4
   10cb2:	0023      	movs	r3, r4
   10cb4:	324c      	adds	r2, #76	; 0x4c
   10cb6:	8811      	ldrh	r1, [r2, #0]
   10cb8:	334a      	adds	r3, #74	; 0x4a
   10cba:	881b      	ldrh	r3, [r3, #0]
   10cbc:	0409      	lsls	r1, r1, #16
   10cbe:	4319      	orrs	r1, r3
   10cc0:	7828      	ldrb	r0, [r5, #0]
   10cc2:	4b18      	ldr	r3, [pc, #96]	; (10d24 <LorawanConfigureRadioForRX2+0x94>)
   10cc4:	4798      	blx	r3
   10cc6:	2300      	movs	r3, #0
   10cc8:	0022      	movs	r2, r4
   10cca:	ae01      	add	r6, sp, #4
   10ccc:	7033      	strb	r3, [r6, #0]
   10cce:	32d4      	adds	r2, #212	; 0xd4
   10cd0:	7812      	ldrb	r2, [r2, #0]
   10cd2:	2a04      	cmp	r2, #4
   10cd4:	d11a      	bne.n	10d0c <LorawanConfigureRadioForRX2+0x7c>
   10cd6:	345c      	adds	r4, #92	; 0x5c
   10cd8:	7822      	ldrb	r2, [r4, #0]
   10cda:	07d2      	lsls	r2, r2, #31
   10cdc:	d516      	bpl.n	10d0c <LorawanConfigureRadioForRX2+0x7c>
   10cde:	8073      	strh	r3, [r6, #2]
   10ce0:	0030      	movs	r0, r6
   10ce2:	4b11      	ldr	r3, [pc, #68]	; (10d28 <LorawanConfigureRadioForRX2+0x98>)
   10ce4:	4798      	blx	r3
   10ce6:	1e04      	subs	r4, r0, #0
   10ce8:	d00a      	beq.n	10d00 <LorawanConfigureRadioForRX2+0x70>
   10cea:	4b10      	ldr	r3, [pc, #64]	; (10d2c <LorawanConfigureRadioForRX2+0x9c>)
   10cec:	4798      	blx	r3
   10cee:	4b10      	ldr	r3, [pc, #64]	; (10d30 <LorawanConfigureRadioForRX2+0xa0>)
   10cf0:	4798      	blx	r3
   10cf2:	4b10      	ldr	r3, [pc, #64]	; (10d34 <LorawanConfigureRadioForRX2+0xa4>)
   10cf4:	4798      	blx	r3
   10cf6:	2f00      	cmp	r7, #0
   10cf8:	d002      	beq.n	10d00 <LorawanConfigureRadioForRX2+0x70>
   10cfa:	0020      	movs	r0, r4
   10cfc:	4b0e      	ldr	r3, [pc, #56]	; (10d38 <LorawanConfigureRadioForRX2+0xa8>)
   10cfe:	4798      	blx	r3
   10d00:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   10d02:	0023      	movs	r3, r4
   10d04:	334e      	adds	r3, #78	; 0x4e
   10d06:	781b      	ldrb	r3, [r3, #0]
   10d08:	702b      	strb	r3, [r5, #0]
   10d0a:	e7d1      	b.n	10cb0 <LorawanConfigureRadioForRX2+0x20>
   10d0c:	466b      	mov	r3, sp
   10d0e:	0029      	movs	r1, r5
   10d10:	1d9a      	adds	r2, r3, #6
   10d12:	2003      	movs	r0, #3
   10d14:	4b02      	ldr	r3, [pc, #8]	; (10d20 <LorawanConfigureRadioForRX2+0x90>)
   10d16:	4798      	blx	r3
   10d18:	e7e2      	b.n	10ce0 <LorawanConfigureRadioForRX2+0x50>
   10d1a:	46c0      	nop			; (mov r8, r8)
   10d1c:	200030e4 	.word	0x200030e4
   10d20:	0000c8f9 	.word	0x0000c8f9
   10d24:	00010165 	.word	0x00010165
   10d28:	0000ef35 	.word	0x0000ef35
   10d2c:	0000fcbd 	.word	0x0000fcbd
   10d30:	0000fced 	.word	0x0000fced
   10d34:	0000f561 	.word	0x0000f561
   10d38:	000108f5 	.word	0x000108f5

00010d3c <SetReceptionNotOkState>:
   10d3c:	22da      	movs	r2, #218	; 0xda
   10d3e:	2101      	movs	r1, #1
   10d40:	4b19      	ldr	r3, [pc, #100]	; (10da8 <SetReceptionNotOkState+0x6c>)
   10d42:	0052      	lsls	r2, r2, #1
   10d44:	b510      	push	{r4, lr}
   10d46:	5499      	strb	r1, [r3, r2]
   10d48:	001a      	movs	r2, r3
   10d4a:	0019      	movs	r1, r3
   10d4c:	32d4      	adds	r2, #212	; 0xd4
   10d4e:	7812      	ldrb	r2, [r2, #0]
   10d50:	315c      	adds	r1, #92	; 0x5c
   10d52:	200e      	movs	r0, #14
   10d54:	2a01      	cmp	r2, #1
   10d56:	d11d      	bne.n	10d94 <SetReceptionNotOkState+0x58>
   10d58:	780a      	ldrb	r2, [r1, #0]
   10d5a:	4002      	ands	r2, r0
   10d5c:	2a0a      	cmp	r2, #10
   10d5e:	d006      	beq.n	10d6e <SetReceptionNotOkState+0x32>
   10d60:	2a06      	cmp	r2, #6
   10d62:	d113      	bne.n	10d8c <SetReceptionNotOkState+0x50>
   10d64:	001a      	movs	r2, r3
   10d66:	32d0      	adds	r2, #208	; 0xd0
   10d68:	7812      	ldrb	r2, [r2, #0]
   10d6a:	2a00      	cmp	r2, #0
   10d6c:	d00e      	beq.n	10d8c <SetReceptionNotOkState+0x50>
   10d6e:	0019      	movs	r1, r3
   10d70:	2001      	movs	r0, #1
   10d72:	316c      	adds	r1, #108	; 0x6c
   10d74:	780a      	ldrb	r2, [r1, #0]
   10d76:	240e      	movs	r4, #14
   10d78:	4382      	bics	r2, r0
   10d7a:	700a      	strb	r2, [r1, #0]
   10d7c:	001a      	movs	r2, r3
   10d7e:	325c      	adds	r2, #92	; 0x5c
   10d80:	7811      	ldrb	r1, [r2, #0]
   10d82:	43a1      	bics	r1, r4
   10d84:	7011      	strb	r1, [r2, #0]
   10d86:	7851      	ldrb	r1, [r2, #1]
   10d88:	4381      	bics	r1, r0
   10d8a:	7051      	strb	r1, [r2, #1]
   10d8c:	2200      	movs	r2, #0
   10d8e:	33d0      	adds	r3, #208	; 0xd0
   10d90:	701a      	strb	r2, [r3, #0]
   10d92:	bd10      	pop	{r4, pc}
   10d94:	230a      	movs	r3, #10
   10d96:	780a      	ldrb	r2, [r1, #0]
   10d98:	4382      	bics	r2, r0
   10d9a:	4313      	orrs	r3, r2
   10d9c:	700b      	strb	r3, [r1, #0]
   10d9e:	2000      	movs	r0, #0
   10da0:	4b02      	ldr	r3, [pc, #8]	; (10dac <SetReceptionNotOkState+0x70>)
   10da2:	4798      	blx	r3
   10da4:	e7f5      	b.n	10d92 <SetReceptionNotOkState+0x56>
   10da6:	46c0      	nop			; (mov r8, r8)
   10da8:	200030e4 	.word	0x200030e4
   10dac:	00010c91 	.word	0x00010c91

00010db0 <UpdateCurrentDataRateAfterDataRangeChanges>:
   10db0:	4b09      	ldr	r3, [pc, #36]	; (10dd8 <UpdateCurrentDataRateAfterDataRangeChanges+0x28>)
   10db2:	001a      	movs	r2, r3
   10db4:	32cb      	adds	r2, #203	; 0xcb
   10db6:	7811      	ldrb	r1, [r2, #0]
   10db8:	001a      	movs	r2, r3
   10dba:	32bf      	adds	r2, #191	; 0xbf
   10dbc:	7810      	ldrb	r0, [r2, #0]
   10dbe:	4288      	cmp	r0, r1
   10dc0:	d900      	bls.n	10dc4 <UpdateCurrentDataRateAfterDataRangeChanges+0x14>
   10dc2:	7011      	strb	r1, [r2, #0]
   10dc4:	001a      	movs	r2, r3
   10dc6:	33bf      	adds	r3, #191	; 0xbf
   10dc8:	32ca      	adds	r2, #202	; 0xca
   10dca:	7812      	ldrb	r2, [r2, #0]
   10dcc:	7819      	ldrb	r1, [r3, #0]
   10dce:	4291      	cmp	r1, r2
   10dd0:	d200      	bcs.n	10dd4 <UpdateCurrentDataRateAfterDataRangeChanges+0x24>
   10dd2:	701a      	strb	r2, [r3, #0]
   10dd4:	4770      	bx	lr
   10dd6:	46c0      	nop			; (mov r8, r8)
   10dd8:	200030e4 	.word	0x200030e4

00010ddc <ExecuteNewChannel>:
   10ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
   10dde:	b08d      	sub	sp, #52	; 0x34
   10de0:	7807      	ldrb	r7, [r0, #0]
   10de2:	ab02      	add	r3, sp, #8
   10de4:	0006      	movs	r6, r0
   10de6:	71df      	strb	r7, [r3, #7]
   10de8:	1c41      	adds	r1, r0, #1
   10dea:	4b59      	ldr	r3, [pc, #356]	; (10f50 <ExecuteNewChannel+0x174>)
   10dec:	2204      	movs	r2, #4
   10dee:	a808      	add	r0, sp, #32
   10df0:	4798      	blx	r3
   10df2:	9b08      	ldr	r3, [sp, #32]
   10df4:	4c57      	ldr	r4, [pc, #348]	; (10f54 <ExecuteNewChannel+0x178>)
   10df6:	021d      	lsls	r5, r3, #8
   10df8:	2364      	movs	r3, #100	; 0x64
   10dfa:	0a2d      	lsrs	r5, r5, #8
   10dfc:	435d      	muls	r5, r3
   10dfe:	1d73      	adds	r3, r6, #5
   10e00:	9301      	str	r3, [sp, #4]
   10e02:	0023      	movs	r3, r4
   10e04:	9508      	str	r5, [sp, #32]
   10e06:	33d6      	adds	r3, #214	; 0xd6
   10e08:	781b      	ldrb	r3, [r3, #0]
   10e0a:	3b02      	subs	r3, #2
   10e0c:	2b01      	cmp	r3, #1
   10e0e:	d800      	bhi.n	10e12 <ExecuteNewChannel+0x36>
   10e10:	e092      	b.n	10f38 <ExecuteNewChannel+0x15c>
   10e12:	7933      	ldrb	r3, [r6, #4]
   10e14:	a904      	add	r1, sp, #16
   10e16:	9300      	str	r3, [sp, #0]
   10e18:	2300      	movs	r3, #0
   10e1a:	2015      	movs	r0, #21
   10e1c:	4e4e      	ldr	r6, [pc, #312]	; (10f58 <ExecuteNewChannel+0x17c>)
   10e1e:	700f      	strb	r7, [r1, #0]
   10e20:	704b      	strb	r3, [r1, #1]
   10e22:	47b0      	blx	r6
   10e24:	2808      	cmp	r0, #8
   10e26:	d12b      	bne.n	10e80 <ExecuteNewChannel+0xa4>
   10e28:	466a      	mov	r2, sp
   10e2a:	ab02      	add	r3, sp, #8
   10e2c:	79db      	ldrb	r3, [r3, #7]
   10e2e:	7812      	ldrb	r2, [r2, #0]
   10e30:	af06      	add	r7, sp, #24
   10e32:	a90a      	add	r1, sp, #40	; 0x28
   10e34:	3806      	subs	r0, #6
   10e36:	703b      	strb	r3, [r7, #0]
   10e38:	707a      	strb	r2, [r7, #1]
   10e3a:	710b      	strb	r3, [r1, #4]
   10e3c:	950a      	str	r5, [sp, #40]	; 0x28
   10e3e:	47b0      	blx	r6
   10e40:	2808      	cmp	r0, #8
   10e42:	d001      	beq.n	10e48 <ExecuteNewChannel+0x6c>
   10e44:	2d00      	cmp	r5, #0
   10e46:	d10b      	bne.n	10e60 <ExecuteNewChannel+0x84>
   10e48:	0023      	movs	r3, r4
   10e4a:	33b8      	adds	r3, #184	; 0xb8
   10e4c:	781a      	ldrb	r2, [r3, #0]
   10e4e:	2303      	movs	r3, #3
   10e50:	4353      	muls	r3, r2
   10e52:	2280      	movs	r2, #128	; 0x80
   10e54:	18e3      	adds	r3, r4, r3
   10e56:	3370      	adds	r3, #112	; 0x70
   10e58:	7899      	ldrb	r1, [r3, #2]
   10e5a:	4252      	negs	r2, r2
   10e5c:	430a      	orrs	r2, r1
   10e5e:	709a      	strb	r2, [r3, #2]
   10e60:	0039      	movs	r1, r7
   10e62:	2012      	movs	r0, #18
   10e64:	47b0      	blx	r6
   10e66:	2808      	cmp	r0, #8
   10e68:	d10a      	bne.n	10e80 <ExecuteNewChannel+0xa4>
   10e6a:	0023      	movs	r3, r4
   10e6c:	33b8      	adds	r3, #184	; 0xb8
   10e6e:	781a      	ldrb	r2, [r3, #0]
   10e70:	2303      	movs	r3, #3
   10e72:	4353      	muls	r3, r2
   10e74:	2240      	movs	r2, #64	; 0x40
   10e76:	18e3      	adds	r3, r4, r3
   10e78:	3370      	adds	r3, #112	; 0x70
   10e7a:	7899      	ldrb	r1, [r3, #2]
   10e7c:	430a      	orrs	r2, r1
   10e7e:	709a      	strb	r2, [r3, #2]
   10e80:	0023      	movs	r3, r4
   10e82:	33b8      	adds	r3, #184	; 0xb8
   10e84:	781a      	ldrb	r2, [r3, #0]
   10e86:	2303      	movs	r3, #3
   10e88:	4353      	muls	r3, r2
   10e8a:	18e3      	adds	r3, r4, r3
   10e8c:	3370      	adds	r3, #112	; 0x70
   10e8e:	789b      	ldrb	r3, [r3, #2]
   10e90:	09da      	lsrs	r2, r3, #7
   10e92:	2a01      	cmp	r2, #1
   10e94:	d150      	bne.n	10f38 <ExecuteNewChannel+0x15c>
   10e96:	065b      	lsls	r3, r3, #25
   10e98:	d54e      	bpl.n	10f38 <ExecuteNewChannel+0x15c>
   10e9a:	4e30      	ldr	r6, [pc, #192]	; (10f5c <ExecuteNewChannel+0x180>)
   10e9c:	2d00      	cmp	r5, #0
   10e9e:	d04e      	beq.n	10f3e <ExecuteNewChannel+0x162>
   10ea0:	a906      	add	r1, sp, #24
   10ea2:	2012      	movs	r0, #18
   10ea4:	47b0      	blx	r6
   10ea6:	ad07      	add	r5, sp, #28
   10ea8:	a90a      	add	r1, sp, #40	; 0x28
   10eaa:	2000      	movs	r0, #0
   10eac:	47b0      	blx	r6
   10eae:	002a      	movs	r2, r5
   10eb0:	2100      	movs	r1, #0
   10eb2:	2014      	movs	r0, #20
   10eb4:	4f2a      	ldr	r7, [pc, #168]	; (10f60 <ExecuteNewChannel+0x184>)
   10eb6:	47b8      	blx	r7
   10eb8:	0023      	movs	r3, r4
   10eba:	782a      	ldrb	r2, [r5, #0]
   10ebc:	33ca      	adds	r3, #202	; 0xca
   10ebe:	701a      	strb	r2, [r3, #0]
   10ec0:	0023      	movs	r3, r4
   10ec2:	786a      	ldrb	r2, [r5, #1]
   10ec4:	33cb      	adds	r3, #203	; 0xcb
   10ec6:	701a      	strb	r2, [r3, #0]
   10ec8:	34f0      	adds	r4, #240	; 0xf0
   10eca:	4b26      	ldr	r3, [pc, #152]	; (10f64 <ExecuteNewChannel+0x188>)
   10ecc:	4798      	blx	r3
   10ece:	7823      	ldrb	r3, [r4, #0]
   10ed0:	079b      	lsls	r3, r3, #30
   10ed2:	d50e      	bpl.n	10ef2 <ExecuteNewChannel+0x116>
   10ed4:	2416      	movs	r4, #22
   10ed6:	ab02      	add	r3, sp, #8
   10ed8:	18e4      	adds	r4, r4, r3
   10eda:	1dd9      	adds	r1, r3, #7
   10edc:	0022      	movs	r2, r4
   10ede:	201e      	movs	r0, #30
   10ee0:	47b8      	blx	r7
   10ee2:	ab02      	add	r3, sp, #8
   10ee4:	79db      	ldrb	r3, [r3, #7]
   10ee6:	a909      	add	r1, sp, #36	; 0x24
   10ee8:	708b      	strb	r3, [r1, #2]
   10eea:	8823      	ldrh	r3, [r4, #0]
   10eec:	201e      	movs	r0, #30
   10eee:	800b      	strh	r3, [r1, #0]
   10ef0:	47b0      	blx	r6
   10ef2:	ab02      	add	r3, sp, #8
   10ef4:	79db      	ldrb	r3, [r3, #7]
   10ef6:	a905      	add	r1, sp, #20
   10ef8:	700b      	strb	r3, [r1, #0]
   10efa:	2301      	movs	r3, #1
   10efc:	2016      	movs	r0, #22
   10efe:	704b      	strb	r3, [r1, #1]
   10f00:	4b16      	ldr	r3, [pc, #88]	; (10f5c <ExecuteNewChannel+0x180>)
   10f02:	4798      	blx	r3
   10f04:	ad09      	add	r5, sp, #36	; 0x24
   10f06:	2100      	movs	r1, #0
   10f08:	002a      	movs	r2, r5
   10f0a:	4b15      	ldr	r3, [pc, #84]	; (10f60 <ExecuteNewChannel+0x184>)
   10f0c:	2014      	movs	r0, #20
   10f0e:	4798      	blx	r3
   10f10:	4c10      	ldr	r4, [pc, #64]	; (10f54 <ExecuteNewChannel+0x178>)
   10f12:	782a      	ldrb	r2, [r5, #0]
   10f14:	0023      	movs	r3, r4
   10f16:	33ca      	adds	r3, #202	; 0xca
   10f18:	701a      	strb	r2, [r3, #0]
   10f1a:	0023      	movs	r3, r4
   10f1c:	786a      	ldrb	r2, [r5, #1]
   10f1e:	33cb      	adds	r3, #203	; 0xcb
   10f20:	701a      	strb	r2, [r3, #0]
   10f22:	4b10      	ldr	r3, [pc, #64]	; (10f64 <ExecuteNewChannel+0x188>)
   10f24:	4798      	blx	r3
   10f26:	2304      	movs	r3, #4
   10f28:	345c      	adds	r4, #92	; 0x5c
   10f2a:	7862      	ldrb	r2, [r4, #1]
   10f2c:	210b      	movs	r1, #11
   10f2e:	4313      	orrs	r3, r2
   10f30:	7063      	strb	r3, [r4, #1]
   10f32:	2001      	movs	r0, #1
   10f34:	4b0c      	ldr	r3, [pc, #48]	; (10f68 <ExecuteNewChannel+0x18c>)
   10f36:	4798      	blx	r3
   10f38:	9801      	ldr	r0, [sp, #4]
   10f3a:	b00d      	add	sp, #52	; 0x34
   10f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10f3e:	ab02      	add	r3, sp, #8
   10f40:	79db      	ldrb	r3, [r3, #7]
   10f42:	a905      	add	r1, sp, #20
   10f44:	2016      	movs	r0, #22
   10f46:	700b      	strb	r3, [r1, #0]
   10f48:	704d      	strb	r5, [r1, #1]
   10f4a:	47b0      	blx	r6
   10f4c:	e7da      	b.n	10f04 <ExecuteNewChannel+0x128>
   10f4e:	46c0      	nop			; (mov r8, r8)
   10f50:	000155bf 	.word	0x000155bf
   10f54:	200030e4 	.word	0x200030e4
   10f58:	0000c915 	.word	0x0000c915
   10f5c:	0000c931 	.word	0x0000c931
   10f60:	0000c8f9 	.word	0x0000c8f9
   10f64:	00010db1 	.word	0x00010db1
   10f68:	0000948d 	.word	0x0000948d

00010f6c <MacExecuteCommands>:
   10f6c:	2300      	movs	r3, #0
   10f6e:	b5f0      	push	{r4, r5, r6, r7, lr}
   10f70:	0007      	movs	r7, r0
   10f72:	2501      	movs	r5, #1
   10f74:	b087      	sub	sp, #28
   10f76:	9002      	str	r0, [sp, #8]
   10f78:	9103      	str	r1, [sp, #12]
   10f7a:	9300      	str	r3, [sp, #0]
   10f7c:	9b02      	ldr	r3, [sp, #8]
   10f7e:	9a03      	ldr	r2, [sp, #12]
   10f80:	4e63      	ldr	r6, [pc, #396]	; (11110 <MacExecuteCommands+0x1a4>)
   10f82:	1898      	adds	r0, r3, r2
   10f84:	4287      	cmp	r7, r0
   10f86:	d353      	bcc.n	11030 <MacExecuteCommands+0xc4>
   10f88:	23dd      	movs	r3, #221	; 0xdd
   10f8a:	005b      	lsls	r3, r3, #1
   10f8c:	5cf3      	ldrb	r3, [r6, r3]
   10f8e:	2b00      	cmp	r3, #0
   10f90:	d000      	beq.n	10f94 <MacExecuteCommands+0x28>
   10f92:	e072      	b.n	1107a <MacExecuteCommands+0x10e>
   10f94:	0038      	movs	r0, r7
   10f96:	b007      	add	sp, #28
   10f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10f9a:	0033      	movs	r3, r6
   10f9c:	787a      	ldrb	r2, [r7, #1]
   10f9e:	33bd      	adds	r3, #189	; 0xbd
   10fa0:	701a      	strb	r2, [r3, #0]
   10fa2:	0033      	movs	r3, r6
   10fa4:	78ba      	ldrb	r2, [r7, #2]
   10fa6:	33be      	adds	r3, #190	; 0xbe
   10fa8:	701a      	strb	r2, [r3, #0]
   10faa:	2203      	movs	r2, #3
   10fac:	9b01      	ldr	r3, [sp, #4]
   10fae:	1cfc      	adds	r4, r7, #3
   10fb0:	4353      	muls	r3, r2
   10fb2:	18f3      	adds	r3, r6, r3
   10fb4:	3371      	adds	r3, #113	; 0x71
   10fb6:	32fc      	adds	r2, #252	; 0xfc
   10fb8:	701a      	strb	r2, [r3, #0]
   10fba:	0032      	movs	r2, r6
   10fbc:	2103      	movs	r1, #3
   10fbe:	32b8      	adds	r2, #184	; 0xb8
   10fc0:	7813      	ldrb	r3, [r2, #0]
   10fc2:	4359      	muls	r1, r3
   10fc4:	1876      	adds	r6, r6, r1
   10fc6:	3671      	adds	r6, #113	; 0x71
   10fc8:	7831      	ldrb	r1, [r6, #0]
   10fca:	29ff      	cmp	r1, #255	; 0xff
   10fcc:	d003      	beq.n	10fd6 <MacExecuteCommands+0x6a>
   10fce:	2b0f      	cmp	r3, #15
   10fd0:	d801      	bhi.n	10fd6 <MacExecuteCommands+0x6a>
   10fd2:	3301      	adds	r3, #1
   10fd4:	7013      	strb	r3, [r2, #0]
   10fd6:	0027      	movs	r7, r4
   10fd8:	e7d0      	b.n	10f7c <MacExecuteCommands+0x10>
   10fda:	0020      	movs	r0, r4
   10fdc:	4b4d      	ldr	r3, [pc, #308]	; (11114 <MacExecuteCommands+0x1a8>)
   10fde:	4798      	blx	r3
   10fe0:	0004      	movs	r4, r0
   10fe2:	e7ea      	b.n	10fba <MacExecuteCommands+0x4e>
   10fe4:	0020      	movs	r0, r4
   10fe6:	4b4c      	ldr	r3, [pc, #304]	; (11118 <MacExecuteCommands+0x1ac>)
   10fe8:	e7f9      	b.n	10fde <MacExecuteCommands+0x72>
   10fea:	0020      	movs	r0, r4
   10fec:	4b4b      	ldr	r3, [pc, #300]	; (1111c <MacExecuteCommands+0x1b0>)
   10fee:	e7f6      	b.n	10fde <MacExecuteCommands+0x72>
   10ff0:	0020      	movs	r0, r4
   10ff2:	4b4b      	ldr	r3, [pc, #300]	; (11120 <MacExecuteCommands+0x1b4>)
   10ff4:	e7f3      	b.n	10fde <MacExecuteCommands+0x72>
   10ff6:	230f      	movs	r3, #15
   10ff8:	7878      	ldrb	r0, [r7, #1]
   10ffa:	1cbc      	adds	r4, r7, #2
   10ffc:	4018      	ands	r0, r3
   10ffe:	4b49      	ldr	r3, [pc, #292]	; (11124 <MacExecuteCommands+0x1b8>)
   11000:	4798      	blx	r3
   11002:	0032      	movs	r2, r6
   11004:	2380      	movs	r3, #128	; 0x80
   11006:	325c      	adds	r2, #92	; 0x5c
   11008:	7851      	ldrb	r1, [r2, #1]
   1100a:	425b      	negs	r3, r3
   1100c:	430b      	orrs	r3, r1
   1100e:	7053      	strb	r3, [r2, #1]
   11010:	210b      	movs	r1, #11
   11012:	0028      	movs	r0, r5
   11014:	4b44      	ldr	r3, [pc, #272]	; (11128 <MacExecuteCommands+0x1bc>)
   11016:	4798      	blx	r3
   11018:	e7cf      	b.n	10fba <MacExecuteCommands+0x4e>
   1101a:	0020      	movs	r0, r4
   1101c:	4b43      	ldr	r3, [pc, #268]	; (1112c <MacExecuteCommands+0x1c0>)
   1101e:	e7de      	b.n	10fde <MacExecuteCommands+0x72>
   11020:	0020      	movs	r0, r4
   11022:	4b43      	ldr	r3, [pc, #268]	; (11130 <MacExecuteCommands+0x1c4>)
   11024:	e7db      	b.n	10fde <MacExecuteCommands+0x72>
   11026:	22ff      	movs	r2, #255	; 0xff
   11028:	0004      	movs	r4, r0
   1102a:	701a      	strb	r2, [r3, #0]
   1102c:	9500      	str	r5, [sp, #0]
   1102e:	e7c4      	b.n	10fba <MacExecuteCommands+0x4e>
   11030:	9b00      	ldr	r3, [sp, #0]
   11032:	2b00      	cmp	r3, #0
   11034:	d1a8      	bne.n	10f88 <MacExecuteCommands+0x1c>
   11036:	0033      	movs	r3, r6
   11038:	33b8      	adds	r3, #184	; 0xb8
   1103a:	781b      	ldrb	r3, [r3, #0]
   1103c:	2401      	movs	r4, #1
   1103e:	9301      	str	r3, [sp, #4]
   11040:	2303      	movs	r3, #3
   11042:	9a01      	ldr	r2, [sp, #4]
   11044:	4353      	muls	r3, r2
   11046:	18f3      	adds	r3, r6, r3
   11048:	0019      	movs	r1, r3
   1104a:	3170      	adds	r1, #112	; 0x70
   1104c:	788a      	ldrb	r2, [r1, #2]
   1104e:	3371      	adds	r3, #113	; 0x71
   11050:	43aa      	bics	r2, r5
   11052:	4022      	ands	r2, r4
   11054:	708a      	strb	r2, [r1, #2]
   11056:	78ca      	ldrb	r2, [r1, #3]
   11058:	193c      	adds	r4, r7, r4
   1105a:	43aa      	bics	r2, r5
   1105c:	70ca      	strb	r2, [r1, #3]
   1105e:	783a      	ldrb	r2, [r7, #0]
   11060:	701a      	strb	r2, [r3, #0]
   11062:	783a      	ldrb	r2, [r7, #0]
   11064:	3a02      	subs	r2, #2
   11066:	2a08      	cmp	r2, #8
   11068:	d8dd      	bhi.n	11026 <MacExecuteCommands+0xba>
   1106a:	0010      	movs	r0, r2
   1106c:	f001 f962 	bl	12334 <__gnu_thumb1_case_sqi>
   11070:	bdbab595 	.word	0xbdbab595
   11074:	d5c3c0a5 	.word	0xd5c3c0a5
   11078:	d8          	.byte	0xd8
   11079:	00          	.byte	0x00
   1107a:	23b8      	movs	r3, #184	; 0xb8
   1107c:	33ff      	adds	r3, #255	; 0xff
   1107e:	5cf3      	ldrb	r3, [r6, r3]
   11080:	43db      	mvns	r3, r3
   11082:	075b      	lsls	r3, r3, #29
   11084:	d000      	beq.n	11088 <MacExecuteCommands+0x11c>
   11086:	e785      	b.n	10f94 <MacExecuteCommands+0x28>
   11088:	23be      	movs	r3, #190	; 0xbe
   1108a:	33ff      	adds	r3, #255	; 0xff
   1108c:	5cf4      	ldrb	r4, [r6, r3]
   1108e:	ad05      	add	r5, sp, #20
   11090:	0724      	lsls	r4, r4, #28
   11092:	0f24      	lsrs	r4, r4, #28
   11094:	b2e3      	uxtb	r3, r4
   11096:	9300      	str	r3, [sp, #0]
   11098:	23ba      	movs	r3, #186	; 0xba
   1109a:	33ff      	adds	r3, #255	; 0xff
   1109c:	5cf3      	ldrb	r3, [r6, r3]
   1109e:	2100      	movs	r1, #0
   110a0:	9301      	str	r3, [sp, #4]
   110a2:	23dc      	movs	r3, #220	; 0xdc
   110a4:	005b      	lsls	r3, r3, #1
   110a6:	5cf3      	ldrb	r3, [r6, r3]
   110a8:	002a      	movs	r2, r5
   110aa:	9302      	str	r3, [sp, #8]
   110ac:	2014      	movs	r0, #20
   110ae:	4b21      	ldr	r3, [pc, #132]	; (11134 <MacExecuteCommands+0x1c8>)
   110b0:	4798      	blx	r3
   110b2:	0033      	movs	r3, r6
   110b4:	782a      	ldrb	r2, [r5, #0]
   110b6:	33ca      	adds	r3, #202	; 0xca
   110b8:	701a      	strb	r2, [r3, #0]
   110ba:	0033      	movs	r3, r6
   110bc:	786a      	ldrb	r2, [r5, #1]
   110be:	33cb      	adds	r3, #203	; 0xcb
   110c0:	701a      	strb	r2, [r3, #0]
   110c2:	4b1d      	ldr	r3, [pc, #116]	; (11138 <MacExecuteCommands+0x1cc>)
   110c4:	4798      	blx	r3
   110c6:	9801      	ldr	r0, [sp, #4]
   110c8:	4b1c      	ldr	r3, [pc, #112]	; (1113c <MacExecuteCommands+0x1d0>)
   110ca:	4798      	blx	r3
   110cc:	0032      	movs	r2, r6
   110ce:	2308      	movs	r3, #8
   110d0:	325c      	adds	r2, #92	; 0x5c
   110d2:	7851      	ldrb	r1, [r2, #1]
   110d4:	430b      	orrs	r3, r1
   110d6:	7053      	strb	r3, [r2, #1]
   110d8:	9802      	ldr	r0, [sp, #8]
   110da:	4b19      	ldr	r3, [pc, #100]	; (11140 <MacExecuteCommands+0x1d4>)
   110dc:	4798      	blx	r3
   110de:	0033      	movs	r3, r6
   110e0:	b2e2      	uxtb	r2, r4
   110e2:	33b9      	adds	r3, #185	; 0xb9
   110e4:	2a00      	cmp	r2, #0
   110e6:	d10e      	bne.n	11106 <MacExecuteCommands+0x19a>
   110e8:	701c      	strb	r4, [r3, #0]
   110ea:	2114      	movs	r1, #20
   110ec:	4c0e      	ldr	r4, [pc, #56]	; (11128 <MacExecuteCommands+0x1bc>)
   110ee:	2000      	movs	r0, #0
   110f0:	47a0      	blx	r4
   110f2:	2210      	movs	r2, #16
   110f4:	4b06      	ldr	r3, [pc, #24]	; (11110 <MacExecuteCommands+0x1a4>)
   110f6:	2001      	movs	r0, #1
   110f8:	335c      	adds	r3, #92	; 0x5c
   110fa:	7859      	ldrb	r1, [r3, #1]
   110fc:	430a      	orrs	r2, r1
   110fe:	705a      	strb	r2, [r3, #1]
   11100:	210b      	movs	r1, #11
   11102:	47a0      	blx	r4
   11104:	e746      	b.n	10f94 <MacExecuteCommands+0x28>
   11106:	9a00      	ldr	r2, [sp, #0]
   11108:	3a01      	subs	r2, #1
   1110a:	701a      	strb	r2, [r3, #0]
   1110c:	e7ed      	b.n	110ea <MacExecuteCommands+0x17e>
   1110e:	46c0      	nop			; (mov r8, r8)
   11110:	200030e4 	.word	0x200030e4
   11114:	0000ffad 	.word	0x0000ffad
   11118:	0000fe71 	.word	0x0000fe71
   1111c:	0000fd75 	.word	0x0000fd75
   11120:	00010ddd 	.word	0x00010ddd
   11124:	0000f605 	.word	0x0000f605
   11128:	0000948d 	.word	0x0000948d
   1112c:	0000ff5d 	.word	0x0000ff5d
   11130:	0000fea9 	.word	0x0000fea9
   11134:	0000c8f9 	.word	0x0000c8f9
   11138:	00010db1 	.word	0x00010db1
   1113c:	0000fc2d 	.word	0x0000fc2d
   11140:	0000fbc1 	.word	0x0000fbc1

00011144 <LorawanSetChannelIdStatus>:
   11144:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11146:	466b      	mov	r3, sp
   11148:	7018      	strb	r0, [r3, #0]
   1114a:	7059      	strb	r1, [r3, #1]
   1114c:	2016      	movs	r0, #22
   1114e:	4669      	mov	r1, sp
   11150:	4b0c      	ldr	r3, [pc, #48]	; (11184 <LorawanSetChannelIdStatus+0x40>)
   11152:	4798      	blx	r3
   11154:	0004      	movs	r4, r0
   11156:	2808      	cmp	r0, #8
   11158:	d111      	bne.n	1117e <LorawanSetChannelIdStatus+0x3a>
   1115a:	ad01      	add	r5, sp, #4
   1115c:	002a      	movs	r2, r5
   1115e:	2100      	movs	r1, #0
   11160:	4b09      	ldr	r3, [pc, #36]	; (11188 <LorawanSetChannelIdStatus+0x44>)
   11162:	2014      	movs	r0, #20
   11164:	4798      	blx	r3
   11166:	4b09      	ldr	r3, [pc, #36]	; (1118c <LorawanSetChannelIdStatus+0x48>)
   11168:	7829      	ldrb	r1, [r5, #0]
   1116a:	001a      	movs	r2, r3
   1116c:	32ca      	adds	r2, #202	; 0xca
   1116e:	7011      	strb	r1, [r2, #0]
   11170:	786a      	ldrb	r2, [r5, #1]
   11172:	33cb      	adds	r3, #203	; 0xcb
   11174:	701a      	strb	r2, [r3, #0]
   11176:	4b06      	ldr	r3, [pc, #24]	; (11190 <LorawanSetChannelIdStatus+0x4c>)
   11178:	4798      	blx	r3
   1117a:	0020      	movs	r0, r4
   1117c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1117e:	240a      	movs	r4, #10
   11180:	e7fb      	b.n	1117a <LorawanSetChannelIdStatus+0x36>
   11182:	46c0      	nop			; (mov r8, r8)
   11184:	0000c931 	.word	0x0000c931
   11188:	0000c8f9 	.word	0x0000c8f9
   1118c:	200030e4 	.word	0x200030e4
   11190:	00010db1 	.word	0x00010db1

00011194 <LORAWAN_RxDone>:
   11194:	b5f0      	push	{r4, r5, r6, r7, lr}
   11196:	4ba3      	ldr	r3, [pc, #652]	; (11424 <LORAWAN_RxDone+0x290>)
   11198:	b093      	sub	sp, #76	; 0x4c
   1119a:	781b      	ldrb	r3, [r3, #0]
   1119c:	0007      	movs	r7, r0
   1119e:	b25a      	sxtb	r2, r3
   111a0:	9105      	str	r1, [sp, #20]
   111a2:	4ca1      	ldr	r4, [pc, #644]	; (11428 <LORAWAN_RxDone+0x294>)
   111a4:	2a00      	cmp	r2, #0
   111a6:	da01      	bge.n	111ac <LORAWAN_RxDone+0x18>
   111a8:	f000 fcf8 	bl	11b9c <LORAWAN_RxDone+0xa08>
   111ac:	7801      	ldrb	r1, [r0, #0]
   111ae:	221f      	movs	r2, #31
   111b0:	0008      	movs	r0, r1
   111b2:	4390      	bics	r0, r2
   111b4:	0002      	movs	r2, r0
   111b6:	2820      	cmp	r0, #32
   111b8:	d000      	beq.n	111bc <LORAWAN_RxDone+0x28>
   111ba:	e161      	b.n	11480 <LORAWAN_RxDone+0x2ec>
   111bc:	7822      	ldrb	r2, [r4, #0]
   111be:	2a00      	cmp	r2, #0
   111c0:	d001      	beq.n	111c6 <LORAWAN_RxDone+0x32>
   111c2:	f000 fcd7 	bl	11b74 <LORAWAN_RxDone+0x9e0>
   111c6:	0022      	movs	r2, r4
   111c8:	326c      	adds	r2, #108	; 0x6c
   111ca:	7812      	ldrb	r2, [r2, #0]
   111cc:	0752      	lsls	r2, r2, #29
   111ce:	d401      	bmi.n	111d4 <LORAWAN_RxDone+0x40>
   111d0:	f000 fcd0 	bl	11b74 <LORAWAN_RxDone+0x9e0>
   111d4:	9b05      	ldr	r3, [sp, #20]
   111d6:	3b01      	subs	r3, #1
   111d8:	b2db      	uxtb	r3, r3
   111da:	9306      	str	r3, [sp, #24]
   111dc:	4b93      	ldr	r3, [pc, #588]	; (1142c <LORAWAN_RxDone+0x298>)
   111de:	469c      	mov	ip, r3
   111e0:	9b06      	ldr	r3, [sp, #24]
   111e2:	2b00      	cmp	r3, #0
   111e4:	d12a      	bne.n	1123c <LORAWAN_RxDone+0xa8>
   111e6:	9b05      	ldr	r3, [sp, #20]
   111e8:	4660      	mov	r0, ip
   111ea:	1f1d      	subs	r5, r3, #4
   111ec:	b2eb      	uxtb	r3, r5
   111ee:	003a      	movs	r2, r7
   111f0:	498f      	ldr	r1, [pc, #572]	; (11430 <LORAWAN_RxDone+0x29c>)
   111f2:	4e90      	ldr	r6, [pc, #576]	; (11434 <LORAWAN_RxDone+0x2a0>)
   111f4:	47b0      	blx	r6
   111f6:	2204      	movs	r2, #4
   111f8:	498d      	ldr	r1, [pc, #564]	; (11430 <LORAWAN_RxDone+0x29c>)
   111fa:	4b8f      	ldr	r3, [pc, #572]	; (11438 <LORAWAN_RxDone+0x2a4>)
   111fc:	a810      	add	r0, sp, #64	; 0x40
   111fe:	4798      	blx	r3
   11200:	9e10      	ldr	r6, [sp, #64]	; 0x40
   11202:	1979      	adds	r1, r7, r5
   11204:	2204      	movs	r2, #4
   11206:	4b8c      	ldr	r3, [pc, #560]	; (11438 <LORAWAN_RxDone+0x2a4>)
   11208:	a810      	add	r0, sp, #64	; 0x40
   1120a:	960d      	str	r6, [sp, #52]	; 0x34
   1120c:	4798      	blx	r3
   1120e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11210:	4b85      	ldr	r3, [pc, #532]	; (11428 <LORAWAN_RxDone+0x294>)
   11212:	210e      	movs	r1, #14
   11214:	42b2      	cmp	r2, r6
   11216:	d01f      	beq.n	11258 <LORAWAN_RxDone+0xc4>
   11218:	001a      	movs	r2, r3
   1121a:	325c      	adds	r2, #92	; 0x5c
   1121c:	7812      	ldrb	r2, [r2, #0]
   1121e:	400a      	ands	r2, r1
   11220:	2a0a      	cmp	r2, #10
   11222:	d005      	beq.n	11230 <LORAWAN_RxDone+0x9c>
   11224:	2a06      	cmp	r2, #6
   11226:	d106      	bne.n	11236 <LORAWAN_RxDone+0xa2>
   11228:	33d0      	adds	r3, #208	; 0xd0
   1122a:	781b      	ldrb	r3, [r3, #0]
   1122c:	2b00      	cmp	r3, #0
   1122e:	d002      	beq.n	11236 <LORAWAN_RxDone+0xa2>
   11230:	2018      	movs	r0, #24
   11232:	4b82      	ldr	r3, [pc, #520]	; (1143c <LORAWAN_RxDone+0x2a8>)
   11234:	4798      	blx	r3
   11236:	4b82      	ldr	r3, [pc, #520]	; (11440 <LORAWAN_RxDone+0x2ac>)
   11238:	4798      	blx	r3
   1123a:	e1a9      	b.n	11590 <LORAWAN_RxDone+0x3fc>
   1123c:	9b05      	ldr	r3, [sp, #20]
   1123e:	9a06      	ldr	r2, [sp, #24]
   11240:	4661      	mov	r1, ip
   11242:	1a98      	subs	r0, r3, r2
   11244:	1838      	adds	r0, r7, r0
   11246:	4b7f      	ldr	r3, [pc, #508]	; (11444 <LORAWAN_RxDone+0x2b0>)
   11248:	4798      	blx	r3
   1124a:	9b06      	ldr	r3, [sp, #24]
   1124c:	2b10      	cmp	r3, #16
   1124e:	d901      	bls.n	11254 <LORAWAN_RxDone+0xc0>
   11250:	3b10      	subs	r3, #16
   11252:	e7c1      	b.n	111d8 <LORAWAN_RxDone+0x44>
   11254:	2300      	movs	r3, #0
   11256:	e7c0      	b.n	111da <LORAWAN_RxDone+0x46>
   11258:	001a      	movs	r2, r3
   1125a:	325c      	adds	r2, #92	; 0x5c
   1125c:	7812      	ldrb	r2, [r2, #0]
   1125e:	400a      	ands	r2, r1
   11260:	2a06      	cmp	r2, #6
   11262:	d103      	bne.n	1126c <LORAWAN_RxDone+0xd8>
   11264:	33c3      	adds	r3, #195	; 0xc3
   11266:	7818      	ldrb	r0, [r3, #0]
   11268:	4b77      	ldr	r3, [pc, #476]	; (11448 <LORAWAN_RxDone+0x2b4>)
   1126a:	4798      	blx	r3
   1126c:	7a3a      	ldrb	r2, [r7, #8]
   1126e:	79fb      	ldrb	r3, [r7, #7]
   11270:	0212      	lsls	r2, r2, #8
   11272:	431a      	orrs	r2, r3
   11274:	7a7b      	ldrb	r3, [r7, #9]
   11276:	2001      	movs	r0, #1
   11278:	041b      	lsls	r3, r3, #16
   1127a:	431a      	orrs	r2, r3
   1127c:	7abb      	ldrb	r3, [r7, #10]
   1127e:	061b      	lsls	r3, r3, #24
   11280:	4313      	orrs	r3, r2
   11282:	0a19      	lsrs	r1, r3, #8
   11284:	7063      	strb	r3, [r4, #1]
   11286:	70a1      	strb	r1, [r4, #2]
   11288:	0c19      	lsrs	r1, r3, #16
   1128a:	0e1b      	lsrs	r3, r3, #24
   1128c:	70e1      	strb	r1, [r4, #3]
   1128e:	7123      	strb	r3, [r4, #4]
   11290:	240f      	movs	r4, #15
   11292:	2103      	movs	r1, #3
   11294:	4b6d      	ldr	r3, [pc, #436]	; (1144c <LORAWAN_RxDone+0x2b8>)
   11296:	4798      	blx	r3
   11298:	7b38      	ldrb	r0, [r7, #12]
   1129a:	4b6d      	ldr	r3, [pc, #436]	; (11450 <LORAWAN_RxDone+0x2bc>)
   1129c:	4020      	ands	r0, r4
   1129e:	4798      	blx	r3
   112a0:	7af8      	ldrb	r0, [r7, #11]
   112a2:	4b6c      	ldr	r3, [pc, #432]	; (11454 <LORAWAN_RxDone+0x2c0>)
   112a4:	0641      	lsls	r1, r0, #25
   112a6:	0700      	lsls	r0, r0, #28
   112a8:	0f49      	lsrs	r1, r1, #29
   112aa:	0f00      	lsrs	r0, r0, #28
   112ac:	4798      	blx	r3
   112ae:	9b05      	ldr	r3, [sp, #20]
   112b0:	2b21      	cmp	r3, #33	; 0x21
   112b2:	d000      	beq.n	112b6 <LORAWAN_RxDone+0x122>
   112b4:	e088      	b.n	113c8 <LORAWAN_RxDone+0x234>
   112b6:	2512      	movs	r5, #18
   112b8:	ab06      	add	r3, sp, #24
   112ba:	18ed      	adds	r5, r5, r3
   112bc:	002a      	movs	r2, r5
   112be:	4b66      	ldr	r3, [pc, #408]	; (11458 <LORAWAN_RxDone+0x2c4>)
   112c0:	4966      	ldr	r1, [pc, #408]	; (1145c <LORAWAN_RxDone+0x2c8>)
   112c2:	2007      	movs	r0, #7
   112c4:	4798      	blx	r3
   112c6:	782b      	ldrb	r3, [r5, #0]
   112c8:	2bff      	cmp	r3, #255	; 0xff
   112ca:	d07d      	beq.n	113c8 <LORAWAN_RxDone+0x234>
   112cc:	2350      	movs	r3, #80	; 0x50
   112ce:	43a3      	bics	r3, r4
   112d0:	9307      	str	r3, [sp, #28]
   112d2:	003b      	movs	r3, r7
   112d4:	330d      	adds	r3, #13
   112d6:	9305      	str	r3, [sp, #20]
   112d8:	2400      	movs	r4, #0
   112da:	2203      	movs	r2, #3
   112dc:	9905      	ldr	r1, [sp, #20]
   112de:	4b56      	ldr	r3, [pc, #344]	; (11438 <LORAWAN_RxDone+0x2a4>)
   112e0:	a80e      	add	r0, sp, #56	; 0x38
   112e2:	940e      	str	r4, [sp, #56]	; 0x38
   112e4:	4798      	blx	r3
   112e6:	2364      	movs	r3, #100	; 0x64
   112e8:	990e      	ldr	r1, [sp, #56]	; 0x38
   112ea:	aa06      	add	r2, sp, #24
   112ec:	4359      	muls	r1, r3
   112ee:	3b52      	subs	r3, #82	; 0x52
   112f0:	189b      	adds	r3, r3, r2
   112f2:	7818      	ldrb	r0, [r3, #0]
   112f4:	9b06      	ldr	r3, [sp, #24]
   112f6:	910e      	str	r1, [sp, #56]	; 0x38
   112f8:	1818      	adds	r0, r3, r0
   112fa:	b2c0      	uxtb	r0, r0
   112fc:	74d0      	strb	r0, [r2, #19]
   112fe:	42a1      	cmp	r1, r4
   11300:	d100      	bne.n	11304 <LORAWAN_RxDone+0x170>
   11302:	e08b      	b.n	1141c <LORAWAN_RxDone+0x288>
   11304:	466b      	mov	r3, sp
   11306:	7f1b      	ldrb	r3, [r3, #28]
   11308:	ae10      	add	r6, sp, #64	; 0x40
   1130a:	ad0b      	add	r5, sp, #44	; 0x2c
   1130c:	7130      	strb	r0, [r6, #4]
   1130e:	9110      	str	r1, [sp, #64]	; 0x40
   11310:	7028      	strb	r0, [r5, #0]
   11312:	706b      	strb	r3, [r5, #1]
   11314:	0031      	movs	r1, r6
   11316:	2002      	movs	r0, #2
   11318:	4b51      	ldr	r3, [pc, #324]	; (11460 <LORAWAN_RxDone+0x2cc>)
   1131a:	4798      	blx	r3
   1131c:	2808      	cmp	r0, #8
   1131e:	d13f      	bne.n	113a0 <LORAWAN_RxDone+0x20c>
   11320:	0031      	movs	r1, r6
   11322:	0020      	movs	r0, r4
   11324:	4e4f      	ldr	r6, [pc, #316]	; (11464 <LORAWAN_RxDone+0x2d0>)
   11326:	47b0      	blx	r6
   11328:	0029      	movs	r1, r5
   1132a:	2012      	movs	r0, #18
   1132c:	ad0c      	add	r5, sp, #48	; 0x30
   1132e:	47b0      	blx	r6
   11330:	0021      	movs	r1, r4
   11332:	002a      	movs	r2, r5
   11334:	4b48      	ldr	r3, [pc, #288]	; (11458 <LORAWAN_RxDone+0x2c4>)
   11336:	2014      	movs	r0, #20
   11338:	4798      	blx	r3
   1133a:	4c3b      	ldr	r4, [pc, #236]	; (11428 <LORAWAN_RxDone+0x294>)
   1133c:	782a      	ldrb	r2, [r5, #0]
   1133e:	0023      	movs	r3, r4
   11340:	33ca      	adds	r3, #202	; 0xca
   11342:	701a      	strb	r2, [r3, #0]
   11344:	0023      	movs	r3, r4
   11346:	786a      	ldrb	r2, [r5, #1]
   11348:	251a      	movs	r5, #26
   1134a:	33cb      	adds	r3, #203	; 0xcb
   1134c:	701a      	strb	r2, [r3, #0]
   1134e:	4b46      	ldr	r3, [pc, #280]	; (11468 <LORAWAN_RxDone+0x2d4>)
   11350:	4798      	blx	r3
   11352:	ab06      	add	r3, sp, #24
   11354:	18ed      	adds	r5, r5, r3
   11356:	2313      	movs	r3, #19
   11358:	a906      	add	r1, sp, #24
   1135a:	185b      	adds	r3, r3, r1
   1135c:	0019      	movs	r1, r3
   1135e:	002a      	movs	r2, r5
   11360:	4b3d      	ldr	r3, [pc, #244]	; (11458 <LORAWAN_RxDone+0x2c4>)
   11362:	201e      	movs	r0, #30
   11364:	4798      	blx	r3
   11366:	0023      	movs	r3, r4
   11368:	33f0      	adds	r3, #240	; 0xf0
   1136a:	781b      	ldrb	r3, [r3, #0]
   1136c:	079b      	lsls	r3, r3, #30
   1136e:	d507      	bpl.n	11380 <LORAWAN_RxDone+0x1ec>
   11370:	ab06      	add	r3, sp, #24
   11372:	7cdb      	ldrb	r3, [r3, #19]
   11374:	a90f      	add	r1, sp, #60	; 0x3c
   11376:	708b      	strb	r3, [r1, #2]
   11378:	882b      	ldrh	r3, [r5, #0]
   1137a:	201e      	movs	r0, #30
   1137c:	800b      	strh	r3, [r1, #0]
   1137e:	47b0      	blx	r6
   11380:	2313      	movs	r3, #19
   11382:	aa06      	add	r2, sp, #24
   11384:	189b      	adds	r3, r3, r2
   11386:	7818      	ldrb	r0, [r3, #0]
   11388:	2101      	movs	r1, #1
   1138a:	4b38      	ldr	r3, [pc, #224]	; (1146c <LORAWAN_RxDone+0x2d8>)
   1138c:	4798      	blx	r3
   1138e:	2204      	movs	r2, #4
   11390:	345c      	adds	r4, #92	; 0x5c
   11392:	7863      	ldrb	r3, [r4, #1]
   11394:	210b      	movs	r1, #11
   11396:	4313      	orrs	r3, r2
   11398:	7063      	strb	r3, [r4, #1]
   1139a:	2001      	movs	r0, #1
   1139c:	4b2b      	ldr	r3, [pc, #172]	; (1144c <LORAWAN_RxDone+0x2b8>)
   1139e:	4798      	blx	r3
   113a0:	9b06      	ldr	r3, [sp, #24]
   113a2:	3301      	adds	r3, #1
   113a4:	b2db      	uxtb	r3, r3
   113a6:	9306      	str	r3, [sp, #24]
   113a8:	9b05      	ldr	r3, [sp, #20]
   113aa:	3303      	adds	r3, #3
   113ac:	9305      	str	r3, [sp, #20]
   113ae:	9b06      	ldr	r3, [sp, #24]
   113b0:	2b05      	cmp	r3, #5
   113b2:	d191      	bne.n	112d8 <LORAWAN_RxDone+0x144>
   113b4:	2204      	movs	r2, #4
   113b6:	4b1c      	ldr	r3, [pc, #112]	; (11428 <LORAWAN_RxDone+0x294>)
   113b8:	2001      	movs	r0, #1
   113ba:	335c      	adds	r3, #92	; 0x5c
   113bc:	7859      	ldrb	r1, [r3, #1]
   113be:	430a      	orrs	r2, r1
   113c0:	705a      	strb	r2, [r3, #1]
   113c2:	210b      	movs	r1, #11
   113c4:	4b21      	ldr	r3, [pc, #132]	; (1144c <LORAWAN_RxDone+0x2b8>)
   113c6:	4798      	blx	r3
   113c8:	4c29      	ldr	r4, [pc, #164]	; (11470 <LORAWAN_RxDone+0x2dc>)
   113ca:	1c7e      	adds	r6, r7, #1
   113cc:	3704      	adds	r7, #4
   113ce:	0031      	movs	r1, r6
   113d0:	0020      	movs	r0, r4
   113d2:	003a      	movs	r2, r7
   113d4:	4b27      	ldr	r3, [pc, #156]	; (11474 <LORAWAN_RxDone+0x2e0>)
   113d6:	4798      	blx	r3
   113d8:	2302      	movs	r3, #2
   113da:	4a13      	ldr	r2, [pc, #76]	; (11428 <LORAWAN_RxDone+0x294>)
   113dc:	4d13      	ldr	r5, [pc, #76]	; (1142c <LORAWAN_RxDone+0x298>)
   113de:	7553      	strb	r3, [r2, #21]
   113e0:	0020      	movs	r0, r4
   113e2:	0029      	movs	r1, r5
   113e4:	4b17      	ldr	r3, [pc, #92]	; (11444 <LORAWAN_RxDone+0x2b0>)
   113e6:	4798      	blx	r3
   113e8:	2105      	movs	r1, #5
   113ea:	4b18      	ldr	r3, [pc, #96]	; (1144c <LORAWAN_RxDone+0x2b8>)
   113ec:	2001      	movs	r0, #1
   113ee:	4798      	blx	r3
   113f0:	0031      	movs	r1, r6
   113f2:	2601      	movs	r6, #1
   113f4:	4c20      	ldr	r4, [pc, #128]	; (11478 <LORAWAN_RxDone+0x2e4>)
   113f6:	003a      	movs	r2, r7
   113f8:	0020      	movs	r0, r4
   113fa:	4b1e      	ldr	r3, [pc, #120]	; (11474 <LORAWAN_RxDone+0x2e0>)
   113fc:	4798      	blx	r3
   113fe:	4b0a      	ldr	r3, [pc, #40]	; (11428 <LORAWAN_RxDone+0x294>)
   11400:	0029      	movs	r1, r5
   11402:	715e      	strb	r6, [r3, #5]
   11404:	0020      	movs	r0, r4
   11406:	4b0f      	ldr	r3, [pc, #60]	; (11444 <LORAWAN_RxDone+0x2b0>)
   11408:	4798      	blx	r3
   1140a:	2104      	movs	r1, #4
   1140c:	4b0f      	ldr	r3, [pc, #60]	; (1144c <LORAWAN_RxDone+0x2b8>)
   1140e:	0030      	movs	r0, r6
   11410:	4798      	blx	r3
   11412:	4b1a      	ldr	r3, [pc, #104]	; (1147c <LORAWAN_RxDone+0x2e8>)
   11414:	4798      	blx	r3
   11416:	2008      	movs	r0, #8
   11418:	b013      	add	sp, #76	; 0x4c
   1141a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1141c:	4b13      	ldr	r3, [pc, #76]	; (1146c <LORAWAN_RxDone+0x2d8>)
   1141e:	4798      	blx	r3
   11420:	e7be      	b.n	113a0 <LORAWAN_RxDone+0x20c>
   11422:	46c0      	nop			; (mov r8, r8)
   11424:	20003140 	.word	0x20003140
   11428:	200030e4 	.word	0x200030e4
   1142c:	20003109 	.word	0x20003109
   11430:	2000206d 	.word	0x2000206d
   11434:	00011c39 	.word	0x00011c39
   11438:	000155bf 	.word	0x000155bf
   1143c:	0000fd11 	.word	0x0000fd11
   11440:	00010d3d 	.word	0x00010d3d
   11444:	00011bf9 	.word	0x00011bf9
   11448:	0000d069 	.word	0x0000d069
   1144c:	0000948d 	.word	0x0000948d
   11450:	0000f605 	.word	0x0000f605
   11454:	0000fbdd 	.word	0x0000fbdd
   11458:	0000c8f9 	.word	0x0000c8f9
   1145c:	200031a3 	.word	0x200031a3
   11460:	0000c915 	.word	0x0000c915
   11464:	0000c931 	.word	0x0000c931
   11468:	00010db1 	.word	0x00010db1
   1146c:	00011145 	.word	0x00011145
   11470:	200030f9 	.word	0x200030f9
   11474:	0000f8e9 	.word	0x0000f8e9
   11478:	200030e9 	.word	0x200030e9
   1147c:	0000f801 	.word	0x0000f801
   11480:	20bf      	movs	r0, #191	; 0xbf
   11482:	3a60      	subs	r2, #96	; 0x60
   11484:	4002      	ands	r2, r0
   11486:	d000      	beq.n	1148a <LORAWAN_RxDone+0x2f6>
   11488:	e374      	b.n	11b74 <LORAWAN_RxDone+0x9e0>
   1148a:	38be      	subs	r0, #190	; 0xbe
   1148c:	4203      	tst	r3, r0
   1148e:	d100      	bne.n	11492 <LORAWAN_RxDone+0x2fe>
   11490:	e370      	b.n	11b74 <LORAWAN_RxDone+0x9e0>
   11492:	6823      	ldr	r3, [r4, #0]
   11494:	0a18      	lsrs	r0, r3, #8
   11496:	7923      	ldrb	r3, [r4, #4]
   11498:	061b      	lsls	r3, r3, #24
   1149a:	4303      	orrs	r3, r0
   1149c:	0020      	movs	r0, r4
   1149e:	30b8      	adds	r0, #184	; 0xb8
   114a0:	7002      	strb	r2, [r0, #0]
   114a2:	78bd      	ldrb	r5, [r7, #2]
   114a4:	787e      	ldrb	r6, [r7, #1]
   114a6:	022d      	lsls	r5, r5, #8
   114a8:	432e      	orrs	r6, r5
   114aa:	78fd      	ldrb	r5, [r7, #3]
   114ac:	7938      	ldrb	r0, [r7, #4]
   114ae:	042d      	lsls	r5, r5, #16
   114b0:	4335      	orrs	r5, r6
   114b2:	0600      	lsls	r0, r0, #24
   114b4:	4305      	orrs	r5, r0
   114b6:	42ab      	cmp	r3, r5
   114b8:	d079      	beq.n	115ae <LORAWAN_RxDone+0x41a>
   114ba:	251a      	movs	r5, #26
   114bc:	ab06      	add	r3, sp, #24
   114be:	18ed      	adds	r5, r5, r3
   114c0:	7a3a      	ldrb	r2, [r7, #8]
   114c2:	0949      	lsrs	r1, r1, #5
   114c4:	002b      	movs	r3, r5
   114c6:	0038      	movs	r0, r7
   114c8:	4e8c      	ldr	r6, [pc, #560]	; (116fc <LORAWAN_RxDone+0x568>)
   114ca:	47b0      	blx	r6
   114cc:	2808      	cmp	r0, #8
   114ce:	d157      	bne.n	11580 <LORAWAN_RxDone+0x3ec>
   114d0:	232c      	movs	r3, #44	; 0x2c
   114d2:	782a      	ldrb	r2, [r5, #0]
   114d4:	4353      	muls	r3, r2
   114d6:	001a      	movs	r2, r3
   114d8:	3209      	adds	r2, #9
   114da:	32ff      	adds	r2, #255	; 0xff
   114dc:	1912      	adds	r2, r2, r4
   114de:	18e4      	adds	r4, r4, r3
   114e0:	2301      	movs	r3, #1
   114e2:	34fc      	adds	r4, #252	; 0xfc
   114e4:	68a5      	ldr	r5, [r4, #8]
   114e6:	9208      	str	r2, [sp, #32]
   114e8:	9307      	str	r3, [sp, #28]
   114ea:	4c85      	ldr	r4, [pc, #532]	; (11700 <LORAWAN_RxDone+0x56c>)
   114ec:	0021      	movs	r1, r4
   114ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
   114f0:	3164      	adds	r1, #100	; 0x64
   114f2:	9309      	str	r3, [sp, #36]	; 0x24
   114f4:	79fb      	ldrb	r3, [r7, #7]
   114f6:	79ba      	ldrb	r2, [r7, #6]
   114f8:	021b      	lsls	r3, r3, #8
   114fa:	4313      	orrs	r3, r2
   114fc:	880a      	ldrh	r2, [r1, #0]
   114fe:	4293      	cmp	r3, r2
   11500:	d36d      	bcc.n	115de <LORAWAN_RxDone+0x44a>
   11502:	0020      	movs	r0, r4
   11504:	30b0      	adds	r0, #176	; 0xb0
   11506:	8800      	ldrh	r0, [r0, #0]
   11508:	1a9a      	subs	r2, r3, r2
   1150a:	4e7e      	ldr	r6, [pc, #504]	; (11704 <LORAWAN_RxDone+0x570>)
   1150c:	4282      	cmp	r2, r0
   1150e:	dd52      	ble.n	115b6 <LORAWAN_RxDone+0x422>
   11510:	0022      	movs	r2, r4
   11512:	2101      	movs	r1, #1
   11514:	326c      	adds	r2, #108	; 0x6c
   11516:	7813      	ldrb	r3, [r2, #0]
   11518:	438b      	bics	r3, r1
   1151a:	7013      	strb	r3, [r2, #0]
   1151c:	0023      	movs	r3, r4
   1151e:	33d4      	adds	r3, #212	; 0xd4
   11520:	781b      	ldrb	r3, [r3, #0]
   11522:	428b      	cmp	r3, r1
   11524:	d108      	bne.n	11538 <LORAWAN_RxDone+0x3a4>
   11526:	0023      	movs	r3, r4
   11528:	220e      	movs	r2, #14
   1152a:	335c      	adds	r3, #92	; 0x5c
   1152c:	781b      	ldrb	r3, [r3, #0]
   1152e:	4013      	ands	r3, r2
   11530:	2b06      	cmp	r3, #6
   11532:	d101      	bne.n	11538 <LORAWAN_RxDone+0x3a4>
   11534:	4b74      	ldr	r3, [pc, #464]	; (11708 <LORAWAN_RxDone+0x574>)
   11536:	4798      	blx	r3
   11538:	4974      	ldr	r1, [pc, #464]	; (1170c <LORAWAN_RxDone+0x578>)
   1153a:	784a      	ldrb	r2, [r1, #1]
   1153c:	780b      	ldrb	r3, [r1, #0]
   1153e:	0212      	lsls	r2, r2, #8
   11540:	431a      	orrs	r2, r3
   11542:	788b      	ldrb	r3, [r1, #2]
   11544:	041b      	lsls	r3, r3, #16
   11546:	431a      	orrs	r2, r3
   11548:	78cb      	ldrb	r3, [r1, #3]
   1154a:	061b      	lsls	r3, r3, #24
   1154c:	4313      	orrs	r3, r2
   1154e:	d008      	beq.n	11562 <LORAWAN_RxDone+0x3ce>
   11550:	0022      	movs	r2, r4
   11552:	2120      	movs	r1, #32
   11554:	326c      	adds	r2, #108	; 0x6c
   11556:	7813      	ldrb	r3, [r2, #0]
   11558:	2017      	movs	r0, #23
   1155a:	438b      	bics	r3, r1
   1155c:	7013      	strb	r3, [r2, #0]
   1155e:	4b6c      	ldr	r3, [pc, #432]	; (11710 <LORAWAN_RxDone+0x57c>)
   11560:	4798      	blx	r3
   11562:	2501      	movs	r5, #1
   11564:	345c      	adds	r4, #92	; 0x5c
   11566:	7863      	ldrb	r3, [r4, #1]
   11568:	43ab      	bics	r3, r5
   1156a:	7063      	strb	r3, [r4, #1]
   1156c:	78a3      	ldrb	r3, [r4, #2]
   1156e:	432b      	orrs	r3, r5
   11570:	70a3      	strb	r3, [r4, #2]
   11572:	4b68      	ldr	r3, [pc, #416]	; (11714 <LORAWAN_RxDone+0x580>)
   11574:	4798      	blx	r3
   11576:	210b      	movs	r1, #11
   11578:	0028      	movs	r0, r5
   1157a:	47b0      	blx	r6
   1157c:	200d      	movs	r0, #13
   1157e:	e74b      	b.n	11418 <LORAWAN_RxDone+0x284>
   11580:	220e      	movs	r2, #14
   11582:	4b65      	ldr	r3, [pc, #404]	; (11718 <LORAWAN_RxDone+0x584>)
   11584:	781b      	ldrb	r3, [r3, #0]
   11586:	4013      	ands	r3, r2
   11588:	2b0a      	cmp	r3, #10
   1158a:	d008      	beq.n	1159e <LORAWAN_RxDone+0x40a>
   1158c:	2b06      	cmp	r3, #6
   1158e:	d001      	beq.n	11594 <LORAWAN_RxDone+0x400>
   11590:	200a      	movs	r0, #10
   11592:	e741      	b.n	11418 <LORAWAN_RxDone+0x284>
   11594:	0023      	movs	r3, r4
   11596:	33d0      	adds	r3, #208	; 0xd0
   11598:	781b      	ldrb	r3, [r3, #0]
   1159a:	2b00      	cmp	r3, #0
   1159c:	d0f8      	beq.n	11590 <LORAWAN_RxDone+0x3fc>
   1159e:	2220      	movs	r2, #32
   115a0:	201e      	movs	r0, #30
   115a2:	346c      	adds	r4, #108	; 0x6c
   115a4:	7823      	ldrb	r3, [r4, #0]
   115a6:	4393      	bics	r3, r2
   115a8:	7023      	strb	r3, [r4, #0]
   115aa:	4b59      	ldr	r3, [pc, #356]	; (11710 <LORAWAN_RxDone+0x57c>)
   115ac:	e642      	b.n	11234 <LORAWAN_RxDone+0xa0>
   115ae:	4b5b      	ldr	r3, [pc, #364]	; (1171c <LORAWAN_RxDone+0x588>)
   115b0:	9207      	str	r2, [sp, #28]
   115b2:	9308      	str	r3, [sp, #32]
   115b4:	e799      	b.n	114ea <LORAWAN_RxDone+0x356>
   115b6:	800b      	strh	r3, [r1, #0]
   115b8:	2001      	movs	r0, #1
   115ba:	210a      	movs	r1, #10
   115bc:	47b0      	blx	r6
   115be:	4c50      	ldr	r4, [pc, #320]	; (11700 <LORAWAN_RxDone+0x56c>)
   115c0:	6e61      	ldr	r1, [r4, #100]	; 0x64
   115c2:	1c4b      	adds	r3, r1, #1
   115c4:	d13d      	bne.n	11642 <LORAWAN_RxDone+0x4ae>
   115c6:	2501      	movs	r5, #1
   115c8:	345c      	adds	r4, #92	; 0x5c
   115ca:	78a3      	ldrb	r3, [r4, #2]
   115cc:	432b      	orrs	r3, r5
   115ce:	70a3      	strb	r3, [r4, #2]
   115d0:	4b50      	ldr	r3, [pc, #320]	; (11714 <LORAWAN_RxDone+0x580>)
   115d2:	4798      	blx	r3
   115d4:	210b      	movs	r1, #11
   115d6:	0028      	movs	r0, r5
   115d8:	4b4a      	ldr	r3, [pc, #296]	; (11704 <LORAWAN_RxDone+0x570>)
   115da:	4798      	blx	r3
   115dc:	e7ce      	b.n	1157c <LORAWAN_RxDone+0x3e8>
   115de:	4850      	ldr	r0, [pc, #320]	; (11720 <LORAWAN_RxDone+0x58c>)
   115e0:	1a9a      	subs	r2, r3, r2
   115e2:	1812      	adds	r2, r2, r0
   115e4:	484f      	ldr	r0, [pc, #316]	; (11724 <LORAWAN_RxDone+0x590>)
   115e6:	4282      	cmp	r2, r0
   115e8:	dc09      	bgt.n	115fe <LORAWAN_RxDone+0x46a>
   115ea:	3466      	adds	r4, #102	; 0x66
   115ec:	800b      	strh	r3, [r1, #0]
   115ee:	8823      	ldrh	r3, [r4, #0]
   115f0:	210a      	movs	r1, #10
   115f2:	3301      	adds	r3, #1
   115f4:	8023      	strh	r3, [r4, #0]
   115f6:	2001      	movs	r0, #1
   115f8:	4b42      	ldr	r3, [pc, #264]	; (11704 <LORAWAN_RxDone+0x570>)
   115fa:	4798      	blx	r3
   115fc:	e7df      	b.n	115be <LORAWAN_RxDone+0x42a>
   115fe:	0023      	movs	r3, r4
   11600:	33d4      	adds	r3, #212	; 0xd4
   11602:	781b      	ldrb	r3, [r3, #0]
   11604:	2b01      	cmp	r3, #1
   11606:	d108      	bne.n	1161a <LORAWAN_RxDone+0x486>
   11608:	0023      	movs	r3, r4
   1160a:	220e      	movs	r2, #14
   1160c:	335c      	adds	r3, #92	; 0x5c
   1160e:	781b      	ldrb	r3, [r3, #0]
   11610:	4013      	ands	r3, r2
   11612:	2b06      	cmp	r3, #6
   11614:	d101      	bne.n	1161a <LORAWAN_RxDone+0x486>
   11616:	4b3c      	ldr	r3, [pc, #240]	; (11708 <LORAWAN_RxDone+0x574>)
   11618:	4798      	blx	r3
   1161a:	493c      	ldr	r1, [pc, #240]	; (1170c <LORAWAN_RxDone+0x578>)
   1161c:	784a      	ldrb	r2, [r1, #1]
   1161e:	780b      	ldrb	r3, [r1, #0]
   11620:	0212      	lsls	r2, r2, #8
   11622:	431a      	orrs	r2, r3
   11624:	788b      	ldrb	r3, [r1, #2]
   11626:	041b      	lsls	r3, r3, #16
   11628:	431a      	orrs	r2, r3
   1162a:	78cb      	ldrb	r3, [r1, #3]
   1162c:	061b      	lsls	r3, r3, #24
   1162e:	4313      	orrs	r3, r2
   11630:	d100      	bne.n	11634 <LORAWAN_RxDone+0x4a0>
   11632:	e600      	b.n	11236 <LORAWAN_RxDone+0xa2>
   11634:	2220      	movs	r2, #32
   11636:	346c      	adds	r4, #108	; 0x6c
   11638:	7823      	ldrb	r3, [r4, #0]
   1163a:	2017      	movs	r0, #23
   1163c:	4393      	bics	r3, r2
   1163e:	7023      	strb	r3, [r4, #0]
   11640:	e7b3      	b.n	115aa <LORAWAN_RxDone+0x416>
   11642:	9b05      	ldr	r3, [sp, #20]
   11644:	2001      	movs	r0, #1
   11646:	3b04      	subs	r3, #4
   11648:	9306      	str	r3, [sp, #24]
   1164a:	466b      	mov	r3, sp
   1164c:	7e1a      	ldrb	r2, [r3, #24]
   1164e:	2349      	movs	r3, #73	; 0x49
   11650:	9500      	str	r5, [sp, #0]
   11652:	4d35      	ldr	r5, [pc, #212]	; (11728 <LORAWAN_RxDone+0x594>)
   11654:	47a8      	blx	r5
   11656:	4e35      	ldr	r6, [pc, #212]	; (1172c <LORAWAN_RxDone+0x598>)
   11658:	4d35      	ldr	r5, [pc, #212]	; (11730 <LORAWAN_RxDone+0x59c>)
   1165a:	2210      	movs	r2, #16
   1165c:	4935      	ldr	r1, [pc, #212]	; (11734 <LORAWAN_RxDone+0x5a0>)
   1165e:	0030      	movs	r0, r6
   11660:	47a8      	blx	r5
   11662:	9a06      	ldr	r2, [sp, #24]
   11664:	0039      	movs	r1, r7
   11666:	4834      	ldr	r0, [pc, #208]	; (11738 <LORAWAN_RxDone+0x5a4>)
   11668:	47a8      	blx	r5
   1166a:	9b05      	ldr	r3, [sp, #20]
   1166c:	0032      	movs	r2, r6
   1166e:	330c      	adds	r3, #12
   11670:	b2db      	uxtb	r3, r3
   11672:	4930      	ldr	r1, [pc, #192]	; (11734 <LORAWAN_RxDone+0x5a0>)
   11674:	9808      	ldr	r0, [sp, #32]
   11676:	4e31      	ldr	r6, [pc, #196]	; (1173c <LORAWAN_RxDone+0x5a8>)
   11678:	47b0      	blx	r6
   1167a:	2204      	movs	r2, #4
   1167c:	492d      	ldr	r1, [pc, #180]	; (11734 <LORAWAN_RxDone+0x5a0>)
   1167e:	a80d      	add	r0, sp, #52	; 0x34
   11680:	47a8      	blx	r5
   11682:	9b06      	ldr	r3, [sp, #24]
   11684:	2204      	movs	r2, #4
   11686:	18f9      	adds	r1, r7, r3
   11688:	a810      	add	r0, sp, #64	; 0x40
   1168a:	47a8      	blx	r5
   1168c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1168e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11690:	4293      	cmp	r3, r2
   11692:	d024      	beq.n	116de <LORAWAN_RxDone+0x54a>
   11694:	0023      	movs	r3, r4
   11696:	33d4      	adds	r3, #212	; 0xd4
   11698:	781b      	ldrb	r3, [r3, #0]
   1169a:	2b01      	cmp	r3, #1
   1169c:	d107      	bne.n	116ae <LORAWAN_RxDone+0x51a>
   1169e:	220e      	movs	r2, #14
   116a0:	345c      	adds	r4, #92	; 0x5c
   116a2:	7823      	ldrb	r3, [r4, #0]
   116a4:	4013      	ands	r3, r2
   116a6:	2b06      	cmp	r3, #6
   116a8:	d101      	bne.n	116ae <LORAWAN_RxDone+0x51a>
   116aa:	4b17      	ldr	r3, [pc, #92]	; (11708 <LORAWAN_RxDone+0x574>)
   116ac:	4798      	blx	r3
   116ae:	4917      	ldr	r1, [pc, #92]	; (1170c <LORAWAN_RxDone+0x578>)
   116b0:	784a      	ldrb	r2, [r1, #1]
   116b2:	780b      	ldrb	r3, [r1, #0]
   116b4:	0212      	lsls	r2, r2, #8
   116b6:	431a      	orrs	r2, r3
   116b8:	788b      	ldrb	r3, [r1, #2]
   116ba:	041b      	lsls	r3, r3, #16
   116bc:	431a      	orrs	r2, r3
   116be:	78cb      	ldrb	r3, [r1, #3]
   116c0:	061b      	lsls	r3, r3, #24
   116c2:	4313      	orrs	r3, r2
   116c4:	d100      	bne.n	116c8 <LORAWAN_RxDone+0x534>
   116c6:	e5b6      	b.n	11236 <LORAWAN_RxDone+0xa2>
   116c8:	4a0d      	ldr	r2, [pc, #52]	; (11700 <LORAWAN_RxDone+0x56c>)
   116ca:	2020      	movs	r0, #32
   116cc:	0011      	movs	r1, r2
   116ce:	316c      	adds	r1, #108	; 0x6c
   116d0:	780b      	ldrb	r3, [r1, #0]
   116d2:	4383      	bics	r3, r0
   116d4:	700b      	strb	r3, [r1, #0]
   116d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   116d8:	3808      	subs	r0, #8
   116da:	6653      	str	r3, [r2, #100]	; 0x64
   116dc:	e765      	b.n	115aa <LORAWAN_RxDone+0x416>
   116de:	9b07      	ldr	r3, [sp, #28]
   116e0:	2b00      	cmp	r3, #0
   116e2:	d02f      	beq.n	11744 <LORAWAN_RxDone+0x5b0>
   116e4:	231a      	movs	r3, #26
   116e6:	aa06      	add	r2, sp, #24
   116e8:	189b      	adds	r3, r3, r2
   116ea:	781b      	ldrb	r3, [r3, #0]
   116ec:	003a      	movs	r2, r7
   116ee:	9905      	ldr	r1, [sp, #20]
   116f0:	0038      	movs	r0, r7
   116f2:	4c13      	ldr	r4, [pc, #76]	; (11740 <LORAWAN_RxDone+0x5ac>)
   116f4:	47a0      	blx	r4
   116f6:	2001      	movs	r0, #1
   116f8:	e68e      	b.n	11418 <LORAWAN_RxDone+0x284>
   116fa:	46c0      	nop			; (mov r8, r8)
   116fc:	00011ecd 	.word	0x00011ecd
   11700:	200030e4 	.word	0x200030e4
   11704:	0000948d 	.word	0x0000948d
   11708:	0000f9bd 	.word	0x0000f9bd
   1170c:	200033b8 	.word	0x200033b8
   11710:	000108f5 	.word	0x000108f5
   11714:	00010d3d 	.word	0x00010d3d
   11718:	20003140 	.word	0x20003140
   1171c:	200030e9 	.word	0x200030e9
   11720:	0000ffff 	.word	0x0000ffff
   11724:	00003fff 	.word	0x00003fff
   11728:	0000f925 	.word	0x0000f925
   1172c:	20002eac 	.word	0x20002eac
   11730:	000155bf 	.word	0x000155bf
   11734:	2000206d 	.word	0x2000206d
   11738:	20002ebc 	.word	0x20002ebc
   1173c:	00011c39 	.word	0x00011c39
   11740:	00011f41 	.word	0x00011f41
   11744:	466a      	mov	r2, sp
   11746:	0023      	movs	r3, r4
   11748:	7f12      	ldrb	r2, [r2, #28]
   1174a:	33bb      	adds	r3, #187	; 0xbb
   1174c:	701a      	strb	r2, [r3, #0]
   1174e:	797b      	ldrb	r3, [r7, #5]
   11750:	2b7f      	cmp	r3, #127	; 0x7f
   11752:	d908      	bls.n	11766 <LORAWAN_RxDone+0x5d2>
   11754:	2320      	movs	r3, #32
   11756:	345c      	adds	r4, #92	; 0x5c
   11758:	7822      	ldrb	r2, [r4, #0]
   1175a:	210b      	movs	r1, #11
   1175c:	4313      	orrs	r3, r2
   1175e:	7023      	strb	r3, [r4, #0]
   11760:	2001      	movs	r0, #1
   11762:	4bc8      	ldr	r3, [pc, #800]	; (11a84 <LORAWAN_RxDone+0x8f0>)
   11764:	4798      	blx	r3
   11766:	797b      	ldrb	r3, [r7, #5]
   11768:	4cc7      	ldr	r4, [pc, #796]	; (11a88 <LORAWAN_RxDone+0x8f4>)
   1176a:	06db      	lsls	r3, r3, #27
   1176c:	d505      	bpl.n	1177a <LORAWAN_RxDone+0x5e6>
   1176e:	0022      	movs	r2, r4
   11770:	2308      	movs	r3, #8
   11772:	326c      	adds	r2, #108	; 0x6c
   11774:	7811      	ldrb	r1, [r2, #0]
   11776:	430b      	orrs	r3, r1
   11778:	7013      	strb	r3, [r2, #0]
   1177a:	797b      	ldrb	r3, [r7, #5]
   1177c:	065b      	lsls	r3, r3, #25
   1177e:	d505      	bpl.n	1178c <LORAWAN_RxDone+0x5f8>
   11780:	0022      	movs	r2, r4
   11782:	2310      	movs	r3, #16
   11784:	326c      	adds	r2, #108	; 0x6c
   11786:	7811      	ldrb	r1, [r2, #0]
   11788:	430b      	orrs	r3, r1
   1178a:	7013      	strb	r3, [r2, #0]
   1178c:	221f      	movs	r2, #31
   1178e:	783b      	ldrb	r3, [r7, #0]
   11790:	4393      	bics	r3, r2
   11792:	2ba0      	cmp	r3, #160	; 0xa0
   11794:	d105      	bne.n	117a2 <LORAWAN_RxDone+0x60e>
   11796:	0022      	movs	r2, r4
   11798:	326c      	adds	r2, #108	; 0x6c
   1179a:	7811      	ldrb	r1, [r2, #0]
   1179c:	3b9e      	subs	r3, #158	; 0x9e
   1179e:	430b      	orrs	r3, r1
   117a0:	7013      	strb	r3, [r2, #0]
   117a2:	7979      	ldrb	r1, [r7, #5]
   117a4:	070b      	lsls	r3, r1, #28
   117a6:	d100      	bne.n	117aa <LORAWAN_RxDone+0x616>
   117a8:	e0d0      	b.n	1194c <LORAWAN_RxDone+0x7b8>
   117aa:	0709      	lsls	r1, r1, #28
   117ac:	0f09      	lsrs	r1, r1, #28
   117ae:	187b      	adds	r3, r7, r1
   117b0:	7a1b      	ldrb	r3, [r3, #8]
   117b2:	2b00      	cmp	r3, #0
   117b4:	d100      	bne.n	117b8 <LORAWAN_RxDone+0x624>
   117b6:	e0a0      	b.n	118fa <LORAWAN_RxDone+0x766>
   117b8:	0038      	movs	r0, r7
   117ba:	4bb4      	ldr	r3, [pc, #720]	; (11a8c <LORAWAN_RxDone+0x8f8>)
   117bc:	3008      	adds	r0, #8
   117be:	4798      	blx	r3
   117c0:	2301      	movs	r3, #1
   117c2:	0006      	movs	r6, r0
   117c4:	9307      	str	r3, [sp, #28]
   117c6:	7978      	ldrb	r0, [r7, #5]
   117c8:	9905      	ldr	r1, [sp, #20]
   117ca:	0702      	lsls	r2, r0, #28
   117cc:	0f12      	lsrs	r2, r2, #28
   117ce:	0013      	movs	r3, r2
   117d0:	330c      	adds	r3, #12
   117d2:	4299      	cmp	r1, r3
   117d4:	d100      	bne.n	117d8 <LORAWAN_RxDone+0x644>
   117d6:	e0e5      	b.n	119a4 <LORAWAN_RxDone+0x810>
   117d8:	7833      	ldrb	r3, [r6, #0]
   117da:	1a89      	subs	r1, r1, r2
   117dc:	b2c9      	uxtb	r1, r1
   117de:	9306      	str	r3, [sp, #24]
   117e0:	000b      	movs	r3, r1
   117e2:	3219      	adds	r2, #25
   117e4:	3b0c      	subs	r3, #12
   117e6:	4694      	mov	ip, r2
   117e8:	9a06      	ldr	r2, [sp, #24]
   117ea:	b2db      	uxtb	r3, r3
   117ec:	9305      	str	r3, [sp, #20]
   117ee:	1c75      	adds	r5, r6, #1
   117f0:	4ba5      	ldr	r3, [pc, #660]	; (11a88 <LORAWAN_RxDone+0x8f4>)
   117f2:	2a00      	cmp	r2, #0
   117f4:	d100      	bne.n	117f8 <LORAWAN_RxDone+0x664>
   117f6:	e0ac      	b.n	11952 <LORAWAN_RxDone+0x7be>
   117f8:	681a      	ldr	r2, [r3, #0]
   117fa:	7918      	ldrb	r0, [r3, #4]
   117fc:	0a14      	lsrs	r4, r2, #8
   117fe:	4662      	mov	r2, ip
   11800:	0600      	lsls	r0, r0, #24
   11802:	4320      	orrs	r0, r4
   11804:	9003      	str	r0, [sp, #12]
   11806:	9201      	str	r2, [sp, #4]
   11808:	48a1      	ldr	r0, [pc, #644]	; (11a90 <LORAWAN_RxDone+0x8fc>)
   1180a:	4aa2      	ldr	r2, [pc, #648]	; (11a94 <LORAWAN_RxDone+0x900>)
   1180c:	9002      	str	r0, [sp, #8]
   1180e:	9200      	str	r2, [sp, #0]
   11810:	390d      	subs	r1, #13
   11812:	b2c9      	uxtb	r1, r1
   11814:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   11816:	2201      	movs	r2, #1
   11818:	0028      	movs	r0, r5
   1181a:	4c9f      	ldr	r4, [pc, #636]	; (11a98 <LORAWAN_RxDone+0x904>)
   1181c:	47a0      	blx	r4
   1181e:	4c9a      	ldr	r4, [pc, #616]	; (11a88 <LORAWAN_RxDone+0x8f4>)
   11820:	2300      	movs	r3, #0
   11822:	0022      	movs	r2, r4
   11824:	32a2      	adds	r2, #162	; 0xa2
   11826:	8013      	strh	r3, [r2, #0]
   11828:	0022      	movs	r2, r4
   1182a:	32cd      	adds	r2, #205	; 0xcd
   1182c:	7013      	strb	r3, [r2, #0]
   1182e:	0022      	movs	r2, r4
   11830:	2110      	movs	r1, #16
   11832:	326c      	adds	r2, #108	; 0x6c
   11834:	7813      	ldrb	r3, [r2, #0]
   11836:	438b      	bics	r3, r1
   11838:	7013      	strb	r3, [r2, #0]
   1183a:	0023      	movs	r3, r4
   1183c:	2201      	movs	r2, #1
   1183e:	335c      	adds	r3, #92	; 0x5c
   11840:	7859      	ldrb	r1, [r3, #1]
   11842:	430a      	orrs	r2, r1
   11844:	705a      	strb	r2, [r3, #1]
   11846:	220e      	movs	r2, #14
   11848:	781b      	ldrb	r3, [r3, #0]
   1184a:	4013      	ands	r3, r2
   1184c:	2b06      	cmp	r3, #6
   1184e:	d109      	bne.n	11864 <LORAWAN_RxDone+0x6d0>
   11850:	0023      	movs	r3, r4
   11852:	33d4      	adds	r3, #212	; 0xd4
   11854:	781b      	ldrb	r3, [r3, #0]
   11856:	2b01      	cmp	r3, #1
   11858:	d104      	bne.n	11864 <LORAWAN_RxDone+0x6d0>
   1185a:	0023      	movs	r3, r4
   1185c:	33c5      	adds	r3, #197	; 0xc5
   1185e:	7818      	ldrb	r0, [r3, #0]
   11860:	4b8e      	ldr	r3, [pc, #568]	; (11a9c <LORAWAN_RxDone+0x908>)
   11862:	4798      	blx	r3
   11864:	0025      	movs	r5, r4
   11866:	2201      	movs	r2, #1
   11868:	356c      	adds	r5, #108	; 0x6c
   1186a:	782b      	ldrb	r3, [r5, #0]
   1186c:	4213      	tst	r3, r2
   1186e:	d100      	bne.n	11872 <LORAWAN_RxDone+0x6de>
   11870:	e0da      	b.n	11a28 <LORAWAN_RxDone+0x894>
   11872:	797b      	ldrb	r3, [r7, #5]
   11874:	321f      	adds	r2, #31
   11876:	4213      	tst	r3, r2
   11878:	d100      	bne.n	1187c <LORAWAN_RxDone+0x6e8>
   1187a:	e0bb      	b.n	119f4 <LORAWAN_RxDone+0x860>
   1187c:	4b88      	ldr	r3, [pc, #544]	; (11aa0 <LORAWAN_RxDone+0x90c>)
   1187e:	4798      	blx	r3
   11880:	0023      	movs	r3, r4
   11882:	2101      	movs	r1, #1
   11884:	335c      	adds	r3, #92	; 0x5c
   11886:	785a      	ldrb	r2, [r3, #1]
   11888:	438a      	bics	r2, r1
   1188a:	705a      	strb	r2, [r3, #1]
   1188c:	9a06      	ldr	r2, [sp, #24]
   1188e:	2a00      	cmp	r2, #0
   11890:	d100      	bne.n	11894 <LORAWAN_RxDone+0x700>
   11892:	e08f      	b.n	119b4 <LORAWAN_RxDone+0x820>
   11894:	9a05      	ldr	r2, [sp, #20]
   11896:	0031      	movs	r1, r6
   11898:	0038      	movs	r0, r7
   1189a:	4b82      	ldr	r3, [pc, #520]	; (11aa4 <LORAWAN_RxDone+0x910>)
   1189c:	4798      	blx	r3
   1189e:	4b82      	ldr	r3, [pc, #520]	; (11aa8 <LORAWAN_RxDone+0x914>)
   118a0:	4d79      	ldr	r5, [pc, #484]	; (11a88 <LORAWAN_RxDone+0x8f4>)
   118a2:	781b      	ldrb	r3, [r3, #0]
   118a4:	06db      	lsls	r3, r3, #27
   118a6:	d400      	bmi.n	118aa <LORAWAN_RxDone+0x716>
   118a8:	e15b      	b.n	11b62 <LORAWAN_RxDone+0x9ce>
   118aa:	2220      	movs	r2, #32
   118ac:	4b7f      	ldr	r3, [pc, #508]	; (11aac <LORAWAN_RxDone+0x918>)
   118ae:	781b      	ldrb	r3, [r3, #0]
   118b0:	401a      	ands	r2, r3
   118b2:	9205      	str	r2, [sp, #20]
   118b4:	d000      	beq.n	118b8 <LORAWAN_RxDone+0x724>
   118b6:	e154      	b.n	11b62 <LORAWAN_RxDone+0x9ce>
   118b8:	320a      	adds	r2, #10
   118ba:	4213      	tst	r3, r2
   118bc:	d100      	bne.n	118c0 <LORAWAN_RxDone+0x72c>
   118be:	e150      	b.n	11b62 <LORAWAN_RxDone+0x9ce>
   118c0:	002b      	movs	r3, r5
   118c2:	33cc      	adds	r3, #204	; 0xcc
   118c4:	781b      	ldrb	r3, [r3, #0]
   118c6:	a90f      	add	r1, sp, #60	; 0x3c
   118c8:	704b      	strb	r3, [r1, #1]
   118ca:	002e      	movs	r6, r5
   118cc:	2301      	movs	r3, #1
   118ce:	36bf      	adds	r6, #191	; 0xbf
   118d0:	700b      	strb	r3, [r1, #0]
   118d2:	7833      	ldrb	r3, [r6, #0]
   118d4:	aa0e      	add	r2, sp, #56	; 0x38
   118d6:	2030      	movs	r0, #48	; 0x30
   118d8:	4f75      	ldr	r7, [pc, #468]	; (11ab0 <LORAWAN_RxDone+0x91c>)
   118da:	708b      	strb	r3, [r1, #2]
   118dc:	47b8      	blx	r7
   118de:	9006      	str	r0, [sp, #24]
   118e0:	2808      	cmp	r0, #8
   118e2:	d000      	beq.n	118e6 <LORAWAN_RxDone+0x752>
   118e4:	e0f4      	b.n	11ad0 <LORAWAN_RxDone+0x93c>
   118e6:	4b73      	ldr	r3, [pc, #460]	; (11ab4 <LORAWAN_RxDone+0x920>)
   118e8:	9805      	ldr	r0, [sp, #20]
   118ea:	4798      	blx	r3
   118ec:	4b6f      	ldr	r3, [pc, #444]	; (11aac <LORAWAN_RxDone+0x918>)
   118ee:	9a06      	ldr	r2, [sp, #24]
   118f0:	781b      	ldrb	r3, [r3, #0]
   118f2:	4393      	bics	r3, r2
   118f4:	4a6d      	ldr	r2, [pc, #436]	; (11aac <LORAWAN_RxDone+0x918>)
   118f6:	7013      	strb	r3, [r2, #0]
   118f8:	e6fd      	b.n	116f6 <LORAWAN_RxDone+0x562>
   118fa:	0023      	movs	r3, r4
   118fc:	33d4      	adds	r3, #212	; 0xd4
   118fe:	781b      	ldrb	r3, [r3, #0]
   11900:	2b01      	cmp	r3, #1
   11902:	d108      	bne.n	11916 <LORAWAN_RxDone+0x782>
   11904:	0023      	movs	r3, r4
   11906:	220e      	movs	r2, #14
   11908:	335c      	adds	r3, #92	; 0x5c
   1190a:	781b      	ldrb	r3, [r3, #0]
   1190c:	4013      	ands	r3, r2
   1190e:	2b06      	cmp	r3, #6
   11910:	d101      	bne.n	11916 <LORAWAN_RxDone+0x782>
   11912:	4b69      	ldr	r3, [pc, #420]	; (11ab8 <LORAWAN_RxDone+0x924>)
   11914:	4798      	blx	r3
   11916:	4969      	ldr	r1, [pc, #420]	; (11abc <LORAWAN_RxDone+0x928>)
   11918:	784a      	ldrb	r2, [r1, #1]
   1191a:	780b      	ldrb	r3, [r1, #0]
   1191c:	0212      	lsls	r2, r2, #8
   1191e:	431a      	orrs	r2, r3
   11920:	788b      	ldrb	r3, [r1, #2]
   11922:	041b      	lsls	r3, r3, #16
   11924:	431a      	orrs	r2, r3
   11926:	78cb      	ldrb	r3, [r1, #3]
   11928:	061b      	lsls	r3, r3, #24
   1192a:	4313      	orrs	r3, r2
   1192c:	d008      	beq.n	11940 <LORAWAN_RxDone+0x7ac>
   1192e:	0022      	movs	r2, r4
   11930:	2120      	movs	r1, #32
   11932:	326c      	adds	r2, #108	; 0x6c
   11934:	7813      	ldrb	r3, [r2, #0]
   11936:	201e      	movs	r0, #30
   11938:	438b      	bics	r3, r1
   1193a:	7013      	strb	r3, [r2, #0]
   1193c:	4b60      	ldr	r3, [pc, #384]	; (11ac0 <LORAWAN_RxDone+0x92c>)
   1193e:	4798      	blx	r3
   11940:	2300      	movs	r3, #0
   11942:	34b8      	adds	r4, #184	; 0xb8
   11944:	7023      	strb	r3, [r4, #0]
   11946:	4b5f      	ldr	r3, [pc, #380]	; (11ac4 <LORAWAN_RxDone+0x930>)
   11948:	4798      	blx	r3
   1194a:	e6d4      	b.n	116f6 <LORAWAN_RxDone+0x562>
   1194c:	003e      	movs	r6, r7
   1194e:	3608      	adds	r6, #8
   11950:	e739      	b.n	117c6 <LORAWAN_RxDone+0x632>
   11952:	9a05      	ldr	r2, [sp, #20]
   11954:	2a00      	cmp	r2, #0
   11956:	d029      	beq.n	119ac <LORAWAN_RxDone+0x818>
   11958:	0702      	lsls	r2, r0, #28
   1195a:	d11d      	bne.n	11998 <LORAWAN_RxDone+0x804>
   1195c:	681a      	ldr	r2, [r3, #0]
   1195e:	390d      	subs	r1, #13
   11960:	0a10      	lsrs	r0, r2, #8
   11962:	4662      	mov	r2, ip
   11964:	b2cc      	uxtb	r4, r1
   11966:	7919      	ldrb	r1, [r3, #4]
   11968:	9201      	str	r2, [sp, #4]
   1196a:	0609      	lsls	r1, r1, #24
   1196c:	4301      	orrs	r1, r0
   1196e:	9103      	str	r1, [sp, #12]
   11970:	4a55      	ldr	r2, [pc, #340]	; (11ac8 <LORAWAN_RxDone+0x934>)
   11972:	4947      	ldr	r1, [pc, #284]	; (11a90 <LORAWAN_RxDone+0x8fc>)
   11974:	9200      	str	r2, [sp, #0]
   11976:	9102      	str	r1, [sp, #8]
   11978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1197a:	2201      	movs	r2, #1
   1197c:	0021      	movs	r1, r4
   1197e:	0028      	movs	r0, r5
   11980:	4e45      	ldr	r6, [pc, #276]	; (11a98 <LORAWAN_RxDone+0x904>)
   11982:	47b0      	blx	r6
   11984:	4b41      	ldr	r3, [pc, #260]	; (11a8c <LORAWAN_RxDone+0x8f8>)
   11986:	0021      	movs	r1, r4
   11988:	0028      	movs	r0, r5
   1198a:	4798      	blx	r3
   1198c:	9b06      	ldr	r3, [sp, #24]
   1198e:	9e06      	ldr	r6, [sp, #24]
   11990:	9305      	str	r3, [sp, #20]
   11992:	2301      	movs	r3, #1
   11994:	9307      	str	r3, [sp, #28]
   11996:	e742      	b.n	1181e <LORAWAN_RxDone+0x68a>
   11998:	001a      	movs	r2, r3
   1199a:	32d4      	adds	r2, #212	; 0xd4
   1199c:	7812      	ldrb	r2, [r2, #0]
   1199e:	2a01      	cmp	r2, #1
   119a0:	d1b9      	bne.n	11916 <LORAWAN_RxDone+0x782>
   119a2:	e7b0      	b.n	11906 <LORAWAN_RxDone+0x772>
   119a4:	2600      	movs	r6, #0
   119a6:	9606      	str	r6, [sp, #24]
   119a8:	9605      	str	r6, [sp, #20]
   119aa:	e738      	b.n	1181e <LORAWAN_RxDone+0x68a>
   119ac:	9b05      	ldr	r3, [sp, #20]
   119ae:	9306      	str	r3, [sp, #24]
   119b0:	001e      	movs	r6, r3
   119b2:	e734      	b.n	1181e <LORAWAN_RxDone+0x68a>
   119b4:	2120      	movs	r1, #32
   119b6:	782a      	ldrb	r2, [r5, #0]
   119b8:	438a      	bics	r2, r1
   119ba:	702a      	strb	r2, [r5, #0]
   119bc:	0022      	movs	r2, r4
   119be:	32d4      	adds	r2, #212	; 0xd4
   119c0:	7812      	ldrb	r2, [r2, #0]
   119c2:	2a01      	cmp	r2, #1
   119c4:	d10e      	bne.n	119e4 <LORAWAN_RxDone+0x850>
   119c6:	781a      	ldrb	r2, [r3, #0]
   119c8:	3912      	subs	r1, #18
   119ca:	438a      	bics	r2, r1
   119cc:	701a      	strb	r2, [r3, #0]
   119ce:	23da      	movs	r3, #218	; 0xda
   119d0:	4a2d      	ldr	r2, [pc, #180]	; (11a88 <LORAWAN_RxDone+0x8f4>)
   119d2:	005b      	lsls	r3, r3, #1
   119d4:	5cd3      	ldrb	r3, [r2, r3]
   119d6:	2b00      	cmp	r3, #0
   119d8:	d000      	beq.n	119dc <LORAWAN_RxDone+0x848>
   119da:	e760      	b.n	1189e <LORAWAN_RxDone+0x70a>
   119dc:	2008      	movs	r0, #8
   119de:	4b38      	ldr	r3, [pc, #224]	; (11ac0 <LORAWAN_RxDone+0x92c>)
   119e0:	4798      	blx	r3
   119e2:	e75c      	b.n	1189e <LORAWAN_RxDone+0x70a>
   119e4:	2a04      	cmp	r2, #4
   119e6:	d1f2      	bne.n	119ce <LORAWAN_RxDone+0x83a>
   119e8:	0023      	movs	r3, r4
   119ea:	33c8      	adds	r3, #200	; 0xc8
   119ec:	7818      	ldrb	r0, [r3, #0]
   119ee:	4b2b      	ldr	r3, [pc, #172]	; (11a9c <LORAWAN_RxDone+0x908>)
   119f0:	4798      	blx	r3
   119f2:	e7ec      	b.n	119ce <LORAWAN_RxDone+0x83a>
   119f4:	9b07      	ldr	r3, [sp, #28]
   119f6:	2b00      	cmp	r3, #0
   119f8:	d013      	beq.n	11a22 <LORAWAN_RxDone+0x88e>
   119fa:	0023      	movs	r3, r4
   119fc:	33d4      	adds	r3, #212	; 0xd4
   119fe:	781e      	ldrb	r6, [r3, #0]
   11a00:	2e01      	cmp	r6, #1
   11a02:	d10e      	bne.n	11a22 <LORAWAN_RxDone+0x88e>
   11a04:	4b26      	ldr	r3, [pc, #152]	; (11aa0 <LORAWAN_RxDone+0x90c>)
   11a06:	4798      	blx	r3
   11a08:	0022      	movs	r2, r4
   11a0a:	325c      	adds	r2, #92	; 0x5c
   11a0c:	7853      	ldrb	r3, [r2, #1]
   11a0e:	43b3      	bics	r3, r6
   11a10:	7053      	strb	r3, [r2, #1]
   11a12:	2220      	movs	r2, #32
   11a14:	782b      	ldrb	r3, [r5, #0]
   11a16:	4393      	bics	r3, r2
   11a18:	702b      	strb	r3, [r5, #0]
   11a1a:	23da      	movs	r3, #218	; 0xda
   11a1c:	005b      	lsls	r3, r3, #1
   11a1e:	5ce3      	ldrb	r3, [r4, r3]
   11a20:	e7d9      	b.n	119d6 <LORAWAN_RxDone+0x842>
   11a22:	4b2a      	ldr	r3, [pc, #168]	; (11acc <LORAWAN_RxDone+0x938>)
   11a24:	4798      	blx	r3
   11a26:	e73a      	b.n	1189e <LORAWAN_RxDone+0x70a>
   11a28:	9a06      	ldr	r2, [sp, #24]
   11a2a:	2a00      	cmp	r2, #0
   11a2c:	d00b      	beq.n	11a46 <LORAWAN_RxDone+0x8b2>
   11a2e:	9a05      	ldr	r2, [sp, #20]
   11a30:	0031      	movs	r1, r6
   11a32:	0038      	movs	r0, r7
   11a34:	4b1b      	ldr	r3, [pc, #108]	; (11aa4 <LORAWAN_RxDone+0x910>)
   11a36:	4798      	blx	r3
   11a38:	0022      	movs	r2, r4
   11a3a:	2101      	movs	r1, #1
   11a3c:	325c      	adds	r2, #92	; 0x5c
   11a3e:	7853      	ldrb	r3, [r2, #1]
   11a40:	438b      	bics	r3, r1
   11a42:	7053      	strb	r3, [r2, #1]
   11a44:	e72b      	b.n	1189e <LORAWAN_RxDone+0x70a>
   11a46:	2220      	movs	r2, #32
   11a48:	4393      	bics	r3, r2
   11a4a:	702b      	strb	r3, [r5, #0]
   11a4c:	0023      	movs	r3, r4
   11a4e:	33d4      	adds	r3, #212	; 0xd4
   11a50:	781b      	ldrb	r3, [r3, #0]
   11a52:	2b01      	cmp	r3, #1
   11a54:	d10e      	bne.n	11a74 <LORAWAN_RxDone+0x8e0>
   11a56:	0022      	movs	r2, r4
   11a58:	210e      	movs	r1, #14
   11a5a:	325c      	adds	r2, #92	; 0x5c
   11a5c:	7813      	ldrb	r3, [r2, #0]
   11a5e:	438b      	bics	r3, r1
   11a60:	7013      	strb	r3, [r2, #0]
   11a62:	23da      	movs	r3, #218	; 0xda
   11a64:	005b      	lsls	r3, r3, #1
   11a66:	5ce3      	ldrb	r3, [r4, r3]
   11a68:	2b00      	cmp	r3, #0
   11a6a:	d1e5      	bne.n	11a38 <LORAWAN_RxDone+0x8a4>
   11a6c:	2008      	movs	r0, #8
   11a6e:	4b14      	ldr	r3, [pc, #80]	; (11ac0 <LORAWAN_RxDone+0x92c>)
   11a70:	4798      	blx	r3
   11a72:	e7e1      	b.n	11a38 <LORAWAN_RxDone+0x8a4>
   11a74:	2b04      	cmp	r3, #4
   11a76:	d1f4      	bne.n	11a62 <LORAWAN_RxDone+0x8ce>
   11a78:	0023      	movs	r3, r4
   11a7a:	33c8      	adds	r3, #200	; 0xc8
   11a7c:	7818      	ldrb	r0, [r3, #0]
   11a7e:	4b07      	ldr	r3, [pc, #28]	; (11a9c <LORAWAN_RxDone+0x908>)
   11a80:	4798      	blx	r3
   11a82:	e7ee      	b.n	11a62 <LORAWAN_RxDone+0x8ce>
   11a84:	0000948d 	.word	0x0000948d
   11a88:	200030e4 	.word	0x200030e4
   11a8c:	00010f6d 	.word	0x00010f6d
   11a90:	20002eac 	.word	0x20002eac
   11a94:	200030f9 	.word	0x200030f9
   11a98:	00010555 	.word	0x00010555
   11a9c:	0000d069 	.word	0x0000d069
   11aa0:	0000fcbd 	.word	0x0000fcbd
   11aa4:	000109b1 	.word	0x000109b1
   11aa8:	20003140 	.word	0x20003140
   11aac:	20003150 	.word	0x20003150
   11ab0:	0000c8f9 	.word	0x0000c8f9
   11ab4:	0000fa89 	.word	0x0000fa89
   11ab8:	0000f9bd 	.word	0x0000f9bd
   11abc:	200033b8 	.word	0x200033b8
   11ac0:	000108f5 	.word	0x000108f5
   11ac4:	00010d3d 	.word	0x00010d3d
   11ac8:	200030e9 	.word	0x200030e9
   11acc:	0000fc49 	.word	0x0000fc49
   11ad0:	35f0      	adds	r5, #240	; 0xf0
   11ad2:	782b      	ldrb	r3, [r5, #0]
   11ad4:	079a      	lsls	r2, r3, #30
   11ad6:	d521      	bpl.n	11b1c <LORAWAN_RxDone+0x988>
   11ad8:	aa10      	add	r2, sp, #64	; 0x40
   11ada:	0031      	movs	r1, r6
   11adc:	2026      	movs	r0, #38	; 0x26
   11ade:	47b8      	blx	r7
   11ae0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11ae2:	1c5a      	adds	r2, r3, #1
   11ae4:	d001      	beq.n	11aea <LORAWAN_RxDone+0x956>
   11ae6:	3314      	adds	r3, #20
   11ae8:	9310      	str	r3, [sp, #64]	; 0x40
   11aea:	0021      	movs	r1, r4
   11aec:	220e      	movs	r2, #14
   11aee:	315c      	adds	r1, #92	; 0x5c
   11af0:	780b      	ldrb	r3, [r1, #0]
   11af2:	4393      	bics	r3, r2
   11af4:	001a      	movs	r2, r3
   11af6:	230c      	movs	r3, #12
   11af8:	4313      	orrs	r3, r2
   11afa:	700b      	strb	r3, [r1, #0]
   11afc:	23c0      	movs	r3, #192	; 0xc0
   11afe:	33ff      	adds	r3, #255	; 0xff
   11b00:	5ce3      	ldrb	r3, [r4, r3]
   11b02:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11b04:	21fa      	movs	r1, #250	; 0xfa
   11b06:	1ad3      	subs	r3, r2, r3
   11b08:	2200      	movs	r2, #0
   11b0a:	0089      	lsls	r1, r1, #2
   11b0c:	4359      	muls	r1, r3
   11b0e:	34c6      	adds	r4, #198	; 0xc6
   11b10:	4b31      	ldr	r3, [pc, #196]	; (11bd8 <LORAWAN_RxDone+0xa44>)
   11b12:	7820      	ldrb	r0, [r4, #0]
   11b14:	9200      	str	r2, [sp, #0]
   11b16:	4c31      	ldr	r4, [pc, #196]	; (11bdc <LORAWAN_RxDone+0xa48>)
   11b18:	47a0      	blx	r4
   11b1a:	e5ec      	b.n	116f6 <LORAWAN_RxDone+0x562>
   11b1c:	075b      	lsls	r3, r3, #29
   11b1e:	d400      	bmi.n	11b22 <LORAWAN_RxDone+0x98e>
   11b20:	e5e9      	b.n	116f6 <LORAWAN_RxDone+0x562>
   11b22:	aa10      	add	r2, sp, #64	; 0x40
   11b24:	0031      	movs	r1, r6
   11b26:	2033      	movs	r0, #51	; 0x33
   11b28:	47b8      	blx	r7
   11b2a:	220e      	movs	r2, #14
   11b2c:	4b2c      	ldr	r3, [pc, #176]	; (11be0 <LORAWAN_RxDone+0xa4c>)
   11b2e:	781b      	ldrb	r3, [r3, #0]
   11b30:	4393      	bics	r3, r2
   11b32:	001a      	movs	r2, r3
   11b34:	230c      	movs	r3, #12
   11b36:	4313      	orrs	r3, r2
   11b38:	4a29      	ldr	r2, [pc, #164]	; (11be0 <LORAWAN_RxDone+0xa4c>)
   11b3a:	7013      	strb	r3, [r2, #0]
   11b3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11b3e:	1c5a      	adds	r2, r3, #1
   11b40:	d001      	beq.n	11b46 <LORAWAN_RxDone+0x9b2>
   11b42:	3301      	adds	r3, #1
   11b44:	9310      	str	r3, [sp, #64]	; 0x40
   11b46:	23c0      	movs	r3, #192	; 0xc0
   11b48:	33ff      	adds	r3, #255	; 0xff
   11b4a:	5ce3      	ldrb	r3, [r4, r3]
   11b4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11b4e:	21fa      	movs	r1, #250	; 0xfa
   11b50:	1ad3      	subs	r3, r2, r3
   11b52:	2200      	movs	r2, #0
   11b54:	0089      	lsls	r1, r1, #2
   11b56:	34c9      	adds	r4, #201	; 0xc9
   11b58:	4359      	muls	r1, r3
   11b5a:	7820      	ldrb	r0, [r4, #0]
   11b5c:	4b21      	ldr	r3, [pc, #132]	; (11be4 <LORAWAN_RxDone+0xa50>)
   11b5e:	9200      	str	r2, [sp, #0]
   11b60:	e7d9      	b.n	11b16 <LORAWAN_RxDone+0x982>
   11b62:	35d4      	adds	r5, #212	; 0xd4
   11b64:	782b      	ldrb	r3, [r5, #0]
   11b66:	2b04      	cmp	r3, #4
   11b68:	d000      	beq.n	11b6c <LORAWAN_RxDone+0x9d8>
   11b6a:	e5c4      	b.n	116f6 <LORAWAN_RxDone+0x562>
   11b6c:	0038      	movs	r0, r7
   11b6e:	4b1e      	ldr	r3, [pc, #120]	; (11be8 <LORAWAN_RxDone+0xa54>)
   11b70:	4798      	blx	r3
   11b72:	e5c0      	b.n	116f6 <LORAWAN_RxDone+0x562>
   11b74:	220e      	movs	r2, #14
   11b76:	4013      	ands	r3, r2
   11b78:	2b0a      	cmp	r3, #10
   11b7a:	d008      	beq.n	11b8e <LORAWAN_RxDone+0x9fa>
   11b7c:	2b06      	cmp	r3, #6
   11b7e:	d000      	beq.n	11b82 <LORAWAN_RxDone+0x9ee>
   11b80:	e506      	b.n	11590 <LORAWAN_RxDone+0x3fc>
   11b82:	0023      	movs	r3, r4
   11b84:	33d0      	adds	r3, #208	; 0xd0
   11b86:	781b      	ldrb	r3, [r3, #0]
   11b88:	2b00      	cmp	r3, #0
   11b8a:	d100      	bne.n	11b8e <LORAWAN_RxDone+0x9fa>
   11b8c:	e500      	b.n	11590 <LORAWAN_RxDone+0x3fc>
   11b8e:	2220      	movs	r2, #32
   11b90:	346c      	adds	r4, #108	; 0x6c
   11b92:	7823      	ldrb	r3, [r4, #0]
   11b94:	2019      	movs	r0, #25
   11b96:	4393      	bics	r3, r2
   11b98:	7023      	strb	r3, [r4, #0]
   11b9a:	e506      	b.n	115aa <LORAWAN_RxDone+0x416>
   11b9c:	4913      	ldr	r1, [pc, #76]	; (11bec <LORAWAN_RxDone+0xa58>)
   11b9e:	784a      	ldrb	r2, [r1, #1]
   11ba0:	780b      	ldrb	r3, [r1, #0]
   11ba2:	0212      	lsls	r2, r2, #8
   11ba4:	431a      	orrs	r2, r3
   11ba6:	788b      	ldrb	r3, [r1, #2]
   11ba8:	041b      	lsls	r3, r3, #16
   11baa:	431a      	orrs	r2, r3
   11bac:	78cb      	ldrb	r3, [r1, #3]
   11bae:	061b      	lsls	r3, r3, #24
   11bb0:	4313      	orrs	r3, r2
   11bb2:	d100      	bne.n	11bb6 <LORAWAN_RxDone+0xa22>
   11bb4:	e59f      	b.n	116f6 <LORAWAN_RxDone+0x562>
   11bb6:	4b0e      	ldr	r3, [pc, #56]	; (11bf0 <LORAWAN_RxDone+0xa5c>)
   11bb8:	4c0e      	ldr	r4, [pc, #56]	; (11bf4 <LORAWAN_RxDone+0xa60>)
   11bba:	781b      	ldrb	r3, [r3, #0]
   11bbc:	2b10      	cmp	r3, #16
   11bbe:	d105      	bne.n	11bcc <LORAWAN_RxDone+0xa38>
   11bc0:	0001      	movs	r1, r0
   11bc2:	2000      	movs	r0, #0
   11bc4:	9a05      	ldr	r2, [sp, #20]
   11bc6:	3b0c      	subs	r3, #12
   11bc8:	47a0      	blx	r4
   11bca:	e594      	b.n	116f6 <LORAWAN_RxDone+0x562>
   11bcc:	2300      	movs	r3, #0
   11bce:	0001      	movs	r1, r0
   11bd0:	9a05      	ldr	r2, [sp, #20]
   11bd2:	0018      	movs	r0, r3
   11bd4:	e7f8      	b.n	11bc8 <LORAWAN_RxDone+0xa34>
   11bd6:	46c0      	nop			; (mov r8, r8)
   11bd8:	0000fb7d 	.word	0x0000fb7d
   11bdc:	0000cd65 	.word	0x0000cd65
   11be0:	20003140 	.word	0x20003140
   11be4:	00010445 	.word	0x00010445
   11be8:	00011e01 	.word	0x00011e01
   11bec:	200033b8 	.word	0x200033b8
   11bf0:	200023f3 	.word	0x200023f3
   11bf4:	00010959 	.word	0x00010959

00011bf8 <AESEncodeLoRa>:
   11bf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   11bfa:	0004      	movs	r4, r0
   11bfc:	2210      	movs	r2, #16
   11bfe:	4668      	mov	r0, sp
   11c00:	4b03      	ldr	r3, [pc, #12]	; (11c10 <AESEncodeLoRa+0x18>)
   11c02:	4798      	blx	r3
   11c04:	4669      	mov	r1, sp
   11c06:	0020      	movs	r0, r4
   11c08:	4b02      	ldr	r3, [pc, #8]	; (11c14 <AESEncodeLoRa+0x1c>)
   11c0a:	4798      	blx	r3
   11c0c:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
   11c0e:	46c0      	nop			; (mov r8, r8)
   11c10:	000155bf 	.word	0x000155bf
   11c14:	0000c94d 	.word	0x0000c94d

00011c18 <FillSubKey.constprop.0>:
   11c18:	b530      	push	{r4, r5, lr}
   11c1a:	2310      	movs	r3, #16
   11c1c:	2400      	movs	r4, #0
   11c1e:	3b01      	subs	r3, #1
   11c20:	b2db      	uxtb	r3, r3
   11c22:	2bff      	cmp	r3, #255	; 0xff
   11c24:	d100      	bne.n	11c28 <FillSubKey.constprop.0+0x10>
   11c26:	bd30      	pop	{r4, r5, pc}
   11c28:	18c5      	adds	r5, r0, r3
   11c2a:	782a      	ldrb	r2, [r5, #0]
   11c2c:	0052      	lsls	r2, r2, #1
   11c2e:	4322      	orrs	r2, r4
   11c30:	54ca      	strb	r2, [r1, r3]
   11c32:	782c      	ldrb	r4, [r5, #0]
   11c34:	09e4      	lsrs	r4, r4, #7
   11c36:	e7f2      	b.n	11c1e <FillSubKey.constprop.0+0x6>

00011c38 <AESCmac>:
   11c38:	b5f0      	push	{r4, r5, r6, r7, lr}
   11c3a:	b09d      	sub	sp, #116	; 0x74
   11c3c:	ad18      	add	r5, sp, #96	; 0x60
   11c3e:	4c59      	ldr	r4, [pc, #356]	; (11da4 <AESCmac+0x16c>)
   11c40:	9001      	str	r0, [sp, #4]
   11c42:	9103      	str	r1, [sp, #12]
   11c44:	9202      	str	r2, [sp, #8]
   11c46:	2100      	movs	r1, #0
   11c48:	2210      	movs	r2, #16
   11c4a:	0028      	movs	r0, r5
   11c4c:	001f      	movs	r7, r3
   11c4e:	47a0      	blx	r4
   11c50:	2387      	movs	r3, #135	; 0x87
   11c52:	ae14      	add	r6, sp, #80	; 0x50
   11c54:	2210      	movs	r2, #16
   11c56:	2100      	movs	r1, #0
   11c58:	0030      	movs	r0, r6
   11c5a:	73eb      	strb	r3, [r5, #15]
   11c5c:	47a0      	blx	r4
   11c5e:	9901      	ldr	r1, [sp, #4]
   11c60:	0030      	movs	r0, r6
   11c62:	4b51      	ldr	r3, [pc, #324]	; (11da8 <AESCmac+0x170>)
   11c64:	4798      	blx	r3
   11c66:	7832      	ldrb	r2, [r6, #0]
   11c68:	ac04      	add	r4, sp, #16
   11c6a:	4b50      	ldr	r3, [pc, #320]	; (11dac <AESCmac+0x174>)
   11c6c:	0021      	movs	r1, r4
   11c6e:	0030      	movs	r0, r6
   11c70:	2a7f      	cmp	r2, #127	; 0x7f
   11c72:	d83e      	bhi.n	11cf2 <AESCmac+0xba>
   11c74:	4798      	blx	r3
   11c76:	ab04      	add	r3, sp, #16
   11c78:	781a      	ldrb	r2, [r3, #0]
   11c7a:	ac08      	add	r4, sp, #32
   11c7c:	4b4b      	ldr	r3, [pc, #300]	; (11dac <AESCmac+0x174>)
   11c7e:	0021      	movs	r1, r4
   11c80:	a804      	add	r0, sp, #16
   11c82:	2a7f      	cmp	r2, #127	; 0x7f
   11c84:	d83f      	bhi.n	11d06 <AESCmac+0xce>
   11c86:	4798      	blx	r3
   11c88:	0039      	movs	r1, r7
   11c8a:	310f      	adds	r1, #15
   11c8c:	110b      	asrs	r3, r1, #4
   11c8e:	d04d      	beq.n	11d2c <AESCmac+0xf4>
   11c90:	b2db      	uxtb	r3, r3
   11c92:	9300      	str	r3, [sp, #0]
   11c94:	073b      	lsls	r3, r7, #28
   11c96:	d14b      	bne.n	11d30 <AESCmac+0xf8>
   11c98:	9b00      	ldr	r3, [sp, #0]
   11c9a:	20ff      	movs	r0, #255	; 0xff
   11c9c:	1e5a      	subs	r2, r3, #1
   11c9e:	0112      	lsls	r2, r2, #4
   11ca0:	b2d2      	uxtb	r2, r2
   11ca2:	0013      	movs	r3, r2
   11ca4:	0100      	lsls	r0, r0, #4
   11ca6:	4001      	ands	r1, r0
   11ca8:	ad14      	add	r5, sp, #80	; 0x50
   11caa:	1a98      	subs	r0, r3, r2
   11cac:	b2c0      	uxtb	r0, r0
   11cae:	428b      	cmp	r3, r1
   11cb0:	db33      	blt.n	11d1a <AESCmac+0xe2>
   11cb2:	2210      	movs	r2, #16
   11cb4:	2100      	movs	r1, #0
   11cb6:	a80c      	add	r0, sp, #48	; 0x30
   11cb8:	4b3a      	ldr	r3, [pc, #232]	; (11da4 <AESCmac+0x16c>)
   11cba:	4798      	blx	r3
   11cbc:	2400      	movs	r4, #0
   11cbe:	9b00      	ldr	r3, [sp, #0]
   11cc0:	3b01      	subs	r3, #1
   11cc2:	429c      	cmp	r4, r3
   11cc4:	db57      	blt.n	11d76 <AESCmac+0x13e>
   11cc6:	2400      	movs	r4, #0
   11cc8:	ad10      	add	r5, sp, #64	; 0x40
   11cca:	a80c      	add	r0, sp, #48	; 0x30
   11ccc:	a914      	add	r1, sp, #80	; 0x50
   11cce:	5c23      	ldrb	r3, [r4, r0]
   11cd0:	5c62      	ldrb	r2, [r4, r1]
   11cd2:	4053      	eors	r3, r2
   11cd4:	5563      	strb	r3, [r4, r5]
   11cd6:	3401      	adds	r4, #1
   11cd8:	2c10      	cmp	r4, #16
   11cda:	d1f8      	bne.n	11cce <AESCmac+0x96>
   11cdc:	9901      	ldr	r1, [sp, #4]
   11cde:	0028      	movs	r0, r5
   11ce0:	4b31      	ldr	r3, [pc, #196]	; (11da8 <AESCmac+0x170>)
   11ce2:	4798      	blx	r3
   11ce4:	0022      	movs	r2, r4
   11ce6:	0029      	movs	r1, r5
   11ce8:	9803      	ldr	r0, [sp, #12]
   11cea:	4b31      	ldr	r3, [pc, #196]	; (11db0 <AESCmac+0x178>)
   11cec:	4798      	blx	r3
   11cee:	b01d      	add	sp, #116	; 0x74
   11cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11cf2:	4798      	blx	r3
   11cf4:	2300      	movs	r3, #0
   11cf6:	5d1a      	ldrb	r2, [r3, r4]
   11cf8:	5ce9      	ldrb	r1, [r5, r3]
   11cfa:	404a      	eors	r2, r1
   11cfc:	551a      	strb	r2, [r3, r4]
   11cfe:	3301      	adds	r3, #1
   11d00:	2b10      	cmp	r3, #16
   11d02:	d1f8      	bne.n	11cf6 <AESCmac+0xbe>
   11d04:	e7b7      	b.n	11c76 <AESCmac+0x3e>
   11d06:	4798      	blx	r3
   11d08:	2300      	movs	r3, #0
   11d0a:	5d1a      	ldrb	r2, [r3, r4]
   11d0c:	5ce9      	ldrb	r1, [r5, r3]
   11d0e:	404a      	eors	r2, r1
   11d10:	551a      	strb	r2, [r3, r4]
   11d12:	3301      	adds	r3, #1
   11d14:	2b10      	cmp	r3, #16
   11d16:	d1f8      	bne.n	11d0a <AESCmac+0xd2>
   11d18:	e7b6      	b.n	11c88 <AESCmac+0x50>
   11d1a:	9c02      	ldr	r4, [sp, #8]
   11d1c:	ae04      	add	r6, sp, #16
   11d1e:	5ce4      	ldrb	r4, [r4, r3]
   11d20:	5c36      	ldrb	r6, [r6, r0]
   11d22:	3301      	adds	r3, #1
   11d24:	4074      	eors	r4, r6
   11d26:	542c      	strb	r4, [r5, r0]
   11d28:	b2db      	uxtb	r3, r3
   11d2a:	e7be      	b.n	11caa <AESCmac+0x72>
   11d2c:	2301      	movs	r3, #1
   11d2e:	9300      	str	r3, [sp, #0]
   11d30:	2300      	movs	r3, #0
   11d32:	220f      	movs	r2, #15
   11d34:	003e      	movs	r6, r7
   11d36:	001c      	movs	r4, r3
   11d38:	2080      	movs	r0, #128	; 0x80
   11d3a:	4396      	bics	r6, r2
   11d3c:	4017      	ands	r7, r2
   11d3e:	aa18      	add	r2, sp, #96	; 0x60
   11d40:	b2d9      	uxtb	r1, r3
   11d42:	428f      	cmp	r7, r1
   11d44:	d911      	bls.n	11d6a <AESCmac+0x132>
   11d46:	9902      	ldr	r1, [sp, #8]
   11d48:	1989      	adds	r1, r1, r6
   11d4a:	5cc9      	ldrb	r1, [r1, r3]
   11d4c:	54d1      	strb	r1, [r2, r3]
   11d4e:	3301      	adds	r3, #1
   11d50:	2b10      	cmp	r3, #16
   11d52:	d1f5      	bne.n	11d40 <AESCmac+0x108>
   11d54:	2300      	movs	r3, #0
   11d56:	a914      	add	r1, sp, #80	; 0x50
   11d58:	a808      	add	r0, sp, #32
   11d5a:	5cea      	ldrb	r2, [r5, r3]
   11d5c:	5c1c      	ldrb	r4, [r3, r0]
   11d5e:	4062      	eors	r2, r4
   11d60:	545a      	strb	r2, [r3, r1]
   11d62:	3301      	adds	r3, #1
   11d64:	2b10      	cmp	r3, #16
   11d66:	d1f8      	bne.n	11d5a <AESCmac+0x122>
   11d68:	e7a3      	b.n	11cb2 <AESCmac+0x7a>
   11d6a:	428f      	cmp	r7, r1
   11d6c:	d101      	bne.n	11d72 <AESCmac+0x13a>
   11d6e:	54d0      	strb	r0, [r2, r3]
   11d70:	e7ed      	b.n	11d4e <AESCmac+0x116>
   11d72:	54d4      	strb	r4, [r2, r3]
   11d74:	e7eb      	b.n	11d4e <AESCmac+0x116>
   11d76:	2200      	movs	r2, #0
   11d78:	9802      	ldr	r0, [sp, #8]
   11d7a:	0123      	lsls	r3, r4, #4
   11d7c:	a910      	add	r1, sp, #64	; 0x40
   11d7e:	18c0      	adds	r0, r0, r3
   11d80:	ad0c      	add	r5, sp, #48	; 0x30
   11d82:	5c83      	ldrb	r3, [r0, r2]
   11d84:	5d56      	ldrb	r6, [r2, r5]
   11d86:	4073      	eors	r3, r6
   11d88:	5453      	strb	r3, [r2, r1]
   11d8a:	3201      	adds	r2, #1
   11d8c:	2a10      	cmp	r2, #16
   11d8e:	d1f8      	bne.n	11d82 <AESCmac+0x14a>
   11d90:	4b07      	ldr	r3, [pc, #28]	; (11db0 <AESCmac+0x178>)
   11d92:	0028      	movs	r0, r5
   11d94:	4798      	blx	r3
   11d96:	3401      	adds	r4, #1
   11d98:	9901      	ldr	r1, [sp, #4]
   11d9a:	0028      	movs	r0, r5
   11d9c:	4b02      	ldr	r3, [pc, #8]	; (11da8 <AESCmac+0x170>)
   11d9e:	4798      	blx	r3
   11da0:	b2e4      	uxtb	r4, r4
   11da2:	e78c      	b.n	11cbe <AESCmac+0x86>
   11da4:	000155d1 	.word	0x000155d1
   11da8:	00011bf9 	.word	0x00011bf9
   11dac:	00011c19 	.word	0x00011c19
   11db0:	000155bf 	.word	0x000155bf

00011db4 <LorawanClasscUlAckTimerCallback>:
   11db4:	2102      	movs	r1, #2
   11db6:	4b03      	ldr	r3, [pc, #12]	; (11dc4 <LorawanClasscUlAckTimerCallback+0x10>)
   11db8:	336c      	adds	r3, #108	; 0x6c
   11dba:	781a      	ldrb	r2, [r3, #0]
   11dbc:	438a      	bics	r2, r1
   11dbe:	701a      	strb	r2, [r3, #0]
   11dc0:	4770      	bx	lr
   11dc2:	46c0      	nop			; (mov r8, r8)
   11dc4:	200030e4 	.word	0x200030e4

00011dc8 <LorawanClasscValidateSend>:
   11dc8:	23da      	movs	r3, #218	; 0xda
   11dca:	b510      	push	{r4, lr}
   11dcc:	4c0a      	ldr	r4, [pc, #40]	; (11df8 <LorawanClasscValidateSend+0x30>)
   11dce:	005b      	lsls	r3, r3, #1
   11dd0:	5ce3      	ldrb	r3, [r4, r3]
   11dd2:	2b00      	cmp	r3, #0
   11dd4:	d008      	beq.n	11de8 <LorawanClasscValidateSend+0x20>
   11dd6:	220e      	movs	r2, #14
   11dd8:	345c      	adds	r4, #92	; 0x5c
   11dda:	7823      	ldrb	r3, [r4, #0]
   11ddc:	2008      	movs	r0, #8
   11dde:	4013      	ands	r3, r2
   11de0:	2b02      	cmp	r3, #2
   11de2:	d100      	bne.n	11de6 <LorawanClasscValidateSend+0x1e>
   11de4:	2011      	movs	r0, #17
   11de6:	bd10      	pop	{r4, pc}
   11de8:	0023      	movs	r3, r4
   11dea:	33fc      	adds	r3, #252	; 0xfc
   11dec:	7818      	ldrb	r0, [r3, #0]
   11dee:	4b03      	ldr	r3, [pc, #12]	; (11dfc <LorawanClasscValidateSend+0x34>)
   11df0:	4798      	blx	r3
   11df2:	2800      	cmp	r0, #0
   11df4:	d1ef      	bne.n	11dd6 <LorawanClasscValidateSend+0xe>
   11df6:	e7f5      	b.n	11de4 <LorawanClasscValidateSend+0x1c>
   11df8:	200030e4 	.word	0x200030e4
   11dfc:	0000cefd 	.word	0x0000cefd

00011e00 <LorawanClasscRxDone>:
   11e00:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11e02:	221f      	movs	r2, #31
   11e04:	7803      	ldrb	r3, [r0, #0]
   11e06:	4c13      	ldr	r4, [pc, #76]	; (11e54 <LorawanClasscRxDone+0x54>)
   11e08:	4393      	bics	r3, r2
   11e0a:	2ba0      	cmp	r3, #160	; 0xa0
   11e0c:	d10c      	bne.n	11e28 <LorawanClasscRxDone+0x28>
   11e0e:	0025      	movs	r5, r4
   11e10:	35fc      	adds	r5, #252	; 0xfc
   11e12:	7828      	ldrb	r0, [r5, #0]
   11e14:	4b10      	ldr	r3, [pc, #64]	; (11e58 <LorawanClasscRxDone+0x58>)
   11e16:	4798      	blx	r3
   11e18:	1e02      	subs	r2, r0, #0
   11e1a:	d014      	beq.n	11e46 <LorawanClasscRxDone+0x46>
   11e1c:	0022      	movs	r2, r4
   11e1e:	2102      	movs	r1, #2
   11e20:	326c      	adds	r2, #108	; 0x6c
   11e22:	7813      	ldrb	r3, [r2, #0]
   11e24:	438b      	bics	r3, r1
   11e26:	7013      	strb	r3, [r2, #0]
   11e28:	345c      	adds	r4, #92	; 0x5c
   11e2a:	7823      	ldrb	r3, [r4, #0]
   11e2c:	220e      	movs	r2, #14
   11e2e:	0019      	movs	r1, r3
   11e30:	4011      	ands	r1, r2
   11e32:	2906      	cmp	r1, #6
   11e34:	d103      	bne.n	11e3e <LorawanClasscRxDone+0x3e>
   11e36:	4393      	bics	r3, r2
   11e38:	3a04      	subs	r2, #4
   11e3a:	4313      	orrs	r3, r2
   11e3c:	7023      	strb	r3, [r4, #0]
   11e3e:	2000      	movs	r0, #0
   11e40:	4b06      	ldr	r3, [pc, #24]	; (11e5c <LorawanClasscRxDone+0x5c>)
   11e42:	4798      	blx	r3
   11e44:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   11e46:	7828      	ldrb	r0, [r5, #0]
   11e48:	4b05      	ldr	r3, [pc, #20]	; (11e60 <LorawanClasscRxDone+0x60>)
   11e4a:	9200      	str	r2, [sp, #0]
   11e4c:	4905      	ldr	r1, [pc, #20]	; (11e64 <LorawanClasscRxDone+0x64>)
   11e4e:	4d06      	ldr	r5, [pc, #24]	; (11e68 <LorawanClasscRxDone+0x68>)
   11e50:	47a8      	blx	r5
   11e52:	e7e9      	b.n	11e28 <LorawanClasscRxDone+0x28>
   11e54:	200030e4 	.word	0x200030e4
   11e58:	0000cefd 	.word	0x0000cefd
   11e5c:	00010c91 	.word	0x00010c91
   11e60:	00011db5 	.word	0x00011db5
   11e64:	001e8480 	.word	0x001e8480
   11e68:	0000cd65 	.word	0x0000cd65

00011e6c <LorawanClasscRxTimeout>:
   11e6c:	b510      	push	{r4, lr}
   11e6e:	4b08      	ldr	r3, [pc, #32]	; (11e90 <LorawanClasscRxTimeout+0x24>)
   11e70:	210e      	movs	r1, #14
   11e72:	335c      	adds	r3, #92	; 0x5c
   11e74:	781a      	ldrb	r2, [r3, #0]
   11e76:	0010      	movs	r0, r2
   11e78:	4008      	ands	r0, r1
   11e7a:	2806      	cmp	r0, #6
   11e7c:	d106      	bne.n	11e8c <LorawanClasscRxTimeout+0x20>
   11e7e:	438a      	bics	r2, r1
   11e80:	3904      	subs	r1, #4
   11e82:	430a      	orrs	r2, r1
   11e84:	701a      	strb	r2, [r3, #0]
   11e86:	2000      	movs	r0, #0
   11e88:	4b02      	ldr	r3, [pc, #8]	; (11e94 <LorawanClasscRxTimeout+0x28>)
   11e8a:	4798      	blx	r3
   11e8c:	bd10      	pop	{r4, pc}
   11e8e:	46c0      	nop			; (mov r8, r8)
   11e90:	200030e4 	.word	0x200030e4
   11e94:	00010c91 	.word	0x00010c91

00011e98 <LorawanClasscNotifyAppOnReceive>:
   11e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11e9a:	001f      	movs	r7, r3
   11e9c:	4b08      	ldr	r3, [pc, #32]	; (11ec0 <LorawanClasscNotifyAppOnReceive+0x28>)
   11e9e:	0004      	movs	r4, r0
   11ea0:	33fc      	adds	r3, #252	; 0xfc
   11ea2:	7818      	ldrb	r0, [r3, #0]
   11ea4:	4b07      	ldr	r3, [pc, #28]	; (11ec4 <LorawanClasscNotifyAppOnReceive+0x2c>)
   11ea6:	000d      	movs	r5, r1
   11ea8:	0016      	movs	r6, r2
   11eaa:	4798      	blx	r3
   11eac:	2800      	cmp	r0, #0
   11eae:	d105      	bne.n	11ebc <LorawanClasscNotifyAppOnReceive+0x24>
   11eb0:	0020      	movs	r0, r4
   11eb2:	003b      	movs	r3, r7
   11eb4:	0032      	movs	r2, r6
   11eb6:	0029      	movs	r1, r5
   11eb8:	4c03      	ldr	r4, [pc, #12]	; (11ec8 <LorawanClasscNotifyAppOnReceive+0x30>)
   11eba:	47a0      	blx	r4
   11ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11ebe:	46c0      	nop			; (mov r8, r8)
   11ec0:	200030e4 	.word	0x200030e4
   11ec4:	0000cefd 	.word	0x0000cefd
   11ec8:	00010959 	.word	0x00010959

00011ecc <LorawanMcastValidateHdr>:
   11ecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11ece:	469c      	mov	ip, r3
   11ed0:	2400      	movs	r4, #0
   11ed2:	230a      	movs	r3, #10
   11ed4:	4f18      	ldr	r7, [pc, #96]	; (11f38 <LorawanMcastValidateHdr+0x6c>)
   11ed6:	b2e5      	uxtb	r5, r4
   11ed8:	9501      	str	r5, [sp, #4]
   11eda:	4d18      	ldr	r5, [pc, #96]	; (11f3c <LorawanMcastValidateHdr+0x70>)
   11edc:	2601      	movs	r6, #1
   11ede:	78ad      	ldrb	r5, [r5, #2]
   11ee0:	4125      	asrs	r5, r4
   11ee2:	4235      	tst	r5, r6
   11ee4:	d023      	beq.n	11f2e <LorawanMcastValidateHdr+0x62>
   11ee6:	7886      	ldrb	r6, [r0, #2]
   11ee8:	7845      	ldrb	r5, [r0, #1]
   11eea:	0236      	lsls	r6, r6, #8
   11eec:	432e      	orrs	r6, r5
   11eee:	78c5      	ldrb	r5, [r0, #3]
   11ef0:	042d      	lsls	r5, r5, #16
   11ef2:	432e      	orrs	r6, r5
   11ef4:	7905      	ldrb	r5, [r0, #4]
   11ef6:	062d      	lsls	r5, r5, #24
   11ef8:	4335      	orrs	r5, r6
   11efa:	262c      	movs	r6, #44	; 0x2c
   11efc:	4366      	muls	r6, r4
   11efe:	3605      	adds	r6, #5
   11f00:	36ff      	adds	r6, #255	; 0xff
   11f02:	59be      	ldr	r6, [r7, r6]
   11f04:	42b5      	cmp	r5, r6
   11f06:	d112      	bne.n	11f2e <LorawanMcastValidateHdr+0x62>
   11f08:	003d      	movs	r5, r7
   11f0a:	35d4      	adds	r5, #212	; 0xd4
   11f0c:	782e      	ldrb	r6, [r5, #0]
   11f0e:	2506      	movs	r5, #6
   11f10:	422e      	tst	r6, r5
   11f12:	d00c      	beq.n	11f2e <LorawanMcastValidateHdr+0x62>
   11f14:	2a00      	cmp	r2, #0
   11f16:	d00a      	beq.n	11f2e <LorawanMcastValidateHdr+0x62>
   11f18:	7946      	ldrb	r6, [r0, #5]
   11f1a:	3569      	adds	r5, #105	; 0x69
   11f1c:	422e      	tst	r6, r5
   11f1e:	d106      	bne.n	11f2e <LorawanMcastValidateHdr+0x62>
   11f20:	2903      	cmp	r1, #3
   11f22:	d104      	bne.n	11f2e <LorawanMcastValidateHdr+0x62>
   11f24:	466d      	mov	r5, sp
   11f26:	4663      	mov	r3, ip
   11f28:	792d      	ldrb	r5, [r5, #4]
   11f2a:	701d      	strb	r5, [r3, #0]
   11f2c:	2308      	movs	r3, #8
   11f2e:	3401      	adds	r4, #1
   11f30:	2c04      	cmp	r4, #4
   11f32:	d1d0      	bne.n	11ed6 <LorawanMcastValidateHdr+0xa>
   11f34:	0018      	movs	r0, r3
   11f36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   11f38:	200030e4 	.word	0x200030e4
   11f3c:	200031e3 	.word	0x200031e3

00011f40 <LorawanMcastProcessPkt>:
   11f40:	b5f0      	push	{r4, r5, r6, r7, lr}
   11f42:	b089      	sub	sp, #36	; 0x24
   11f44:	9005      	str	r0, [sp, #20]
   11f46:	000c      	movs	r4, r1
   11f48:	0015      	movs	r5, r2
   11f4a:	7991      	ldrb	r1, [r2, #6]
   11f4c:	79d2      	ldrb	r2, [r2, #7]
   11f4e:	4e31      	ldr	r6, [pc, #196]	; (12014 <LorawanMcastProcessPkt+0xd4>)
   11f50:	0212      	lsls	r2, r2, #8
   11f52:	430a      	orrs	r2, r1
   11f54:	212c      	movs	r1, #44	; 0x2c
   11f56:	4359      	muls	r1, r3
   11f58:	1873      	adds	r3, r6, r1
   11f5a:	9307      	str	r3, [sp, #28]
   11f5c:	33fe      	adds	r3, #254	; 0xfe
   11f5e:	9106      	str	r1, [sp, #24]
   11f60:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
   11f62:	270a      	movs	r7, #10
   11f64:	4291      	cmp	r1, r2
   11f66:	d83e      	bhi.n	11fe6 <LorawanMcastProcessPkt+0xa6>
   11f68:	855a      	strh	r2, [r3, #42]	; 0x2a
   11f6a:	2105      	movs	r1, #5
   11f6c:	4b2a      	ldr	r3, [pc, #168]	; (12018 <LorawanMcastProcessPkt+0xd8>)
   11f6e:	2000      	movs	r0, #0
   11f70:	4798      	blx	r3
   11f72:	9a07      	ldr	r2, [sp, #28]
   11f74:	0021      	movs	r1, r4
   11f76:	32fc      	adds	r2, #252	; 0xfc
   11f78:	6893      	ldr	r3, [r2, #8]
   11f7a:	9805      	ldr	r0, [sp, #20]
   11f7c:	9303      	str	r3, [sp, #12]
   11f7e:	4b27      	ldr	r3, [pc, #156]	; (1201c <LorawanMcastProcessPkt+0xdc>)
   11f80:	390d      	subs	r1, #13
   11f82:	9302      	str	r3, [sp, #8]
   11f84:	2319      	movs	r3, #25
   11f86:	9301      	str	r3, [sp, #4]
   11f88:	9b06      	ldr	r3, [sp, #24]
   11f8a:	b2c9      	uxtb	r1, r1
   11f8c:	3319      	adds	r3, #25
   11f8e:	33ff      	adds	r3, #255	; 0xff
   11f90:	199b      	adds	r3, r3, r6
   11f92:	9300      	str	r3, [sp, #0]
   11f94:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   11f96:	4f22      	ldr	r7, [pc, #136]	; (12020 <LorawanMcastProcessPkt+0xe0>)
   11f98:	2201      	movs	r2, #1
   11f9a:	3009      	adds	r0, #9
   11f9c:	47b8      	blx	r7
   11f9e:	4921      	ldr	r1, [pc, #132]	; (12024 <LorawanMcastProcessPkt+0xe4>)
   11fa0:	2708      	movs	r7, #8
   11fa2:	784a      	ldrb	r2, [r1, #1]
   11fa4:	780b      	ldrb	r3, [r1, #0]
   11fa6:	0212      	lsls	r2, r2, #8
   11fa8:	431a      	orrs	r2, r3
   11faa:	788b      	ldrb	r3, [r1, #2]
   11fac:	041b      	lsls	r3, r3, #16
   11fae:	431a      	orrs	r2, r3
   11fb0:	78cb      	ldrb	r3, [r1, #3]
   11fb2:	061b      	lsls	r3, r3, #24
   11fb4:	4313      	orrs	r3, r2
   11fb6:	d016      	beq.n	11fe6 <LorawanMcastProcessPkt+0xa6>
   11fb8:	2220      	movs	r2, #32
   11fba:	366c      	adds	r6, #108	; 0x6c
   11fbc:	7833      	ldrb	r3, [r6, #0]
   11fbe:	9905      	ldr	r1, [sp, #20]
   11fc0:	4393      	bics	r3, r2
   11fc2:	7033      	strb	r3, [r6, #0]
   11fc4:	78ab      	ldrb	r3, [r5, #2]
   11fc6:	0022      	movs	r2, r4
   11fc8:	40bb      	lsls	r3, r7
   11fca:	7868      	ldrb	r0, [r5, #1]
   11fcc:	3a0c      	subs	r2, #12
   11fce:	4303      	orrs	r3, r0
   11fd0:	78e8      	ldrb	r0, [r5, #3]
   11fd2:	b2d2      	uxtb	r2, r2
   11fd4:	0400      	lsls	r0, r0, #16
   11fd6:	4303      	orrs	r3, r0
   11fd8:	7928      	ldrb	r0, [r5, #4]
   11fda:	19c9      	adds	r1, r1, r7
   11fdc:	0600      	lsls	r0, r0, #24
   11fde:	4318      	orrs	r0, r3
   11fe0:	4c11      	ldr	r4, [pc, #68]	; (12028 <LorawanMcastProcessPkt+0xe8>)
   11fe2:	003b      	movs	r3, r7
   11fe4:	47a0      	blx	r4
   11fe6:	4a0b      	ldr	r2, [pc, #44]	; (12014 <LorawanMcastProcessPkt+0xd4>)
   11fe8:	200e      	movs	r0, #14
   11fea:	0011      	movs	r1, r2
   11fec:	315c      	adds	r1, #92	; 0x5c
   11fee:	780b      	ldrb	r3, [r1, #0]
   11ff0:	001c      	movs	r4, r3
   11ff2:	4004      	ands	r4, r0
   11ff4:	2c06      	cmp	r4, #6
   11ff6:	d107      	bne.n	12008 <LorawanMcastProcessPkt+0xc8>
   11ff8:	32d4      	adds	r2, #212	; 0xd4
   11ffa:	7812      	ldrb	r2, [r2, #0]
   11ffc:	2a04      	cmp	r2, #4
   11ffe:	d103      	bne.n	12008 <LorawanMcastProcessPkt+0xc8>
   12000:	4383      	bics	r3, r0
   12002:	3206      	adds	r2, #6
   12004:	4313      	orrs	r3, r2
   12006:	700b      	strb	r3, [r1, #0]
   12008:	2000      	movs	r0, #0
   1200a:	4b08      	ldr	r3, [pc, #32]	; (1202c <LorawanMcastProcessPkt+0xec>)
   1200c:	4798      	blx	r3
   1200e:	0038      	movs	r0, r7
   12010:	b009      	add	sp, #36	; 0x24
   12012:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12014:	200030e4 	.word	0x200030e4
   12018:	0000948d 	.word	0x0000948d
   1201c:	20002eac 	.word	0x20002eac
   12020:	00010555 	.word	0x00010555
   12024:	200033b8 	.word	0x200033b8
   12028:	00010959 	.word	0x00010959
   1202c:	00010c91 	.word	0x00010c91

00012030 <Radio_LBTScanTimeout>:
   12030:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   12032:	4c1c      	ldr	r4, [pc, #112]	; (120a4 <Radio_LBTScanTimeout+0x74>)
   12034:	0025      	movs	r5, r4
   12036:	0023      	movs	r3, r4
   12038:	354f      	adds	r5, #79	; 0x4f
   1203a:	7829      	ldrb	r1, [r5, #0]
   1203c:	3340      	adds	r3, #64	; 0x40
   1203e:	3101      	adds	r1, #1
   12040:	b2c9      	uxtb	r1, r1
   12042:	7029      	strb	r1, [r5, #0]
   12044:	781b      	ldrb	r3, [r3, #0]
   12046:	428b      	cmp	r3, r1
   12048:	d315      	bcc.n	12076 <Radio_LBTScanTimeout+0x46>
   1204a:	260e      	movs	r6, #14
   1204c:	446e      	add	r6, sp
   1204e:	4b16      	ldr	r3, [pc, #88]	; (120a8 <Radio_LBTScanTimeout+0x78>)
   12050:	0030      	movs	r0, r6
   12052:	4798      	blx	r3
   12054:	2300      	movs	r3, #0
   12056:	5ef2      	ldrsh	r2, [r6, r3]
   12058:	782b      	ldrb	r3, [r5, #0]
   1205a:	4353      	muls	r3, r2
   1205c:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1205e:	189b      	adds	r3, r3, r2
   12060:	6463      	str	r3, [r4, #68]	; 0x44
   12062:	0023      	movs	r3, r4
   12064:	2200      	movs	r2, #0
   12066:	3350      	adds	r3, #80	; 0x50
   12068:	7818      	ldrb	r0, [r3, #0]
   1206a:	9200      	str	r2, [sp, #0]
   1206c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   1206e:	4b0f      	ldr	r3, [pc, #60]	; (120ac <Radio_LBTScanTimeout+0x7c>)
   12070:	4c0f      	ldr	r4, [pc, #60]	; (120b0 <Radio_LBTScanTimeout+0x80>)
   12072:	47a0      	blx	r4
   12074:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
   12076:	2380      	movs	r3, #128	; 0x80
   12078:	4a0e      	ldr	r2, [pc, #56]	; (120b4 <Radio_LBTScanTimeout+0x84>)
   1207a:	009b      	lsls	r3, r3, #2
   1207c:	8810      	ldrh	r0, [r2, #0]
   1207e:	4303      	orrs	r3, r0
   12080:	8013      	strh	r3, [r2, #0]
   12082:	6c63      	ldr	r3, [r4, #68]	; 0x44
   12084:	0058      	lsls	r0, r3, #1
   12086:	1e4b      	subs	r3, r1, #1
   12088:	4359      	muls	r1, r3
   1208a:	4b0b      	ldr	r3, [pc, #44]	; (120b8 <Radio_LBTScanTimeout+0x88>)
   1208c:	b289      	uxth	r1, r1
   1208e:	4798      	blx	r3
   12090:	0023      	movs	r3, r4
   12092:	334c      	adds	r3, #76	; 0x4c
   12094:	8018      	strh	r0, [r3, #0]
   12096:	2300      	movs	r3, #0
   12098:	2001      	movs	r0, #1
   1209a:	702b      	strb	r3, [r5, #0]
   1209c:	6463      	str	r3, [r4, #68]	; 0x44
   1209e:	4b07      	ldr	r3, [pc, #28]	; (120bc <Radio_LBTScanTimeout+0x8c>)
   120a0:	4798      	blx	r3
   120a2:	e7e7      	b.n	12074 <Radio_LBTScanTimeout+0x44>
   120a4:	20002cf4 	.word	0x20002cf4
   120a8:	0000d595 	.word	0x0000d595
   120ac:	00012031 	.word	0x00012031
   120b0:	0000cd65 	.word	0x0000cd65
   120b4:	20002fbc 	.word	0x20002fbc
   120b8:	00012471 	.word	0x00012471
   120bc:	0000e58d 	.word	0x0000e58d

000120c0 <RADIO_ScanHandler>:
   120c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   120c2:	4b12      	ldr	r3, [pc, #72]	; (1210c <RADIO_ScanHandler+0x4c>)
   120c4:	4798      	blx	r3
   120c6:	2000      	movs	r0, #0
   120c8:	4b11      	ldr	r3, [pc, #68]	; (12110 <RADIO_ScanHandler+0x50>)
   120ca:	4798      	blx	r3
   120cc:	4d11      	ldr	r5, [pc, #68]	; (12114 <RADIO_ScanHandler+0x54>)
   120ce:	4b12      	ldr	r3, [pc, #72]	; (12118 <RADIO_ScanHandler+0x58>)
   120d0:	6828      	ldr	r0, [r5, #0]
   120d2:	2400      	movs	r4, #0
   120d4:	4798      	blx	r3
   120d6:	002b      	movs	r3, r5
   120d8:	4e10      	ldr	r6, [pc, #64]	; (1211c <RADIO_ScanHandler+0x5c>)
   120da:	334c      	adds	r3, #76	; 0x4c
   120dc:	2201      	movs	r2, #1
   120de:	0021      	movs	r1, r4
   120e0:	0020      	movs	r0, r4
   120e2:	801c      	strh	r4, [r3, #0]
   120e4:	47b0      	blx	r6
   120e6:	4b0e      	ldr	r3, [pc, #56]	; (12120 <RADIO_ScanHandler+0x60>)
   120e8:	2109      	movs	r1, #9
   120ea:	2012      	movs	r0, #18
   120ec:	4798      	blx	r3
   120ee:	3550      	adds	r5, #80	; 0x50
   120f0:	0022      	movs	r2, r4
   120f2:	0021      	movs	r1, r4
   120f4:	2005      	movs	r0, #5
   120f6:	47b0      	blx	r6
   120f8:	7828      	ldrb	r0, [r5, #0]
   120fa:	4b0a      	ldr	r3, [pc, #40]	; (12124 <RADIO_ScanHandler+0x64>)
   120fc:	4d0a      	ldr	r5, [pc, #40]	; (12128 <RADIO_ScanHandler+0x68>)
   120fe:	9400      	str	r4, [sp, #0]
   12100:	0022      	movs	r2, r4
   12102:	490a      	ldr	r1, [pc, #40]	; (1212c <RADIO_ScanHandler+0x6c>)
   12104:	47a8      	blx	r5
   12106:	0020      	movs	r0, r4
   12108:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   1210a:	46c0      	nop			; (mov r8, r8)
   1210c:	0000ecf1 	.word	0x0000ecf1
   12110:	0000e841 	.word	0x0000e841
   12114:	20002cf4 	.word	0x20002cf4
   12118:	0000df85 	.word	0x0000df85
   1211c:	0000d379 	.word	0x0000d379
   12120:	0000c6bd 	.word	0x0000c6bd
   12124:	00012031 	.word	0x00012031
   12128:	0000cd65 	.word	0x0000cd65
   1212c:	00002328 	.word	0x00002328

00012130 <radioScanDoneHandler>:
   12130:	b530      	push	{r4, r5, lr}
   12132:	4a18      	ldr	r2, [pc, #96]	; (12194 <radioScanDoneHandler+0x64>)
   12134:	4918      	ldr	r1, [pc, #96]	; (12198 <radioScanDoneHandler+0x68>)
   12136:	8813      	ldrh	r3, [r2, #0]
   12138:	b085      	sub	sp, #20
   1213a:	400b      	ands	r3, r1
   1213c:	8013      	strh	r3, [r2, #0]
   1213e:	2200      	movs	r2, #0
   12140:	4b16      	ldr	r3, [pc, #88]	; (1219c <radioScanDoneHandler+0x6c>)
   12142:	0011      	movs	r1, r2
   12144:	0010      	movs	r0, r2
   12146:	4798      	blx	r3
   12148:	2000      	movs	r0, #0
   1214a:	4b15      	ldr	r3, [pc, #84]	; (121a0 <radioScanDoneHandler+0x70>)
   1214c:	4798      	blx	r3
   1214e:	4b15      	ldr	r3, [pc, #84]	; (121a4 <radioScanDoneHandler+0x74>)
   12150:	4798      	blx	r3
   12152:	4c15      	ldr	r4, [pc, #84]	; (121a8 <radioScanDoneHandler+0x78>)
   12154:	0023      	movs	r3, r4
   12156:	334c      	adds	r3, #76	; 0x4c
   12158:	2100      	movs	r1, #0
   1215a:	5e59      	ldrsh	r1, [r3, r1]
   1215c:	233e      	movs	r3, #62	; 0x3e
   1215e:	5ee2      	ldrsh	r2, [r4, r3]
   12160:	4b12      	ldr	r3, [pc, #72]	; (121ac <radioScanDoneHandler+0x7c>)
   12162:	4291      	cmp	r1, r2
   12164:	da06      	bge.n	12174 <radioScanDoneHandler+0x44>
   12166:	2002      	movs	r0, #2
   12168:	4798      	blx	r3
   1216a:	4b11      	ldr	r3, [pc, #68]	; (121b0 <radioScanDoneHandler+0x80>)
   1216c:	4798      	blx	r3
   1216e:	2000      	movs	r0, #0
   12170:	b005      	add	sp, #20
   12172:	bd30      	pop	{r4, r5, pc}
   12174:	2207      	movs	r2, #7
   12176:	ad01      	add	r5, sp, #4
   12178:	2001      	movs	r0, #1
   1217a:	702a      	strb	r2, [r5, #0]
   1217c:	4798      	blx	r3
   1217e:	4b0d      	ldr	r3, [pc, #52]	; (121b4 <radioScanDoneHandler+0x84>)
   12180:	781b      	ldrb	r3, [r3, #0]
   12182:	079b      	lsls	r3, r3, #30
   12184:	d5f3      	bpl.n	1216e <radioScanDoneHandler+0x3e>
   12186:	6923      	ldr	r3, [r4, #16]
   12188:	2b00      	cmp	r3, #0
   1218a:	d0f0      	beq.n	1216e <radioScanDoneHandler+0x3e>
   1218c:	0029      	movs	r1, r5
   1218e:	2002      	movs	r0, #2
   12190:	4798      	blx	r3
   12192:	e7ec      	b.n	1216e <radioScanDoneHandler+0x3e>
   12194:	20002fbc 	.word	0x20002fbc
   12198:	fffffdff 	.word	0xfffffdff
   1219c:	0000d379 	.word	0x0000d379
   121a0:	0000e969 	.word	0x0000e969
   121a4:	0000ed25 	.word	0x0000ed25
   121a8:	20002cf4 	.word	0x20002cf4
   121ac:	0000e639 	.word	0x0000e639
   121b0:	0000eff1 	.word	0x0000eff1
   121b4:	20002fbe 	.word	0x20002fbe

000121b8 <common_tc_read_count>:
   121b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   121ba:	4b0d      	ldr	r3, [pc, #52]	; (121f0 <common_tc_read_count+0x38>)
   121bc:	4798      	blx	r3
   121be:	4b0d      	ldr	r3, [pc, #52]	; (121f4 <common_tc_read_count+0x3c>)
   121c0:	781b      	ldrb	r3, [r3, #0]
   121c2:	2b00      	cmp	r3, #0
   121c4:	d00e      	beq.n	121e4 <common_tc_read_count+0x2c>
   121c6:	4b0c      	ldr	r3, [pc, #48]	; (121f8 <common_tc_read_count+0x40>)
   121c8:	781d      	ldrb	r5, [r3, #0]
   121ca:	4b0a      	ldr	r3, [pc, #40]	; (121f4 <common_tc_read_count+0x3c>)
   121cc:	781f      	ldrb	r7, [r3, #0]
   121ce:	4c0b      	ldr	r4, [pc, #44]	; (121fc <common_tc_read_count+0x44>)
   121d0:	1c29      	adds	r1, r5, #0
   121d2:	47a0      	blx	r4
   121d4:	1c06      	adds	r6, r0, #0
   121d6:	480a      	ldr	r0, [pc, #40]	; (12200 <common_tc_read_count+0x48>)
   121d8:	1c29      	adds	r1, r5, #0
   121da:	47a0      	blx	r4
   121dc:	4378      	muls	r0, r7
   121de:	1830      	adds	r0, r6, r0
   121e0:	b280      	uxth	r0, r0
   121e2:	e004      	b.n	121ee <common_tc_read_count+0x36>
   121e4:	4b04      	ldr	r3, [pc, #16]	; (121f8 <common_tc_read_count+0x40>)
   121e6:	7819      	ldrb	r1, [r3, #0]
   121e8:	4b04      	ldr	r3, [pc, #16]	; (121fc <common_tc_read_count+0x44>)
   121ea:	4798      	blx	r3
   121ec:	b280      	uxth	r0, r0
   121ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   121f0:	0000d5c9 	.word	0x0000d5c9
   121f4:	20002080 	.word	0x20002080
   121f8:	200033c0 	.word	0x200033c0
   121fc:	00012471 	.word	0x00012471
   12200:	0000ffff 	.word	0x0000ffff

00012204 <common_tc_compare_stop>:
   12204:	b508      	push	{r3, lr}
   12206:	4b05      	ldr	r3, [pc, #20]	; (1221c <common_tc_compare_stop+0x18>)
   12208:	4798      	blx	r3
   1220a:	4b05      	ldr	r3, [pc, #20]	; (12220 <common_tc_compare_stop+0x1c>)
   1220c:	4798      	blx	r3
   1220e:	4b05      	ldr	r3, [pc, #20]	; (12224 <common_tc_compare_stop+0x20>)
   12210:	2200      	movs	r2, #0
   12212:	605a      	str	r2, [r3, #4]
   12214:	811a      	strh	r2, [r3, #8]
   12216:	4b04      	ldr	r3, [pc, #16]	; (12228 <common_tc_compare_stop+0x24>)
   12218:	4798      	blx	r3
   1221a:	bd08      	pop	{r3, pc}
   1221c:	0000d5dd 	.word	0x0000d5dd
   12220:	0000d695 	.word	0x0000d695
   12224:	20002080 	.word	0x20002080
   12228:	0000d6b9 	.word	0x0000d6b9

0001222c <common_tc_delay>:
   1222c:	b510      	push	{r4, lr}
   1222e:	1c04      	adds	r4, r0, #0
   12230:	4b13      	ldr	r3, [pc, #76]	; (12280 <common_tc_delay+0x54>)
   12232:	4798      	blx	r3
   12234:	4b13      	ldr	r3, [pc, #76]	; (12284 <common_tc_delay+0x58>)
   12236:	781a      	ldrb	r2, [r3, #0]
   12238:	4362      	muls	r2, r4
   1223a:	1881      	adds	r1, r0, r2
   1223c:	4b12      	ldr	r3, [pc, #72]	; (12288 <common_tc_delay+0x5c>)
   1223e:	6059      	str	r1, [r3, #4]
   12240:	6859      	ldr	r1, [r3, #4]
   12242:	0c09      	lsrs	r1, r1, #16
   12244:	6059      	str	r1, [r3, #4]
   12246:	685b      	ldr	r3, [r3, #4]
   12248:	2b00      	cmp	r3, #0
   1224a:	d007      	beq.n	1225c <common_tc_delay+0x30>
   1224c:	4b0e      	ldr	r3, [pc, #56]	; (12288 <common_tc_delay+0x5c>)
   1224e:	6859      	ldr	r1, [r3, #4]
   12250:	3201      	adds	r2, #1
   12252:	1880      	adds	r0, r0, r2
   12254:	8118      	strh	r0, [r3, #8]
   12256:	4b0d      	ldr	r3, [pc, #52]	; (1228c <common_tc_delay+0x60>)
   12258:	4798      	blx	r3
   1225a:	e004      	b.n	12266 <common_tc_delay+0x3a>
   1225c:	1882      	adds	r2, r0, r2
   1225e:	4b0a      	ldr	r3, [pc, #40]	; (12288 <common_tc_delay+0x5c>)
   12260:	811a      	strh	r2, [r3, #8]
   12262:	4b0b      	ldr	r3, [pc, #44]	; (12290 <common_tc_delay+0x64>)
   12264:	4798      	blx	r3
   12266:	4b08      	ldr	r3, [pc, #32]	; (12288 <common_tc_delay+0x5c>)
   12268:	891b      	ldrh	r3, [r3, #8]
   1226a:	2b63      	cmp	r3, #99	; 0x63
   1226c:	d802      	bhi.n	12274 <common_tc_delay+0x48>
   1226e:	3364      	adds	r3, #100	; 0x64
   12270:	4a05      	ldr	r2, [pc, #20]	; (12288 <common_tc_delay+0x5c>)
   12272:	8113      	strh	r3, [r2, #8]
   12274:	4b04      	ldr	r3, [pc, #16]	; (12288 <common_tc_delay+0x5c>)
   12276:	8918      	ldrh	r0, [r3, #8]
   12278:	4b06      	ldr	r3, [pc, #24]	; (12294 <common_tc_delay+0x68>)
   1227a:	4798      	blx	r3
   1227c:	bd10      	pop	{r4, pc}
   1227e:	46c0      	nop			; (mov r8, r8)
   12280:	0000d5c9 	.word	0x0000d5c9
   12284:	200033c0 	.word	0x200033c0
   12288:	20002080 	.word	0x20002080
   1228c:	0000d5dd 	.word	0x0000d5dd
   12290:	0000d5f1 	.word	0x0000d5f1
   12294:	0000d67d 	.word	0x0000d67d

00012298 <common_tc_init>:
   12298:	b508      	push	{r3, lr}
   1229a:	2200      	movs	r2, #0
   1229c:	4b03      	ldr	r3, [pc, #12]	; (122ac <common_tc_init+0x14>)
   1229e:	701a      	strb	r2, [r3, #0]
   122a0:	4b03      	ldr	r3, [pc, #12]	; (122b0 <common_tc_init+0x18>)
   122a2:	4798      	blx	r3
   122a4:	4b03      	ldr	r3, [pc, #12]	; (122b4 <common_tc_init+0x1c>)
   122a6:	7018      	strb	r0, [r3, #0]
   122a8:	bd08      	pop	{r3, pc}
   122aa:	46c0      	nop			; (mov r8, r8)
   122ac:	20002080 	.word	0x20002080
   122b0:	0000d6d1 	.word	0x0000d6d1
   122b4:	200033c0 	.word	0x200033c0

000122b8 <tmr_ovf_callback>:
   122b8:	b508      	push	{r3, lr}
   122ba:	4b0e      	ldr	r3, [pc, #56]	; (122f4 <tmr_ovf_callback+0x3c>)
   122bc:	685b      	ldr	r3, [r3, #4]
   122be:	2b00      	cmp	r3, #0
   122c0:	d007      	beq.n	122d2 <tmr_ovf_callback+0x1a>
   122c2:	4a0c      	ldr	r2, [pc, #48]	; (122f4 <tmr_ovf_callback+0x3c>)
   122c4:	6853      	ldr	r3, [r2, #4]
   122c6:	3b01      	subs	r3, #1
   122c8:	6053      	str	r3, [r2, #4]
   122ca:	2b00      	cmp	r3, #0
   122cc:	d101      	bne.n	122d2 <tmr_ovf_callback+0x1a>
   122ce:	4b0a      	ldr	r3, [pc, #40]	; (122f8 <tmr_ovf_callback+0x40>)
   122d0:	4798      	blx	r3
   122d2:	4a08      	ldr	r2, [pc, #32]	; (122f4 <tmr_ovf_callback+0x3c>)
   122d4:	7813      	ldrb	r3, [r2, #0]
   122d6:	3301      	adds	r3, #1
   122d8:	b2db      	uxtb	r3, r3
   122da:	7013      	strb	r3, [r2, #0]
   122dc:	4a07      	ldr	r2, [pc, #28]	; (122fc <tmr_ovf_callback+0x44>)
   122de:	7812      	ldrb	r2, [r2, #0]
   122e0:	429a      	cmp	r2, r3
   122e2:	d806      	bhi.n	122f2 <tmr_ovf_callback+0x3a>
   122e4:	4b03      	ldr	r3, [pc, #12]	; (122f4 <tmr_ovf_callback+0x3c>)
   122e6:	2200      	movs	r2, #0
   122e8:	701a      	strb	r2, [r3, #0]
   122ea:	68db      	ldr	r3, [r3, #12]
   122ec:	2b00      	cmp	r3, #0
   122ee:	d000      	beq.n	122f2 <tmr_ovf_callback+0x3a>
   122f0:	4798      	blx	r3
   122f2:	bd08      	pop	{r3, pc}
   122f4:	20002080 	.word	0x20002080
   122f8:	0000d5f1 	.word	0x0000d5f1
   122fc:	200033c0 	.word	0x200033c0

00012300 <tmr_cca_callback>:
   12300:	b508      	push	{r3, lr}
   12302:	4b04      	ldr	r3, [pc, #16]	; (12314 <tmr_cca_callback+0x14>)
   12304:	4798      	blx	r3
   12306:	4b04      	ldr	r3, [pc, #16]	; (12318 <tmr_cca_callback+0x18>)
   12308:	691b      	ldr	r3, [r3, #16]
   1230a:	2b00      	cmp	r3, #0
   1230c:	d000      	beq.n	12310 <tmr_cca_callback+0x10>
   1230e:	4798      	blx	r3
   12310:	bd08      	pop	{r3, pc}
   12312:	46c0      	nop			; (mov r8, r8)
   12314:	0000d5dd 	.word	0x0000d5dd
   12318:	20002080 	.word	0x20002080

0001231c <set_common_tc_overflow_callback>:
   1231c:	4b01      	ldr	r3, [pc, #4]	; (12324 <set_common_tc_overflow_callback+0x8>)
   1231e:	60d8      	str	r0, [r3, #12]
   12320:	4770      	bx	lr
   12322:	46c0      	nop			; (mov r8, r8)
   12324:	20002080 	.word	0x20002080

00012328 <set_common_tc_expiry_callback>:
   12328:	4b01      	ldr	r3, [pc, #4]	; (12330 <set_common_tc_expiry_callback+0x8>)
   1232a:	6118      	str	r0, [r3, #16]
   1232c:	4770      	bx	lr
   1232e:	46c0      	nop			; (mov r8, r8)
   12330:	20002080 	.word	0x20002080

00012334 <__gnu_thumb1_case_sqi>:
   12334:	b402      	push	{r1}
   12336:	4671      	mov	r1, lr
   12338:	0849      	lsrs	r1, r1, #1
   1233a:	0049      	lsls	r1, r1, #1
   1233c:	5609      	ldrsb	r1, [r1, r0]
   1233e:	0049      	lsls	r1, r1, #1
   12340:	448e      	add	lr, r1
   12342:	bc02      	pop	{r1}
   12344:	4770      	bx	lr
   12346:	46c0      	nop			; (mov r8, r8)

00012348 <__gnu_thumb1_case_uqi>:
   12348:	b402      	push	{r1}
   1234a:	4671      	mov	r1, lr
   1234c:	0849      	lsrs	r1, r1, #1
   1234e:	0049      	lsls	r1, r1, #1
   12350:	5c09      	ldrb	r1, [r1, r0]
   12352:	0049      	lsls	r1, r1, #1
   12354:	448e      	add	lr, r1
   12356:	bc02      	pop	{r1}
   12358:	4770      	bx	lr
   1235a:	46c0      	nop			; (mov r8, r8)

0001235c <__udivsi3>:
   1235c:	2200      	movs	r2, #0
   1235e:	0843      	lsrs	r3, r0, #1
   12360:	428b      	cmp	r3, r1
   12362:	d374      	bcc.n	1244e <__udivsi3+0xf2>
   12364:	0903      	lsrs	r3, r0, #4
   12366:	428b      	cmp	r3, r1
   12368:	d35f      	bcc.n	1242a <__udivsi3+0xce>
   1236a:	0a03      	lsrs	r3, r0, #8
   1236c:	428b      	cmp	r3, r1
   1236e:	d344      	bcc.n	123fa <__udivsi3+0x9e>
   12370:	0b03      	lsrs	r3, r0, #12
   12372:	428b      	cmp	r3, r1
   12374:	d328      	bcc.n	123c8 <__udivsi3+0x6c>
   12376:	0c03      	lsrs	r3, r0, #16
   12378:	428b      	cmp	r3, r1
   1237a:	d30d      	bcc.n	12398 <__udivsi3+0x3c>
   1237c:	22ff      	movs	r2, #255	; 0xff
   1237e:	0209      	lsls	r1, r1, #8
   12380:	ba12      	rev	r2, r2
   12382:	0c03      	lsrs	r3, r0, #16
   12384:	428b      	cmp	r3, r1
   12386:	d302      	bcc.n	1238e <__udivsi3+0x32>
   12388:	1212      	asrs	r2, r2, #8
   1238a:	0209      	lsls	r1, r1, #8
   1238c:	d065      	beq.n	1245a <__udivsi3+0xfe>
   1238e:	0b03      	lsrs	r3, r0, #12
   12390:	428b      	cmp	r3, r1
   12392:	d319      	bcc.n	123c8 <__udivsi3+0x6c>
   12394:	e000      	b.n	12398 <__udivsi3+0x3c>
   12396:	0a09      	lsrs	r1, r1, #8
   12398:	0bc3      	lsrs	r3, r0, #15
   1239a:	428b      	cmp	r3, r1
   1239c:	d301      	bcc.n	123a2 <__udivsi3+0x46>
   1239e:	03cb      	lsls	r3, r1, #15
   123a0:	1ac0      	subs	r0, r0, r3
   123a2:	4152      	adcs	r2, r2
   123a4:	0b83      	lsrs	r3, r0, #14
   123a6:	428b      	cmp	r3, r1
   123a8:	d301      	bcc.n	123ae <__udivsi3+0x52>
   123aa:	038b      	lsls	r3, r1, #14
   123ac:	1ac0      	subs	r0, r0, r3
   123ae:	4152      	adcs	r2, r2
   123b0:	0b43      	lsrs	r3, r0, #13
   123b2:	428b      	cmp	r3, r1
   123b4:	d301      	bcc.n	123ba <__udivsi3+0x5e>
   123b6:	034b      	lsls	r3, r1, #13
   123b8:	1ac0      	subs	r0, r0, r3
   123ba:	4152      	adcs	r2, r2
   123bc:	0b03      	lsrs	r3, r0, #12
   123be:	428b      	cmp	r3, r1
   123c0:	d301      	bcc.n	123c6 <__udivsi3+0x6a>
   123c2:	030b      	lsls	r3, r1, #12
   123c4:	1ac0      	subs	r0, r0, r3
   123c6:	4152      	adcs	r2, r2
   123c8:	0ac3      	lsrs	r3, r0, #11
   123ca:	428b      	cmp	r3, r1
   123cc:	d301      	bcc.n	123d2 <__udivsi3+0x76>
   123ce:	02cb      	lsls	r3, r1, #11
   123d0:	1ac0      	subs	r0, r0, r3
   123d2:	4152      	adcs	r2, r2
   123d4:	0a83      	lsrs	r3, r0, #10
   123d6:	428b      	cmp	r3, r1
   123d8:	d301      	bcc.n	123de <__udivsi3+0x82>
   123da:	028b      	lsls	r3, r1, #10
   123dc:	1ac0      	subs	r0, r0, r3
   123de:	4152      	adcs	r2, r2
   123e0:	0a43      	lsrs	r3, r0, #9
   123e2:	428b      	cmp	r3, r1
   123e4:	d301      	bcc.n	123ea <__udivsi3+0x8e>
   123e6:	024b      	lsls	r3, r1, #9
   123e8:	1ac0      	subs	r0, r0, r3
   123ea:	4152      	adcs	r2, r2
   123ec:	0a03      	lsrs	r3, r0, #8
   123ee:	428b      	cmp	r3, r1
   123f0:	d301      	bcc.n	123f6 <__udivsi3+0x9a>
   123f2:	020b      	lsls	r3, r1, #8
   123f4:	1ac0      	subs	r0, r0, r3
   123f6:	4152      	adcs	r2, r2
   123f8:	d2cd      	bcs.n	12396 <__udivsi3+0x3a>
   123fa:	09c3      	lsrs	r3, r0, #7
   123fc:	428b      	cmp	r3, r1
   123fe:	d301      	bcc.n	12404 <__udivsi3+0xa8>
   12400:	01cb      	lsls	r3, r1, #7
   12402:	1ac0      	subs	r0, r0, r3
   12404:	4152      	adcs	r2, r2
   12406:	0983      	lsrs	r3, r0, #6
   12408:	428b      	cmp	r3, r1
   1240a:	d301      	bcc.n	12410 <__udivsi3+0xb4>
   1240c:	018b      	lsls	r3, r1, #6
   1240e:	1ac0      	subs	r0, r0, r3
   12410:	4152      	adcs	r2, r2
   12412:	0943      	lsrs	r3, r0, #5
   12414:	428b      	cmp	r3, r1
   12416:	d301      	bcc.n	1241c <__udivsi3+0xc0>
   12418:	014b      	lsls	r3, r1, #5
   1241a:	1ac0      	subs	r0, r0, r3
   1241c:	4152      	adcs	r2, r2
   1241e:	0903      	lsrs	r3, r0, #4
   12420:	428b      	cmp	r3, r1
   12422:	d301      	bcc.n	12428 <__udivsi3+0xcc>
   12424:	010b      	lsls	r3, r1, #4
   12426:	1ac0      	subs	r0, r0, r3
   12428:	4152      	adcs	r2, r2
   1242a:	08c3      	lsrs	r3, r0, #3
   1242c:	428b      	cmp	r3, r1
   1242e:	d301      	bcc.n	12434 <__udivsi3+0xd8>
   12430:	00cb      	lsls	r3, r1, #3
   12432:	1ac0      	subs	r0, r0, r3
   12434:	4152      	adcs	r2, r2
   12436:	0883      	lsrs	r3, r0, #2
   12438:	428b      	cmp	r3, r1
   1243a:	d301      	bcc.n	12440 <__udivsi3+0xe4>
   1243c:	008b      	lsls	r3, r1, #2
   1243e:	1ac0      	subs	r0, r0, r3
   12440:	4152      	adcs	r2, r2
   12442:	0843      	lsrs	r3, r0, #1
   12444:	428b      	cmp	r3, r1
   12446:	d301      	bcc.n	1244c <__udivsi3+0xf0>
   12448:	004b      	lsls	r3, r1, #1
   1244a:	1ac0      	subs	r0, r0, r3
   1244c:	4152      	adcs	r2, r2
   1244e:	1a41      	subs	r1, r0, r1
   12450:	d200      	bcs.n	12454 <__udivsi3+0xf8>
   12452:	4601      	mov	r1, r0
   12454:	4152      	adcs	r2, r2
   12456:	4610      	mov	r0, r2
   12458:	4770      	bx	lr
   1245a:	e7ff      	b.n	1245c <__udivsi3+0x100>
   1245c:	b501      	push	{r0, lr}
   1245e:	2000      	movs	r0, #0
   12460:	f000 f8f0 	bl	12644 <__aeabi_idiv0>
   12464:	bd02      	pop	{r1, pc}
   12466:	46c0      	nop			; (mov r8, r8)

00012468 <__aeabi_uidivmod>:
   12468:	2900      	cmp	r1, #0
   1246a:	d0f7      	beq.n	1245c <__udivsi3+0x100>
   1246c:	e776      	b.n	1235c <__udivsi3>
   1246e:	4770      	bx	lr

00012470 <__divsi3>:
   12470:	4603      	mov	r3, r0
   12472:	430b      	orrs	r3, r1
   12474:	d47f      	bmi.n	12576 <__divsi3+0x106>
   12476:	2200      	movs	r2, #0
   12478:	0843      	lsrs	r3, r0, #1
   1247a:	428b      	cmp	r3, r1
   1247c:	d374      	bcc.n	12568 <__divsi3+0xf8>
   1247e:	0903      	lsrs	r3, r0, #4
   12480:	428b      	cmp	r3, r1
   12482:	d35f      	bcc.n	12544 <__divsi3+0xd4>
   12484:	0a03      	lsrs	r3, r0, #8
   12486:	428b      	cmp	r3, r1
   12488:	d344      	bcc.n	12514 <__divsi3+0xa4>
   1248a:	0b03      	lsrs	r3, r0, #12
   1248c:	428b      	cmp	r3, r1
   1248e:	d328      	bcc.n	124e2 <__divsi3+0x72>
   12490:	0c03      	lsrs	r3, r0, #16
   12492:	428b      	cmp	r3, r1
   12494:	d30d      	bcc.n	124b2 <__divsi3+0x42>
   12496:	22ff      	movs	r2, #255	; 0xff
   12498:	0209      	lsls	r1, r1, #8
   1249a:	ba12      	rev	r2, r2
   1249c:	0c03      	lsrs	r3, r0, #16
   1249e:	428b      	cmp	r3, r1
   124a0:	d302      	bcc.n	124a8 <__divsi3+0x38>
   124a2:	1212      	asrs	r2, r2, #8
   124a4:	0209      	lsls	r1, r1, #8
   124a6:	d065      	beq.n	12574 <__divsi3+0x104>
   124a8:	0b03      	lsrs	r3, r0, #12
   124aa:	428b      	cmp	r3, r1
   124ac:	d319      	bcc.n	124e2 <__divsi3+0x72>
   124ae:	e000      	b.n	124b2 <__divsi3+0x42>
   124b0:	0a09      	lsrs	r1, r1, #8
   124b2:	0bc3      	lsrs	r3, r0, #15
   124b4:	428b      	cmp	r3, r1
   124b6:	d301      	bcc.n	124bc <__divsi3+0x4c>
   124b8:	03cb      	lsls	r3, r1, #15
   124ba:	1ac0      	subs	r0, r0, r3
   124bc:	4152      	adcs	r2, r2
   124be:	0b83      	lsrs	r3, r0, #14
   124c0:	428b      	cmp	r3, r1
   124c2:	d301      	bcc.n	124c8 <__divsi3+0x58>
   124c4:	038b      	lsls	r3, r1, #14
   124c6:	1ac0      	subs	r0, r0, r3
   124c8:	4152      	adcs	r2, r2
   124ca:	0b43      	lsrs	r3, r0, #13
   124cc:	428b      	cmp	r3, r1
   124ce:	d301      	bcc.n	124d4 <__divsi3+0x64>
   124d0:	034b      	lsls	r3, r1, #13
   124d2:	1ac0      	subs	r0, r0, r3
   124d4:	4152      	adcs	r2, r2
   124d6:	0b03      	lsrs	r3, r0, #12
   124d8:	428b      	cmp	r3, r1
   124da:	d301      	bcc.n	124e0 <__divsi3+0x70>
   124dc:	030b      	lsls	r3, r1, #12
   124de:	1ac0      	subs	r0, r0, r3
   124e0:	4152      	adcs	r2, r2
   124e2:	0ac3      	lsrs	r3, r0, #11
   124e4:	428b      	cmp	r3, r1
   124e6:	d301      	bcc.n	124ec <__divsi3+0x7c>
   124e8:	02cb      	lsls	r3, r1, #11
   124ea:	1ac0      	subs	r0, r0, r3
   124ec:	4152      	adcs	r2, r2
   124ee:	0a83      	lsrs	r3, r0, #10
   124f0:	428b      	cmp	r3, r1
   124f2:	d301      	bcc.n	124f8 <__divsi3+0x88>
   124f4:	028b      	lsls	r3, r1, #10
   124f6:	1ac0      	subs	r0, r0, r3
   124f8:	4152      	adcs	r2, r2
   124fa:	0a43      	lsrs	r3, r0, #9
   124fc:	428b      	cmp	r3, r1
   124fe:	d301      	bcc.n	12504 <__divsi3+0x94>
   12500:	024b      	lsls	r3, r1, #9
   12502:	1ac0      	subs	r0, r0, r3
   12504:	4152      	adcs	r2, r2
   12506:	0a03      	lsrs	r3, r0, #8
   12508:	428b      	cmp	r3, r1
   1250a:	d301      	bcc.n	12510 <__divsi3+0xa0>
   1250c:	020b      	lsls	r3, r1, #8
   1250e:	1ac0      	subs	r0, r0, r3
   12510:	4152      	adcs	r2, r2
   12512:	d2cd      	bcs.n	124b0 <__divsi3+0x40>
   12514:	09c3      	lsrs	r3, r0, #7
   12516:	428b      	cmp	r3, r1
   12518:	d301      	bcc.n	1251e <__divsi3+0xae>
   1251a:	01cb      	lsls	r3, r1, #7
   1251c:	1ac0      	subs	r0, r0, r3
   1251e:	4152      	adcs	r2, r2
   12520:	0983      	lsrs	r3, r0, #6
   12522:	428b      	cmp	r3, r1
   12524:	d301      	bcc.n	1252a <__divsi3+0xba>
   12526:	018b      	lsls	r3, r1, #6
   12528:	1ac0      	subs	r0, r0, r3
   1252a:	4152      	adcs	r2, r2
   1252c:	0943      	lsrs	r3, r0, #5
   1252e:	428b      	cmp	r3, r1
   12530:	d301      	bcc.n	12536 <__divsi3+0xc6>
   12532:	014b      	lsls	r3, r1, #5
   12534:	1ac0      	subs	r0, r0, r3
   12536:	4152      	adcs	r2, r2
   12538:	0903      	lsrs	r3, r0, #4
   1253a:	428b      	cmp	r3, r1
   1253c:	d301      	bcc.n	12542 <__divsi3+0xd2>
   1253e:	010b      	lsls	r3, r1, #4
   12540:	1ac0      	subs	r0, r0, r3
   12542:	4152      	adcs	r2, r2
   12544:	08c3      	lsrs	r3, r0, #3
   12546:	428b      	cmp	r3, r1
   12548:	d301      	bcc.n	1254e <__divsi3+0xde>
   1254a:	00cb      	lsls	r3, r1, #3
   1254c:	1ac0      	subs	r0, r0, r3
   1254e:	4152      	adcs	r2, r2
   12550:	0883      	lsrs	r3, r0, #2
   12552:	428b      	cmp	r3, r1
   12554:	d301      	bcc.n	1255a <__divsi3+0xea>
   12556:	008b      	lsls	r3, r1, #2
   12558:	1ac0      	subs	r0, r0, r3
   1255a:	4152      	adcs	r2, r2
   1255c:	0843      	lsrs	r3, r0, #1
   1255e:	428b      	cmp	r3, r1
   12560:	d301      	bcc.n	12566 <__divsi3+0xf6>
   12562:	004b      	lsls	r3, r1, #1
   12564:	1ac0      	subs	r0, r0, r3
   12566:	4152      	adcs	r2, r2
   12568:	1a41      	subs	r1, r0, r1
   1256a:	d200      	bcs.n	1256e <__divsi3+0xfe>
   1256c:	4601      	mov	r1, r0
   1256e:	4152      	adcs	r2, r2
   12570:	4610      	mov	r0, r2
   12572:	4770      	bx	lr
   12574:	e05d      	b.n	12632 <__divsi3+0x1c2>
   12576:	0fca      	lsrs	r2, r1, #31
   12578:	d000      	beq.n	1257c <__divsi3+0x10c>
   1257a:	4249      	negs	r1, r1
   1257c:	1003      	asrs	r3, r0, #32
   1257e:	d300      	bcc.n	12582 <__divsi3+0x112>
   12580:	4240      	negs	r0, r0
   12582:	4053      	eors	r3, r2
   12584:	2200      	movs	r2, #0
   12586:	469c      	mov	ip, r3
   12588:	0903      	lsrs	r3, r0, #4
   1258a:	428b      	cmp	r3, r1
   1258c:	d32d      	bcc.n	125ea <__divsi3+0x17a>
   1258e:	0a03      	lsrs	r3, r0, #8
   12590:	428b      	cmp	r3, r1
   12592:	d312      	bcc.n	125ba <__divsi3+0x14a>
   12594:	22fc      	movs	r2, #252	; 0xfc
   12596:	0189      	lsls	r1, r1, #6
   12598:	ba12      	rev	r2, r2
   1259a:	0a03      	lsrs	r3, r0, #8
   1259c:	428b      	cmp	r3, r1
   1259e:	d30c      	bcc.n	125ba <__divsi3+0x14a>
   125a0:	0189      	lsls	r1, r1, #6
   125a2:	1192      	asrs	r2, r2, #6
   125a4:	428b      	cmp	r3, r1
   125a6:	d308      	bcc.n	125ba <__divsi3+0x14a>
   125a8:	0189      	lsls	r1, r1, #6
   125aa:	1192      	asrs	r2, r2, #6
   125ac:	428b      	cmp	r3, r1
   125ae:	d304      	bcc.n	125ba <__divsi3+0x14a>
   125b0:	0189      	lsls	r1, r1, #6
   125b2:	d03a      	beq.n	1262a <__divsi3+0x1ba>
   125b4:	1192      	asrs	r2, r2, #6
   125b6:	e000      	b.n	125ba <__divsi3+0x14a>
   125b8:	0989      	lsrs	r1, r1, #6
   125ba:	09c3      	lsrs	r3, r0, #7
   125bc:	428b      	cmp	r3, r1
   125be:	d301      	bcc.n	125c4 <__divsi3+0x154>
   125c0:	01cb      	lsls	r3, r1, #7
   125c2:	1ac0      	subs	r0, r0, r3
   125c4:	4152      	adcs	r2, r2
   125c6:	0983      	lsrs	r3, r0, #6
   125c8:	428b      	cmp	r3, r1
   125ca:	d301      	bcc.n	125d0 <__divsi3+0x160>
   125cc:	018b      	lsls	r3, r1, #6
   125ce:	1ac0      	subs	r0, r0, r3
   125d0:	4152      	adcs	r2, r2
   125d2:	0943      	lsrs	r3, r0, #5
   125d4:	428b      	cmp	r3, r1
   125d6:	d301      	bcc.n	125dc <__divsi3+0x16c>
   125d8:	014b      	lsls	r3, r1, #5
   125da:	1ac0      	subs	r0, r0, r3
   125dc:	4152      	adcs	r2, r2
   125de:	0903      	lsrs	r3, r0, #4
   125e0:	428b      	cmp	r3, r1
   125e2:	d301      	bcc.n	125e8 <__divsi3+0x178>
   125e4:	010b      	lsls	r3, r1, #4
   125e6:	1ac0      	subs	r0, r0, r3
   125e8:	4152      	adcs	r2, r2
   125ea:	08c3      	lsrs	r3, r0, #3
   125ec:	428b      	cmp	r3, r1
   125ee:	d301      	bcc.n	125f4 <__divsi3+0x184>
   125f0:	00cb      	lsls	r3, r1, #3
   125f2:	1ac0      	subs	r0, r0, r3
   125f4:	4152      	adcs	r2, r2
   125f6:	0883      	lsrs	r3, r0, #2
   125f8:	428b      	cmp	r3, r1
   125fa:	d301      	bcc.n	12600 <__divsi3+0x190>
   125fc:	008b      	lsls	r3, r1, #2
   125fe:	1ac0      	subs	r0, r0, r3
   12600:	4152      	adcs	r2, r2
   12602:	d2d9      	bcs.n	125b8 <__divsi3+0x148>
   12604:	0843      	lsrs	r3, r0, #1
   12606:	428b      	cmp	r3, r1
   12608:	d301      	bcc.n	1260e <__divsi3+0x19e>
   1260a:	004b      	lsls	r3, r1, #1
   1260c:	1ac0      	subs	r0, r0, r3
   1260e:	4152      	adcs	r2, r2
   12610:	1a41      	subs	r1, r0, r1
   12612:	d200      	bcs.n	12616 <__divsi3+0x1a6>
   12614:	4601      	mov	r1, r0
   12616:	4663      	mov	r3, ip
   12618:	4152      	adcs	r2, r2
   1261a:	105b      	asrs	r3, r3, #1
   1261c:	4610      	mov	r0, r2
   1261e:	d301      	bcc.n	12624 <__divsi3+0x1b4>
   12620:	4240      	negs	r0, r0
   12622:	2b00      	cmp	r3, #0
   12624:	d500      	bpl.n	12628 <__divsi3+0x1b8>
   12626:	4249      	negs	r1, r1
   12628:	4770      	bx	lr
   1262a:	4663      	mov	r3, ip
   1262c:	105b      	asrs	r3, r3, #1
   1262e:	d300      	bcc.n	12632 <__divsi3+0x1c2>
   12630:	4240      	negs	r0, r0
   12632:	b501      	push	{r0, lr}
   12634:	2000      	movs	r0, #0
   12636:	f000 f805 	bl	12644 <__aeabi_idiv0>
   1263a:	bd02      	pop	{r1, pc}

0001263c <__aeabi_idivmod>:
   1263c:	2900      	cmp	r1, #0
   1263e:	d0f8      	beq.n	12632 <__divsi3+0x1c2>
   12640:	e716      	b.n	12470 <__divsi3>
   12642:	4770      	bx	lr

00012644 <__aeabi_idiv0>:
   12644:	4770      	bx	lr
   12646:	46c0      	nop			; (mov r8, r8)

00012648 <__aeabi_cfrcmple>:
   12648:	4684      	mov	ip, r0
   1264a:	1c08      	adds	r0, r1, #0
   1264c:	4661      	mov	r1, ip
   1264e:	e7ff      	b.n	12650 <__aeabi_cfcmpeq>

00012650 <__aeabi_cfcmpeq>:
   12650:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   12652:	f000 fcd3 	bl	12ffc <__lesf2>
   12656:	2800      	cmp	r0, #0
   12658:	d401      	bmi.n	1265e <__aeabi_cfcmpeq+0xe>
   1265a:	2100      	movs	r1, #0
   1265c:	42c8      	cmn	r0, r1
   1265e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00012660 <__aeabi_fcmpeq>:
   12660:	b510      	push	{r4, lr}
   12662:	f000 fc65 	bl	12f30 <__eqsf2>
   12666:	4240      	negs	r0, r0
   12668:	3001      	adds	r0, #1
   1266a:	bd10      	pop	{r4, pc}

0001266c <__aeabi_fcmplt>:
   1266c:	b510      	push	{r4, lr}
   1266e:	f000 fcc5 	bl	12ffc <__lesf2>
   12672:	2800      	cmp	r0, #0
   12674:	db01      	blt.n	1267a <__aeabi_fcmplt+0xe>
   12676:	2000      	movs	r0, #0
   12678:	bd10      	pop	{r4, pc}
   1267a:	2001      	movs	r0, #1
   1267c:	bd10      	pop	{r4, pc}
   1267e:	46c0      	nop			; (mov r8, r8)

00012680 <__aeabi_fcmple>:
   12680:	b510      	push	{r4, lr}
   12682:	f000 fcbb 	bl	12ffc <__lesf2>
   12686:	2800      	cmp	r0, #0
   12688:	dd01      	ble.n	1268e <__aeabi_fcmple+0xe>
   1268a:	2000      	movs	r0, #0
   1268c:	bd10      	pop	{r4, pc}
   1268e:	2001      	movs	r0, #1
   12690:	bd10      	pop	{r4, pc}
   12692:	46c0      	nop			; (mov r8, r8)

00012694 <__aeabi_fcmpgt>:
   12694:	b510      	push	{r4, lr}
   12696:	f000 fc71 	bl	12f7c <__gesf2>
   1269a:	2800      	cmp	r0, #0
   1269c:	dc01      	bgt.n	126a2 <__aeabi_fcmpgt+0xe>
   1269e:	2000      	movs	r0, #0
   126a0:	bd10      	pop	{r4, pc}
   126a2:	2001      	movs	r0, #1
   126a4:	bd10      	pop	{r4, pc}
   126a6:	46c0      	nop			; (mov r8, r8)

000126a8 <__aeabi_fcmpge>:
   126a8:	b510      	push	{r4, lr}
   126aa:	f000 fc67 	bl	12f7c <__gesf2>
   126ae:	2800      	cmp	r0, #0
   126b0:	da01      	bge.n	126b6 <__aeabi_fcmpge+0xe>
   126b2:	2000      	movs	r0, #0
   126b4:	bd10      	pop	{r4, pc}
   126b6:	2001      	movs	r0, #1
   126b8:	bd10      	pop	{r4, pc}
   126ba:	46c0      	nop			; (mov r8, r8)

000126bc <__aeabi_uldivmod>:
   126bc:	2b00      	cmp	r3, #0
   126be:	d111      	bne.n	126e4 <__aeabi_uldivmod+0x28>
   126c0:	2a00      	cmp	r2, #0
   126c2:	d10f      	bne.n	126e4 <__aeabi_uldivmod+0x28>
   126c4:	2900      	cmp	r1, #0
   126c6:	d100      	bne.n	126ca <__aeabi_uldivmod+0xe>
   126c8:	2800      	cmp	r0, #0
   126ca:	d002      	beq.n	126d2 <__aeabi_uldivmod+0x16>
   126cc:	2100      	movs	r1, #0
   126ce:	43c9      	mvns	r1, r1
   126d0:	1c08      	adds	r0, r1, #0
   126d2:	b407      	push	{r0, r1, r2}
   126d4:	4802      	ldr	r0, [pc, #8]	; (126e0 <__aeabi_uldivmod+0x24>)
   126d6:	a102      	add	r1, pc, #8	; (adr r1, 126e0 <__aeabi_uldivmod+0x24>)
   126d8:	1840      	adds	r0, r0, r1
   126da:	9002      	str	r0, [sp, #8]
   126dc:	bd03      	pop	{r0, r1, pc}
   126de:	46c0      	nop			; (mov r8, r8)
   126e0:	ffffff65 	.word	0xffffff65
   126e4:	b403      	push	{r0, r1}
   126e6:	4668      	mov	r0, sp
   126e8:	b501      	push	{r0, lr}
   126ea:	9802      	ldr	r0, [sp, #8]
   126ec:	f000 f886 	bl	127fc <__udivmoddi4>
   126f0:	9b01      	ldr	r3, [sp, #4]
   126f2:	469e      	mov	lr, r3
   126f4:	b002      	add	sp, #8
   126f6:	bc0c      	pop	{r2, r3}
   126f8:	4770      	bx	lr
   126fa:	46c0      	nop			; (mov r8, r8)

000126fc <__aeabi_lmul>:
   126fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   126fe:	46ce      	mov	lr, r9
   12700:	4647      	mov	r7, r8
   12702:	0415      	lsls	r5, r2, #16
   12704:	0c2d      	lsrs	r5, r5, #16
   12706:	002e      	movs	r6, r5
   12708:	b580      	push	{r7, lr}
   1270a:	0407      	lsls	r7, r0, #16
   1270c:	0c14      	lsrs	r4, r2, #16
   1270e:	0c3f      	lsrs	r7, r7, #16
   12710:	4699      	mov	r9, r3
   12712:	0c03      	lsrs	r3, r0, #16
   12714:	437e      	muls	r6, r7
   12716:	435d      	muls	r5, r3
   12718:	4367      	muls	r7, r4
   1271a:	4363      	muls	r3, r4
   1271c:	197f      	adds	r7, r7, r5
   1271e:	0c34      	lsrs	r4, r6, #16
   12720:	19e4      	adds	r4, r4, r7
   12722:	469c      	mov	ip, r3
   12724:	42a5      	cmp	r5, r4
   12726:	d903      	bls.n	12730 <__aeabi_lmul+0x34>
   12728:	2380      	movs	r3, #128	; 0x80
   1272a:	025b      	lsls	r3, r3, #9
   1272c:	4698      	mov	r8, r3
   1272e:	44c4      	add	ip, r8
   12730:	464b      	mov	r3, r9
   12732:	4351      	muls	r1, r2
   12734:	4343      	muls	r3, r0
   12736:	0436      	lsls	r6, r6, #16
   12738:	0c36      	lsrs	r6, r6, #16
   1273a:	0c25      	lsrs	r5, r4, #16
   1273c:	0424      	lsls	r4, r4, #16
   1273e:	4465      	add	r5, ip
   12740:	19a4      	adds	r4, r4, r6
   12742:	1859      	adds	r1, r3, r1
   12744:	1949      	adds	r1, r1, r5
   12746:	0020      	movs	r0, r4
   12748:	bc0c      	pop	{r2, r3}
   1274a:	4690      	mov	r8, r2
   1274c:	4699      	mov	r9, r3
   1274e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012750 <__aeabi_f2uiz>:
   12750:	219e      	movs	r1, #158	; 0x9e
   12752:	b510      	push	{r4, lr}
   12754:	05c9      	lsls	r1, r1, #23
   12756:	1c04      	adds	r4, r0, #0
   12758:	f7ff ffa6 	bl	126a8 <__aeabi_fcmpge>
   1275c:	2800      	cmp	r0, #0
   1275e:	d103      	bne.n	12768 <__aeabi_f2uiz+0x18>
   12760:	1c20      	adds	r0, r4, #0
   12762:	f000 ff49 	bl	135f8 <__aeabi_f2iz>
   12766:	bd10      	pop	{r4, pc}
   12768:	219e      	movs	r1, #158	; 0x9e
   1276a:	1c20      	adds	r0, r4, #0
   1276c:	05c9      	lsls	r1, r1, #23
   1276e:	f000 fda7 	bl	132c0 <__aeabi_fsub>
   12772:	f000 ff41 	bl	135f8 <__aeabi_f2iz>
   12776:	2380      	movs	r3, #128	; 0x80
   12778:	061b      	lsls	r3, r3, #24
   1277a:	469c      	mov	ip, r3
   1277c:	4460      	add	r0, ip
   1277e:	e7f2      	b.n	12766 <__aeabi_f2uiz+0x16>

00012780 <__aeabi_d2uiz>:
   12780:	b570      	push	{r4, r5, r6, lr}
   12782:	2200      	movs	r2, #0
   12784:	4b0c      	ldr	r3, [pc, #48]	; (127b8 <__aeabi_d2uiz+0x38>)
   12786:	0004      	movs	r4, r0
   12788:	000d      	movs	r5, r1
   1278a:	f002 fd83 	bl	15294 <__aeabi_dcmpge>
   1278e:	2800      	cmp	r0, #0
   12790:	d104      	bne.n	1279c <__aeabi_d2uiz+0x1c>
   12792:	0020      	movs	r0, r4
   12794:	0029      	movs	r1, r5
   12796:	f002 fbbf 	bl	14f18 <__aeabi_d2iz>
   1279a:	bd70      	pop	{r4, r5, r6, pc}
   1279c:	4b06      	ldr	r3, [pc, #24]	; (127b8 <__aeabi_d2uiz+0x38>)
   1279e:	2200      	movs	r2, #0
   127a0:	0020      	movs	r0, r4
   127a2:	0029      	movs	r1, r5
   127a4:	f002 f8a2 	bl	148ec <__aeabi_dsub>
   127a8:	f002 fbb6 	bl	14f18 <__aeabi_d2iz>
   127ac:	2380      	movs	r3, #128	; 0x80
   127ae:	061b      	lsls	r3, r3, #24
   127b0:	469c      	mov	ip, r3
   127b2:	4460      	add	r0, ip
   127b4:	e7f1      	b.n	1279a <__aeabi_d2uiz+0x1a>
   127b6:	46c0      	nop			; (mov r8, r8)
   127b8:	41e00000 	.word	0x41e00000

000127bc <__aeabi_f2ulz>:
   127bc:	b570      	push	{r4, r5, r6, lr}
   127be:	f002 fc59 	bl	15074 <__aeabi_f2d>
   127c2:	2200      	movs	r2, #0
   127c4:	4b0b      	ldr	r3, [pc, #44]	; (127f4 <__aeabi_f2ulz+0x38>)
   127c6:	000d      	movs	r5, r1
   127c8:	0004      	movs	r4, r0
   127ca:	f001 fe0f 	bl	143ec <__aeabi_dmul>
   127ce:	f7ff ffd7 	bl	12780 <__aeabi_d2uiz>
   127d2:	0006      	movs	r6, r0
   127d4:	f002 fc16 	bl	15004 <__aeabi_ui2d>
   127d8:	2200      	movs	r2, #0
   127da:	4b07      	ldr	r3, [pc, #28]	; (127f8 <__aeabi_f2ulz+0x3c>)
   127dc:	f001 fe06 	bl	143ec <__aeabi_dmul>
   127e0:	0002      	movs	r2, r0
   127e2:	000b      	movs	r3, r1
   127e4:	0020      	movs	r0, r4
   127e6:	0029      	movs	r1, r5
   127e8:	f002 f880 	bl	148ec <__aeabi_dsub>
   127ec:	f7ff ffc8 	bl	12780 <__aeabi_d2uiz>
   127f0:	0031      	movs	r1, r6
   127f2:	bd70      	pop	{r4, r5, r6, pc}
   127f4:	3df00000 	.word	0x3df00000
   127f8:	41f00000 	.word	0x41f00000

000127fc <__udivmoddi4>:
   127fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   127fe:	4657      	mov	r7, sl
   12800:	464e      	mov	r6, r9
   12802:	4645      	mov	r5, r8
   12804:	46de      	mov	lr, fp
   12806:	b5e0      	push	{r5, r6, r7, lr}
   12808:	0004      	movs	r4, r0
   1280a:	b083      	sub	sp, #12
   1280c:	000d      	movs	r5, r1
   1280e:	4692      	mov	sl, r2
   12810:	4699      	mov	r9, r3
   12812:	428b      	cmp	r3, r1
   12814:	d82f      	bhi.n	12876 <__udivmoddi4+0x7a>
   12816:	d02c      	beq.n	12872 <__udivmoddi4+0x76>
   12818:	4649      	mov	r1, r9
   1281a:	4650      	mov	r0, sl
   1281c:	f002 fd62 	bl	152e4 <__clzdi2>
   12820:	0029      	movs	r1, r5
   12822:	0006      	movs	r6, r0
   12824:	0020      	movs	r0, r4
   12826:	f002 fd5d 	bl	152e4 <__clzdi2>
   1282a:	1a33      	subs	r3, r6, r0
   1282c:	4698      	mov	r8, r3
   1282e:	3b20      	subs	r3, #32
   12830:	469b      	mov	fp, r3
   12832:	d500      	bpl.n	12836 <__udivmoddi4+0x3a>
   12834:	e074      	b.n	12920 <__udivmoddi4+0x124>
   12836:	4653      	mov	r3, sl
   12838:	465a      	mov	r2, fp
   1283a:	4093      	lsls	r3, r2
   1283c:	001f      	movs	r7, r3
   1283e:	4653      	mov	r3, sl
   12840:	4642      	mov	r2, r8
   12842:	4093      	lsls	r3, r2
   12844:	001e      	movs	r6, r3
   12846:	42af      	cmp	r7, r5
   12848:	d829      	bhi.n	1289e <__udivmoddi4+0xa2>
   1284a:	d026      	beq.n	1289a <__udivmoddi4+0x9e>
   1284c:	465b      	mov	r3, fp
   1284e:	1ba4      	subs	r4, r4, r6
   12850:	41bd      	sbcs	r5, r7
   12852:	2b00      	cmp	r3, #0
   12854:	da00      	bge.n	12858 <__udivmoddi4+0x5c>
   12856:	e079      	b.n	1294c <__udivmoddi4+0x150>
   12858:	2200      	movs	r2, #0
   1285a:	2300      	movs	r3, #0
   1285c:	9200      	str	r2, [sp, #0]
   1285e:	9301      	str	r3, [sp, #4]
   12860:	2301      	movs	r3, #1
   12862:	465a      	mov	r2, fp
   12864:	4093      	lsls	r3, r2
   12866:	9301      	str	r3, [sp, #4]
   12868:	2301      	movs	r3, #1
   1286a:	4642      	mov	r2, r8
   1286c:	4093      	lsls	r3, r2
   1286e:	9300      	str	r3, [sp, #0]
   12870:	e019      	b.n	128a6 <__udivmoddi4+0xaa>
   12872:	4282      	cmp	r2, r0
   12874:	d9d0      	bls.n	12818 <__udivmoddi4+0x1c>
   12876:	2200      	movs	r2, #0
   12878:	2300      	movs	r3, #0
   1287a:	9200      	str	r2, [sp, #0]
   1287c:	9301      	str	r3, [sp, #4]
   1287e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12880:	2b00      	cmp	r3, #0
   12882:	d001      	beq.n	12888 <__udivmoddi4+0x8c>
   12884:	601c      	str	r4, [r3, #0]
   12886:	605d      	str	r5, [r3, #4]
   12888:	9800      	ldr	r0, [sp, #0]
   1288a:	9901      	ldr	r1, [sp, #4]
   1288c:	b003      	add	sp, #12
   1288e:	bc3c      	pop	{r2, r3, r4, r5}
   12890:	4690      	mov	r8, r2
   12892:	4699      	mov	r9, r3
   12894:	46a2      	mov	sl, r4
   12896:	46ab      	mov	fp, r5
   12898:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1289a:	42a3      	cmp	r3, r4
   1289c:	d9d6      	bls.n	1284c <__udivmoddi4+0x50>
   1289e:	2200      	movs	r2, #0
   128a0:	2300      	movs	r3, #0
   128a2:	9200      	str	r2, [sp, #0]
   128a4:	9301      	str	r3, [sp, #4]
   128a6:	4643      	mov	r3, r8
   128a8:	2b00      	cmp	r3, #0
   128aa:	d0e8      	beq.n	1287e <__udivmoddi4+0x82>
   128ac:	07fb      	lsls	r3, r7, #31
   128ae:	0872      	lsrs	r2, r6, #1
   128b0:	431a      	orrs	r2, r3
   128b2:	4646      	mov	r6, r8
   128b4:	087b      	lsrs	r3, r7, #1
   128b6:	e00e      	b.n	128d6 <__udivmoddi4+0xda>
   128b8:	42ab      	cmp	r3, r5
   128ba:	d101      	bne.n	128c0 <__udivmoddi4+0xc4>
   128bc:	42a2      	cmp	r2, r4
   128be:	d80c      	bhi.n	128da <__udivmoddi4+0xde>
   128c0:	1aa4      	subs	r4, r4, r2
   128c2:	419d      	sbcs	r5, r3
   128c4:	2001      	movs	r0, #1
   128c6:	1924      	adds	r4, r4, r4
   128c8:	416d      	adcs	r5, r5
   128ca:	2100      	movs	r1, #0
   128cc:	3e01      	subs	r6, #1
   128ce:	1824      	adds	r4, r4, r0
   128d0:	414d      	adcs	r5, r1
   128d2:	2e00      	cmp	r6, #0
   128d4:	d006      	beq.n	128e4 <__udivmoddi4+0xe8>
   128d6:	42ab      	cmp	r3, r5
   128d8:	d9ee      	bls.n	128b8 <__udivmoddi4+0xbc>
   128da:	3e01      	subs	r6, #1
   128dc:	1924      	adds	r4, r4, r4
   128de:	416d      	adcs	r5, r5
   128e0:	2e00      	cmp	r6, #0
   128e2:	d1f8      	bne.n	128d6 <__udivmoddi4+0xda>
   128e4:	465b      	mov	r3, fp
   128e6:	9800      	ldr	r0, [sp, #0]
   128e8:	9901      	ldr	r1, [sp, #4]
   128ea:	1900      	adds	r0, r0, r4
   128ec:	4169      	adcs	r1, r5
   128ee:	2b00      	cmp	r3, #0
   128f0:	db22      	blt.n	12938 <__udivmoddi4+0x13c>
   128f2:	002b      	movs	r3, r5
   128f4:	465a      	mov	r2, fp
   128f6:	40d3      	lsrs	r3, r2
   128f8:	002a      	movs	r2, r5
   128fa:	4644      	mov	r4, r8
   128fc:	40e2      	lsrs	r2, r4
   128fe:	001c      	movs	r4, r3
   12900:	465b      	mov	r3, fp
   12902:	0015      	movs	r5, r2
   12904:	2b00      	cmp	r3, #0
   12906:	db2c      	blt.n	12962 <__udivmoddi4+0x166>
   12908:	0026      	movs	r6, r4
   1290a:	409e      	lsls	r6, r3
   1290c:	0033      	movs	r3, r6
   1290e:	0026      	movs	r6, r4
   12910:	4647      	mov	r7, r8
   12912:	40be      	lsls	r6, r7
   12914:	0032      	movs	r2, r6
   12916:	1a80      	subs	r0, r0, r2
   12918:	4199      	sbcs	r1, r3
   1291a:	9000      	str	r0, [sp, #0]
   1291c:	9101      	str	r1, [sp, #4]
   1291e:	e7ae      	b.n	1287e <__udivmoddi4+0x82>
   12920:	4642      	mov	r2, r8
   12922:	2320      	movs	r3, #32
   12924:	1a9b      	subs	r3, r3, r2
   12926:	4652      	mov	r2, sl
   12928:	40da      	lsrs	r2, r3
   1292a:	4641      	mov	r1, r8
   1292c:	0013      	movs	r3, r2
   1292e:	464a      	mov	r2, r9
   12930:	408a      	lsls	r2, r1
   12932:	0017      	movs	r7, r2
   12934:	431f      	orrs	r7, r3
   12936:	e782      	b.n	1283e <__udivmoddi4+0x42>
   12938:	4642      	mov	r2, r8
   1293a:	2320      	movs	r3, #32
   1293c:	1a9b      	subs	r3, r3, r2
   1293e:	002a      	movs	r2, r5
   12940:	4646      	mov	r6, r8
   12942:	409a      	lsls	r2, r3
   12944:	0023      	movs	r3, r4
   12946:	40f3      	lsrs	r3, r6
   12948:	4313      	orrs	r3, r2
   1294a:	e7d5      	b.n	128f8 <__udivmoddi4+0xfc>
   1294c:	4642      	mov	r2, r8
   1294e:	2320      	movs	r3, #32
   12950:	2100      	movs	r1, #0
   12952:	1a9b      	subs	r3, r3, r2
   12954:	2200      	movs	r2, #0
   12956:	9100      	str	r1, [sp, #0]
   12958:	9201      	str	r2, [sp, #4]
   1295a:	2201      	movs	r2, #1
   1295c:	40da      	lsrs	r2, r3
   1295e:	9201      	str	r2, [sp, #4]
   12960:	e782      	b.n	12868 <__udivmoddi4+0x6c>
   12962:	4642      	mov	r2, r8
   12964:	2320      	movs	r3, #32
   12966:	0026      	movs	r6, r4
   12968:	1a9b      	subs	r3, r3, r2
   1296a:	40de      	lsrs	r6, r3
   1296c:	002f      	movs	r7, r5
   1296e:	46b4      	mov	ip, r6
   12970:	4097      	lsls	r7, r2
   12972:	4666      	mov	r6, ip
   12974:	003b      	movs	r3, r7
   12976:	4333      	orrs	r3, r6
   12978:	e7c9      	b.n	1290e <__udivmoddi4+0x112>
   1297a:	46c0      	nop			; (mov r8, r8)

0001297c <__aeabi_fadd>:
   1297c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1297e:	46c6      	mov	lr, r8
   12980:	024e      	lsls	r6, r1, #9
   12982:	0247      	lsls	r7, r0, #9
   12984:	0a76      	lsrs	r6, r6, #9
   12986:	0a7b      	lsrs	r3, r7, #9
   12988:	0044      	lsls	r4, r0, #1
   1298a:	0fc5      	lsrs	r5, r0, #31
   1298c:	00f7      	lsls	r7, r6, #3
   1298e:	0048      	lsls	r0, r1, #1
   12990:	4698      	mov	r8, r3
   12992:	b500      	push	{lr}
   12994:	0e24      	lsrs	r4, r4, #24
   12996:	002a      	movs	r2, r5
   12998:	00db      	lsls	r3, r3, #3
   1299a:	0e00      	lsrs	r0, r0, #24
   1299c:	0fc9      	lsrs	r1, r1, #31
   1299e:	46bc      	mov	ip, r7
   129a0:	428d      	cmp	r5, r1
   129a2:	d067      	beq.n	12a74 <__aeabi_fadd+0xf8>
   129a4:	1a22      	subs	r2, r4, r0
   129a6:	2a00      	cmp	r2, #0
   129a8:	dc00      	bgt.n	129ac <__aeabi_fadd+0x30>
   129aa:	e0a5      	b.n	12af8 <__aeabi_fadd+0x17c>
   129ac:	2800      	cmp	r0, #0
   129ae:	d13a      	bne.n	12a26 <__aeabi_fadd+0xaa>
   129b0:	2f00      	cmp	r7, #0
   129b2:	d100      	bne.n	129b6 <__aeabi_fadd+0x3a>
   129b4:	e093      	b.n	12ade <__aeabi_fadd+0x162>
   129b6:	1e51      	subs	r1, r2, #1
   129b8:	2900      	cmp	r1, #0
   129ba:	d000      	beq.n	129be <__aeabi_fadd+0x42>
   129bc:	e0bc      	b.n	12b38 <__aeabi_fadd+0x1bc>
   129be:	2401      	movs	r4, #1
   129c0:	1bdb      	subs	r3, r3, r7
   129c2:	015a      	lsls	r2, r3, #5
   129c4:	d546      	bpl.n	12a54 <__aeabi_fadd+0xd8>
   129c6:	019b      	lsls	r3, r3, #6
   129c8:	099e      	lsrs	r6, r3, #6
   129ca:	0030      	movs	r0, r6
   129cc:	f002 fc6c 	bl	152a8 <__clzsi2>
   129d0:	3805      	subs	r0, #5
   129d2:	4086      	lsls	r6, r0
   129d4:	4284      	cmp	r4, r0
   129d6:	dd00      	ble.n	129da <__aeabi_fadd+0x5e>
   129d8:	e09d      	b.n	12b16 <__aeabi_fadd+0x19a>
   129da:	1b04      	subs	r4, r0, r4
   129dc:	0032      	movs	r2, r6
   129de:	2020      	movs	r0, #32
   129e0:	3401      	adds	r4, #1
   129e2:	40e2      	lsrs	r2, r4
   129e4:	1b04      	subs	r4, r0, r4
   129e6:	40a6      	lsls	r6, r4
   129e8:	0033      	movs	r3, r6
   129ea:	1e5e      	subs	r6, r3, #1
   129ec:	41b3      	sbcs	r3, r6
   129ee:	2400      	movs	r4, #0
   129f0:	4313      	orrs	r3, r2
   129f2:	075a      	lsls	r2, r3, #29
   129f4:	d004      	beq.n	12a00 <__aeabi_fadd+0x84>
   129f6:	220f      	movs	r2, #15
   129f8:	401a      	ands	r2, r3
   129fa:	2a04      	cmp	r2, #4
   129fc:	d000      	beq.n	12a00 <__aeabi_fadd+0x84>
   129fe:	3304      	adds	r3, #4
   12a00:	015a      	lsls	r2, r3, #5
   12a02:	d529      	bpl.n	12a58 <__aeabi_fadd+0xdc>
   12a04:	3401      	adds	r4, #1
   12a06:	2cff      	cmp	r4, #255	; 0xff
   12a08:	d100      	bne.n	12a0c <__aeabi_fadd+0x90>
   12a0a:	e081      	b.n	12b10 <__aeabi_fadd+0x194>
   12a0c:	002a      	movs	r2, r5
   12a0e:	019b      	lsls	r3, r3, #6
   12a10:	0a5b      	lsrs	r3, r3, #9
   12a12:	b2e4      	uxtb	r4, r4
   12a14:	025b      	lsls	r3, r3, #9
   12a16:	05e4      	lsls	r4, r4, #23
   12a18:	0a58      	lsrs	r0, r3, #9
   12a1a:	07d2      	lsls	r2, r2, #31
   12a1c:	4320      	orrs	r0, r4
   12a1e:	4310      	orrs	r0, r2
   12a20:	bc04      	pop	{r2}
   12a22:	4690      	mov	r8, r2
   12a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12a26:	2cff      	cmp	r4, #255	; 0xff
   12a28:	d0e3      	beq.n	129f2 <__aeabi_fadd+0x76>
   12a2a:	2180      	movs	r1, #128	; 0x80
   12a2c:	0038      	movs	r0, r7
   12a2e:	04c9      	lsls	r1, r1, #19
   12a30:	4308      	orrs	r0, r1
   12a32:	4684      	mov	ip, r0
   12a34:	2a1b      	cmp	r2, #27
   12a36:	dd00      	ble.n	12a3a <__aeabi_fadd+0xbe>
   12a38:	e082      	b.n	12b40 <__aeabi_fadd+0x1c4>
   12a3a:	2020      	movs	r0, #32
   12a3c:	4661      	mov	r1, ip
   12a3e:	40d1      	lsrs	r1, r2
   12a40:	1a82      	subs	r2, r0, r2
   12a42:	4660      	mov	r0, ip
   12a44:	4090      	lsls	r0, r2
   12a46:	0002      	movs	r2, r0
   12a48:	1e50      	subs	r0, r2, #1
   12a4a:	4182      	sbcs	r2, r0
   12a4c:	430a      	orrs	r2, r1
   12a4e:	1a9b      	subs	r3, r3, r2
   12a50:	015a      	lsls	r2, r3, #5
   12a52:	d4b8      	bmi.n	129c6 <__aeabi_fadd+0x4a>
   12a54:	075a      	lsls	r2, r3, #29
   12a56:	d1ce      	bne.n	129f6 <__aeabi_fadd+0x7a>
   12a58:	08de      	lsrs	r6, r3, #3
   12a5a:	002a      	movs	r2, r5
   12a5c:	2cff      	cmp	r4, #255	; 0xff
   12a5e:	d13a      	bne.n	12ad6 <__aeabi_fadd+0x15a>
   12a60:	2e00      	cmp	r6, #0
   12a62:	d100      	bne.n	12a66 <__aeabi_fadd+0xea>
   12a64:	e0ae      	b.n	12bc4 <__aeabi_fadd+0x248>
   12a66:	2380      	movs	r3, #128	; 0x80
   12a68:	03db      	lsls	r3, r3, #15
   12a6a:	4333      	orrs	r3, r6
   12a6c:	025b      	lsls	r3, r3, #9
   12a6e:	0a5b      	lsrs	r3, r3, #9
   12a70:	24ff      	movs	r4, #255	; 0xff
   12a72:	e7cf      	b.n	12a14 <__aeabi_fadd+0x98>
   12a74:	1a21      	subs	r1, r4, r0
   12a76:	2900      	cmp	r1, #0
   12a78:	dd52      	ble.n	12b20 <__aeabi_fadd+0x1a4>
   12a7a:	2800      	cmp	r0, #0
   12a7c:	d031      	beq.n	12ae2 <__aeabi_fadd+0x166>
   12a7e:	2cff      	cmp	r4, #255	; 0xff
   12a80:	d0b7      	beq.n	129f2 <__aeabi_fadd+0x76>
   12a82:	2080      	movs	r0, #128	; 0x80
   12a84:	003e      	movs	r6, r7
   12a86:	04c0      	lsls	r0, r0, #19
   12a88:	4306      	orrs	r6, r0
   12a8a:	46b4      	mov	ip, r6
   12a8c:	291b      	cmp	r1, #27
   12a8e:	dd00      	ble.n	12a92 <__aeabi_fadd+0x116>
   12a90:	e0aa      	b.n	12be8 <__aeabi_fadd+0x26c>
   12a92:	2620      	movs	r6, #32
   12a94:	4660      	mov	r0, ip
   12a96:	40c8      	lsrs	r0, r1
   12a98:	1a71      	subs	r1, r6, r1
   12a9a:	4666      	mov	r6, ip
   12a9c:	408e      	lsls	r6, r1
   12a9e:	0031      	movs	r1, r6
   12aa0:	1e4e      	subs	r6, r1, #1
   12aa2:	41b1      	sbcs	r1, r6
   12aa4:	4301      	orrs	r1, r0
   12aa6:	185b      	adds	r3, r3, r1
   12aa8:	0159      	lsls	r1, r3, #5
   12aaa:	d5d3      	bpl.n	12a54 <__aeabi_fadd+0xd8>
   12aac:	3401      	adds	r4, #1
   12aae:	2cff      	cmp	r4, #255	; 0xff
   12ab0:	d100      	bne.n	12ab4 <__aeabi_fadd+0x138>
   12ab2:	e087      	b.n	12bc4 <__aeabi_fadd+0x248>
   12ab4:	2201      	movs	r2, #1
   12ab6:	4978      	ldr	r1, [pc, #480]	; (12c98 <__aeabi_fadd+0x31c>)
   12ab8:	401a      	ands	r2, r3
   12aba:	085b      	lsrs	r3, r3, #1
   12abc:	400b      	ands	r3, r1
   12abe:	4313      	orrs	r3, r2
   12ac0:	e797      	b.n	129f2 <__aeabi_fadd+0x76>
   12ac2:	2c00      	cmp	r4, #0
   12ac4:	d000      	beq.n	12ac8 <__aeabi_fadd+0x14c>
   12ac6:	e0a7      	b.n	12c18 <__aeabi_fadd+0x29c>
   12ac8:	2b00      	cmp	r3, #0
   12aca:	d000      	beq.n	12ace <__aeabi_fadd+0x152>
   12acc:	e0b6      	b.n	12c3c <__aeabi_fadd+0x2c0>
   12ace:	1e3b      	subs	r3, r7, #0
   12ad0:	d162      	bne.n	12b98 <__aeabi_fadd+0x21c>
   12ad2:	2600      	movs	r6, #0
   12ad4:	2200      	movs	r2, #0
   12ad6:	0273      	lsls	r3, r6, #9
   12ad8:	0a5b      	lsrs	r3, r3, #9
   12ada:	b2e4      	uxtb	r4, r4
   12adc:	e79a      	b.n	12a14 <__aeabi_fadd+0x98>
   12ade:	0014      	movs	r4, r2
   12ae0:	e787      	b.n	129f2 <__aeabi_fadd+0x76>
   12ae2:	2f00      	cmp	r7, #0
   12ae4:	d04d      	beq.n	12b82 <__aeabi_fadd+0x206>
   12ae6:	1e48      	subs	r0, r1, #1
   12ae8:	2800      	cmp	r0, #0
   12aea:	d157      	bne.n	12b9c <__aeabi_fadd+0x220>
   12aec:	4463      	add	r3, ip
   12aee:	2401      	movs	r4, #1
   12af0:	015a      	lsls	r2, r3, #5
   12af2:	d5af      	bpl.n	12a54 <__aeabi_fadd+0xd8>
   12af4:	2402      	movs	r4, #2
   12af6:	e7dd      	b.n	12ab4 <__aeabi_fadd+0x138>
   12af8:	2a00      	cmp	r2, #0
   12afa:	d124      	bne.n	12b46 <__aeabi_fadd+0x1ca>
   12afc:	1c62      	adds	r2, r4, #1
   12afe:	b2d2      	uxtb	r2, r2
   12b00:	2a01      	cmp	r2, #1
   12b02:	ddde      	ble.n	12ac2 <__aeabi_fadd+0x146>
   12b04:	1bde      	subs	r6, r3, r7
   12b06:	0172      	lsls	r2, r6, #5
   12b08:	d535      	bpl.n	12b76 <__aeabi_fadd+0x1fa>
   12b0a:	1afe      	subs	r6, r7, r3
   12b0c:	000d      	movs	r5, r1
   12b0e:	e75c      	b.n	129ca <__aeabi_fadd+0x4e>
   12b10:	002a      	movs	r2, r5
   12b12:	2300      	movs	r3, #0
   12b14:	e77e      	b.n	12a14 <__aeabi_fadd+0x98>
   12b16:	0033      	movs	r3, r6
   12b18:	4a60      	ldr	r2, [pc, #384]	; (12c9c <__aeabi_fadd+0x320>)
   12b1a:	1a24      	subs	r4, r4, r0
   12b1c:	4013      	ands	r3, r2
   12b1e:	e768      	b.n	129f2 <__aeabi_fadd+0x76>
   12b20:	2900      	cmp	r1, #0
   12b22:	d163      	bne.n	12bec <__aeabi_fadd+0x270>
   12b24:	1c61      	adds	r1, r4, #1
   12b26:	b2c8      	uxtb	r0, r1
   12b28:	2801      	cmp	r0, #1
   12b2a:	dd4e      	ble.n	12bca <__aeabi_fadd+0x24e>
   12b2c:	29ff      	cmp	r1, #255	; 0xff
   12b2e:	d049      	beq.n	12bc4 <__aeabi_fadd+0x248>
   12b30:	4463      	add	r3, ip
   12b32:	085b      	lsrs	r3, r3, #1
   12b34:	000c      	movs	r4, r1
   12b36:	e75c      	b.n	129f2 <__aeabi_fadd+0x76>
   12b38:	2aff      	cmp	r2, #255	; 0xff
   12b3a:	d041      	beq.n	12bc0 <__aeabi_fadd+0x244>
   12b3c:	000a      	movs	r2, r1
   12b3e:	e779      	b.n	12a34 <__aeabi_fadd+0xb8>
   12b40:	2201      	movs	r2, #1
   12b42:	1a9b      	subs	r3, r3, r2
   12b44:	e784      	b.n	12a50 <__aeabi_fadd+0xd4>
   12b46:	2c00      	cmp	r4, #0
   12b48:	d01d      	beq.n	12b86 <__aeabi_fadd+0x20a>
   12b4a:	28ff      	cmp	r0, #255	; 0xff
   12b4c:	d022      	beq.n	12b94 <__aeabi_fadd+0x218>
   12b4e:	2480      	movs	r4, #128	; 0x80
   12b50:	04e4      	lsls	r4, r4, #19
   12b52:	4252      	negs	r2, r2
   12b54:	4323      	orrs	r3, r4
   12b56:	2a1b      	cmp	r2, #27
   12b58:	dd00      	ble.n	12b5c <__aeabi_fadd+0x1e0>
   12b5a:	e08a      	b.n	12c72 <__aeabi_fadd+0x2f6>
   12b5c:	001c      	movs	r4, r3
   12b5e:	2520      	movs	r5, #32
   12b60:	40d4      	lsrs	r4, r2
   12b62:	1aaa      	subs	r2, r5, r2
   12b64:	4093      	lsls	r3, r2
   12b66:	1e5a      	subs	r2, r3, #1
   12b68:	4193      	sbcs	r3, r2
   12b6a:	4323      	orrs	r3, r4
   12b6c:	4662      	mov	r2, ip
   12b6e:	0004      	movs	r4, r0
   12b70:	1ad3      	subs	r3, r2, r3
   12b72:	000d      	movs	r5, r1
   12b74:	e725      	b.n	129c2 <__aeabi_fadd+0x46>
   12b76:	2e00      	cmp	r6, #0
   12b78:	d000      	beq.n	12b7c <__aeabi_fadd+0x200>
   12b7a:	e726      	b.n	129ca <__aeabi_fadd+0x4e>
   12b7c:	2200      	movs	r2, #0
   12b7e:	2400      	movs	r4, #0
   12b80:	e7a9      	b.n	12ad6 <__aeabi_fadd+0x15a>
   12b82:	000c      	movs	r4, r1
   12b84:	e735      	b.n	129f2 <__aeabi_fadd+0x76>
   12b86:	2b00      	cmp	r3, #0
   12b88:	d04d      	beq.n	12c26 <__aeabi_fadd+0x2aa>
   12b8a:	43d2      	mvns	r2, r2
   12b8c:	2a00      	cmp	r2, #0
   12b8e:	d0ed      	beq.n	12b6c <__aeabi_fadd+0x1f0>
   12b90:	28ff      	cmp	r0, #255	; 0xff
   12b92:	d1e0      	bne.n	12b56 <__aeabi_fadd+0x1da>
   12b94:	4663      	mov	r3, ip
   12b96:	24ff      	movs	r4, #255	; 0xff
   12b98:	000d      	movs	r5, r1
   12b9a:	e72a      	b.n	129f2 <__aeabi_fadd+0x76>
   12b9c:	29ff      	cmp	r1, #255	; 0xff
   12b9e:	d00f      	beq.n	12bc0 <__aeabi_fadd+0x244>
   12ba0:	0001      	movs	r1, r0
   12ba2:	e773      	b.n	12a8c <__aeabi_fadd+0x110>
   12ba4:	2b00      	cmp	r3, #0
   12ba6:	d061      	beq.n	12c6c <__aeabi_fadd+0x2f0>
   12ba8:	24ff      	movs	r4, #255	; 0xff
   12baa:	2f00      	cmp	r7, #0
   12bac:	d100      	bne.n	12bb0 <__aeabi_fadd+0x234>
   12bae:	e720      	b.n	129f2 <__aeabi_fadd+0x76>
   12bb0:	2280      	movs	r2, #128	; 0x80
   12bb2:	4641      	mov	r1, r8
   12bb4:	03d2      	lsls	r2, r2, #15
   12bb6:	4211      	tst	r1, r2
   12bb8:	d002      	beq.n	12bc0 <__aeabi_fadd+0x244>
   12bba:	4216      	tst	r6, r2
   12bbc:	d100      	bne.n	12bc0 <__aeabi_fadd+0x244>
   12bbe:	003b      	movs	r3, r7
   12bc0:	24ff      	movs	r4, #255	; 0xff
   12bc2:	e716      	b.n	129f2 <__aeabi_fadd+0x76>
   12bc4:	24ff      	movs	r4, #255	; 0xff
   12bc6:	2300      	movs	r3, #0
   12bc8:	e724      	b.n	12a14 <__aeabi_fadd+0x98>
   12bca:	2c00      	cmp	r4, #0
   12bcc:	d1ea      	bne.n	12ba4 <__aeabi_fadd+0x228>
   12bce:	2b00      	cmp	r3, #0
   12bd0:	d058      	beq.n	12c84 <__aeabi_fadd+0x308>
   12bd2:	2f00      	cmp	r7, #0
   12bd4:	d100      	bne.n	12bd8 <__aeabi_fadd+0x25c>
   12bd6:	e70c      	b.n	129f2 <__aeabi_fadd+0x76>
   12bd8:	4463      	add	r3, ip
   12bda:	015a      	lsls	r2, r3, #5
   12bdc:	d400      	bmi.n	12be0 <__aeabi_fadd+0x264>
   12bde:	e739      	b.n	12a54 <__aeabi_fadd+0xd8>
   12be0:	4a2e      	ldr	r2, [pc, #184]	; (12c9c <__aeabi_fadd+0x320>)
   12be2:	000c      	movs	r4, r1
   12be4:	4013      	ands	r3, r2
   12be6:	e704      	b.n	129f2 <__aeabi_fadd+0x76>
   12be8:	2101      	movs	r1, #1
   12bea:	e75c      	b.n	12aa6 <__aeabi_fadd+0x12a>
   12bec:	2c00      	cmp	r4, #0
   12bee:	d11e      	bne.n	12c2e <__aeabi_fadd+0x2b2>
   12bf0:	2b00      	cmp	r3, #0
   12bf2:	d040      	beq.n	12c76 <__aeabi_fadd+0x2fa>
   12bf4:	43c9      	mvns	r1, r1
   12bf6:	2900      	cmp	r1, #0
   12bf8:	d00b      	beq.n	12c12 <__aeabi_fadd+0x296>
   12bfa:	28ff      	cmp	r0, #255	; 0xff
   12bfc:	d036      	beq.n	12c6c <__aeabi_fadd+0x2f0>
   12bfe:	291b      	cmp	r1, #27
   12c00:	dc47      	bgt.n	12c92 <__aeabi_fadd+0x316>
   12c02:	001c      	movs	r4, r3
   12c04:	2620      	movs	r6, #32
   12c06:	40cc      	lsrs	r4, r1
   12c08:	1a71      	subs	r1, r6, r1
   12c0a:	408b      	lsls	r3, r1
   12c0c:	1e59      	subs	r1, r3, #1
   12c0e:	418b      	sbcs	r3, r1
   12c10:	4323      	orrs	r3, r4
   12c12:	4463      	add	r3, ip
   12c14:	0004      	movs	r4, r0
   12c16:	e747      	b.n	12aa8 <__aeabi_fadd+0x12c>
   12c18:	2b00      	cmp	r3, #0
   12c1a:	d118      	bne.n	12c4e <__aeabi_fadd+0x2d2>
   12c1c:	1e3b      	subs	r3, r7, #0
   12c1e:	d02d      	beq.n	12c7c <__aeabi_fadd+0x300>
   12c20:	000d      	movs	r5, r1
   12c22:	24ff      	movs	r4, #255	; 0xff
   12c24:	e6e5      	b.n	129f2 <__aeabi_fadd+0x76>
   12c26:	003b      	movs	r3, r7
   12c28:	0004      	movs	r4, r0
   12c2a:	000d      	movs	r5, r1
   12c2c:	e6e1      	b.n	129f2 <__aeabi_fadd+0x76>
   12c2e:	28ff      	cmp	r0, #255	; 0xff
   12c30:	d01c      	beq.n	12c6c <__aeabi_fadd+0x2f0>
   12c32:	2480      	movs	r4, #128	; 0x80
   12c34:	04e4      	lsls	r4, r4, #19
   12c36:	4249      	negs	r1, r1
   12c38:	4323      	orrs	r3, r4
   12c3a:	e7e0      	b.n	12bfe <__aeabi_fadd+0x282>
   12c3c:	2f00      	cmp	r7, #0
   12c3e:	d100      	bne.n	12c42 <__aeabi_fadd+0x2c6>
   12c40:	e6d7      	b.n	129f2 <__aeabi_fadd+0x76>
   12c42:	1bde      	subs	r6, r3, r7
   12c44:	0172      	lsls	r2, r6, #5
   12c46:	d51f      	bpl.n	12c88 <__aeabi_fadd+0x30c>
   12c48:	1afb      	subs	r3, r7, r3
   12c4a:	000d      	movs	r5, r1
   12c4c:	e6d1      	b.n	129f2 <__aeabi_fadd+0x76>
   12c4e:	24ff      	movs	r4, #255	; 0xff
   12c50:	2f00      	cmp	r7, #0
   12c52:	d100      	bne.n	12c56 <__aeabi_fadd+0x2da>
   12c54:	e6cd      	b.n	129f2 <__aeabi_fadd+0x76>
   12c56:	2280      	movs	r2, #128	; 0x80
   12c58:	4640      	mov	r0, r8
   12c5a:	03d2      	lsls	r2, r2, #15
   12c5c:	4210      	tst	r0, r2
   12c5e:	d0af      	beq.n	12bc0 <__aeabi_fadd+0x244>
   12c60:	4216      	tst	r6, r2
   12c62:	d1ad      	bne.n	12bc0 <__aeabi_fadd+0x244>
   12c64:	003b      	movs	r3, r7
   12c66:	000d      	movs	r5, r1
   12c68:	24ff      	movs	r4, #255	; 0xff
   12c6a:	e6c2      	b.n	129f2 <__aeabi_fadd+0x76>
   12c6c:	4663      	mov	r3, ip
   12c6e:	24ff      	movs	r4, #255	; 0xff
   12c70:	e6bf      	b.n	129f2 <__aeabi_fadd+0x76>
   12c72:	2301      	movs	r3, #1
   12c74:	e77a      	b.n	12b6c <__aeabi_fadd+0x1f0>
   12c76:	003b      	movs	r3, r7
   12c78:	0004      	movs	r4, r0
   12c7a:	e6ba      	b.n	129f2 <__aeabi_fadd+0x76>
   12c7c:	2680      	movs	r6, #128	; 0x80
   12c7e:	2200      	movs	r2, #0
   12c80:	03f6      	lsls	r6, r6, #15
   12c82:	e6f0      	b.n	12a66 <__aeabi_fadd+0xea>
   12c84:	003b      	movs	r3, r7
   12c86:	e6b4      	b.n	129f2 <__aeabi_fadd+0x76>
   12c88:	1e33      	subs	r3, r6, #0
   12c8a:	d000      	beq.n	12c8e <__aeabi_fadd+0x312>
   12c8c:	e6e2      	b.n	12a54 <__aeabi_fadd+0xd8>
   12c8e:	2200      	movs	r2, #0
   12c90:	e721      	b.n	12ad6 <__aeabi_fadd+0x15a>
   12c92:	2301      	movs	r3, #1
   12c94:	e7bd      	b.n	12c12 <__aeabi_fadd+0x296>
   12c96:	46c0      	nop			; (mov r8, r8)
   12c98:	7dffffff 	.word	0x7dffffff
   12c9c:	fbffffff 	.word	0xfbffffff

00012ca0 <__aeabi_fdiv>:
   12ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
   12ca2:	4657      	mov	r7, sl
   12ca4:	464e      	mov	r6, r9
   12ca6:	46de      	mov	lr, fp
   12ca8:	4645      	mov	r5, r8
   12caa:	b5e0      	push	{r5, r6, r7, lr}
   12cac:	0244      	lsls	r4, r0, #9
   12cae:	0043      	lsls	r3, r0, #1
   12cb0:	0fc6      	lsrs	r6, r0, #31
   12cb2:	b083      	sub	sp, #12
   12cb4:	1c0f      	adds	r7, r1, #0
   12cb6:	0a64      	lsrs	r4, r4, #9
   12cb8:	0e1b      	lsrs	r3, r3, #24
   12cba:	46b2      	mov	sl, r6
   12cbc:	d053      	beq.n	12d66 <__aeabi_fdiv+0xc6>
   12cbe:	2bff      	cmp	r3, #255	; 0xff
   12cc0:	d027      	beq.n	12d12 <__aeabi_fdiv+0x72>
   12cc2:	2280      	movs	r2, #128	; 0x80
   12cc4:	00e4      	lsls	r4, r4, #3
   12cc6:	04d2      	lsls	r2, r2, #19
   12cc8:	4314      	orrs	r4, r2
   12cca:	227f      	movs	r2, #127	; 0x7f
   12ccc:	4252      	negs	r2, r2
   12cce:	4690      	mov	r8, r2
   12cd0:	4498      	add	r8, r3
   12cd2:	2300      	movs	r3, #0
   12cd4:	4699      	mov	r9, r3
   12cd6:	469b      	mov	fp, r3
   12cd8:	027d      	lsls	r5, r7, #9
   12cda:	0078      	lsls	r0, r7, #1
   12cdc:	0ffb      	lsrs	r3, r7, #31
   12cde:	0a6d      	lsrs	r5, r5, #9
   12ce0:	0e00      	lsrs	r0, r0, #24
   12ce2:	9300      	str	r3, [sp, #0]
   12ce4:	d024      	beq.n	12d30 <__aeabi_fdiv+0x90>
   12ce6:	28ff      	cmp	r0, #255	; 0xff
   12ce8:	d046      	beq.n	12d78 <__aeabi_fdiv+0xd8>
   12cea:	2380      	movs	r3, #128	; 0x80
   12cec:	2100      	movs	r1, #0
   12cee:	00ed      	lsls	r5, r5, #3
   12cf0:	04db      	lsls	r3, r3, #19
   12cf2:	431d      	orrs	r5, r3
   12cf4:	387f      	subs	r0, #127	; 0x7f
   12cf6:	4647      	mov	r7, r8
   12cf8:	1a38      	subs	r0, r7, r0
   12cfa:	464f      	mov	r7, r9
   12cfc:	430f      	orrs	r7, r1
   12cfe:	00bf      	lsls	r7, r7, #2
   12d00:	46b9      	mov	r9, r7
   12d02:	0033      	movs	r3, r6
   12d04:	9a00      	ldr	r2, [sp, #0]
   12d06:	4f87      	ldr	r7, [pc, #540]	; (12f24 <__aeabi_fdiv+0x284>)
   12d08:	4053      	eors	r3, r2
   12d0a:	464a      	mov	r2, r9
   12d0c:	58ba      	ldr	r2, [r7, r2]
   12d0e:	9301      	str	r3, [sp, #4]
   12d10:	4697      	mov	pc, r2
   12d12:	2c00      	cmp	r4, #0
   12d14:	d14e      	bne.n	12db4 <__aeabi_fdiv+0x114>
   12d16:	2308      	movs	r3, #8
   12d18:	4699      	mov	r9, r3
   12d1a:	33f7      	adds	r3, #247	; 0xf7
   12d1c:	4698      	mov	r8, r3
   12d1e:	3bfd      	subs	r3, #253	; 0xfd
   12d20:	469b      	mov	fp, r3
   12d22:	027d      	lsls	r5, r7, #9
   12d24:	0078      	lsls	r0, r7, #1
   12d26:	0ffb      	lsrs	r3, r7, #31
   12d28:	0a6d      	lsrs	r5, r5, #9
   12d2a:	0e00      	lsrs	r0, r0, #24
   12d2c:	9300      	str	r3, [sp, #0]
   12d2e:	d1da      	bne.n	12ce6 <__aeabi_fdiv+0x46>
   12d30:	2d00      	cmp	r5, #0
   12d32:	d126      	bne.n	12d82 <__aeabi_fdiv+0xe2>
   12d34:	2000      	movs	r0, #0
   12d36:	2101      	movs	r1, #1
   12d38:	0033      	movs	r3, r6
   12d3a:	9a00      	ldr	r2, [sp, #0]
   12d3c:	4f7a      	ldr	r7, [pc, #488]	; (12f28 <__aeabi_fdiv+0x288>)
   12d3e:	4053      	eors	r3, r2
   12d40:	4642      	mov	r2, r8
   12d42:	1a10      	subs	r0, r2, r0
   12d44:	464a      	mov	r2, r9
   12d46:	430a      	orrs	r2, r1
   12d48:	0092      	lsls	r2, r2, #2
   12d4a:	58ba      	ldr	r2, [r7, r2]
   12d4c:	001d      	movs	r5, r3
   12d4e:	4697      	mov	pc, r2
   12d50:	9b00      	ldr	r3, [sp, #0]
   12d52:	002c      	movs	r4, r5
   12d54:	469a      	mov	sl, r3
   12d56:	468b      	mov	fp, r1
   12d58:	465b      	mov	r3, fp
   12d5a:	2b02      	cmp	r3, #2
   12d5c:	d131      	bne.n	12dc2 <__aeabi_fdiv+0x122>
   12d5e:	4653      	mov	r3, sl
   12d60:	21ff      	movs	r1, #255	; 0xff
   12d62:	2400      	movs	r4, #0
   12d64:	e038      	b.n	12dd8 <__aeabi_fdiv+0x138>
   12d66:	2c00      	cmp	r4, #0
   12d68:	d117      	bne.n	12d9a <__aeabi_fdiv+0xfa>
   12d6a:	2304      	movs	r3, #4
   12d6c:	4699      	mov	r9, r3
   12d6e:	2300      	movs	r3, #0
   12d70:	4698      	mov	r8, r3
   12d72:	3301      	adds	r3, #1
   12d74:	469b      	mov	fp, r3
   12d76:	e7af      	b.n	12cd8 <__aeabi_fdiv+0x38>
   12d78:	20ff      	movs	r0, #255	; 0xff
   12d7a:	2d00      	cmp	r5, #0
   12d7c:	d10b      	bne.n	12d96 <__aeabi_fdiv+0xf6>
   12d7e:	2102      	movs	r1, #2
   12d80:	e7da      	b.n	12d38 <__aeabi_fdiv+0x98>
   12d82:	0028      	movs	r0, r5
   12d84:	f002 fa90 	bl	152a8 <__clzsi2>
   12d88:	1f43      	subs	r3, r0, #5
   12d8a:	409d      	lsls	r5, r3
   12d8c:	2376      	movs	r3, #118	; 0x76
   12d8e:	425b      	negs	r3, r3
   12d90:	1a18      	subs	r0, r3, r0
   12d92:	2100      	movs	r1, #0
   12d94:	e7af      	b.n	12cf6 <__aeabi_fdiv+0x56>
   12d96:	2103      	movs	r1, #3
   12d98:	e7ad      	b.n	12cf6 <__aeabi_fdiv+0x56>
   12d9a:	0020      	movs	r0, r4
   12d9c:	f002 fa84 	bl	152a8 <__clzsi2>
   12da0:	1f43      	subs	r3, r0, #5
   12da2:	409c      	lsls	r4, r3
   12da4:	2376      	movs	r3, #118	; 0x76
   12da6:	425b      	negs	r3, r3
   12da8:	1a1b      	subs	r3, r3, r0
   12daa:	4698      	mov	r8, r3
   12dac:	2300      	movs	r3, #0
   12dae:	4699      	mov	r9, r3
   12db0:	469b      	mov	fp, r3
   12db2:	e791      	b.n	12cd8 <__aeabi_fdiv+0x38>
   12db4:	230c      	movs	r3, #12
   12db6:	4699      	mov	r9, r3
   12db8:	33f3      	adds	r3, #243	; 0xf3
   12dba:	4698      	mov	r8, r3
   12dbc:	3bfc      	subs	r3, #252	; 0xfc
   12dbe:	469b      	mov	fp, r3
   12dc0:	e78a      	b.n	12cd8 <__aeabi_fdiv+0x38>
   12dc2:	2b03      	cmp	r3, #3
   12dc4:	d100      	bne.n	12dc8 <__aeabi_fdiv+0x128>
   12dc6:	e0a5      	b.n	12f14 <__aeabi_fdiv+0x274>
   12dc8:	4655      	mov	r5, sl
   12dca:	2b01      	cmp	r3, #1
   12dcc:	d000      	beq.n	12dd0 <__aeabi_fdiv+0x130>
   12dce:	e081      	b.n	12ed4 <__aeabi_fdiv+0x234>
   12dd0:	2301      	movs	r3, #1
   12dd2:	2100      	movs	r1, #0
   12dd4:	2400      	movs	r4, #0
   12dd6:	402b      	ands	r3, r5
   12dd8:	0264      	lsls	r4, r4, #9
   12dda:	05c9      	lsls	r1, r1, #23
   12ddc:	0a60      	lsrs	r0, r4, #9
   12dde:	07db      	lsls	r3, r3, #31
   12de0:	4308      	orrs	r0, r1
   12de2:	4318      	orrs	r0, r3
   12de4:	b003      	add	sp, #12
   12de6:	bc3c      	pop	{r2, r3, r4, r5}
   12de8:	4690      	mov	r8, r2
   12dea:	4699      	mov	r9, r3
   12dec:	46a2      	mov	sl, r4
   12dee:	46ab      	mov	fp, r5
   12df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12df2:	2480      	movs	r4, #128	; 0x80
   12df4:	2300      	movs	r3, #0
   12df6:	03e4      	lsls	r4, r4, #15
   12df8:	21ff      	movs	r1, #255	; 0xff
   12dfa:	e7ed      	b.n	12dd8 <__aeabi_fdiv+0x138>
   12dfc:	21ff      	movs	r1, #255	; 0xff
   12dfe:	2400      	movs	r4, #0
   12e00:	e7ea      	b.n	12dd8 <__aeabi_fdiv+0x138>
   12e02:	2301      	movs	r3, #1
   12e04:	1a59      	subs	r1, r3, r1
   12e06:	291b      	cmp	r1, #27
   12e08:	dd66      	ble.n	12ed8 <__aeabi_fdiv+0x238>
   12e0a:	9a01      	ldr	r2, [sp, #4]
   12e0c:	4013      	ands	r3, r2
   12e0e:	2100      	movs	r1, #0
   12e10:	2400      	movs	r4, #0
   12e12:	e7e1      	b.n	12dd8 <__aeabi_fdiv+0x138>
   12e14:	2380      	movs	r3, #128	; 0x80
   12e16:	03db      	lsls	r3, r3, #15
   12e18:	421c      	tst	r4, r3
   12e1a:	d038      	beq.n	12e8e <__aeabi_fdiv+0x1ee>
   12e1c:	421d      	tst	r5, r3
   12e1e:	d051      	beq.n	12ec4 <__aeabi_fdiv+0x224>
   12e20:	431c      	orrs	r4, r3
   12e22:	0264      	lsls	r4, r4, #9
   12e24:	0a64      	lsrs	r4, r4, #9
   12e26:	0033      	movs	r3, r6
   12e28:	21ff      	movs	r1, #255	; 0xff
   12e2a:	e7d5      	b.n	12dd8 <__aeabi_fdiv+0x138>
   12e2c:	0163      	lsls	r3, r4, #5
   12e2e:	016c      	lsls	r4, r5, #5
   12e30:	42a3      	cmp	r3, r4
   12e32:	d23b      	bcs.n	12eac <__aeabi_fdiv+0x20c>
   12e34:	261b      	movs	r6, #27
   12e36:	2100      	movs	r1, #0
   12e38:	3801      	subs	r0, #1
   12e3a:	2501      	movs	r5, #1
   12e3c:	001f      	movs	r7, r3
   12e3e:	0049      	lsls	r1, r1, #1
   12e40:	005b      	lsls	r3, r3, #1
   12e42:	2f00      	cmp	r7, #0
   12e44:	db01      	blt.n	12e4a <__aeabi_fdiv+0x1aa>
   12e46:	429c      	cmp	r4, r3
   12e48:	d801      	bhi.n	12e4e <__aeabi_fdiv+0x1ae>
   12e4a:	1b1b      	subs	r3, r3, r4
   12e4c:	4329      	orrs	r1, r5
   12e4e:	3e01      	subs	r6, #1
   12e50:	2e00      	cmp	r6, #0
   12e52:	d1f3      	bne.n	12e3c <__aeabi_fdiv+0x19c>
   12e54:	001c      	movs	r4, r3
   12e56:	1e63      	subs	r3, r4, #1
   12e58:	419c      	sbcs	r4, r3
   12e5a:	430c      	orrs	r4, r1
   12e5c:	0001      	movs	r1, r0
   12e5e:	317f      	adds	r1, #127	; 0x7f
   12e60:	2900      	cmp	r1, #0
   12e62:	ddce      	ble.n	12e02 <__aeabi_fdiv+0x162>
   12e64:	0763      	lsls	r3, r4, #29
   12e66:	d004      	beq.n	12e72 <__aeabi_fdiv+0x1d2>
   12e68:	230f      	movs	r3, #15
   12e6a:	4023      	ands	r3, r4
   12e6c:	2b04      	cmp	r3, #4
   12e6e:	d000      	beq.n	12e72 <__aeabi_fdiv+0x1d2>
   12e70:	3404      	adds	r4, #4
   12e72:	0123      	lsls	r3, r4, #4
   12e74:	d503      	bpl.n	12e7e <__aeabi_fdiv+0x1de>
   12e76:	0001      	movs	r1, r0
   12e78:	4b2c      	ldr	r3, [pc, #176]	; (12f2c <__aeabi_fdiv+0x28c>)
   12e7a:	3180      	adds	r1, #128	; 0x80
   12e7c:	401c      	ands	r4, r3
   12e7e:	29fe      	cmp	r1, #254	; 0xfe
   12e80:	dd0d      	ble.n	12e9e <__aeabi_fdiv+0x1fe>
   12e82:	2301      	movs	r3, #1
   12e84:	9a01      	ldr	r2, [sp, #4]
   12e86:	21ff      	movs	r1, #255	; 0xff
   12e88:	4013      	ands	r3, r2
   12e8a:	2400      	movs	r4, #0
   12e8c:	e7a4      	b.n	12dd8 <__aeabi_fdiv+0x138>
   12e8e:	2380      	movs	r3, #128	; 0x80
   12e90:	03db      	lsls	r3, r3, #15
   12e92:	431c      	orrs	r4, r3
   12e94:	0264      	lsls	r4, r4, #9
   12e96:	0a64      	lsrs	r4, r4, #9
   12e98:	0033      	movs	r3, r6
   12e9a:	21ff      	movs	r1, #255	; 0xff
   12e9c:	e79c      	b.n	12dd8 <__aeabi_fdiv+0x138>
   12e9e:	2301      	movs	r3, #1
   12ea0:	9a01      	ldr	r2, [sp, #4]
   12ea2:	01a4      	lsls	r4, r4, #6
   12ea4:	0a64      	lsrs	r4, r4, #9
   12ea6:	b2c9      	uxtb	r1, r1
   12ea8:	4013      	ands	r3, r2
   12eaa:	e795      	b.n	12dd8 <__aeabi_fdiv+0x138>
   12eac:	1b1b      	subs	r3, r3, r4
   12eae:	261a      	movs	r6, #26
   12eb0:	2101      	movs	r1, #1
   12eb2:	e7c2      	b.n	12e3a <__aeabi_fdiv+0x19a>
   12eb4:	9b00      	ldr	r3, [sp, #0]
   12eb6:	468b      	mov	fp, r1
   12eb8:	469a      	mov	sl, r3
   12eba:	2400      	movs	r4, #0
   12ebc:	e74c      	b.n	12d58 <__aeabi_fdiv+0xb8>
   12ebe:	0263      	lsls	r3, r4, #9
   12ec0:	d5e5      	bpl.n	12e8e <__aeabi_fdiv+0x1ee>
   12ec2:	2500      	movs	r5, #0
   12ec4:	2480      	movs	r4, #128	; 0x80
   12ec6:	03e4      	lsls	r4, r4, #15
   12ec8:	432c      	orrs	r4, r5
   12eca:	0264      	lsls	r4, r4, #9
   12ecc:	0a64      	lsrs	r4, r4, #9
   12ece:	9b00      	ldr	r3, [sp, #0]
   12ed0:	21ff      	movs	r1, #255	; 0xff
   12ed2:	e781      	b.n	12dd8 <__aeabi_fdiv+0x138>
   12ed4:	9501      	str	r5, [sp, #4]
   12ed6:	e7c1      	b.n	12e5c <__aeabi_fdiv+0x1bc>
   12ed8:	0023      	movs	r3, r4
   12eda:	2020      	movs	r0, #32
   12edc:	40cb      	lsrs	r3, r1
   12ede:	1a41      	subs	r1, r0, r1
   12ee0:	408c      	lsls	r4, r1
   12ee2:	1e61      	subs	r1, r4, #1
   12ee4:	418c      	sbcs	r4, r1
   12ee6:	431c      	orrs	r4, r3
   12ee8:	0763      	lsls	r3, r4, #29
   12eea:	d004      	beq.n	12ef6 <__aeabi_fdiv+0x256>
   12eec:	230f      	movs	r3, #15
   12eee:	4023      	ands	r3, r4
   12ef0:	2b04      	cmp	r3, #4
   12ef2:	d000      	beq.n	12ef6 <__aeabi_fdiv+0x256>
   12ef4:	3404      	adds	r4, #4
   12ef6:	0163      	lsls	r3, r4, #5
   12ef8:	d505      	bpl.n	12f06 <__aeabi_fdiv+0x266>
   12efa:	2301      	movs	r3, #1
   12efc:	9a01      	ldr	r2, [sp, #4]
   12efe:	2101      	movs	r1, #1
   12f00:	4013      	ands	r3, r2
   12f02:	2400      	movs	r4, #0
   12f04:	e768      	b.n	12dd8 <__aeabi_fdiv+0x138>
   12f06:	2301      	movs	r3, #1
   12f08:	9a01      	ldr	r2, [sp, #4]
   12f0a:	01a4      	lsls	r4, r4, #6
   12f0c:	0a64      	lsrs	r4, r4, #9
   12f0e:	4013      	ands	r3, r2
   12f10:	2100      	movs	r1, #0
   12f12:	e761      	b.n	12dd8 <__aeabi_fdiv+0x138>
   12f14:	2380      	movs	r3, #128	; 0x80
   12f16:	03db      	lsls	r3, r3, #15
   12f18:	431c      	orrs	r4, r3
   12f1a:	0264      	lsls	r4, r4, #9
   12f1c:	0a64      	lsrs	r4, r4, #9
   12f1e:	4653      	mov	r3, sl
   12f20:	21ff      	movs	r1, #255	; 0xff
   12f22:	e759      	b.n	12dd8 <__aeabi_fdiv+0x138>
   12f24:	00017bc4 	.word	0x00017bc4
   12f28:	00017c04 	.word	0x00017c04
   12f2c:	f7ffffff 	.word	0xf7ffffff

00012f30 <__eqsf2>:
   12f30:	b570      	push	{r4, r5, r6, lr}
   12f32:	0042      	lsls	r2, r0, #1
   12f34:	0245      	lsls	r5, r0, #9
   12f36:	024e      	lsls	r6, r1, #9
   12f38:	004c      	lsls	r4, r1, #1
   12f3a:	0fc3      	lsrs	r3, r0, #31
   12f3c:	0a6d      	lsrs	r5, r5, #9
   12f3e:	0e12      	lsrs	r2, r2, #24
   12f40:	0a76      	lsrs	r6, r6, #9
   12f42:	0e24      	lsrs	r4, r4, #24
   12f44:	0fc9      	lsrs	r1, r1, #31
   12f46:	2001      	movs	r0, #1
   12f48:	2aff      	cmp	r2, #255	; 0xff
   12f4a:	d006      	beq.n	12f5a <__eqsf2+0x2a>
   12f4c:	2cff      	cmp	r4, #255	; 0xff
   12f4e:	d003      	beq.n	12f58 <__eqsf2+0x28>
   12f50:	42a2      	cmp	r2, r4
   12f52:	d101      	bne.n	12f58 <__eqsf2+0x28>
   12f54:	42b5      	cmp	r5, r6
   12f56:	d006      	beq.n	12f66 <__eqsf2+0x36>
   12f58:	bd70      	pop	{r4, r5, r6, pc}
   12f5a:	2d00      	cmp	r5, #0
   12f5c:	d1fc      	bne.n	12f58 <__eqsf2+0x28>
   12f5e:	2cff      	cmp	r4, #255	; 0xff
   12f60:	d1fa      	bne.n	12f58 <__eqsf2+0x28>
   12f62:	2e00      	cmp	r6, #0
   12f64:	d1f8      	bne.n	12f58 <__eqsf2+0x28>
   12f66:	428b      	cmp	r3, r1
   12f68:	d006      	beq.n	12f78 <__eqsf2+0x48>
   12f6a:	2001      	movs	r0, #1
   12f6c:	2a00      	cmp	r2, #0
   12f6e:	d1f3      	bne.n	12f58 <__eqsf2+0x28>
   12f70:	0028      	movs	r0, r5
   12f72:	1e45      	subs	r5, r0, #1
   12f74:	41a8      	sbcs	r0, r5
   12f76:	e7ef      	b.n	12f58 <__eqsf2+0x28>
   12f78:	2000      	movs	r0, #0
   12f7a:	e7ed      	b.n	12f58 <__eqsf2+0x28>

00012f7c <__gesf2>:
   12f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12f7e:	0042      	lsls	r2, r0, #1
   12f80:	0245      	lsls	r5, r0, #9
   12f82:	024c      	lsls	r4, r1, #9
   12f84:	0fc3      	lsrs	r3, r0, #31
   12f86:	0048      	lsls	r0, r1, #1
   12f88:	0a6d      	lsrs	r5, r5, #9
   12f8a:	0e12      	lsrs	r2, r2, #24
   12f8c:	0a64      	lsrs	r4, r4, #9
   12f8e:	0e00      	lsrs	r0, r0, #24
   12f90:	0fc9      	lsrs	r1, r1, #31
   12f92:	2aff      	cmp	r2, #255	; 0xff
   12f94:	d01e      	beq.n	12fd4 <__gesf2+0x58>
   12f96:	28ff      	cmp	r0, #255	; 0xff
   12f98:	d021      	beq.n	12fde <__gesf2+0x62>
   12f9a:	2a00      	cmp	r2, #0
   12f9c:	d10a      	bne.n	12fb4 <__gesf2+0x38>
   12f9e:	426e      	negs	r6, r5
   12fa0:	416e      	adcs	r6, r5
   12fa2:	b2f6      	uxtb	r6, r6
   12fa4:	2800      	cmp	r0, #0
   12fa6:	d10f      	bne.n	12fc8 <__gesf2+0x4c>
   12fa8:	2c00      	cmp	r4, #0
   12faa:	d10d      	bne.n	12fc8 <__gesf2+0x4c>
   12fac:	2000      	movs	r0, #0
   12fae:	2d00      	cmp	r5, #0
   12fb0:	d009      	beq.n	12fc6 <__gesf2+0x4a>
   12fb2:	e005      	b.n	12fc0 <__gesf2+0x44>
   12fb4:	2800      	cmp	r0, #0
   12fb6:	d101      	bne.n	12fbc <__gesf2+0x40>
   12fb8:	2c00      	cmp	r4, #0
   12fba:	d001      	beq.n	12fc0 <__gesf2+0x44>
   12fbc:	428b      	cmp	r3, r1
   12fbe:	d011      	beq.n	12fe4 <__gesf2+0x68>
   12fc0:	2101      	movs	r1, #1
   12fc2:	4258      	negs	r0, r3
   12fc4:	4308      	orrs	r0, r1
   12fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12fc8:	2e00      	cmp	r6, #0
   12fca:	d0f7      	beq.n	12fbc <__gesf2+0x40>
   12fcc:	2001      	movs	r0, #1
   12fce:	3901      	subs	r1, #1
   12fd0:	4308      	orrs	r0, r1
   12fd2:	e7f8      	b.n	12fc6 <__gesf2+0x4a>
   12fd4:	2d00      	cmp	r5, #0
   12fd6:	d0de      	beq.n	12f96 <__gesf2+0x1a>
   12fd8:	2002      	movs	r0, #2
   12fda:	4240      	negs	r0, r0
   12fdc:	e7f3      	b.n	12fc6 <__gesf2+0x4a>
   12fde:	2c00      	cmp	r4, #0
   12fe0:	d0db      	beq.n	12f9a <__gesf2+0x1e>
   12fe2:	e7f9      	b.n	12fd8 <__gesf2+0x5c>
   12fe4:	4282      	cmp	r2, r0
   12fe6:	dceb      	bgt.n	12fc0 <__gesf2+0x44>
   12fe8:	db04      	blt.n	12ff4 <__gesf2+0x78>
   12fea:	42a5      	cmp	r5, r4
   12fec:	d8e8      	bhi.n	12fc0 <__gesf2+0x44>
   12fee:	2000      	movs	r0, #0
   12ff0:	42a5      	cmp	r5, r4
   12ff2:	d2e8      	bcs.n	12fc6 <__gesf2+0x4a>
   12ff4:	2101      	movs	r1, #1
   12ff6:	1e58      	subs	r0, r3, #1
   12ff8:	4308      	orrs	r0, r1
   12ffa:	e7e4      	b.n	12fc6 <__gesf2+0x4a>

00012ffc <__lesf2>:
   12ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
   12ffe:	0042      	lsls	r2, r0, #1
   13000:	024d      	lsls	r5, r1, #9
   13002:	004c      	lsls	r4, r1, #1
   13004:	0246      	lsls	r6, r0, #9
   13006:	0a76      	lsrs	r6, r6, #9
   13008:	0e12      	lsrs	r2, r2, #24
   1300a:	0fc3      	lsrs	r3, r0, #31
   1300c:	0a6d      	lsrs	r5, r5, #9
   1300e:	0e24      	lsrs	r4, r4, #24
   13010:	0fc9      	lsrs	r1, r1, #31
   13012:	2aff      	cmp	r2, #255	; 0xff
   13014:	d016      	beq.n	13044 <__lesf2+0x48>
   13016:	2cff      	cmp	r4, #255	; 0xff
   13018:	d018      	beq.n	1304c <__lesf2+0x50>
   1301a:	2a00      	cmp	r2, #0
   1301c:	d10a      	bne.n	13034 <__lesf2+0x38>
   1301e:	4270      	negs	r0, r6
   13020:	4170      	adcs	r0, r6
   13022:	b2c0      	uxtb	r0, r0
   13024:	2c00      	cmp	r4, #0
   13026:	d015      	beq.n	13054 <__lesf2+0x58>
   13028:	2800      	cmp	r0, #0
   1302a:	d005      	beq.n	13038 <__lesf2+0x3c>
   1302c:	2001      	movs	r0, #1
   1302e:	3901      	subs	r1, #1
   13030:	4308      	orrs	r0, r1
   13032:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13034:	2c00      	cmp	r4, #0
   13036:	d013      	beq.n	13060 <__lesf2+0x64>
   13038:	4299      	cmp	r1, r3
   1303a:	d014      	beq.n	13066 <__lesf2+0x6a>
   1303c:	2001      	movs	r0, #1
   1303e:	425b      	negs	r3, r3
   13040:	4318      	orrs	r0, r3
   13042:	e7f6      	b.n	13032 <__lesf2+0x36>
   13044:	2002      	movs	r0, #2
   13046:	2e00      	cmp	r6, #0
   13048:	d1f3      	bne.n	13032 <__lesf2+0x36>
   1304a:	e7e4      	b.n	13016 <__lesf2+0x1a>
   1304c:	2002      	movs	r0, #2
   1304e:	2d00      	cmp	r5, #0
   13050:	d1ef      	bne.n	13032 <__lesf2+0x36>
   13052:	e7e2      	b.n	1301a <__lesf2+0x1e>
   13054:	2d00      	cmp	r5, #0
   13056:	d1e7      	bne.n	13028 <__lesf2+0x2c>
   13058:	2000      	movs	r0, #0
   1305a:	2e00      	cmp	r6, #0
   1305c:	d0e9      	beq.n	13032 <__lesf2+0x36>
   1305e:	e7ed      	b.n	1303c <__lesf2+0x40>
   13060:	2d00      	cmp	r5, #0
   13062:	d1e9      	bne.n	13038 <__lesf2+0x3c>
   13064:	e7ea      	b.n	1303c <__lesf2+0x40>
   13066:	42a2      	cmp	r2, r4
   13068:	dc06      	bgt.n	13078 <__lesf2+0x7c>
   1306a:	dbdf      	blt.n	1302c <__lesf2+0x30>
   1306c:	42ae      	cmp	r6, r5
   1306e:	d803      	bhi.n	13078 <__lesf2+0x7c>
   13070:	2000      	movs	r0, #0
   13072:	42ae      	cmp	r6, r5
   13074:	d3da      	bcc.n	1302c <__lesf2+0x30>
   13076:	e7dc      	b.n	13032 <__lesf2+0x36>
   13078:	2001      	movs	r0, #1
   1307a:	4249      	negs	r1, r1
   1307c:	4308      	orrs	r0, r1
   1307e:	e7d8      	b.n	13032 <__lesf2+0x36>

00013080 <__aeabi_fmul>:
   13080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13082:	4657      	mov	r7, sl
   13084:	464e      	mov	r6, r9
   13086:	4645      	mov	r5, r8
   13088:	46de      	mov	lr, fp
   1308a:	b5e0      	push	{r5, r6, r7, lr}
   1308c:	0247      	lsls	r7, r0, #9
   1308e:	0046      	lsls	r6, r0, #1
   13090:	4688      	mov	r8, r1
   13092:	0a7f      	lsrs	r7, r7, #9
   13094:	0e36      	lsrs	r6, r6, #24
   13096:	0fc4      	lsrs	r4, r0, #31
   13098:	2e00      	cmp	r6, #0
   1309a:	d047      	beq.n	1312c <__aeabi_fmul+0xac>
   1309c:	2eff      	cmp	r6, #255	; 0xff
   1309e:	d024      	beq.n	130ea <__aeabi_fmul+0x6a>
   130a0:	00fb      	lsls	r3, r7, #3
   130a2:	2780      	movs	r7, #128	; 0x80
   130a4:	04ff      	lsls	r7, r7, #19
   130a6:	431f      	orrs	r7, r3
   130a8:	2300      	movs	r3, #0
   130aa:	4699      	mov	r9, r3
   130ac:	469a      	mov	sl, r3
   130ae:	3e7f      	subs	r6, #127	; 0x7f
   130b0:	4643      	mov	r3, r8
   130b2:	025d      	lsls	r5, r3, #9
   130b4:	0058      	lsls	r0, r3, #1
   130b6:	0fdb      	lsrs	r3, r3, #31
   130b8:	0a6d      	lsrs	r5, r5, #9
   130ba:	0e00      	lsrs	r0, r0, #24
   130bc:	4698      	mov	r8, r3
   130be:	d043      	beq.n	13148 <__aeabi_fmul+0xc8>
   130c0:	28ff      	cmp	r0, #255	; 0xff
   130c2:	d03b      	beq.n	1313c <__aeabi_fmul+0xbc>
   130c4:	00eb      	lsls	r3, r5, #3
   130c6:	2580      	movs	r5, #128	; 0x80
   130c8:	2200      	movs	r2, #0
   130ca:	04ed      	lsls	r5, r5, #19
   130cc:	431d      	orrs	r5, r3
   130ce:	387f      	subs	r0, #127	; 0x7f
   130d0:	1836      	adds	r6, r6, r0
   130d2:	1c73      	adds	r3, r6, #1
   130d4:	4641      	mov	r1, r8
   130d6:	469b      	mov	fp, r3
   130d8:	464b      	mov	r3, r9
   130da:	4061      	eors	r1, r4
   130dc:	4313      	orrs	r3, r2
   130de:	2b0f      	cmp	r3, #15
   130e0:	d864      	bhi.n	131ac <__aeabi_fmul+0x12c>
   130e2:	4875      	ldr	r0, [pc, #468]	; (132b8 <__aeabi_fmul+0x238>)
   130e4:	009b      	lsls	r3, r3, #2
   130e6:	58c3      	ldr	r3, [r0, r3]
   130e8:	469f      	mov	pc, r3
   130ea:	2f00      	cmp	r7, #0
   130ec:	d142      	bne.n	13174 <__aeabi_fmul+0xf4>
   130ee:	2308      	movs	r3, #8
   130f0:	4699      	mov	r9, r3
   130f2:	3b06      	subs	r3, #6
   130f4:	26ff      	movs	r6, #255	; 0xff
   130f6:	469a      	mov	sl, r3
   130f8:	e7da      	b.n	130b0 <__aeabi_fmul+0x30>
   130fa:	4641      	mov	r1, r8
   130fc:	2a02      	cmp	r2, #2
   130fe:	d028      	beq.n	13152 <__aeabi_fmul+0xd2>
   13100:	2a03      	cmp	r2, #3
   13102:	d100      	bne.n	13106 <__aeabi_fmul+0x86>
   13104:	e0ce      	b.n	132a4 <__aeabi_fmul+0x224>
   13106:	2a01      	cmp	r2, #1
   13108:	d000      	beq.n	1310c <__aeabi_fmul+0x8c>
   1310a:	e0ac      	b.n	13266 <__aeabi_fmul+0x1e6>
   1310c:	4011      	ands	r1, r2
   1310e:	2000      	movs	r0, #0
   13110:	2200      	movs	r2, #0
   13112:	b2cc      	uxtb	r4, r1
   13114:	0240      	lsls	r0, r0, #9
   13116:	05d2      	lsls	r2, r2, #23
   13118:	0a40      	lsrs	r0, r0, #9
   1311a:	07e4      	lsls	r4, r4, #31
   1311c:	4310      	orrs	r0, r2
   1311e:	4320      	orrs	r0, r4
   13120:	bc3c      	pop	{r2, r3, r4, r5}
   13122:	4690      	mov	r8, r2
   13124:	4699      	mov	r9, r3
   13126:	46a2      	mov	sl, r4
   13128:	46ab      	mov	fp, r5
   1312a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1312c:	2f00      	cmp	r7, #0
   1312e:	d115      	bne.n	1315c <__aeabi_fmul+0xdc>
   13130:	2304      	movs	r3, #4
   13132:	4699      	mov	r9, r3
   13134:	3b03      	subs	r3, #3
   13136:	2600      	movs	r6, #0
   13138:	469a      	mov	sl, r3
   1313a:	e7b9      	b.n	130b0 <__aeabi_fmul+0x30>
   1313c:	20ff      	movs	r0, #255	; 0xff
   1313e:	2202      	movs	r2, #2
   13140:	2d00      	cmp	r5, #0
   13142:	d0c5      	beq.n	130d0 <__aeabi_fmul+0x50>
   13144:	2203      	movs	r2, #3
   13146:	e7c3      	b.n	130d0 <__aeabi_fmul+0x50>
   13148:	2d00      	cmp	r5, #0
   1314a:	d119      	bne.n	13180 <__aeabi_fmul+0x100>
   1314c:	2000      	movs	r0, #0
   1314e:	2201      	movs	r2, #1
   13150:	e7be      	b.n	130d0 <__aeabi_fmul+0x50>
   13152:	2401      	movs	r4, #1
   13154:	22ff      	movs	r2, #255	; 0xff
   13156:	400c      	ands	r4, r1
   13158:	2000      	movs	r0, #0
   1315a:	e7db      	b.n	13114 <__aeabi_fmul+0x94>
   1315c:	0038      	movs	r0, r7
   1315e:	f002 f8a3 	bl	152a8 <__clzsi2>
   13162:	2676      	movs	r6, #118	; 0x76
   13164:	1f43      	subs	r3, r0, #5
   13166:	409f      	lsls	r7, r3
   13168:	2300      	movs	r3, #0
   1316a:	4276      	negs	r6, r6
   1316c:	1a36      	subs	r6, r6, r0
   1316e:	4699      	mov	r9, r3
   13170:	469a      	mov	sl, r3
   13172:	e79d      	b.n	130b0 <__aeabi_fmul+0x30>
   13174:	230c      	movs	r3, #12
   13176:	4699      	mov	r9, r3
   13178:	3b09      	subs	r3, #9
   1317a:	26ff      	movs	r6, #255	; 0xff
   1317c:	469a      	mov	sl, r3
   1317e:	e797      	b.n	130b0 <__aeabi_fmul+0x30>
   13180:	0028      	movs	r0, r5
   13182:	f002 f891 	bl	152a8 <__clzsi2>
   13186:	1f43      	subs	r3, r0, #5
   13188:	409d      	lsls	r5, r3
   1318a:	2376      	movs	r3, #118	; 0x76
   1318c:	425b      	negs	r3, r3
   1318e:	1a18      	subs	r0, r3, r0
   13190:	2200      	movs	r2, #0
   13192:	e79d      	b.n	130d0 <__aeabi_fmul+0x50>
   13194:	2080      	movs	r0, #128	; 0x80
   13196:	2400      	movs	r4, #0
   13198:	03c0      	lsls	r0, r0, #15
   1319a:	22ff      	movs	r2, #255	; 0xff
   1319c:	e7ba      	b.n	13114 <__aeabi_fmul+0x94>
   1319e:	003d      	movs	r5, r7
   131a0:	4652      	mov	r2, sl
   131a2:	e7ab      	b.n	130fc <__aeabi_fmul+0x7c>
   131a4:	003d      	movs	r5, r7
   131a6:	0021      	movs	r1, r4
   131a8:	4652      	mov	r2, sl
   131aa:	e7a7      	b.n	130fc <__aeabi_fmul+0x7c>
   131ac:	0c3b      	lsrs	r3, r7, #16
   131ae:	469c      	mov	ip, r3
   131b0:	042a      	lsls	r2, r5, #16
   131b2:	0c12      	lsrs	r2, r2, #16
   131b4:	0c2b      	lsrs	r3, r5, #16
   131b6:	0014      	movs	r4, r2
   131b8:	4660      	mov	r0, ip
   131ba:	4665      	mov	r5, ip
   131bc:	043f      	lsls	r7, r7, #16
   131be:	0c3f      	lsrs	r7, r7, #16
   131c0:	437c      	muls	r4, r7
   131c2:	4342      	muls	r2, r0
   131c4:	435d      	muls	r5, r3
   131c6:	437b      	muls	r3, r7
   131c8:	0c27      	lsrs	r7, r4, #16
   131ca:	189b      	adds	r3, r3, r2
   131cc:	18ff      	adds	r7, r7, r3
   131ce:	42ba      	cmp	r2, r7
   131d0:	d903      	bls.n	131da <__aeabi_fmul+0x15a>
   131d2:	2380      	movs	r3, #128	; 0x80
   131d4:	025b      	lsls	r3, r3, #9
   131d6:	469c      	mov	ip, r3
   131d8:	4465      	add	r5, ip
   131da:	0424      	lsls	r4, r4, #16
   131dc:	043a      	lsls	r2, r7, #16
   131de:	0c24      	lsrs	r4, r4, #16
   131e0:	1912      	adds	r2, r2, r4
   131e2:	0193      	lsls	r3, r2, #6
   131e4:	1e5c      	subs	r4, r3, #1
   131e6:	41a3      	sbcs	r3, r4
   131e8:	0c3f      	lsrs	r7, r7, #16
   131ea:	0e92      	lsrs	r2, r2, #26
   131ec:	197d      	adds	r5, r7, r5
   131ee:	431a      	orrs	r2, r3
   131f0:	01ad      	lsls	r5, r5, #6
   131f2:	4315      	orrs	r5, r2
   131f4:	012b      	lsls	r3, r5, #4
   131f6:	d504      	bpl.n	13202 <__aeabi_fmul+0x182>
   131f8:	2301      	movs	r3, #1
   131fa:	465e      	mov	r6, fp
   131fc:	086a      	lsrs	r2, r5, #1
   131fe:	401d      	ands	r5, r3
   13200:	4315      	orrs	r5, r2
   13202:	0032      	movs	r2, r6
   13204:	327f      	adds	r2, #127	; 0x7f
   13206:	2a00      	cmp	r2, #0
   13208:	dd25      	ble.n	13256 <__aeabi_fmul+0x1d6>
   1320a:	076b      	lsls	r3, r5, #29
   1320c:	d004      	beq.n	13218 <__aeabi_fmul+0x198>
   1320e:	230f      	movs	r3, #15
   13210:	402b      	ands	r3, r5
   13212:	2b04      	cmp	r3, #4
   13214:	d000      	beq.n	13218 <__aeabi_fmul+0x198>
   13216:	3504      	adds	r5, #4
   13218:	012b      	lsls	r3, r5, #4
   1321a:	d503      	bpl.n	13224 <__aeabi_fmul+0x1a4>
   1321c:	0032      	movs	r2, r6
   1321e:	4b27      	ldr	r3, [pc, #156]	; (132bc <__aeabi_fmul+0x23c>)
   13220:	3280      	adds	r2, #128	; 0x80
   13222:	401d      	ands	r5, r3
   13224:	2afe      	cmp	r2, #254	; 0xfe
   13226:	dc94      	bgt.n	13152 <__aeabi_fmul+0xd2>
   13228:	2401      	movs	r4, #1
   1322a:	01a8      	lsls	r0, r5, #6
   1322c:	0a40      	lsrs	r0, r0, #9
   1322e:	b2d2      	uxtb	r2, r2
   13230:	400c      	ands	r4, r1
   13232:	e76f      	b.n	13114 <__aeabi_fmul+0x94>
   13234:	2080      	movs	r0, #128	; 0x80
   13236:	03c0      	lsls	r0, r0, #15
   13238:	4207      	tst	r7, r0
   1323a:	d007      	beq.n	1324c <__aeabi_fmul+0x1cc>
   1323c:	4205      	tst	r5, r0
   1323e:	d105      	bne.n	1324c <__aeabi_fmul+0x1cc>
   13240:	4328      	orrs	r0, r5
   13242:	0240      	lsls	r0, r0, #9
   13244:	0a40      	lsrs	r0, r0, #9
   13246:	4644      	mov	r4, r8
   13248:	22ff      	movs	r2, #255	; 0xff
   1324a:	e763      	b.n	13114 <__aeabi_fmul+0x94>
   1324c:	4338      	orrs	r0, r7
   1324e:	0240      	lsls	r0, r0, #9
   13250:	0a40      	lsrs	r0, r0, #9
   13252:	22ff      	movs	r2, #255	; 0xff
   13254:	e75e      	b.n	13114 <__aeabi_fmul+0x94>
   13256:	2401      	movs	r4, #1
   13258:	1aa3      	subs	r3, r4, r2
   1325a:	2b1b      	cmp	r3, #27
   1325c:	dd05      	ble.n	1326a <__aeabi_fmul+0x1ea>
   1325e:	400c      	ands	r4, r1
   13260:	2200      	movs	r2, #0
   13262:	2000      	movs	r0, #0
   13264:	e756      	b.n	13114 <__aeabi_fmul+0x94>
   13266:	465e      	mov	r6, fp
   13268:	e7cb      	b.n	13202 <__aeabi_fmul+0x182>
   1326a:	002a      	movs	r2, r5
   1326c:	2020      	movs	r0, #32
   1326e:	40da      	lsrs	r2, r3
   13270:	1ac3      	subs	r3, r0, r3
   13272:	409d      	lsls	r5, r3
   13274:	002b      	movs	r3, r5
   13276:	1e5d      	subs	r5, r3, #1
   13278:	41ab      	sbcs	r3, r5
   1327a:	4313      	orrs	r3, r2
   1327c:	075a      	lsls	r2, r3, #29
   1327e:	d004      	beq.n	1328a <__aeabi_fmul+0x20a>
   13280:	220f      	movs	r2, #15
   13282:	401a      	ands	r2, r3
   13284:	2a04      	cmp	r2, #4
   13286:	d000      	beq.n	1328a <__aeabi_fmul+0x20a>
   13288:	3304      	adds	r3, #4
   1328a:	015a      	lsls	r2, r3, #5
   1328c:	d504      	bpl.n	13298 <__aeabi_fmul+0x218>
   1328e:	2401      	movs	r4, #1
   13290:	2201      	movs	r2, #1
   13292:	400c      	ands	r4, r1
   13294:	2000      	movs	r0, #0
   13296:	e73d      	b.n	13114 <__aeabi_fmul+0x94>
   13298:	2401      	movs	r4, #1
   1329a:	019b      	lsls	r3, r3, #6
   1329c:	0a58      	lsrs	r0, r3, #9
   1329e:	400c      	ands	r4, r1
   132a0:	2200      	movs	r2, #0
   132a2:	e737      	b.n	13114 <__aeabi_fmul+0x94>
   132a4:	2080      	movs	r0, #128	; 0x80
   132a6:	2401      	movs	r4, #1
   132a8:	03c0      	lsls	r0, r0, #15
   132aa:	4328      	orrs	r0, r5
   132ac:	0240      	lsls	r0, r0, #9
   132ae:	0a40      	lsrs	r0, r0, #9
   132b0:	400c      	ands	r4, r1
   132b2:	22ff      	movs	r2, #255	; 0xff
   132b4:	e72e      	b.n	13114 <__aeabi_fmul+0x94>
   132b6:	46c0      	nop			; (mov r8, r8)
   132b8:	00017c44 	.word	0x00017c44
   132bc:	f7ffffff 	.word	0xf7ffffff

000132c0 <__aeabi_fsub>:
   132c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   132c2:	464f      	mov	r7, r9
   132c4:	46d6      	mov	lr, sl
   132c6:	4646      	mov	r6, r8
   132c8:	0044      	lsls	r4, r0, #1
   132ca:	b5c0      	push	{r6, r7, lr}
   132cc:	0fc2      	lsrs	r2, r0, #31
   132ce:	0247      	lsls	r7, r0, #9
   132d0:	0248      	lsls	r0, r1, #9
   132d2:	0a40      	lsrs	r0, r0, #9
   132d4:	4684      	mov	ip, r0
   132d6:	4666      	mov	r6, ip
   132d8:	0a7b      	lsrs	r3, r7, #9
   132da:	0048      	lsls	r0, r1, #1
   132dc:	0fc9      	lsrs	r1, r1, #31
   132de:	469a      	mov	sl, r3
   132e0:	0e24      	lsrs	r4, r4, #24
   132e2:	0015      	movs	r5, r2
   132e4:	00db      	lsls	r3, r3, #3
   132e6:	0e00      	lsrs	r0, r0, #24
   132e8:	4689      	mov	r9, r1
   132ea:	00f6      	lsls	r6, r6, #3
   132ec:	28ff      	cmp	r0, #255	; 0xff
   132ee:	d100      	bne.n	132f2 <__aeabi_fsub+0x32>
   132f0:	e08f      	b.n	13412 <__aeabi_fsub+0x152>
   132f2:	2101      	movs	r1, #1
   132f4:	464f      	mov	r7, r9
   132f6:	404f      	eors	r7, r1
   132f8:	0039      	movs	r1, r7
   132fa:	4291      	cmp	r1, r2
   132fc:	d066      	beq.n	133cc <__aeabi_fsub+0x10c>
   132fe:	1a22      	subs	r2, r4, r0
   13300:	2a00      	cmp	r2, #0
   13302:	dc00      	bgt.n	13306 <__aeabi_fsub+0x46>
   13304:	e09d      	b.n	13442 <__aeabi_fsub+0x182>
   13306:	2800      	cmp	r0, #0
   13308:	d13d      	bne.n	13386 <__aeabi_fsub+0xc6>
   1330a:	2e00      	cmp	r6, #0
   1330c:	d100      	bne.n	13310 <__aeabi_fsub+0x50>
   1330e:	e08b      	b.n	13428 <__aeabi_fsub+0x168>
   13310:	1e51      	subs	r1, r2, #1
   13312:	2900      	cmp	r1, #0
   13314:	d000      	beq.n	13318 <__aeabi_fsub+0x58>
   13316:	e0b5      	b.n	13484 <__aeabi_fsub+0x1c4>
   13318:	2401      	movs	r4, #1
   1331a:	1b9b      	subs	r3, r3, r6
   1331c:	015a      	lsls	r2, r3, #5
   1331e:	d544      	bpl.n	133aa <__aeabi_fsub+0xea>
   13320:	019b      	lsls	r3, r3, #6
   13322:	099f      	lsrs	r7, r3, #6
   13324:	0038      	movs	r0, r7
   13326:	f001 ffbf 	bl	152a8 <__clzsi2>
   1332a:	3805      	subs	r0, #5
   1332c:	4087      	lsls	r7, r0
   1332e:	4284      	cmp	r4, r0
   13330:	dd00      	ble.n	13334 <__aeabi_fsub+0x74>
   13332:	e096      	b.n	13462 <__aeabi_fsub+0x1a2>
   13334:	1b04      	subs	r4, r0, r4
   13336:	003a      	movs	r2, r7
   13338:	2020      	movs	r0, #32
   1333a:	3401      	adds	r4, #1
   1333c:	40e2      	lsrs	r2, r4
   1333e:	1b04      	subs	r4, r0, r4
   13340:	40a7      	lsls	r7, r4
   13342:	003b      	movs	r3, r7
   13344:	1e5f      	subs	r7, r3, #1
   13346:	41bb      	sbcs	r3, r7
   13348:	2400      	movs	r4, #0
   1334a:	4313      	orrs	r3, r2
   1334c:	075a      	lsls	r2, r3, #29
   1334e:	d004      	beq.n	1335a <__aeabi_fsub+0x9a>
   13350:	220f      	movs	r2, #15
   13352:	401a      	ands	r2, r3
   13354:	2a04      	cmp	r2, #4
   13356:	d000      	beq.n	1335a <__aeabi_fsub+0x9a>
   13358:	3304      	adds	r3, #4
   1335a:	015a      	lsls	r2, r3, #5
   1335c:	d527      	bpl.n	133ae <__aeabi_fsub+0xee>
   1335e:	3401      	adds	r4, #1
   13360:	2cff      	cmp	r4, #255	; 0xff
   13362:	d100      	bne.n	13366 <__aeabi_fsub+0xa6>
   13364:	e079      	b.n	1345a <__aeabi_fsub+0x19a>
   13366:	2201      	movs	r2, #1
   13368:	019b      	lsls	r3, r3, #6
   1336a:	0a5b      	lsrs	r3, r3, #9
   1336c:	b2e4      	uxtb	r4, r4
   1336e:	402a      	ands	r2, r5
   13370:	025b      	lsls	r3, r3, #9
   13372:	05e4      	lsls	r4, r4, #23
   13374:	0a58      	lsrs	r0, r3, #9
   13376:	07d2      	lsls	r2, r2, #31
   13378:	4320      	orrs	r0, r4
   1337a:	4310      	orrs	r0, r2
   1337c:	bc1c      	pop	{r2, r3, r4}
   1337e:	4690      	mov	r8, r2
   13380:	4699      	mov	r9, r3
   13382:	46a2      	mov	sl, r4
   13384:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13386:	2cff      	cmp	r4, #255	; 0xff
   13388:	d0e0      	beq.n	1334c <__aeabi_fsub+0x8c>
   1338a:	2180      	movs	r1, #128	; 0x80
   1338c:	04c9      	lsls	r1, r1, #19
   1338e:	430e      	orrs	r6, r1
   13390:	2a1b      	cmp	r2, #27
   13392:	dc7b      	bgt.n	1348c <__aeabi_fsub+0x1cc>
   13394:	0031      	movs	r1, r6
   13396:	2020      	movs	r0, #32
   13398:	40d1      	lsrs	r1, r2
   1339a:	1a82      	subs	r2, r0, r2
   1339c:	4096      	lsls	r6, r2
   1339e:	1e72      	subs	r2, r6, #1
   133a0:	4196      	sbcs	r6, r2
   133a2:	430e      	orrs	r6, r1
   133a4:	1b9b      	subs	r3, r3, r6
   133a6:	015a      	lsls	r2, r3, #5
   133a8:	d4ba      	bmi.n	13320 <__aeabi_fsub+0x60>
   133aa:	075a      	lsls	r2, r3, #29
   133ac:	d1d0      	bne.n	13350 <__aeabi_fsub+0x90>
   133ae:	2201      	movs	r2, #1
   133b0:	08df      	lsrs	r7, r3, #3
   133b2:	402a      	ands	r2, r5
   133b4:	2cff      	cmp	r4, #255	; 0xff
   133b6:	d133      	bne.n	13420 <__aeabi_fsub+0x160>
   133b8:	2f00      	cmp	r7, #0
   133ba:	d100      	bne.n	133be <__aeabi_fsub+0xfe>
   133bc:	e0a8      	b.n	13510 <__aeabi_fsub+0x250>
   133be:	2380      	movs	r3, #128	; 0x80
   133c0:	03db      	lsls	r3, r3, #15
   133c2:	433b      	orrs	r3, r7
   133c4:	025b      	lsls	r3, r3, #9
   133c6:	0a5b      	lsrs	r3, r3, #9
   133c8:	24ff      	movs	r4, #255	; 0xff
   133ca:	e7d1      	b.n	13370 <__aeabi_fsub+0xb0>
   133cc:	1a21      	subs	r1, r4, r0
   133ce:	2900      	cmp	r1, #0
   133d0:	dd4c      	ble.n	1346c <__aeabi_fsub+0x1ac>
   133d2:	2800      	cmp	r0, #0
   133d4:	d02a      	beq.n	1342c <__aeabi_fsub+0x16c>
   133d6:	2cff      	cmp	r4, #255	; 0xff
   133d8:	d0b8      	beq.n	1334c <__aeabi_fsub+0x8c>
   133da:	2080      	movs	r0, #128	; 0x80
   133dc:	04c0      	lsls	r0, r0, #19
   133de:	4306      	orrs	r6, r0
   133e0:	291b      	cmp	r1, #27
   133e2:	dd00      	ble.n	133e6 <__aeabi_fsub+0x126>
   133e4:	e0af      	b.n	13546 <__aeabi_fsub+0x286>
   133e6:	0030      	movs	r0, r6
   133e8:	2720      	movs	r7, #32
   133ea:	40c8      	lsrs	r0, r1
   133ec:	1a79      	subs	r1, r7, r1
   133ee:	408e      	lsls	r6, r1
   133f0:	1e71      	subs	r1, r6, #1
   133f2:	418e      	sbcs	r6, r1
   133f4:	4306      	orrs	r6, r0
   133f6:	199b      	adds	r3, r3, r6
   133f8:	0159      	lsls	r1, r3, #5
   133fa:	d5d6      	bpl.n	133aa <__aeabi_fsub+0xea>
   133fc:	3401      	adds	r4, #1
   133fe:	2cff      	cmp	r4, #255	; 0xff
   13400:	d100      	bne.n	13404 <__aeabi_fsub+0x144>
   13402:	e085      	b.n	13510 <__aeabi_fsub+0x250>
   13404:	2201      	movs	r2, #1
   13406:	497a      	ldr	r1, [pc, #488]	; (135f0 <__aeabi_fsub+0x330>)
   13408:	401a      	ands	r2, r3
   1340a:	085b      	lsrs	r3, r3, #1
   1340c:	400b      	ands	r3, r1
   1340e:	4313      	orrs	r3, r2
   13410:	e79c      	b.n	1334c <__aeabi_fsub+0x8c>
   13412:	2e00      	cmp	r6, #0
   13414:	d000      	beq.n	13418 <__aeabi_fsub+0x158>
   13416:	e770      	b.n	132fa <__aeabi_fsub+0x3a>
   13418:	e76b      	b.n	132f2 <__aeabi_fsub+0x32>
   1341a:	1e3b      	subs	r3, r7, #0
   1341c:	d1c5      	bne.n	133aa <__aeabi_fsub+0xea>
   1341e:	2200      	movs	r2, #0
   13420:	027b      	lsls	r3, r7, #9
   13422:	0a5b      	lsrs	r3, r3, #9
   13424:	b2e4      	uxtb	r4, r4
   13426:	e7a3      	b.n	13370 <__aeabi_fsub+0xb0>
   13428:	0014      	movs	r4, r2
   1342a:	e78f      	b.n	1334c <__aeabi_fsub+0x8c>
   1342c:	2e00      	cmp	r6, #0
   1342e:	d04d      	beq.n	134cc <__aeabi_fsub+0x20c>
   13430:	1e48      	subs	r0, r1, #1
   13432:	2800      	cmp	r0, #0
   13434:	d157      	bne.n	134e6 <__aeabi_fsub+0x226>
   13436:	199b      	adds	r3, r3, r6
   13438:	2401      	movs	r4, #1
   1343a:	015a      	lsls	r2, r3, #5
   1343c:	d5b5      	bpl.n	133aa <__aeabi_fsub+0xea>
   1343e:	2402      	movs	r4, #2
   13440:	e7e0      	b.n	13404 <__aeabi_fsub+0x144>
   13442:	2a00      	cmp	r2, #0
   13444:	d125      	bne.n	13492 <__aeabi_fsub+0x1d2>
   13446:	1c62      	adds	r2, r4, #1
   13448:	b2d2      	uxtb	r2, r2
   1344a:	2a01      	cmp	r2, #1
   1344c:	dd72      	ble.n	13534 <__aeabi_fsub+0x274>
   1344e:	1b9f      	subs	r7, r3, r6
   13450:	017a      	lsls	r2, r7, #5
   13452:	d535      	bpl.n	134c0 <__aeabi_fsub+0x200>
   13454:	1af7      	subs	r7, r6, r3
   13456:	000d      	movs	r5, r1
   13458:	e764      	b.n	13324 <__aeabi_fsub+0x64>
   1345a:	2201      	movs	r2, #1
   1345c:	2300      	movs	r3, #0
   1345e:	402a      	ands	r2, r5
   13460:	e786      	b.n	13370 <__aeabi_fsub+0xb0>
   13462:	003b      	movs	r3, r7
   13464:	4a63      	ldr	r2, [pc, #396]	; (135f4 <__aeabi_fsub+0x334>)
   13466:	1a24      	subs	r4, r4, r0
   13468:	4013      	ands	r3, r2
   1346a:	e76f      	b.n	1334c <__aeabi_fsub+0x8c>
   1346c:	2900      	cmp	r1, #0
   1346e:	d16c      	bne.n	1354a <__aeabi_fsub+0x28a>
   13470:	1c61      	adds	r1, r4, #1
   13472:	b2c8      	uxtb	r0, r1
   13474:	2801      	cmp	r0, #1
   13476:	dd4e      	ble.n	13516 <__aeabi_fsub+0x256>
   13478:	29ff      	cmp	r1, #255	; 0xff
   1347a:	d049      	beq.n	13510 <__aeabi_fsub+0x250>
   1347c:	199b      	adds	r3, r3, r6
   1347e:	085b      	lsrs	r3, r3, #1
   13480:	000c      	movs	r4, r1
   13482:	e763      	b.n	1334c <__aeabi_fsub+0x8c>
   13484:	2aff      	cmp	r2, #255	; 0xff
   13486:	d041      	beq.n	1350c <__aeabi_fsub+0x24c>
   13488:	000a      	movs	r2, r1
   1348a:	e781      	b.n	13390 <__aeabi_fsub+0xd0>
   1348c:	2601      	movs	r6, #1
   1348e:	1b9b      	subs	r3, r3, r6
   13490:	e789      	b.n	133a6 <__aeabi_fsub+0xe6>
   13492:	2c00      	cmp	r4, #0
   13494:	d01c      	beq.n	134d0 <__aeabi_fsub+0x210>
   13496:	28ff      	cmp	r0, #255	; 0xff
   13498:	d021      	beq.n	134de <__aeabi_fsub+0x21e>
   1349a:	2480      	movs	r4, #128	; 0x80
   1349c:	04e4      	lsls	r4, r4, #19
   1349e:	4252      	negs	r2, r2
   134a0:	4323      	orrs	r3, r4
   134a2:	2a1b      	cmp	r2, #27
   134a4:	dd00      	ble.n	134a8 <__aeabi_fsub+0x1e8>
   134a6:	e096      	b.n	135d6 <__aeabi_fsub+0x316>
   134a8:	001c      	movs	r4, r3
   134aa:	2520      	movs	r5, #32
   134ac:	40d4      	lsrs	r4, r2
   134ae:	1aaa      	subs	r2, r5, r2
   134b0:	4093      	lsls	r3, r2
   134b2:	1e5a      	subs	r2, r3, #1
   134b4:	4193      	sbcs	r3, r2
   134b6:	4323      	orrs	r3, r4
   134b8:	1af3      	subs	r3, r6, r3
   134ba:	0004      	movs	r4, r0
   134bc:	000d      	movs	r5, r1
   134be:	e72d      	b.n	1331c <__aeabi_fsub+0x5c>
   134c0:	2f00      	cmp	r7, #0
   134c2:	d000      	beq.n	134c6 <__aeabi_fsub+0x206>
   134c4:	e72e      	b.n	13324 <__aeabi_fsub+0x64>
   134c6:	2200      	movs	r2, #0
   134c8:	2400      	movs	r4, #0
   134ca:	e7a9      	b.n	13420 <__aeabi_fsub+0x160>
   134cc:	000c      	movs	r4, r1
   134ce:	e73d      	b.n	1334c <__aeabi_fsub+0x8c>
   134d0:	2b00      	cmp	r3, #0
   134d2:	d058      	beq.n	13586 <__aeabi_fsub+0x2c6>
   134d4:	43d2      	mvns	r2, r2
   134d6:	2a00      	cmp	r2, #0
   134d8:	d0ee      	beq.n	134b8 <__aeabi_fsub+0x1f8>
   134da:	28ff      	cmp	r0, #255	; 0xff
   134dc:	d1e1      	bne.n	134a2 <__aeabi_fsub+0x1e2>
   134de:	0033      	movs	r3, r6
   134e0:	24ff      	movs	r4, #255	; 0xff
   134e2:	000d      	movs	r5, r1
   134e4:	e732      	b.n	1334c <__aeabi_fsub+0x8c>
   134e6:	29ff      	cmp	r1, #255	; 0xff
   134e8:	d010      	beq.n	1350c <__aeabi_fsub+0x24c>
   134ea:	0001      	movs	r1, r0
   134ec:	e778      	b.n	133e0 <__aeabi_fsub+0x120>
   134ee:	2b00      	cmp	r3, #0
   134f0:	d06e      	beq.n	135d0 <__aeabi_fsub+0x310>
   134f2:	24ff      	movs	r4, #255	; 0xff
   134f4:	2e00      	cmp	r6, #0
   134f6:	d100      	bne.n	134fa <__aeabi_fsub+0x23a>
   134f8:	e728      	b.n	1334c <__aeabi_fsub+0x8c>
   134fa:	2280      	movs	r2, #128	; 0x80
   134fc:	4651      	mov	r1, sl
   134fe:	03d2      	lsls	r2, r2, #15
   13500:	4211      	tst	r1, r2
   13502:	d003      	beq.n	1350c <__aeabi_fsub+0x24c>
   13504:	4661      	mov	r1, ip
   13506:	4211      	tst	r1, r2
   13508:	d100      	bne.n	1350c <__aeabi_fsub+0x24c>
   1350a:	0033      	movs	r3, r6
   1350c:	24ff      	movs	r4, #255	; 0xff
   1350e:	e71d      	b.n	1334c <__aeabi_fsub+0x8c>
   13510:	24ff      	movs	r4, #255	; 0xff
   13512:	2300      	movs	r3, #0
   13514:	e72c      	b.n	13370 <__aeabi_fsub+0xb0>
   13516:	2c00      	cmp	r4, #0
   13518:	d1e9      	bne.n	134ee <__aeabi_fsub+0x22e>
   1351a:	2b00      	cmp	r3, #0
   1351c:	d063      	beq.n	135e6 <__aeabi_fsub+0x326>
   1351e:	2e00      	cmp	r6, #0
   13520:	d100      	bne.n	13524 <__aeabi_fsub+0x264>
   13522:	e713      	b.n	1334c <__aeabi_fsub+0x8c>
   13524:	199b      	adds	r3, r3, r6
   13526:	015a      	lsls	r2, r3, #5
   13528:	d400      	bmi.n	1352c <__aeabi_fsub+0x26c>
   1352a:	e73e      	b.n	133aa <__aeabi_fsub+0xea>
   1352c:	4a31      	ldr	r2, [pc, #196]	; (135f4 <__aeabi_fsub+0x334>)
   1352e:	000c      	movs	r4, r1
   13530:	4013      	ands	r3, r2
   13532:	e70b      	b.n	1334c <__aeabi_fsub+0x8c>
   13534:	2c00      	cmp	r4, #0
   13536:	d11e      	bne.n	13576 <__aeabi_fsub+0x2b6>
   13538:	2b00      	cmp	r3, #0
   1353a:	d12f      	bne.n	1359c <__aeabi_fsub+0x2dc>
   1353c:	2e00      	cmp	r6, #0
   1353e:	d04f      	beq.n	135e0 <__aeabi_fsub+0x320>
   13540:	0033      	movs	r3, r6
   13542:	000d      	movs	r5, r1
   13544:	e702      	b.n	1334c <__aeabi_fsub+0x8c>
   13546:	2601      	movs	r6, #1
   13548:	e755      	b.n	133f6 <__aeabi_fsub+0x136>
   1354a:	2c00      	cmp	r4, #0
   1354c:	d11f      	bne.n	1358e <__aeabi_fsub+0x2ce>
   1354e:	2b00      	cmp	r3, #0
   13550:	d043      	beq.n	135da <__aeabi_fsub+0x31a>
   13552:	43c9      	mvns	r1, r1
   13554:	2900      	cmp	r1, #0
   13556:	d00b      	beq.n	13570 <__aeabi_fsub+0x2b0>
   13558:	28ff      	cmp	r0, #255	; 0xff
   1355a:	d039      	beq.n	135d0 <__aeabi_fsub+0x310>
   1355c:	291b      	cmp	r1, #27
   1355e:	dc44      	bgt.n	135ea <__aeabi_fsub+0x32a>
   13560:	001c      	movs	r4, r3
   13562:	2720      	movs	r7, #32
   13564:	40cc      	lsrs	r4, r1
   13566:	1a79      	subs	r1, r7, r1
   13568:	408b      	lsls	r3, r1
   1356a:	1e59      	subs	r1, r3, #1
   1356c:	418b      	sbcs	r3, r1
   1356e:	4323      	orrs	r3, r4
   13570:	199b      	adds	r3, r3, r6
   13572:	0004      	movs	r4, r0
   13574:	e740      	b.n	133f8 <__aeabi_fsub+0x138>
   13576:	2b00      	cmp	r3, #0
   13578:	d11a      	bne.n	135b0 <__aeabi_fsub+0x2f0>
   1357a:	2e00      	cmp	r6, #0
   1357c:	d124      	bne.n	135c8 <__aeabi_fsub+0x308>
   1357e:	2780      	movs	r7, #128	; 0x80
   13580:	2200      	movs	r2, #0
   13582:	03ff      	lsls	r7, r7, #15
   13584:	e71b      	b.n	133be <__aeabi_fsub+0xfe>
   13586:	0033      	movs	r3, r6
   13588:	0004      	movs	r4, r0
   1358a:	000d      	movs	r5, r1
   1358c:	e6de      	b.n	1334c <__aeabi_fsub+0x8c>
   1358e:	28ff      	cmp	r0, #255	; 0xff
   13590:	d01e      	beq.n	135d0 <__aeabi_fsub+0x310>
   13592:	2480      	movs	r4, #128	; 0x80
   13594:	04e4      	lsls	r4, r4, #19
   13596:	4249      	negs	r1, r1
   13598:	4323      	orrs	r3, r4
   1359a:	e7df      	b.n	1355c <__aeabi_fsub+0x29c>
   1359c:	2e00      	cmp	r6, #0
   1359e:	d100      	bne.n	135a2 <__aeabi_fsub+0x2e2>
   135a0:	e6d4      	b.n	1334c <__aeabi_fsub+0x8c>
   135a2:	1b9f      	subs	r7, r3, r6
   135a4:	017a      	lsls	r2, r7, #5
   135a6:	d400      	bmi.n	135aa <__aeabi_fsub+0x2ea>
   135a8:	e737      	b.n	1341a <__aeabi_fsub+0x15a>
   135aa:	1af3      	subs	r3, r6, r3
   135ac:	000d      	movs	r5, r1
   135ae:	e6cd      	b.n	1334c <__aeabi_fsub+0x8c>
   135b0:	24ff      	movs	r4, #255	; 0xff
   135b2:	2e00      	cmp	r6, #0
   135b4:	d100      	bne.n	135b8 <__aeabi_fsub+0x2f8>
   135b6:	e6c9      	b.n	1334c <__aeabi_fsub+0x8c>
   135b8:	2280      	movs	r2, #128	; 0x80
   135ba:	4650      	mov	r0, sl
   135bc:	03d2      	lsls	r2, r2, #15
   135be:	4210      	tst	r0, r2
   135c0:	d0a4      	beq.n	1350c <__aeabi_fsub+0x24c>
   135c2:	4660      	mov	r0, ip
   135c4:	4210      	tst	r0, r2
   135c6:	d1a1      	bne.n	1350c <__aeabi_fsub+0x24c>
   135c8:	0033      	movs	r3, r6
   135ca:	000d      	movs	r5, r1
   135cc:	24ff      	movs	r4, #255	; 0xff
   135ce:	e6bd      	b.n	1334c <__aeabi_fsub+0x8c>
   135d0:	0033      	movs	r3, r6
   135d2:	24ff      	movs	r4, #255	; 0xff
   135d4:	e6ba      	b.n	1334c <__aeabi_fsub+0x8c>
   135d6:	2301      	movs	r3, #1
   135d8:	e76e      	b.n	134b8 <__aeabi_fsub+0x1f8>
   135da:	0033      	movs	r3, r6
   135dc:	0004      	movs	r4, r0
   135de:	e6b5      	b.n	1334c <__aeabi_fsub+0x8c>
   135e0:	2700      	movs	r7, #0
   135e2:	2200      	movs	r2, #0
   135e4:	e71c      	b.n	13420 <__aeabi_fsub+0x160>
   135e6:	0033      	movs	r3, r6
   135e8:	e6b0      	b.n	1334c <__aeabi_fsub+0x8c>
   135ea:	2301      	movs	r3, #1
   135ec:	e7c0      	b.n	13570 <__aeabi_fsub+0x2b0>
   135ee:	46c0      	nop			; (mov r8, r8)
   135f0:	7dffffff 	.word	0x7dffffff
   135f4:	fbffffff 	.word	0xfbffffff

000135f8 <__aeabi_f2iz>:
   135f8:	0241      	lsls	r1, r0, #9
   135fa:	0043      	lsls	r3, r0, #1
   135fc:	0fc2      	lsrs	r2, r0, #31
   135fe:	0a49      	lsrs	r1, r1, #9
   13600:	0e1b      	lsrs	r3, r3, #24
   13602:	2000      	movs	r0, #0
   13604:	2b7e      	cmp	r3, #126	; 0x7e
   13606:	dd0d      	ble.n	13624 <__aeabi_f2iz+0x2c>
   13608:	2b9d      	cmp	r3, #157	; 0x9d
   1360a:	dc0c      	bgt.n	13626 <__aeabi_f2iz+0x2e>
   1360c:	2080      	movs	r0, #128	; 0x80
   1360e:	0400      	lsls	r0, r0, #16
   13610:	4301      	orrs	r1, r0
   13612:	2b95      	cmp	r3, #149	; 0x95
   13614:	dc0a      	bgt.n	1362c <__aeabi_f2iz+0x34>
   13616:	2096      	movs	r0, #150	; 0x96
   13618:	1ac3      	subs	r3, r0, r3
   1361a:	40d9      	lsrs	r1, r3
   1361c:	4248      	negs	r0, r1
   1361e:	2a00      	cmp	r2, #0
   13620:	d100      	bne.n	13624 <__aeabi_f2iz+0x2c>
   13622:	0008      	movs	r0, r1
   13624:	4770      	bx	lr
   13626:	4b03      	ldr	r3, [pc, #12]	; (13634 <__aeabi_f2iz+0x3c>)
   13628:	18d0      	adds	r0, r2, r3
   1362a:	e7fb      	b.n	13624 <__aeabi_f2iz+0x2c>
   1362c:	3b96      	subs	r3, #150	; 0x96
   1362e:	4099      	lsls	r1, r3
   13630:	e7f4      	b.n	1361c <__aeabi_f2iz+0x24>
   13632:	46c0      	nop			; (mov r8, r8)
   13634:	7fffffff 	.word	0x7fffffff

00013638 <__aeabi_i2f>:
   13638:	b570      	push	{r4, r5, r6, lr}
   1363a:	2800      	cmp	r0, #0
   1363c:	d030      	beq.n	136a0 <__aeabi_i2f+0x68>
   1363e:	17c3      	asrs	r3, r0, #31
   13640:	18c4      	adds	r4, r0, r3
   13642:	405c      	eors	r4, r3
   13644:	0fc5      	lsrs	r5, r0, #31
   13646:	0020      	movs	r0, r4
   13648:	f001 fe2e 	bl	152a8 <__clzsi2>
   1364c:	239e      	movs	r3, #158	; 0x9e
   1364e:	1a1b      	subs	r3, r3, r0
   13650:	2b96      	cmp	r3, #150	; 0x96
   13652:	dc0d      	bgt.n	13670 <__aeabi_i2f+0x38>
   13654:	2296      	movs	r2, #150	; 0x96
   13656:	1ad2      	subs	r2, r2, r3
   13658:	4094      	lsls	r4, r2
   1365a:	002a      	movs	r2, r5
   1365c:	0264      	lsls	r4, r4, #9
   1365e:	0a64      	lsrs	r4, r4, #9
   13660:	b2db      	uxtb	r3, r3
   13662:	0264      	lsls	r4, r4, #9
   13664:	05db      	lsls	r3, r3, #23
   13666:	0a60      	lsrs	r0, r4, #9
   13668:	07d2      	lsls	r2, r2, #31
   1366a:	4318      	orrs	r0, r3
   1366c:	4310      	orrs	r0, r2
   1366e:	bd70      	pop	{r4, r5, r6, pc}
   13670:	2b99      	cmp	r3, #153	; 0x99
   13672:	dc19      	bgt.n	136a8 <__aeabi_i2f+0x70>
   13674:	2299      	movs	r2, #153	; 0x99
   13676:	1ad2      	subs	r2, r2, r3
   13678:	2a00      	cmp	r2, #0
   1367a:	dd29      	ble.n	136d0 <__aeabi_i2f+0x98>
   1367c:	4094      	lsls	r4, r2
   1367e:	0022      	movs	r2, r4
   13680:	4c14      	ldr	r4, [pc, #80]	; (136d4 <__aeabi_i2f+0x9c>)
   13682:	4014      	ands	r4, r2
   13684:	0751      	lsls	r1, r2, #29
   13686:	d004      	beq.n	13692 <__aeabi_i2f+0x5a>
   13688:	210f      	movs	r1, #15
   1368a:	400a      	ands	r2, r1
   1368c:	2a04      	cmp	r2, #4
   1368e:	d000      	beq.n	13692 <__aeabi_i2f+0x5a>
   13690:	3404      	adds	r4, #4
   13692:	0162      	lsls	r2, r4, #5
   13694:	d413      	bmi.n	136be <__aeabi_i2f+0x86>
   13696:	01a4      	lsls	r4, r4, #6
   13698:	0a64      	lsrs	r4, r4, #9
   1369a:	b2db      	uxtb	r3, r3
   1369c:	002a      	movs	r2, r5
   1369e:	e7e0      	b.n	13662 <__aeabi_i2f+0x2a>
   136a0:	2200      	movs	r2, #0
   136a2:	2300      	movs	r3, #0
   136a4:	2400      	movs	r4, #0
   136a6:	e7dc      	b.n	13662 <__aeabi_i2f+0x2a>
   136a8:	2205      	movs	r2, #5
   136aa:	0021      	movs	r1, r4
   136ac:	1a12      	subs	r2, r2, r0
   136ae:	40d1      	lsrs	r1, r2
   136b0:	22b9      	movs	r2, #185	; 0xb9
   136b2:	1ad2      	subs	r2, r2, r3
   136b4:	4094      	lsls	r4, r2
   136b6:	1e62      	subs	r2, r4, #1
   136b8:	4194      	sbcs	r4, r2
   136ba:	430c      	orrs	r4, r1
   136bc:	e7da      	b.n	13674 <__aeabi_i2f+0x3c>
   136be:	4b05      	ldr	r3, [pc, #20]	; (136d4 <__aeabi_i2f+0x9c>)
   136c0:	002a      	movs	r2, r5
   136c2:	401c      	ands	r4, r3
   136c4:	239f      	movs	r3, #159	; 0x9f
   136c6:	01a4      	lsls	r4, r4, #6
   136c8:	1a1b      	subs	r3, r3, r0
   136ca:	0a64      	lsrs	r4, r4, #9
   136cc:	b2db      	uxtb	r3, r3
   136ce:	e7c8      	b.n	13662 <__aeabi_i2f+0x2a>
   136d0:	0022      	movs	r2, r4
   136d2:	e7d5      	b.n	13680 <__aeabi_i2f+0x48>
   136d4:	fbffffff 	.word	0xfbffffff

000136d8 <__aeabi_ui2f>:
   136d8:	b510      	push	{r4, lr}
   136da:	1e04      	subs	r4, r0, #0
   136dc:	d027      	beq.n	1372e <__aeabi_ui2f+0x56>
   136de:	f001 fde3 	bl	152a8 <__clzsi2>
   136e2:	239e      	movs	r3, #158	; 0x9e
   136e4:	1a1b      	subs	r3, r3, r0
   136e6:	2b96      	cmp	r3, #150	; 0x96
   136e8:	dc0a      	bgt.n	13700 <__aeabi_ui2f+0x28>
   136ea:	2296      	movs	r2, #150	; 0x96
   136ec:	1ad2      	subs	r2, r2, r3
   136ee:	4094      	lsls	r4, r2
   136f0:	0264      	lsls	r4, r4, #9
   136f2:	0a64      	lsrs	r4, r4, #9
   136f4:	b2db      	uxtb	r3, r3
   136f6:	0264      	lsls	r4, r4, #9
   136f8:	05db      	lsls	r3, r3, #23
   136fa:	0a60      	lsrs	r0, r4, #9
   136fc:	4318      	orrs	r0, r3
   136fe:	bd10      	pop	{r4, pc}
   13700:	2b99      	cmp	r3, #153	; 0x99
   13702:	dc17      	bgt.n	13734 <__aeabi_ui2f+0x5c>
   13704:	2299      	movs	r2, #153	; 0x99
   13706:	1ad2      	subs	r2, r2, r3
   13708:	2a00      	cmp	r2, #0
   1370a:	dd27      	ble.n	1375c <__aeabi_ui2f+0x84>
   1370c:	4094      	lsls	r4, r2
   1370e:	0022      	movs	r2, r4
   13710:	4c13      	ldr	r4, [pc, #76]	; (13760 <__aeabi_ui2f+0x88>)
   13712:	4014      	ands	r4, r2
   13714:	0751      	lsls	r1, r2, #29
   13716:	d004      	beq.n	13722 <__aeabi_ui2f+0x4a>
   13718:	210f      	movs	r1, #15
   1371a:	400a      	ands	r2, r1
   1371c:	2a04      	cmp	r2, #4
   1371e:	d000      	beq.n	13722 <__aeabi_ui2f+0x4a>
   13720:	3404      	adds	r4, #4
   13722:	0162      	lsls	r2, r4, #5
   13724:	d412      	bmi.n	1374c <__aeabi_ui2f+0x74>
   13726:	01a4      	lsls	r4, r4, #6
   13728:	0a64      	lsrs	r4, r4, #9
   1372a:	b2db      	uxtb	r3, r3
   1372c:	e7e3      	b.n	136f6 <__aeabi_ui2f+0x1e>
   1372e:	2300      	movs	r3, #0
   13730:	2400      	movs	r4, #0
   13732:	e7e0      	b.n	136f6 <__aeabi_ui2f+0x1e>
   13734:	22b9      	movs	r2, #185	; 0xb9
   13736:	0021      	movs	r1, r4
   13738:	1ad2      	subs	r2, r2, r3
   1373a:	4091      	lsls	r1, r2
   1373c:	000a      	movs	r2, r1
   1373e:	1e51      	subs	r1, r2, #1
   13740:	418a      	sbcs	r2, r1
   13742:	2105      	movs	r1, #5
   13744:	1a09      	subs	r1, r1, r0
   13746:	40cc      	lsrs	r4, r1
   13748:	4314      	orrs	r4, r2
   1374a:	e7db      	b.n	13704 <__aeabi_ui2f+0x2c>
   1374c:	4b04      	ldr	r3, [pc, #16]	; (13760 <__aeabi_ui2f+0x88>)
   1374e:	401c      	ands	r4, r3
   13750:	239f      	movs	r3, #159	; 0x9f
   13752:	01a4      	lsls	r4, r4, #6
   13754:	1a1b      	subs	r3, r3, r0
   13756:	0a64      	lsrs	r4, r4, #9
   13758:	b2db      	uxtb	r3, r3
   1375a:	e7cc      	b.n	136f6 <__aeabi_ui2f+0x1e>
   1375c:	0022      	movs	r2, r4
   1375e:	e7d7      	b.n	13710 <__aeabi_ui2f+0x38>
   13760:	fbffffff 	.word	0xfbffffff

00013764 <__aeabi_dadd>:
   13764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13766:	4645      	mov	r5, r8
   13768:	46de      	mov	lr, fp
   1376a:	4657      	mov	r7, sl
   1376c:	464e      	mov	r6, r9
   1376e:	030c      	lsls	r4, r1, #12
   13770:	b5e0      	push	{r5, r6, r7, lr}
   13772:	004e      	lsls	r6, r1, #1
   13774:	0fc9      	lsrs	r1, r1, #31
   13776:	4688      	mov	r8, r1
   13778:	000d      	movs	r5, r1
   1377a:	0a61      	lsrs	r1, r4, #9
   1377c:	0f44      	lsrs	r4, r0, #29
   1377e:	430c      	orrs	r4, r1
   13780:	00c7      	lsls	r7, r0, #3
   13782:	0319      	lsls	r1, r3, #12
   13784:	0058      	lsls	r0, r3, #1
   13786:	0fdb      	lsrs	r3, r3, #31
   13788:	469b      	mov	fp, r3
   1378a:	0a4b      	lsrs	r3, r1, #9
   1378c:	0f51      	lsrs	r1, r2, #29
   1378e:	430b      	orrs	r3, r1
   13790:	0d76      	lsrs	r6, r6, #21
   13792:	0d40      	lsrs	r0, r0, #21
   13794:	0019      	movs	r1, r3
   13796:	00d2      	lsls	r2, r2, #3
   13798:	45d8      	cmp	r8, fp
   1379a:	d100      	bne.n	1379e <__aeabi_dadd+0x3a>
   1379c:	e0ae      	b.n	138fc <__aeabi_dadd+0x198>
   1379e:	1a35      	subs	r5, r6, r0
   137a0:	2d00      	cmp	r5, #0
   137a2:	dc00      	bgt.n	137a6 <__aeabi_dadd+0x42>
   137a4:	e0f6      	b.n	13994 <__aeabi_dadd+0x230>
   137a6:	2800      	cmp	r0, #0
   137a8:	d10f      	bne.n	137ca <__aeabi_dadd+0x66>
   137aa:	4313      	orrs	r3, r2
   137ac:	d100      	bne.n	137b0 <__aeabi_dadd+0x4c>
   137ae:	e0db      	b.n	13968 <__aeabi_dadd+0x204>
   137b0:	1e6b      	subs	r3, r5, #1
   137b2:	2b00      	cmp	r3, #0
   137b4:	d000      	beq.n	137b8 <__aeabi_dadd+0x54>
   137b6:	e137      	b.n	13a28 <__aeabi_dadd+0x2c4>
   137b8:	1aba      	subs	r2, r7, r2
   137ba:	4297      	cmp	r7, r2
   137bc:	41bf      	sbcs	r7, r7
   137be:	1a64      	subs	r4, r4, r1
   137c0:	427f      	negs	r7, r7
   137c2:	1be4      	subs	r4, r4, r7
   137c4:	2601      	movs	r6, #1
   137c6:	0017      	movs	r7, r2
   137c8:	e024      	b.n	13814 <__aeabi_dadd+0xb0>
   137ca:	4bc6      	ldr	r3, [pc, #792]	; (13ae4 <__aeabi_dadd+0x380>)
   137cc:	429e      	cmp	r6, r3
   137ce:	d04d      	beq.n	1386c <__aeabi_dadd+0x108>
   137d0:	2380      	movs	r3, #128	; 0x80
   137d2:	041b      	lsls	r3, r3, #16
   137d4:	4319      	orrs	r1, r3
   137d6:	2d38      	cmp	r5, #56	; 0x38
   137d8:	dd00      	ble.n	137dc <__aeabi_dadd+0x78>
   137da:	e107      	b.n	139ec <__aeabi_dadd+0x288>
   137dc:	2d1f      	cmp	r5, #31
   137de:	dd00      	ble.n	137e2 <__aeabi_dadd+0x7e>
   137e0:	e138      	b.n	13a54 <__aeabi_dadd+0x2f0>
   137e2:	2020      	movs	r0, #32
   137e4:	1b43      	subs	r3, r0, r5
   137e6:	469a      	mov	sl, r3
   137e8:	000b      	movs	r3, r1
   137ea:	4650      	mov	r0, sl
   137ec:	4083      	lsls	r3, r0
   137ee:	4699      	mov	r9, r3
   137f0:	0013      	movs	r3, r2
   137f2:	4648      	mov	r0, r9
   137f4:	40eb      	lsrs	r3, r5
   137f6:	4318      	orrs	r0, r3
   137f8:	0003      	movs	r3, r0
   137fa:	4650      	mov	r0, sl
   137fc:	4082      	lsls	r2, r0
   137fe:	1e50      	subs	r0, r2, #1
   13800:	4182      	sbcs	r2, r0
   13802:	40e9      	lsrs	r1, r5
   13804:	431a      	orrs	r2, r3
   13806:	1aba      	subs	r2, r7, r2
   13808:	1a61      	subs	r1, r4, r1
   1380a:	4297      	cmp	r7, r2
   1380c:	41a4      	sbcs	r4, r4
   1380e:	0017      	movs	r7, r2
   13810:	4264      	negs	r4, r4
   13812:	1b0c      	subs	r4, r1, r4
   13814:	0223      	lsls	r3, r4, #8
   13816:	d562      	bpl.n	138de <__aeabi_dadd+0x17a>
   13818:	0264      	lsls	r4, r4, #9
   1381a:	0a65      	lsrs	r5, r4, #9
   1381c:	2d00      	cmp	r5, #0
   1381e:	d100      	bne.n	13822 <__aeabi_dadd+0xbe>
   13820:	e0df      	b.n	139e2 <__aeabi_dadd+0x27e>
   13822:	0028      	movs	r0, r5
   13824:	f001 fd40 	bl	152a8 <__clzsi2>
   13828:	0003      	movs	r3, r0
   1382a:	3b08      	subs	r3, #8
   1382c:	2b1f      	cmp	r3, #31
   1382e:	dd00      	ble.n	13832 <__aeabi_dadd+0xce>
   13830:	e0d2      	b.n	139d8 <__aeabi_dadd+0x274>
   13832:	2220      	movs	r2, #32
   13834:	003c      	movs	r4, r7
   13836:	1ad2      	subs	r2, r2, r3
   13838:	409d      	lsls	r5, r3
   1383a:	40d4      	lsrs	r4, r2
   1383c:	409f      	lsls	r7, r3
   1383e:	4325      	orrs	r5, r4
   13840:	429e      	cmp	r6, r3
   13842:	dd00      	ble.n	13846 <__aeabi_dadd+0xe2>
   13844:	e0c4      	b.n	139d0 <__aeabi_dadd+0x26c>
   13846:	1b9e      	subs	r6, r3, r6
   13848:	1c73      	adds	r3, r6, #1
   1384a:	2b1f      	cmp	r3, #31
   1384c:	dd00      	ble.n	13850 <__aeabi_dadd+0xec>
   1384e:	e0f1      	b.n	13a34 <__aeabi_dadd+0x2d0>
   13850:	2220      	movs	r2, #32
   13852:	0038      	movs	r0, r7
   13854:	0029      	movs	r1, r5
   13856:	1ad2      	subs	r2, r2, r3
   13858:	40d8      	lsrs	r0, r3
   1385a:	4091      	lsls	r1, r2
   1385c:	4097      	lsls	r7, r2
   1385e:	002c      	movs	r4, r5
   13860:	4301      	orrs	r1, r0
   13862:	1e78      	subs	r0, r7, #1
   13864:	4187      	sbcs	r7, r0
   13866:	40dc      	lsrs	r4, r3
   13868:	2600      	movs	r6, #0
   1386a:	430f      	orrs	r7, r1
   1386c:	077b      	lsls	r3, r7, #29
   1386e:	d009      	beq.n	13884 <__aeabi_dadd+0x120>
   13870:	230f      	movs	r3, #15
   13872:	403b      	ands	r3, r7
   13874:	2b04      	cmp	r3, #4
   13876:	d005      	beq.n	13884 <__aeabi_dadd+0x120>
   13878:	1d3b      	adds	r3, r7, #4
   1387a:	42bb      	cmp	r3, r7
   1387c:	41bf      	sbcs	r7, r7
   1387e:	427f      	negs	r7, r7
   13880:	19e4      	adds	r4, r4, r7
   13882:	001f      	movs	r7, r3
   13884:	0223      	lsls	r3, r4, #8
   13886:	d52c      	bpl.n	138e2 <__aeabi_dadd+0x17e>
   13888:	4b96      	ldr	r3, [pc, #600]	; (13ae4 <__aeabi_dadd+0x380>)
   1388a:	3601      	adds	r6, #1
   1388c:	429e      	cmp	r6, r3
   1388e:	d100      	bne.n	13892 <__aeabi_dadd+0x12e>
   13890:	e09a      	b.n	139c8 <__aeabi_dadd+0x264>
   13892:	4645      	mov	r5, r8
   13894:	4b94      	ldr	r3, [pc, #592]	; (13ae8 <__aeabi_dadd+0x384>)
   13896:	08ff      	lsrs	r7, r7, #3
   13898:	401c      	ands	r4, r3
   1389a:	0760      	lsls	r0, r4, #29
   1389c:	0576      	lsls	r6, r6, #21
   1389e:	0264      	lsls	r4, r4, #9
   138a0:	4307      	orrs	r7, r0
   138a2:	0b24      	lsrs	r4, r4, #12
   138a4:	0d76      	lsrs	r6, r6, #21
   138a6:	2100      	movs	r1, #0
   138a8:	0324      	lsls	r4, r4, #12
   138aa:	0b23      	lsrs	r3, r4, #12
   138ac:	0d0c      	lsrs	r4, r1, #20
   138ae:	4a8f      	ldr	r2, [pc, #572]	; (13aec <__aeabi_dadd+0x388>)
   138b0:	0524      	lsls	r4, r4, #20
   138b2:	431c      	orrs	r4, r3
   138b4:	4014      	ands	r4, r2
   138b6:	0533      	lsls	r3, r6, #20
   138b8:	4323      	orrs	r3, r4
   138ba:	005b      	lsls	r3, r3, #1
   138bc:	07ed      	lsls	r5, r5, #31
   138be:	085b      	lsrs	r3, r3, #1
   138c0:	432b      	orrs	r3, r5
   138c2:	0038      	movs	r0, r7
   138c4:	0019      	movs	r1, r3
   138c6:	bc3c      	pop	{r2, r3, r4, r5}
   138c8:	4690      	mov	r8, r2
   138ca:	4699      	mov	r9, r3
   138cc:	46a2      	mov	sl, r4
   138ce:	46ab      	mov	fp, r5
   138d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   138d2:	4664      	mov	r4, ip
   138d4:	4304      	orrs	r4, r0
   138d6:	d100      	bne.n	138da <__aeabi_dadd+0x176>
   138d8:	e211      	b.n	13cfe <__aeabi_dadd+0x59a>
   138da:	0004      	movs	r4, r0
   138dc:	4667      	mov	r7, ip
   138de:	077b      	lsls	r3, r7, #29
   138e0:	d1c6      	bne.n	13870 <__aeabi_dadd+0x10c>
   138e2:	4645      	mov	r5, r8
   138e4:	0760      	lsls	r0, r4, #29
   138e6:	08ff      	lsrs	r7, r7, #3
   138e8:	4307      	orrs	r7, r0
   138ea:	08e4      	lsrs	r4, r4, #3
   138ec:	4b7d      	ldr	r3, [pc, #500]	; (13ae4 <__aeabi_dadd+0x380>)
   138ee:	429e      	cmp	r6, r3
   138f0:	d030      	beq.n	13954 <__aeabi_dadd+0x1f0>
   138f2:	0324      	lsls	r4, r4, #12
   138f4:	0576      	lsls	r6, r6, #21
   138f6:	0b24      	lsrs	r4, r4, #12
   138f8:	0d76      	lsrs	r6, r6, #21
   138fa:	e7d4      	b.n	138a6 <__aeabi_dadd+0x142>
   138fc:	1a33      	subs	r3, r6, r0
   138fe:	469a      	mov	sl, r3
   13900:	2b00      	cmp	r3, #0
   13902:	dd78      	ble.n	139f6 <__aeabi_dadd+0x292>
   13904:	2800      	cmp	r0, #0
   13906:	d031      	beq.n	1396c <__aeabi_dadd+0x208>
   13908:	4876      	ldr	r0, [pc, #472]	; (13ae4 <__aeabi_dadd+0x380>)
   1390a:	4286      	cmp	r6, r0
   1390c:	d0ae      	beq.n	1386c <__aeabi_dadd+0x108>
   1390e:	2080      	movs	r0, #128	; 0x80
   13910:	0400      	lsls	r0, r0, #16
   13912:	4301      	orrs	r1, r0
   13914:	4653      	mov	r3, sl
   13916:	2b38      	cmp	r3, #56	; 0x38
   13918:	dc00      	bgt.n	1391c <__aeabi_dadd+0x1b8>
   1391a:	e0e9      	b.n	13af0 <__aeabi_dadd+0x38c>
   1391c:	430a      	orrs	r2, r1
   1391e:	1e51      	subs	r1, r2, #1
   13920:	418a      	sbcs	r2, r1
   13922:	2100      	movs	r1, #0
   13924:	19d2      	adds	r2, r2, r7
   13926:	42ba      	cmp	r2, r7
   13928:	41bf      	sbcs	r7, r7
   1392a:	1909      	adds	r1, r1, r4
   1392c:	427c      	negs	r4, r7
   1392e:	0017      	movs	r7, r2
   13930:	190c      	adds	r4, r1, r4
   13932:	0223      	lsls	r3, r4, #8
   13934:	d5d3      	bpl.n	138de <__aeabi_dadd+0x17a>
   13936:	4b6b      	ldr	r3, [pc, #428]	; (13ae4 <__aeabi_dadd+0x380>)
   13938:	3601      	adds	r6, #1
   1393a:	429e      	cmp	r6, r3
   1393c:	d100      	bne.n	13940 <__aeabi_dadd+0x1dc>
   1393e:	e13a      	b.n	13bb6 <__aeabi_dadd+0x452>
   13940:	2001      	movs	r0, #1
   13942:	4b69      	ldr	r3, [pc, #420]	; (13ae8 <__aeabi_dadd+0x384>)
   13944:	401c      	ands	r4, r3
   13946:	087b      	lsrs	r3, r7, #1
   13948:	4007      	ands	r7, r0
   1394a:	431f      	orrs	r7, r3
   1394c:	07e0      	lsls	r0, r4, #31
   1394e:	4307      	orrs	r7, r0
   13950:	0864      	lsrs	r4, r4, #1
   13952:	e78b      	b.n	1386c <__aeabi_dadd+0x108>
   13954:	0023      	movs	r3, r4
   13956:	433b      	orrs	r3, r7
   13958:	d100      	bne.n	1395c <__aeabi_dadd+0x1f8>
   1395a:	e1cb      	b.n	13cf4 <__aeabi_dadd+0x590>
   1395c:	2280      	movs	r2, #128	; 0x80
   1395e:	0312      	lsls	r2, r2, #12
   13960:	4314      	orrs	r4, r2
   13962:	0324      	lsls	r4, r4, #12
   13964:	0b24      	lsrs	r4, r4, #12
   13966:	e79e      	b.n	138a6 <__aeabi_dadd+0x142>
   13968:	002e      	movs	r6, r5
   1396a:	e77f      	b.n	1386c <__aeabi_dadd+0x108>
   1396c:	0008      	movs	r0, r1
   1396e:	4310      	orrs	r0, r2
   13970:	d100      	bne.n	13974 <__aeabi_dadd+0x210>
   13972:	e0b4      	b.n	13ade <__aeabi_dadd+0x37a>
   13974:	1e58      	subs	r0, r3, #1
   13976:	2800      	cmp	r0, #0
   13978:	d000      	beq.n	1397c <__aeabi_dadd+0x218>
   1397a:	e0de      	b.n	13b3a <__aeabi_dadd+0x3d6>
   1397c:	18ba      	adds	r2, r7, r2
   1397e:	42ba      	cmp	r2, r7
   13980:	419b      	sbcs	r3, r3
   13982:	1864      	adds	r4, r4, r1
   13984:	425b      	negs	r3, r3
   13986:	18e4      	adds	r4, r4, r3
   13988:	0017      	movs	r7, r2
   1398a:	2601      	movs	r6, #1
   1398c:	0223      	lsls	r3, r4, #8
   1398e:	d5a6      	bpl.n	138de <__aeabi_dadd+0x17a>
   13990:	2602      	movs	r6, #2
   13992:	e7d5      	b.n	13940 <__aeabi_dadd+0x1dc>
   13994:	2d00      	cmp	r5, #0
   13996:	d16e      	bne.n	13a76 <__aeabi_dadd+0x312>
   13998:	1c70      	adds	r0, r6, #1
   1399a:	0540      	lsls	r0, r0, #21
   1399c:	0d40      	lsrs	r0, r0, #21
   1399e:	2801      	cmp	r0, #1
   139a0:	dc00      	bgt.n	139a4 <__aeabi_dadd+0x240>
   139a2:	e0f9      	b.n	13b98 <__aeabi_dadd+0x434>
   139a4:	1ab8      	subs	r0, r7, r2
   139a6:	4684      	mov	ip, r0
   139a8:	4287      	cmp	r7, r0
   139aa:	4180      	sbcs	r0, r0
   139ac:	1ae5      	subs	r5, r4, r3
   139ae:	4240      	negs	r0, r0
   139b0:	1a2d      	subs	r5, r5, r0
   139b2:	0228      	lsls	r0, r5, #8
   139b4:	d400      	bmi.n	139b8 <__aeabi_dadd+0x254>
   139b6:	e089      	b.n	13acc <__aeabi_dadd+0x368>
   139b8:	1bd7      	subs	r7, r2, r7
   139ba:	42ba      	cmp	r2, r7
   139bc:	4192      	sbcs	r2, r2
   139be:	1b1c      	subs	r4, r3, r4
   139c0:	4252      	negs	r2, r2
   139c2:	1aa5      	subs	r5, r4, r2
   139c4:	46d8      	mov	r8, fp
   139c6:	e729      	b.n	1381c <__aeabi_dadd+0xb8>
   139c8:	4645      	mov	r5, r8
   139ca:	2400      	movs	r4, #0
   139cc:	2700      	movs	r7, #0
   139ce:	e76a      	b.n	138a6 <__aeabi_dadd+0x142>
   139d0:	4c45      	ldr	r4, [pc, #276]	; (13ae8 <__aeabi_dadd+0x384>)
   139d2:	1af6      	subs	r6, r6, r3
   139d4:	402c      	ands	r4, r5
   139d6:	e749      	b.n	1386c <__aeabi_dadd+0x108>
   139d8:	003d      	movs	r5, r7
   139da:	3828      	subs	r0, #40	; 0x28
   139dc:	4085      	lsls	r5, r0
   139de:	2700      	movs	r7, #0
   139e0:	e72e      	b.n	13840 <__aeabi_dadd+0xdc>
   139e2:	0038      	movs	r0, r7
   139e4:	f001 fc60 	bl	152a8 <__clzsi2>
   139e8:	3020      	adds	r0, #32
   139ea:	e71d      	b.n	13828 <__aeabi_dadd+0xc4>
   139ec:	430a      	orrs	r2, r1
   139ee:	1e51      	subs	r1, r2, #1
   139f0:	418a      	sbcs	r2, r1
   139f2:	2100      	movs	r1, #0
   139f4:	e707      	b.n	13806 <__aeabi_dadd+0xa2>
   139f6:	2b00      	cmp	r3, #0
   139f8:	d000      	beq.n	139fc <__aeabi_dadd+0x298>
   139fa:	e0f3      	b.n	13be4 <__aeabi_dadd+0x480>
   139fc:	1c70      	adds	r0, r6, #1
   139fe:	0543      	lsls	r3, r0, #21
   13a00:	0d5b      	lsrs	r3, r3, #21
   13a02:	2b01      	cmp	r3, #1
   13a04:	dc00      	bgt.n	13a08 <__aeabi_dadd+0x2a4>
   13a06:	e0ad      	b.n	13b64 <__aeabi_dadd+0x400>
   13a08:	4b36      	ldr	r3, [pc, #216]	; (13ae4 <__aeabi_dadd+0x380>)
   13a0a:	4298      	cmp	r0, r3
   13a0c:	d100      	bne.n	13a10 <__aeabi_dadd+0x2ac>
   13a0e:	e0d1      	b.n	13bb4 <__aeabi_dadd+0x450>
   13a10:	18ba      	adds	r2, r7, r2
   13a12:	42ba      	cmp	r2, r7
   13a14:	41bf      	sbcs	r7, r7
   13a16:	1864      	adds	r4, r4, r1
   13a18:	427f      	negs	r7, r7
   13a1a:	19e4      	adds	r4, r4, r7
   13a1c:	07e7      	lsls	r7, r4, #31
   13a1e:	0852      	lsrs	r2, r2, #1
   13a20:	4317      	orrs	r7, r2
   13a22:	0864      	lsrs	r4, r4, #1
   13a24:	0006      	movs	r6, r0
   13a26:	e721      	b.n	1386c <__aeabi_dadd+0x108>
   13a28:	482e      	ldr	r0, [pc, #184]	; (13ae4 <__aeabi_dadd+0x380>)
   13a2a:	4285      	cmp	r5, r0
   13a2c:	d100      	bne.n	13a30 <__aeabi_dadd+0x2cc>
   13a2e:	e093      	b.n	13b58 <__aeabi_dadd+0x3f4>
   13a30:	001d      	movs	r5, r3
   13a32:	e6d0      	b.n	137d6 <__aeabi_dadd+0x72>
   13a34:	0029      	movs	r1, r5
   13a36:	3e1f      	subs	r6, #31
   13a38:	40f1      	lsrs	r1, r6
   13a3a:	2b20      	cmp	r3, #32
   13a3c:	d100      	bne.n	13a40 <__aeabi_dadd+0x2dc>
   13a3e:	e08d      	b.n	13b5c <__aeabi_dadd+0x3f8>
   13a40:	2240      	movs	r2, #64	; 0x40
   13a42:	1ad3      	subs	r3, r2, r3
   13a44:	409d      	lsls	r5, r3
   13a46:	432f      	orrs	r7, r5
   13a48:	1e7d      	subs	r5, r7, #1
   13a4a:	41af      	sbcs	r7, r5
   13a4c:	2400      	movs	r4, #0
   13a4e:	430f      	orrs	r7, r1
   13a50:	2600      	movs	r6, #0
   13a52:	e744      	b.n	138de <__aeabi_dadd+0x17a>
   13a54:	002b      	movs	r3, r5
   13a56:	0008      	movs	r0, r1
   13a58:	3b20      	subs	r3, #32
   13a5a:	40d8      	lsrs	r0, r3
   13a5c:	0003      	movs	r3, r0
   13a5e:	2d20      	cmp	r5, #32
   13a60:	d100      	bne.n	13a64 <__aeabi_dadd+0x300>
   13a62:	e07d      	b.n	13b60 <__aeabi_dadd+0x3fc>
   13a64:	2040      	movs	r0, #64	; 0x40
   13a66:	1b45      	subs	r5, r0, r5
   13a68:	40a9      	lsls	r1, r5
   13a6a:	430a      	orrs	r2, r1
   13a6c:	1e51      	subs	r1, r2, #1
   13a6e:	418a      	sbcs	r2, r1
   13a70:	2100      	movs	r1, #0
   13a72:	431a      	orrs	r2, r3
   13a74:	e6c7      	b.n	13806 <__aeabi_dadd+0xa2>
   13a76:	2e00      	cmp	r6, #0
   13a78:	d050      	beq.n	13b1c <__aeabi_dadd+0x3b8>
   13a7a:	4e1a      	ldr	r6, [pc, #104]	; (13ae4 <__aeabi_dadd+0x380>)
   13a7c:	42b0      	cmp	r0, r6
   13a7e:	d057      	beq.n	13b30 <__aeabi_dadd+0x3cc>
   13a80:	2680      	movs	r6, #128	; 0x80
   13a82:	426b      	negs	r3, r5
   13a84:	4699      	mov	r9, r3
   13a86:	0436      	lsls	r6, r6, #16
   13a88:	4334      	orrs	r4, r6
   13a8a:	464b      	mov	r3, r9
   13a8c:	2b38      	cmp	r3, #56	; 0x38
   13a8e:	dd00      	ble.n	13a92 <__aeabi_dadd+0x32e>
   13a90:	e0d6      	b.n	13c40 <__aeabi_dadd+0x4dc>
   13a92:	2b1f      	cmp	r3, #31
   13a94:	dd00      	ble.n	13a98 <__aeabi_dadd+0x334>
   13a96:	e135      	b.n	13d04 <__aeabi_dadd+0x5a0>
   13a98:	2620      	movs	r6, #32
   13a9a:	1af5      	subs	r5, r6, r3
   13a9c:	0026      	movs	r6, r4
   13a9e:	40ae      	lsls	r6, r5
   13aa0:	46b2      	mov	sl, r6
   13aa2:	003e      	movs	r6, r7
   13aa4:	40de      	lsrs	r6, r3
   13aa6:	46ac      	mov	ip, r5
   13aa8:	0035      	movs	r5, r6
   13aaa:	4656      	mov	r6, sl
   13aac:	432e      	orrs	r6, r5
   13aae:	4665      	mov	r5, ip
   13ab0:	40af      	lsls	r7, r5
   13ab2:	1e7d      	subs	r5, r7, #1
   13ab4:	41af      	sbcs	r7, r5
   13ab6:	40dc      	lsrs	r4, r3
   13ab8:	4337      	orrs	r7, r6
   13aba:	1bd7      	subs	r7, r2, r7
   13abc:	42ba      	cmp	r2, r7
   13abe:	4192      	sbcs	r2, r2
   13ac0:	1b0c      	subs	r4, r1, r4
   13ac2:	4252      	negs	r2, r2
   13ac4:	1aa4      	subs	r4, r4, r2
   13ac6:	0006      	movs	r6, r0
   13ac8:	46d8      	mov	r8, fp
   13aca:	e6a3      	b.n	13814 <__aeabi_dadd+0xb0>
   13acc:	4664      	mov	r4, ip
   13ace:	4667      	mov	r7, ip
   13ad0:	432c      	orrs	r4, r5
   13ad2:	d000      	beq.n	13ad6 <__aeabi_dadd+0x372>
   13ad4:	e6a2      	b.n	1381c <__aeabi_dadd+0xb8>
   13ad6:	2500      	movs	r5, #0
   13ad8:	2600      	movs	r6, #0
   13ada:	2700      	movs	r7, #0
   13adc:	e706      	b.n	138ec <__aeabi_dadd+0x188>
   13ade:	001e      	movs	r6, r3
   13ae0:	e6c4      	b.n	1386c <__aeabi_dadd+0x108>
   13ae2:	46c0      	nop			; (mov r8, r8)
   13ae4:	000007ff 	.word	0x000007ff
   13ae8:	ff7fffff 	.word	0xff7fffff
   13aec:	800fffff 	.word	0x800fffff
   13af0:	2b1f      	cmp	r3, #31
   13af2:	dc63      	bgt.n	13bbc <__aeabi_dadd+0x458>
   13af4:	2020      	movs	r0, #32
   13af6:	1ac3      	subs	r3, r0, r3
   13af8:	0008      	movs	r0, r1
   13afa:	4098      	lsls	r0, r3
   13afc:	469c      	mov	ip, r3
   13afe:	4683      	mov	fp, r0
   13b00:	4653      	mov	r3, sl
   13b02:	0010      	movs	r0, r2
   13b04:	40d8      	lsrs	r0, r3
   13b06:	0003      	movs	r3, r0
   13b08:	4658      	mov	r0, fp
   13b0a:	4318      	orrs	r0, r3
   13b0c:	4663      	mov	r3, ip
   13b0e:	409a      	lsls	r2, r3
   13b10:	1e53      	subs	r3, r2, #1
   13b12:	419a      	sbcs	r2, r3
   13b14:	4653      	mov	r3, sl
   13b16:	4302      	orrs	r2, r0
   13b18:	40d9      	lsrs	r1, r3
   13b1a:	e703      	b.n	13924 <__aeabi_dadd+0x1c0>
   13b1c:	0026      	movs	r6, r4
   13b1e:	433e      	orrs	r6, r7
   13b20:	d006      	beq.n	13b30 <__aeabi_dadd+0x3cc>
   13b22:	43eb      	mvns	r3, r5
   13b24:	4699      	mov	r9, r3
   13b26:	2b00      	cmp	r3, #0
   13b28:	d0c7      	beq.n	13aba <__aeabi_dadd+0x356>
   13b2a:	4e94      	ldr	r6, [pc, #592]	; (13d7c <__aeabi_dadd+0x618>)
   13b2c:	42b0      	cmp	r0, r6
   13b2e:	d1ac      	bne.n	13a8a <__aeabi_dadd+0x326>
   13b30:	000c      	movs	r4, r1
   13b32:	0017      	movs	r7, r2
   13b34:	0006      	movs	r6, r0
   13b36:	46d8      	mov	r8, fp
   13b38:	e698      	b.n	1386c <__aeabi_dadd+0x108>
   13b3a:	4b90      	ldr	r3, [pc, #576]	; (13d7c <__aeabi_dadd+0x618>)
   13b3c:	459a      	cmp	sl, r3
   13b3e:	d00b      	beq.n	13b58 <__aeabi_dadd+0x3f4>
   13b40:	4682      	mov	sl, r0
   13b42:	e6e7      	b.n	13914 <__aeabi_dadd+0x1b0>
   13b44:	2800      	cmp	r0, #0
   13b46:	d000      	beq.n	13b4a <__aeabi_dadd+0x3e6>
   13b48:	e09e      	b.n	13c88 <__aeabi_dadd+0x524>
   13b4a:	0018      	movs	r0, r3
   13b4c:	4310      	orrs	r0, r2
   13b4e:	d100      	bne.n	13b52 <__aeabi_dadd+0x3ee>
   13b50:	e0e9      	b.n	13d26 <__aeabi_dadd+0x5c2>
   13b52:	001c      	movs	r4, r3
   13b54:	0017      	movs	r7, r2
   13b56:	46d8      	mov	r8, fp
   13b58:	4e88      	ldr	r6, [pc, #544]	; (13d7c <__aeabi_dadd+0x618>)
   13b5a:	e687      	b.n	1386c <__aeabi_dadd+0x108>
   13b5c:	2500      	movs	r5, #0
   13b5e:	e772      	b.n	13a46 <__aeabi_dadd+0x2e2>
   13b60:	2100      	movs	r1, #0
   13b62:	e782      	b.n	13a6a <__aeabi_dadd+0x306>
   13b64:	0023      	movs	r3, r4
   13b66:	433b      	orrs	r3, r7
   13b68:	2e00      	cmp	r6, #0
   13b6a:	d000      	beq.n	13b6e <__aeabi_dadd+0x40a>
   13b6c:	e0ab      	b.n	13cc6 <__aeabi_dadd+0x562>
   13b6e:	2b00      	cmp	r3, #0
   13b70:	d100      	bne.n	13b74 <__aeabi_dadd+0x410>
   13b72:	e0e7      	b.n	13d44 <__aeabi_dadd+0x5e0>
   13b74:	000b      	movs	r3, r1
   13b76:	4313      	orrs	r3, r2
   13b78:	d100      	bne.n	13b7c <__aeabi_dadd+0x418>
   13b7a:	e677      	b.n	1386c <__aeabi_dadd+0x108>
   13b7c:	18ba      	adds	r2, r7, r2
   13b7e:	42ba      	cmp	r2, r7
   13b80:	41bf      	sbcs	r7, r7
   13b82:	1864      	adds	r4, r4, r1
   13b84:	427f      	negs	r7, r7
   13b86:	19e4      	adds	r4, r4, r7
   13b88:	0223      	lsls	r3, r4, #8
   13b8a:	d400      	bmi.n	13b8e <__aeabi_dadd+0x42a>
   13b8c:	e0f2      	b.n	13d74 <__aeabi_dadd+0x610>
   13b8e:	4b7c      	ldr	r3, [pc, #496]	; (13d80 <__aeabi_dadd+0x61c>)
   13b90:	0017      	movs	r7, r2
   13b92:	401c      	ands	r4, r3
   13b94:	0006      	movs	r6, r0
   13b96:	e669      	b.n	1386c <__aeabi_dadd+0x108>
   13b98:	0020      	movs	r0, r4
   13b9a:	4338      	orrs	r0, r7
   13b9c:	2e00      	cmp	r6, #0
   13b9e:	d1d1      	bne.n	13b44 <__aeabi_dadd+0x3e0>
   13ba0:	2800      	cmp	r0, #0
   13ba2:	d15b      	bne.n	13c5c <__aeabi_dadd+0x4f8>
   13ba4:	001c      	movs	r4, r3
   13ba6:	4314      	orrs	r4, r2
   13ba8:	d100      	bne.n	13bac <__aeabi_dadd+0x448>
   13baa:	e0a8      	b.n	13cfe <__aeabi_dadd+0x59a>
   13bac:	001c      	movs	r4, r3
   13bae:	0017      	movs	r7, r2
   13bb0:	46d8      	mov	r8, fp
   13bb2:	e65b      	b.n	1386c <__aeabi_dadd+0x108>
   13bb4:	0006      	movs	r6, r0
   13bb6:	2400      	movs	r4, #0
   13bb8:	2700      	movs	r7, #0
   13bba:	e697      	b.n	138ec <__aeabi_dadd+0x188>
   13bbc:	4650      	mov	r0, sl
   13bbe:	000b      	movs	r3, r1
   13bc0:	3820      	subs	r0, #32
   13bc2:	40c3      	lsrs	r3, r0
   13bc4:	4699      	mov	r9, r3
   13bc6:	4653      	mov	r3, sl
   13bc8:	2b20      	cmp	r3, #32
   13bca:	d100      	bne.n	13bce <__aeabi_dadd+0x46a>
   13bcc:	e095      	b.n	13cfa <__aeabi_dadd+0x596>
   13bce:	2340      	movs	r3, #64	; 0x40
   13bd0:	4650      	mov	r0, sl
   13bd2:	1a1b      	subs	r3, r3, r0
   13bd4:	4099      	lsls	r1, r3
   13bd6:	430a      	orrs	r2, r1
   13bd8:	1e51      	subs	r1, r2, #1
   13bda:	418a      	sbcs	r2, r1
   13bdc:	464b      	mov	r3, r9
   13bde:	2100      	movs	r1, #0
   13be0:	431a      	orrs	r2, r3
   13be2:	e69f      	b.n	13924 <__aeabi_dadd+0x1c0>
   13be4:	2e00      	cmp	r6, #0
   13be6:	d130      	bne.n	13c4a <__aeabi_dadd+0x4e6>
   13be8:	0026      	movs	r6, r4
   13bea:	433e      	orrs	r6, r7
   13bec:	d067      	beq.n	13cbe <__aeabi_dadd+0x55a>
   13bee:	43db      	mvns	r3, r3
   13bf0:	469a      	mov	sl, r3
   13bf2:	2b00      	cmp	r3, #0
   13bf4:	d01c      	beq.n	13c30 <__aeabi_dadd+0x4cc>
   13bf6:	4e61      	ldr	r6, [pc, #388]	; (13d7c <__aeabi_dadd+0x618>)
   13bf8:	42b0      	cmp	r0, r6
   13bfa:	d060      	beq.n	13cbe <__aeabi_dadd+0x55a>
   13bfc:	4653      	mov	r3, sl
   13bfe:	2b38      	cmp	r3, #56	; 0x38
   13c00:	dd00      	ble.n	13c04 <__aeabi_dadd+0x4a0>
   13c02:	e096      	b.n	13d32 <__aeabi_dadd+0x5ce>
   13c04:	2b1f      	cmp	r3, #31
   13c06:	dd00      	ble.n	13c0a <__aeabi_dadd+0x4a6>
   13c08:	e09f      	b.n	13d4a <__aeabi_dadd+0x5e6>
   13c0a:	2620      	movs	r6, #32
   13c0c:	1af3      	subs	r3, r6, r3
   13c0e:	0026      	movs	r6, r4
   13c10:	409e      	lsls	r6, r3
   13c12:	469c      	mov	ip, r3
   13c14:	46b3      	mov	fp, r6
   13c16:	4653      	mov	r3, sl
   13c18:	003e      	movs	r6, r7
   13c1a:	40de      	lsrs	r6, r3
   13c1c:	0033      	movs	r3, r6
   13c1e:	465e      	mov	r6, fp
   13c20:	431e      	orrs	r6, r3
   13c22:	4663      	mov	r3, ip
   13c24:	409f      	lsls	r7, r3
   13c26:	1e7b      	subs	r3, r7, #1
   13c28:	419f      	sbcs	r7, r3
   13c2a:	4653      	mov	r3, sl
   13c2c:	40dc      	lsrs	r4, r3
   13c2e:	4337      	orrs	r7, r6
   13c30:	18bf      	adds	r7, r7, r2
   13c32:	4297      	cmp	r7, r2
   13c34:	4192      	sbcs	r2, r2
   13c36:	1864      	adds	r4, r4, r1
   13c38:	4252      	negs	r2, r2
   13c3a:	18a4      	adds	r4, r4, r2
   13c3c:	0006      	movs	r6, r0
   13c3e:	e678      	b.n	13932 <__aeabi_dadd+0x1ce>
   13c40:	4327      	orrs	r7, r4
   13c42:	1e7c      	subs	r4, r7, #1
   13c44:	41a7      	sbcs	r7, r4
   13c46:	2400      	movs	r4, #0
   13c48:	e737      	b.n	13aba <__aeabi_dadd+0x356>
   13c4a:	4e4c      	ldr	r6, [pc, #304]	; (13d7c <__aeabi_dadd+0x618>)
   13c4c:	42b0      	cmp	r0, r6
   13c4e:	d036      	beq.n	13cbe <__aeabi_dadd+0x55a>
   13c50:	2680      	movs	r6, #128	; 0x80
   13c52:	425b      	negs	r3, r3
   13c54:	0436      	lsls	r6, r6, #16
   13c56:	469a      	mov	sl, r3
   13c58:	4334      	orrs	r4, r6
   13c5a:	e7cf      	b.n	13bfc <__aeabi_dadd+0x498>
   13c5c:	0018      	movs	r0, r3
   13c5e:	4310      	orrs	r0, r2
   13c60:	d100      	bne.n	13c64 <__aeabi_dadd+0x500>
   13c62:	e603      	b.n	1386c <__aeabi_dadd+0x108>
   13c64:	1ab8      	subs	r0, r7, r2
   13c66:	4684      	mov	ip, r0
   13c68:	4567      	cmp	r7, ip
   13c6a:	41ad      	sbcs	r5, r5
   13c6c:	1ae0      	subs	r0, r4, r3
   13c6e:	426d      	negs	r5, r5
   13c70:	1b40      	subs	r0, r0, r5
   13c72:	0205      	lsls	r5, r0, #8
   13c74:	d400      	bmi.n	13c78 <__aeabi_dadd+0x514>
   13c76:	e62c      	b.n	138d2 <__aeabi_dadd+0x16e>
   13c78:	1bd7      	subs	r7, r2, r7
   13c7a:	42ba      	cmp	r2, r7
   13c7c:	4192      	sbcs	r2, r2
   13c7e:	1b1c      	subs	r4, r3, r4
   13c80:	4252      	negs	r2, r2
   13c82:	1aa4      	subs	r4, r4, r2
   13c84:	46d8      	mov	r8, fp
   13c86:	e5f1      	b.n	1386c <__aeabi_dadd+0x108>
   13c88:	0018      	movs	r0, r3
   13c8a:	4310      	orrs	r0, r2
   13c8c:	d100      	bne.n	13c90 <__aeabi_dadd+0x52c>
   13c8e:	e763      	b.n	13b58 <__aeabi_dadd+0x3f4>
   13c90:	08f8      	lsrs	r0, r7, #3
   13c92:	0767      	lsls	r7, r4, #29
   13c94:	4307      	orrs	r7, r0
   13c96:	2080      	movs	r0, #128	; 0x80
   13c98:	08e4      	lsrs	r4, r4, #3
   13c9a:	0300      	lsls	r0, r0, #12
   13c9c:	4204      	tst	r4, r0
   13c9e:	d008      	beq.n	13cb2 <__aeabi_dadd+0x54e>
   13ca0:	08dd      	lsrs	r5, r3, #3
   13ca2:	4205      	tst	r5, r0
   13ca4:	d105      	bne.n	13cb2 <__aeabi_dadd+0x54e>
   13ca6:	08d2      	lsrs	r2, r2, #3
   13ca8:	0759      	lsls	r1, r3, #29
   13caa:	4311      	orrs	r1, r2
   13cac:	000f      	movs	r7, r1
   13cae:	002c      	movs	r4, r5
   13cb0:	46d8      	mov	r8, fp
   13cb2:	0f7b      	lsrs	r3, r7, #29
   13cb4:	00e4      	lsls	r4, r4, #3
   13cb6:	431c      	orrs	r4, r3
   13cb8:	00ff      	lsls	r7, r7, #3
   13cba:	4e30      	ldr	r6, [pc, #192]	; (13d7c <__aeabi_dadd+0x618>)
   13cbc:	e5d6      	b.n	1386c <__aeabi_dadd+0x108>
   13cbe:	000c      	movs	r4, r1
   13cc0:	0017      	movs	r7, r2
   13cc2:	0006      	movs	r6, r0
   13cc4:	e5d2      	b.n	1386c <__aeabi_dadd+0x108>
   13cc6:	2b00      	cmp	r3, #0
   13cc8:	d038      	beq.n	13d3c <__aeabi_dadd+0x5d8>
   13cca:	000b      	movs	r3, r1
   13ccc:	4313      	orrs	r3, r2
   13cce:	d100      	bne.n	13cd2 <__aeabi_dadd+0x56e>
   13cd0:	e742      	b.n	13b58 <__aeabi_dadd+0x3f4>
   13cd2:	08f8      	lsrs	r0, r7, #3
   13cd4:	0767      	lsls	r7, r4, #29
   13cd6:	4307      	orrs	r7, r0
   13cd8:	2080      	movs	r0, #128	; 0x80
   13cda:	08e4      	lsrs	r4, r4, #3
   13cdc:	0300      	lsls	r0, r0, #12
   13cde:	4204      	tst	r4, r0
   13ce0:	d0e7      	beq.n	13cb2 <__aeabi_dadd+0x54e>
   13ce2:	08cb      	lsrs	r3, r1, #3
   13ce4:	4203      	tst	r3, r0
   13ce6:	d1e4      	bne.n	13cb2 <__aeabi_dadd+0x54e>
   13ce8:	08d2      	lsrs	r2, r2, #3
   13cea:	0749      	lsls	r1, r1, #29
   13cec:	4311      	orrs	r1, r2
   13cee:	000f      	movs	r7, r1
   13cf0:	001c      	movs	r4, r3
   13cf2:	e7de      	b.n	13cb2 <__aeabi_dadd+0x54e>
   13cf4:	2700      	movs	r7, #0
   13cf6:	2400      	movs	r4, #0
   13cf8:	e5d5      	b.n	138a6 <__aeabi_dadd+0x142>
   13cfa:	2100      	movs	r1, #0
   13cfc:	e76b      	b.n	13bd6 <__aeabi_dadd+0x472>
   13cfe:	2500      	movs	r5, #0
   13d00:	2700      	movs	r7, #0
   13d02:	e5f3      	b.n	138ec <__aeabi_dadd+0x188>
   13d04:	464e      	mov	r6, r9
   13d06:	0025      	movs	r5, r4
   13d08:	3e20      	subs	r6, #32
   13d0a:	40f5      	lsrs	r5, r6
   13d0c:	464b      	mov	r3, r9
   13d0e:	002e      	movs	r6, r5
   13d10:	2b20      	cmp	r3, #32
   13d12:	d02d      	beq.n	13d70 <__aeabi_dadd+0x60c>
   13d14:	2540      	movs	r5, #64	; 0x40
   13d16:	1aed      	subs	r5, r5, r3
   13d18:	40ac      	lsls	r4, r5
   13d1a:	4327      	orrs	r7, r4
   13d1c:	1e7c      	subs	r4, r7, #1
   13d1e:	41a7      	sbcs	r7, r4
   13d20:	2400      	movs	r4, #0
   13d22:	4337      	orrs	r7, r6
   13d24:	e6c9      	b.n	13aba <__aeabi_dadd+0x356>
   13d26:	2480      	movs	r4, #128	; 0x80
   13d28:	2500      	movs	r5, #0
   13d2a:	0324      	lsls	r4, r4, #12
   13d2c:	4e13      	ldr	r6, [pc, #76]	; (13d7c <__aeabi_dadd+0x618>)
   13d2e:	2700      	movs	r7, #0
   13d30:	e5dc      	b.n	138ec <__aeabi_dadd+0x188>
   13d32:	4327      	orrs	r7, r4
   13d34:	1e7c      	subs	r4, r7, #1
   13d36:	41a7      	sbcs	r7, r4
   13d38:	2400      	movs	r4, #0
   13d3a:	e779      	b.n	13c30 <__aeabi_dadd+0x4cc>
   13d3c:	000c      	movs	r4, r1
   13d3e:	0017      	movs	r7, r2
   13d40:	4e0e      	ldr	r6, [pc, #56]	; (13d7c <__aeabi_dadd+0x618>)
   13d42:	e593      	b.n	1386c <__aeabi_dadd+0x108>
   13d44:	000c      	movs	r4, r1
   13d46:	0017      	movs	r7, r2
   13d48:	e590      	b.n	1386c <__aeabi_dadd+0x108>
   13d4a:	4656      	mov	r6, sl
   13d4c:	0023      	movs	r3, r4
   13d4e:	3e20      	subs	r6, #32
   13d50:	40f3      	lsrs	r3, r6
   13d52:	4699      	mov	r9, r3
   13d54:	4653      	mov	r3, sl
   13d56:	2b20      	cmp	r3, #32
   13d58:	d00e      	beq.n	13d78 <__aeabi_dadd+0x614>
   13d5a:	2340      	movs	r3, #64	; 0x40
   13d5c:	4656      	mov	r6, sl
   13d5e:	1b9b      	subs	r3, r3, r6
   13d60:	409c      	lsls	r4, r3
   13d62:	4327      	orrs	r7, r4
   13d64:	1e7c      	subs	r4, r7, #1
   13d66:	41a7      	sbcs	r7, r4
   13d68:	464b      	mov	r3, r9
   13d6a:	2400      	movs	r4, #0
   13d6c:	431f      	orrs	r7, r3
   13d6e:	e75f      	b.n	13c30 <__aeabi_dadd+0x4cc>
   13d70:	2400      	movs	r4, #0
   13d72:	e7d2      	b.n	13d1a <__aeabi_dadd+0x5b6>
   13d74:	0017      	movs	r7, r2
   13d76:	e5b2      	b.n	138de <__aeabi_dadd+0x17a>
   13d78:	2400      	movs	r4, #0
   13d7a:	e7f2      	b.n	13d62 <__aeabi_dadd+0x5fe>
   13d7c:	000007ff 	.word	0x000007ff
   13d80:	ff7fffff 	.word	0xff7fffff

00013d84 <__aeabi_ddiv>:
   13d84:	b5f0      	push	{r4, r5, r6, r7, lr}
   13d86:	4657      	mov	r7, sl
   13d88:	4645      	mov	r5, r8
   13d8a:	46de      	mov	lr, fp
   13d8c:	464e      	mov	r6, r9
   13d8e:	b5e0      	push	{r5, r6, r7, lr}
   13d90:	004c      	lsls	r4, r1, #1
   13d92:	030e      	lsls	r6, r1, #12
   13d94:	b087      	sub	sp, #28
   13d96:	4683      	mov	fp, r0
   13d98:	4692      	mov	sl, r2
   13d9a:	001d      	movs	r5, r3
   13d9c:	4680      	mov	r8, r0
   13d9e:	0b36      	lsrs	r6, r6, #12
   13da0:	0d64      	lsrs	r4, r4, #21
   13da2:	0fcf      	lsrs	r7, r1, #31
   13da4:	2c00      	cmp	r4, #0
   13da6:	d04f      	beq.n	13e48 <__aeabi_ddiv+0xc4>
   13da8:	4b6f      	ldr	r3, [pc, #444]	; (13f68 <__aeabi_ddiv+0x1e4>)
   13daa:	429c      	cmp	r4, r3
   13dac:	d035      	beq.n	13e1a <__aeabi_ddiv+0x96>
   13dae:	2380      	movs	r3, #128	; 0x80
   13db0:	0f42      	lsrs	r2, r0, #29
   13db2:	041b      	lsls	r3, r3, #16
   13db4:	00f6      	lsls	r6, r6, #3
   13db6:	4313      	orrs	r3, r2
   13db8:	4333      	orrs	r3, r6
   13dba:	4699      	mov	r9, r3
   13dbc:	00c3      	lsls	r3, r0, #3
   13dbe:	4698      	mov	r8, r3
   13dc0:	4b6a      	ldr	r3, [pc, #424]	; (13f6c <__aeabi_ddiv+0x1e8>)
   13dc2:	2600      	movs	r6, #0
   13dc4:	469c      	mov	ip, r3
   13dc6:	2300      	movs	r3, #0
   13dc8:	4464      	add	r4, ip
   13dca:	9303      	str	r3, [sp, #12]
   13dcc:	032b      	lsls	r3, r5, #12
   13dce:	0b1b      	lsrs	r3, r3, #12
   13dd0:	469b      	mov	fp, r3
   13dd2:	006b      	lsls	r3, r5, #1
   13dd4:	0fed      	lsrs	r5, r5, #31
   13dd6:	4650      	mov	r0, sl
   13dd8:	0d5b      	lsrs	r3, r3, #21
   13dda:	9501      	str	r5, [sp, #4]
   13ddc:	d05e      	beq.n	13e9c <__aeabi_ddiv+0x118>
   13dde:	4a62      	ldr	r2, [pc, #392]	; (13f68 <__aeabi_ddiv+0x1e4>)
   13de0:	4293      	cmp	r3, r2
   13de2:	d053      	beq.n	13e8c <__aeabi_ddiv+0x108>
   13de4:	465a      	mov	r2, fp
   13de6:	00d1      	lsls	r1, r2, #3
   13de8:	2280      	movs	r2, #128	; 0x80
   13dea:	0f40      	lsrs	r0, r0, #29
   13dec:	0412      	lsls	r2, r2, #16
   13dee:	4302      	orrs	r2, r0
   13df0:	430a      	orrs	r2, r1
   13df2:	4693      	mov	fp, r2
   13df4:	4652      	mov	r2, sl
   13df6:	00d1      	lsls	r1, r2, #3
   13df8:	4a5c      	ldr	r2, [pc, #368]	; (13f6c <__aeabi_ddiv+0x1e8>)
   13dfa:	4694      	mov	ip, r2
   13dfc:	2200      	movs	r2, #0
   13dfe:	4463      	add	r3, ip
   13e00:	0038      	movs	r0, r7
   13e02:	4068      	eors	r0, r5
   13e04:	4684      	mov	ip, r0
   13e06:	9002      	str	r0, [sp, #8]
   13e08:	1ae4      	subs	r4, r4, r3
   13e0a:	4316      	orrs	r6, r2
   13e0c:	2e0f      	cmp	r6, #15
   13e0e:	d900      	bls.n	13e12 <__aeabi_ddiv+0x8e>
   13e10:	e0b4      	b.n	13f7c <__aeabi_ddiv+0x1f8>
   13e12:	4b57      	ldr	r3, [pc, #348]	; (13f70 <__aeabi_ddiv+0x1ec>)
   13e14:	00b6      	lsls	r6, r6, #2
   13e16:	599b      	ldr	r3, [r3, r6]
   13e18:	469f      	mov	pc, r3
   13e1a:	0003      	movs	r3, r0
   13e1c:	4333      	orrs	r3, r6
   13e1e:	4699      	mov	r9, r3
   13e20:	d16c      	bne.n	13efc <__aeabi_ddiv+0x178>
   13e22:	2300      	movs	r3, #0
   13e24:	4698      	mov	r8, r3
   13e26:	3302      	adds	r3, #2
   13e28:	2608      	movs	r6, #8
   13e2a:	9303      	str	r3, [sp, #12]
   13e2c:	e7ce      	b.n	13dcc <__aeabi_ddiv+0x48>
   13e2e:	46cb      	mov	fp, r9
   13e30:	4641      	mov	r1, r8
   13e32:	9a03      	ldr	r2, [sp, #12]
   13e34:	9701      	str	r7, [sp, #4]
   13e36:	2a02      	cmp	r2, #2
   13e38:	d165      	bne.n	13f06 <__aeabi_ddiv+0x182>
   13e3a:	9b01      	ldr	r3, [sp, #4]
   13e3c:	4c4a      	ldr	r4, [pc, #296]	; (13f68 <__aeabi_ddiv+0x1e4>)
   13e3e:	469c      	mov	ip, r3
   13e40:	2300      	movs	r3, #0
   13e42:	2200      	movs	r2, #0
   13e44:	4698      	mov	r8, r3
   13e46:	e06b      	b.n	13f20 <__aeabi_ddiv+0x19c>
   13e48:	0003      	movs	r3, r0
   13e4a:	4333      	orrs	r3, r6
   13e4c:	4699      	mov	r9, r3
   13e4e:	d04e      	beq.n	13eee <__aeabi_ddiv+0x16a>
   13e50:	2e00      	cmp	r6, #0
   13e52:	d100      	bne.n	13e56 <__aeabi_ddiv+0xd2>
   13e54:	e1bc      	b.n	141d0 <__aeabi_ddiv+0x44c>
   13e56:	0030      	movs	r0, r6
   13e58:	f001 fa26 	bl	152a8 <__clzsi2>
   13e5c:	0003      	movs	r3, r0
   13e5e:	3b0b      	subs	r3, #11
   13e60:	2b1c      	cmp	r3, #28
   13e62:	dd00      	ble.n	13e66 <__aeabi_ddiv+0xe2>
   13e64:	e1ac      	b.n	141c0 <__aeabi_ddiv+0x43c>
   13e66:	221d      	movs	r2, #29
   13e68:	1ad3      	subs	r3, r2, r3
   13e6a:	465a      	mov	r2, fp
   13e6c:	0001      	movs	r1, r0
   13e6e:	40da      	lsrs	r2, r3
   13e70:	3908      	subs	r1, #8
   13e72:	408e      	lsls	r6, r1
   13e74:	0013      	movs	r3, r2
   13e76:	4333      	orrs	r3, r6
   13e78:	4699      	mov	r9, r3
   13e7a:	465b      	mov	r3, fp
   13e7c:	408b      	lsls	r3, r1
   13e7e:	4698      	mov	r8, r3
   13e80:	2300      	movs	r3, #0
   13e82:	4c3c      	ldr	r4, [pc, #240]	; (13f74 <__aeabi_ddiv+0x1f0>)
   13e84:	2600      	movs	r6, #0
   13e86:	1a24      	subs	r4, r4, r0
   13e88:	9303      	str	r3, [sp, #12]
   13e8a:	e79f      	b.n	13dcc <__aeabi_ddiv+0x48>
   13e8c:	4651      	mov	r1, sl
   13e8e:	465a      	mov	r2, fp
   13e90:	4311      	orrs	r1, r2
   13e92:	d129      	bne.n	13ee8 <__aeabi_ddiv+0x164>
   13e94:	2200      	movs	r2, #0
   13e96:	4693      	mov	fp, r2
   13e98:	3202      	adds	r2, #2
   13e9a:	e7b1      	b.n	13e00 <__aeabi_ddiv+0x7c>
   13e9c:	4659      	mov	r1, fp
   13e9e:	4301      	orrs	r1, r0
   13ea0:	d01e      	beq.n	13ee0 <__aeabi_ddiv+0x15c>
   13ea2:	465b      	mov	r3, fp
   13ea4:	2b00      	cmp	r3, #0
   13ea6:	d100      	bne.n	13eaa <__aeabi_ddiv+0x126>
   13ea8:	e19e      	b.n	141e8 <__aeabi_ddiv+0x464>
   13eaa:	4658      	mov	r0, fp
   13eac:	f001 f9fc 	bl	152a8 <__clzsi2>
   13eb0:	0003      	movs	r3, r0
   13eb2:	3b0b      	subs	r3, #11
   13eb4:	2b1c      	cmp	r3, #28
   13eb6:	dd00      	ble.n	13eba <__aeabi_ddiv+0x136>
   13eb8:	e18f      	b.n	141da <__aeabi_ddiv+0x456>
   13eba:	0002      	movs	r2, r0
   13ebc:	4659      	mov	r1, fp
   13ebe:	3a08      	subs	r2, #8
   13ec0:	4091      	lsls	r1, r2
   13ec2:	468b      	mov	fp, r1
   13ec4:	211d      	movs	r1, #29
   13ec6:	1acb      	subs	r3, r1, r3
   13ec8:	4651      	mov	r1, sl
   13eca:	40d9      	lsrs	r1, r3
   13ecc:	000b      	movs	r3, r1
   13ece:	4659      	mov	r1, fp
   13ed0:	430b      	orrs	r3, r1
   13ed2:	4651      	mov	r1, sl
   13ed4:	469b      	mov	fp, r3
   13ed6:	4091      	lsls	r1, r2
   13ed8:	4b26      	ldr	r3, [pc, #152]	; (13f74 <__aeabi_ddiv+0x1f0>)
   13eda:	2200      	movs	r2, #0
   13edc:	1a1b      	subs	r3, r3, r0
   13ede:	e78f      	b.n	13e00 <__aeabi_ddiv+0x7c>
   13ee0:	2300      	movs	r3, #0
   13ee2:	2201      	movs	r2, #1
   13ee4:	469b      	mov	fp, r3
   13ee6:	e78b      	b.n	13e00 <__aeabi_ddiv+0x7c>
   13ee8:	4651      	mov	r1, sl
   13eea:	2203      	movs	r2, #3
   13eec:	e788      	b.n	13e00 <__aeabi_ddiv+0x7c>
   13eee:	2300      	movs	r3, #0
   13ef0:	4698      	mov	r8, r3
   13ef2:	3301      	adds	r3, #1
   13ef4:	2604      	movs	r6, #4
   13ef6:	2400      	movs	r4, #0
   13ef8:	9303      	str	r3, [sp, #12]
   13efa:	e767      	b.n	13dcc <__aeabi_ddiv+0x48>
   13efc:	2303      	movs	r3, #3
   13efe:	46b1      	mov	r9, r6
   13f00:	9303      	str	r3, [sp, #12]
   13f02:	260c      	movs	r6, #12
   13f04:	e762      	b.n	13dcc <__aeabi_ddiv+0x48>
   13f06:	2a03      	cmp	r2, #3
   13f08:	d100      	bne.n	13f0c <__aeabi_ddiv+0x188>
   13f0a:	e25c      	b.n	143c6 <__aeabi_ddiv+0x642>
   13f0c:	9b01      	ldr	r3, [sp, #4]
   13f0e:	2a01      	cmp	r2, #1
   13f10:	d000      	beq.n	13f14 <__aeabi_ddiv+0x190>
   13f12:	e1e4      	b.n	142de <__aeabi_ddiv+0x55a>
   13f14:	4013      	ands	r3, r2
   13f16:	469c      	mov	ip, r3
   13f18:	2300      	movs	r3, #0
   13f1a:	2400      	movs	r4, #0
   13f1c:	2200      	movs	r2, #0
   13f1e:	4698      	mov	r8, r3
   13f20:	2100      	movs	r1, #0
   13f22:	0312      	lsls	r2, r2, #12
   13f24:	0b13      	lsrs	r3, r2, #12
   13f26:	0d0a      	lsrs	r2, r1, #20
   13f28:	0512      	lsls	r2, r2, #20
   13f2a:	431a      	orrs	r2, r3
   13f2c:	0523      	lsls	r3, r4, #20
   13f2e:	4c12      	ldr	r4, [pc, #72]	; (13f78 <__aeabi_ddiv+0x1f4>)
   13f30:	4640      	mov	r0, r8
   13f32:	4022      	ands	r2, r4
   13f34:	4313      	orrs	r3, r2
   13f36:	4662      	mov	r2, ip
   13f38:	005b      	lsls	r3, r3, #1
   13f3a:	07d2      	lsls	r2, r2, #31
   13f3c:	085b      	lsrs	r3, r3, #1
   13f3e:	4313      	orrs	r3, r2
   13f40:	0019      	movs	r1, r3
   13f42:	b007      	add	sp, #28
   13f44:	bc3c      	pop	{r2, r3, r4, r5}
   13f46:	4690      	mov	r8, r2
   13f48:	4699      	mov	r9, r3
   13f4a:	46a2      	mov	sl, r4
   13f4c:	46ab      	mov	fp, r5
   13f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13f50:	2300      	movs	r3, #0
   13f52:	2280      	movs	r2, #128	; 0x80
   13f54:	469c      	mov	ip, r3
   13f56:	0312      	lsls	r2, r2, #12
   13f58:	4698      	mov	r8, r3
   13f5a:	4c03      	ldr	r4, [pc, #12]	; (13f68 <__aeabi_ddiv+0x1e4>)
   13f5c:	e7e0      	b.n	13f20 <__aeabi_ddiv+0x19c>
   13f5e:	2300      	movs	r3, #0
   13f60:	4c01      	ldr	r4, [pc, #4]	; (13f68 <__aeabi_ddiv+0x1e4>)
   13f62:	2200      	movs	r2, #0
   13f64:	4698      	mov	r8, r3
   13f66:	e7db      	b.n	13f20 <__aeabi_ddiv+0x19c>
   13f68:	000007ff 	.word	0x000007ff
   13f6c:	fffffc01 	.word	0xfffffc01
   13f70:	00017c84 	.word	0x00017c84
   13f74:	fffffc0d 	.word	0xfffffc0d
   13f78:	800fffff 	.word	0x800fffff
   13f7c:	45d9      	cmp	r9, fp
   13f7e:	d900      	bls.n	13f82 <__aeabi_ddiv+0x1fe>
   13f80:	e139      	b.n	141f6 <__aeabi_ddiv+0x472>
   13f82:	d100      	bne.n	13f86 <__aeabi_ddiv+0x202>
   13f84:	e134      	b.n	141f0 <__aeabi_ddiv+0x46c>
   13f86:	2300      	movs	r3, #0
   13f88:	4646      	mov	r6, r8
   13f8a:	464d      	mov	r5, r9
   13f8c:	469a      	mov	sl, r3
   13f8e:	3c01      	subs	r4, #1
   13f90:	465b      	mov	r3, fp
   13f92:	0e0a      	lsrs	r2, r1, #24
   13f94:	021b      	lsls	r3, r3, #8
   13f96:	431a      	orrs	r2, r3
   13f98:	020b      	lsls	r3, r1, #8
   13f9a:	0c17      	lsrs	r7, r2, #16
   13f9c:	9303      	str	r3, [sp, #12]
   13f9e:	0413      	lsls	r3, r2, #16
   13fa0:	0c1b      	lsrs	r3, r3, #16
   13fa2:	0039      	movs	r1, r7
   13fa4:	0028      	movs	r0, r5
   13fa6:	4690      	mov	r8, r2
   13fa8:	9301      	str	r3, [sp, #4]
   13faa:	f7fe f9d7 	bl	1235c <__udivsi3>
   13fae:	0002      	movs	r2, r0
   13fb0:	9b01      	ldr	r3, [sp, #4]
   13fb2:	4683      	mov	fp, r0
   13fb4:	435a      	muls	r2, r3
   13fb6:	0028      	movs	r0, r5
   13fb8:	0039      	movs	r1, r7
   13fba:	4691      	mov	r9, r2
   13fbc:	f7fe fa54 	bl	12468 <__aeabi_uidivmod>
   13fc0:	0c35      	lsrs	r5, r6, #16
   13fc2:	0409      	lsls	r1, r1, #16
   13fc4:	430d      	orrs	r5, r1
   13fc6:	45a9      	cmp	r9, r5
   13fc8:	d90d      	bls.n	13fe6 <__aeabi_ddiv+0x262>
   13fca:	465b      	mov	r3, fp
   13fcc:	4445      	add	r5, r8
   13fce:	3b01      	subs	r3, #1
   13fd0:	45a8      	cmp	r8, r5
   13fd2:	d900      	bls.n	13fd6 <__aeabi_ddiv+0x252>
   13fd4:	e13a      	b.n	1424c <__aeabi_ddiv+0x4c8>
   13fd6:	45a9      	cmp	r9, r5
   13fd8:	d800      	bhi.n	13fdc <__aeabi_ddiv+0x258>
   13fda:	e137      	b.n	1424c <__aeabi_ddiv+0x4c8>
   13fdc:	2302      	movs	r3, #2
   13fde:	425b      	negs	r3, r3
   13fe0:	469c      	mov	ip, r3
   13fe2:	4445      	add	r5, r8
   13fe4:	44e3      	add	fp, ip
   13fe6:	464b      	mov	r3, r9
   13fe8:	1aeb      	subs	r3, r5, r3
   13fea:	0039      	movs	r1, r7
   13fec:	0018      	movs	r0, r3
   13fee:	9304      	str	r3, [sp, #16]
   13ff0:	f7fe f9b4 	bl	1235c <__udivsi3>
   13ff4:	9b01      	ldr	r3, [sp, #4]
   13ff6:	0005      	movs	r5, r0
   13ff8:	4343      	muls	r3, r0
   13ffa:	0039      	movs	r1, r7
   13ffc:	9804      	ldr	r0, [sp, #16]
   13ffe:	4699      	mov	r9, r3
   14000:	f7fe fa32 	bl	12468 <__aeabi_uidivmod>
   14004:	0433      	lsls	r3, r6, #16
   14006:	0409      	lsls	r1, r1, #16
   14008:	0c1b      	lsrs	r3, r3, #16
   1400a:	430b      	orrs	r3, r1
   1400c:	4599      	cmp	r9, r3
   1400e:	d909      	bls.n	14024 <__aeabi_ddiv+0x2a0>
   14010:	4443      	add	r3, r8
   14012:	1e6a      	subs	r2, r5, #1
   14014:	4598      	cmp	r8, r3
   14016:	d900      	bls.n	1401a <__aeabi_ddiv+0x296>
   14018:	e11a      	b.n	14250 <__aeabi_ddiv+0x4cc>
   1401a:	4599      	cmp	r9, r3
   1401c:	d800      	bhi.n	14020 <__aeabi_ddiv+0x29c>
   1401e:	e117      	b.n	14250 <__aeabi_ddiv+0x4cc>
   14020:	3d02      	subs	r5, #2
   14022:	4443      	add	r3, r8
   14024:	464a      	mov	r2, r9
   14026:	1a9b      	subs	r3, r3, r2
   14028:	465a      	mov	r2, fp
   1402a:	0412      	lsls	r2, r2, #16
   1402c:	432a      	orrs	r2, r5
   1402e:	9903      	ldr	r1, [sp, #12]
   14030:	4693      	mov	fp, r2
   14032:	0c10      	lsrs	r0, r2, #16
   14034:	0c0a      	lsrs	r2, r1, #16
   14036:	4691      	mov	r9, r2
   14038:	0409      	lsls	r1, r1, #16
   1403a:	465a      	mov	r2, fp
   1403c:	0c09      	lsrs	r1, r1, #16
   1403e:	464e      	mov	r6, r9
   14040:	000d      	movs	r5, r1
   14042:	0412      	lsls	r2, r2, #16
   14044:	0c12      	lsrs	r2, r2, #16
   14046:	4345      	muls	r5, r0
   14048:	9105      	str	r1, [sp, #20]
   1404a:	4351      	muls	r1, r2
   1404c:	4372      	muls	r2, r6
   1404e:	4370      	muls	r0, r6
   14050:	1952      	adds	r2, r2, r5
   14052:	0c0e      	lsrs	r6, r1, #16
   14054:	18b2      	adds	r2, r6, r2
   14056:	4295      	cmp	r5, r2
   14058:	d903      	bls.n	14062 <__aeabi_ddiv+0x2de>
   1405a:	2580      	movs	r5, #128	; 0x80
   1405c:	026d      	lsls	r5, r5, #9
   1405e:	46ac      	mov	ip, r5
   14060:	4460      	add	r0, ip
   14062:	0c15      	lsrs	r5, r2, #16
   14064:	0409      	lsls	r1, r1, #16
   14066:	0412      	lsls	r2, r2, #16
   14068:	0c09      	lsrs	r1, r1, #16
   1406a:	1828      	adds	r0, r5, r0
   1406c:	1852      	adds	r2, r2, r1
   1406e:	4283      	cmp	r3, r0
   14070:	d200      	bcs.n	14074 <__aeabi_ddiv+0x2f0>
   14072:	e0ce      	b.n	14212 <__aeabi_ddiv+0x48e>
   14074:	d100      	bne.n	14078 <__aeabi_ddiv+0x2f4>
   14076:	e0c8      	b.n	1420a <__aeabi_ddiv+0x486>
   14078:	1a1d      	subs	r5, r3, r0
   1407a:	4653      	mov	r3, sl
   1407c:	1a9e      	subs	r6, r3, r2
   1407e:	45b2      	cmp	sl, r6
   14080:	4192      	sbcs	r2, r2
   14082:	4252      	negs	r2, r2
   14084:	1aab      	subs	r3, r5, r2
   14086:	469a      	mov	sl, r3
   14088:	4598      	cmp	r8, r3
   1408a:	d100      	bne.n	1408e <__aeabi_ddiv+0x30a>
   1408c:	e117      	b.n	142be <__aeabi_ddiv+0x53a>
   1408e:	0039      	movs	r1, r7
   14090:	0018      	movs	r0, r3
   14092:	f7fe f963 	bl	1235c <__udivsi3>
   14096:	9b01      	ldr	r3, [sp, #4]
   14098:	0005      	movs	r5, r0
   1409a:	4343      	muls	r3, r0
   1409c:	0039      	movs	r1, r7
   1409e:	4650      	mov	r0, sl
   140a0:	9304      	str	r3, [sp, #16]
   140a2:	f7fe f9e1 	bl	12468 <__aeabi_uidivmod>
   140a6:	9804      	ldr	r0, [sp, #16]
   140a8:	040b      	lsls	r3, r1, #16
   140aa:	0c31      	lsrs	r1, r6, #16
   140ac:	4319      	orrs	r1, r3
   140ae:	4288      	cmp	r0, r1
   140b0:	d909      	bls.n	140c6 <__aeabi_ddiv+0x342>
   140b2:	4441      	add	r1, r8
   140b4:	1e6b      	subs	r3, r5, #1
   140b6:	4588      	cmp	r8, r1
   140b8:	d900      	bls.n	140bc <__aeabi_ddiv+0x338>
   140ba:	e107      	b.n	142cc <__aeabi_ddiv+0x548>
   140bc:	4288      	cmp	r0, r1
   140be:	d800      	bhi.n	140c2 <__aeabi_ddiv+0x33e>
   140c0:	e104      	b.n	142cc <__aeabi_ddiv+0x548>
   140c2:	3d02      	subs	r5, #2
   140c4:	4441      	add	r1, r8
   140c6:	9b04      	ldr	r3, [sp, #16]
   140c8:	1acb      	subs	r3, r1, r3
   140ca:	0018      	movs	r0, r3
   140cc:	0039      	movs	r1, r7
   140ce:	9304      	str	r3, [sp, #16]
   140d0:	f7fe f944 	bl	1235c <__udivsi3>
   140d4:	9b01      	ldr	r3, [sp, #4]
   140d6:	4682      	mov	sl, r0
   140d8:	4343      	muls	r3, r0
   140da:	0039      	movs	r1, r7
   140dc:	9804      	ldr	r0, [sp, #16]
   140de:	9301      	str	r3, [sp, #4]
   140e0:	f7fe f9c2 	bl	12468 <__aeabi_uidivmod>
   140e4:	9801      	ldr	r0, [sp, #4]
   140e6:	040b      	lsls	r3, r1, #16
   140e8:	0431      	lsls	r1, r6, #16
   140ea:	0c09      	lsrs	r1, r1, #16
   140ec:	4319      	orrs	r1, r3
   140ee:	4288      	cmp	r0, r1
   140f0:	d90d      	bls.n	1410e <__aeabi_ddiv+0x38a>
   140f2:	4653      	mov	r3, sl
   140f4:	4441      	add	r1, r8
   140f6:	3b01      	subs	r3, #1
   140f8:	4588      	cmp	r8, r1
   140fa:	d900      	bls.n	140fe <__aeabi_ddiv+0x37a>
   140fc:	e0e8      	b.n	142d0 <__aeabi_ddiv+0x54c>
   140fe:	4288      	cmp	r0, r1
   14100:	d800      	bhi.n	14104 <__aeabi_ddiv+0x380>
   14102:	e0e5      	b.n	142d0 <__aeabi_ddiv+0x54c>
   14104:	2302      	movs	r3, #2
   14106:	425b      	negs	r3, r3
   14108:	469c      	mov	ip, r3
   1410a:	4441      	add	r1, r8
   1410c:	44e2      	add	sl, ip
   1410e:	9b01      	ldr	r3, [sp, #4]
   14110:	042d      	lsls	r5, r5, #16
   14112:	1ace      	subs	r6, r1, r3
   14114:	4651      	mov	r1, sl
   14116:	4329      	orrs	r1, r5
   14118:	9d05      	ldr	r5, [sp, #20]
   1411a:	464f      	mov	r7, r9
   1411c:	002a      	movs	r2, r5
   1411e:	040b      	lsls	r3, r1, #16
   14120:	0c08      	lsrs	r0, r1, #16
   14122:	0c1b      	lsrs	r3, r3, #16
   14124:	435a      	muls	r2, r3
   14126:	4345      	muls	r5, r0
   14128:	437b      	muls	r3, r7
   1412a:	4378      	muls	r0, r7
   1412c:	195b      	adds	r3, r3, r5
   1412e:	0c17      	lsrs	r7, r2, #16
   14130:	18fb      	adds	r3, r7, r3
   14132:	429d      	cmp	r5, r3
   14134:	d903      	bls.n	1413e <__aeabi_ddiv+0x3ba>
   14136:	2580      	movs	r5, #128	; 0x80
   14138:	026d      	lsls	r5, r5, #9
   1413a:	46ac      	mov	ip, r5
   1413c:	4460      	add	r0, ip
   1413e:	0c1d      	lsrs	r5, r3, #16
   14140:	0412      	lsls	r2, r2, #16
   14142:	041b      	lsls	r3, r3, #16
   14144:	0c12      	lsrs	r2, r2, #16
   14146:	1828      	adds	r0, r5, r0
   14148:	189b      	adds	r3, r3, r2
   1414a:	4286      	cmp	r6, r0
   1414c:	d200      	bcs.n	14150 <__aeabi_ddiv+0x3cc>
   1414e:	e093      	b.n	14278 <__aeabi_ddiv+0x4f4>
   14150:	d100      	bne.n	14154 <__aeabi_ddiv+0x3d0>
   14152:	e08e      	b.n	14272 <__aeabi_ddiv+0x4ee>
   14154:	2301      	movs	r3, #1
   14156:	4319      	orrs	r1, r3
   14158:	4ba0      	ldr	r3, [pc, #640]	; (143dc <__aeabi_ddiv+0x658>)
   1415a:	18e3      	adds	r3, r4, r3
   1415c:	2b00      	cmp	r3, #0
   1415e:	dc00      	bgt.n	14162 <__aeabi_ddiv+0x3de>
   14160:	e099      	b.n	14296 <__aeabi_ddiv+0x512>
   14162:	074a      	lsls	r2, r1, #29
   14164:	d000      	beq.n	14168 <__aeabi_ddiv+0x3e4>
   14166:	e09e      	b.n	142a6 <__aeabi_ddiv+0x522>
   14168:	465a      	mov	r2, fp
   1416a:	01d2      	lsls	r2, r2, #7
   1416c:	d506      	bpl.n	1417c <__aeabi_ddiv+0x3f8>
   1416e:	465a      	mov	r2, fp
   14170:	4b9b      	ldr	r3, [pc, #620]	; (143e0 <__aeabi_ddiv+0x65c>)
   14172:	401a      	ands	r2, r3
   14174:	2380      	movs	r3, #128	; 0x80
   14176:	4693      	mov	fp, r2
   14178:	00db      	lsls	r3, r3, #3
   1417a:	18e3      	adds	r3, r4, r3
   1417c:	4a99      	ldr	r2, [pc, #612]	; (143e4 <__aeabi_ddiv+0x660>)
   1417e:	4293      	cmp	r3, r2
   14180:	dd68      	ble.n	14254 <__aeabi_ddiv+0x4d0>
   14182:	2301      	movs	r3, #1
   14184:	9a02      	ldr	r2, [sp, #8]
   14186:	4c98      	ldr	r4, [pc, #608]	; (143e8 <__aeabi_ddiv+0x664>)
   14188:	401a      	ands	r2, r3
   1418a:	2300      	movs	r3, #0
   1418c:	4694      	mov	ip, r2
   1418e:	4698      	mov	r8, r3
   14190:	2200      	movs	r2, #0
   14192:	e6c5      	b.n	13f20 <__aeabi_ddiv+0x19c>
   14194:	2280      	movs	r2, #128	; 0x80
   14196:	464b      	mov	r3, r9
   14198:	0312      	lsls	r2, r2, #12
   1419a:	4213      	tst	r3, r2
   1419c:	d00a      	beq.n	141b4 <__aeabi_ddiv+0x430>
   1419e:	465b      	mov	r3, fp
   141a0:	4213      	tst	r3, r2
   141a2:	d106      	bne.n	141b2 <__aeabi_ddiv+0x42e>
   141a4:	431a      	orrs	r2, r3
   141a6:	0312      	lsls	r2, r2, #12
   141a8:	0b12      	lsrs	r2, r2, #12
   141aa:	46ac      	mov	ip, r5
   141ac:	4688      	mov	r8, r1
   141ae:	4c8e      	ldr	r4, [pc, #568]	; (143e8 <__aeabi_ddiv+0x664>)
   141b0:	e6b6      	b.n	13f20 <__aeabi_ddiv+0x19c>
   141b2:	464b      	mov	r3, r9
   141b4:	431a      	orrs	r2, r3
   141b6:	0312      	lsls	r2, r2, #12
   141b8:	0b12      	lsrs	r2, r2, #12
   141ba:	46bc      	mov	ip, r7
   141bc:	4c8a      	ldr	r4, [pc, #552]	; (143e8 <__aeabi_ddiv+0x664>)
   141be:	e6af      	b.n	13f20 <__aeabi_ddiv+0x19c>
   141c0:	0003      	movs	r3, r0
   141c2:	465a      	mov	r2, fp
   141c4:	3b28      	subs	r3, #40	; 0x28
   141c6:	409a      	lsls	r2, r3
   141c8:	2300      	movs	r3, #0
   141ca:	4691      	mov	r9, r2
   141cc:	4698      	mov	r8, r3
   141ce:	e657      	b.n	13e80 <__aeabi_ddiv+0xfc>
   141d0:	4658      	mov	r0, fp
   141d2:	f001 f869 	bl	152a8 <__clzsi2>
   141d6:	3020      	adds	r0, #32
   141d8:	e640      	b.n	13e5c <__aeabi_ddiv+0xd8>
   141da:	0003      	movs	r3, r0
   141dc:	4652      	mov	r2, sl
   141de:	3b28      	subs	r3, #40	; 0x28
   141e0:	409a      	lsls	r2, r3
   141e2:	2100      	movs	r1, #0
   141e4:	4693      	mov	fp, r2
   141e6:	e677      	b.n	13ed8 <__aeabi_ddiv+0x154>
   141e8:	f001 f85e 	bl	152a8 <__clzsi2>
   141ec:	3020      	adds	r0, #32
   141ee:	e65f      	b.n	13eb0 <__aeabi_ddiv+0x12c>
   141f0:	4588      	cmp	r8, r1
   141f2:	d200      	bcs.n	141f6 <__aeabi_ddiv+0x472>
   141f4:	e6c7      	b.n	13f86 <__aeabi_ddiv+0x202>
   141f6:	464b      	mov	r3, r9
   141f8:	07de      	lsls	r6, r3, #31
   141fa:	085d      	lsrs	r5, r3, #1
   141fc:	4643      	mov	r3, r8
   141fe:	085b      	lsrs	r3, r3, #1
   14200:	431e      	orrs	r6, r3
   14202:	4643      	mov	r3, r8
   14204:	07db      	lsls	r3, r3, #31
   14206:	469a      	mov	sl, r3
   14208:	e6c2      	b.n	13f90 <__aeabi_ddiv+0x20c>
   1420a:	2500      	movs	r5, #0
   1420c:	4592      	cmp	sl, r2
   1420e:	d300      	bcc.n	14212 <__aeabi_ddiv+0x48e>
   14210:	e733      	b.n	1407a <__aeabi_ddiv+0x2f6>
   14212:	9e03      	ldr	r6, [sp, #12]
   14214:	4659      	mov	r1, fp
   14216:	46b4      	mov	ip, r6
   14218:	44e2      	add	sl, ip
   1421a:	45b2      	cmp	sl, r6
   1421c:	41ad      	sbcs	r5, r5
   1421e:	426d      	negs	r5, r5
   14220:	4445      	add	r5, r8
   14222:	18eb      	adds	r3, r5, r3
   14224:	3901      	subs	r1, #1
   14226:	4598      	cmp	r8, r3
   14228:	d207      	bcs.n	1423a <__aeabi_ddiv+0x4b6>
   1422a:	4298      	cmp	r0, r3
   1422c:	d900      	bls.n	14230 <__aeabi_ddiv+0x4ac>
   1422e:	e07f      	b.n	14330 <__aeabi_ddiv+0x5ac>
   14230:	d100      	bne.n	14234 <__aeabi_ddiv+0x4b0>
   14232:	e0bc      	b.n	143ae <__aeabi_ddiv+0x62a>
   14234:	1a1d      	subs	r5, r3, r0
   14236:	468b      	mov	fp, r1
   14238:	e71f      	b.n	1407a <__aeabi_ddiv+0x2f6>
   1423a:	4598      	cmp	r8, r3
   1423c:	d1fa      	bne.n	14234 <__aeabi_ddiv+0x4b0>
   1423e:	9d03      	ldr	r5, [sp, #12]
   14240:	4555      	cmp	r5, sl
   14242:	d9f2      	bls.n	1422a <__aeabi_ddiv+0x4a6>
   14244:	4643      	mov	r3, r8
   14246:	468b      	mov	fp, r1
   14248:	1a1d      	subs	r5, r3, r0
   1424a:	e716      	b.n	1407a <__aeabi_ddiv+0x2f6>
   1424c:	469b      	mov	fp, r3
   1424e:	e6ca      	b.n	13fe6 <__aeabi_ddiv+0x262>
   14250:	0015      	movs	r5, r2
   14252:	e6e7      	b.n	14024 <__aeabi_ddiv+0x2a0>
   14254:	465a      	mov	r2, fp
   14256:	08c9      	lsrs	r1, r1, #3
   14258:	0752      	lsls	r2, r2, #29
   1425a:	430a      	orrs	r2, r1
   1425c:	055b      	lsls	r3, r3, #21
   1425e:	4690      	mov	r8, r2
   14260:	0d5c      	lsrs	r4, r3, #21
   14262:	465a      	mov	r2, fp
   14264:	2301      	movs	r3, #1
   14266:	9902      	ldr	r1, [sp, #8]
   14268:	0252      	lsls	r2, r2, #9
   1426a:	4019      	ands	r1, r3
   1426c:	0b12      	lsrs	r2, r2, #12
   1426e:	468c      	mov	ip, r1
   14270:	e656      	b.n	13f20 <__aeabi_ddiv+0x19c>
   14272:	2b00      	cmp	r3, #0
   14274:	d100      	bne.n	14278 <__aeabi_ddiv+0x4f4>
   14276:	e76f      	b.n	14158 <__aeabi_ddiv+0x3d4>
   14278:	4446      	add	r6, r8
   1427a:	1e4a      	subs	r2, r1, #1
   1427c:	45b0      	cmp	r8, r6
   1427e:	d929      	bls.n	142d4 <__aeabi_ddiv+0x550>
   14280:	0011      	movs	r1, r2
   14282:	4286      	cmp	r6, r0
   14284:	d000      	beq.n	14288 <__aeabi_ddiv+0x504>
   14286:	e765      	b.n	14154 <__aeabi_ddiv+0x3d0>
   14288:	9a03      	ldr	r2, [sp, #12]
   1428a:	4293      	cmp	r3, r2
   1428c:	d000      	beq.n	14290 <__aeabi_ddiv+0x50c>
   1428e:	e761      	b.n	14154 <__aeabi_ddiv+0x3d0>
   14290:	e762      	b.n	14158 <__aeabi_ddiv+0x3d4>
   14292:	2101      	movs	r1, #1
   14294:	4249      	negs	r1, r1
   14296:	2001      	movs	r0, #1
   14298:	1ac2      	subs	r2, r0, r3
   1429a:	2a38      	cmp	r2, #56	; 0x38
   1429c:	dd21      	ble.n	142e2 <__aeabi_ddiv+0x55e>
   1429e:	9b02      	ldr	r3, [sp, #8]
   142a0:	4003      	ands	r3, r0
   142a2:	469c      	mov	ip, r3
   142a4:	e638      	b.n	13f18 <__aeabi_ddiv+0x194>
   142a6:	220f      	movs	r2, #15
   142a8:	400a      	ands	r2, r1
   142aa:	2a04      	cmp	r2, #4
   142ac:	d100      	bne.n	142b0 <__aeabi_ddiv+0x52c>
   142ae:	e75b      	b.n	14168 <__aeabi_ddiv+0x3e4>
   142b0:	000a      	movs	r2, r1
   142b2:	1d11      	adds	r1, r2, #4
   142b4:	4291      	cmp	r1, r2
   142b6:	4192      	sbcs	r2, r2
   142b8:	4252      	negs	r2, r2
   142ba:	4493      	add	fp, r2
   142bc:	e754      	b.n	14168 <__aeabi_ddiv+0x3e4>
   142be:	4b47      	ldr	r3, [pc, #284]	; (143dc <__aeabi_ddiv+0x658>)
   142c0:	18e3      	adds	r3, r4, r3
   142c2:	2b00      	cmp	r3, #0
   142c4:	dde5      	ble.n	14292 <__aeabi_ddiv+0x50e>
   142c6:	2201      	movs	r2, #1
   142c8:	4252      	negs	r2, r2
   142ca:	e7f2      	b.n	142b2 <__aeabi_ddiv+0x52e>
   142cc:	001d      	movs	r5, r3
   142ce:	e6fa      	b.n	140c6 <__aeabi_ddiv+0x342>
   142d0:	469a      	mov	sl, r3
   142d2:	e71c      	b.n	1410e <__aeabi_ddiv+0x38a>
   142d4:	42b0      	cmp	r0, r6
   142d6:	d839      	bhi.n	1434c <__aeabi_ddiv+0x5c8>
   142d8:	d06e      	beq.n	143b8 <__aeabi_ddiv+0x634>
   142da:	0011      	movs	r1, r2
   142dc:	e73a      	b.n	14154 <__aeabi_ddiv+0x3d0>
   142de:	9302      	str	r3, [sp, #8]
   142e0:	e73a      	b.n	14158 <__aeabi_ddiv+0x3d4>
   142e2:	2a1f      	cmp	r2, #31
   142e4:	dc3c      	bgt.n	14360 <__aeabi_ddiv+0x5dc>
   142e6:	2320      	movs	r3, #32
   142e8:	1a9b      	subs	r3, r3, r2
   142ea:	000c      	movs	r4, r1
   142ec:	4658      	mov	r0, fp
   142ee:	4099      	lsls	r1, r3
   142f0:	4098      	lsls	r0, r3
   142f2:	1e4b      	subs	r3, r1, #1
   142f4:	4199      	sbcs	r1, r3
   142f6:	465b      	mov	r3, fp
   142f8:	40d4      	lsrs	r4, r2
   142fa:	40d3      	lsrs	r3, r2
   142fc:	4320      	orrs	r0, r4
   142fe:	4308      	orrs	r0, r1
   14300:	001a      	movs	r2, r3
   14302:	0743      	lsls	r3, r0, #29
   14304:	d009      	beq.n	1431a <__aeabi_ddiv+0x596>
   14306:	230f      	movs	r3, #15
   14308:	4003      	ands	r3, r0
   1430a:	2b04      	cmp	r3, #4
   1430c:	d005      	beq.n	1431a <__aeabi_ddiv+0x596>
   1430e:	0001      	movs	r1, r0
   14310:	1d08      	adds	r0, r1, #4
   14312:	4288      	cmp	r0, r1
   14314:	419b      	sbcs	r3, r3
   14316:	425b      	negs	r3, r3
   14318:	18d2      	adds	r2, r2, r3
   1431a:	0213      	lsls	r3, r2, #8
   1431c:	d53a      	bpl.n	14394 <__aeabi_ddiv+0x610>
   1431e:	2301      	movs	r3, #1
   14320:	9a02      	ldr	r2, [sp, #8]
   14322:	2401      	movs	r4, #1
   14324:	401a      	ands	r2, r3
   14326:	2300      	movs	r3, #0
   14328:	4694      	mov	ip, r2
   1432a:	4698      	mov	r8, r3
   1432c:	2200      	movs	r2, #0
   1432e:	e5f7      	b.n	13f20 <__aeabi_ddiv+0x19c>
   14330:	2102      	movs	r1, #2
   14332:	4249      	negs	r1, r1
   14334:	468c      	mov	ip, r1
   14336:	9d03      	ldr	r5, [sp, #12]
   14338:	44e3      	add	fp, ip
   1433a:	46ac      	mov	ip, r5
   1433c:	44e2      	add	sl, ip
   1433e:	45aa      	cmp	sl, r5
   14340:	41ad      	sbcs	r5, r5
   14342:	426d      	negs	r5, r5
   14344:	4445      	add	r5, r8
   14346:	18ed      	adds	r5, r5, r3
   14348:	1a2d      	subs	r5, r5, r0
   1434a:	e696      	b.n	1407a <__aeabi_ddiv+0x2f6>
   1434c:	1e8a      	subs	r2, r1, #2
   1434e:	9903      	ldr	r1, [sp, #12]
   14350:	004d      	lsls	r5, r1, #1
   14352:	428d      	cmp	r5, r1
   14354:	4189      	sbcs	r1, r1
   14356:	4249      	negs	r1, r1
   14358:	4441      	add	r1, r8
   1435a:	1876      	adds	r6, r6, r1
   1435c:	9503      	str	r5, [sp, #12]
   1435e:	e78f      	b.n	14280 <__aeabi_ddiv+0x4fc>
   14360:	201f      	movs	r0, #31
   14362:	4240      	negs	r0, r0
   14364:	1ac3      	subs	r3, r0, r3
   14366:	4658      	mov	r0, fp
   14368:	40d8      	lsrs	r0, r3
   1436a:	0003      	movs	r3, r0
   1436c:	2a20      	cmp	r2, #32
   1436e:	d028      	beq.n	143c2 <__aeabi_ddiv+0x63e>
   14370:	2040      	movs	r0, #64	; 0x40
   14372:	465d      	mov	r5, fp
   14374:	1a82      	subs	r2, r0, r2
   14376:	4095      	lsls	r5, r2
   14378:	4329      	orrs	r1, r5
   1437a:	1e4a      	subs	r2, r1, #1
   1437c:	4191      	sbcs	r1, r2
   1437e:	4319      	orrs	r1, r3
   14380:	2307      	movs	r3, #7
   14382:	2200      	movs	r2, #0
   14384:	400b      	ands	r3, r1
   14386:	d009      	beq.n	1439c <__aeabi_ddiv+0x618>
   14388:	230f      	movs	r3, #15
   1438a:	2200      	movs	r2, #0
   1438c:	400b      	ands	r3, r1
   1438e:	0008      	movs	r0, r1
   14390:	2b04      	cmp	r3, #4
   14392:	d1bd      	bne.n	14310 <__aeabi_ddiv+0x58c>
   14394:	0001      	movs	r1, r0
   14396:	0753      	lsls	r3, r2, #29
   14398:	0252      	lsls	r2, r2, #9
   1439a:	0b12      	lsrs	r2, r2, #12
   1439c:	08c9      	lsrs	r1, r1, #3
   1439e:	4319      	orrs	r1, r3
   143a0:	2301      	movs	r3, #1
   143a2:	4688      	mov	r8, r1
   143a4:	9902      	ldr	r1, [sp, #8]
   143a6:	2400      	movs	r4, #0
   143a8:	4019      	ands	r1, r3
   143aa:	468c      	mov	ip, r1
   143ac:	e5b8      	b.n	13f20 <__aeabi_ddiv+0x19c>
   143ae:	4552      	cmp	r2, sl
   143b0:	d8be      	bhi.n	14330 <__aeabi_ddiv+0x5ac>
   143b2:	468b      	mov	fp, r1
   143b4:	2500      	movs	r5, #0
   143b6:	e660      	b.n	1407a <__aeabi_ddiv+0x2f6>
   143b8:	9d03      	ldr	r5, [sp, #12]
   143ba:	429d      	cmp	r5, r3
   143bc:	d3c6      	bcc.n	1434c <__aeabi_ddiv+0x5c8>
   143be:	0011      	movs	r1, r2
   143c0:	e762      	b.n	14288 <__aeabi_ddiv+0x504>
   143c2:	2500      	movs	r5, #0
   143c4:	e7d8      	b.n	14378 <__aeabi_ddiv+0x5f4>
   143c6:	2280      	movs	r2, #128	; 0x80
   143c8:	465b      	mov	r3, fp
   143ca:	0312      	lsls	r2, r2, #12
   143cc:	431a      	orrs	r2, r3
   143ce:	9b01      	ldr	r3, [sp, #4]
   143d0:	0312      	lsls	r2, r2, #12
   143d2:	0b12      	lsrs	r2, r2, #12
   143d4:	469c      	mov	ip, r3
   143d6:	4688      	mov	r8, r1
   143d8:	4c03      	ldr	r4, [pc, #12]	; (143e8 <__aeabi_ddiv+0x664>)
   143da:	e5a1      	b.n	13f20 <__aeabi_ddiv+0x19c>
   143dc:	000003ff 	.word	0x000003ff
   143e0:	feffffff 	.word	0xfeffffff
   143e4:	000007fe 	.word	0x000007fe
   143e8:	000007ff 	.word	0x000007ff

000143ec <__aeabi_dmul>:
   143ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   143ee:	4657      	mov	r7, sl
   143f0:	4645      	mov	r5, r8
   143f2:	46de      	mov	lr, fp
   143f4:	464e      	mov	r6, r9
   143f6:	b5e0      	push	{r5, r6, r7, lr}
   143f8:	030c      	lsls	r4, r1, #12
   143fa:	4698      	mov	r8, r3
   143fc:	004e      	lsls	r6, r1, #1
   143fe:	0b23      	lsrs	r3, r4, #12
   14400:	b087      	sub	sp, #28
   14402:	0007      	movs	r7, r0
   14404:	4692      	mov	sl, r2
   14406:	469b      	mov	fp, r3
   14408:	0d76      	lsrs	r6, r6, #21
   1440a:	0fcd      	lsrs	r5, r1, #31
   1440c:	2e00      	cmp	r6, #0
   1440e:	d06b      	beq.n	144e8 <__aeabi_dmul+0xfc>
   14410:	4b6d      	ldr	r3, [pc, #436]	; (145c8 <__aeabi_dmul+0x1dc>)
   14412:	429e      	cmp	r6, r3
   14414:	d035      	beq.n	14482 <__aeabi_dmul+0x96>
   14416:	2480      	movs	r4, #128	; 0x80
   14418:	465b      	mov	r3, fp
   1441a:	0f42      	lsrs	r2, r0, #29
   1441c:	0424      	lsls	r4, r4, #16
   1441e:	00db      	lsls	r3, r3, #3
   14420:	4314      	orrs	r4, r2
   14422:	431c      	orrs	r4, r3
   14424:	00c3      	lsls	r3, r0, #3
   14426:	4699      	mov	r9, r3
   14428:	4b68      	ldr	r3, [pc, #416]	; (145cc <__aeabi_dmul+0x1e0>)
   1442a:	46a3      	mov	fp, r4
   1442c:	469c      	mov	ip, r3
   1442e:	2300      	movs	r3, #0
   14430:	2700      	movs	r7, #0
   14432:	4466      	add	r6, ip
   14434:	9302      	str	r3, [sp, #8]
   14436:	4643      	mov	r3, r8
   14438:	031c      	lsls	r4, r3, #12
   1443a:	005a      	lsls	r2, r3, #1
   1443c:	0fdb      	lsrs	r3, r3, #31
   1443e:	4650      	mov	r0, sl
   14440:	0b24      	lsrs	r4, r4, #12
   14442:	0d52      	lsrs	r2, r2, #21
   14444:	4698      	mov	r8, r3
   14446:	d100      	bne.n	1444a <__aeabi_dmul+0x5e>
   14448:	e076      	b.n	14538 <__aeabi_dmul+0x14c>
   1444a:	4b5f      	ldr	r3, [pc, #380]	; (145c8 <__aeabi_dmul+0x1dc>)
   1444c:	429a      	cmp	r2, r3
   1444e:	d06d      	beq.n	1452c <__aeabi_dmul+0x140>
   14450:	2380      	movs	r3, #128	; 0x80
   14452:	0f41      	lsrs	r1, r0, #29
   14454:	041b      	lsls	r3, r3, #16
   14456:	430b      	orrs	r3, r1
   14458:	495c      	ldr	r1, [pc, #368]	; (145cc <__aeabi_dmul+0x1e0>)
   1445a:	00e4      	lsls	r4, r4, #3
   1445c:	468c      	mov	ip, r1
   1445e:	431c      	orrs	r4, r3
   14460:	00c3      	lsls	r3, r0, #3
   14462:	2000      	movs	r0, #0
   14464:	4462      	add	r2, ip
   14466:	4641      	mov	r1, r8
   14468:	18b6      	adds	r6, r6, r2
   1446a:	4069      	eors	r1, r5
   1446c:	1c72      	adds	r2, r6, #1
   1446e:	9101      	str	r1, [sp, #4]
   14470:	4694      	mov	ip, r2
   14472:	4307      	orrs	r7, r0
   14474:	2f0f      	cmp	r7, #15
   14476:	d900      	bls.n	1447a <__aeabi_dmul+0x8e>
   14478:	e0b0      	b.n	145dc <__aeabi_dmul+0x1f0>
   1447a:	4a55      	ldr	r2, [pc, #340]	; (145d0 <__aeabi_dmul+0x1e4>)
   1447c:	00bf      	lsls	r7, r7, #2
   1447e:	59d2      	ldr	r2, [r2, r7]
   14480:	4697      	mov	pc, r2
   14482:	465b      	mov	r3, fp
   14484:	4303      	orrs	r3, r0
   14486:	4699      	mov	r9, r3
   14488:	d000      	beq.n	1448c <__aeabi_dmul+0xa0>
   1448a:	e087      	b.n	1459c <__aeabi_dmul+0x1b0>
   1448c:	2300      	movs	r3, #0
   1448e:	469b      	mov	fp, r3
   14490:	3302      	adds	r3, #2
   14492:	2708      	movs	r7, #8
   14494:	9302      	str	r3, [sp, #8]
   14496:	e7ce      	b.n	14436 <__aeabi_dmul+0x4a>
   14498:	4642      	mov	r2, r8
   1449a:	9201      	str	r2, [sp, #4]
   1449c:	2802      	cmp	r0, #2
   1449e:	d067      	beq.n	14570 <__aeabi_dmul+0x184>
   144a0:	2803      	cmp	r0, #3
   144a2:	d100      	bne.n	144a6 <__aeabi_dmul+0xba>
   144a4:	e20e      	b.n	148c4 <__aeabi_dmul+0x4d8>
   144a6:	2801      	cmp	r0, #1
   144a8:	d000      	beq.n	144ac <__aeabi_dmul+0xc0>
   144aa:	e162      	b.n	14772 <__aeabi_dmul+0x386>
   144ac:	2300      	movs	r3, #0
   144ae:	2400      	movs	r4, #0
   144b0:	2200      	movs	r2, #0
   144b2:	4699      	mov	r9, r3
   144b4:	9901      	ldr	r1, [sp, #4]
   144b6:	4001      	ands	r1, r0
   144b8:	b2cd      	uxtb	r5, r1
   144ba:	2100      	movs	r1, #0
   144bc:	0312      	lsls	r2, r2, #12
   144be:	0d0b      	lsrs	r3, r1, #20
   144c0:	0b12      	lsrs	r2, r2, #12
   144c2:	051b      	lsls	r3, r3, #20
   144c4:	4313      	orrs	r3, r2
   144c6:	4a43      	ldr	r2, [pc, #268]	; (145d4 <__aeabi_dmul+0x1e8>)
   144c8:	0524      	lsls	r4, r4, #20
   144ca:	4013      	ands	r3, r2
   144cc:	431c      	orrs	r4, r3
   144ce:	0064      	lsls	r4, r4, #1
   144d0:	07ed      	lsls	r5, r5, #31
   144d2:	0864      	lsrs	r4, r4, #1
   144d4:	432c      	orrs	r4, r5
   144d6:	4648      	mov	r0, r9
   144d8:	0021      	movs	r1, r4
   144da:	b007      	add	sp, #28
   144dc:	bc3c      	pop	{r2, r3, r4, r5}
   144de:	4690      	mov	r8, r2
   144e0:	4699      	mov	r9, r3
   144e2:	46a2      	mov	sl, r4
   144e4:	46ab      	mov	fp, r5
   144e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   144e8:	4303      	orrs	r3, r0
   144ea:	4699      	mov	r9, r3
   144ec:	d04f      	beq.n	1458e <__aeabi_dmul+0x1a2>
   144ee:	465b      	mov	r3, fp
   144f0:	2b00      	cmp	r3, #0
   144f2:	d100      	bne.n	144f6 <__aeabi_dmul+0x10a>
   144f4:	e189      	b.n	1480a <__aeabi_dmul+0x41e>
   144f6:	4658      	mov	r0, fp
   144f8:	f000 fed6 	bl	152a8 <__clzsi2>
   144fc:	0003      	movs	r3, r0
   144fe:	3b0b      	subs	r3, #11
   14500:	2b1c      	cmp	r3, #28
   14502:	dd00      	ble.n	14506 <__aeabi_dmul+0x11a>
   14504:	e17a      	b.n	147fc <__aeabi_dmul+0x410>
   14506:	221d      	movs	r2, #29
   14508:	1ad3      	subs	r3, r2, r3
   1450a:	003a      	movs	r2, r7
   1450c:	0001      	movs	r1, r0
   1450e:	465c      	mov	r4, fp
   14510:	40da      	lsrs	r2, r3
   14512:	3908      	subs	r1, #8
   14514:	408c      	lsls	r4, r1
   14516:	0013      	movs	r3, r2
   14518:	408f      	lsls	r7, r1
   1451a:	4323      	orrs	r3, r4
   1451c:	469b      	mov	fp, r3
   1451e:	46b9      	mov	r9, r7
   14520:	2300      	movs	r3, #0
   14522:	4e2d      	ldr	r6, [pc, #180]	; (145d8 <__aeabi_dmul+0x1ec>)
   14524:	2700      	movs	r7, #0
   14526:	1a36      	subs	r6, r6, r0
   14528:	9302      	str	r3, [sp, #8]
   1452a:	e784      	b.n	14436 <__aeabi_dmul+0x4a>
   1452c:	4653      	mov	r3, sl
   1452e:	4323      	orrs	r3, r4
   14530:	d12a      	bne.n	14588 <__aeabi_dmul+0x19c>
   14532:	2400      	movs	r4, #0
   14534:	2002      	movs	r0, #2
   14536:	e796      	b.n	14466 <__aeabi_dmul+0x7a>
   14538:	4653      	mov	r3, sl
   1453a:	4323      	orrs	r3, r4
   1453c:	d020      	beq.n	14580 <__aeabi_dmul+0x194>
   1453e:	2c00      	cmp	r4, #0
   14540:	d100      	bne.n	14544 <__aeabi_dmul+0x158>
   14542:	e157      	b.n	147f4 <__aeabi_dmul+0x408>
   14544:	0020      	movs	r0, r4
   14546:	f000 feaf 	bl	152a8 <__clzsi2>
   1454a:	0003      	movs	r3, r0
   1454c:	3b0b      	subs	r3, #11
   1454e:	2b1c      	cmp	r3, #28
   14550:	dd00      	ble.n	14554 <__aeabi_dmul+0x168>
   14552:	e149      	b.n	147e8 <__aeabi_dmul+0x3fc>
   14554:	211d      	movs	r1, #29
   14556:	1acb      	subs	r3, r1, r3
   14558:	4651      	mov	r1, sl
   1455a:	0002      	movs	r2, r0
   1455c:	40d9      	lsrs	r1, r3
   1455e:	4653      	mov	r3, sl
   14560:	3a08      	subs	r2, #8
   14562:	4094      	lsls	r4, r2
   14564:	4093      	lsls	r3, r2
   14566:	430c      	orrs	r4, r1
   14568:	4a1b      	ldr	r2, [pc, #108]	; (145d8 <__aeabi_dmul+0x1ec>)
   1456a:	1a12      	subs	r2, r2, r0
   1456c:	2000      	movs	r0, #0
   1456e:	e77a      	b.n	14466 <__aeabi_dmul+0x7a>
   14570:	2501      	movs	r5, #1
   14572:	9b01      	ldr	r3, [sp, #4]
   14574:	4c14      	ldr	r4, [pc, #80]	; (145c8 <__aeabi_dmul+0x1dc>)
   14576:	401d      	ands	r5, r3
   14578:	2300      	movs	r3, #0
   1457a:	2200      	movs	r2, #0
   1457c:	4699      	mov	r9, r3
   1457e:	e79c      	b.n	144ba <__aeabi_dmul+0xce>
   14580:	2400      	movs	r4, #0
   14582:	2200      	movs	r2, #0
   14584:	2001      	movs	r0, #1
   14586:	e76e      	b.n	14466 <__aeabi_dmul+0x7a>
   14588:	4653      	mov	r3, sl
   1458a:	2003      	movs	r0, #3
   1458c:	e76b      	b.n	14466 <__aeabi_dmul+0x7a>
   1458e:	2300      	movs	r3, #0
   14590:	469b      	mov	fp, r3
   14592:	3301      	adds	r3, #1
   14594:	2704      	movs	r7, #4
   14596:	2600      	movs	r6, #0
   14598:	9302      	str	r3, [sp, #8]
   1459a:	e74c      	b.n	14436 <__aeabi_dmul+0x4a>
   1459c:	2303      	movs	r3, #3
   1459e:	4681      	mov	r9, r0
   145a0:	270c      	movs	r7, #12
   145a2:	9302      	str	r3, [sp, #8]
   145a4:	e747      	b.n	14436 <__aeabi_dmul+0x4a>
   145a6:	2280      	movs	r2, #128	; 0x80
   145a8:	2300      	movs	r3, #0
   145aa:	2500      	movs	r5, #0
   145ac:	0312      	lsls	r2, r2, #12
   145ae:	4699      	mov	r9, r3
   145b0:	4c05      	ldr	r4, [pc, #20]	; (145c8 <__aeabi_dmul+0x1dc>)
   145b2:	e782      	b.n	144ba <__aeabi_dmul+0xce>
   145b4:	465c      	mov	r4, fp
   145b6:	464b      	mov	r3, r9
   145b8:	9802      	ldr	r0, [sp, #8]
   145ba:	e76f      	b.n	1449c <__aeabi_dmul+0xb0>
   145bc:	465c      	mov	r4, fp
   145be:	464b      	mov	r3, r9
   145c0:	9501      	str	r5, [sp, #4]
   145c2:	9802      	ldr	r0, [sp, #8]
   145c4:	e76a      	b.n	1449c <__aeabi_dmul+0xb0>
   145c6:	46c0      	nop			; (mov r8, r8)
   145c8:	000007ff 	.word	0x000007ff
   145cc:	fffffc01 	.word	0xfffffc01
   145d0:	00017cc4 	.word	0x00017cc4
   145d4:	800fffff 	.word	0x800fffff
   145d8:	fffffc0d 	.word	0xfffffc0d
   145dc:	464a      	mov	r2, r9
   145de:	4649      	mov	r1, r9
   145e0:	0c17      	lsrs	r7, r2, #16
   145e2:	0c1a      	lsrs	r2, r3, #16
   145e4:	041b      	lsls	r3, r3, #16
   145e6:	0c1b      	lsrs	r3, r3, #16
   145e8:	0408      	lsls	r0, r1, #16
   145ea:	0019      	movs	r1, r3
   145ec:	0c00      	lsrs	r0, r0, #16
   145ee:	4341      	muls	r1, r0
   145f0:	0015      	movs	r5, r2
   145f2:	4688      	mov	r8, r1
   145f4:	0019      	movs	r1, r3
   145f6:	437d      	muls	r5, r7
   145f8:	4379      	muls	r1, r7
   145fa:	9503      	str	r5, [sp, #12]
   145fc:	4689      	mov	r9, r1
   145fe:	0029      	movs	r1, r5
   14600:	0015      	movs	r5, r2
   14602:	4345      	muls	r5, r0
   14604:	444d      	add	r5, r9
   14606:	9502      	str	r5, [sp, #8]
   14608:	4645      	mov	r5, r8
   1460a:	0c2d      	lsrs	r5, r5, #16
   1460c:	46aa      	mov	sl, r5
   1460e:	9d02      	ldr	r5, [sp, #8]
   14610:	4455      	add	r5, sl
   14612:	45a9      	cmp	r9, r5
   14614:	d906      	bls.n	14624 <__aeabi_dmul+0x238>
   14616:	468a      	mov	sl, r1
   14618:	2180      	movs	r1, #128	; 0x80
   1461a:	0249      	lsls	r1, r1, #9
   1461c:	4689      	mov	r9, r1
   1461e:	44ca      	add	sl, r9
   14620:	4651      	mov	r1, sl
   14622:	9103      	str	r1, [sp, #12]
   14624:	0c29      	lsrs	r1, r5, #16
   14626:	9104      	str	r1, [sp, #16]
   14628:	4641      	mov	r1, r8
   1462a:	0409      	lsls	r1, r1, #16
   1462c:	042d      	lsls	r5, r5, #16
   1462e:	0c09      	lsrs	r1, r1, #16
   14630:	4688      	mov	r8, r1
   14632:	0029      	movs	r1, r5
   14634:	0c25      	lsrs	r5, r4, #16
   14636:	0424      	lsls	r4, r4, #16
   14638:	4441      	add	r1, r8
   1463a:	0c24      	lsrs	r4, r4, #16
   1463c:	9105      	str	r1, [sp, #20]
   1463e:	0021      	movs	r1, r4
   14640:	4341      	muls	r1, r0
   14642:	4688      	mov	r8, r1
   14644:	0021      	movs	r1, r4
   14646:	4379      	muls	r1, r7
   14648:	468a      	mov	sl, r1
   1464a:	4368      	muls	r0, r5
   1464c:	4641      	mov	r1, r8
   1464e:	4450      	add	r0, sl
   14650:	4681      	mov	r9, r0
   14652:	0c08      	lsrs	r0, r1, #16
   14654:	4448      	add	r0, r9
   14656:	436f      	muls	r7, r5
   14658:	4582      	cmp	sl, r0
   1465a:	d903      	bls.n	14664 <__aeabi_dmul+0x278>
   1465c:	2180      	movs	r1, #128	; 0x80
   1465e:	0249      	lsls	r1, r1, #9
   14660:	4689      	mov	r9, r1
   14662:	444f      	add	r7, r9
   14664:	0c01      	lsrs	r1, r0, #16
   14666:	4689      	mov	r9, r1
   14668:	0039      	movs	r1, r7
   1466a:	4449      	add	r1, r9
   1466c:	9102      	str	r1, [sp, #8]
   1466e:	4641      	mov	r1, r8
   14670:	040f      	lsls	r7, r1, #16
   14672:	9904      	ldr	r1, [sp, #16]
   14674:	0c3f      	lsrs	r7, r7, #16
   14676:	4688      	mov	r8, r1
   14678:	0400      	lsls	r0, r0, #16
   1467a:	19c0      	adds	r0, r0, r7
   1467c:	4480      	add	r8, r0
   1467e:	4641      	mov	r1, r8
   14680:	9104      	str	r1, [sp, #16]
   14682:	4659      	mov	r1, fp
   14684:	0c0f      	lsrs	r7, r1, #16
   14686:	0409      	lsls	r1, r1, #16
   14688:	0c09      	lsrs	r1, r1, #16
   1468a:	4688      	mov	r8, r1
   1468c:	4359      	muls	r1, r3
   1468e:	468a      	mov	sl, r1
   14690:	0039      	movs	r1, r7
   14692:	4351      	muls	r1, r2
   14694:	4689      	mov	r9, r1
   14696:	4641      	mov	r1, r8
   14698:	434a      	muls	r2, r1
   1469a:	4651      	mov	r1, sl
   1469c:	0c09      	lsrs	r1, r1, #16
   1469e:	468b      	mov	fp, r1
   146a0:	437b      	muls	r3, r7
   146a2:	18d2      	adds	r2, r2, r3
   146a4:	445a      	add	r2, fp
   146a6:	4293      	cmp	r3, r2
   146a8:	d903      	bls.n	146b2 <__aeabi_dmul+0x2c6>
   146aa:	2380      	movs	r3, #128	; 0x80
   146ac:	025b      	lsls	r3, r3, #9
   146ae:	469b      	mov	fp, r3
   146b0:	44d9      	add	r9, fp
   146b2:	4651      	mov	r1, sl
   146b4:	0409      	lsls	r1, r1, #16
   146b6:	0c09      	lsrs	r1, r1, #16
   146b8:	468a      	mov	sl, r1
   146ba:	4641      	mov	r1, r8
   146bc:	4361      	muls	r1, r4
   146be:	437c      	muls	r4, r7
   146c0:	0c13      	lsrs	r3, r2, #16
   146c2:	0412      	lsls	r2, r2, #16
   146c4:	444b      	add	r3, r9
   146c6:	4452      	add	r2, sl
   146c8:	46a1      	mov	r9, r4
   146ca:	468a      	mov	sl, r1
   146cc:	003c      	movs	r4, r7
   146ce:	4641      	mov	r1, r8
   146d0:	436c      	muls	r4, r5
   146d2:	434d      	muls	r5, r1
   146d4:	4651      	mov	r1, sl
   146d6:	444d      	add	r5, r9
   146d8:	0c0f      	lsrs	r7, r1, #16
   146da:	197d      	adds	r5, r7, r5
   146dc:	45a9      	cmp	r9, r5
   146de:	d903      	bls.n	146e8 <__aeabi_dmul+0x2fc>
   146e0:	2180      	movs	r1, #128	; 0x80
   146e2:	0249      	lsls	r1, r1, #9
   146e4:	4688      	mov	r8, r1
   146e6:	4444      	add	r4, r8
   146e8:	9f04      	ldr	r7, [sp, #16]
   146ea:	9903      	ldr	r1, [sp, #12]
   146ec:	46b8      	mov	r8, r7
   146ee:	4441      	add	r1, r8
   146f0:	468b      	mov	fp, r1
   146f2:	4583      	cmp	fp, r0
   146f4:	4180      	sbcs	r0, r0
   146f6:	4241      	negs	r1, r0
   146f8:	4688      	mov	r8, r1
   146fa:	4651      	mov	r1, sl
   146fc:	0408      	lsls	r0, r1, #16
   146fe:	042f      	lsls	r7, r5, #16
   14700:	0c00      	lsrs	r0, r0, #16
   14702:	183f      	adds	r7, r7, r0
   14704:	4658      	mov	r0, fp
   14706:	9902      	ldr	r1, [sp, #8]
   14708:	1810      	adds	r0, r2, r0
   1470a:	4689      	mov	r9, r1
   1470c:	4290      	cmp	r0, r2
   1470e:	4192      	sbcs	r2, r2
   14710:	444f      	add	r7, r9
   14712:	46ba      	mov	sl, r7
   14714:	4252      	negs	r2, r2
   14716:	4699      	mov	r9, r3
   14718:	4693      	mov	fp, r2
   1471a:	44c2      	add	sl, r8
   1471c:	44d1      	add	r9, sl
   1471e:	44cb      	add	fp, r9
   14720:	428f      	cmp	r7, r1
   14722:	41bf      	sbcs	r7, r7
   14724:	45c2      	cmp	sl, r8
   14726:	4189      	sbcs	r1, r1
   14728:	4599      	cmp	r9, r3
   1472a:	419b      	sbcs	r3, r3
   1472c:	4593      	cmp	fp, r2
   1472e:	4192      	sbcs	r2, r2
   14730:	427f      	negs	r7, r7
   14732:	4249      	negs	r1, r1
   14734:	0c2d      	lsrs	r5, r5, #16
   14736:	4252      	negs	r2, r2
   14738:	430f      	orrs	r7, r1
   1473a:	425b      	negs	r3, r3
   1473c:	4313      	orrs	r3, r2
   1473e:	197f      	adds	r7, r7, r5
   14740:	18ff      	adds	r7, r7, r3
   14742:	465b      	mov	r3, fp
   14744:	193c      	adds	r4, r7, r4
   14746:	0ddb      	lsrs	r3, r3, #23
   14748:	9a05      	ldr	r2, [sp, #20]
   1474a:	0264      	lsls	r4, r4, #9
   1474c:	431c      	orrs	r4, r3
   1474e:	0243      	lsls	r3, r0, #9
   14750:	4313      	orrs	r3, r2
   14752:	1e5d      	subs	r5, r3, #1
   14754:	41ab      	sbcs	r3, r5
   14756:	465a      	mov	r2, fp
   14758:	0dc0      	lsrs	r0, r0, #23
   1475a:	4303      	orrs	r3, r0
   1475c:	0252      	lsls	r2, r2, #9
   1475e:	4313      	orrs	r3, r2
   14760:	01e2      	lsls	r2, r4, #7
   14762:	d556      	bpl.n	14812 <__aeabi_dmul+0x426>
   14764:	2001      	movs	r0, #1
   14766:	085a      	lsrs	r2, r3, #1
   14768:	4003      	ands	r3, r0
   1476a:	4313      	orrs	r3, r2
   1476c:	07e2      	lsls	r2, r4, #31
   1476e:	4313      	orrs	r3, r2
   14770:	0864      	lsrs	r4, r4, #1
   14772:	485a      	ldr	r0, [pc, #360]	; (148dc <__aeabi_dmul+0x4f0>)
   14774:	4460      	add	r0, ip
   14776:	2800      	cmp	r0, #0
   14778:	dd4d      	ble.n	14816 <__aeabi_dmul+0x42a>
   1477a:	075a      	lsls	r2, r3, #29
   1477c:	d009      	beq.n	14792 <__aeabi_dmul+0x3a6>
   1477e:	220f      	movs	r2, #15
   14780:	401a      	ands	r2, r3
   14782:	2a04      	cmp	r2, #4
   14784:	d005      	beq.n	14792 <__aeabi_dmul+0x3a6>
   14786:	1d1a      	adds	r2, r3, #4
   14788:	429a      	cmp	r2, r3
   1478a:	419b      	sbcs	r3, r3
   1478c:	425b      	negs	r3, r3
   1478e:	18e4      	adds	r4, r4, r3
   14790:	0013      	movs	r3, r2
   14792:	01e2      	lsls	r2, r4, #7
   14794:	d504      	bpl.n	147a0 <__aeabi_dmul+0x3b4>
   14796:	2080      	movs	r0, #128	; 0x80
   14798:	4a51      	ldr	r2, [pc, #324]	; (148e0 <__aeabi_dmul+0x4f4>)
   1479a:	00c0      	lsls	r0, r0, #3
   1479c:	4014      	ands	r4, r2
   1479e:	4460      	add	r0, ip
   147a0:	4a50      	ldr	r2, [pc, #320]	; (148e4 <__aeabi_dmul+0x4f8>)
   147a2:	4290      	cmp	r0, r2
   147a4:	dd00      	ble.n	147a8 <__aeabi_dmul+0x3bc>
   147a6:	e6e3      	b.n	14570 <__aeabi_dmul+0x184>
   147a8:	2501      	movs	r5, #1
   147aa:	08db      	lsrs	r3, r3, #3
   147ac:	0762      	lsls	r2, r4, #29
   147ae:	431a      	orrs	r2, r3
   147b0:	0264      	lsls	r4, r4, #9
   147b2:	9b01      	ldr	r3, [sp, #4]
   147b4:	4691      	mov	r9, r2
   147b6:	0b22      	lsrs	r2, r4, #12
   147b8:	0544      	lsls	r4, r0, #21
   147ba:	0d64      	lsrs	r4, r4, #21
   147bc:	401d      	ands	r5, r3
   147be:	e67c      	b.n	144ba <__aeabi_dmul+0xce>
   147c0:	2280      	movs	r2, #128	; 0x80
   147c2:	4659      	mov	r1, fp
   147c4:	0312      	lsls	r2, r2, #12
   147c6:	4211      	tst	r1, r2
   147c8:	d008      	beq.n	147dc <__aeabi_dmul+0x3f0>
   147ca:	4214      	tst	r4, r2
   147cc:	d106      	bne.n	147dc <__aeabi_dmul+0x3f0>
   147ce:	4322      	orrs	r2, r4
   147d0:	0312      	lsls	r2, r2, #12
   147d2:	0b12      	lsrs	r2, r2, #12
   147d4:	4645      	mov	r5, r8
   147d6:	4699      	mov	r9, r3
   147d8:	4c43      	ldr	r4, [pc, #268]	; (148e8 <__aeabi_dmul+0x4fc>)
   147da:	e66e      	b.n	144ba <__aeabi_dmul+0xce>
   147dc:	465b      	mov	r3, fp
   147de:	431a      	orrs	r2, r3
   147e0:	0312      	lsls	r2, r2, #12
   147e2:	0b12      	lsrs	r2, r2, #12
   147e4:	4c40      	ldr	r4, [pc, #256]	; (148e8 <__aeabi_dmul+0x4fc>)
   147e6:	e668      	b.n	144ba <__aeabi_dmul+0xce>
   147e8:	0003      	movs	r3, r0
   147ea:	4654      	mov	r4, sl
   147ec:	3b28      	subs	r3, #40	; 0x28
   147ee:	409c      	lsls	r4, r3
   147f0:	2300      	movs	r3, #0
   147f2:	e6b9      	b.n	14568 <__aeabi_dmul+0x17c>
   147f4:	f000 fd58 	bl	152a8 <__clzsi2>
   147f8:	3020      	adds	r0, #32
   147fa:	e6a6      	b.n	1454a <__aeabi_dmul+0x15e>
   147fc:	0003      	movs	r3, r0
   147fe:	3b28      	subs	r3, #40	; 0x28
   14800:	409f      	lsls	r7, r3
   14802:	2300      	movs	r3, #0
   14804:	46bb      	mov	fp, r7
   14806:	4699      	mov	r9, r3
   14808:	e68a      	b.n	14520 <__aeabi_dmul+0x134>
   1480a:	f000 fd4d 	bl	152a8 <__clzsi2>
   1480e:	3020      	adds	r0, #32
   14810:	e674      	b.n	144fc <__aeabi_dmul+0x110>
   14812:	46b4      	mov	ip, r6
   14814:	e7ad      	b.n	14772 <__aeabi_dmul+0x386>
   14816:	2501      	movs	r5, #1
   14818:	1a2a      	subs	r2, r5, r0
   1481a:	2a38      	cmp	r2, #56	; 0x38
   1481c:	dd06      	ble.n	1482c <__aeabi_dmul+0x440>
   1481e:	9b01      	ldr	r3, [sp, #4]
   14820:	2400      	movs	r4, #0
   14822:	401d      	ands	r5, r3
   14824:	2300      	movs	r3, #0
   14826:	2200      	movs	r2, #0
   14828:	4699      	mov	r9, r3
   1482a:	e646      	b.n	144ba <__aeabi_dmul+0xce>
   1482c:	2a1f      	cmp	r2, #31
   1482e:	dc21      	bgt.n	14874 <__aeabi_dmul+0x488>
   14830:	2520      	movs	r5, #32
   14832:	0020      	movs	r0, r4
   14834:	1aad      	subs	r5, r5, r2
   14836:	001e      	movs	r6, r3
   14838:	40ab      	lsls	r3, r5
   1483a:	40a8      	lsls	r0, r5
   1483c:	40d6      	lsrs	r6, r2
   1483e:	1e5d      	subs	r5, r3, #1
   14840:	41ab      	sbcs	r3, r5
   14842:	4330      	orrs	r0, r6
   14844:	4318      	orrs	r0, r3
   14846:	40d4      	lsrs	r4, r2
   14848:	0743      	lsls	r3, r0, #29
   1484a:	d009      	beq.n	14860 <__aeabi_dmul+0x474>
   1484c:	230f      	movs	r3, #15
   1484e:	4003      	ands	r3, r0
   14850:	2b04      	cmp	r3, #4
   14852:	d005      	beq.n	14860 <__aeabi_dmul+0x474>
   14854:	0003      	movs	r3, r0
   14856:	1d18      	adds	r0, r3, #4
   14858:	4298      	cmp	r0, r3
   1485a:	419b      	sbcs	r3, r3
   1485c:	425b      	negs	r3, r3
   1485e:	18e4      	adds	r4, r4, r3
   14860:	0223      	lsls	r3, r4, #8
   14862:	d521      	bpl.n	148a8 <__aeabi_dmul+0x4bc>
   14864:	2501      	movs	r5, #1
   14866:	9b01      	ldr	r3, [sp, #4]
   14868:	2401      	movs	r4, #1
   1486a:	401d      	ands	r5, r3
   1486c:	2300      	movs	r3, #0
   1486e:	2200      	movs	r2, #0
   14870:	4699      	mov	r9, r3
   14872:	e622      	b.n	144ba <__aeabi_dmul+0xce>
   14874:	251f      	movs	r5, #31
   14876:	0021      	movs	r1, r4
   14878:	426d      	negs	r5, r5
   1487a:	1a28      	subs	r0, r5, r0
   1487c:	40c1      	lsrs	r1, r0
   1487e:	0008      	movs	r0, r1
   14880:	2a20      	cmp	r2, #32
   14882:	d01d      	beq.n	148c0 <__aeabi_dmul+0x4d4>
   14884:	355f      	adds	r5, #95	; 0x5f
   14886:	1aaa      	subs	r2, r5, r2
   14888:	4094      	lsls	r4, r2
   1488a:	4323      	orrs	r3, r4
   1488c:	1e5c      	subs	r4, r3, #1
   1488e:	41a3      	sbcs	r3, r4
   14890:	2507      	movs	r5, #7
   14892:	4303      	orrs	r3, r0
   14894:	401d      	ands	r5, r3
   14896:	2200      	movs	r2, #0
   14898:	2d00      	cmp	r5, #0
   1489a:	d009      	beq.n	148b0 <__aeabi_dmul+0x4c4>
   1489c:	220f      	movs	r2, #15
   1489e:	2400      	movs	r4, #0
   148a0:	401a      	ands	r2, r3
   148a2:	0018      	movs	r0, r3
   148a4:	2a04      	cmp	r2, #4
   148a6:	d1d6      	bne.n	14856 <__aeabi_dmul+0x46a>
   148a8:	0003      	movs	r3, r0
   148aa:	0765      	lsls	r5, r4, #29
   148ac:	0264      	lsls	r4, r4, #9
   148ae:	0b22      	lsrs	r2, r4, #12
   148b0:	08db      	lsrs	r3, r3, #3
   148b2:	432b      	orrs	r3, r5
   148b4:	2501      	movs	r5, #1
   148b6:	4699      	mov	r9, r3
   148b8:	9b01      	ldr	r3, [sp, #4]
   148ba:	2400      	movs	r4, #0
   148bc:	401d      	ands	r5, r3
   148be:	e5fc      	b.n	144ba <__aeabi_dmul+0xce>
   148c0:	2400      	movs	r4, #0
   148c2:	e7e2      	b.n	1488a <__aeabi_dmul+0x49e>
   148c4:	2280      	movs	r2, #128	; 0x80
   148c6:	2501      	movs	r5, #1
   148c8:	0312      	lsls	r2, r2, #12
   148ca:	4322      	orrs	r2, r4
   148cc:	9901      	ldr	r1, [sp, #4]
   148ce:	0312      	lsls	r2, r2, #12
   148d0:	0b12      	lsrs	r2, r2, #12
   148d2:	400d      	ands	r5, r1
   148d4:	4699      	mov	r9, r3
   148d6:	4c04      	ldr	r4, [pc, #16]	; (148e8 <__aeabi_dmul+0x4fc>)
   148d8:	e5ef      	b.n	144ba <__aeabi_dmul+0xce>
   148da:	46c0      	nop			; (mov r8, r8)
   148dc:	000003ff 	.word	0x000003ff
   148e0:	feffffff 	.word	0xfeffffff
   148e4:	000007fe 	.word	0x000007fe
   148e8:	000007ff 	.word	0x000007ff

000148ec <__aeabi_dsub>:
   148ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   148ee:	4646      	mov	r6, r8
   148f0:	46d6      	mov	lr, sl
   148f2:	464f      	mov	r7, r9
   148f4:	030c      	lsls	r4, r1, #12
   148f6:	b5c0      	push	{r6, r7, lr}
   148f8:	0fcd      	lsrs	r5, r1, #31
   148fa:	004e      	lsls	r6, r1, #1
   148fc:	0a61      	lsrs	r1, r4, #9
   148fe:	0f44      	lsrs	r4, r0, #29
   14900:	430c      	orrs	r4, r1
   14902:	00c1      	lsls	r1, r0, #3
   14904:	0058      	lsls	r0, r3, #1
   14906:	0d40      	lsrs	r0, r0, #21
   14908:	4684      	mov	ip, r0
   1490a:	468a      	mov	sl, r1
   1490c:	000f      	movs	r7, r1
   1490e:	0319      	lsls	r1, r3, #12
   14910:	0f50      	lsrs	r0, r2, #29
   14912:	0a49      	lsrs	r1, r1, #9
   14914:	4301      	orrs	r1, r0
   14916:	48c6      	ldr	r0, [pc, #792]	; (14c30 <__aeabi_dsub+0x344>)
   14918:	0d76      	lsrs	r6, r6, #21
   1491a:	46a8      	mov	r8, r5
   1491c:	0fdb      	lsrs	r3, r3, #31
   1491e:	00d2      	lsls	r2, r2, #3
   14920:	4584      	cmp	ip, r0
   14922:	d100      	bne.n	14926 <__aeabi_dsub+0x3a>
   14924:	e0d8      	b.n	14ad8 <__aeabi_dsub+0x1ec>
   14926:	2001      	movs	r0, #1
   14928:	4043      	eors	r3, r0
   1492a:	42ab      	cmp	r3, r5
   1492c:	d100      	bne.n	14930 <__aeabi_dsub+0x44>
   1492e:	e0a6      	b.n	14a7e <__aeabi_dsub+0x192>
   14930:	4660      	mov	r0, ip
   14932:	1a35      	subs	r5, r6, r0
   14934:	2d00      	cmp	r5, #0
   14936:	dc00      	bgt.n	1493a <__aeabi_dsub+0x4e>
   14938:	e105      	b.n	14b46 <__aeabi_dsub+0x25a>
   1493a:	2800      	cmp	r0, #0
   1493c:	d110      	bne.n	14960 <__aeabi_dsub+0x74>
   1493e:	000b      	movs	r3, r1
   14940:	4313      	orrs	r3, r2
   14942:	d100      	bne.n	14946 <__aeabi_dsub+0x5a>
   14944:	e0d7      	b.n	14af6 <__aeabi_dsub+0x20a>
   14946:	1e6b      	subs	r3, r5, #1
   14948:	2b00      	cmp	r3, #0
   1494a:	d000      	beq.n	1494e <__aeabi_dsub+0x62>
   1494c:	e14b      	b.n	14be6 <__aeabi_dsub+0x2fa>
   1494e:	4653      	mov	r3, sl
   14950:	1a9f      	subs	r7, r3, r2
   14952:	45ba      	cmp	sl, r7
   14954:	4180      	sbcs	r0, r0
   14956:	1a64      	subs	r4, r4, r1
   14958:	4240      	negs	r0, r0
   1495a:	1a24      	subs	r4, r4, r0
   1495c:	2601      	movs	r6, #1
   1495e:	e01e      	b.n	1499e <__aeabi_dsub+0xb2>
   14960:	4bb3      	ldr	r3, [pc, #716]	; (14c30 <__aeabi_dsub+0x344>)
   14962:	429e      	cmp	r6, r3
   14964:	d048      	beq.n	149f8 <__aeabi_dsub+0x10c>
   14966:	2380      	movs	r3, #128	; 0x80
   14968:	041b      	lsls	r3, r3, #16
   1496a:	4319      	orrs	r1, r3
   1496c:	2d38      	cmp	r5, #56	; 0x38
   1496e:	dd00      	ble.n	14972 <__aeabi_dsub+0x86>
   14970:	e119      	b.n	14ba6 <__aeabi_dsub+0x2ba>
   14972:	2d1f      	cmp	r5, #31
   14974:	dd00      	ble.n	14978 <__aeabi_dsub+0x8c>
   14976:	e14c      	b.n	14c12 <__aeabi_dsub+0x326>
   14978:	2320      	movs	r3, #32
   1497a:	000f      	movs	r7, r1
   1497c:	1b5b      	subs	r3, r3, r5
   1497e:	0010      	movs	r0, r2
   14980:	409a      	lsls	r2, r3
   14982:	409f      	lsls	r7, r3
   14984:	40e8      	lsrs	r0, r5
   14986:	1e53      	subs	r3, r2, #1
   14988:	419a      	sbcs	r2, r3
   1498a:	40e9      	lsrs	r1, r5
   1498c:	4307      	orrs	r7, r0
   1498e:	4317      	orrs	r7, r2
   14990:	4653      	mov	r3, sl
   14992:	1bdf      	subs	r7, r3, r7
   14994:	1a61      	subs	r1, r4, r1
   14996:	45ba      	cmp	sl, r7
   14998:	41a4      	sbcs	r4, r4
   1499a:	4264      	negs	r4, r4
   1499c:	1b0c      	subs	r4, r1, r4
   1499e:	0223      	lsls	r3, r4, #8
   149a0:	d400      	bmi.n	149a4 <__aeabi_dsub+0xb8>
   149a2:	e0c5      	b.n	14b30 <__aeabi_dsub+0x244>
   149a4:	0264      	lsls	r4, r4, #9
   149a6:	0a65      	lsrs	r5, r4, #9
   149a8:	2d00      	cmp	r5, #0
   149aa:	d100      	bne.n	149ae <__aeabi_dsub+0xc2>
   149ac:	e0f6      	b.n	14b9c <__aeabi_dsub+0x2b0>
   149ae:	0028      	movs	r0, r5
   149b0:	f000 fc7a 	bl	152a8 <__clzsi2>
   149b4:	0003      	movs	r3, r0
   149b6:	3b08      	subs	r3, #8
   149b8:	2b1f      	cmp	r3, #31
   149ba:	dd00      	ble.n	149be <__aeabi_dsub+0xd2>
   149bc:	e0e9      	b.n	14b92 <__aeabi_dsub+0x2a6>
   149be:	2220      	movs	r2, #32
   149c0:	003c      	movs	r4, r7
   149c2:	1ad2      	subs	r2, r2, r3
   149c4:	409d      	lsls	r5, r3
   149c6:	40d4      	lsrs	r4, r2
   149c8:	409f      	lsls	r7, r3
   149ca:	4325      	orrs	r5, r4
   149cc:	429e      	cmp	r6, r3
   149ce:	dd00      	ble.n	149d2 <__aeabi_dsub+0xe6>
   149d0:	e0db      	b.n	14b8a <__aeabi_dsub+0x29e>
   149d2:	1b9e      	subs	r6, r3, r6
   149d4:	1c73      	adds	r3, r6, #1
   149d6:	2b1f      	cmp	r3, #31
   149d8:	dd00      	ble.n	149dc <__aeabi_dsub+0xf0>
   149da:	e10a      	b.n	14bf2 <__aeabi_dsub+0x306>
   149dc:	2220      	movs	r2, #32
   149de:	0038      	movs	r0, r7
   149e0:	1ad2      	subs	r2, r2, r3
   149e2:	0029      	movs	r1, r5
   149e4:	4097      	lsls	r7, r2
   149e6:	002c      	movs	r4, r5
   149e8:	4091      	lsls	r1, r2
   149ea:	40d8      	lsrs	r0, r3
   149ec:	1e7a      	subs	r2, r7, #1
   149ee:	4197      	sbcs	r7, r2
   149f0:	40dc      	lsrs	r4, r3
   149f2:	2600      	movs	r6, #0
   149f4:	4301      	orrs	r1, r0
   149f6:	430f      	orrs	r7, r1
   149f8:	077b      	lsls	r3, r7, #29
   149fa:	d009      	beq.n	14a10 <__aeabi_dsub+0x124>
   149fc:	230f      	movs	r3, #15
   149fe:	403b      	ands	r3, r7
   14a00:	2b04      	cmp	r3, #4
   14a02:	d005      	beq.n	14a10 <__aeabi_dsub+0x124>
   14a04:	1d3b      	adds	r3, r7, #4
   14a06:	42bb      	cmp	r3, r7
   14a08:	41bf      	sbcs	r7, r7
   14a0a:	427f      	negs	r7, r7
   14a0c:	19e4      	adds	r4, r4, r7
   14a0e:	001f      	movs	r7, r3
   14a10:	0223      	lsls	r3, r4, #8
   14a12:	d525      	bpl.n	14a60 <__aeabi_dsub+0x174>
   14a14:	4b86      	ldr	r3, [pc, #536]	; (14c30 <__aeabi_dsub+0x344>)
   14a16:	3601      	adds	r6, #1
   14a18:	429e      	cmp	r6, r3
   14a1a:	d100      	bne.n	14a1e <__aeabi_dsub+0x132>
   14a1c:	e0af      	b.n	14b7e <__aeabi_dsub+0x292>
   14a1e:	4b85      	ldr	r3, [pc, #532]	; (14c34 <__aeabi_dsub+0x348>)
   14a20:	2501      	movs	r5, #1
   14a22:	401c      	ands	r4, r3
   14a24:	4643      	mov	r3, r8
   14a26:	0762      	lsls	r2, r4, #29
   14a28:	08ff      	lsrs	r7, r7, #3
   14a2a:	0264      	lsls	r4, r4, #9
   14a2c:	0576      	lsls	r6, r6, #21
   14a2e:	4317      	orrs	r7, r2
   14a30:	0b24      	lsrs	r4, r4, #12
   14a32:	0d76      	lsrs	r6, r6, #21
   14a34:	401d      	ands	r5, r3
   14a36:	2100      	movs	r1, #0
   14a38:	0324      	lsls	r4, r4, #12
   14a3a:	0b23      	lsrs	r3, r4, #12
   14a3c:	0d0c      	lsrs	r4, r1, #20
   14a3e:	4a7e      	ldr	r2, [pc, #504]	; (14c38 <__aeabi_dsub+0x34c>)
   14a40:	0524      	lsls	r4, r4, #20
   14a42:	431c      	orrs	r4, r3
   14a44:	4014      	ands	r4, r2
   14a46:	0533      	lsls	r3, r6, #20
   14a48:	4323      	orrs	r3, r4
   14a4a:	005b      	lsls	r3, r3, #1
   14a4c:	07ed      	lsls	r5, r5, #31
   14a4e:	085b      	lsrs	r3, r3, #1
   14a50:	432b      	orrs	r3, r5
   14a52:	0038      	movs	r0, r7
   14a54:	0019      	movs	r1, r3
   14a56:	bc1c      	pop	{r2, r3, r4}
   14a58:	4690      	mov	r8, r2
   14a5a:	4699      	mov	r9, r3
   14a5c:	46a2      	mov	sl, r4
   14a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14a60:	2501      	movs	r5, #1
   14a62:	4643      	mov	r3, r8
   14a64:	0762      	lsls	r2, r4, #29
   14a66:	08ff      	lsrs	r7, r7, #3
   14a68:	4317      	orrs	r7, r2
   14a6a:	08e4      	lsrs	r4, r4, #3
   14a6c:	401d      	ands	r5, r3
   14a6e:	4b70      	ldr	r3, [pc, #448]	; (14c30 <__aeabi_dsub+0x344>)
   14a70:	429e      	cmp	r6, r3
   14a72:	d036      	beq.n	14ae2 <__aeabi_dsub+0x1f6>
   14a74:	0324      	lsls	r4, r4, #12
   14a76:	0576      	lsls	r6, r6, #21
   14a78:	0b24      	lsrs	r4, r4, #12
   14a7a:	0d76      	lsrs	r6, r6, #21
   14a7c:	e7db      	b.n	14a36 <__aeabi_dsub+0x14a>
   14a7e:	4663      	mov	r3, ip
   14a80:	1af3      	subs	r3, r6, r3
   14a82:	2b00      	cmp	r3, #0
   14a84:	dc00      	bgt.n	14a88 <__aeabi_dsub+0x19c>
   14a86:	e094      	b.n	14bb2 <__aeabi_dsub+0x2c6>
   14a88:	4660      	mov	r0, ip
   14a8a:	2800      	cmp	r0, #0
   14a8c:	d035      	beq.n	14afa <__aeabi_dsub+0x20e>
   14a8e:	4868      	ldr	r0, [pc, #416]	; (14c30 <__aeabi_dsub+0x344>)
   14a90:	4286      	cmp	r6, r0
   14a92:	d0b1      	beq.n	149f8 <__aeabi_dsub+0x10c>
   14a94:	2780      	movs	r7, #128	; 0x80
   14a96:	043f      	lsls	r7, r7, #16
   14a98:	4339      	orrs	r1, r7
   14a9a:	2b38      	cmp	r3, #56	; 0x38
   14a9c:	dc00      	bgt.n	14aa0 <__aeabi_dsub+0x1b4>
   14a9e:	e0fd      	b.n	14c9c <__aeabi_dsub+0x3b0>
   14aa0:	430a      	orrs	r2, r1
   14aa2:	0017      	movs	r7, r2
   14aa4:	2100      	movs	r1, #0
   14aa6:	1e7a      	subs	r2, r7, #1
   14aa8:	4197      	sbcs	r7, r2
   14aaa:	4457      	add	r7, sl
   14aac:	4557      	cmp	r7, sl
   14aae:	4180      	sbcs	r0, r0
   14ab0:	1909      	adds	r1, r1, r4
   14ab2:	4244      	negs	r4, r0
   14ab4:	190c      	adds	r4, r1, r4
   14ab6:	0223      	lsls	r3, r4, #8
   14ab8:	d53a      	bpl.n	14b30 <__aeabi_dsub+0x244>
   14aba:	4b5d      	ldr	r3, [pc, #372]	; (14c30 <__aeabi_dsub+0x344>)
   14abc:	3601      	adds	r6, #1
   14abe:	429e      	cmp	r6, r3
   14ac0:	d100      	bne.n	14ac4 <__aeabi_dsub+0x1d8>
   14ac2:	e14b      	b.n	14d5c <__aeabi_dsub+0x470>
   14ac4:	2201      	movs	r2, #1
   14ac6:	4b5b      	ldr	r3, [pc, #364]	; (14c34 <__aeabi_dsub+0x348>)
   14ac8:	401c      	ands	r4, r3
   14aca:	087b      	lsrs	r3, r7, #1
   14acc:	4017      	ands	r7, r2
   14ace:	431f      	orrs	r7, r3
   14ad0:	07e2      	lsls	r2, r4, #31
   14ad2:	4317      	orrs	r7, r2
   14ad4:	0864      	lsrs	r4, r4, #1
   14ad6:	e78f      	b.n	149f8 <__aeabi_dsub+0x10c>
   14ad8:	0008      	movs	r0, r1
   14ada:	4310      	orrs	r0, r2
   14adc:	d000      	beq.n	14ae0 <__aeabi_dsub+0x1f4>
   14ade:	e724      	b.n	1492a <__aeabi_dsub+0x3e>
   14ae0:	e721      	b.n	14926 <__aeabi_dsub+0x3a>
   14ae2:	0023      	movs	r3, r4
   14ae4:	433b      	orrs	r3, r7
   14ae6:	d100      	bne.n	14aea <__aeabi_dsub+0x1fe>
   14ae8:	e1b9      	b.n	14e5e <__aeabi_dsub+0x572>
   14aea:	2280      	movs	r2, #128	; 0x80
   14aec:	0312      	lsls	r2, r2, #12
   14aee:	4314      	orrs	r4, r2
   14af0:	0324      	lsls	r4, r4, #12
   14af2:	0b24      	lsrs	r4, r4, #12
   14af4:	e79f      	b.n	14a36 <__aeabi_dsub+0x14a>
   14af6:	002e      	movs	r6, r5
   14af8:	e77e      	b.n	149f8 <__aeabi_dsub+0x10c>
   14afa:	0008      	movs	r0, r1
   14afc:	4310      	orrs	r0, r2
   14afe:	d100      	bne.n	14b02 <__aeabi_dsub+0x216>
   14b00:	e0ca      	b.n	14c98 <__aeabi_dsub+0x3ac>
   14b02:	1e58      	subs	r0, r3, #1
   14b04:	4684      	mov	ip, r0
   14b06:	2800      	cmp	r0, #0
   14b08:	d000      	beq.n	14b0c <__aeabi_dsub+0x220>
   14b0a:	e0e7      	b.n	14cdc <__aeabi_dsub+0x3f0>
   14b0c:	4452      	add	r2, sl
   14b0e:	4552      	cmp	r2, sl
   14b10:	4180      	sbcs	r0, r0
   14b12:	1864      	adds	r4, r4, r1
   14b14:	4240      	negs	r0, r0
   14b16:	1824      	adds	r4, r4, r0
   14b18:	0017      	movs	r7, r2
   14b1a:	2601      	movs	r6, #1
   14b1c:	0223      	lsls	r3, r4, #8
   14b1e:	d507      	bpl.n	14b30 <__aeabi_dsub+0x244>
   14b20:	2602      	movs	r6, #2
   14b22:	e7cf      	b.n	14ac4 <__aeabi_dsub+0x1d8>
   14b24:	4664      	mov	r4, ip
   14b26:	432c      	orrs	r4, r5
   14b28:	d100      	bne.n	14b2c <__aeabi_dsub+0x240>
   14b2a:	e1b3      	b.n	14e94 <__aeabi_dsub+0x5a8>
   14b2c:	002c      	movs	r4, r5
   14b2e:	4667      	mov	r7, ip
   14b30:	077b      	lsls	r3, r7, #29
   14b32:	d000      	beq.n	14b36 <__aeabi_dsub+0x24a>
   14b34:	e762      	b.n	149fc <__aeabi_dsub+0x110>
   14b36:	0763      	lsls	r3, r4, #29
   14b38:	08ff      	lsrs	r7, r7, #3
   14b3a:	431f      	orrs	r7, r3
   14b3c:	2501      	movs	r5, #1
   14b3e:	4643      	mov	r3, r8
   14b40:	08e4      	lsrs	r4, r4, #3
   14b42:	401d      	ands	r5, r3
   14b44:	e793      	b.n	14a6e <__aeabi_dsub+0x182>
   14b46:	2d00      	cmp	r5, #0
   14b48:	d178      	bne.n	14c3c <__aeabi_dsub+0x350>
   14b4a:	1c75      	adds	r5, r6, #1
   14b4c:	056d      	lsls	r5, r5, #21
   14b4e:	0d6d      	lsrs	r5, r5, #21
   14b50:	2d01      	cmp	r5, #1
   14b52:	dc00      	bgt.n	14b56 <__aeabi_dsub+0x26a>
   14b54:	e0f2      	b.n	14d3c <__aeabi_dsub+0x450>
   14b56:	4650      	mov	r0, sl
   14b58:	1a80      	subs	r0, r0, r2
   14b5a:	4582      	cmp	sl, r0
   14b5c:	41bf      	sbcs	r7, r7
   14b5e:	1a65      	subs	r5, r4, r1
   14b60:	427f      	negs	r7, r7
   14b62:	1bed      	subs	r5, r5, r7
   14b64:	4684      	mov	ip, r0
   14b66:	0228      	lsls	r0, r5, #8
   14b68:	d400      	bmi.n	14b6c <__aeabi_dsub+0x280>
   14b6a:	e08c      	b.n	14c86 <__aeabi_dsub+0x39a>
   14b6c:	4650      	mov	r0, sl
   14b6e:	1a17      	subs	r7, r2, r0
   14b70:	42ba      	cmp	r2, r7
   14b72:	4192      	sbcs	r2, r2
   14b74:	1b0c      	subs	r4, r1, r4
   14b76:	4255      	negs	r5, r2
   14b78:	1b65      	subs	r5, r4, r5
   14b7a:	4698      	mov	r8, r3
   14b7c:	e714      	b.n	149a8 <__aeabi_dsub+0xbc>
   14b7e:	2501      	movs	r5, #1
   14b80:	4643      	mov	r3, r8
   14b82:	2400      	movs	r4, #0
   14b84:	401d      	ands	r5, r3
   14b86:	2700      	movs	r7, #0
   14b88:	e755      	b.n	14a36 <__aeabi_dsub+0x14a>
   14b8a:	4c2a      	ldr	r4, [pc, #168]	; (14c34 <__aeabi_dsub+0x348>)
   14b8c:	1af6      	subs	r6, r6, r3
   14b8e:	402c      	ands	r4, r5
   14b90:	e732      	b.n	149f8 <__aeabi_dsub+0x10c>
   14b92:	003d      	movs	r5, r7
   14b94:	3828      	subs	r0, #40	; 0x28
   14b96:	4085      	lsls	r5, r0
   14b98:	2700      	movs	r7, #0
   14b9a:	e717      	b.n	149cc <__aeabi_dsub+0xe0>
   14b9c:	0038      	movs	r0, r7
   14b9e:	f000 fb83 	bl	152a8 <__clzsi2>
   14ba2:	3020      	adds	r0, #32
   14ba4:	e706      	b.n	149b4 <__aeabi_dsub+0xc8>
   14ba6:	430a      	orrs	r2, r1
   14ba8:	0017      	movs	r7, r2
   14baa:	2100      	movs	r1, #0
   14bac:	1e7a      	subs	r2, r7, #1
   14bae:	4197      	sbcs	r7, r2
   14bb0:	e6ee      	b.n	14990 <__aeabi_dsub+0xa4>
   14bb2:	2b00      	cmp	r3, #0
   14bb4:	d000      	beq.n	14bb8 <__aeabi_dsub+0x2cc>
   14bb6:	e0e5      	b.n	14d84 <__aeabi_dsub+0x498>
   14bb8:	1c73      	adds	r3, r6, #1
   14bba:	469c      	mov	ip, r3
   14bbc:	055b      	lsls	r3, r3, #21
   14bbe:	0d5b      	lsrs	r3, r3, #21
   14bc0:	2b01      	cmp	r3, #1
   14bc2:	dc00      	bgt.n	14bc6 <__aeabi_dsub+0x2da>
   14bc4:	e09f      	b.n	14d06 <__aeabi_dsub+0x41a>
   14bc6:	4b1a      	ldr	r3, [pc, #104]	; (14c30 <__aeabi_dsub+0x344>)
   14bc8:	459c      	cmp	ip, r3
   14bca:	d100      	bne.n	14bce <__aeabi_dsub+0x2e2>
   14bcc:	e0c5      	b.n	14d5a <__aeabi_dsub+0x46e>
   14bce:	4452      	add	r2, sl
   14bd0:	4552      	cmp	r2, sl
   14bd2:	4180      	sbcs	r0, r0
   14bd4:	1864      	adds	r4, r4, r1
   14bd6:	4240      	negs	r0, r0
   14bd8:	1824      	adds	r4, r4, r0
   14bda:	07e7      	lsls	r7, r4, #31
   14bdc:	0852      	lsrs	r2, r2, #1
   14bde:	4317      	orrs	r7, r2
   14be0:	0864      	lsrs	r4, r4, #1
   14be2:	4666      	mov	r6, ip
   14be4:	e708      	b.n	149f8 <__aeabi_dsub+0x10c>
   14be6:	4812      	ldr	r0, [pc, #72]	; (14c30 <__aeabi_dsub+0x344>)
   14be8:	4285      	cmp	r5, r0
   14bea:	d100      	bne.n	14bee <__aeabi_dsub+0x302>
   14bec:	e085      	b.n	14cfa <__aeabi_dsub+0x40e>
   14bee:	001d      	movs	r5, r3
   14bf0:	e6bc      	b.n	1496c <__aeabi_dsub+0x80>
   14bf2:	0029      	movs	r1, r5
   14bf4:	3e1f      	subs	r6, #31
   14bf6:	40f1      	lsrs	r1, r6
   14bf8:	2b20      	cmp	r3, #32
   14bfa:	d100      	bne.n	14bfe <__aeabi_dsub+0x312>
   14bfc:	e07f      	b.n	14cfe <__aeabi_dsub+0x412>
   14bfe:	2240      	movs	r2, #64	; 0x40
   14c00:	1ad3      	subs	r3, r2, r3
   14c02:	409d      	lsls	r5, r3
   14c04:	432f      	orrs	r7, r5
   14c06:	1e7d      	subs	r5, r7, #1
   14c08:	41af      	sbcs	r7, r5
   14c0a:	2400      	movs	r4, #0
   14c0c:	430f      	orrs	r7, r1
   14c0e:	2600      	movs	r6, #0
   14c10:	e78e      	b.n	14b30 <__aeabi_dsub+0x244>
   14c12:	002b      	movs	r3, r5
   14c14:	000f      	movs	r7, r1
   14c16:	3b20      	subs	r3, #32
   14c18:	40df      	lsrs	r7, r3
   14c1a:	2d20      	cmp	r5, #32
   14c1c:	d071      	beq.n	14d02 <__aeabi_dsub+0x416>
   14c1e:	2340      	movs	r3, #64	; 0x40
   14c20:	1b5d      	subs	r5, r3, r5
   14c22:	40a9      	lsls	r1, r5
   14c24:	430a      	orrs	r2, r1
   14c26:	1e51      	subs	r1, r2, #1
   14c28:	418a      	sbcs	r2, r1
   14c2a:	2100      	movs	r1, #0
   14c2c:	4317      	orrs	r7, r2
   14c2e:	e6af      	b.n	14990 <__aeabi_dsub+0xa4>
   14c30:	000007ff 	.word	0x000007ff
   14c34:	ff7fffff 	.word	0xff7fffff
   14c38:	800fffff 	.word	0x800fffff
   14c3c:	2e00      	cmp	r6, #0
   14c3e:	d03e      	beq.n	14cbe <__aeabi_dsub+0x3d2>
   14c40:	4eb3      	ldr	r6, [pc, #716]	; (14f10 <__aeabi_dsub+0x624>)
   14c42:	45b4      	cmp	ip, r6
   14c44:	d045      	beq.n	14cd2 <__aeabi_dsub+0x3e6>
   14c46:	2680      	movs	r6, #128	; 0x80
   14c48:	0436      	lsls	r6, r6, #16
   14c4a:	426d      	negs	r5, r5
   14c4c:	4334      	orrs	r4, r6
   14c4e:	2d38      	cmp	r5, #56	; 0x38
   14c50:	dd00      	ble.n	14c54 <__aeabi_dsub+0x368>
   14c52:	e0a8      	b.n	14da6 <__aeabi_dsub+0x4ba>
   14c54:	2d1f      	cmp	r5, #31
   14c56:	dd00      	ble.n	14c5a <__aeabi_dsub+0x36e>
   14c58:	e11f      	b.n	14e9a <__aeabi_dsub+0x5ae>
   14c5a:	2620      	movs	r6, #32
   14c5c:	0027      	movs	r7, r4
   14c5e:	4650      	mov	r0, sl
   14c60:	1b76      	subs	r6, r6, r5
   14c62:	40b7      	lsls	r7, r6
   14c64:	40e8      	lsrs	r0, r5
   14c66:	4307      	orrs	r7, r0
   14c68:	4650      	mov	r0, sl
   14c6a:	40b0      	lsls	r0, r6
   14c6c:	1e46      	subs	r6, r0, #1
   14c6e:	41b0      	sbcs	r0, r6
   14c70:	40ec      	lsrs	r4, r5
   14c72:	4338      	orrs	r0, r7
   14c74:	1a17      	subs	r7, r2, r0
   14c76:	42ba      	cmp	r2, r7
   14c78:	4192      	sbcs	r2, r2
   14c7a:	1b0c      	subs	r4, r1, r4
   14c7c:	4252      	negs	r2, r2
   14c7e:	1aa4      	subs	r4, r4, r2
   14c80:	4666      	mov	r6, ip
   14c82:	4698      	mov	r8, r3
   14c84:	e68b      	b.n	1499e <__aeabi_dsub+0xb2>
   14c86:	4664      	mov	r4, ip
   14c88:	4667      	mov	r7, ip
   14c8a:	432c      	orrs	r4, r5
   14c8c:	d000      	beq.n	14c90 <__aeabi_dsub+0x3a4>
   14c8e:	e68b      	b.n	149a8 <__aeabi_dsub+0xbc>
   14c90:	2500      	movs	r5, #0
   14c92:	2600      	movs	r6, #0
   14c94:	2700      	movs	r7, #0
   14c96:	e6ea      	b.n	14a6e <__aeabi_dsub+0x182>
   14c98:	001e      	movs	r6, r3
   14c9a:	e6ad      	b.n	149f8 <__aeabi_dsub+0x10c>
   14c9c:	2b1f      	cmp	r3, #31
   14c9e:	dc60      	bgt.n	14d62 <__aeabi_dsub+0x476>
   14ca0:	2720      	movs	r7, #32
   14ca2:	1af8      	subs	r0, r7, r3
   14ca4:	000f      	movs	r7, r1
   14ca6:	4684      	mov	ip, r0
   14ca8:	4087      	lsls	r7, r0
   14caa:	0010      	movs	r0, r2
   14cac:	40d8      	lsrs	r0, r3
   14cae:	4307      	orrs	r7, r0
   14cb0:	4660      	mov	r0, ip
   14cb2:	4082      	lsls	r2, r0
   14cb4:	1e50      	subs	r0, r2, #1
   14cb6:	4182      	sbcs	r2, r0
   14cb8:	40d9      	lsrs	r1, r3
   14cba:	4317      	orrs	r7, r2
   14cbc:	e6f5      	b.n	14aaa <__aeabi_dsub+0x1be>
   14cbe:	0026      	movs	r6, r4
   14cc0:	4650      	mov	r0, sl
   14cc2:	4306      	orrs	r6, r0
   14cc4:	d005      	beq.n	14cd2 <__aeabi_dsub+0x3e6>
   14cc6:	43ed      	mvns	r5, r5
   14cc8:	2d00      	cmp	r5, #0
   14cca:	d0d3      	beq.n	14c74 <__aeabi_dsub+0x388>
   14ccc:	4e90      	ldr	r6, [pc, #576]	; (14f10 <__aeabi_dsub+0x624>)
   14cce:	45b4      	cmp	ip, r6
   14cd0:	d1bd      	bne.n	14c4e <__aeabi_dsub+0x362>
   14cd2:	000c      	movs	r4, r1
   14cd4:	0017      	movs	r7, r2
   14cd6:	4666      	mov	r6, ip
   14cd8:	4698      	mov	r8, r3
   14cda:	e68d      	b.n	149f8 <__aeabi_dsub+0x10c>
   14cdc:	488c      	ldr	r0, [pc, #560]	; (14f10 <__aeabi_dsub+0x624>)
   14cde:	4283      	cmp	r3, r0
   14ce0:	d00b      	beq.n	14cfa <__aeabi_dsub+0x40e>
   14ce2:	4663      	mov	r3, ip
   14ce4:	e6d9      	b.n	14a9a <__aeabi_dsub+0x1ae>
   14ce6:	2d00      	cmp	r5, #0
   14ce8:	d000      	beq.n	14cec <__aeabi_dsub+0x400>
   14cea:	e096      	b.n	14e1a <__aeabi_dsub+0x52e>
   14cec:	0008      	movs	r0, r1
   14cee:	4310      	orrs	r0, r2
   14cf0:	d100      	bne.n	14cf4 <__aeabi_dsub+0x408>
   14cf2:	e0e2      	b.n	14eba <__aeabi_dsub+0x5ce>
   14cf4:	000c      	movs	r4, r1
   14cf6:	0017      	movs	r7, r2
   14cf8:	4698      	mov	r8, r3
   14cfa:	4e85      	ldr	r6, [pc, #532]	; (14f10 <__aeabi_dsub+0x624>)
   14cfc:	e67c      	b.n	149f8 <__aeabi_dsub+0x10c>
   14cfe:	2500      	movs	r5, #0
   14d00:	e780      	b.n	14c04 <__aeabi_dsub+0x318>
   14d02:	2100      	movs	r1, #0
   14d04:	e78e      	b.n	14c24 <__aeabi_dsub+0x338>
   14d06:	0023      	movs	r3, r4
   14d08:	4650      	mov	r0, sl
   14d0a:	4303      	orrs	r3, r0
   14d0c:	2e00      	cmp	r6, #0
   14d0e:	d000      	beq.n	14d12 <__aeabi_dsub+0x426>
   14d10:	e0a8      	b.n	14e64 <__aeabi_dsub+0x578>
   14d12:	2b00      	cmp	r3, #0
   14d14:	d100      	bne.n	14d18 <__aeabi_dsub+0x42c>
   14d16:	e0de      	b.n	14ed6 <__aeabi_dsub+0x5ea>
   14d18:	000b      	movs	r3, r1
   14d1a:	4313      	orrs	r3, r2
   14d1c:	d100      	bne.n	14d20 <__aeabi_dsub+0x434>
   14d1e:	e66b      	b.n	149f8 <__aeabi_dsub+0x10c>
   14d20:	4452      	add	r2, sl
   14d22:	4552      	cmp	r2, sl
   14d24:	4180      	sbcs	r0, r0
   14d26:	1864      	adds	r4, r4, r1
   14d28:	4240      	negs	r0, r0
   14d2a:	1824      	adds	r4, r4, r0
   14d2c:	0017      	movs	r7, r2
   14d2e:	0223      	lsls	r3, r4, #8
   14d30:	d400      	bmi.n	14d34 <__aeabi_dsub+0x448>
   14d32:	e6fd      	b.n	14b30 <__aeabi_dsub+0x244>
   14d34:	4b77      	ldr	r3, [pc, #476]	; (14f14 <__aeabi_dsub+0x628>)
   14d36:	4666      	mov	r6, ip
   14d38:	401c      	ands	r4, r3
   14d3a:	e65d      	b.n	149f8 <__aeabi_dsub+0x10c>
   14d3c:	0025      	movs	r5, r4
   14d3e:	4650      	mov	r0, sl
   14d40:	4305      	orrs	r5, r0
   14d42:	2e00      	cmp	r6, #0
   14d44:	d1cf      	bne.n	14ce6 <__aeabi_dsub+0x3fa>
   14d46:	2d00      	cmp	r5, #0
   14d48:	d14f      	bne.n	14dea <__aeabi_dsub+0x4fe>
   14d4a:	000c      	movs	r4, r1
   14d4c:	4314      	orrs	r4, r2
   14d4e:	d100      	bne.n	14d52 <__aeabi_dsub+0x466>
   14d50:	e0a0      	b.n	14e94 <__aeabi_dsub+0x5a8>
   14d52:	000c      	movs	r4, r1
   14d54:	0017      	movs	r7, r2
   14d56:	4698      	mov	r8, r3
   14d58:	e64e      	b.n	149f8 <__aeabi_dsub+0x10c>
   14d5a:	4666      	mov	r6, ip
   14d5c:	2400      	movs	r4, #0
   14d5e:	2700      	movs	r7, #0
   14d60:	e685      	b.n	14a6e <__aeabi_dsub+0x182>
   14d62:	001f      	movs	r7, r3
   14d64:	0008      	movs	r0, r1
   14d66:	3f20      	subs	r7, #32
   14d68:	40f8      	lsrs	r0, r7
   14d6a:	0007      	movs	r7, r0
   14d6c:	2b20      	cmp	r3, #32
   14d6e:	d100      	bne.n	14d72 <__aeabi_dsub+0x486>
   14d70:	e08e      	b.n	14e90 <__aeabi_dsub+0x5a4>
   14d72:	2040      	movs	r0, #64	; 0x40
   14d74:	1ac3      	subs	r3, r0, r3
   14d76:	4099      	lsls	r1, r3
   14d78:	430a      	orrs	r2, r1
   14d7a:	1e51      	subs	r1, r2, #1
   14d7c:	418a      	sbcs	r2, r1
   14d7e:	2100      	movs	r1, #0
   14d80:	4317      	orrs	r7, r2
   14d82:	e692      	b.n	14aaa <__aeabi_dsub+0x1be>
   14d84:	2e00      	cmp	r6, #0
   14d86:	d114      	bne.n	14db2 <__aeabi_dsub+0x4c6>
   14d88:	0026      	movs	r6, r4
   14d8a:	4650      	mov	r0, sl
   14d8c:	4306      	orrs	r6, r0
   14d8e:	d062      	beq.n	14e56 <__aeabi_dsub+0x56a>
   14d90:	43db      	mvns	r3, r3
   14d92:	2b00      	cmp	r3, #0
   14d94:	d15c      	bne.n	14e50 <__aeabi_dsub+0x564>
   14d96:	1887      	adds	r7, r0, r2
   14d98:	4297      	cmp	r7, r2
   14d9a:	4192      	sbcs	r2, r2
   14d9c:	1864      	adds	r4, r4, r1
   14d9e:	4252      	negs	r2, r2
   14da0:	18a4      	adds	r4, r4, r2
   14da2:	4666      	mov	r6, ip
   14da4:	e687      	b.n	14ab6 <__aeabi_dsub+0x1ca>
   14da6:	4650      	mov	r0, sl
   14da8:	4320      	orrs	r0, r4
   14daa:	1e44      	subs	r4, r0, #1
   14dac:	41a0      	sbcs	r0, r4
   14dae:	2400      	movs	r4, #0
   14db0:	e760      	b.n	14c74 <__aeabi_dsub+0x388>
   14db2:	4e57      	ldr	r6, [pc, #348]	; (14f10 <__aeabi_dsub+0x624>)
   14db4:	45b4      	cmp	ip, r6
   14db6:	d04e      	beq.n	14e56 <__aeabi_dsub+0x56a>
   14db8:	2680      	movs	r6, #128	; 0x80
   14dba:	0436      	lsls	r6, r6, #16
   14dbc:	425b      	negs	r3, r3
   14dbe:	4334      	orrs	r4, r6
   14dc0:	2b38      	cmp	r3, #56	; 0x38
   14dc2:	dd00      	ble.n	14dc6 <__aeabi_dsub+0x4da>
   14dc4:	e07f      	b.n	14ec6 <__aeabi_dsub+0x5da>
   14dc6:	2b1f      	cmp	r3, #31
   14dc8:	dd00      	ble.n	14dcc <__aeabi_dsub+0x4e0>
   14dca:	e08b      	b.n	14ee4 <__aeabi_dsub+0x5f8>
   14dcc:	2620      	movs	r6, #32
   14dce:	0027      	movs	r7, r4
   14dd0:	4650      	mov	r0, sl
   14dd2:	1af6      	subs	r6, r6, r3
   14dd4:	40b7      	lsls	r7, r6
   14dd6:	40d8      	lsrs	r0, r3
   14dd8:	4307      	orrs	r7, r0
   14dda:	4650      	mov	r0, sl
   14ddc:	40b0      	lsls	r0, r6
   14dde:	1e46      	subs	r6, r0, #1
   14de0:	41b0      	sbcs	r0, r6
   14de2:	4307      	orrs	r7, r0
   14de4:	40dc      	lsrs	r4, r3
   14de6:	18bf      	adds	r7, r7, r2
   14de8:	e7d6      	b.n	14d98 <__aeabi_dsub+0x4ac>
   14dea:	000d      	movs	r5, r1
   14dec:	4315      	orrs	r5, r2
   14dee:	d100      	bne.n	14df2 <__aeabi_dsub+0x506>
   14df0:	e602      	b.n	149f8 <__aeabi_dsub+0x10c>
   14df2:	4650      	mov	r0, sl
   14df4:	1a80      	subs	r0, r0, r2
   14df6:	4582      	cmp	sl, r0
   14df8:	41bf      	sbcs	r7, r7
   14dfa:	1a65      	subs	r5, r4, r1
   14dfc:	427f      	negs	r7, r7
   14dfe:	1bed      	subs	r5, r5, r7
   14e00:	4684      	mov	ip, r0
   14e02:	0228      	lsls	r0, r5, #8
   14e04:	d400      	bmi.n	14e08 <__aeabi_dsub+0x51c>
   14e06:	e68d      	b.n	14b24 <__aeabi_dsub+0x238>
   14e08:	4650      	mov	r0, sl
   14e0a:	1a17      	subs	r7, r2, r0
   14e0c:	42ba      	cmp	r2, r7
   14e0e:	4192      	sbcs	r2, r2
   14e10:	1b0c      	subs	r4, r1, r4
   14e12:	4252      	negs	r2, r2
   14e14:	1aa4      	subs	r4, r4, r2
   14e16:	4698      	mov	r8, r3
   14e18:	e5ee      	b.n	149f8 <__aeabi_dsub+0x10c>
   14e1a:	000d      	movs	r5, r1
   14e1c:	4315      	orrs	r5, r2
   14e1e:	d100      	bne.n	14e22 <__aeabi_dsub+0x536>
   14e20:	e76b      	b.n	14cfa <__aeabi_dsub+0x40e>
   14e22:	4650      	mov	r0, sl
   14e24:	0767      	lsls	r7, r4, #29
   14e26:	08c0      	lsrs	r0, r0, #3
   14e28:	4307      	orrs	r7, r0
   14e2a:	2080      	movs	r0, #128	; 0x80
   14e2c:	08e4      	lsrs	r4, r4, #3
   14e2e:	0300      	lsls	r0, r0, #12
   14e30:	4204      	tst	r4, r0
   14e32:	d007      	beq.n	14e44 <__aeabi_dsub+0x558>
   14e34:	08cd      	lsrs	r5, r1, #3
   14e36:	4205      	tst	r5, r0
   14e38:	d104      	bne.n	14e44 <__aeabi_dsub+0x558>
   14e3a:	002c      	movs	r4, r5
   14e3c:	4698      	mov	r8, r3
   14e3e:	08d7      	lsrs	r7, r2, #3
   14e40:	0749      	lsls	r1, r1, #29
   14e42:	430f      	orrs	r7, r1
   14e44:	0f7b      	lsrs	r3, r7, #29
   14e46:	00e4      	lsls	r4, r4, #3
   14e48:	431c      	orrs	r4, r3
   14e4a:	00ff      	lsls	r7, r7, #3
   14e4c:	4e30      	ldr	r6, [pc, #192]	; (14f10 <__aeabi_dsub+0x624>)
   14e4e:	e5d3      	b.n	149f8 <__aeabi_dsub+0x10c>
   14e50:	4e2f      	ldr	r6, [pc, #188]	; (14f10 <__aeabi_dsub+0x624>)
   14e52:	45b4      	cmp	ip, r6
   14e54:	d1b4      	bne.n	14dc0 <__aeabi_dsub+0x4d4>
   14e56:	000c      	movs	r4, r1
   14e58:	0017      	movs	r7, r2
   14e5a:	4666      	mov	r6, ip
   14e5c:	e5cc      	b.n	149f8 <__aeabi_dsub+0x10c>
   14e5e:	2700      	movs	r7, #0
   14e60:	2400      	movs	r4, #0
   14e62:	e5e8      	b.n	14a36 <__aeabi_dsub+0x14a>
   14e64:	2b00      	cmp	r3, #0
   14e66:	d039      	beq.n	14edc <__aeabi_dsub+0x5f0>
   14e68:	000b      	movs	r3, r1
   14e6a:	4313      	orrs	r3, r2
   14e6c:	d100      	bne.n	14e70 <__aeabi_dsub+0x584>
   14e6e:	e744      	b.n	14cfa <__aeabi_dsub+0x40e>
   14e70:	08c0      	lsrs	r0, r0, #3
   14e72:	0767      	lsls	r7, r4, #29
   14e74:	4307      	orrs	r7, r0
   14e76:	2080      	movs	r0, #128	; 0x80
   14e78:	08e4      	lsrs	r4, r4, #3
   14e7a:	0300      	lsls	r0, r0, #12
   14e7c:	4204      	tst	r4, r0
   14e7e:	d0e1      	beq.n	14e44 <__aeabi_dsub+0x558>
   14e80:	08cb      	lsrs	r3, r1, #3
   14e82:	4203      	tst	r3, r0
   14e84:	d1de      	bne.n	14e44 <__aeabi_dsub+0x558>
   14e86:	08d7      	lsrs	r7, r2, #3
   14e88:	0749      	lsls	r1, r1, #29
   14e8a:	430f      	orrs	r7, r1
   14e8c:	001c      	movs	r4, r3
   14e8e:	e7d9      	b.n	14e44 <__aeabi_dsub+0x558>
   14e90:	2100      	movs	r1, #0
   14e92:	e771      	b.n	14d78 <__aeabi_dsub+0x48c>
   14e94:	2500      	movs	r5, #0
   14e96:	2700      	movs	r7, #0
   14e98:	e5e9      	b.n	14a6e <__aeabi_dsub+0x182>
   14e9a:	002e      	movs	r6, r5
   14e9c:	0027      	movs	r7, r4
   14e9e:	3e20      	subs	r6, #32
   14ea0:	40f7      	lsrs	r7, r6
   14ea2:	2d20      	cmp	r5, #32
   14ea4:	d02f      	beq.n	14f06 <__aeabi_dsub+0x61a>
   14ea6:	2640      	movs	r6, #64	; 0x40
   14ea8:	1b75      	subs	r5, r6, r5
   14eaa:	40ac      	lsls	r4, r5
   14eac:	4650      	mov	r0, sl
   14eae:	4320      	orrs	r0, r4
   14eb0:	1e44      	subs	r4, r0, #1
   14eb2:	41a0      	sbcs	r0, r4
   14eb4:	2400      	movs	r4, #0
   14eb6:	4338      	orrs	r0, r7
   14eb8:	e6dc      	b.n	14c74 <__aeabi_dsub+0x388>
   14eba:	2480      	movs	r4, #128	; 0x80
   14ebc:	2500      	movs	r5, #0
   14ebe:	0324      	lsls	r4, r4, #12
   14ec0:	4e13      	ldr	r6, [pc, #76]	; (14f10 <__aeabi_dsub+0x624>)
   14ec2:	2700      	movs	r7, #0
   14ec4:	e5d3      	b.n	14a6e <__aeabi_dsub+0x182>
   14ec6:	4650      	mov	r0, sl
   14ec8:	4320      	orrs	r0, r4
   14eca:	0007      	movs	r7, r0
   14ecc:	1e78      	subs	r0, r7, #1
   14ece:	4187      	sbcs	r7, r0
   14ed0:	2400      	movs	r4, #0
   14ed2:	18bf      	adds	r7, r7, r2
   14ed4:	e760      	b.n	14d98 <__aeabi_dsub+0x4ac>
   14ed6:	000c      	movs	r4, r1
   14ed8:	0017      	movs	r7, r2
   14eda:	e58d      	b.n	149f8 <__aeabi_dsub+0x10c>
   14edc:	000c      	movs	r4, r1
   14ede:	0017      	movs	r7, r2
   14ee0:	4e0b      	ldr	r6, [pc, #44]	; (14f10 <__aeabi_dsub+0x624>)
   14ee2:	e589      	b.n	149f8 <__aeabi_dsub+0x10c>
   14ee4:	001e      	movs	r6, r3
   14ee6:	0027      	movs	r7, r4
   14ee8:	3e20      	subs	r6, #32
   14eea:	40f7      	lsrs	r7, r6
   14eec:	2b20      	cmp	r3, #32
   14eee:	d00c      	beq.n	14f0a <__aeabi_dsub+0x61e>
   14ef0:	2640      	movs	r6, #64	; 0x40
   14ef2:	1af3      	subs	r3, r6, r3
   14ef4:	409c      	lsls	r4, r3
   14ef6:	4650      	mov	r0, sl
   14ef8:	4320      	orrs	r0, r4
   14efa:	1e44      	subs	r4, r0, #1
   14efc:	41a0      	sbcs	r0, r4
   14efe:	4307      	orrs	r7, r0
   14f00:	2400      	movs	r4, #0
   14f02:	18bf      	adds	r7, r7, r2
   14f04:	e748      	b.n	14d98 <__aeabi_dsub+0x4ac>
   14f06:	2400      	movs	r4, #0
   14f08:	e7d0      	b.n	14eac <__aeabi_dsub+0x5c0>
   14f0a:	2400      	movs	r4, #0
   14f0c:	e7f3      	b.n	14ef6 <__aeabi_dsub+0x60a>
   14f0e:	46c0      	nop			; (mov r8, r8)
   14f10:	000007ff 	.word	0x000007ff
   14f14:	ff7fffff 	.word	0xff7fffff

00014f18 <__aeabi_d2iz>:
   14f18:	b530      	push	{r4, r5, lr}
   14f1a:	4d13      	ldr	r5, [pc, #76]	; (14f68 <__aeabi_d2iz+0x50>)
   14f1c:	030a      	lsls	r2, r1, #12
   14f1e:	004b      	lsls	r3, r1, #1
   14f20:	0b12      	lsrs	r2, r2, #12
   14f22:	0d5b      	lsrs	r3, r3, #21
   14f24:	0fc9      	lsrs	r1, r1, #31
   14f26:	2400      	movs	r4, #0
   14f28:	42ab      	cmp	r3, r5
   14f2a:	dd10      	ble.n	14f4e <__aeabi_d2iz+0x36>
   14f2c:	4c0f      	ldr	r4, [pc, #60]	; (14f6c <__aeabi_d2iz+0x54>)
   14f2e:	42a3      	cmp	r3, r4
   14f30:	dc0f      	bgt.n	14f52 <__aeabi_d2iz+0x3a>
   14f32:	2480      	movs	r4, #128	; 0x80
   14f34:	4d0e      	ldr	r5, [pc, #56]	; (14f70 <__aeabi_d2iz+0x58>)
   14f36:	0364      	lsls	r4, r4, #13
   14f38:	4322      	orrs	r2, r4
   14f3a:	1aed      	subs	r5, r5, r3
   14f3c:	2d1f      	cmp	r5, #31
   14f3e:	dd0b      	ble.n	14f58 <__aeabi_d2iz+0x40>
   14f40:	480c      	ldr	r0, [pc, #48]	; (14f74 <__aeabi_d2iz+0x5c>)
   14f42:	1ac3      	subs	r3, r0, r3
   14f44:	40da      	lsrs	r2, r3
   14f46:	4254      	negs	r4, r2
   14f48:	2900      	cmp	r1, #0
   14f4a:	d100      	bne.n	14f4e <__aeabi_d2iz+0x36>
   14f4c:	0014      	movs	r4, r2
   14f4e:	0020      	movs	r0, r4
   14f50:	bd30      	pop	{r4, r5, pc}
   14f52:	4b09      	ldr	r3, [pc, #36]	; (14f78 <__aeabi_d2iz+0x60>)
   14f54:	18cc      	adds	r4, r1, r3
   14f56:	e7fa      	b.n	14f4e <__aeabi_d2iz+0x36>
   14f58:	4c08      	ldr	r4, [pc, #32]	; (14f7c <__aeabi_d2iz+0x64>)
   14f5a:	40e8      	lsrs	r0, r5
   14f5c:	46a4      	mov	ip, r4
   14f5e:	4463      	add	r3, ip
   14f60:	409a      	lsls	r2, r3
   14f62:	4302      	orrs	r2, r0
   14f64:	e7ef      	b.n	14f46 <__aeabi_d2iz+0x2e>
   14f66:	46c0      	nop			; (mov r8, r8)
   14f68:	000003fe 	.word	0x000003fe
   14f6c:	0000041d 	.word	0x0000041d
   14f70:	00000433 	.word	0x00000433
   14f74:	00000413 	.word	0x00000413
   14f78:	7fffffff 	.word	0x7fffffff
   14f7c:	fffffbed 	.word	0xfffffbed

00014f80 <__aeabi_i2d>:
   14f80:	b570      	push	{r4, r5, r6, lr}
   14f82:	2800      	cmp	r0, #0
   14f84:	d030      	beq.n	14fe8 <__aeabi_i2d+0x68>
   14f86:	17c3      	asrs	r3, r0, #31
   14f88:	18c4      	adds	r4, r0, r3
   14f8a:	405c      	eors	r4, r3
   14f8c:	0fc5      	lsrs	r5, r0, #31
   14f8e:	0020      	movs	r0, r4
   14f90:	f000 f98a 	bl	152a8 <__clzsi2>
   14f94:	4b17      	ldr	r3, [pc, #92]	; (14ff4 <__aeabi_i2d+0x74>)
   14f96:	4a18      	ldr	r2, [pc, #96]	; (14ff8 <__aeabi_i2d+0x78>)
   14f98:	1a1b      	subs	r3, r3, r0
   14f9a:	1ad2      	subs	r2, r2, r3
   14f9c:	2a1f      	cmp	r2, #31
   14f9e:	dd18      	ble.n	14fd2 <__aeabi_i2d+0x52>
   14fa0:	4a16      	ldr	r2, [pc, #88]	; (14ffc <__aeabi_i2d+0x7c>)
   14fa2:	1ad2      	subs	r2, r2, r3
   14fa4:	4094      	lsls	r4, r2
   14fa6:	2200      	movs	r2, #0
   14fa8:	0324      	lsls	r4, r4, #12
   14faa:	055b      	lsls	r3, r3, #21
   14fac:	0b24      	lsrs	r4, r4, #12
   14fae:	0d5b      	lsrs	r3, r3, #21
   14fb0:	2100      	movs	r1, #0
   14fb2:	0010      	movs	r0, r2
   14fb4:	0324      	lsls	r4, r4, #12
   14fb6:	0d0a      	lsrs	r2, r1, #20
   14fb8:	0b24      	lsrs	r4, r4, #12
   14fba:	0512      	lsls	r2, r2, #20
   14fbc:	4322      	orrs	r2, r4
   14fbe:	4c10      	ldr	r4, [pc, #64]	; (15000 <__aeabi_i2d+0x80>)
   14fc0:	051b      	lsls	r3, r3, #20
   14fc2:	4022      	ands	r2, r4
   14fc4:	4313      	orrs	r3, r2
   14fc6:	005b      	lsls	r3, r3, #1
   14fc8:	07ed      	lsls	r5, r5, #31
   14fca:	085b      	lsrs	r3, r3, #1
   14fcc:	432b      	orrs	r3, r5
   14fce:	0019      	movs	r1, r3
   14fd0:	bd70      	pop	{r4, r5, r6, pc}
   14fd2:	0021      	movs	r1, r4
   14fd4:	4091      	lsls	r1, r2
   14fd6:	000a      	movs	r2, r1
   14fd8:	210b      	movs	r1, #11
   14fda:	1a08      	subs	r0, r1, r0
   14fdc:	40c4      	lsrs	r4, r0
   14fde:	055b      	lsls	r3, r3, #21
   14fe0:	0324      	lsls	r4, r4, #12
   14fe2:	0b24      	lsrs	r4, r4, #12
   14fe4:	0d5b      	lsrs	r3, r3, #21
   14fe6:	e7e3      	b.n	14fb0 <__aeabi_i2d+0x30>
   14fe8:	2500      	movs	r5, #0
   14fea:	2300      	movs	r3, #0
   14fec:	2400      	movs	r4, #0
   14fee:	2200      	movs	r2, #0
   14ff0:	e7de      	b.n	14fb0 <__aeabi_i2d+0x30>
   14ff2:	46c0      	nop			; (mov r8, r8)
   14ff4:	0000041e 	.word	0x0000041e
   14ff8:	00000433 	.word	0x00000433
   14ffc:	00000413 	.word	0x00000413
   15000:	800fffff 	.word	0x800fffff

00015004 <__aeabi_ui2d>:
   15004:	b510      	push	{r4, lr}
   15006:	1e04      	subs	r4, r0, #0
   15008:	d028      	beq.n	1505c <__aeabi_ui2d+0x58>
   1500a:	f000 f94d 	bl	152a8 <__clzsi2>
   1500e:	4b15      	ldr	r3, [pc, #84]	; (15064 <__aeabi_ui2d+0x60>)
   15010:	4a15      	ldr	r2, [pc, #84]	; (15068 <__aeabi_ui2d+0x64>)
   15012:	1a1b      	subs	r3, r3, r0
   15014:	1ad2      	subs	r2, r2, r3
   15016:	2a1f      	cmp	r2, #31
   15018:	dd15      	ble.n	15046 <__aeabi_ui2d+0x42>
   1501a:	4a14      	ldr	r2, [pc, #80]	; (1506c <__aeabi_ui2d+0x68>)
   1501c:	1ad2      	subs	r2, r2, r3
   1501e:	4094      	lsls	r4, r2
   15020:	2200      	movs	r2, #0
   15022:	0324      	lsls	r4, r4, #12
   15024:	055b      	lsls	r3, r3, #21
   15026:	0b24      	lsrs	r4, r4, #12
   15028:	0d5b      	lsrs	r3, r3, #21
   1502a:	2100      	movs	r1, #0
   1502c:	0010      	movs	r0, r2
   1502e:	0324      	lsls	r4, r4, #12
   15030:	0d0a      	lsrs	r2, r1, #20
   15032:	0b24      	lsrs	r4, r4, #12
   15034:	0512      	lsls	r2, r2, #20
   15036:	4322      	orrs	r2, r4
   15038:	4c0d      	ldr	r4, [pc, #52]	; (15070 <__aeabi_ui2d+0x6c>)
   1503a:	051b      	lsls	r3, r3, #20
   1503c:	4022      	ands	r2, r4
   1503e:	4313      	orrs	r3, r2
   15040:	005b      	lsls	r3, r3, #1
   15042:	0859      	lsrs	r1, r3, #1
   15044:	bd10      	pop	{r4, pc}
   15046:	0021      	movs	r1, r4
   15048:	4091      	lsls	r1, r2
   1504a:	000a      	movs	r2, r1
   1504c:	210b      	movs	r1, #11
   1504e:	1a08      	subs	r0, r1, r0
   15050:	40c4      	lsrs	r4, r0
   15052:	055b      	lsls	r3, r3, #21
   15054:	0324      	lsls	r4, r4, #12
   15056:	0b24      	lsrs	r4, r4, #12
   15058:	0d5b      	lsrs	r3, r3, #21
   1505a:	e7e6      	b.n	1502a <__aeabi_ui2d+0x26>
   1505c:	2300      	movs	r3, #0
   1505e:	2400      	movs	r4, #0
   15060:	2200      	movs	r2, #0
   15062:	e7e2      	b.n	1502a <__aeabi_ui2d+0x26>
   15064:	0000041e 	.word	0x0000041e
   15068:	00000433 	.word	0x00000433
   1506c:	00000413 	.word	0x00000413
   15070:	800fffff 	.word	0x800fffff

00015074 <__aeabi_f2d>:
   15074:	0041      	lsls	r1, r0, #1
   15076:	0e09      	lsrs	r1, r1, #24
   15078:	1c4b      	adds	r3, r1, #1
   1507a:	b570      	push	{r4, r5, r6, lr}
   1507c:	b2db      	uxtb	r3, r3
   1507e:	0246      	lsls	r6, r0, #9
   15080:	0a75      	lsrs	r5, r6, #9
   15082:	0fc4      	lsrs	r4, r0, #31
   15084:	2b01      	cmp	r3, #1
   15086:	dd14      	ble.n	150b2 <__aeabi_f2d+0x3e>
   15088:	23e0      	movs	r3, #224	; 0xe0
   1508a:	009b      	lsls	r3, r3, #2
   1508c:	076d      	lsls	r5, r5, #29
   1508e:	0b36      	lsrs	r6, r6, #12
   15090:	18cb      	adds	r3, r1, r3
   15092:	2100      	movs	r1, #0
   15094:	0d0a      	lsrs	r2, r1, #20
   15096:	0028      	movs	r0, r5
   15098:	0512      	lsls	r2, r2, #20
   1509a:	4d1c      	ldr	r5, [pc, #112]	; (1510c <__aeabi_f2d+0x98>)
   1509c:	4332      	orrs	r2, r6
   1509e:	055b      	lsls	r3, r3, #21
   150a0:	402a      	ands	r2, r5
   150a2:	085b      	lsrs	r3, r3, #1
   150a4:	4313      	orrs	r3, r2
   150a6:	005b      	lsls	r3, r3, #1
   150a8:	07e4      	lsls	r4, r4, #31
   150aa:	085b      	lsrs	r3, r3, #1
   150ac:	4323      	orrs	r3, r4
   150ae:	0019      	movs	r1, r3
   150b0:	bd70      	pop	{r4, r5, r6, pc}
   150b2:	2900      	cmp	r1, #0
   150b4:	d114      	bne.n	150e0 <__aeabi_f2d+0x6c>
   150b6:	2d00      	cmp	r5, #0
   150b8:	d01e      	beq.n	150f8 <__aeabi_f2d+0x84>
   150ba:	0028      	movs	r0, r5
   150bc:	f000 f8f4 	bl	152a8 <__clzsi2>
   150c0:	280a      	cmp	r0, #10
   150c2:	dc1c      	bgt.n	150fe <__aeabi_f2d+0x8a>
   150c4:	230b      	movs	r3, #11
   150c6:	002a      	movs	r2, r5
   150c8:	1a1b      	subs	r3, r3, r0
   150ca:	40da      	lsrs	r2, r3
   150cc:	0003      	movs	r3, r0
   150ce:	3315      	adds	r3, #21
   150d0:	409d      	lsls	r5, r3
   150d2:	4b0f      	ldr	r3, [pc, #60]	; (15110 <__aeabi_f2d+0x9c>)
   150d4:	0312      	lsls	r2, r2, #12
   150d6:	1a1b      	subs	r3, r3, r0
   150d8:	055b      	lsls	r3, r3, #21
   150da:	0b16      	lsrs	r6, r2, #12
   150dc:	0d5b      	lsrs	r3, r3, #21
   150de:	e7d8      	b.n	15092 <__aeabi_f2d+0x1e>
   150e0:	2d00      	cmp	r5, #0
   150e2:	d006      	beq.n	150f2 <__aeabi_f2d+0x7e>
   150e4:	0b32      	lsrs	r2, r6, #12
   150e6:	2680      	movs	r6, #128	; 0x80
   150e8:	0336      	lsls	r6, r6, #12
   150ea:	076d      	lsls	r5, r5, #29
   150ec:	4316      	orrs	r6, r2
   150ee:	4b09      	ldr	r3, [pc, #36]	; (15114 <__aeabi_f2d+0xa0>)
   150f0:	e7cf      	b.n	15092 <__aeabi_f2d+0x1e>
   150f2:	4b08      	ldr	r3, [pc, #32]	; (15114 <__aeabi_f2d+0xa0>)
   150f4:	2600      	movs	r6, #0
   150f6:	e7cc      	b.n	15092 <__aeabi_f2d+0x1e>
   150f8:	2300      	movs	r3, #0
   150fa:	2600      	movs	r6, #0
   150fc:	e7c9      	b.n	15092 <__aeabi_f2d+0x1e>
   150fe:	0003      	movs	r3, r0
   15100:	002a      	movs	r2, r5
   15102:	3b0b      	subs	r3, #11
   15104:	409a      	lsls	r2, r3
   15106:	2500      	movs	r5, #0
   15108:	e7e3      	b.n	150d2 <__aeabi_f2d+0x5e>
   1510a:	46c0      	nop			; (mov r8, r8)
   1510c:	800fffff 	.word	0x800fffff
   15110:	00000389 	.word	0x00000389
   15114:	000007ff 	.word	0x000007ff

00015118 <__aeabi_d2f>:
   15118:	b5f0      	push	{r4, r5, r6, r7, lr}
   1511a:	004c      	lsls	r4, r1, #1
   1511c:	0d64      	lsrs	r4, r4, #21
   1511e:	030b      	lsls	r3, r1, #12
   15120:	1c62      	adds	r2, r4, #1
   15122:	0f45      	lsrs	r5, r0, #29
   15124:	0a5b      	lsrs	r3, r3, #9
   15126:	0552      	lsls	r2, r2, #21
   15128:	432b      	orrs	r3, r5
   1512a:	0fc9      	lsrs	r1, r1, #31
   1512c:	00c5      	lsls	r5, r0, #3
   1512e:	0d52      	lsrs	r2, r2, #21
   15130:	2a01      	cmp	r2, #1
   15132:	dd28      	ble.n	15186 <__aeabi_d2f+0x6e>
   15134:	4a3a      	ldr	r2, [pc, #232]	; (15220 <__aeabi_d2f+0x108>)
   15136:	18a6      	adds	r6, r4, r2
   15138:	2efe      	cmp	r6, #254	; 0xfe
   1513a:	dc1b      	bgt.n	15174 <__aeabi_d2f+0x5c>
   1513c:	2e00      	cmp	r6, #0
   1513e:	dd3e      	ble.n	151be <__aeabi_d2f+0xa6>
   15140:	0180      	lsls	r0, r0, #6
   15142:	0002      	movs	r2, r0
   15144:	1e50      	subs	r0, r2, #1
   15146:	4182      	sbcs	r2, r0
   15148:	0f6d      	lsrs	r5, r5, #29
   1514a:	432a      	orrs	r2, r5
   1514c:	00db      	lsls	r3, r3, #3
   1514e:	4313      	orrs	r3, r2
   15150:	075a      	lsls	r2, r3, #29
   15152:	d004      	beq.n	1515e <__aeabi_d2f+0x46>
   15154:	220f      	movs	r2, #15
   15156:	401a      	ands	r2, r3
   15158:	2a04      	cmp	r2, #4
   1515a:	d000      	beq.n	1515e <__aeabi_d2f+0x46>
   1515c:	3304      	adds	r3, #4
   1515e:	2280      	movs	r2, #128	; 0x80
   15160:	04d2      	lsls	r2, r2, #19
   15162:	401a      	ands	r2, r3
   15164:	d05a      	beq.n	1521c <__aeabi_d2f+0x104>
   15166:	3601      	adds	r6, #1
   15168:	2eff      	cmp	r6, #255	; 0xff
   1516a:	d003      	beq.n	15174 <__aeabi_d2f+0x5c>
   1516c:	019b      	lsls	r3, r3, #6
   1516e:	0a5b      	lsrs	r3, r3, #9
   15170:	b2f4      	uxtb	r4, r6
   15172:	e001      	b.n	15178 <__aeabi_d2f+0x60>
   15174:	24ff      	movs	r4, #255	; 0xff
   15176:	2300      	movs	r3, #0
   15178:	0258      	lsls	r0, r3, #9
   1517a:	05e4      	lsls	r4, r4, #23
   1517c:	0a40      	lsrs	r0, r0, #9
   1517e:	07c9      	lsls	r1, r1, #31
   15180:	4320      	orrs	r0, r4
   15182:	4308      	orrs	r0, r1
   15184:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15186:	2c00      	cmp	r4, #0
   15188:	d007      	beq.n	1519a <__aeabi_d2f+0x82>
   1518a:	431d      	orrs	r5, r3
   1518c:	d0f2      	beq.n	15174 <__aeabi_d2f+0x5c>
   1518e:	2080      	movs	r0, #128	; 0x80
   15190:	00db      	lsls	r3, r3, #3
   15192:	0480      	lsls	r0, r0, #18
   15194:	4303      	orrs	r3, r0
   15196:	26ff      	movs	r6, #255	; 0xff
   15198:	e7da      	b.n	15150 <__aeabi_d2f+0x38>
   1519a:	432b      	orrs	r3, r5
   1519c:	d003      	beq.n	151a6 <__aeabi_d2f+0x8e>
   1519e:	2305      	movs	r3, #5
   151a0:	08db      	lsrs	r3, r3, #3
   151a2:	2cff      	cmp	r4, #255	; 0xff
   151a4:	d003      	beq.n	151ae <__aeabi_d2f+0x96>
   151a6:	025b      	lsls	r3, r3, #9
   151a8:	0a5b      	lsrs	r3, r3, #9
   151aa:	b2e4      	uxtb	r4, r4
   151ac:	e7e4      	b.n	15178 <__aeabi_d2f+0x60>
   151ae:	2b00      	cmp	r3, #0
   151b0:	d032      	beq.n	15218 <__aeabi_d2f+0x100>
   151b2:	2080      	movs	r0, #128	; 0x80
   151b4:	03c0      	lsls	r0, r0, #15
   151b6:	4303      	orrs	r3, r0
   151b8:	025b      	lsls	r3, r3, #9
   151ba:	0a5b      	lsrs	r3, r3, #9
   151bc:	e7dc      	b.n	15178 <__aeabi_d2f+0x60>
   151be:	0032      	movs	r2, r6
   151c0:	3217      	adds	r2, #23
   151c2:	db14      	blt.n	151ee <__aeabi_d2f+0xd6>
   151c4:	2280      	movs	r2, #128	; 0x80
   151c6:	271e      	movs	r7, #30
   151c8:	0412      	lsls	r2, r2, #16
   151ca:	4313      	orrs	r3, r2
   151cc:	1bbf      	subs	r7, r7, r6
   151ce:	2f1f      	cmp	r7, #31
   151d0:	dc0f      	bgt.n	151f2 <__aeabi_d2f+0xda>
   151d2:	4a14      	ldr	r2, [pc, #80]	; (15224 <__aeabi_d2f+0x10c>)
   151d4:	4694      	mov	ip, r2
   151d6:	4464      	add	r4, ip
   151d8:	002a      	movs	r2, r5
   151da:	40a5      	lsls	r5, r4
   151dc:	002e      	movs	r6, r5
   151de:	40a3      	lsls	r3, r4
   151e0:	1e75      	subs	r5, r6, #1
   151e2:	41ae      	sbcs	r6, r5
   151e4:	40fa      	lsrs	r2, r7
   151e6:	4333      	orrs	r3, r6
   151e8:	4313      	orrs	r3, r2
   151ea:	2600      	movs	r6, #0
   151ec:	e7b0      	b.n	15150 <__aeabi_d2f+0x38>
   151ee:	2400      	movs	r4, #0
   151f0:	e7d5      	b.n	1519e <__aeabi_d2f+0x86>
   151f2:	2202      	movs	r2, #2
   151f4:	4252      	negs	r2, r2
   151f6:	1b96      	subs	r6, r2, r6
   151f8:	001a      	movs	r2, r3
   151fa:	40f2      	lsrs	r2, r6
   151fc:	2f20      	cmp	r7, #32
   151fe:	d009      	beq.n	15214 <__aeabi_d2f+0xfc>
   15200:	4809      	ldr	r0, [pc, #36]	; (15228 <__aeabi_d2f+0x110>)
   15202:	4684      	mov	ip, r0
   15204:	4464      	add	r4, ip
   15206:	40a3      	lsls	r3, r4
   15208:	432b      	orrs	r3, r5
   1520a:	1e5d      	subs	r5, r3, #1
   1520c:	41ab      	sbcs	r3, r5
   1520e:	2600      	movs	r6, #0
   15210:	4313      	orrs	r3, r2
   15212:	e79d      	b.n	15150 <__aeabi_d2f+0x38>
   15214:	2300      	movs	r3, #0
   15216:	e7f7      	b.n	15208 <__aeabi_d2f+0xf0>
   15218:	2300      	movs	r3, #0
   1521a:	e7ad      	b.n	15178 <__aeabi_d2f+0x60>
   1521c:	0034      	movs	r4, r6
   1521e:	e7bf      	b.n	151a0 <__aeabi_d2f+0x88>
   15220:	fffffc80 	.word	0xfffffc80
   15224:	fffffc82 	.word	0xfffffc82
   15228:	fffffca2 	.word	0xfffffca2

0001522c <__aeabi_cdrcmple>:
   1522c:	4684      	mov	ip, r0
   1522e:	1c10      	adds	r0, r2, #0
   15230:	4662      	mov	r2, ip
   15232:	468c      	mov	ip, r1
   15234:	1c19      	adds	r1, r3, #0
   15236:	4663      	mov	r3, ip
   15238:	e000      	b.n	1523c <__aeabi_cdcmpeq>
   1523a:	46c0      	nop			; (mov r8, r8)

0001523c <__aeabi_cdcmpeq>:
   1523c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1523e:	f000 f8fb 	bl	15438 <__ledf2>
   15242:	2800      	cmp	r0, #0
   15244:	d401      	bmi.n	1524a <__aeabi_cdcmpeq+0xe>
   15246:	2100      	movs	r1, #0
   15248:	42c8      	cmn	r0, r1
   1524a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0001524c <__aeabi_dcmpeq>:
   1524c:	b510      	push	{r4, lr}
   1524e:	f000 f855 	bl	152fc <__eqdf2>
   15252:	4240      	negs	r0, r0
   15254:	3001      	adds	r0, #1
   15256:	bd10      	pop	{r4, pc}

00015258 <__aeabi_dcmplt>:
   15258:	b510      	push	{r4, lr}
   1525a:	f000 f8ed 	bl	15438 <__ledf2>
   1525e:	2800      	cmp	r0, #0
   15260:	db01      	blt.n	15266 <__aeabi_dcmplt+0xe>
   15262:	2000      	movs	r0, #0
   15264:	bd10      	pop	{r4, pc}
   15266:	2001      	movs	r0, #1
   15268:	bd10      	pop	{r4, pc}
   1526a:	46c0      	nop			; (mov r8, r8)

0001526c <__aeabi_dcmple>:
   1526c:	b510      	push	{r4, lr}
   1526e:	f000 f8e3 	bl	15438 <__ledf2>
   15272:	2800      	cmp	r0, #0
   15274:	dd01      	ble.n	1527a <__aeabi_dcmple+0xe>
   15276:	2000      	movs	r0, #0
   15278:	bd10      	pop	{r4, pc}
   1527a:	2001      	movs	r0, #1
   1527c:	bd10      	pop	{r4, pc}
   1527e:	46c0      	nop			; (mov r8, r8)

00015280 <__aeabi_dcmpgt>:
   15280:	b510      	push	{r4, lr}
   15282:	f000 f875 	bl	15370 <__gedf2>
   15286:	2800      	cmp	r0, #0
   15288:	dc01      	bgt.n	1528e <__aeabi_dcmpgt+0xe>
   1528a:	2000      	movs	r0, #0
   1528c:	bd10      	pop	{r4, pc}
   1528e:	2001      	movs	r0, #1
   15290:	bd10      	pop	{r4, pc}
   15292:	46c0      	nop			; (mov r8, r8)

00015294 <__aeabi_dcmpge>:
   15294:	b510      	push	{r4, lr}
   15296:	f000 f86b 	bl	15370 <__gedf2>
   1529a:	2800      	cmp	r0, #0
   1529c:	da01      	bge.n	152a2 <__aeabi_dcmpge+0xe>
   1529e:	2000      	movs	r0, #0
   152a0:	bd10      	pop	{r4, pc}
   152a2:	2001      	movs	r0, #1
   152a4:	bd10      	pop	{r4, pc}
   152a6:	46c0      	nop			; (mov r8, r8)

000152a8 <__clzsi2>:
   152a8:	211c      	movs	r1, #28
   152aa:	2301      	movs	r3, #1
   152ac:	041b      	lsls	r3, r3, #16
   152ae:	4298      	cmp	r0, r3
   152b0:	d301      	bcc.n	152b6 <__clzsi2+0xe>
   152b2:	0c00      	lsrs	r0, r0, #16
   152b4:	3910      	subs	r1, #16
   152b6:	0a1b      	lsrs	r3, r3, #8
   152b8:	4298      	cmp	r0, r3
   152ba:	d301      	bcc.n	152c0 <__clzsi2+0x18>
   152bc:	0a00      	lsrs	r0, r0, #8
   152be:	3908      	subs	r1, #8
   152c0:	091b      	lsrs	r3, r3, #4
   152c2:	4298      	cmp	r0, r3
   152c4:	d301      	bcc.n	152ca <__clzsi2+0x22>
   152c6:	0900      	lsrs	r0, r0, #4
   152c8:	3904      	subs	r1, #4
   152ca:	a202      	add	r2, pc, #8	; (adr r2, 152d4 <__clzsi2+0x2c>)
   152cc:	5c10      	ldrb	r0, [r2, r0]
   152ce:	1840      	adds	r0, r0, r1
   152d0:	4770      	bx	lr
   152d2:	46c0      	nop			; (mov r8, r8)
   152d4:	02020304 	.word	0x02020304
   152d8:	01010101 	.word	0x01010101
	...

000152e4 <__clzdi2>:
   152e4:	b510      	push	{r4, lr}
   152e6:	2900      	cmp	r1, #0
   152e8:	d103      	bne.n	152f2 <__clzdi2+0xe>
   152ea:	f7ff ffdd 	bl	152a8 <__clzsi2>
   152ee:	3020      	adds	r0, #32
   152f0:	e002      	b.n	152f8 <__clzdi2+0x14>
   152f2:	1c08      	adds	r0, r1, #0
   152f4:	f7ff ffd8 	bl	152a8 <__clzsi2>
   152f8:	bd10      	pop	{r4, pc}
   152fa:	46c0      	nop			; (mov r8, r8)

000152fc <__eqdf2>:
   152fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   152fe:	464f      	mov	r7, r9
   15300:	4646      	mov	r6, r8
   15302:	46d6      	mov	lr, sl
   15304:	005c      	lsls	r4, r3, #1
   15306:	b5c0      	push	{r6, r7, lr}
   15308:	031f      	lsls	r7, r3, #12
   1530a:	0fdb      	lsrs	r3, r3, #31
   1530c:	469a      	mov	sl, r3
   1530e:	4b17      	ldr	r3, [pc, #92]	; (1536c <__eqdf2+0x70>)
   15310:	030e      	lsls	r6, r1, #12
   15312:	004d      	lsls	r5, r1, #1
   15314:	4684      	mov	ip, r0
   15316:	4680      	mov	r8, r0
   15318:	0b36      	lsrs	r6, r6, #12
   1531a:	0d6d      	lsrs	r5, r5, #21
   1531c:	0fc9      	lsrs	r1, r1, #31
   1531e:	4691      	mov	r9, r2
   15320:	0b3f      	lsrs	r7, r7, #12
   15322:	0d64      	lsrs	r4, r4, #21
   15324:	2001      	movs	r0, #1
   15326:	429d      	cmp	r5, r3
   15328:	d008      	beq.n	1533c <__eqdf2+0x40>
   1532a:	429c      	cmp	r4, r3
   1532c:	d001      	beq.n	15332 <__eqdf2+0x36>
   1532e:	42a5      	cmp	r5, r4
   15330:	d00b      	beq.n	1534a <__eqdf2+0x4e>
   15332:	bc1c      	pop	{r2, r3, r4}
   15334:	4690      	mov	r8, r2
   15336:	4699      	mov	r9, r3
   15338:	46a2      	mov	sl, r4
   1533a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1533c:	4663      	mov	r3, ip
   1533e:	4333      	orrs	r3, r6
   15340:	d1f7      	bne.n	15332 <__eqdf2+0x36>
   15342:	42ac      	cmp	r4, r5
   15344:	d1f5      	bne.n	15332 <__eqdf2+0x36>
   15346:	433a      	orrs	r2, r7
   15348:	d1f3      	bne.n	15332 <__eqdf2+0x36>
   1534a:	2001      	movs	r0, #1
   1534c:	42be      	cmp	r6, r7
   1534e:	d1f0      	bne.n	15332 <__eqdf2+0x36>
   15350:	45c8      	cmp	r8, r9
   15352:	d1ee      	bne.n	15332 <__eqdf2+0x36>
   15354:	4551      	cmp	r1, sl
   15356:	d007      	beq.n	15368 <__eqdf2+0x6c>
   15358:	2d00      	cmp	r5, #0
   1535a:	d1ea      	bne.n	15332 <__eqdf2+0x36>
   1535c:	4663      	mov	r3, ip
   1535e:	431e      	orrs	r6, r3
   15360:	0030      	movs	r0, r6
   15362:	1e46      	subs	r6, r0, #1
   15364:	41b0      	sbcs	r0, r6
   15366:	e7e4      	b.n	15332 <__eqdf2+0x36>
   15368:	2000      	movs	r0, #0
   1536a:	e7e2      	b.n	15332 <__eqdf2+0x36>
   1536c:	000007ff 	.word	0x000007ff

00015370 <__gedf2>:
   15370:	b5f0      	push	{r4, r5, r6, r7, lr}
   15372:	4645      	mov	r5, r8
   15374:	46de      	mov	lr, fp
   15376:	4657      	mov	r7, sl
   15378:	464e      	mov	r6, r9
   1537a:	b5e0      	push	{r5, r6, r7, lr}
   1537c:	031f      	lsls	r7, r3, #12
   1537e:	0b3d      	lsrs	r5, r7, #12
   15380:	4f2c      	ldr	r7, [pc, #176]	; (15434 <__gedf2+0xc4>)
   15382:	030e      	lsls	r6, r1, #12
   15384:	004c      	lsls	r4, r1, #1
   15386:	46ab      	mov	fp, r5
   15388:	005d      	lsls	r5, r3, #1
   1538a:	4684      	mov	ip, r0
   1538c:	0b36      	lsrs	r6, r6, #12
   1538e:	0d64      	lsrs	r4, r4, #21
   15390:	0fc9      	lsrs	r1, r1, #31
   15392:	4690      	mov	r8, r2
   15394:	0d6d      	lsrs	r5, r5, #21
   15396:	0fdb      	lsrs	r3, r3, #31
   15398:	42bc      	cmp	r4, r7
   1539a:	d02a      	beq.n	153f2 <__gedf2+0x82>
   1539c:	4f25      	ldr	r7, [pc, #148]	; (15434 <__gedf2+0xc4>)
   1539e:	42bd      	cmp	r5, r7
   153a0:	d02d      	beq.n	153fe <__gedf2+0x8e>
   153a2:	2c00      	cmp	r4, #0
   153a4:	d10f      	bne.n	153c6 <__gedf2+0x56>
   153a6:	4330      	orrs	r0, r6
   153a8:	0007      	movs	r7, r0
   153aa:	4681      	mov	r9, r0
   153ac:	4278      	negs	r0, r7
   153ae:	4178      	adcs	r0, r7
   153b0:	b2c0      	uxtb	r0, r0
   153b2:	2d00      	cmp	r5, #0
   153b4:	d117      	bne.n	153e6 <__gedf2+0x76>
   153b6:	465f      	mov	r7, fp
   153b8:	433a      	orrs	r2, r7
   153ba:	d114      	bne.n	153e6 <__gedf2+0x76>
   153bc:	464b      	mov	r3, r9
   153be:	2000      	movs	r0, #0
   153c0:	2b00      	cmp	r3, #0
   153c2:	d00a      	beq.n	153da <__gedf2+0x6a>
   153c4:	e006      	b.n	153d4 <__gedf2+0x64>
   153c6:	2d00      	cmp	r5, #0
   153c8:	d102      	bne.n	153d0 <__gedf2+0x60>
   153ca:	4658      	mov	r0, fp
   153cc:	4302      	orrs	r2, r0
   153ce:	d001      	beq.n	153d4 <__gedf2+0x64>
   153d0:	4299      	cmp	r1, r3
   153d2:	d018      	beq.n	15406 <__gedf2+0x96>
   153d4:	4248      	negs	r0, r1
   153d6:	2101      	movs	r1, #1
   153d8:	4308      	orrs	r0, r1
   153da:	bc3c      	pop	{r2, r3, r4, r5}
   153dc:	4690      	mov	r8, r2
   153de:	4699      	mov	r9, r3
   153e0:	46a2      	mov	sl, r4
   153e2:	46ab      	mov	fp, r5
   153e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   153e6:	2800      	cmp	r0, #0
   153e8:	d0f2      	beq.n	153d0 <__gedf2+0x60>
   153ea:	2001      	movs	r0, #1
   153ec:	3b01      	subs	r3, #1
   153ee:	4318      	orrs	r0, r3
   153f0:	e7f3      	b.n	153da <__gedf2+0x6a>
   153f2:	0037      	movs	r7, r6
   153f4:	4307      	orrs	r7, r0
   153f6:	d0d1      	beq.n	1539c <__gedf2+0x2c>
   153f8:	2002      	movs	r0, #2
   153fa:	4240      	negs	r0, r0
   153fc:	e7ed      	b.n	153da <__gedf2+0x6a>
   153fe:	465f      	mov	r7, fp
   15400:	4317      	orrs	r7, r2
   15402:	d0ce      	beq.n	153a2 <__gedf2+0x32>
   15404:	e7f8      	b.n	153f8 <__gedf2+0x88>
   15406:	42ac      	cmp	r4, r5
   15408:	dce4      	bgt.n	153d4 <__gedf2+0x64>
   1540a:	da03      	bge.n	15414 <__gedf2+0xa4>
   1540c:	1e48      	subs	r0, r1, #1
   1540e:	2101      	movs	r1, #1
   15410:	4308      	orrs	r0, r1
   15412:	e7e2      	b.n	153da <__gedf2+0x6a>
   15414:	455e      	cmp	r6, fp
   15416:	d8dd      	bhi.n	153d4 <__gedf2+0x64>
   15418:	d006      	beq.n	15428 <__gedf2+0xb8>
   1541a:	2000      	movs	r0, #0
   1541c:	455e      	cmp	r6, fp
   1541e:	d2dc      	bcs.n	153da <__gedf2+0x6a>
   15420:	2301      	movs	r3, #1
   15422:	1e48      	subs	r0, r1, #1
   15424:	4318      	orrs	r0, r3
   15426:	e7d8      	b.n	153da <__gedf2+0x6a>
   15428:	45c4      	cmp	ip, r8
   1542a:	d8d3      	bhi.n	153d4 <__gedf2+0x64>
   1542c:	2000      	movs	r0, #0
   1542e:	45c4      	cmp	ip, r8
   15430:	d3f6      	bcc.n	15420 <__gedf2+0xb0>
   15432:	e7d2      	b.n	153da <__gedf2+0x6a>
   15434:	000007ff 	.word	0x000007ff

00015438 <__ledf2>:
   15438:	b5f0      	push	{r4, r5, r6, r7, lr}
   1543a:	464e      	mov	r6, r9
   1543c:	4645      	mov	r5, r8
   1543e:	46de      	mov	lr, fp
   15440:	4657      	mov	r7, sl
   15442:	005c      	lsls	r4, r3, #1
   15444:	b5e0      	push	{r5, r6, r7, lr}
   15446:	031f      	lsls	r7, r3, #12
   15448:	0fdb      	lsrs	r3, r3, #31
   1544a:	4699      	mov	r9, r3
   1544c:	4b2a      	ldr	r3, [pc, #168]	; (154f8 <__ledf2+0xc0>)
   1544e:	030e      	lsls	r6, r1, #12
   15450:	004d      	lsls	r5, r1, #1
   15452:	0fc9      	lsrs	r1, r1, #31
   15454:	4684      	mov	ip, r0
   15456:	0b36      	lsrs	r6, r6, #12
   15458:	0d6d      	lsrs	r5, r5, #21
   1545a:	468b      	mov	fp, r1
   1545c:	4690      	mov	r8, r2
   1545e:	0b3f      	lsrs	r7, r7, #12
   15460:	0d64      	lsrs	r4, r4, #21
   15462:	429d      	cmp	r5, r3
   15464:	d020      	beq.n	154a8 <__ledf2+0x70>
   15466:	4b24      	ldr	r3, [pc, #144]	; (154f8 <__ledf2+0xc0>)
   15468:	429c      	cmp	r4, r3
   1546a:	d022      	beq.n	154b2 <__ledf2+0x7a>
   1546c:	2d00      	cmp	r5, #0
   1546e:	d112      	bne.n	15496 <__ledf2+0x5e>
   15470:	4330      	orrs	r0, r6
   15472:	4243      	negs	r3, r0
   15474:	4143      	adcs	r3, r0
   15476:	b2db      	uxtb	r3, r3
   15478:	2c00      	cmp	r4, #0
   1547a:	d01f      	beq.n	154bc <__ledf2+0x84>
   1547c:	2b00      	cmp	r3, #0
   1547e:	d00c      	beq.n	1549a <__ledf2+0x62>
   15480:	464b      	mov	r3, r9
   15482:	2001      	movs	r0, #1
   15484:	3b01      	subs	r3, #1
   15486:	4303      	orrs	r3, r0
   15488:	0018      	movs	r0, r3
   1548a:	bc3c      	pop	{r2, r3, r4, r5}
   1548c:	4690      	mov	r8, r2
   1548e:	4699      	mov	r9, r3
   15490:	46a2      	mov	sl, r4
   15492:	46ab      	mov	fp, r5
   15494:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15496:	2c00      	cmp	r4, #0
   15498:	d016      	beq.n	154c8 <__ledf2+0x90>
   1549a:	45cb      	cmp	fp, r9
   1549c:	d017      	beq.n	154ce <__ledf2+0x96>
   1549e:	465b      	mov	r3, fp
   154a0:	4259      	negs	r1, r3
   154a2:	2301      	movs	r3, #1
   154a4:	430b      	orrs	r3, r1
   154a6:	e7ef      	b.n	15488 <__ledf2+0x50>
   154a8:	0031      	movs	r1, r6
   154aa:	2302      	movs	r3, #2
   154ac:	4301      	orrs	r1, r0
   154ae:	d1eb      	bne.n	15488 <__ledf2+0x50>
   154b0:	e7d9      	b.n	15466 <__ledf2+0x2e>
   154b2:	0039      	movs	r1, r7
   154b4:	2302      	movs	r3, #2
   154b6:	4311      	orrs	r1, r2
   154b8:	d1e6      	bne.n	15488 <__ledf2+0x50>
   154ba:	e7d7      	b.n	1546c <__ledf2+0x34>
   154bc:	433a      	orrs	r2, r7
   154be:	d1dd      	bne.n	1547c <__ledf2+0x44>
   154c0:	2300      	movs	r3, #0
   154c2:	2800      	cmp	r0, #0
   154c4:	d0e0      	beq.n	15488 <__ledf2+0x50>
   154c6:	e7ea      	b.n	1549e <__ledf2+0x66>
   154c8:	433a      	orrs	r2, r7
   154ca:	d1e6      	bne.n	1549a <__ledf2+0x62>
   154cc:	e7e7      	b.n	1549e <__ledf2+0x66>
   154ce:	42a5      	cmp	r5, r4
   154d0:	dce5      	bgt.n	1549e <__ledf2+0x66>
   154d2:	db05      	blt.n	154e0 <__ledf2+0xa8>
   154d4:	42be      	cmp	r6, r7
   154d6:	d8e2      	bhi.n	1549e <__ledf2+0x66>
   154d8:	d007      	beq.n	154ea <__ledf2+0xb2>
   154da:	2300      	movs	r3, #0
   154dc:	42be      	cmp	r6, r7
   154de:	d2d3      	bcs.n	15488 <__ledf2+0x50>
   154e0:	4659      	mov	r1, fp
   154e2:	2301      	movs	r3, #1
   154e4:	3901      	subs	r1, #1
   154e6:	430b      	orrs	r3, r1
   154e8:	e7ce      	b.n	15488 <__ledf2+0x50>
   154ea:	45c4      	cmp	ip, r8
   154ec:	d8d7      	bhi.n	1549e <__ledf2+0x66>
   154ee:	2300      	movs	r3, #0
   154f0:	45c4      	cmp	ip, r8
   154f2:	d3f5      	bcc.n	154e0 <__ledf2+0xa8>
   154f4:	e7c8      	b.n	15488 <__ledf2+0x50>
   154f6:	46c0      	nop			; (mov r8, r8)
   154f8:	000007ff 	.word	0x000007ff

000154fc <__assert_func>:
   154fc:	b530      	push	{r4, r5, lr}
   154fe:	001c      	movs	r4, r3
   15500:	4b09      	ldr	r3, [pc, #36]	; (15528 <__assert_func+0x2c>)
   15502:	0005      	movs	r5, r0
   15504:	681b      	ldr	r3, [r3, #0]
   15506:	b085      	sub	sp, #20
   15508:	68d8      	ldr	r0, [r3, #12]
   1550a:	4b08      	ldr	r3, [pc, #32]	; (1552c <__assert_func+0x30>)
   1550c:	2a00      	cmp	r2, #0
   1550e:	d101      	bne.n	15514 <__assert_func+0x18>
   15510:	4b07      	ldr	r3, [pc, #28]	; (15530 <__assert_func+0x34>)
   15512:	001a      	movs	r2, r3
   15514:	9202      	str	r2, [sp, #8]
   15516:	9301      	str	r3, [sp, #4]
   15518:	9100      	str	r1, [sp, #0]
   1551a:	002b      	movs	r3, r5
   1551c:	0022      	movs	r2, r4
   1551e:	4905      	ldr	r1, [pc, #20]	; (15534 <__assert_func+0x38>)
   15520:	f000 f80a 	bl	15538 <fiprintf>
   15524:	f000 fdde 	bl	160e4 <abort>
   15528:	2000002c 	.word	0x2000002c
   1552c:	00017d04 	.word	0x00017d04
   15530:	00017d3f 	.word	0x00017d3f
   15534:	00017d11 	.word	0x00017d11

00015538 <fiprintf>:
   15538:	b40e      	push	{r1, r2, r3}
   1553a:	b503      	push	{r0, r1, lr}
   1553c:	0001      	movs	r1, r0
   1553e:	ab03      	add	r3, sp, #12
   15540:	4804      	ldr	r0, [pc, #16]	; (15554 <fiprintf+0x1c>)
   15542:	cb04      	ldmia	r3!, {r2}
   15544:	6800      	ldr	r0, [r0, #0]
   15546:	9301      	str	r3, [sp, #4]
   15548:	f000 f872 	bl	15630 <_vfiprintf_r>
   1554c:	b002      	add	sp, #8
   1554e:	bc08      	pop	{r3}
   15550:	b003      	add	sp, #12
   15552:	4718      	bx	r3
   15554:	2000002c 	.word	0x2000002c

00015558 <__libc_init_array>:
   15558:	b570      	push	{r4, r5, r6, lr}
   1555a:	2600      	movs	r6, #0
   1555c:	4d0c      	ldr	r5, [pc, #48]	; (15590 <__libc_init_array+0x38>)
   1555e:	4c0d      	ldr	r4, [pc, #52]	; (15594 <__libc_init_array+0x3c>)
   15560:	1b64      	subs	r4, r4, r5
   15562:	10a4      	asrs	r4, r4, #2
   15564:	42a6      	cmp	r6, r4
   15566:	d109      	bne.n	1557c <__libc_init_array+0x24>
   15568:	2600      	movs	r6, #0
   1556a:	f002 fc35 	bl	17dd8 <_init>
   1556e:	4d0a      	ldr	r5, [pc, #40]	; (15598 <__libc_init_array+0x40>)
   15570:	4c0a      	ldr	r4, [pc, #40]	; (1559c <__libc_init_array+0x44>)
   15572:	1b64      	subs	r4, r4, r5
   15574:	10a4      	asrs	r4, r4, #2
   15576:	42a6      	cmp	r6, r4
   15578:	d105      	bne.n	15586 <__libc_init_array+0x2e>
   1557a:	bd70      	pop	{r4, r5, r6, pc}
   1557c:	00b3      	lsls	r3, r6, #2
   1557e:	58eb      	ldr	r3, [r5, r3]
   15580:	4798      	blx	r3
   15582:	3601      	adds	r6, #1
   15584:	e7ee      	b.n	15564 <__libc_init_array+0xc>
   15586:	00b3      	lsls	r3, r6, #2
   15588:	58eb      	ldr	r3, [r5, r3]
   1558a:	4798      	blx	r3
   1558c:	3601      	adds	r6, #1
   1558e:	e7f2      	b.n	15576 <__libc_init_array+0x1e>
   15590:	00017de4 	.word	0x00017de4
   15594:	00017de4 	.word	0x00017de4
   15598:	00017de4 	.word	0x00017de4
   1559c:	00017de8 	.word	0x00017de8

000155a0 <memcmp>:
   155a0:	b530      	push	{r4, r5, lr}
   155a2:	2400      	movs	r4, #0
   155a4:	42a2      	cmp	r2, r4
   155a6:	d101      	bne.n	155ac <memcmp+0xc>
   155a8:	2000      	movs	r0, #0
   155aa:	e005      	b.n	155b8 <memcmp+0x18>
   155ac:	5d03      	ldrb	r3, [r0, r4]
   155ae:	1c65      	adds	r5, r4, #1
   155b0:	5d0c      	ldrb	r4, [r1, r4]
   155b2:	42a3      	cmp	r3, r4
   155b4:	d001      	beq.n	155ba <memcmp+0x1a>
   155b6:	1b18      	subs	r0, r3, r4
   155b8:	bd30      	pop	{r4, r5, pc}
   155ba:	002c      	movs	r4, r5
   155bc:	e7f2      	b.n	155a4 <memcmp+0x4>

000155be <memcpy>:
   155be:	2300      	movs	r3, #0
   155c0:	b510      	push	{r4, lr}
   155c2:	429a      	cmp	r2, r3
   155c4:	d100      	bne.n	155c8 <memcpy+0xa>
   155c6:	bd10      	pop	{r4, pc}
   155c8:	5ccc      	ldrb	r4, [r1, r3]
   155ca:	54c4      	strb	r4, [r0, r3]
   155cc:	3301      	adds	r3, #1
   155ce:	e7f8      	b.n	155c2 <memcpy+0x4>

000155d0 <memset>:
   155d0:	0003      	movs	r3, r0
   155d2:	1882      	adds	r2, r0, r2
   155d4:	4293      	cmp	r3, r2
   155d6:	d100      	bne.n	155da <memset+0xa>
   155d8:	4770      	bx	lr
   155da:	7019      	strb	r1, [r3, #0]
   155dc:	3301      	adds	r3, #1
   155de:	e7f9      	b.n	155d4 <memset+0x4>

000155e0 <__sfputc_r>:
   155e0:	6893      	ldr	r3, [r2, #8]
   155e2:	b510      	push	{r4, lr}
   155e4:	3b01      	subs	r3, #1
   155e6:	6093      	str	r3, [r2, #8]
   155e8:	2b00      	cmp	r3, #0
   155ea:	da05      	bge.n	155f8 <__sfputc_r+0x18>
   155ec:	6994      	ldr	r4, [r2, #24]
   155ee:	42a3      	cmp	r3, r4
   155f0:	db08      	blt.n	15604 <__sfputc_r+0x24>
   155f2:	b2cb      	uxtb	r3, r1
   155f4:	2b0a      	cmp	r3, #10
   155f6:	d005      	beq.n	15604 <__sfputc_r+0x24>
   155f8:	6813      	ldr	r3, [r2, #0]
   155fa:	1c58      	adds	r0, r3, #1
   155fc:	6010      	str	r0, [r2, #0]
   155fe:	7019      	strb	r1, [r3, #0]
   15600:	b2c8      	uxtb	r0, r1
   15602:	bd10      	pop	{r4, pc}
   15604:	f000 fca2 	bl	15f4c <__swbuf_r>
   15608:	e7fb      	b.n	15602 <__sfputc_r+0x22>

0001560a <__sfputs_r>:
   1560a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1560c:	0006      	movs	r6, r0
   1560e:	000f      	movs	r7, r1
   15610:	0014      	movs	r4, r2
   15612:	18d5      	adds	r5, r2, r3
   15614:	42ac      	cmp	r4, r5
   15616:	d101      	bne.n	1561c <__sfputs_r+0x12>
   15618:	2000      	movs	r0, #0
   1561a:	e007      	b.n	1562c <__sfputs_r+0x22>
   1561c:	7821      	ldrb	r1, [r4, #0]
   1561e:	003a      	movs	r2, r7
   15620:	0030      	movs	r0, r6
   15622:	f7ff ffdd 	bl	155e0 <__sfputc_r>
   15626:	3401      	adds	r4, #1
   15628:	1c43      	adds	r3, r0, #1
   1562a:	d1f3      	bne.n	15614 <__sfputs_r+0xa>
   1562c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1562e:	Address 0x0001562e is out of bounds.


00015630 <_vfiprintf_r>:
   15630:	b5f0      	push	{r4, r5, r6, r7, lr}
   15632:	b09f      	sub	sp, #124	; 0x7c
   15634:	0006      	movs	r6, r0
   15636:	000f      	movs	r7, r1
   15638:	0014      	movs	r4, r2
   1563a:	9305      	str	r3, [sp, #20]
   1563c:	2800      	cmp	r0, #0
   1563e:	d004      	beq.n	1564a <_vfiprintf_r+0x1a>
   15640:	6983      	ldr	r3, [r0, #24]
   15642:	2b00      	cmp	r3, #0
   15644:	d101      	bne.n	1564a <_vfiprintf_r+0x1a>
   15646:	f000 fe4d 	bl	162e4 <__sinit>
   1564a:	4b7f      	ldr	r3, [pc, #508]	; (15848 <_vfiprintf_r+0x218>)
   1564c:	429f      	cmp	r7, r3
   1564e:	d15c      	bne.n	1570a <_vfiprintf_r+0xda>
   15650:	6877      	ldr	r7, [r6, #4]
   15652:	89bb      	ldrh	r3, [r7, #12]
   15654:	071b      	lsls	r3, r3, #28
   15656:	d562      	bpl.n	1571e <_vfiprintf_r+0xee>
   15658:	693b      	ldr	r3, [r7, #16]
   1565a:	2b00      	cmp	r3, #0
   1565c:	d05f      	beq.n	1571e <_vfiprintf_r+0xee>
   1565e:	2300      	movs	r3, #0
   15660:	ad06      	add	r5, sp, #24
   15662:	616b      	str	r3, [r5, #20]
   15664:	3320      	adds	r3, #32
   15666:	766b      	strb	r3, [r5, #25]
   15668:	3310      	adds	r3, #16
   1566a:	76ab      	strb	r3, [r5, #26]
   1566c:	9402      	str	r4, [sp, #8]
   1566e:	9c02      	ldr	r4, [sp, #8]
   15670:	7823      	ldrb	r3, [r4, #0]
   15672:	2b00      	cmp	r3, #0
   15674:	d15d      	bne.n	15732 <_vfiprintf_r+0x102>
   15676:	9b02      	ldr	r3, [sp, #8]
   15678:	1ae3      	subs	r3, r4, r3
   1567a:	9304      	str	r3, [sp, #16]
   1567c:	d00d      	beq.n	1569a <_vfiprintf_r+0x6a>
   1567e:	9b04      	ldr	r3, [sp, #16]
   15680:	9a02      	ldr	r2, [sp, #8]
   15682:	0039      	movs	r1, r7
   15684:	0030      	movs	r0, r6
   15686:	f7ff ffc0 	bl	1560a <__sfputs_r>
   1568a:	1c43      	adds	r3, r0, #1
   1568c:	d100      	bne.n	15690 <_vfiprintf_r+0x60>
   1568e:	e0cc      	b.n	1582a <_vfiprintf_r+0x1fa>
   15690:	696a      	ldr	r2, [r5, #20]
   15692:	9b04      	ldr	r3, [sp, #16]
   15694:	4694      	mov	ip, r2
   15696:	4463      	add	r3, ip
   15698:	616b      	str	r3, [r5, #20]
   1569a:	7823      	ldrb	r3, [r4, #0]
   1569c:	2b00      	cmp	r3, #0
   1569e:	d100      	bne.n	156a2 <_vfiprintf_r+0x72>
   156a0:	e0c3      	b.n	1582a <_vfiprintf_r+0x1fa>
   156a2:	2201      	movs	r2, #1
   156a4:	2300      	movs	r3, #0
   156a6:	4252      	negs	r2, r2
   156a8:	606a      	str	r2, [r5, #4]
   156aa:	a902      	add	r1, sp, #8
   156ac:	3254      	adds	r2, #84	; 0x54
   156ae:	1852      	adds	r2, r2, r1
   156b0:	3401      	adds	r4, #1
   156b2:	602b      	str	r3, [r5, #0]
   156b4:	60eb      	str	r3, [r5, #12]
   156b6:	60ab      	str	r3, [r5, #8]
   156b8:	7013      	strb	r3, [r2, #0]
   156ba:	65ab      	str	r3, [r5, #88]	; 0x58
   156bc:	7821      	ldrb	r1, [r4, #0]
   156be:	2205      	movs	r2, #5
   156c0:	4862      	ldr	r0, [pc, #392]	; (1584c <_vfiprintf_r+0x21c>)
   156c2:	f000 ff1b 	bl	164fc <memchr>
   156c6:	1c63      	adds	r3, r4, #1
   156c8:	469c      	mov	ip, r3
   156ca:	2800      	cmp	r0, #0
   156cc:	d135      	bne.n	1573a <_vfiprintf_r+0x10a>
   156ce:	6829      	ldr	r1, [r5, #0]
   156d0:	06cb      	lsls	r3, r1, #27
   156d2:	d504      	bpl.n	156de <_vfiprintf_r+0xae>
   156d4:	2353      	movs	r3, #83	; 0x53
   156d6:	aa02      	add	r2, sp, #8
   156d8:	3020      	adds	r0, #32
   156da:	189b      	adds	r3, r3, r2
   156dc:	7018      	strb	r0, [r3, #0]
   156de:	070b      	lsls	r3, r1, #28
   156e0:	d504      	bpl.n	156ec <_vfiprintf_r+0xbc>
   156e2:	2353      	movs	r3, #83	; 0x53
   156e4:	202b      	movs	r0, #43	; 0x2b
   156e6:	aa02      	add	r2, sp, #8
   156e8:	189b      	adds	r3, r3, r2
   156ea:	7018      	strb	r0, [r3, #0]
   156ec:	7823      	ldrb	r3, [r4, #0]
   156ee:	2b2a      	cmp	r3, #42	; 0x2a
   156f0:	d02c      	beq.n	1574c <_vfiprintf_r+0x11c>
   156f2:	2000      	movs	r0, #0
   156f4:	210a      	movs	r1, #10
   156f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   156f8:	7822      	ldrb	r2, [r4, #0]
   156fa:	3a30      	subs	r2, #48	; 0x30
   156fc:	2a09      	cmp	r2, #9
   156fe:	d800      	bhi.n	15702 <_vfiprintf_r+0xd2>
   15700:	e06b      	b.n	157da <_vfiprintf_r+0x1aa>
   15702:	2800      	cmp	r0, #0
   15704:	d02a      	beq.n	1575c <_vfiprintf_r+0x12c>
   15706:	9309      	str	r3, [sp, #36]	; 0x24
   15708:	e028      	b.n	1575c <_vfiprintf_r+0x12c>
   1570a:	4b51      	ldr	r3, [pc, #324]	; (15850 <_vfiprintf_r+0x220>)
   1570c:	429f      	cmp	r7, r3
   1570e:	d101      	bne.n	15714 <_vfiprintf_r+0xe4>
   15710:	68b7      	ldr	r7, [r6, #8]
   15712:	e79e      	b.n	15652 <_vfiprintf_r+0x22>
   15714:	4b4f      	ldr	r3, [pc, #316]	; (15854 <_vfiprintf_r+0x224>)
   15716:	429f      	cmp	r7, r3
   15718:	d19b      	bne.n	15652 <_vfiprintf_r+0x22>
   1571a:	68f7      	ldr	r7, [r6, #12]
   1571c:	e799      	b.n	15652 <_vfiprintf_r+0x22>
   1571e:	0039      	movs	r1, r7
   15720:	0030      	movs	r0, r6
   15722:	f000 fc69 	bl	15ff8 <__swsetup_r>
   15726:	2800      	cmp	r0, #0
   15728:	d099      	beq.n	1565e <_vfiprintf_r+0x2e>
   1572a:	2001      	movs	r0, #1
   1572c:	4240      	negs	r0, r0
   1572e:	b01f      	add	sp, #124	; 0x7c
   15730:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15732:	2b25      	cmp	r3, #37	; 0x25
   15734:	d09f      	beq.n	15676 <_vfiprintf_r+0x46>
   15736:	3401      	adds	r4, #1
   15738:	e79a      	b.n	15670 <_vfiprintf_r+0x40>
   1573a:	4b44      	ldr	r3, [pc, #272]	; (1584c <_vfiprintf_r+0x21c>)
   1573c:	6829      	ldr	r1, [r5, #0]
   1573e:	1ac0      	subs	r0, r0, r3
   15740:	2301      	movs	r3, #1
   15742:	4083      	lsls	r3, r0
   15744:	430b      	orrs	r3, r1
   15746:	602b      	str	r3, [r5, #0]
   15748:	4664      	mov	r4, ip
   1574a:	e7b7      	b.n	156bc <_vfiprintf_r+0x8c>
   1574c:	9b05      	ldr	r3, [sp, #20]
   1574e:	1d18      	adds	r0, r3, #4
   15750:	681b      	ldr	r3, [r3, #0]
   15752:	9005      	str	r0, [sp, #20]
   15754:	2b00      	cmp	r3, #0
   15756:	db3a      	blt.n	157ce <_vfiprintf_r+0x19e>
   15758:	9309      	str	r3, [sp, #36]	; 0x24
   1575a:	4664      	mov	r4, ip
   1575c:	7823      	ldrb	r3, [r4, #0]
   1575e:	2b2e      	cmp	r3, #46	; 0x2e
   15760:	d10b      	bne.n	1577a <_vfiprintf_r+0x14a>
   15762:	7863      	ldrb	r3, [r4, #1]
   15764:	1c62      	adds	r2, r4, #1
   15766:	2b2a      	cmp	r3, #42	; 0x2a
   15768:	d13f      	bne.n	157ea <_vfiprintf_r+0x1ba>
   1576a:	9b05      	ldr	r3, [sp, #20]
   1576c:	3402      	adds	r4, #2
   1576e:	1d1a      	adds	r2, r3, #4
   15770:	681b      	ldr	r3, [r3, #0]
   15772:	9205      	str	r2, [sp, #20]
   15774:	2b00      	cmp	r3, #0
   15776:	db35      	blt.n	157e4 <_vfiprintf_r+0x1b4>
   15778:	9307      	str	r3, [sp, #28]
   1577a:	7821      	ldrb	r1, [r4, #0]
   1577c:	2203      	movs	r2, #3
   1577e:	4836      	ldr	r0, [pc, #216]	; (15858 <_vfiprintf_r+0x228>)
   15780:	f000 febc 	bl	164fc <memchr>
   15784:	2800      	cmp	r0, #0
   15786:	d007      	beq.n	15798 <_vfiprintf_r+0x168>
   15788:	4b33      	ldr	r3, [pc, #204]	; (15858 <_vfiprintf_r+0x228>)
   1578a:	682a      	ldr	r2, [r5, #0]
   1578c:	1ac0      	subs	r0, r0, r3
   1578e:	2340      	movs	r3, #64	; 0x40
   15790:	4083      	lsls	r3, r0
   15792:	4313      	orrs	r3, r2
   15794:	602b      	str	r3, [r5, #0]
   15796:	3401      	adds	r4, #1
   15798:	7821      	ldrb	r1, [r4, #0]
   1579a:	1c63      	adds	r3, r4, #1
   1579c:	2206      	movs	r2, #6
   1579e:	482f      	ldr	r0, [pc, #188]	; (1585c <_vfiprintf_r+0x22c>)
   157a0:	9302      	str	r3, [sp, #8]
   157a2:	7629      	strb	r1, [r5, #24]
   157a4:	f000 feaa 	bl	164fc <memchr>
   157a8:	2800      	cmp	r0, #0
   157aa:	d044      	beq.n	15836 <_vfiprintf_r+0x206>
   157ac:	4b2c      	ldr	r3, [pc, #176]	; (15860 <_vfiprintf_r+0x230>)
   157ae:	2b00      	cmp	r3, #0
   157b0:	d12f      	bne.n	15812 <_vfiprintf_r+0x1e2>
   157b2:	6829      	ldr	r1, [r5, #0]
   157b4:	9b05      	ldr	r3, [sp, #20]
   157b6:	2207      	movs	r2, #7
   157b8:	05c9      	lsls	r1, r1, #23
   157ba:	d528      	bpl.n	1580e <_vfiprintf_r+0x1de>
   157bc:	189b      	adds	r3, r3, r2
   157be:	4393      	bics	r3, r2
   157c0:	3308      	adds	r3, #8
   157c2:	9305      	str	r3, [sp, #20]
   157c4:	696b      	ldr	r3, [r5, #20]
   157c6:	9a03      	ldr	r2, [sp, #12]
   157c8:	189b      	adds	r3, r3, r2
   157ca:	616b      	str	r3, [r5, #20]
   157cc:	e74f      	b.n	1566e <_vfiprintf_r+0x3e>
   157ce:	425b      	negs	r3, r3
   157d0:	60eb      	str	r3, [r5, #12]
   157d2:	2302      	movs	r3, #2
   157d4:	430b      	orrs	r3, r1
   157d6:	602b      	str	r3, [r5, #0]
   157d8:	e7bf      	b.n	1575a <_vfiprintf_r+0x12a>
   157da:	434b      	muls	r3, r1
   157dc:	3401      	adds	r4, #1
   157de:	189b      	adds	r3, r3, r2
   157e0:	2001      	movs	r0, #1
   157e2:	e789      	b.n	156f8 <_vfiprintf_r+0xc8>
   157e4:	2301      	movs	r3, #1
   157e6:	425b      	negs	r3, r3
   157e8:	e7c6      	b.n	15778 <_vfiprintf_r+0x148>
   157ea:	2300      	movs	r3, #0
   157ec:	0014      	movs	r4, r2
   157ee:	200a      	movs	r0, #10
   157f0:	001a      	movs	r2, r3
   157f2:	606b      	str	r3, [r5, #4]
   157f4:	7821      	ldrb	r1, [r4, #0]
   157f6:	3930      	subs	r1, #48	; 0x30
   157f8:	2909      	cmp	r1, #9
   157fa:	d903      	bls.n	15804 <_vfiprintf_r+0x1d4>
   157fc:	2b00      	cmp	r3, #0
   157fe:	d0bc      	beq.n	1577a <_vfiprintf_r+0x14a>
   15800:	9207      	str	r2, [sp, #28]
   15802:	e7ba      	b.n	1577a <_vfiprintf_r+0x14a>
   15804:	4342      	muls	r2, r0
   15806:	3401      	adds	r4, #1
   15808:	1852      	adds	r2, r2, r1
   1580a:	2301      	movs	r3, #1
   1580c:	e7f2      	b.n	157f4 <_vfiprintf_r+0x1c4>
   1580e:	3307      	adds	r3, #7
   15810:	e7d5      	b.n	157be <_vfiprintf_r+0x18e>
   15812:	ab05      	add	r3, sp, #20
   15814:	9300      	str	r3, [sp, #0]
   15816:	003a      	movs	r2, r7
   15818:	4b12      	ldr	r3, [pc, #72]	; (15864 <_vfiprintf_r+0x234>)
   1581a:	0029      	movs	r1, r5
   1581c:	0030      	movs	r0, r6
   1581e:	e000      	b.n	15822 <_vfiprintf_r+0x1f2>
   15820:	bf00      	nop
   15822:	9003      	str	r0, [sp, #12]
   15824:	9b03      	ldr	r3, [sp, #12]
   15826:	3301      	adds	r3, #1
   15828:	d1cc      	bne.n	157c4 <_vfiprintf_r+0x194>
   1582a:	89bb      	ldrh	r3, [r7, #12]
   1582c:	065b      	lsls	r3, r3, #25
   1582e:	d500      	bpl.n	15832 <_vfiprintf_r+0x202>
   15830:	e77b      	b.n	1572a <_vfiprintf_r+0xfa>
   15832:	980b      	ldr	r0, [sp, #44]	; 0x2c
   15834:	e77b      	b.n	1572e <_vfiprintf_r+0xfe>
   15836:	ab05      	add	r3, sp, #20
   15838:	9300      	str	r3, [sp, #0]
   1583a:	003a      	movs	r2, r7
   1583c:	4b09      	ldr	r3, [pc, #36]	; (15864 <_vfiprintf_r+0x234>)
   1583e:	0029      	movs	r1, r5
   15840:	0030      	movs	r0, r6
   15842:	f000 f87f 	bl	15944 <_printf_i>
   15846:	e7ec      	b.n	15822 <_vfiprintf_r+0x1f2>
   15848:	00017d98 	.word	0x00017d98
   1584c:	00017d44 	.word	0x00017d44
   15850:	00017db8 	.word	0x00017db8
   15854:	00017d78 	.word	0x00017d78
   15858:	00017d4a 	.word	0x00017d4a
   1585c:	00017d4e 	.word	0x00017d4e
   15860:	00000000 	.word	0x00000000
   15864:	0001560b 	.word	0x0001560b

00015868 <_printf_common>:
   15868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1586a:	0015      	movs	r5, r2
   1586c:	9301      	str	r3, [sp, #4]
   1586e:	688a      	ldr	r2, [r1, #8]
   15870:	690b      	ldr	r3, [r1, #16]
   15872:	9000      	str	r0, [sp, #0]
   15874:	000c      	movs	r4, r1
   15876:	4293      	cmp	r3, r2
   15878:	da00      	bge.n	1587c <_printf_common+0x14>
   1587a:	0013      	movs	r3, r2
   1587c:	0022      	movs	r2, r4
   1587e:	602b      	str	r3, [r5, #0]
   15880:	3243      	adds	r2, #67	; 0x43
   15882:	7812      	ldrb	r2, [r2, #0]
   15884:	2a00      	cmp	r2, #0
   15886:	d001      	beq.n	1588c <_printf_common+0x24>
   15888:	3301      	adds	r3, #1
   1588a:	602b      	str	r3, [r5, #0]
   1588c:	6823      	ldr	r3, [r4, #0]
   1588e:	069b      	lsls	r3, r3, #26
   15890:	d502      	bpl.n	15898 <_printf_common+0x30>
   15892:	682b      	ldr	r3, [r5, #0]
   15894:	3302      	adds	r3, #2
   15896:	602b      	str	r3, [r5, #0]
   15898:	2706      	movs	r7, #6
   1589a:	6823      	ldr	r3, [r4, #0]
   1589c:	401f      	ands	r7, r3
   1589e:	d027      	beq.n	158f0 <_printf_common+0x88>
   158a0:	0023      	movs	r3, r4
   158a2:	3343      	adds	r3, #67	; 0x43
   158a4:	781b      	ldrb	r3, [r3, #0]
   158a6:	1e5a      	subs	r2, r3, #1
   158a8:	4193      	sbcs	r3, r2
   158aa:	6822      	ldr	r2, [r4, #0]
   158ac:	0692      	lsls	r2, r2, #26
   158ae:	d430      	bmi.n	15912 <_printf_common+0xaa>
   158b0:	0022      	movs	r2, r4
   158b2:	9901      	ldr	r1, [sp, #4]
   158b4:	3243      	adds	r2, #67	; 0x43
   158b6:	9800      	ldr	r0, [sp, #0]
   158b8:	9e08      	ldr	r6, [sp, #32]
   158ba:	47b0      	blx	r6
   158bc:	1c43      	adds	r3, r0, #1
   158be:	d025      	beq.n	1590c <_printf_common+0xa4>
   158c0:	2306      	movs	r3, #6
   158c2:	6820      	ldr	r0, [r4, #0]
   158c4:	682a      	ldr	r2, [r5, #0]
   158c6:	68e1      	ldr	r1, [r4, #12]
   158c8:	4003      	ands	r3, r0
   158ca:	2500      	movs	r5, #0
   158cc:	2b04      	cmp	r3, #4
   158ce:	d103      	bne.n	158d8 <_printf_common+0x70>
   158d0:	1a8d      	subs	r5, r1, r2
   158d2:	43eb      	mvns	r3, r5
   158d4:	17db      	asrs	r3, r3, #31
   158d6:	401d      	ands	r5, r3
   158d8:	68a3      	ldr	r3, [r4, #8]
   158da:	6922      	ldr	r2, [r4, #16]
   158dc:	4293      	cmp	r3, r2
   158de:	dd01      	ble.n	158e4 <_printf_common+0x7c>
   158e0:	1a9b      	subs	r3, r3, r2
   158e2:	18ed      	adds	r5, r5, r3
   158e4:	2700      	movs	r7, #0
   158e6:	42bd      	cmp	r5, r7
   158e8:	d120      	bne.n	1592c <_printf_common+0xc4>
   158ea:	2000      	movs	r0, #0
   158ec:	e010      	b.n	15910 <_printf_common+0xa8>
   158ee:	3701      	adds	r7, #1
   158f0:	68e3      	ldr	r3, [r4, #12]
   158f2:	682a      	ldr	r2, [r5, #0]
   158f4:	1a9b      	subs	r3, r3, r2
   158f6:	429f      	cmp	r7, r3
   158f8:	dad2      	bge.n	158a0 <_printf_common+0x38>
   158fa:	0022      	movs	r2, r4
   158fc:	2301      	movs	r3, #1
   158fe:	3219      	adds	r2, #25
   15900:	9901      	ldr	r1, [sp, #4]
   15902:	9800      	ldr	r0, [sp, #0]
   15904:	9e08      	ldr	r6, [sp, #32]
   15906:	47b0      	blx	r6
   15908:	1c43      	adds	r3, r0, #1
   1590a:	d1f0      	bne.n	158ee <_printf_common+0x86>
   1590c:	2001      	movs	r0, #1
   1590e:	4240      	negs	r0, r0
   15910:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   15912:	2030      	movs	r0, #48	; 0x30
   15914:	18e1      	adds	r1, r4, r3
   15916:	3143      	adds	r1, #67	; 0x43
   15918:	7008      	strb	r0, [r1, #0]
   1591a:	0021      	movs	r1, r4
   1591c:	1c5a      	adds	r2, r3, #1
   1591e:	3145      	adds	r1, #69	; 0x45
   15920:	7809      	ldrb	r1, [r1, #0]
   15922:	18a2      	adds	r2, r4, r2
   15924:	3243      	adds	r2, #67	; 0x43
   15926:	3302      	adds	r3, #2
   15928:	7011      	strb	r1, [r2, #0]
   1592a:	e7c1      	b.n	158b0 <_printf_common+0x48>
   1592c:	0022      	movs	r2, r4
   1592e:	2301      	movs	r3, #1
   15930:	321a      	adds	r2, #26
   15932:	9901      	ldr	r1, [sp, #4]
   15934:	9800      	ldr	r0, [sp, #0]
   15936:	9e08      	ldr	r6, [sp, #32]
   15938:	47b0      	blx	r6
   1593a:	1c43      	adds	r3, r0, #1
   1593c:	d0e6      	beq.n	1590c <_printf_common+0xa4>
   1593e:	3701      	adds	r7, #1
   15940:	e7d1      	b.n	158e6 <_printf_common+0x7e>
   15942:	Address 0x00015942 is out of bounds.


00015944 <_printf_i>:
   15944:	b5f0      	push	{r4, r5, r6, r7, lr}
   15946:	b08b      	sub	sp, #44	; 0x2c
   15948:	9206      	str	r2, [sp, #24]
   1594a:	000a      	movs	r2, r1
   1594c:	3243      	adds	r2, #67	; 0x43
   1594e:	9307      	str	r3, [sp, #28]
   15950:	9005      	str	r0, [sp, #20]
   15952:	9204      	str	r2, [sp, #16]
   15954:	7e0a      	ldrb	r2, [r1, #24]
   15956:	000c      	movs	r4, r1
   15958:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1595a:	2a6e      	cmp	r2, #110	; 0x6e
   1595c:	d100      	bne.n	15960 <_printf_i+0x1c>
   1595e:	e08f      	b.n	15a80 <_printf_i+0x13c>
   15960:	d817      	bhi.n	15992 <_printf_i+0x4e>
   15962:	2a63      	cmp	r2, #99	; 0x63
   15964:	d02c      	beq.n	159c0 <_printf_i+0x7c>
   15966:	d808      	bhi.n	1597a <_printf_i+0x36>
   15968:	2a00      	cmp	r2, #0
   1596a:	d100      	bne.n	1596e <_printf_i+0x2a>
   1596c:	e099      	b.n	15aa2 <_printf_i+0x15e>
   1596e:	2a58      	cmp	r2, #88	; 0x58
   15970:	d054      	beq.n	15a1c <_printf_i+0xd8>
   15972:	0026      	movs	r6, r4
   15974:	3642      	adds	r6, #66	; 0x42
   15976:	7032      	strb	r2, [r6, #0]
   15978:	e029      	b.n	159ce <_printf_i+0x8a>
   1597a:	2a64      	cmp	r2, #100	; 0x64
   1597c:	d001      	beq.n	15982 <_printf_i+0x3e>
   1597e:	2a69      	cmp	r2, #105	; 0x69
   15980:	d1f7      	bne.n	15972 <_printf_i+0x2e>
   15982:	6821      	ldr	r1, [r4, #0]
   15984:	681a      	ldr	r2, [r3, #0]
   15986:	0608      	lsls	r0, r1, #24
   15988:	d523      	bpl.n	159d2 <_printf_i+0x8e>
   1598a:	1d11      	adds	r1, r2, #4
   1598c:	6019      	str	r1, [r3, #0]
   1598e:	6815      	ldr	r5, [r2, #0]
   15990:	e025      	b.n	159de <_printf_i+0x9a>
   15992:	2a73      	cmp	r2, #115	; 0x73
   15994:	d100      	bne.n	15998 <_printf_i+0x54>
   15996:	e088      	b.n	15aaa <_printf_i+0x166>
   15998:	d808      	bhi.n	159ac <_printf_i+0x68>
   1599a:	2a6f      	cmp	r2, #111	; 0x6f
   1599c:	d029      	beq.n	159f2 <_printf_i+0xae>
   1599e:	2a70      	cmp	r2, #112	; 0x70
   159a0:	d1e7      	bne.n	15972 <_printf_i+0x2e>
   159a2:	2220      	movs	r2, #32
   159a4:	6809      	ldr	r1, [r1, #0]
   159a6:	430a      	orrs	r2, r1
   159a8:	6022      	str	r2, [r4, #0]
   159aa:	e003      	b.n	159b4 <_printf_i+0x70>
   159ac:	2a75      	cmp	r2, #117	; 0x75
   159ae:	d020      	beq.n	159f2 <_printf_i+0xae>
   159b0:	2a78      	cmp	r2, #120	; 0x78
   159b2:	d1de      	bne.n	15972 <_printf_i+0x2e>
   159b4:	0022      	movs	r2, r4
   159b6:	2178      	movs	r1, #120	; 0x78
   159b8:	3245      	adds	r2, #69	; 0x45
   159ba:	7011      	strb	r1, [r2, #0]
   159bc:	4a6c      	ldr	r2, [pc, #432]	; (15b70 <_printf_i+0x22c>)
   159be:	e030      	b.n	15a22 <_printf_i+0xde>
   159c0:	000e      	movs	r6, r1
   159c2:	681a      	ldr	r2, [r3, #0]
   159c4:	3642      	adds	r6, #66	; 0x42
   159c6:	1d11      	adds	r1, r2, #4
   159c8:	6019      	str	r1, [r3, #0]
   159ca:	6813      	ldr	r3, [r2, #0]
   159cc:	7033      	strb	r3, [r6, #0]
   159ce:	2301      	movs	r3, #1
   159d0:	e079      	b.n	15ac6 <_printf_i+0x182>
   159d2:	0649      	lsls	r1, r1, #25
   159d4:	d5d9      	bpl.n	1598a <_printf_i+0x46>
   159d6:	1d11      	adds	r1, r2, #4
   159d8:	6019      	str	r1, [r3, #0]
   159da:	2300      	movs	r3, #0
   159dc:	5ed5      	ldrsh	r5, [r2, r3]
   159de:	2d00      	cmp	r5, #0
   159e0:	da03      	bge.n	159ea <_printf_i+0xa6>
   159e2:	232d      	movs	r3, #45	; 0x2d
   159e4:	9a04      	ldr	r2, [sp, #16]
   159e6:	426d      	negs	r5, r5
   159e8:	7013      	strb	r3, [r2, #0]
   159ea:	4b62      	ldr	r3, [pc, #392]	; (15b74 <_printf_i+0x230>)
   159ec:	270a      	movs	r7, #10
   159ee:	9303      	str	r3, [sp, #12]
   159f0:	e02f      	b.n	15a52 <_printf_i+0x10e>
   159f2:	6820      	ldr	r0, [r4, #0]
   159f4:	6819      	ldr	r1, [r3, #0]
   159f6:	0605      	lsls	r5, r0, #24
   159f8:	d503      	bpl.n	15a02 <_printf_i+0xbe>
   159fa:	1d08      	adds	r0, r1, #4
   159fc:	6018      	str	r0, [r3, #0]
   159fe:	680d      	ldr	r5, [r1, #0]
   15a00:	e005      	b.n	15a0e <_printf_i+0xca>
   15a02:	0640      	lsls	r0, r0, #25
   15a04:	d5f9      	bpl.n	159fa <_printf_i+0xb6>
   15a06:	680d      	ldr	r5, [r1, #0]
   15a08:	1d08      	adds	r0, r1, #4
   15a0a:	6018      	str	r0, [r3, #0]
   15a0c:	b2ad      	uxth	r5, r5
   15a0e:	4b59      	ldr	r3, [pc, #356]	; (15b74 <_printf_i+0x230>)
   15a10:	2708      	movs	r7, #8
   15a12:	9303      	str	r3, [sp, #12]
   15a14:	2a6f      	cmp	r2, #111	; 0x6f
   15a16:	d018      	beq.n	15a4a <_printf_i+0x106>
   15a18:	270a      	movs	r7, #10
   15a1a:	e016      	b.n	15a4a <_printf_i+0x106>
   15a1c:	3145      	adds	r1, #69	; 0x45
   15a1e:	700a      	strb	r2, [r1, #0]
   15a20:	4a54      	ldr	r2, [pc, #336]	; (15b74 <_printf_i+0x230>)
   15a22:	9203      	str	r2, [sp, #12]
   15a24:	681a      	ldr	r2, [r3, #0]
   15a26:	6821      	ldr	r1, [r4, #0]
   15a28:	1d10      	adds	r0, r2, #4
   15a2a:	6018      	str	r0, [r3, #0]
   15a2c:	6815      	ldr	r5, [r2, #0]
   15a2e:	0608      	lsls	r0, r1, #24
   15a30:	d522      	bpl.n	15a78 <_printf_i+0x134>
   15a32:	07cb      	lsls	r3, r1, #31
   15a34:	d502      	bpl.n	15a3c <_printf_i+0xf8>
   15a36:	2320      	movs	r3, #32
   15a38:	4319      	orrs	r1, r3
   15a3a:	6021      	str	r1, [r4, #0]
   15a3c:	2710      	movs	r7, #16
   15a3e:	2d00      	cmp	r5, #0
   15a40:	d103      	bne.n	15a4a <_printf_i+0x106>
   15a42:	2320      	movs	r3, #32
   15a44:	6822      	ldr	r2, [r4, #0]
   15a46:	439a      	bics	r2, r3
   15a48:	6022      	str	r2, [r4, #0]
   15a4a:	0023      	movs	r3, r4
   15a4c:	2200      	movs	r2, #0
   15a4e:	3343      	adds	r3, #67	; 0x43
   15a50:	701a      	strb	r2, [r3, #0]
   15a52:	6863      	ldr	r3, [r4, #4]
   15a54:	60a3      	str	r3, [r4, #8]
   15a56:	2b00      	cmp	r3, #0
   15a58:	db5c      	blt.n	15b14 <_printf_i+0x1d0>
   15a5a:	2204      	movs	r2, #4
   15a5c:	6821      	ldr	r1, [r4, #0]
   15a5e:	4391      	bics	r1, r2
   15a60:	6021      	str	r1, [r4, #0]
   15a62:	2d00      	cmp	r5, #0
   15a64:	d158      	bne.n	15b18 <_printf_i+0x1d4>
   15a66:	9e04      	ldr	r6, [sp, #16]
   15a68:	2b00      	cmp	r3, #0
   15a6a:	d064      	beq.n	15b36 <_printf_i+0x1f2>
   15a6c:	0026      	movs	r6, r4
   15a6e:	9b03      	ldr	r3, [sp, #12]
   15a70:	3642      	adds	r6, #66	; 0x42
   15a72:	781b      	ldrb	r3, [r3, #0]
   15a74:	7033      	strb	r3, [r6, #0]
   15a76:	e05e      	b.n	15b36 <_printf_i+0x1f2>
   15a78:	0648      	lsls	r0, r1, #25
   15a7a:	d5da      	bpl.n	15a32 <_printf_i+0xee>
   15a7c:	b2ad      	uxth	r5, r5
   15a7e:	e7d8      	b.n	15a32 <_printf_i+0xee>
   15a80:	6809      	ldr	r1, [r1, #0]
   15a82:	681a      	ldr	r2, [r3, #0]
   15a84:	0608      	lsls	r0, r1, #24
   15a86:	d505      	bpl.n	15a94 <_printf_i+0x150>
   15a88:	1d11      	adds	r1, r2, #4
   15a8a:	6019      	str	r1, [r3, #0]
   15a8c:	6813      	ldr	r3, [r2, #0]
   15a8e:	6962      	ldr	r2, [r4, #20]
   15a90:	601a      	str	r2, [r3, #0]
   15a92:	e006      	b.n	15aa2 <_printf_i+0x15e>
   15a94:	0649      	lsls	r1, r1, #25
   15a96:	d5f7      	bpl.n	15a88 <_printf_i+0x144>
   15a98:	1d11      	adds	r1, r2, #4
   15a9a:	6019      	str	r1, [r3, #0]
   15a9c:	6813      	ldr	r3, [r2, #0]
   15a9e:	8aa2      	ldrh	r2, [r4, #20]
   15aa0:	801a      	strh	r2, [r3, #0]
   15aa2:	2300      	movs	r3, #0
   15aa4:	9e04      	ldr	r6, [sp, #16]
   15aa6:	6123      	str	r3, [r4, #16]
   15aa8:	e054      	b.n	15b54 <_printf_i+0x210>
   15aaa:	681a      	ldr	r2, [r3, #0]
   15aac:	1d11      	adds	r1, r2, #4
   15aae:	6019      	str	r1, [r3, #0]
   15ab0:	6816      	ldr	r6, [r2, #0]
   15ab2:	2100      	movs	r1, #0
   15ab4:	6862      	ldr	r2, [r4, #4]
   15ab6:	0030      	movs	r0, r6
   15ab8:	f000 fd20 	bl	164fc <memchr>
   15abc:	2800      	cmp	r0, #0
   15abe:	d001      	beq.n	15ac4 <_printf_i+0x180>
   15ac0:	1b80      	subs	r0, r0, r6
   15ac2:	6060      	str	r0, [r4, #4]
   15ac4:	6863      	ldr	r3, [r4, #4]
   15ac6:	6123      	str	r3, [r4, #16]
   15ac8:	2300      	movs	r3, #0
   15aca:	9a04      	ldr	r2, [sp, #16]
   15acc:	7013      	strb	r3, [r2, #0]
   15ace:	e041      	b.n	15b54 <_printf_i+0x210>
   15ad0:	6923      	ldr	r3, [r4, #16]
   15ad2:	0032      	movs	r2, r6
   15ad4:	9906      	ldr	r1, [sp, #24]
   15ad6:	9805      	ldr	r0, [sp, #20]
   15ad8:	9d07      	ldr	r5, [sp, #28]
   15ada:	47a8      	blx	r5
   15adc:	1c43      	adds	r3, r0, #1
   15ade:	d043      	beq.n	15b68 <_printf_i+0x224>
   15ae0:	6823      	ldr	r3, [r4, #0]
   15ae2:	2500      	movs	r5, #0
   15ae4:	079b      	lsls	r3, r3, #30
   15ae6:	d40f      	bmi.n	15b08 <_printf_i+0x1c4>
   15ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15aea:	68e0      	ldr	r0, [r4, #12]
   15aec:	4298      	cmp	r0, r3
   15aee:	da3d      	bge.n	15b6c <_printf_i+0x228>
   15af0:	0018      	movs	r0, r3
   15af2:	e03b      	b.n	15b6c <_printf_i+0x228>
   15af4:	0022      	movs	r2, r4
   15af6:	2301      	movs	r3, #1
   15af8:	3219      	adds	r2, #25
   15afa:	9906      	ldr	r1, [sp, #24]
   15afc:	9805      	ldr	r0, [sp, #20]
   15afe:	9e07      	ldr	r6, [sp, #28]
   15b00:	47b0      	blx	r6
   15b02:	1c43      	adds	r3, r0, #1
   15b04:	d030      	beq.n	15b68 <_printf_i+0x224>
   15b06:	3501      	adds	r5, #1
   15b08:	68e3      	ldr	r3, [r4, #12]
   15b0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15b0c:	1a9b      	subs	r3, r3, r2
   15b0e:	429d      	cmp	r5, r3
   15b10:	dbf0      	blt.n	15af4 <_printf_i+0x1b0>
   15b12:	e7e9      	b.n	15ae8 <_printf_i+0x1a4>
   15b14:	2d00      	cmp	r5, #0
   15b16:	d0a9      	beq.n	15a6c <_printf_i+0x128>
   15b18:	9e04      	ldr	r6, [sp, #16]
   15b1a:	0028      	movs	r0, r5
   15b1c:	0039      	movs	r1, r7
   15b1e:	f7fc fca3 	bl	12468 <__aeabi_uidivmod>
   15b22:	9b03      	ldr	r3, [sp, #12]
   15b24:	3e01      	subs	r6, #1
   15b26:	5c5b      	ldrb	r3, [r3, r1]
   15b28:	0028      	movs	r0, r5
   15b2a:	7033      	strb	r3, [r6, #0]
   15b2c:	0039      	movs	r1, r7
   15b2e:	f7fc fc15 	bl	1235c <__udivsi3>
   15b32:	1e05      	subs	r5, r0, #0
   15b34:	d1f1      	bne.n	15b1a <_printf_i+0x1d6>
   15b36:	2f08      	cmp	r7, #8
   15b38:	d109      	bne.n	15b4e <_printf_i+0x20a>
   15b3a:	6823      	ldr	r3, [r4, #0]
   15b3c:	07db      	lsls	r3, r3, #31
   15b3e:	d506      	bpl.n	15b4e <_printf_i+0x20a>
   15b40:	6863      	ldr	r3, [r4, #4]
   15b42:	6922      	ldr	r2, [r4, #16]
   15b44:	4293      	cmp	r3, r2
   15b46:	dc02      	bgt.n	15b4e <_printf_i+0x20a>
   15b48:	2330      	movs	r3, #48	; 0x30
   15b4a:	3e01      	subs	r6, #1
   15b4c:	7033      	strb	r3, [r6, #0]
   15b4e:	9b04      	ldr	r3, [sp, #16]
   15b50:	1b9b      	subs	r3, r3, r6
   15b52:	6123      	str	r3, [r4, #16]
   15b54:	9b07      	ldr	r3, [sp, #28]
   15b56:	aa09      	add	r2, sp, #36	; 0x24
   15b58:	9300      	str	r3, [sp, #0]
   15b5a:	0021      	movs	r1, r4
   15b5c:	9b06      	ldr	r3, [sp, #24]
   15b5e:	9805      	ldr	r0, [sp, #20]
   15b60:	f7ff fe82 	bl	15868 <_printf_common>
   15b64:	1c43      	adds	r3, r0, #1
   15b66:	d1b3      	bne.n	15ad0 <_printf_i+0x18c>
   15b68:	2001      	movs	r0, #1
   15b6a:	4240      	negs	r0, r0
   15b6c:	b00b      	add	sp, #44	; 0x2c
   15b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15b70:	00017d66 	.word	0x00017d66
   15b74:	00017d55 	.word	0x00017d55

00015b78 <iprintf>:
   15b78:	b40f      	push	{r0, r1, r2, r3}
   15b7a:	4b0b      	ldr	r3, [pc, #44]	; (15ba8 <iprintf+0x30>)
   15b7c:	b513      	push	{r0, r1, r4, lr}
   15b7e:	681c      	ldr	r4, [r3, #0]
   15b80:	2c00      	cmp	r4, #0
   15b82:	d005      	beq.n	15b90 <iprintf+0x18>
   15b84:	69a3      	ldr	r3, [r4, #24]
   15b86:	2b00      	cmp	r3, #0
   15b88:	d102      	bne.n	15b90 <iprintf+0x18>
   15b8a:	0020      	movs	r0, r4
   15b8c:	f000 fbaa 	bl	162e4 <__sinit>
   15b90:	ab05      	add	r3, sp, #20
   15b92:	9a04      	ldr	r2, [sp, #16]
   15b94:	68a1      	ldr	r1, [r4, #8]
   15b96:	0020      	movs	r0, r4
   15b98:	9301      	str	r3, [sp, #4]
   15b9a:	f7ff fd49 	bl	15630 <_vfiprintf_r>
   15b9e:	bc16      	pop	{r1, r2, r4}
   15ba0:	bc08      	pop	{r3}
   15ba2:	b004      	add	sp, #16
   15ba4:	4718      	bx	r3
   15ba6:	46c0      	nop			; (mov r8, r8)
   15ba8:	2000002c 	.word	0x2000002c

00015bac <putchar>:
   15bac:	4b08      	ldr	r3, [pc, #32]	; (15bd0 <putchar+0x24>)
   15bae:	b570      	push	{r4, r5, r6, lr}
   15bb0:	681c      	ldr	r4, [r3, #0]
   15bb2:	0005      	movs	r5, r0
   15bb4:	2c00      	cmp	r4, #0
   15bb6:	d005      	beq.n	15bc4 <putchar+0x18>
   15bb8:	69a3      	ldr	r3, [r4, #24]
   15bba:	2b00      	cmp	r3, #0
   15bbc:	d102      	bne.n	15bc4 <putchar+0x18>
   15bbe:	0020      	movs	r0, r4
   15bc0:	f000 fb90 	bl	162e4 <__sinit>
   15bc4:	0029      	movs	r1, r5
   15bc6:	68a2      	ldr	r2, [r4, #8]
   15bc8:	0020      	movs	r0, r4
   15bca:	f000 fee9 	bl	169a0 <_putc_r>
   15bce:	bd70      	pop	{r4, r5, r6, pc}
   15bd0:	2000002c 	.word	0x2000002c

00015bd4 <_puts_r>:
   15bd4:	b570      	push	{r4, r5, r6, lr}
   15bd6:	0005      	movs	r5, r0
   15bd8:	000e      	movs	r6, r1
   15bda:	2800      	cmp	r0, #0
   15bdc:	d004      	beq.n	15be8 <_puts_r+0x14>
   15bde:	6983      	ldr	r3, [r0, #24]
   15be0:	2b00      	cmp	r3, #0
   15be2:	d101      	bne.n	15be8 <_puts_r+0x14>
   15be4:	f000 fb7e 	bl	162e4 <__sinit>
   15be8:	69ab      	ldr	r3, [r5, #24]
   15bea:	68ac      	ldr	r4, [r5, #8]
   15bec:	2b00      	cmp	r3, #0
   15bee:	d102      	bne.n	15bf6 <_puts_r+0x22>
   15bf0:	0028      	movs	r0, r5
   15bf2:	f000 fb77 	bl	162e4 <__sinit>
   15bf6:	4b24      	ldr	r3, [pc, #144]	; (15c88 <_puts_r+0xb4>)
   15bf8:	429c      	cmp	r4, r3
   15bfa:	d10f      	bne.n	15c1c <_puts_r+0x48>
   15bfc:	686c      	ldr	r4, [r5, #4]
   15bfe:	89a3      	ldrh	r3, [r4, #12]
   15c00:	071b      	lsls	r3, r3, #28
   15c02:	d502      	bpl.n	15c0a <_puts_r+0x36>
   15c04:	6923      	ldr	r3, [r4, #16]
   15c06:	2b00      	cmp	r3, #0
   15c08:	d120      	bne.n	15c4c <_puts_r+0x78>
   15c0a:	0021      	movs	r1, r4
   15c0c:	0028      	movs	r0, r5
   15c0e:	f000 f9f3 	bl	15ff8 <__swsetup_r>
   15c12:	2800      	cmp	r0, #0
   15c14:	d01a      	beq.n	15c4c <_puts_r+0x78>
   15c16:	2001      	movs	r0, #1
   15c18:	4240      	negs	r0, r0
   15c1a:	bd70      	pop	{r4, r5, r6, pc}
   15c1c:	4b1b      	ldr	r3, [pc, #108]	; (15c8c <_puts_r+0xb8>)
   15c1e:	429c      	cmp	r4, r3
   15c20:	d101      	bne.n	15c26 <_puts_r+0x52>
   15c22:	68ac      	ldr	r4, [r5, #8]
   15c24:	e7eb      	b.n	15bfe <_puts_r+0x2a>
   15c26:	4b1a      	ldr	r3, [pc, #104]	; (15c90 <_puts_r+0xbc>)
   15c28:	429c      	cmp	r4, r3
   15c2a:	d1e8      	bne.n	15bfe <_puts_r+0x2a>
   15c2c:	68ec      	ldr	r4, [r5, #12]
   15c2e:	e7e6      	b.n	15bfe <_puts_r+0x2a>
   15c30:	3b01      	subs	r3, #1
   15c32:	3601      	adds	r6, #1
   15c34:	60a3      	str	r3, [r4, #8]
   15c36:	2b00      	cmp	r3, #0
   15c38:	da04      	bge.n	15c44 <_puts_r+0x70>
   15c3a:	69a2      	ldr	r2, [r4, #24]
   15c3c:	4293      	cmp	r3, r2
   15c3e:	db16      	blt.n	15c6e <_puts_r+0x9a>
   15c40:	290a      	cmp	r1, #10
   15c42:	d014      	beq.n	15c6e <_puts_r+0x9a>
   15c44:	6823      	ldr	r3, [r4, #0]
   15c46:	1c5a      	adds	r2, r3, #1
   15c48:	6022      	str	r2, [r4, #0]
   15c4a:	7019      	strb	r1, [r3, #0]
   15c4c:	7831      	ldrb	r1, [r6, #0]
   15c4e:	68a3      	ldr	r3, [r4, #8]
   15c50:	2900      	cmp	r1, #0
   15c52:	d1ed      	bne.n	15c30 <_puts_r+0x5c>
   15c54:	3b01      	subs	r3, #1
   15c56:	60a3      	str	r3, [r4, #8]
   15c58:	2b00      	cmp	r3, #0
   15c5a:	da0f      	bge.n	15c7c <_puts_r+0xa8>
   15c5c:	0022      	movs	r2, r4
   15c5e:	310a      	adds	r1, #10
   15c60:	0028      	movs	r0, r5
   15c62:	f000 f973 	bl	15f4c <__swbuf_r>
   15c66:	1c43      	adds	r3, r0, #1
   15c68:	d0d5      	beq.n	15c16 <_puts_r+0x42>
   15c6a:	200a      	movs	r0, #10
   15c6c:	e7d5      	b.n	15c1a <_puts_r+0x46>
   15c6e:	0022      	movs	r2, r4
   15c70:	0028      	movs	r0, r5
   15c72:	f000 f96b 	bl	15f4c <__swbuf_r>
   15c76:	1c43      	adds	r3, r0, #1
   15c78:	d1e8      	bne.n	15c4c <_puts_r+0x78>
   15c7a:	e7cc      	b.n	15c16 <_puts_r+0x42>
   15c7c:	200a      	movs	r0, #10
   15c7e:	6823      	ldr	r3, [r4, #0]
   15c80:	1c5a      	adds	r2, r3, #1
   15c82:	6022      	str	r2, [r4, #0]
   15c84:	7018      	strb	r0, [r3, #0]
   15c86:	e7c8      	b.n	15c1a <_puts_r+0x46>
   15c88:	00017d98 	.word	0x00017d98
   15c8c:	00017db8 	.word	0x00017db8
   15c90:	00017d78 	.word	0x00017d78

00015c94 <puts>:
   15c94:	b510      	push	{r4, lr}
   15c96:	4b03      	ldr	r3, [pc, #12]	; (15ca4 <puts+0x10>)
   15c98:	0001      	movs	r1, r0
   15c9a:	6818      	ldr	r0, [r3, #0]
   15c9c:	f7ff ff9a 	bl	15bd4 <_puts_r>
   15ca0:	bd10      	pop	{r4, pc}
   15ca2:	46c0      	nop			; (mov r8, r8)
   15ca4:	2000002c 	.word	0x2000002c

00015ca8 <srand>:
   15ca8:	4b10      	ldr	r3, [pc, #64]	; (15cec <srand+0x44>)
   15caa:	b570      	push	{r4, r5, r6, lr}
   15cac:	681c      	ldr	r4, [r3, #0]
   15cae:	0005      	movs	r5, r0
   15cb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   15cb2:	2b00      	cmp	r3, #0
   15cb4:	d115      	bne.n	15ce2 <srand+0x3a>
   15cb6:	2018      	movs	r0, #24
   15cb8:	f000 fc16 	bl	164e8 <malloc>
   15cbc:	4b0c      	ldr	r3, [pc, #48]	; (15cf0 <srand+0x48>)
   15cbe:	63a0      	str	r0, [r4, #56]	; 0x38
   15cc0:	8003      	strh	r3, [r0, #0]
   15cc2:	4b0c      	ldr	r3, [pc, #48]	; (15cf4 <srand+0x4c>)
   15cc4:	2201      	movs	r2, #1
   15cc6:	8043      	strh	r3, [r0, #2]
   15cc8:	4b0b      	ldr	r3, [pc, #44]	; (15cf8 <srand+0x50>)
   15cca:	8083      	strh	r3, [r0, #4]
   15ccc:	4b0b      	ldr	r3, [pc, #44]	; (15cfc <srand+0x54>)
   15cce:	80c3      	strh	r3, [r0, #6]
   15cd0:	4b0b      	ldr	r3, [pc, #44]	; (15d00 <srand+0x58>)
   15cd2:	8103      	strh	r3, [r0, #8]
   15cd4:	2305      	movs	r3, #5
   15cd6:	8143      	strh	r3, [r0, #10]
   15cd8:	3306      	adds	r3, #6
   15cda:	8183      	strh	r3, [r0, #12]
   15cdc:	2300      	movs	r3, #0
   15cde:	6102      	str	r2, [r0, #16]
   15ce0:	6143      	str	r3, [r0, #20]
   15ce2:	2200      	movs	r2, #0
   15ce4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   15ce6:	611d      	str	r5, [r3, #16]
   15ce8:	615a      	str	r2, [r3, #20]
   15cea:	bd70      	pop	{r4, r5, r6, pc}
   15cec:	2000002c 	.word	0x2000002c
   15cf0:	0000330e 	.word	0x0000330e
   15cf4:	ffffabcd 	.word	0xffffabcd
   15cf8:	00001234 	.word	0x00001234
   15cfc:	ffffe66d 	.word	0xffffe66d
   15d00:	ffffdeec 	.word	0xffffdeec

00015d04 <rand>:
   15d04:	4b15      	ldr	r3, [pc, #84]	; (15d5c <rand+0x58>)
   15d06:	b510      	push	{r4, lr}
   15d08:	681c      	ldr	r4, [r3, #0]
   15d0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   15d0c:	2b00      	cmp	r3, #0
   15d0e:	d115      	bne.n	15d3c <rand+0x38>
   15d10:	2018      	movs	r0, #24
   15d12:	f000 fbe9 	bl	164e8 <malloc>
   15d16:	4b12      	ldr	r3, [pc, #72]	; (15d60 <rand+0x5c>)
   15d18:	63a0      	str	r0, [r4, #56]	; 0x38
   15d1a:	8003      	strh	r3, [r0, #0]
   15d1c:	4b11      	ldr	r3, [pc, #68]	; (15d64 <rand+0x60>)
   15d1e:	2201      	movs	r2, #1
   15d20:	8043      	strh	r3, [r0, #2]
   15d22:	4b11      	ldr	r3, [pc, #68]	; (15d68 <rand+0x64>)
   15d24:	8083      	strh	r3, [r0, #4]
   15d26:	4b11      	ldr	r3, [pc, #68]	; (15d6c <rand+0x68>)
   15d28:	80c3      	strh	r3, [r0, #6]
   15d2a:	4b11      	ldr	r3, [pc, #68]	; (15d70 <rand+0x6c>)
   15d2c:	8103      	strh	r3, [r0, #8]
   15d2e:	2305      	movs	r3, #5
   15d30:	8143      	strh	r3, [r0, #10]
   15d32:	3306      	adds	r3, #6
   15d34:	8183      	strh	r3, [r0, #12]
   15d36:	2300      	movs	r3, #0
   15d38:	6102      	str	r2, [r0, #16]
   15d3a:	6143      	str	r3, [r0, #20]
   15d3c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   15d3e:	4a0d      	ldr	r2, [pc, #52]	; (15d74 <rand+0x70>)
   15d40:	6920      	ldr	r0, [r4, #16]
   15d42:	6961      	ldr	r1, [r4, #20]
   15d44:	4b0c      	ldr	r3, [pc, #48]	; (15d78 <rand+0x74>)
   15d46:	f7fc fcd9 	bl	126fc <__aeabi_lmul>
   15d4a:	2201      	movs	r2, #1
   15d4c:	2300      	movs	r3, #0
   15d4e:	1880      	adds	r0, r0, r2
   15d50:	4159      	adcs	r1, r3
   15d52:	6120      	str	r0, [r4, #16]
   15d54:	6161      	str	r1, [r4, #20]
   15d56:	0048      	lsls	r0, r1, #1
   15d58:	0840      	lsrs	r0, r0, #1
   15d5a:	bd10      	pop	{r4, pc}
   15d5c:	2000002c 	.word	0x2000002c
   15d60:	0000330e 	.word	0x0000330e
   15d64:	ffffabcd 	.word	0xffffabcd
   15d68:	00001234 	.word	0x00001234
   15d6c:	ffffe66d 	.word	0xffffe66d
   15d70:	ffffdeec 	.word	0xffffdeec
   15d74:	4c957f2d 	.word	0x4c957f2d
   15d78:	5851f42d 	.word	0x5851f42d

00015d7c <setbuf>:
   15d7c:	424a      	negs	r2, r1
   15d7e:	414a      	adcs	r2, r1
   15d80:	2380      	movs	r3, #128	; 0x80
   15d82:	b510      	push	{r4, lr}
   15d84:	0052      	lsls	r2, r2, #1
   15d86:	00db      	lsls	r3, r3, #3
   15d88:	f000 f802 	bl	15d90 <setvbuf>
   15d8c:	bd10      	pop	{r4, pc}
   15d8e:	Address 0x00015d8e is out of bounds.


00015d90 <setvbuf>:
   15d90:	b5f0      	push	{r4, r5, r6, r7, lr}
   15d92:	001d      	movs	r5, r3
   15d94:	4b4f      	ldr	r3, [pc, #316]	; (15ed4 <setvbuf+0x144>)
   15d96:	b085      	sub	sp, #20
   15d98:	681e      	ldr	r6, [r3, #0]
   15d9a:	0004      	movs	r4, r0
   15d9c:	000f      	movs	r7, r1
   15d9e:	9200      	str	r2, [sp, #0]
   15da0:	2e00      	cmp	r6, #0
   15da2:	d005      	beq.n	15db0 <setvbuf+0x20>
   15da4:	69b3      	ldr	r3, [r6, #24]
   15da6:	2b00      	cmp	r3, #0
   15da8:	d102      	bne.n	15db0 <setvbuf+0x20>
   15daa:	0030      	movs	r0, r6
   15dac:	f000 fa9a 	bl	162e4 <__sinit>
   15db0:	4b49      	ldr	r3, [pc, #292]	; (15ed8 <setvbuf+0x148>)
   15db2:	429c      	cmp	r4, r3
   15db4:	d150      	bne.n	15e58 <setvbuf+0xc8>
   15db6:	6874      	ldr	r4, [r6, #4]
   15db8:	9b00      	ldr	r3, [sp, #0]
   15dba:	2b02      	cmp	r3, #2
   15dbc:	d005      	beq.n	15dca <setvbuf+0x3a>
   15dbe:	2b01      	cmp	r3, #1
   15dc0:	d900      	bls.n	15dc4 <setvbuf+0x34>
   15dc2:	e084      	b.n	15ece <setvbuf+0x13e>
   15dc4:	2d00      	cmp	r5, #0
   15dc6:	da00      	bge.n	15dca <setvbuf+0x3a>
   15dc8:	e081      	b.n	15ece <setvbuf+0x13e>
   15dca:	0021      	movs	r1, r4
   15dcc:	0030      	movs	r0, r6
   15dce:	f000 fa1b 	bl	16208 <_fflush_r>
   15dd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   15dd4:	2900      	cmp	r1, #0
   15dd6:	d008      	beq.n	15dea <setvbuf+0x5a>
   15dd8:	0023      	movs	r3, r4
   15dda:	3344      	adds	r3, #68	; 0x44
   15ddc:	4299      	cmp	r1, r3
   15dde:	d002      	beq.n	15de6 <setvbuf+0x56>
   15de0:	0030      	movs	r0, r6
   15de2:	f000 fba9 	bl	16538 <_free_r>
   15de6:	2300      	movs	r3, #0
   15de8:	6363      	str	r3, [r4, #52]	; 0x34
   15dea:	2300      	movs	r3, #0
   15dec:	61a3      	str	r3, [r4, #24]
   15dee:	6063      	str	r3, [r4, #4]
   15df0:	89a3      	ldrh	r3, [r4, #12]
   15df2:	061b      	lsls	r3, r3, #24
   15df4:	d503      	bpl.n	15dfe <setvbuf+0x6e>
   15df6:	6921      	ldr	r1, [r4, #16]
   15df8:	0030      	movs	r0, r6
   15dfa:	f000 fb9d 	bl	16538 <_free_r>
   15dfe:	89a3      	ldrh	r3, [r4, #12]
   15e00:	4a36      	ldr	r2, [pc, #216]	; (15edc <setvbuf+0x14c>)
   15e02:	4013      	ands	r3, r2
   15e04:	81a3      	strh	r3, [r4, #12]
   15e06:	9b00      	ldr	r3, [sp, #0]
   15e08:	2b02      	cmp	r3, #2
   15e0a:	d05a      	beq.n	15ec2 <setvbuf+0x132>
   15e0c:	ab03      	add	r3, sp, #12
   15e0e:	aa02      	add	r2, sp, #8
   15e10:	0021      	movs	r1, r4
   15e12:	0030      	movs	r0, r6
   15e14:	f000 fafc 	bl	16410 <__swhatbuf_r>
   15e18:	89a3      	ldrh	r3, [r4, #12]
   15e1a:	4318      	orrs	r0, r3
   15e1c:	81a0      	strh	r0, [r4, #12]
   15e1e:	2d00      	cmp	r5, #0
   15e20:	d124      	bne.n	15e6c <setvbuf+0xdc>
   15e22:	9d02      	ldr	r5, [sp, #8]
   15e24:	0028      	movs	r0, r5
   15e26:	f000 fb5f 	bl	164e8 <malloc>
   15e2a:	9501      	str	r5, [sp, #4]
   15e2c:	1e07      	subs	r7, r0, #0
   15e2e:	d142      	bne.n	15eb6 <setvbuf+0x126>
   15e30:	9b02      	ldr	r3, [sp, #8]
   15e32:	9301      	str	r3, [sp, #4]
   15e34:	42ab      	cmp	r3, r5
   15e36:	d139      	bne.n	15eac <setvbuf+0x11c>
   15e38:	2001      	movs	r0, #1
   15e3a:	4240      	negs	r0, r0
   15e3c:	2302      	movs	r3, #2
   15e3e:	89a2      	ldrh	r2, [r4, #12]
   15e40:	4313      	orrs	r3, r2
   15e42:	81a3      	strh	r3, [r4, #12]
   15e44:	2300      	movs	r3, #0
   15e46:	60a3      	str	r3, [r4, #8]
   15e48:	0023      	movs	r3, r4
   15e4a:	3347      	adds	r3, #71	; 0x47
   15e4c:	6023      	str	r3, [r4, #0]
   15e4e:	6123      	str	r3, [r4, #16]
   15e50:	2301      	movs	r3, #1
   15e52:	6163      	str	r3, [r4, #20]
   15e54:	b005      	add	sp, #20
   15e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15e58:	4b21      	ldr	r3, [pc, #132]	; (15ee0 <setvbuf+0x150>)
   15e5a:	429c      	cmp	r4, r3
   15e5c:	d101      	bne.n	15e62 <setvbuf+0xd2>
   15e5e:	68b4      	ldr	r4, [r6, #8]
   15e60:	e7aa      	b.n	15db8 <setvbuf+0x28>
   15e62:	4b20      	ldr	r3, [pc, #128]	; (15ee4 <setvbuf+0x154>)
   15e64:	429c      	cmp	r4, r3
   15e66:	d1a7      	bne.n	15db8 <setvbuf+0x28>
   15e68:	68f4      	ldr	r4, [r6, #12]
   15e6a:	e7a5      	b.n	15db8 <setvbuf+0x28>
   15e6c:	2f00      	cmp	r7, #0
   15e6e:	d0d9      	beq.n	15e24 <setvbuf+0x94>
   15e70:	69b3      	ldr	r3, [r6, #24]
   15e72:	2b00      	cmp	r3, #0
   15e74:	d102      	bne.n	15e7c <setvbuf+0xec>
   15e76:	0030      	movs	r0, r6
   15e78:	f000 fa34 	bl	162e4 <__sinit>
   15e7c:	9b00      	ldr	r3, [sp, #0]
   15e7e:	2b01      	cmp	r3, #1
   15e80:	d103      	bne.n	15e8a <setvbuf+0xfa>
   15e82:	89a3      	ldrh	r3, [r4, #12]
   15e84:	9a00      	ldr	r2, [sp, #0]
   15e86:	431a      	orrs	r2, r3
   15e88:	81a2      	strh	r2, [r4, #12]
   15e8a:	2008      	movs	r0, #8
   15e8c:	89a3      	ldrh	r3, [r4, #12]
   15e8e:	6027      	str	r7, [r4, #0]
   15e90:	6127      	str	r7, [r4, #16]
   15e92:	6165      	str	r5, [r4, #20]
   15e94:	4018      	ands	r0, r3
   15e96:	d018      	beq.n	15eca <setvbuf+0x13a>
   15e98:	2001      	movs	r0, #1
   15e9a:	4018      	ands	r0, r3
   15e9c:	2300      	movs	r3, #0
   15e9e:	4298      	cmp	r0, r3
   15ea0:	d011      	beq.n	15ec6 <setvbuf+0x136>
   15ea2:	426d      	negs	r5, r5
   15ea4:	60a3      	str	r3, [r4, #8]
   15ea6:	61a5      	str	r5, [r4, #24]
   15ea8:	0018      	movs	r0, r3
   15eaa:	e7d3      	b.n	15e54 <setvbuf+0xc4>
   15eac:	9801      	ldr	r0, [sp, #4]
   15eae:	f000 fb1b 	bl	164e8 <malloc>
   15eb2:	1e07      	subs	r7, r0, #0
   15eb4:	d0c0      	beq.n	15e38 <setvbuf+0xa8>
   15eb6:	2380      	movs	r3, #128	; 0x80
   15eb8:	89a2      	ldrh	r2, [r4, #12]
   15eba:	9d01      	ldr	r5, [sp, #4]
   15ebc:	4313      	orrs	r3, r2
   15ebe:	81a3      	strh	r3, [r4, #12]
   15ec0:	e7d6      	b.n	15e70 <setvbuf+0xe0>
   15ec2:	2000      	movs	r0, #0
   15ec4:	e7ba      	b.n	15e3c <setvbuf+0xac>
   15ec6:	60a5      	str	r5, [r4, #8]
   15ec8:	e7c4      	b.n	15e54 <setvbuf+0xc4>
   15eca:	60a0      	str	r0, [r4, #8]
   15ecc:	e7c2      	b.n	15e54 <setvbuf+0xc4>
   15ece:	2001      	movs	r0, #1
   15ed0:	4240      	negs	r0, r0
   15ed2:	e7bf      	b.n	15e54 <setvbuf+0xc4>
   15ed4:	2000002c 	.word	0x2000002c
   15ed8:	00017d98 	.word	0x00017d98
   15edc:	fffff35c 	.word	0xfffff35c
   15ee0:	00017db8 	.word	0x00017db8
   15ee4:	00017d78 	.word	0x00017d78

00015ee8 <sniprintf>:
   15ee8:	b40c      	push	{r2, r3}
   15eea:	b530      	push	{r4, r5, lr}
   15eec:	4b16      	ldr	r3, [pc, #88]	; (15f48 <sniprintf+0x60>)
   15eee:	b09d      	sub	sp, #116	; 0x74
   15ef0:	1e0c      	subs	r4, r1, #0
   15ef2:	681d      	ldr	r5, [r3, #0]
   15ef4:	da08      	bge.n	15f08 <sniprintf+0x20>
   15ef6:	238b      	movs	r3, #139	; 0x8b
   15ef8:	2001      	movs	r0, #1
   15efa:	602b      	str	r3, [r5, #0]
   15efc:	4240      	negs	r0, r0
   15efe:	b01d      	add	sp, #116	; 0x74
   15f00:	bc30      	pop	{r4, r5}
   15f02:	bc08      	pop	{r3}
   15f04:	b002      	add	sp, #8
   15f06:	4718      	bx	r3
   15f08:	2382      	movs	r3, #130	; 0x82
   15f0a:	a902      	add	r1, sp, #8
   15f0c:	009b      	lsls	r3, r3, #2
   15f0e:	818b      	strh	r3, [r1, #12]
   15f10:	2300      	movs	r3, #0
   15f12:	9002      	str	r0, [sp, #8]
   15f14:	6108      	str	r0, [r1, #16]
   15f16:	429c      	cmp	r4, r3
   15f18:	d000      	beq.n	15f1c <sniprintf+0x34>
   15f1a:	1e63      	subs	r3, r4, #1
   15f1c:	608b      	str	r3, [r1, #8]
   15f1e:	614b      	str	r3, [r1, #20]
   15f20:	2301      	movs	r3, #1
   15f22:	425b      	negs	r3, r3
   15f24:	81cb      	strh	r3, [r1, #14]
   15f26:	9a20      	ldr	r2, [sp, #128]	; 0x80
   15f28:	ab21      	add	r3, sp, #132	; 0x84
   15f2a:	0028      	movs	r0, r5
   15f2c:	9301      	str	r3, [sp, #4]
   15f2e:	f000 fc33 	bl	16798 <_svfiprintf_r>
   15f32:	1c43      	adds	r3, r0, #1
   15f34:	da01      	bge.n	15f3a <sniprintf+0x52>
   15f36:	238b      	movs	r3, #139	; 0x8b
   15f38:	602b      	str	r3, [r5, #0]
   15f3a:	2c00      	cmp	r4, #0
   15f3c:	d0df      	beq.n	15efe <sniprintf+0x16>
   15f3e:	2300      	movs	r3, #0
   15f40:	9a02      	ldr	r2, [sp, #8]
   15f42:	7013      	strb	r3, [r2, #0]
   15f44:	e7db      	b.n	15efe <sniprintf+0x16>
   15f46:	46c0      	nop			; (mov r8, r8)
   15f48:	2000002c 	.word	0x2000002c

00015f4c <__swbuf_r>:
   15f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15f4e:	0005      	movs	r5, r0
   15f50:	000e      	movs	r6, r1
   15f52:	0014      	movs	r4, r2
   15f54:	2800      	cmp	r0, #0
   15f56:	d004      	beq.n	15f62 <__swbuf_r+0x16>
   15f58:	6983      	ldr	r3, [r0, #24]
   15f5a:	2b00      	cmp	r3, #0
   15f5c:	d101      	bne.n	15f62 <__swbuf_r+0x16>
   15f5e:	f000 f9c1 	bl	162e4 <__sinit>
   15f62:	4b22      	ldr	r3, [pc, #136]	; (15fec <__swbuf_r+0xa0>)
   15f64:	429c      	cmp	r4, r3
   15f66:	d12d      	bne.n	15fc4 <__swbuf_r+0x78>
   15f68:	686c      	ldr	r4, [r5, #4]
   15f6a:	69a3      	ldr	r3, [r4, #24]
   15f6c:	60a3      	str	r3, [r4, #8]
   15f6e:	89a3      	ldrh	r3, [r4, #12]
   15f70:	071b      	lsls	r3, r3, #28
   15f72:	d531      	bpl.n	15fd8 <__swbuf_r+0x8c>
   15f74:	6923      	ldr	r3, [r4, #16]
   15f76:	2b00      	cmp	r3, #0
   15f78:	d02e      	beq.n	15fd8 <__swbuf_r+0x8c>
   15f7a:	6823      	ldr	r3, [r4, #0]
   15f7c:	6922      	ldr	r2, [r4, #16]
   15f7e:	b2f7      	uxtb	r7, r6
   15f80:	1a98      	subs	r0, r3, r2
   15f82:	6963      	ldr	r3, [r4, #20]
   15f84:	b2f6      	uxtb	r6, r6
   15f86:	4298      	cmp	r0, r3
   15f88:	db05      	blt.n	15f96 <__swbuf_r+0x4a>
   15f8a:	0021      	movs	r1, r4
   15f8c:	0028      	movs	r0, r5
   15f8e:	f000 f93b 	bl	16208 <_fflush_r>
   15f92:	2800      	cmp	r0, #0
   15f94:	d126      	bne.n	15fe4 <__swbuf_r+0x98>
   15f96:	68a3      	ldr	r3, [r4, #8]
   15f98:	3001      	adds	r0, #1
   15f9a:	3b01      	subs	r3, #1
   15f9c:	60a3      	str	r3, [r4, #8]
   15f9e:	6823      	ldr	r3, [r4, #0]
   15fa0:	1c5a      	adds	r2, r3, #1
   15fa2:	6022      	str	r2, [r4, #0]
   15fa4:	701f      	strb	r7, [r3, #0]
   15fa6:	6963      	ldr	r3, [r4, #20]
   15fa8:	4298      	cmp	r0, r3
   15faa:	d004      	beq.n	15fb6 <__swbuf_r+0x6a>
   15fac:	89a3      	ldrh	r3, [r4, #12]
   15fae:	07db      	lsls	r3, r3, #31
   15fb0:	d51a      	bpl.n	15fe8 <__swbuf_r+0x9c>
   15fb2:	2e0a      	cmp	r6, #10
   15fb4:	d118      	bne.n	15fe8 <__swbuf_r+0x9c>
   15fb6:	0021      	movs	r1, r4
   15fb8:	0028      	movs	r0, r5
   15fba:	f000 f925 	bl	16208 <_fflush_r>
   15fbe:	2800      	cmp	r0, #0
   15fc0:	d012      	beq.n	15fe8 <__swbuf_r+0x9c>
   15fc2:	e00f      	b.n	15fe4 <__swbuf_r+0x98>
   15fc4:	4b0a      	ldr	r3, [pc, #40]	; (15ff0 <__swbuf_r+0xa4>)
   15fc6:	429c      	cmp	r4, r3
   15fc8:	d101      	bne.n	15fce <__swbuf_r+0x82>
   15fca:	68ac      	ldr	r4, [r5, #8]
   15fcc:	e7cd      	b.n	15f6a <__swbuf_r+0x1e>
   15fce:	4b09      	ldr	r3, [pc, #36]	; (15ff4 <__swbuf_r+0xa8>)
   15fd0:	429c      	cmp	r4, r3
   15fd2:	d1ca      	bne.n	15f6a <__swbuf_r+0x1e>
   15fd4:	68ec      	ldr	r4, [r5, #12]
   15fd6:	e7c8      	b.n	15f6a <__swbuf_r+0x1e>
   15fd8:	0021      	movs	r1, r4
   15fda:	0028      	movs	r0, r5
   15fdc:	f000 f80c 	bl	15ff8 <__swsetup_r>
   15fe0:	2800      	cmp	r0, #0
   15fe2:	d0ca      	beq.n	15f7a <__swbuf_r+0x2e>
   15fe4:	2601      	movs	r6, #1
   15fe6:	4276      	negs	r6, r6
   15fe8:	0030      	movs	r0, r6
   15fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15fec:	00017d98 	.word	0x00017d98
   15ff0:	00017db8 	.word	0x00017db8
   15ff4:	00017d78 	.word	0x00017d78

00015ff8 <__swsetup_r>:
   15ff8:	4b36      	ldr	r3, [pc, #216]	; (160d4 <__swsetup_r+0xdc>)
   15ffa:	b570      	push	{r4, r5, r6, lr}
   15ffc:	681d      	ldr	r5, [r3, #0]
   15ffe:	0006      	movs	r6, r0
   16000:	000c      	movs	r4, r1
   16002:	2d00      	cmp	r5, #0
   16004:	d005      	beq.n	16012 <__swsetup_r+0x1a>
   16006:	69ab      	ldr	r3, [r5, #24]
   16008:	2b00      	cmp	r3, #0
   1600a:	d102      	bne.n	16012 <__swsetup_r+0x1a>
   1600c:	0028      	movs	r0, r5
   1600e:	f000 f969 	bl	162e4 <__sinit>
   16012:	4b31      	ldr	r3, [pc, #196]	; (160d8 <__swsetup_r+0xe0>)
   16014:	429c      	cmp	r4, r3
   16016:	d10f      	bne.n	16038 <__swsetup_r+0x40>
   16018:	686c      	ldr	r4, [r5, #4]
   1601a:	230c      	movs	r3, #12
   1601c:	5ee2      	ldrsh	r2, [r4, r3]
   1601e:	b293      	uxth	r3, r2
   16020:	0719      	lsls	r1, r3, #28
   16022:	d42d      	bmi.n	16080 <__swsetup_r+0x88>
   16024:	06d9      	lsls	r1, r3, #27
   16026:	d411      	bmi.n	1604c <__swsetup_r+0x54>
   16028:	2309      	movs	r3, #9
   1602a:	2001      	movs	r0, #1
   1602c:	6033      	str	r3, [r6, #0]
   1602e:	3337      	adds	r3, #55	; 0x37
   16030:	4313      	orrs	r3, r2
   16032:	81a3      	strh	r3, [r4, #12]
   16034:	4240      	negs	r0, r0
   16036:	bd70      	pop	{r4, r5, r6, pc}
   16038:	4b28      	ldr	r3, [pc, #160]	; (160dc <__swsetup_r+0xe4>)
   1603a:	429c      	cmp	r4, r3
   1603c:	d101      	bne.n	16042 <__swsetup_r+0x4a>
   1603e:	68ac      	ldr	r4, [r5, #8]
   16040:	e7eb      	b.n	1601a <__swsetup_r+0x22>
   16042:	4b27      	ldr	r3, [pc, #156]	; (160e0 <__swsetup_r+0xe8>)
   16044:	429c      	cmp	r4, r3
   16046:	d1e8      	bne.n	1601a <__swsetup_r+0x22>
   16048:	68ec      	ldr	r4, [r5, #12]
   1604a:	e7e6      	b.n	1601a <__swsetup_r+0x22>
   1604c:	075b      	lsls	r3, r3, #29
   1604e:	d513      	bpl.n	16078 <__swsetup_r+0x80>
   16050:	6b61      	ldr	r1, [r4, #52]	; 0x34
   16052:	2900      	cmp	r1, #0
   16054:	d008      	beq.n	16068 <__swsetup_r+0x70>
   16056:	0023      	movs	r3, r4
   16058:	3344      	adds	r3, #68	; 0x44
   1605a:	4299      	cmp	r1, r3
   1605c:	d002      	beq.n	16064 <__swsetup_r+0x6c>
   1605e:	0030      	movs	r0, r6
   16060:	f000 fa6a 	bl	16538 <_free_r>
   16064:	2300      	movs	r3, #0
   16066:	6363      	str	r3, [r4, #52]	; 0x34
   16068:	2224      	movs	r2, #36	; 0x24
   1606a:	89a3      	ldrh	r3, [r4, #12]
   1606c:	4393      	bics	r3, r2
   1606e:	81a3      	strh	r3, [r4, #12]
   16070:	2300      	movs	r3, #0
   16072:	6063      	str	r3, [r4, #4]
   16074:	6923      	ldr	r3, [r4, #16]
   16076:	6023      	str	r3, [r4, #0]
   16078:	2308      	movs	r3, #8
   1607a:	89a2      	ldrh	r2, [r4, #12]
   1607c:	4313      	orrs	r3, r2
   1607e:	81a3      	strh	r3, [r4, #12]
   16080:	6923      	ldr	r3, [r4, #16]
   16082:	2b00      	cmp	r3, #0
   16084:	d10b      	bne.n	1609e <__swsetup_r+0xa6>
   16086:	21a0      	movs	r1, #160	; 0xa0
   16088:	2280      	movs	r2, #128	; 0x80
   1608a:	89a3      	ldrh	r3, [r4, #12]
   1608c:	0089      	lsls	r1, r1, #2
   1608e:	0092      	lsls	r2, r2, #2
   16090:	400b      	ands	r3, r1
   16092:	4293      	cmp	r3, r2
   16094:	d003      	beq.n	1609e <__swsetup_r+0xa6>
   16096:	0021      	movs	r1, r4
   16098:	0030      	movs	r0, r6
   1609a:	f000 f9e1 	bl	16460 <__smakebuf_r>
   1609e:	2301      	movs	r3, #1
   160a0:	89a2      	ldrh	r2, [r4, #12]
   160a2:	4013      	ands	r3, r2
   160a4:	d011      	beq.n	160ca <__swsetup_r+0xd2>
   160a6:	2300      	movs	r3, #0
   160a8:	60a3      	str	r3, [r4, #8]
   160aa:	6963      	ldr	r3, [r4, #20]
   160ac:	425b      	negs	r3, r3
   160ae:	61a3      	str	r3, [r4, #24]
   160b0:	2000      	movs	r0, #0
   160b2:	6923      	ldr	r3, [r4, #16]
   160b4:	4283      	cmp	r3, r0
   160b6:	d1be      	bne.n	16036 <__swsetup_r+0x3e>
   160b8:	230c      	movs	r3, #12
   160ba:	5ee2      	ldrsh	r2, [r4, r3]
   160bc:	0613      	lsls	r3, r2, #24
   160be:	d5ba      	bpl.n	16036 <__swsetup_r+0x3e>
   160c0:	2340      	movs	r3, #64	; 0x40
   160c2:	4313      	orrs	r3, r2
   160c4:	81a3      	strh	r3, [r4, #12]
   160c6:	3801      	subs	r0, #1
   160c8:	e7b5      	b.n	16036 <__swsetup_r+0x3e>
   160ca:	0792      	lsls	r2, r2, #30
   160cc:	d400      	bmi.n	160d0 <__swsetup_r+0xd8>
   160ce:	6963      	ldr	r3, [r4, #20]
   160d0:	60a3      	str	r3, [r4, #8]
   160d2:	e7ed      	b.n	160b0 <__swsetup_r+0xb8>
   160d4:	2000002c 	.word	0x2000002c
   160d8:	00017d98 	.word	0x00017d98
   160dc:	00017db8 	.word	0x00017db8
   160e0:	00017d78 	.word	0x00017d78

000160e4 <abort>:
   160e4:	b510      	push	{r4, lr}
   160e6:	2006      	movs	r0, #6
   160e8:	f000 fccc 	bl	16a84 <raise>
   160ec:	2001      	movs	r0, #1
   160ee:	f7f1 fb97 	bl	7820 <_exit>
   160f2:	Address 0x000160f2 is out of bounds.


000160f4 <__sflush_r>:
   160f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   160f6:	898a      	ldrh	r2, [r1, #12]
   160f8:	0005      	movs	r5, r0
   160fa:	000c      	movs	r4, r1
   160fc:	0713      	lsls	r3, r2, #28
   160fe:	d460      	bmi.n	161c2 <__sflush_r+0xce>
   16100:	684b      	ldr	r3, [r1, #4]
   16102:	2b00      	cmp	r3, #0
   16104:	dc04      	bgt.n	16110 <__sflush_r+0x1c>
   16106:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   16108:	2b00      	cmp	r3, #0
   1610a:	dc01      	bgt.n	16110 <__sflush_r+0x1c>
   1610c:	2000      	movs	r0, #0
   1610e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   16110:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   16112:	2f00      	cmp	r7, #0
   16114:	d0fa      	beq.n	1610c <__sflush_r+0x18>
   16116:	2300      	movs	r3, #0
   16118:	682e      	ldr	r6, [r5, #0]
   1611a:	602b      	str	r3, [r5, #0]
   1611c:	2380      	movs	r3, #128	; 0x80
   1611e:	015b      	lsls	r3, r3, #5
   16120:	401a      	ands	r2, r3
   16122:	d034      	beq.n	1618e <__sflush_r+0x9a>
   16124:	6d60      	ldr	r0, [r4, #84]	; 0x54
   16126:	89a3      	ldrh	r3, [r4, #12]
   16128:	075b      	lsls	r3, r3, #29
   1612a:	d506      	bpl.n	1613a <__sflush_r+0x46>
   1612c:	6863      	ldr	r3, [r4, #4]
   1612e:	1ac0      	subs	r0, r0, r3
   16130:	6b63      	ldr	r3, [r4, #52]	; 0x34
   16132:	2b00      	cmp	r3, #0
   16134:	d001      	beq.n	1613a <__sflush_r+0x46>
   16136:	6c23      	ldr	r3, [r4, #64]	; 0x40
   16138:	1ac0      	subs	r0, r0, r3
   1613a:	0002      	movs	r2, r0
   1613c:	6a21      	ldr	r1, [r4, #32]
   1613e:	2300      	movs	r3, #0
   16140:	0028      	movs	r0, r5
   16142:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   16144:	47b8      	blx	r7
   16146:	89a1      	ldrh	r1, [r4, #12]
   16148:	1c43      	adds	r3, r0, #1
   1614a:	d106      	bne.n	1615a <__sflush_r+0x66>
   1614c:	682b      	ldr	r3, [r5, #0]
   1614e:	2b1d      	cmp	r3, #29
   16150:	d831      	bhi.n	161b6 <__sflush_r+0xc2>
   16152:	4a2c      	ldr	r2, [pc, #176]	; (16204 <__sflush_r+0x110>)
   16154:	40da      	lsrs	r2, r3
   16156:	07d3      	lsls	r3, r2, #31
   16158:	d52d      	bpl.n	161b6 <__sflush_r+0xc2>
   1615a:	2300      	movs	r3, #0
   1615c:	6063      	str	r3, [r4, #4]
   1615e:	6923      	ldr	r3, [r4, #16]
   16160:	6023      	str	r3, [r4, #0]
   16162:	04cb      	lsls	r3, r1, #19
   16164:	d505      	bpl.n	16172 <__sflush_r+0x7e>
   16166:	1c43      	adds	r3, r0, #1
   16168:	d102      	bne.n	16170 <__sflush_r+0x7c>
   1616a:	682b      	ldr	r3, [r5, #0]
   1616c:	2b00      	cmp	r3, #0
   1616e:	d100      	bne.n	16172 <__sflush_r+0x7e>
   16170:	6560      	str	r0, [r4, #84]	; 0x54
   16172:	6b61      	ldr	r1, [r4, #52]	; 0x34
   16174:	602e      	str	r6, [r5, #0]
   16176:	2900      	cmp	r1, #0
   16178:	d0c8      	beq.n	1610c <__sflush_r+0x18>
   1617a:	0023      	movs	r3, r4
   1617c:	3344      	adds	r3, #68	; 0x44
   1617e:	4299      	cmp	r1, r3
   16180:	d002      	beq.n	16188 <__sflush_r+0x94>
   16182:	0028      	movs	r0, r5
   16184:	f000 f9d8 	bl	16538 <_free_r>
   16188:	2000      	movs	r0, #0
   1618a:	6360      	str	r0, [r4, #52]	; 0x34
   1618c:	e7bf      	b.n	1610e <__sflush_r+0x1a>
   1618e:	2301      	movs	r3, #1
   16190:	6a21      	ldr	r1, [r4, #32]
   16192:	0028      	movs	r0, r5
   16194:	47b8      	blx	r7
   16196:	1c43      	adds	r3, r0, #1
   16198:	d1c5      	bne.n	16126 <__sflush_r+0x32>
   1619a:	682b      	ldr	r3, [r5, #0]
   1619c:	2b00      	cmp	r3, #0
   1619e:	d0c2      	beq.n	16126 <__sflush_r+0x32>
   161a0:	2b1d      	cmp	r3, #29
   161a2:	d001      	beq.n	161a8 <__sflush_r+0xb4>
   161a4:	2b16      	cmp	r3, #22
   161a6:	d101      	bne.n	161ac <__sflush_r+0xb8>
   161a8:	602e      	str	r6, [r5, #0]
   161aa:	e7af      	b.n	1610c <__sflush_r+0x18>
   161ac:	2340      	movs	r3, #64	; 0x40
   161ae:	89a2      	ldrh	r2, [r4, #12]
   161b0:	4313      	orrs	r3, r2
   161b2:	81a3      	strh	r3, [r4, #12]
   161b4:	e7ab      	b.n	1610e <__sflush_r+0x1a>
   161b6:	2340      	movs	r3, #64	; 0x40
   161b8:	430b      	orrs	r3, r1
   161ba:	2001      	movs	r0, #1
   161bc:	81a3      	strh	r3, [r4, #12]
   161be:	4240      	negs	r0, r0
   161c0:	e7a5      	b.n	1610e <__sflush_r+0x1a>
   161c2:	690f      	ldr	r7, [r1, #16]
   161c4:	2f00      	cmp	r7, #0
   161c6:	d0a1      	beq.n	1610c <__sflush_r+0x18>
   161c8:	680b      	ldr	r3, [r1, #0]
   161ca:	600f      	str	r7, [r1, #0]
   161cc:	1bdb      	subs	r3, r3, r7
   161ce:	9301      	str	r3, [sp, #4]
   161d0:	2300      	movs	r3, #0
   161d2:	0792      	lsls	r2, r2, #30
   161d4:	d100      	bne.n	161d8 <__sflush_r+0xe4>
   161d6:	694b      	ldr	r3, [r1, #20]
   161d8:	60a3      	str	r3, [r4, #8]
   161da:	9b01      	ldr	r3, [sp, #4]
   161dc:	2b00      	cmp	r3, #0
   161de:	dc00      	bgt.n	161e2 <__sflush_r+0xee>
   161e0:	e794      	b.n	1610c <__sflush_r+0x18>
   161e2:	9b01      	ldr	r3, [sp, #4]
   161e4:	003a      	movs	r2, r7
   161e6:	6a21      	ldr	r1, [r4, #32]
   161e8:	0028      	movs	r0, r5
   161ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   161ec:	47b0      	blx	r6
   161ee:	2800      	cmp	r0, #0
   161f0:	dc03      	bgt.n	161fa <__sflush_r+0x106>
   161f2:	2340      	movs	r3, #64	; 0x40
   161f4:	89a2      	ldrh	r2, [r4, #12]
   161f6:	4313      	orrs	r3, r2
   161f8:	e7df      	b.n	161ba <__sflush_r+0xc6>
   161fa:	9b01      	ldr	r3, [sp, #4]
   161fc:	183f      	adds	r7, r7, r0
   161fe:	1a1b      	subs	r3, r3, r0
   16200:	9301      	str	r3, [sp, #4]
   16202:	e7ea      	b.n	161da <__sflush_r+0xe6>
   16204:	20400001 	.word	0x20400001

00016208 <_fflush_r>:
   16208:	690b      	ldr	r3, [r1, #16]
   1620a:	b570      	push	{r4, r5, r6, lr}
   1620c:	0005      	movs	r5, r0
   1620e:	000c      	movs	r4, r1
   16210:	2b00      	cmp	r3, #0
   16212:	d101      	bne.n	16218 <_fflush_r+0x10>
   16214:	2000      	movs	r0, #0
   16216:	bd70      	pop	{r4, r5, r6, pc}
   16218:	2800      	cmp	r0, #0
   1621a:	d004      	beq.n	16226 <_fflush_r+0x1e>
   1621c:	6983      	ldr	r3, [r0, #24]
   1621e:	2b00      	cmp	r3, #0
   16220:	d101      	bne.n	16226 <_fflush_r+0x1e>
   16222:	f000 f85f 	bl	162e4 <__sinit>
   16226:	4b0b      	ldr	r3, [pc, #44]	; (16254 <_fflush_r+0x4c>)
   16228:	429c      	cmp	r4, r3
   1622a:	d109      	bne.n	16240 <_fflush_r+0x38>
   1622c:	686c      	ldr	r4, [r5, #4]
   1622e:	220c      	movs	r2, #12
   16230:	5ea3      	ldrsh	r3, [r4, r2]
   16232:	2b00      	cmp	r3, #0
   16234:	d0ee      	beq.n	16214 <_fflush_r+0xc>
   16236:	0021      	movs	r1, r4
   16238:	0028      	movs	r0, r5
   1623a:	f7ff ff5b 	bl	160f4 <__sflush_r>
   1623e:	e7ea      	b.n	16216 <_fflush_r+0xe>
   16240:	4b05      	ldr	r3, [pc, #20]	; (16258 <_fflush_r+0x50>)
   16242:	429c      	cmp	r4, r3
   16244:	d101      	bne.n	1624a <_fflush_r+0x42>
   16246:	68ac      	ldr	r4, [r5, #8]
   16248:	e7f1      	b.n	1622e <_fflush_r+0x26>
   1624a:	4b04      	ldr	r3, [pc, #16]	; (1625c <_fflush_r+0x54>)
   1624c:	429c      	cmp	r4, r3
   1624e:	d1ee      	bne.n	1622e <_fflush_r+0x26>
   16250:	68ec      	ldr	r4, [r5, #12]
   16252:	e7ec      	b.n	1622e <_fflush_r+0x26>
   16254:	00017d98 	.word	0x00017d98
   16258:	00017db8 	.word	0x00017db8
   1625c:	00017d78 	.word	0x00017d78

00016260 <_cleanup_r>:
   16260:	b510      	push	{r4, lr}
   16262:	4902      	ldr	r1, [pc, #8]	; (1626c <_cleanup_r+0xc>)
   16264:	f000 f8b2 	bl	163cc <_fwalk_reent>
   16268:	bd10      	pop	{r4, pc}
   1626a:	46c0      	nop			; (mov r8, r8)
   1626c:	00016209 	.word	0x00016209

00016270 <std.isra.0>:
   16270:	2300      	movs	r3, #0
   16272:	b510      	push	{r4, lr}
   16274:	0004      	movs	r4, r0
   16276:	6003      	str	r3, [r0, #0]
   16278:	6043      	str	r3, [r0, #4]
   1627a:	6083      	str	r3, [r0, #8]
   1627c:	8181      	strh	r1, [r0, #12]
   1627e:	6643      	str	r3, [r0, #100]	; 0x64
   16280:	81c2      	strh	r2, [r0, #14]
   16282:	6103      	str	r3, [r0, #16]
   16284:	6143      	str	r3, [r0, #20]
   16286:	6183      	str	r3, [r0, #24]
   16288:	0019      	movs	r1, r3
   1628a:	2208      	movs	r2, #8
   1628c:	305c      	adds	r0, #92	; 0x5c
   1628e:	f7ff f99f 	bl	155d0 <memset>
   16292:	4b05      	ldr	r3, [pc, #20]	; (162a8 <std.isra.0+0x38>)
   16294:	6224      	str	r4, [r4, #32]
   16296:	6263      	str	r3, [r4, #36]	; 0x24
   16298:	4b04      	ldr	r3, [pc, #16]	; (162ac <std.isra.0+0x3c>)
   1629a:	62a3      	str	r3, [r4, #40]	; 0x28
   1629c:	4b04      	ldr	r3, [pc, #16]	; (162b0 <std.isra.0+0x40>)
   1629e:	62e3      	str	r3, [r4, #44]	; 0x2c
   162a0:	4b04      	ldr	r3, [pc, #16]	; (162b4 <std.isra.0+0x44>)
   162a2:	6323      	str	r3, [r4, #48]	; 0x30
   162a4:	bd10      	pop	{r4, pc}
   162a6:	46c0      	nop			; (mov r8, r8)
   162a8:	00016ac5 	.word	0x00016ac5
   162ac:	00016aed 	.word	0x00016aed
   162b0:	00016b25 	.word	0x00016b25
   162b4:	00016b51 	.word	0x00016b51

000162b8 <__sfmoreglue>:
   162b8:	b570      	push	{r4, r5, r6, lr}
   162ba:	2568      	movs	r5, #104	; 0x68
   162bc:	1e4a      	subs	r2, r1, #1
   162be:	4355      	muls	r5, r2
   162c0:	000e      	movs	r6, r1
   162c2:	0029      	movs	r1, r5
   162c4:	3174      	adds	r1, #116	; 0x74
   162c6:	f000 f981 	bl	165cc <_malloc_r>
   162ca:	1e04      	subs	r4, r0, #0
   162cc:	d008      	beq.n	162e0 <__sfmoreglue+0x28>
   162ce:	2100      	movs	r1, #0
   162d0:	002a      	movs	r2, r5
   162d2:	6001      	str	r1, [r0, #0]
   162d4:	6046      	str	r6, [r0, #4]
   162d6:	300c      	adds	r0, #12
   162d8:	60a0      	str	r0, [r4, #8]
   162da:	3268      	adds	r2, #104	; 0x68
   162dc:	f7ff f978 	bl	155d0 <memset>
   162e0:	0020      	movs	r0, r4
   162e2:	bd70      	pop	{r4, r5, r6, pc}

000162e4 <__sinit>:
   162e4:	6983      	ldr	r3, [r0, #24]
   162e6:	b513      	push	{r0, r1, r4, lr}
   162e8:	0004      	movs	r4, r0
   162ea:	2b00      	cmp	r3, #0
   162ec:	d128      	bne.n	16340 <__sinit+0x5c>
   162ee:	6483      	str	r3, [r0, #72]	; 0x48
   162f0:	64c3      	str	r3, [r0, #76]	; 0x4c
   162f2:	6503      	str	r3, [r0, #80]	; 0x50
   162f4:	4b13      	ldr	r3, [pc, #76]	; (16344 <__sinit+0x60>)
   162f6:	4a14      	ldr	r2, [pc, #80]	; (16348 <__sinit+0x64>)
   162f8:	681b      	ldr	r3, [r3, #0]
   162fa:	6282      	str	r2, [r0, #40]	; 0x28
   162fc:	9301      	str	r3, [sp, #4]
   162fe:	4298      	cmp	r0, r3
   16300:	d101      	bne.n	16306 <__sinit+0x22>
   16302:	2301      	movs	r3, #1
   16304:	6183      	str	r3, [r0, #24]
   16306:	0020      	movs	r0, r4
   16308:	f000 f820 	bl	1634c <__sfp>
   1630c:	6060      	str	r0, [r4, #4]
   1630e:	0020      	movs	r0, r4
   16310:	f000 f81c 	bl	1634c <__sfp>
   16314:	60a0      	str	r0, [r4, #8]
   16316:	0020      	movs	r0, r4
   16318:	f000 f818 	bl	1634c <__sfp>
   1631c:	2200      	movs	r2, #0
   1631e:	60e0      	str	r0, [r4, #12]
   16320:	2104      	movs	r1, #4
   16322:	6860      	ldr	r0, [r4, #4]
   16324:	f7ff ffa4 	bl	16270 <std.isra.0>
   16328:	2201      	movs	r2, #1
   1632a:	2109      	movs	r1, #9
   1632c:	68a0      	ldr	r0, [r4, #8]
   1632e:	f7ff ff9f 	bl	16270 <std.isra.0>
   16332:	2202      	movs	r2, #2
   16334:	2112      	movs	r1, #18
   16336:	68e0      	ldr	r0, [r4, #12]
   16338:	f7ff ff9a 	bl	16270 <std.isra.0>
   1633c:	2301      	movs	r3, #1
   1633e:	61a3      	str	r3, [r4, #24]
   16340:	bd13      	pop	{r0, r1, r4, pc}
   16342:	46c0      	nop			; (mov r8, r8)
   16344:	00017d40 	.word	0x00017d40
   16348:	00016261 	.word	0x00016261

0001634c <__sfp>:
   1634c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1634e:	4b1e      	ldr	r3, [pc, #120]	; (163c8 <__sfp+0x7c>)
   16350:	0007      	movs	r7, r0
   16352:	681e      	ldr	r6, [r3, #0]
   16354:	69b3      	ldr	r3, [r6, #24]
   16356:	2b00      	cmp	r3, #0
   16358:	d102      	bne.n	16360 <__sfp+0x14>
   1635a:	0030      	movs	r0, r6
   1635c:	f7ff ffc2 	bl	162e4 <__sinit>
   16360:	3648      	adds	r6, #72	; 0x48
   16362:	68b4      	ldr	r4, [r6, #8]
   16364:	6873      	ldr	r3, [r6, #4]
   16366:	3b01      	subs	r3, #1
   16368:	d504      	bpl.n	16374 <__sfp+0x28>
   1636a:	6833      	ldr	r3, [r6, #0]
   1636c:	2b00      	cmp	r3, #0
   1636e:	d007      	beq.n	16380 <__sfp+0x34>
   16370:	6836      	ldr	r6, [r6, #0]
   16372:	e7f6      	b.n	16362 <__sfp+0x16>
   16374:	220c      	movs	r2, #12
   16376:	5ea5      	ldrsh	r5, [r4, r2]
   16378:	2d00      	cmp	r5, #0
   1637a:	d00d      	beq.n	16398 <__sfp+0x4c>
   1637c:	3468      	adds	r4, #104	; 0x68
   1637e:	e7f2      	b.n	16366 <__sfp+0x1a>
   16380:	2104      	movs	r1, #4
   16382:	0038      	movs	r0, r7
   16384:	f7ff ff98 	bl	162b8 <__sfmoreglue>
   16388:	6030      	str	r0, [r6, #0]
   1638a:	2800      	cmp	r0, #0
   1638c:	d1f0      	bne.n	16370 <__sfp+0x24>
   1638e:	230c      	movs	r3, #12
   16390:	0004      	movs	r4, r0
   16392:	603b      	str	r3, [r7, #0]
   16394:	0020      	movs	r0, r4
   16396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16398:	2301      	movs	r3, #1
   1639a:	0020      	movs	r0, r4
   1639c:	425b      	negs	r3, r3
   1639e:	81e3      	strh	r3, [r4, #14]
   163a0:	3302      	adds	r3, #2
   163a2:	81a3      	strh	r3, [r4, #12]
   163a4:	6665      	str	r5, [r4, #100]	; 0x64
   163a6:	6025      	str	r5, [r4, #0]
   163a8:	60a5      	str	r5, [r4, #8]
   163aa:	6065      	str	r5, [r4, #4]
   163ac:	6125      	str	r5, [r4, #16]
   163ae:	6165      	str	r5, [r4, #20]
   163b0:	61a5      	str	r5, [r4, #24]
   163b2:	2208      	movs	r2, #8
   163b4:	0029      	movs	r1, r5
   163b6:	305c      	adds	r0, #92	; 0x5c
   163b8:	f7ff f90a 	bl	155d0 <memset>
   163bc:	6365      	str	r5, [r4, #52]	; 0x34
   163be:	63a5      	str	r5, [r4, #56]	; 0x38
   163c0:	64a5      	str	r5, [r4, #72]	; 0x48
   163c2:	64e5      	str	r5, [r4, #76]	; 0x4c
   163c4:	e7e6      	b.n	16394 <__sfp+0x48>
   163c6:	46c0      	nop			; (mov r8, r8)
   163c8:	00017d40 	.word	0x00017d40

000163cc <_fwalk_reent>:
   163cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   163ce:	0004      	movs	r4, r0
   163d0:	0007      	movs	r7, r0
   163d2:	2600      	movs	r6, #0
   163d4:	9101      	str	r1, [sp, #4]
   163d6:	3448      	adds	r4, #72	; 0x48
   163d8:	2c00      	cmp	r4, #0
   163da:	d101      	bne.n	163e0 <_fwalk_reent+0x14>
   163dc:	0030      	movs	r0, r6
   163de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   163e0:	6863      	ldr	r3, [r4, #4]
   163e2:	68a5      	ldr	r5, [r4, #8]
   163e4:	9300      	str	r3, [sp, #0]
   163e6:	9b00      	ldr	r3, [sp, #0]
   163e8:	3b01      	subs	r3, #1
   163ea:	9300      	str	r3, [sp, #0]
   163ec:	d501      	bpl.n	163f2 <_fwalk_reent+0x26>
   163ee:	6824      	ldr	r4, [r4, #0]
   163f0:	e7f2      	b.n	163d8 <_fwalk_reent+0xc>
   163f2:	89ab      	ldrh	r3, [r5, #12]
   163f4:	2b01      	cmp	r3, #1
   163f6:	d908      	bls.n	1640a <_fwalk_reent+0x3e>
   163f8:	220e      	movs	r2, #14
   163fa:	5eab      	ldrsh	r3, [r5, r2]
   163fc:	3301      	adds	r3, #1
   163fe:	d004      	beq.n	1640a <_fwalk_reent+0x3e>
   16400:	0029      	movs	r1, r5
   16402:	0038      	movs	r0, r7
   16404:	9b01      	ldr	r3, [sp, #4]
   16406:	4798      	blx	r3
   16408:	4306      	orrs	r6, r0
   1640a:	3568      	adds	r5, #104	; 0x68
   1640c:	e7eb      	b.n	163e6 <_fwalk_reent+0x1a>
   1640e:	Address 0x0001640e is out of bounds.


00016410 <__swhatbuf_r>:
   16410:	b570      	push	{r4, r5, r6, lr}
   16412:	000e      	movs	r6, r1
   16414:	001d      	movs	r5, r3
   16416:	230e      	movs	r3, #14
   16418:	5ec9      	ldrsh	r1, [r1, r3]
   1641a:	b090      	sub	sp, #64	; 0x40
   1641c:	0014      	movs	r4, r2
   1641e:	2900      	cmp	r1, #0
   16420:	da07      	bge.n	16432 <__swhatbuf_r+0x22>
   16422:	2300      	movs	r3, #0
   16424:	602b      	str	r3, [r5, #0]
   16426:	89b3      	ldrh	r3, [r6, #12]
   16428:	061b      	lsls	r3, r3, #24
   1642a:	d411      	bmi.n	16450 <__swhatbuf_r+0x40>
   1642c:	2380      	movs	r3, #128	; 0x80
   1642e:	00db      	lsls	r3, r3, #3
   16430:	e00f      	b.n	16452 <__swhatbuf_r+0x42>
   16432:	aa01      	add	r2, sp, #4
   16434:	f000 fbb8 	bl	16ba8 <_fstat_r>
   16438:	2800      	cmp	r0, #0
   1643a:	dbf2      	blt.n	16422 <__swhatbuf_r+0x12>
   1643c:	22f0      	movs	r2, #240	; 0xf0
   1643e:	9b02      	ldr	r3, [sp, #8]
   16440:	0212      	lsls	r2, r2, #8
   16442:	4013      	ands	r3, r2
   16444:	4a05      	ldr	r2, [pc, #20]	; (1645c <__swhatbuf_r+0x4c>)
   16446:	189b      	adds	r3, r3, r2
   16448:	425a      	negs	r2, r3
   1644a:	4153      	adcs	r3, r2
   1644c:	602b      	str	r3, [r5, #0]
   1644e:	e7ed      	b.n	1642c <__swhatbuf_r+0x1c>
   16450:	2340      	movs	r3, #64	; 0x40
   16452:	2000      	movs	r0, #0
   16454:	6023      	str	r3, [r4, #0]
   16456:	b010      	add	sp, #64	; 0x40
   16458:	bd70      	pop	{r4, r5, r6, pc}
   1645a:	46c0      	nop			; (mov r8, r8)
   1645c:	ffffe000 	.word	0xffffe000

00016460 <__smakebuf_r>:
   16460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16462:	2602      	movs	r6, #2
   16464:	898b      	ldrh	r3, [r1, #12]
   16466:	0005      	movs	r5, r0
   16468:	000c      	movs	r4, r1
   1646a:	4233      	tst	r3, r6
   1646c:	d006      	beq.n	1647c <__smakebuf_r+0x1c>
   1646e:	0023      	movs	r3, r4
   16470:	3347      	adds	r3, #71	; 0x47
   16472:	6023      	str	r3, [r4, #0]
   16474:	6123      	str	r3, [r4, #16]
   16476:	2301      	movs	r3, #1
   16478:	6163      	str	r3, [r4, #20]
   1647a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   1647c:	ab01      	add	r3, sp, #4
   1647e:	466a      	mov	r2, sp
   16480:	f7ff ffc6 	bl	16410 <__swhatbuf_r>
   16484:	9900      	ldr	r1, [sp, #0]
   16486:	0007      	movs	r7, r0
   16488:	0028      	movs	r0, r5
   1648a:	f000 f89f 	bl	165cc <_malloc_r>
   1648e:	2800      	cmp	r0, #0
   16490:	d108      	bne.n	164a4 <__smakebuf_r+0x44>
   16492:	220c      	movs	r2, #12
   16494:	5ea3      	ldrsh	r3, [r4, r2]
   16496:	059a      	lsls	r2, r3, #22
   16498:	d4ef      	bmi.n	1647a <__smakebuf_r+0x1a>
   1649a:	2203      	movs	r2, #3
   1649c:	4393      	bics	r3, r2
   1649e:	431e      	orrs	r6, r3
   164a0:	81a6      	strh	r6, [r4, #12]
   164a2:	e7e4      	b.n	1646e <__smakebuf_r+0xe>
   164a4:	4b0f      	ldr	r3, [pc, #60]	; (164e4 <__smakebuf_r+0x84>)
   164a6:	62ab      	str	r3, [r5, #40]	; 0x28
   164a8:	2380      	movs	r3, #128	; 0x80
   164aa:	89a2      	ldrh	r2, [r4, #12]
   164ac:	6020      	str	r0, [r4, #0]
   164ae:	4313      	orrs	r3, r2
   164b0:	81a3      	strh	r3, [r4, #12]
   164b2:	9b00      	ldr	r3, [sp, #0]
   164b4:	6120      	str	r0, [r4, #16]
   164b6:	6163      	str	r3, [r4, #20]
   164b8:	9b01      	ldr	r3, [sp, #4]
   164ba:	2b00      	cmp	r3, #0
   164bc:	d00d      	beq.n	164da <__smakebuf_r+0x7a>
   164be:	230e      	movs	r3, #14
   164c0:	5ee1      	ldrsh	r1, [r4, r3]
   164c2:	0028      	movs	r0, r5
   164c4:	f000 fb82 	bl	16bcc <_isatty_r>
   164c8:	2800      	cmp	r0, #0
   164ca:	d006      	beq.n	164da <__smakebuf_r+0x7a>
   164cc:	2203      	movs	r2, #3
   164ce:	89a3      	ldrh	r3, [r4, #12]
   164d0:	4393      	bics	r3, r2
   164d2:	001a      	movs	r2, r3
   164d4:	2301      	movs	r3, #1
   164d6:	4313      	orrs	r3, r2
   164d8:	81a3      	strh	r3, [r4, #12]
   164da:	89a0      	ldrh	r0, [r4, #12]
   164dc:	4338      	orrs	r0, r7
   164de:	81a0      	strh	r0, [r4, #12]
   164e0:	e7cb      	b.n	1647a <__smakebuf_r+0x1a>
   164e2:	46c0      	nop			; (mov r8, r8)
   164e4:	00016261 	.word	0x00016261

000164e8 <malloc>:
   164e8:	b510      	push	{r4, lr}
   164ea:	4b03      	ldr	r3, [pc, #12]	; (164f8 <malloc+0x10>)
   164ec:	0001      	movs	r1, r0
   164ee:	6818      	ldr	r0, [r3, #0]
   164f0:	f000 f86c 	bl	165cc <_malloc_r>
   164f4:	bd10      	pop	{r4, pc}
   164f6:	46c0      	nop			; (mov r8, r8)
   164f8:	2000002c 	.word	0x2000002c

000164fc <memchr>:
   164fc:	b2c9      	uxtb	r1, r1
   164fe:	1882      	adds	r2, r0, r2
   16500:	4290      	cmp	r0, r2
   16502:	d101      	bne.n	16508 <memchr+0xc>
   16504:	2000      	movs	r0, #0
   16506:	4770      	bx	lr
   16508:	7803      	ldrb	r3, [r0, #0]
   1650a:	428b      	cmp	r3, r1
   1650c:	d0fb      	beq.n	16506 <memchr+0xa>
   1650e:	3001      	adds	r0, #1
   16510:	e7f6      	b.n	16500 <memchr+0x4>

00016512 <memmove>:
   16512:	b510      	push	{r4, lr}
   16514:	4288      	cmp	r0, r1
   16516:	d902      	bls.n	1651e <memmove+0xc>
   16518:	188b      	adds	r3, r1, r2
   1651a:	4298      	cmp	r0, r3
   1651c:	d308      	bcc.n	16530 <memmove+0x1e>
   1651e:	2300      	movs	r3, #0
   16520:	429a      	cmp	r2, r3
   16522:	d007      	beq.n	16534 <memmove+0x22>
   16524:	5ccc      	ldrb	r4, [r1, r3]
   16526:	54c4      	strb	r4, [r0, r3]
   16528:	3301      	adds	r3, #1
   1652a:	e7f9      	b.n	16520 <memmove+0xe>
   1652c:	5c8b      	ldrb	r3, [r1, r2]
   1652e:	5483      	strb	r3, [r0, r2]
   16530:	3a01      	subs	r2, #1
   16532:	d2fb      	bcs.n	1652c <memmove+0x1a>
   16534:	bd10      	pop	{r4, pc}
   16536:	Address 0x00016536 is out of bounds.


00016538 <_free_r>:
   16538:	b570      	push	{r4, r5, r6, lr}
   1653a:	0005      	movs	r5, r0
   1653c:	2900      	cmp	r1, #0
   1653e:	d010      	beq.n	16562 <_free_r+0x2a>
   16540:	1f0c      	subs	r4, r1, #4
   16542:	6823      	ldr	r3, [r4, #0]
   16544:	2b00      	cmp	r3, #0
   16546:	da00      	bge.n	1654a <_free_r+0x12>
   16548:	18e4      	adds	r4, r4, r3
   1654a:	0028      	movs	r0, r5
   1654c:	f000 fb64 	bl	16c18 <__malloc_lock>
   16550:	4a1d      	ldr	r2, [pc, #116]	; (165c8 <_free_r+0x90>)
   16552:	6813      	ldr	r3, [r2, #0]
   16554:	2b00      	cmp	r3, #0
   16556:	d105      	bne.n	16564 <_free_r+0x2c>
   16558:	6063      	str	r3, [r4, #4]
   1655a:	6014      	str	r4, [r2, #0]
   1655c:	0028      	movs	r0, r5
   1655e:	f000 fb5c 	bl	16c1a <__malloc_unlock>
   16562:	bd70      	pop	{r4, r5, r6, pc}
   16564:	42a3      	cmp	r3, r4
   16566:	d909      	bls.n	1657c <_free_r+0x44>
   16568:	6821      	ldr	r1, [r4, #0]
   1656a:	1860      	adds	r0, r4, r1
   1656c:	4283      	cmp	r3, r0
   1656e:	d1f3      	bne.n	16558 <_free_r+0x20>
   16570:	6818      	ldr	r0, [r3, #0]
   16572:	685b      	ldr	r3, [r3, #4]
   16574:	1841      	adds	r1, r0, r1
   16576:	6021      	str	r1, [r4, #0]
   16578:	e7ee      	b.n	16558 <_free_r+0x20>
   1657a:	0013      	movs	r3, r2
   1657c:	685a      	ldr	r2, [r3, #4]
   1657e:	2a00      	cmp	r2, #0
   16580:	d001      	beq.n	16586 <_free_r+0x4e>
   16582:	42a2      	cmp	r2, r4
   16584:	d9f9      	bls.n	1657a <_free_r+0x42>
   16586:	6819      	ldr	r1, [r3, #0]
   16588:	1858      	adds	r0, r3, r1
   1658a:	42a0      	cmp	r0, r4
   1658c:	d10b      	bne.n	165a6 <_free_r+0x6e>
   1658e:	6820      	ldr	r0, [r4, #0]
   16590:	1809      	adds	r1, r1, r0
   16592:	1858      	adds	r0, r3, r1
   16594:	6019      	str	r1, [r3, #0]
   16596:	4282      	cmp	r2, r0
   16598:	d1e0      	bne.n	1655c <_free_r+0x24>
   1659a:	6810      	ldr	r0, [r2, #0]
   1659c:	6852      	ldr	r2, [r2, #4]
   1659e:	1841      	adds	r1, r0, r1
   165a0:	6019      	str	r1, [r3, #0]
   165a2:	605a      	str	r2, [r3, #4]
   165a4:	e7da      	b.n	1655c <_free_r+0x24>
   165a6:	42a0      	cmp	r0, r4
   165a8:	d902      	bls.n	165b0 <_free_r+0x78>
   165aa:	230c      	movs	r3, #12
   165ac:	602b      	str	r3, [r5, #0]
   165ae:	e7d5      	b.n	1655c <_free_r+0x24>
   165b0:	6821      	ldr	r1, [r4, #0]
   165b2:	1860      	adds	r0, r4, r1
   165b4:	4282      	cmp	r2, r0
   165b6:	d103      	bne.n	165c0 <_free_r+0x88>
   165b8:	6810      	ldr	r0, [r2, #0]
   165ba:	6852      	ldr	r2, [r2, #4]
   165bc:	1841      	adds	r1, r0, r1
   165be:	6021      	str	r1, [r4, #0]
   165c0:	6062      	str	r2, [r4, #4]
   165c2:	605c      	str	r4, [r3, #4]
   165c4:	e7ca      	b.n	1655c <_free_r+0x24>
   165c6:	46c0      	nop			; (mov r8, r8)
   165c8:	20002094 	.word	0x20002094

000165cc <_malloc_r>:
   165cc:	2303      	movs	r3, #3
   165ce:	b570      	push	{r4, r5, r6, lr}
   165d0:	1ccd      	adds	r5, r1, #3
   165d2:	439d      	bics	r5, r3
   165d4:	3508      	adds	r5, #8
   165d6:	0006      	movs	r6, r0
   165d8:	2d0c      	cmp	r5, #12
   165da:	d21e      	bcs.n	1661a <_malloc_r+0x4e>
   165dc:	250c      	movs	r5, #12
   165de:	42a9      	cmp	r1, r5
   165e0:	d81d      	bhi.n	1661e <_malloc_r+0x52>
   165e2:	0030      	movs	r0, r6
   165e4:	f000 fb18 	bl	16c18 <__malloc_lock>
   165e8:	4a25      	ldr	r2, [pc, #148]	; (16680 <_malloc_r+0xb4>)
   165ea:	6814      	ldr	r4, [r2, #0]
   165ec:	0021      	movs	r1, r4
   165ee:	2900      	cmp	r1, #0
   165f0:	d119      	bne.n	16626 <_malloc_r+0x5a>
   165f2:	4c24      	ldr	r4, [pc, #144]	; (16684 <_malloc_r+0xb8>)
   165f4:	6823      	ldr	r3, [r4, #0]
   165f6:	2b00      	cmp	r3, #0
   165f8:	d103      	bne.n	16602 <_malloc_r+0x36>
   165fa:	0030      	movs	r0, r6
   165fc:	f000 fa06 	bl	16a0c <_sbrk_r>
   16600:	6020      	str	r0, [r4, #0]
   16602:	0029      	movs	r1, r5
   16604:	0030      	movs	r0, r6
   16606:	f000 fa01 	bl	16a0c <_sbrk_r>
   1660a:	1c43      	adds	r3, r0, #1
   1660c:	d12c      	bne.n	16668 <_malloc_r+0x9c>
   1660e:	230c      	movs	r3, #12
   16610:	0030      	movs	r0, r6
   16612:	6033      	str	r3, [r6, #0]
   16614:	f000 fb01 	bl	16c1a <__malloc_unlock>
   16618:	e003      	b.n	16622 <_malloc_r+0x56>
   1661a:	2d00      	cmp	r5, #0
   1661c:	dadf      	bge.n	165de <_malloc_r+0x12>
   1661e:	230c      	movs	r3, #12
   16620:	6033      	str	r3, [r6, #0]
   16622:	2000      	movs	r0, #0
   16624:	bd70      	pop	{r4, r5, r6, pc}
   16626:	680b      	ldr	r3, [r1, #0]
   16628:	1b5b      	subs	r3, r3, r5
   1662a:	d41a      	bmi.n	16662 <_malloc_r+0x96>
   1662c:	2b0b      	cmp	r3, #11
   1662e:	d903      	bls.n	16638 <_malloc_r+0x6c>
   16630:	600b      	str	r3, [r1, #0]
   16632:	18cc      	adds	r4, r1, r3
   16634:	6025      	str	r5, [r4, #0]
   16636:	e003      	b.n	16640 <_malloc_r+0x74>
   16638:	428c      	cmp	r4, r1
   1663a:	d10e      	bne.n	1665a <_malloc_r+0x8e>
   1663c:	6863      	ldr	r3, [r4, #4]
   1663e:	6013      	str	r3, [r2, #0]
   16640:	0030      	movs	r0, r6
   16642:	f000 faea 	bl	16c1a <__malloc_unlock>
   16646:	0020      	movs	r0, r4
   16648:	2207      	movs	r2, #7
   1664a:	300b      	adds	r0, #11
   1664c:	1d23      	adds	r3, r4, #4
   1664e:	4390      	bics	r0, r2
   16650:	1ac3      	subs	r3, r0, r3
   16652:	d0e7      	beq.n	16624 <_malloc_r+0x58>
   16654:	425a      	negs	r2, r3
   16656:	50e2      	str	r2, [r4, r3]
   16658:	e7e4      	b.n	16624 <_malloc_r+0x58>
   1665a:	684b      	ldr	r3, [r1, #4]
   1665c:	6063      	str	r3, [r4, #4]
   1665e:	000c      	movs	r4, r1
   16660:	e7ee      	b.n	16640 <_malloc_r+0x74>
   16662:	000c      	movs	r4, r1
   16664:	6849      	ldr	r1, [r1, #4]
   16666:	e7c2      	b.n	165ee <_malloc_r+0x22>
   16668:	2303      	movs	r3, #3
   1666a:	1cc4      	adds	r4, r0, #3
   1666c:	439c      	bics	r4, r3
   1666e:	42a0      	cmp	r0, r4
   16670:	d0e0      	beq.n	16634 <_malloc_r+0x68>
   16672:	1a21      	subs	r1, r4, r0
   16674:	0030      	movs	r0, r6
   16676:	f000 f9c9 	bl	16a0c <_sbrk_r>
   1667a:	1c43      	adds	r3, r0, #1
   1667c:	d1da      	bne.n	16634 <_malloc_r+0x68>
   1667e:	e7c6      	b.n	1660e <_malloc_r+0x42>
   16680:	20002094 	.word	0x20002094
   16684:	20002098 	.word	0x20002098

00016688 <_realloc_r>:
   16688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1668a:	0007      	movs	r7, r0
   1668c:	000d      	movs	r5, r1
   1668e:	0016      	movs	r6, r2
   16690:	2900      	cmp	r1, #0
   16692:	d105      	bne.n	166a0 <_realloc_r+0x18>
   16694:	0011      	movs	r1, r2
   16696:	f7ff ff99 	bl	165cc <_malloc_r>
   1669a:	0004      	movs	r4, r0
   1669c:	0020      	movs	r0, r4
   1669e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   166a0:	2a00      	cmp	r2, #0
   166a2:	d103      	bne.n	166ac <_realloc_r+0x24>
   166a4:	f7ff ff48 	bl	16538 <_free_r>
   166a8:	0034      	movs	r4, r6
   166aa:	e7f7      	b.n	1669c <_realloc_r+0x14>
   166ac:	f000 fab6 	bl	16c1c <_malloc_usable_size_r>
   166b0:	002c      	movs	r4, r5
   166b2:	4286      	cmp	r6, r0
   166b4:	d9f2      	bls.n	1669c <_realloc_r+0x14>
   166b6:	0031      	movs	r1, r6
   166b8:	0038      	movs	r0, r7
   166ba:	f7ff ff87 	bl	165cc <_malloc_r>
   166be:	1e04      	subs	r4, r0, #0
   166c0:	d0ec      	beq.n	1669c <_realloc_r+0x14>
   166c2:	0029      	movs	r1, r5
   166c4:	0032      	movs	r2, r6
   166c6:	f7fe ff7a 	bl	155be <memcpy>
   166ca:	0029      	movs	r1, r5
   166cc:	0038      	movs	r0, r7
   166ce:	f7ff ff33 	bl	16538 <_free_r>
   166d2:	e7e3      	b.n	1669c <_realloc_r+0x14>

000166d4 <__ssputs_r>:
   166d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   166d6:	688e      	ldr	r6, [r1, #8]
   166d8:	b085      	sub	sp, #20
   166da:	0007      	movs	r7, r0
   166dc:	000c      	movs	r4, r1
   166de:	9203      	str	r2, [sp, #12]
   166e0:	9301      	str	r3, [sp, #4]
   166e2:	429e      	cmp	r6, r3
   166e4:	d839      	bhi.n	1675a <__ssputs_r+0x86>
   166e6:	2390      	movs	r3, #144	; 0x90
   166e8:	898a      	ldrh	r2, [r1, #12]
   166ea:	00db      	lsls	r3, r3, #3
   166ec:	421a      	tst	r2, r3
   166ee:	d034      	beq.n	1675a <__ssputs_r+0x86>
   166f0:	2503      	movs	r5, #3
   166f2:	6909      	ldr	r1, [r1, #16]
   166f4:	6823      	ldr	r3, [r4, #0]
   166f6:	1a5b      	subs	r3, r3, r1
   166f8:	9302      	str	r3, [sp, #8]
   166fa:	6963      	ldr	r3, [r4, #20]
   166fc:	9802      	ldr	r0, [sp, #8]
   166fe:	435d      	muls	r5, r3
   16700:	0feb      	lsrs	r3, r5, #31
   16702:	195d      	adds	r5, r3, r5
   16704:	9b01      	ldr	r3, [sp, #4]
   16706:	106d      	asrs	r5, r5, #1
   16708:	3301      	adds	r3, #1
   1670a:	181b      	adds	r3, r3, r0
   1670c:	42ab      	cmp	r3, r5
   1670e:	d900      	bls.n	16712 <__ssputs_r+0x3e>
   16710:	001d      	movs	r5, r3
   16712:	0553      	lsls	r3, r2, #21
   16714:	d532      	bpl.n	1677c <__ssputs_r+0xa8>
   16716:	0029      	movs	r1, r5
   16718:	0038      	movs	r0, r7
   1671a:	f7ff ff57 	bl	165cc <_malloc_r>
   1671e:	1e06      	subs	r6, r0, #0
   16720:	d109      	bne.n	16736 <__ssputs_r+0x62>
   16722:	230c      	movs	r3, #12
   16724:	603b      	str	r3, [r7, #0]
   16726:	2340      	movs	r3, #64	; 0x40
   16728:	2001      	movs	r0, #1
   1672a:	89a2      	ldrh	r2, [r4, #12]
   1672c:	4240      	negs	r0, r0
   1672e:	4313      	orrs	r3, r2
   16730:	81a3      	strh	r3, [r4, #12]
   16732:	b005      	add	sp, #20
   16734:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16736:	9a02      	ldr	r2, [sp, #8]
   16738:	6921      	ldr	r1, [r4, #16]
   1673a:	f7fe ff40 	bl	155be <memcpy>
   1673e:	89a3      	ldrh	r3, [r4, #12]
   16740:	4a14      	ldr	r2, [pc, #80]	; (16794 <__ssputs_r+0xc0>)
   16742:	401a      	ands	r2, r3
   16744:	2380      	movs	r3, #128	; 0x80
   16746:	4313      	orrs	r3, r2
   16748:	81a3      	strh	r3, [r4, #12]
   1674a:	9b02      	ldr	r3, [sp, #8]
   1674c:	6126      	str	r6, [r4, #16]
   1674e:	18f6      	adds	r6, r6, r3
   16750:	6026      	str	r6, [r4, #0]
   16752:	6165      	str	r5, [r4, #20]
   16754:	9e01      	ldr	r6, [sp, #4]
   16756:	1aed      	subs	r5, r5, r3
   16758:	60a5      	str	r5, [r4, #8]
   1675a:	9b01      	ldr	r3, [sp, #4]
   1675c:	42b3      	cmp	r3, r6
   1675e:	d200      	bcs.n	16762 <__ssputs_r+0x8e>
   16760:	001e      	movs	r6, r3
   16762:	0032      	movs	r2, r6
   16764:	9903      	ldr	r1, [sp, #12]
   16766:	6820      	ldr	r0, [r4, #0]
   16768:	f7ff fed3 	bl	16512 <memmove>
   1676c:	68a3      	ldr	r3, [r4, #8]
   1676e:	2000      	movs	r0, #0
   16770:	1b9b      	subs	r3, r3, r6
   16772:	60a3      	str	r3, [r4, #8]
   16774:	6823      	ldr	r3, [r4, #0]
   16776:	199e      	adds	r6, r3, r6
   16778:	6026      	str	r6, [r4, #0]
   1677a:	e7da      	b.n	16732 <__ssputs_r+0x5e>
   1677c:	002a      	movs	r2, r5
   1677e:	0038      	movs	r0, r7
   16780:	f7ff ff82 	bl	16688 <_realloc_r>
   16784:	1e06      	subs	r6, r0, #0
   16786:	d1e0      	bne.n	1674a <__ssputs_r+0x76>
   16788:	6921      	ldr	r1, [r4, #16]
   1678a:	0038      	movs	r0, r7
   1678c:	f7ff fed4 	bl	16538 <_free_r>
   16790:	e7c7      	b.n	16722 <__ssputs_r+0x4e>
   16792:	46c0      	nop			; (mov r8, r8)
   16794:	fffffb7f 	.word	0xfffffb7f

00016798 <_svfiprintf_r>:
   16798:	b5f0      	push	{r4, r5, r6, r7, lr}
   1679a:	b09f      	sub	sp, #124	; 0x7c
   1679c:	9002      	str	r0, [sp, #8]
   1679e:	9305      	str	r3, [sp, #20]
   167a0:	898b      	ldrh	r3, [r1, #12]
   167a2:	000f      	movs	r7, r1
   167a4:	0016      	movs	r6, r2
   167a6:	061b      	lsls	r3, r3, #24
   167a8:	d511      	bpl.n	167ce <_svfiprintf_r+0x36>
   167aa:	690b      	ldr	r3, [r1, #16]
   167ac:	2b00      	cmp	r3, #0
   167ae:	d10e      	bne.n	167ce <_svfiprintf_r+0x36>
   167b0:	2140      	movs	r1, #64	; 0x40
   167b2:	f7ff ff0b 	bl	165cc <_malloc_r>
   167b6:	6038      	str	r0, [r7, #0]
   167b8:	6138      	str	r0, [r7, #16]
   167ba:	2800      	cmp	r0, #0
   167bc:	d105      	bne.n	167ca <_svfiprintf_r+0x32>
   167be:	230c      	movs	r3, #12
   167c0:	9a02      	ldr	r2, [sp, #8]
   167c2:	3801      	subs	r0, #1
   167c4:	6013      	str	r3, [r2, #0]
   167c6:	b01f      	add	sp, #124	; 0x7c
   167c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   167ca:	2340      	movs	r3, #64	; 0x40
   167cc:	617b      	str	r3, [r7, #20]
   167ce:	2300      	movs	r3, #0
   167d0:	ad06      	add	r5, sp, #24
   167d2:	616b      	str	r3, [r5, #20]
   167d4:	3320      	adds	r3, #32
   167d6:	766b      	strb	r3, [r5, #25]
   167d8:	3310      	adds	r3, #16
   167da:	76ab      	strb	r3, [r5, #26]
   167dc:	0034      	movs	r4, r6
   167de:	7823      	ldrb	r3, [r4, #0]
   167e0:	2b00      	cmp	r3, #0
   167e2:	d147      	bne.n	16874 <_svfiprintf_r+0xdc>
   167e4:	1ba3      	subs	r3, r4, r6
   167e6:	9304      	str	r3, [sp, #16]
   167e8:	d00d      	beq.n	16806 <_svfiprintf_r+0x6e>
   167ea:	1ba3      	subs	r3, r4, r6
   167ec:	0032      	movs	r2, r6
   167ee:	0039      	movs	r1, r7
   167f0:	9802      	ldr	r0, [sp, #8]
   167f2:	f7ff ff6f 	bl	166d4 <__ssputs_r>
   167f6:	1c43      	adds	r3, r0, #1
   167f8:	d100      	bne.n	167fc <_svfiprintf_r+0x64>
   167fa:	e0b5      	b.n	16968 <_svfiprintf_r+0x1d0>
   167fc:	696a      	ldr	r2, [r5, #20]
   167fe:	9b04      	ldr	r3, [sp, #16]
   16800:	4694      	mov	ip, r2
   16802:	4463      	add	r3, ip
   16804:	616b      	str	r3, [r5, #20]
   16806:	7823      	ldrb	r3, [r4, #0]
   16808:	2b00      	cmp	r3, #0
   1680a:	d100      	bne.n	1680e <_svfiprintf_r+0x76>
   1680c:	e0ac      	b.n	16968 <_svfiprintf_r+0x1d0>
   1680e:	2201      	movs	r2, #1
   16810:	2300      	movs	r3, #0
   16812:	4252      	negs	r2, r2
   16814:	606a      	str	r2, [r5, #4]
   16816:	a902      	add	r1, sp, #8
   16818:	3254      	adds	r2, #84	; 0x54
   1681a:	1852      	adds	r2, r2, r1
   1681c:	3401      	adds	r4, #1
   1681e:	602b      	str	r3, [r5, #0]
   16820:	60eb      	str	r3, [r5, #12]
   16822:	60ab      	str	r3, [r5, #8]
   16824:	7013      	strb	r3, [r2, #0]
   16826:	65ab      	str	r3, [r5, #88]	; 0x58
   16828:	4e58      	ldr	r6, [pc, #352]	; (1698c <_svfiprintf_r+0x1f4>)
   1682a:	2205      	movs	r2, #5
   1682c:	7821      	ldrb	r1, [r4, #0]
   1682e:	0030      	movs	r0, r6
   16830:	f7ff fe64 	bl	164fc <memchr>
   16834:	1c62      	adds	r2, r4, #1
   16836:	2800      	cmp	r0, #0
   16838:	d120      	bne.n	1687c <_svfiprintf_r+0xe4>
   1683a:	6829      	ldr	r1, [r5, #0]
   1683c:	06cb      	lsls	r3, r1, #27
   1683e:	d504      	bpl.n	1684a <_svfiprintf_r+0xb2>
   16840:	2353      	movs	r3, #83	; 0x53
   16842:	ae02      	add	r6, sp, #8
   16844:	3020      	adds	r0, #32
   16846:	199b      	adds	r3, r3, r6
   16848:	7018      	strb	r0, [r3, #0]
   1684a:	070b      	lsls	r3, r1, #28
   1684c:	d504      	bpl.n	16858 <_svfiprintf_r+0xc0>
   1684e:	2353      	movs	r3, #83	; 0x53
   16850:	202b      	movs	r0, #43	; 0x2b
   16852:	ae02      	add	r6, sp, #8
   16854:	199b      	adds	r3, r3, r6
   16856:	7018      	strb	r0, [r3, #0]
   16858:	7823      	ldrb	r3, [r4, #0]
   1685a:	2b2a      	cmp	r3, #42	; 0x2a
   1685c:	d016      	beq.n	1688c <_svfiprintf_r+0xf4>
   1685e:	2000      	movs	r0, #0
   16860:	210a      	movs	r1, #10
   16862:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16864:	7822      	ldrb	r2, [r4, #0]
   16866:	3a30      	subs	r2, #48	; 0x30
   16868:	2a09      	cmp	r2, #9
   1686a:	d955      	bls.n	16918 <_svfiprintf_r+0x180>
   1686c:	2800      	cmp	r0, #0
   1686e:	d015      	beq.n	1689c <_svfiprintf_r+0x104>
   16870:	9309      	str	r3, [sp, #36]	; 0x24
   16872:	e013      	b.n	1689c <_svfiprintf_r+0x104>
   16874:	2b25      	cmp	r3, #37	; 0x25
   16876:	d0b5      	beq.n	167e4 <_svfiprintf_r+0x4c>
   16878:	3401      	adds	r4, #1
   1687a:	e7b0      	b.n	167de <_svfiprintf_r+0x46>
   1687c:	2301      	movs	r3, #1
   1687e:	1b80      	subs	r0, r0, r6
   16880:	4083      	lsls	r3, r0
   16882:	6829      	ldr	r1, [r5, #0]
   16884:	0014      	movs	r4, r2
   16886:	430b      	orrs	r3, r1
   16888:	602b      	str	r3, [r5, #0]
   1688a:	e7cd      	b.n	16828 <_svfiprintf_r+0x90>
   1688c:	9b05      	ldr	r3, [sp, #20]
   1688e:	1d18      	adds	r0, r3, #4
   16890:	681b      	ldr	r3, [r3, #0]
   16892:	9005      	str	r0, [sp, #20]
   16894:	2b00      	cmp	r3, #0
   16896:	db39      	blt.n	1690c <_svfiprintf_r+0x174>
   16898:	9309      	str	r3, [sp, #36]	; 0x24
   1689a:	0014      	movs	r4, r2
   1689c:	7823      	ldrb	r3, [r4, #0]
   1689e:	2b2e      	cmp	r3, #46	; 0x2e
   168a0:	d10b      	bne.n	168ba <_svfiprintf_r+0x122>
   168a2:	7863      	ldrb	r3, [r4, #1]
   168a4:	1c62      	adds	r2, r4, #1
   168a6:	2b2a      	cmp	r3, #42	; 0x2a
   168a8:	d13e      	bne.n	16928 <_svfiprintf_r+0x190>
   168aa:	9b05      	ldr	r3, [sp, #20]
   168ac:	3402      	adds	r4, #2
   168ae:	1d1a      	adds	r2, r3, #4
   168b0:	681b      	ldr	r3, [r3, #0]
   168b2:	9205      	str	r2, [sp, #20]
   168b4:	2b00      	cmp	r3, #0
   168b6:	db34      	blt.n	16922 <_svfiprintf_r+0x18a>
   168b8:	9307      	str	r3, [sp, #28]
   168ba:	4e35      	ldr	r6, [pc, #212]	; (16990 <_svfiprintf_r+0x1f8>)
   168bc:	7821      	ldrb	r1, [r4, #0]
   168be:	2203      	movs	r2, #3
   168c0:	0030      	movs	r0, r6
   168c2:	f7ff fe1b 	bl	164fc <memchr>
   168c6:	2800      	cmp	r0, #0
   168c8:	d006      	beq.n	168d8 <_svfiprintf_r+0x140>
   168ca:	2340      	movs	r3, #64	; 0x40
   168cc:	1b80      	subs	r0, r0, r6
   168ce:	4083      	lsls	r3, r0
   168d0:	682a      	ldr	r2, [r5, #0]
   168d2:	3401      	adds	r4, #1
   168d4:	4313      	orrs	r3, r2
   168d6:	602b      	str	r3, [r5, #0]
   168d8:	7821      	ldrb	r1, [r4, #0]
   168da:	2206      	movs	r2, #6
   168dc:	482d      	ldr	r0, [pc, #180]	; (16994 <_svfiprintf_r+0x1fc>)
   168de:	1c66      	adds	r6, r4, #1
   168e0:	7629      	strb	r1, [r5, #24]
   168e2:	f7ff fe0b 	bl	164fc <memchr>
   168e6:	2800      	cmp	r0, #0
   168e8:	d046      	beq.n	16978 <_svfiprintf_r+0x1e0>
   168ea:	4b2b      	ldr	r3, [pc, #172]	; (16998 <_svfiprintf_r+0x200>)
   168ec:	2b00      	cmp	r3, #0
   168ee:	d12f      	bne.n	16950 <_svfiprintf_r+0x1b8>
   168f0:	6829      	ldr	r1, [r5, #0]
   168f2:	9b05      	ldr	r3, [sp, #20]
   168f4:	2207      	movs	r2, #7
   168f6:	05c9      	lsls	r1, r1, #23
   168f8:	d528      	bpl.n	1694c <_svfiprintf_r+0x1b4>
   168fa:	189b      	adds	r3, r3, r2
   168fc:	4393      	bics	r3, r2
   168fe:	3308      	adds	r3, #8
   16900:	9305      	str	r3, [sp, #20]
   16902:	696b      	ldr	r3, [r5, #20]
   16904:	9a03      	ldr	r2, [sp, #12]
   16906:	189b      	adds	r3, r3, r2
   16908:	616b      	str	r3, [r5, #20]
   1690a:	e767      	b.n	167dc <_svfiprintf_r+0x44>
   1690c:	425b      	negs	r3, r3
   1690e:	60eb      	str	r3, [r5, #12]
   16910:	2302      	movs	r3, #2
   16912:	430b      	orrs	r3, r1
   16914:	602b      	str	r3, [r5, #0]
   16916:	e7c0      	b.n	1689a <_svfiprintf_r+0x102>
   16918:	434b      	muls	r3, r1
   1691a:	3401      	adds	r4, #1
   1691c:	189b      	adds	r3, r3, r2
   1691e:	2001      	movs	r0, #1
   16920:	e7a0      	b.n	16864 <_svfiprintf_r+0xcc>
   16922:	2301      	movs	r3, #1
   16924:	425b      	negs	r3, r3
   16926:	e7c7      	b.n	168b8 <_svfiprintf_r+0x120>
   16928:	2300      	movs	r3, #0
   1692a:	0014      	movs	r4, r2
   1692c:	200a      	movs	r0, #10
   1692e:	001a      	movs	r2, r3
   16930:	606b      	str	r3, [r5, #4]
   16932:	7821      	ldrb	r1, [r4, #0]
   16934:	3930      	subs	r1, #48	; 0x30
   16936:	2909      	cmp	r1, #9
   16938:	d903      	bls.n	16942 <_svfiprintf_r+0x1aa>
   1693a:	2b00      	cmp	r3, #0
   1693c:	d0bd      	beq.n	168ba <_svfiprintf_r+0x122>
   1693e:	9207      	str	r2, [sp, #28]
   16940:	e7bb      	b.n	168ba <_svfiprintf_r+0x122>
   16942:	4342      	muls	r2, r0
   16944:	3401      	adds	r4, #1
   16946:	1852      	adds	r2, r2, r1
   16948:	2301      	movs	r3, #1
   1694a:	e7f2      	b.n	16932 <_svfiprintf_r+0x19a>
   1694c:	3307      	adds	r3, #7
   1694e:	e7d5      	b.n	168fc <_svfiprintf_r+0x164>
   16950:	ab05      	add	r3, sp, #20
   16952:	9300      	str	r3, [sp, #0]
   16954:	003a      	movs	r2, r7
   16956:	4b11      	ldr	r3, [pc, #68]	; (1699c <_svfiprintf_r+0x204>)
   16958:	0029      	movs	r1, r5
   1695a:	9802      	ldr	r0, [sp, #8]
   1695c:	e000      	b.n	16960 <_svfiprintf_r+0x1c8>
   1695e:	bf00      	nop
   16960:	9003      	str	r0, [sp, #12]
   16962:	9b03      	ldr	r3, [sp, #12]
   16964:	3301      	adds	r3, #1
   16966:	d1cc      	bne.n	16902 <_svfiprintf_r+0x16a>
   16968:	89bb      	ldrh	r3, [r7, #12]
   1696a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1696c:	065b      	lsls	r3, r3, #25
   1696e:	d400      	bmi.n	16972 <_svfiprintf_r+0x1da>
   16970:	e729      	b.n	167c6 <_svfiprintf_r+0x2e>
   16972:	2001      	movs	r0, #1
   16974:	4240      	negs	r0, r0
   16976:	e726      	b.n	167c6 <_svfiprintf_r+0x2e>
   16978:	ab05      	add	r3, sp, #20
   1697a:	9300      	str	r3, [sp, #0]
   1697c:	003a      	movs	r2, r7
   1697e:	4b07      	ldr	r3, [pc, #28]	; (1699c <_svfiprintf_r+0x204>)
   16980:	0029      	movs	r1, r5
   16982:	9802      	ldr	r0, [sp, #8]
   16984:	f7fe ffde 	bl	15944 <_printf_i>
   16988:	e7ea      	b.n	16960 <_svfiprintf_r+0x1c8>
   1698a:	46c0      	nop			; (mov r8, r8)
   1698c:	00017d44 	.word	0x00017d44
   16990:	00017d4a 	.word	0x00017d4a
   16994:	00017d4e 	.word	0x00017d4e
   16998:	00000000 	.word	0x00000000
   1699c:	000166d5 	.word	0x000166d5

000169a0 <_putc_r>:
   169a0:	b570      	push	{r4, r5, r6, lr}
   169a2:	0006      	movs	r6, r0
   169a4:	000d      	movs	r5, r1
   169a6:	0014      	movs	r4, r2
   169a8:	2800      	cmp	r0, #0
   169aa:	d004      	beq.n	169b6 <_putc_r+0x16>
   169ac:	6983      	ldr	r3, [r0, #24]
   169ae:	2b00      	cmp	r3, #0
   169b0:	d101      	bne.n	169b6 <_putc_r+0x16>
   169b2:	f7ff fc97 	bl	162e4 <__sinit>
   169b6:	4b12      	ldr	r3, [pc, #72]	; (16a00 <_putc_r+0x60>)
   169b8:	429c      	cmp	r4, r3
   169ba:	d111      	bne.n	169e0 <_putc_r+0x40>
   169bc:	6874      	ldr	r4, [r6, #4]
   169be:	68a3      	ldr	r3, [r4, #8]
   169c0:	3b01      	subs	r3, #1
   169c2:	60a3      	str	r3, [r4, #8]
   169c4:	2b00      	cmp	r3, #0
   169c6:	da05      	bge.n	169d4 <_putc_r+0x34>
   169c8:	69a2      	ldr	r2, [r4, #24]
   169ca:	4293      	cmp	r3, r2
   169cc:	db12      	blt.n	169f4 <_putc_r+0x54>
   169ce:	b2eb      	uxtb	r3, r5
   169d0:	2b0a      	cmp	r3, #10
   169d2:	d00f      	beq.n	169f4 <_putc_r+0x54>
   169d4:	6823      	ldr	r3, [r4, #0]
   169d6:	b2e8      	uxtb	r0, r5
   169d8:	1c5a      	adds	r2, r3, #1
   169da:	6022      	str	r2, [r4, #0]
   169dc:	701d      	strb	r5, [r3, #0]
   169de:	bd70      	pop	{r4, r5, r6, pc}
   169e0:	4b08      	ldr	r3, [pc, #32]	; (16a04 <_putc_r+0x64>)
   169e2:	429c      	cmp	r4, r3
   169e4:	d101      	bne.n	169ea <_putc_r+0x4a>
   169e6:	68b4      	ldr	r4, [r6, #8]
   169e8:	e7e9      	b.n	169be <_putc_r+0x1e>
   169ea:	4b07      	ldr	r3, [pc, #28]	; (16a08 <_putc_r+0x68>)
   169ec:	429c      	cmp	r4, r3
   169ee:	d1e6      	bne.n	169be <_putc_r+0x1e>
   169f0:	68f4      	ldr	r4, [r6, #12]
   169f2:	e7e4      	b.n	169be <_putc_r+0x1e>
   169f4:	0022      	movs	r2, r4
   169f6:	0029      	movs	r1, r5
   169f8:	0030      	movs	r0, r6
   169fa:	f7ff faa7 	bl	15f4c <__swbuf_r>
   169fe:	e7ee      	b.n	169de <_putc_r+0x3e>
   16a00:	00017d98 	.word	0x00017d98
   16a04:	00017db8 	.word	0x00017db8
   16a08:	00017d78 	.word	0x00017d78

00016a0c <_sbrk_r>:
   16a0c:	2300      	movs	r3, #0
   16a0e:	b570      	push	{r4, r5, r6, lr}
   16a10:	4c06      	ldr	r4, [pc, #24]	; (16a2c <_sbrk_r+0x20>)
   16a12:	0005      	movs	r5, r0
   16a14:	0008      	movs	r0, r1
   16a16:	6023      	str	r3, [r4, #0]
   16a18:	f7f0 fee4 	bl	77e4 <_sbrk>
   16a1c:	1c43      	adds	r3, r0, #1
   16a1e:	d103      	bne.n	16a28 <_sbrk_r+0x1c>
   16a20:	6823      	ldr	r3, [r4, #0]
   16a22:	2b00      	cmp	r3, #0
   16a24:	d000      	beq.n	16a28 <_sbrk_r+0x1c>
   16a26:	602b      	str	r3, [r5, #0]
   16a28:	bd70      	pop	{r4, r5, r6, pc}
   16a2a:	46c0      	nop			; (mov r8, r8)
   16a2c:	200033c4 	.word	0x200033c4

00016a30 <_raise_r>:
   16a30:	b570      	push	{r4, r5, r6, lr}
   16a32:	0004      	movs	r4, r0
   16a34:	000d      	movs	r5, r1
   16a36:	291f      	cmp	r1, #31
   16a38:	d904      	bls.n	16a44 <_raise_r+0x14>
   16a3a:	2316      	movs	r3, #22
   16a3c:	6003      	str	r3, [r0, #0]
   16a3e:	2001      	movs	r0, #1
   16a40:	4240      	negs	r0, r0
   16a42:	bd70      	pop	{r4, r5, r6, pc}
   16a44:	6c43      	ldr	r3, [r0, #68]	; 0x44
   16a46:	2b00      	cmp	r3, #0
   16a48:	d004      	beq.n	16a54 <_raise_r+0x24>
   16a4a:	008a      	lsls	r2, r1, #2
   16a4c:	189b      	adds	r3, r3, r2
   16a4e:	681a      	ldr	r2, [r3, #0]
   16a50:	2a00      	cmp	r2, #0
   16a52:	d108      	bne.n	16a66 <_raise_r+0x36>
   16a54:	0020      	movs	r0, r4
   16a56:	f000 f831 	bl	16abc <_getpid_r>
   16a5a:	002a      	movs	r2, r5
   16a5c:	0001      	movs	r1, r0
   16a5e:	0020      	movs	r0, r4
   16a60:	f000 f81a 	bl	16a98 <_kill_r>
   16a64:	e7ed      	b.n	16a42 <_raise_r+0x12>
   16a66:	2000      	movs	r0, #0
   16a68:	2a01      	cmp	r2, #1
   16a6a:	d0ea      	beq.n	16a42 <_raise_r+0x12>
   16a6c:	1c51      	adds	r1, r2, #1
   16a6e:	d103      	bne.n	16a78 <_raise_r+0x48>
   16a70:	2316      	movs	r3, #22
   16a72:	3001      	adds	r0, #1
   16a74:	6023      	str	r3, [r4, #0]
   16a76:	e7e4      	b.n	16a42 <_raise_r+0x12>
   16a78:	2400      	movs	r4, #0
   16a7a:	0028      	movs	r0, r5
   16a7c:	601c      	str	r4, [r3, #0]
   16a7e:	4790      	blx	r2
   16a80:	0020      	movs	r0, r4
   16a82:	e7de      	b.n	16a42 <_raise_r+0x12>

00016a84 <raise>:
   16a84:	b510      	push	{r4, lr}
   16a86:	4b03      	ldr	r3, [pc, #12]	; (16a94 <raise+0x10>)
   16a88:	0001      	movs	r1, r0
   16a8a:	6818      	ldr	r0, [r3, #0]
   16a8c:	f7ff ffd0 	bl	16a30 <_raise_r>
   16a90:	bd10      	pop	{r4, pc}
   16a92:	46c0      	nop			; (mov r8, r8)
   16a94:	2000002c 	.word	0x2000002c

00016a98 <_kill_r>:
   16a98:	2300      	movs	r3, #0
   16a9a:	b570      	push	{r4, r5, r6, lr}
   16a9c:	4c06      	ldr	r4, [pc, #24]	; (16ab8 <_kill_r+0x20>)
   16a9e:	0005      	movs	r5, r0
   16aa0:	0008      	movs	r0, r1
   16aa2:	0011      	movs	r1, r2
   16aa4:	6023      	str	r3, [r4, #0]
   16aa6:	f7f0 febd 	bl	7824 <_kill>
   16aaa:	1c43      	adds	r3, r0, #1
   16aac:	d103      	bne.n	16ab6 <_kill_r+0x1e>
   16aae:	6823      	ldr	r3, [r4, #0]
   16ab0:	2b00      	cmp	r3, #0
   16ab2:	d000      	beq.n	16ab6 <_kill_r+0x1e>
   16ab4:	602b      	str	r3, [r5, #0]
   16ab6:	bd70      	pop	{r4, r5, r6, pc}
   16ab8:	200033c4 	.word	0x200033c4

00016abc <_getpid_r>:
   16abc:	b510      	push	{r4, lr}
   16abe:	f7f0 feb2 	bl	7826 <_getpid>
   16ac2:	bd10      	pop	{r4, pc}

00016ac4 <__sread>:
   16ac4:	b570      	push	{r4, r5, r6, lr}
   16ac6:	000c      	movs	r4, r1
   16ac8:	250e      	movs	r5, #14
   16aca:	5f49      	ldrsh	r1, [r1, r5]
   16acc:	f000 f8ae 	bl	16c2c <_read_r>
   16ad0:	2800      	cmp	r0, #0
   16ad2:	db03      	blt.n	16adc <__sread+0x18>
   16ad4:	6d63      	ldr	r3, [r4, #84]	; 0x54
   16ad6:	181b      	adds	r3, r3, r0
   16ad8:	6563      	str	r3, [r4, #84]	; 0x54
   16ada:	bd70      	pop	{r4, r5, r6, pc}
   16adc:	89a3      	ldrh	r3, [r4, #12]
   16ade:	4a02      	ldr	r2, [pc, #8]	; (16ae8 <__sread+0x24>)
   16ae0:	4013      	ands	r3, r2
   16ae2:	81a3      	strh	r3, [r4, #12]
   16ae4:	e7f9      	b.n	16ada <__sread+0x16>
   16ae6:	46c0      	nop			; (mov r8, r8)
   16ae8:	ffffefff 	.word	0xffffefff

00016aec <__swrite>:
   16aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16aee:	001f      	movs	r7, r3
   16af0:	898b      	ldrh	r3, [r1, #12]
   16af2:	0005      	movs	r5, r0
   16af4:	000c      	movs	r4, r1
   16af6:	0016      	movs	r6, r2
   16af8:	05db      	lsls	r3, r3, #23
   16afa:	d505      	bpl.n	16b08 <__swrite+0x1c>
   16afc:	230e      	movs	r3, #14
   16afe:	5ec9      	ldrsh	r1, [r1, r3]
   16b00:	2200      	movs	r2, #0
   16b02:	2302      	movs	r3, #2
   16b04:	f000 f874 	bl	16bf0 <_lseek_r>
   16b08:	89a3      	ldrh	r3, [r4, #12]
   16b0a:	4a05      	ldr	r2, [pc, #20]	; (16b20 <__swrite+0x34>)
   16b0c:	0028      	movs	r0, r5
   16b0e:	4013      	ands	r3, r2
   16b10:	81a3      	strh	r3, [r4, #12]
   16b12:	0032      	movs	r2, r6
   16b14:	230e      	movs	r3, #14
   16b16:	5ee1      	ldrsh	r1, [r4, r3]
   16b18:	003b      	movs	r3, r7
   16b1a:	f000 f81f 	bl	16b5c <_write_r>
   16b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16b20:	ffffefff 	.word	0xffffefff

00016b24 <__sseek>:
   16b24:	b570      	push	{r4, r5, r6, lr}
   16b26:	000c      	movs	r4, r1
   16b28:	250e      	movs	r5, #14
   16b2a:	5f49      	ldrsh	r1, [r1, r5]
   16b2c:	f000 f860 	bl	16bf0 <_lseek_r>
   16b30:	89a3      	ldrh	r3, [r4, #12]
   16b32:	1c42      	adds	r2, r0, #1
   16b34:	d103      	bne.n	16b3e <__sseek+0x1a>
   16b36:	4a05      	ldr	r2, [pc, #20]	; (16b4c <__sseek+0x28>)
   16b38:	4013      	ands	r3, r2
   16b3a:	81a3      	strh	r3, [r4, #12]
   16b3c:	bd70      	pop	{r4, r5, r6, pc}
   16b3e:	2280      	movs	r2, #128	; 0x80
   16b40:	0152      	lsls	r2, r2, #5
   16b42:	4313      	orrs	r3, r2
   16b44:	81a3      	strh	r3, [r4, #12]
   16b46:	6560      	str	r0, [r4, #84]	; 0x54
   16b48:	e7f8      	b.n	16b3c <__sseek+0x18>
   16b4a:	46c0      	nop			; (mov r8, r8)
   16b4c:	ffffefff 	.word	0xffffefff

00016b50 <__sclose>:
   16b50:	b510      	push	{r4, lr}
   16b52:	230e      	movs	r3, #14
   16b54:	5ec9      	ldrsh	r1, [r1, r3]
   16b56:	f000 f815 	bl	16b84 <_close_r>
   16b5a:	bd10      	pop	{r4, pc}

00016b5c <_write_r>:
   16b5c:	b570      	push	{r4, r5, r6, lr}
   16b5e:	0005      	movs	r5, r0
   16b60:	0008      	movs	r0, r1
   16b62:	0011      	movs	r1, r2
   16b64:	2200      	movs	r2, #0
   16b66:	4c06      	ldr	r4, [pc, #24]	; (16b80 <_write_r+0x24>)
   16b68:	6022      	str	r2, [r4, #0]
   16b6a:	001a      	movs	r2, r3
   16b6c:	f7f0 fe12 	bl	7794 <_write>
   16b70:	1c43      	adds	r3, r0, #1
   16b72:	d103      	bne.n	16b7c <_write_r+0x20>
   16b74:	6823      	ldr	r3, [r4, #0]
   16b76:	2b00      	cmp	r3, #0
   16b78:	d000      	beq.n	16b7c <_write_r+0x20>
   16b7a:	602b      	str	r3, [r5, #0]
   16b7c:	bd70      	pop	{r4, r5, r6, pc}
   16b7e:	46c0      	nop			; (mov r8, r8)
   16b80:	200033c4 	.word	0x200033c4

00016b84 <_close_r>:
   16b84:	2300      	movs	r3, #0
   16b86:	b570      	push	{r4, r5, r6, lr}
   16b88:	4c06      	ldr	r4, [pc, #24]	; (16ba4 <_close_r+0x20>)
   16b8a:	0005      	movs	r5, r0
   16b8c:	0008      	movs	r0, r1
   16b8e:	6023      	str	r3, [r4, #0]
   16b90:	f7f0 fe3a 	bl	7808 <_close>
   16b94:	1c43      	adds	r3, r0, #1
   16b96:	d103      	bne.n	16ba0 <_close_r+0x1c>
   16b98:	6823      	ldr	r3, [r4, #0]
   16b9a:	2b00      	cmp	r3, #0
   16b9c:	d000      	beq.n	16ba0 <_close_r+0x1c>
   16b9e:	602b      	str	r3, [r5, #0]
   16ba0:	bd70      	pop	{r4, r5, r6, pc}
   16ba2:	46c0      	nop			; (mov r8, r8)
   16ba4:	200033c4 	.word	0x200033c4

00016ba8 <_fstat_r>:
   16ba8:	2300      	movs	r3, #0
   16baa:	b570      	push	{r4, r5, r6, lr}
   16bac:	4c06      	ldr	r4, [pc, #24]	; (16bc8 <_fstat_r+0x20>)
   16bae:	0005      	movs	r5, r0
   16bb0:	0008      	movs	r0, r1
   16bb2:	0011      	movs	r1, r2
   16bb4:	6023      	str	r3, [r4, #0]
   16bb6:	f7f0 fe2a 	bl	780e <_fstat>
   16bba:	1c43      	adds	r3, r0, #1
   16bbc:	d103      	bne.n	16bc6 <_fstat_r+0x1e>
   16bbe:	6823      	ldr	r3, [r4, #0]
   16bc0:	2b00      	cmp	r3, #0
   16bc2:	d000      	beq.n	16bc6 <_fstat_r+0x1e>
   16bc4:	602b      	str	r3, [r5, #0]
   16bc6:	bd70      	pop	{r4, r5, r6, pc}
   16bc8:	200033c4 	.word	0x200033c4

00016bcc <_isatty_r>:
   16bcc:	2300      	movs	r3, #0
   16bce:	b570      	push	{r4, r5, r6, lr}
   16bd0:	4c06      	ldr	r4, [pc, #24]	; (16bec <_isatty_r+0x20>)
   16bd2:	0005      	movs	r5, r0
   16bd4:	0008      	movs	r0, r1
   16bd6:	6023      	str	r3, [r4, #0]
   16bd8:	f7f0 fe1e 	bl	7818 <_isatty>
   16bdc:	1c43      	adds	r3, r0, #1
   16bde:	d103      	bne.n	16be8 <_isatty_r+0x1c>
   16be0:	6823      	ldr	r3, [r4, #0]
   16be2:	2b00      	cmp	r3, #0
   16be4:	d000      	beq.n	16be8 <_isatty_r+0x1c>
   16be6:	602b      	str	r3, [r5, #0]
   16be8:	bd70      	pop	{r4, r5, r6, pc}
   16bea:	46c0      	nop			; (mov r8, r8)
   16bec:	200033c4 	.word	0x200033c4

00016bf0 <_lseek_r>:
   16bf0:	b570      	push	{r4, r5, r6, lr}
   16bf2:	0005      	movs	r5, r0
   16bf4:	0008      	movs	r0, r1
   16bf6:	0011      	movs	r1, r2
   16bf8:	2200      	movs	r2, #0
   16bfa:	4c06      	ldr	r4, [pc, #24]	; (16c14 <_lseek_r+0x24>)
   16bfc:	6022      	str	r2, [r4, #0]
   16bfe:	001a      	movs	r2, r3
   16c00:	f7f0 fe0c 	bl	781c <_lseek>
   16c04:	1c43      	adds	r3, r0, #1
   16c06:	d103      	bne.n	16c10 <_lseek_r+0x20>
   16c08:	6823      	ldr	r3, [r4, #0]
   16c0a:	2b00      	cmp	r3, #0
   16c0c:	d000      	beq.n	16c10 <_lseek_r+0x20>
   16c0e:	602b      	str	r3, [r5, #0]
   16c10:	bd70      	pop	{r4, r5, r6, pc}
   16c12:	46c0      	nop			; (mov r8, r8)
   16c14:	200033c4 	.word	0x200033c4

00016c18 <__malloc_lock>:
   16c18:	4770      	bx	lr

00016c1a <__malloc_unlock>:
   16c1a:	4770      	bx	lr

00016c1c <_malloc_usable_size_r>:
   16c1c:	1f0b      	subs	r3, r1, #4
   16c1e:	681b      	ldr	r3, [r3, #0]
   16c20:	1f18      	subs	r0, r3, #4
   16c22:	2b00      	cmp	r3, #0
   16c24:	da01      	bge.n	16c2a <_malloc_usable_size_r+0xe>
   16c26:	580b      	ldr	r3, [r1, r0]
   16c28:	18c0      	adds	r0, r0, r3
   16c2a:	4770      	bx	lr

00016c2c <_read_r>:
   16c2c:	b570      	push	{r4, r5, r6, lr}
   16c2e:	0005      	movs	r5, r0
   16c30:	0008      	movs	r0, r1
   16c32:	0011      	movs	r1, r2
   16c34:	2200      	movs	r2, #0
   16c36:	4c06      	ldr	r4, [pc, #24]	; (16c50 <_read_r+0x24>)
   16c38:	6022      	str	r2, [r4, #0]
   16c3a:	001a      	movs	r2, r3
   16c3c:	f7f0 fd88 	bl	7750 <_read>
   16c40:	1c43      	adds	r3, r0, #1
   16c42:	d103      	bne.n	16c4c <_read_r+0x20>
   16c44:	6823      	ldr	r3, [r4, #0]
   16c46:	2b00      	cmp	r3, #0
   16c48:	d000      	beq.n	16c4c <_read_r+0x20>
   16c4a:	602b      	str	r3, [r5, #0]
   16c4c:	bd70      	pop	{r4, r5, r6, pc}
   16c4e:	46c0      	nop			; (mov r8, r8)
   16c50:	200033c4 	.word	0x200033c4

00016c54 <sysfont_glyphs>:
   16c54:	00000000 20000000 20202020 50502000     .......     . PP
   16c64:	00000050 f8505000 5050f850 70a07820     P....PP.P.PP x.p
   16c74:	c020f028 402010c8 90601898 90a840a0     (. ... @..`..@..
   16c84:	40206068 00000000 40402010 40102040     h` @..... @@@ .@
   16c94:	10101020 50004020 5020f820 20200000      ... @.P . P..  
   16ca4:	002020f8 00000000 00402060 00f80000     .  .....` @.....
   16cb4:	00000000 60000000 10080060 00804020     .......``... @..
   16cc4:	a8988870 207088c8 20202060 88707020     p.....p `    pp.
   16cd4:	40201008 2010f8f8 70880810 90503010     .. @... ...p.0P.
   16ce4:	f81010f8 0808f080 40307088 8888f080     .........p0@....
   16cf4:	1008f870 40404020 70888870 70708888     p... @@@p..p..pp
   16d04:	08788888 60006010 60600060 60600000     ..x..`.``.``..``
   16d14:	40206000 40201008 00081020 f800f800     .` @.. @ .......
   16d24:	40800000 40201020 08887080 20002010     ...@ . @.p... . 
   16d34:	68088870 7070a8a8 f8888888 88f08888     p..h..pp........
   16d44:	8888f088 808870f0 70888080 888890e0     .....p.....p....
   16d54:	f8e09088 80f08080 80f8f880 8080e080     ................
   16d64:	80887080 70889880 f8888888 70888888     .p.....p.......p
   16d74:	20202020 10387020 90101010 a0908860          p8.....`...
   16d84:	8890a0c0 80808080 88f88080 8888a8d8     ................
   16d94:	88888888 8898a8c8 88887088 70888888     .........p.....p
   16da4:	f08888f0 70808080 a8888888 88f06890     .......p.....h..
   16db4:	90a0f088 80807888 f0080870 202020f8     .....x..p....   
   16dc4:	88202020 88888888 88887088 50888888        ......p.....P
   16dd4:	88888820 88d8a8a8 20508888 88888850      .........P P...
   16de4:	20205088 08f82020 80402010 202038f8     .P    ... @..8  
   16df4:	38202020 20408000 e0000810 20202020        8..@ ....    
   16e04:	5020e020 00000088 00000000 f8000000      . P............
   16e14:	00102040 00000000 78087000 80807888     @ .......p.x.x..
   16e24:	8888c8b0 700000f0 70888080 98680808     .......p...p..h.
   16e34:	00788888 f8887000 48307080 4040e040     ..x..p...p0H@.@@
   16e44:	78000040 30087888 c8b08080 20888888     @..x.x.0....... 
   16e54:	20206000 00107020 90101030 48404060     .`   p..0...`@@H
   16e64:	48506050 20202060 00702020 a8a8d000     P`PH`     p.....
   16e74:	00008888 8888c8b0 70000088 70888888     ...........p...p
   16e84:	88f00000 008080f0 78986800 00000808     .........h.x....
   16e94:	8080c8b0 70000080 f0087080 40e04040     .......p.p..@@.@
   16ea4:	00304840 88888800 00006898 50888888     @H0......h.....P
   16eb4:	88000020 50a8a888 50880000 00885020      ......P...P P..
   16ec4:	78888800 00007008 402010f8 202010f8     ...x.p.... @..  
   16ed4:	10202040 20202020 40202020 20102020     @  .       @  . 
   16ee4:	ffff4020 00004fd2 00004fd2 00004fae      @...O...O...O..
   16ef4:	00004fd2 00004fae 00004f94 00004f94     .O...O...O...O..
   16f04:	00004fd2 00004fd2 00004fd2 00004fd2     .O...O...O...O..
   16f14:	00004fd2 00004fd2 00004fd2 00004fd2     .O...O...O...O..
   16f24:	00004fd2 00004fd2 00004fd2 00004fd2     .O...O...O...O..
   16f34:	00004fd2 00004fd2 00004fd2 00004fd2     .O...O...O...O..
   16f44:	00004fd2 00004fd2 00004fd2 00004fae     .O...O...O...O..
   16f54:	00004fd2 00004fae 00004fd2 00004fd2     .O...O...O...O..
   16f64:	00004fd2 00004fd2 00004fd2 00004fd2     .O...O...O...O..
   16f74:	00004fd2 00004fd2 00004fd2 00004fd2     .O...O...O...O..
   16f84:	00004fd2 00004fd2 00004fd2 00004fd2     .O...O...O...O..
   16f94:	00004fd2 00004fd2 00004fd2 00004fd2     .O...O...O...O..
   16fa4:	00004fd2 00004fd2 00004fd2 00004fd2     .O...O...O...O..
   16fb4:	00004fd2 00004fd2 00004fd2 00004fd2     .O...O...O...O..
   16fc4:	00004fd2 00004fd2 00004fd2 00004fd2     .O...O...O...O..
   16fd4:	00004fd2 00004fd2 00004fd2 00004fd2     .O...O...O...O..
   16fe4:	00004fd2 00004fae 00004fae 00004fb6     .O...O...O...O..
   16ff4:	00004fb6 00004fb6 00004fb6 42000000     .O...O...O.....B
   17004:	42000400 42000800 42000c00 42001000     ...B...B...B...B
   17014:	43000400 00006a72 00006a6e 00006a6e     ...Crj..nj..nj..
   17024:	00006ad4 00006ad4 00006a88 00006a78     .j...j...j..xj..
   17034:	00006a8e 00006ac2 00006bf0 00006bd0     .j...j...k...k..
   17044:	00006bd0 00006c6a 00006be2 00006bfe     .k..jl...k...k..
   17054:	00006bd4 00006c0c 00006c4e 00006ca8     .k...l..Nl...l..
   17064:	00006cea 00006cea 00006cea 00006c9a     .l...l...l...l..
   17074:	00006cb6 00006c8c 00006cc4 00006cda     .l...l...l...l..
   17084:	000073e6 000074dc 000074e6 000074f0     .s...t...t...t..
   17094:	000074fa 0000752c 00007536 00007540     .t..,u..6u..@u..
   170a4:	0000754a 00007554 42002000 42002400     Ju..Tu... .B.$.B
   170b4:	42002800 42002c00 43000800 00000002     .(.B.,.B...C....
   170c4:	00000100 00000002 00000200 00000002     ................
   170d4:	00000400 00000002 00000800 00000003     ................
   170e4:	00000004 72420a0d 6364616f 20747361     ......Broadcast 
   170f4:	6c696146 000d6465 6f724220 61636461     Failed.. Broadca
   17104:	46207473 656c6961 ffff0064 6e6e6f43     st Failed...Conn
   17114:	69746365 5020676e 20726565 0a206e6f     ecting Peer on .
   17124:	61684320 6c656e6e 00000020 6f430a0d      Channel .....Co
   17134:	63656e6e 676e6974 65655020 6e6f2072     nnecting Peer on
   17144:	61684320 6c656e6e 00000020 00006425      Channel ...%d..
   17154:	6e6e6f43 65746365 65502064 6f207265     Connected Peer o
   17164:	200a206e 6e616843 206c656e 00000000     n . Channel ....
   17174:	6f430a0d 63656e6e 20646574 72656550     ..Connected Peer
   17184:	206e6f20 6e616843 206c656e ffffff00      on Channel ....
   17194:	65530a0d 7463656c 206e6f69 6320666f     ..Selection of c
   171a4:	6e6e6168 00206c65 20736920 20746f6e     hannel . is not 
   171b4:	70707573 6574726f 6e692064 72756320     supported in cur
   171c4:	746e6572 6e6f6320 75676966 69746172     rent configurati
   171d4:	0d2e6e6f ffffff00 706d6953 4c20656c     on......Simple L
   171e4:	2061526f 20503250 6f6d6544 206e6f20     oRa P2P Demo on 
   171f4:	4153200a 3433524d 646f4e20 00002065     . SAMR34 Node ..
   17204:	74530a0d 69747261 4e20676e 2065646f     ..Starting Node 
   17214:	666f2031 6d695320 20656c70 6f6d6544     1 of Simple Demo
   17224:	726f6620 526f4c20 32502061 74532050      for LoRa P2P St
   17234:	206b6361 002e2e2e 75460a0d 46206c6c     ack ......Full F
   17244:	74636e75 206e6f69 69766544 28206563     unction Device (
   17254:	29444646 65706f20 69746172 00736e6f     FFD) operations.
   17264:	20200a0d 52202020 72542046 63736e61     ..     RF Transc
   17274:	65766965 53203a72 32315f58 00003637     eiver: SX_1276..
   17284:	20200a0d 44202020 206f6d65 74736e49     ..     Demo Inst
   17294:	74637572 3a6e6f69 00000000 20200a0d     ruction:......  
   172a4:	20202020 20202020 20202020 20202020                     
   172b4:	50202020 7265776f 206e6f20 20656874        Power on the 
   172c4:	72616f62 6e752064 206c6974 2044454c     board until LED 
   172d4:	696c2031 73746867 00707520 20200a0d     1 lights up...  
   172e4:	20202020 20202020 20202020 20202020                     
   172f4:	74202020 6e69206f 61636964 63206574        to indicate c
   17304:	656e6e6f 6e697463 69772067 70206874     onnecting with p
   17314:	2e726565 00000000 20200a0d 20202020     eer.......      
   17324:	20202020 20202020 20202020 50202020                    P
   17334:	20687375 74747542 31206e6f 206f7420     ush Button 1 to 
   17344:	616f7262 73616364 656d2074 67617373     broadcast messag
   17354:	00002e65 20200a0d 20202020 20202020     e.....          
   17364:	20202020 20202020 4c202020 31204445                LED 1
   17374:	6c697720 6562206c 676f7420 64656c67      will be toggled
   17384:	6f707520 6572206e 76696563 20676e69      upon receiving 
   17394:	7373656d 73656761 0000202e 000d0a0d     messages. ......
   173a4:	75636553 20646572 00000000 616f7242     Secured ....Broa
   173b4:	73616364 61502074 74656b63 74697720     dcast Packet wit
   173c4:	53522068 00204953 63696e55 20747361     h RSSI .Unicast 
   173d4:	6b636150 77207465 20687469 49535352     Packet with RSSI
   173e4:	00000020 78323025 00000000 6f726620      ...%02x.... fro
   173f4:	0000206d 00007825 ff00203a 20205753     m ..%x..: ..SW  
   17404:	3a202020 6f724220 61636461 0a207473        : Broadcast .
   17414:	54545542 3a314e4f 696e5520 74736163     BUTTON1: Unicast
   17424:	ffffff00 6e550a0d 73616369 61462074     ......Unicast Fa
   17434:	64656c69 0000000d 696e5520 74736163     iled.... Unicast
   17444:	69614620 0064656c 6b636150 72207465      Failed.Packet r
   17454:	69656365 20646576 6d6f7266 68746f20     eceived from oth
   17464:	53207265 6372756f 41502065 4449204e     er Source PAN ID
   17474:	30203a20 25782578 000a0d78 7461440a      : 0x%x%x....Dat
   17484:	6f432061 7269666e 48203a6d 6c646e61     a Confirm: Handl
   17494:	25203a65 74732064 73757461 2064253a     e: %d status:%d 
   174a4:	ff000a0d 253a5753 2d643230 78323025     ....SW:%02d-%02x
   174b4:	78323025 78323025 55420a20 4e4f5454     %02x%02x .BUTTON
   174c4:	43203a31 676e6168 6f6e2065 ff006564     1: Change node..
   174d4:	6f430a0d 63656e6e 704f2074 74617265     ..Connect Operat
   174e4:	206e6f69 74617453 203a7375 00000000     ion Status: ....
   174f4:	000a6425 0944490a 69766544 41206563     %d...ID.Device A
   17504:	65726464 09207373 70614309 6c696261     ddress ..Capabil
   17514:	20797469 4e415009 20444920 61684309     ity .PAN ID .Cha
   17524:	6c656e6e 00000020 00000909 53200a0d     nnel ......... S
   17534:	206e6163 7265704f 6f697461 7453206e     can Operation St
   17544:	73757461 6425203a 76656420 20656369     atus: %d device 
   17554:	6e756f66 ffff0064 4d205854 61737365     found...TX Messa
   17564:	3a736567 20642520 2058520a 7373654d     ges: %d .RX Mess
   17574:	73656761 6425203a ffffff00 626d756e     ages: %d....numb
   17584:	664f7265 65747942 00000073 732f2e2e     erOfBytes...../s
   17594:	412f6372 742f4653 64726968 74726170     rc/ASF/thirdpart
   175a4:	69772f79 656c6572 4c2f7373 5f61526f     y/wireless/LoRa_
   175b4:	2f503250 76726573 73656369 7364702f     P2P/services/pds
   175c4:	6372732f 2f766e2f 764e5f44 0000632e     /src/nv/D_Nv.c..
   175d4:	72646461 20737365 44203d3c 5f564e5f     address <= D_NV_
   175e4:	4f4d454d 455f5952 0000444e 64646128     MEMORY_END..(add
   175f4:	73736572 6e202b20 65626d75 42664f72     ress + numberOfB
   17604:	73657479 3d3c2029 5f442820 4d5f564e     ytes) <= (D_NV_M
   17614:	524f4d45 4e455f59 202b2044 00295531     EMORY_END + 1U).
   17624:	66666f28 20746573 756e202b 7265626d     (offset + number
   17634:	7942664f 29736574 203d3c20 564e5f44     OfBytes) <= D_NV
   17644:	4345535f 5f524f54 455a4953 ffffff00     _SECTOR_SIZE....

00017654 <__func__.13289>:
   17654:	764e5f44 6165525f 6d495f64 ff006c70     D_Nv_Read_Impl..

00017664 <__func__.13302>:
   17664:	764e5f44 6972575f 495f6574 006c706d     D_Nv_Write_Impl.

00017674 <__func__.13314>:
   17674:	764e5f44 6172455f 65536573 726f7463     D_Nv_EraseSector
   17684:	706d495f ffff006c                       _Impl...

0001768c <__func__.13327>:
   1768c:	706d6f43 44657261 00617461 68636163     CompareData.cach
   1769c:	3d212065 4c554e20 ffff004c 736c6166     e != NULL...fals
   176ac:	ffff0065 646e6946 6d657449 68636143     e...FindItemCach
   176bc:	64692865 3d3d2029 4c554e20 0000004c     e(id) == NULL...
   176cc:	74695f73 6f436d65 20746e75 414d203c     s_itemCount < MA
   176dc:	54495f58 435f4d45 544e554f ffffff00     X_ITEM_COUNT....
   176ec:	68636163 6c3e2d65 42747361 6b636f6c     cache->lastBlock
   176fc:	203d2120 30307830 00003030 732f2e2e      != 0x0000..../s
   1770c:	412f6372 742f4653 64726968 74726170     rc/ASF/thirdpart
   1771c:	69772f79 656c6572 4c2f7373 5f61526f     y/wireless/LoRa_
   1772c:	2f503250 76726573 73656369 7364702f     P2P/services/pds
   1773c:	6372732f 2f766e2f 764e5f53 6d61532d     /src/nv/S_Nv-Sam
   1774c:	2e313252 ffff0063 20646928 30203d21     R21.c...(id != 0
   1775c:	26202975 69282026 203c2064 30467830     u) && (id < 0xF0
   1776c:	29753030 20262620 65746928 6e654c6d     00u) && (itemLen
   1777c:	20687467 4d203d3c 495f5841 5f4d4554     gth <= MAX_ITEM_
   1778c:	474e454c 00294854 21206469 7530203d     LENGTH).id != 0u
   1779c:	ffffff00 20646928 30203d21 26202975     ....(id != 0u) &
   177ac:	70282026 61746144 203d2120 4c4c554e     & (pData != NULL
   177bc:	ffff0029                                )...

000177c0 <__func__.13287>:
   177c0:	706d6f63 53746361 6f746365 6d695472     compactSectorTim
   177d0:	69467265 00646572                       erFired.

000177d8 <__func__.13323>:
   177d8:	646e6946 6d657449 68636143 ffff0065     FindItemCache...

000177e8 <__func__.13330>:
   177e8:	61657243 74496574 61436d65 00656863     CreateItemCache.

000177f8 <__func__.13450>:
   177f8:	706d6f43 53746361 6f746365 ffff0072     CompactSector...

00017808 <__func__.13470>:
   17808:	706d6f43 53746361 6f746365 4e664972     CompactSectorIfN
   17818:	65646565 ffff0064                       eeded...

00017820 <__func__.13477>:
   17820:	706d6f43 49746361 006d6574              CompactItem.

0001782c <__func__.13511>:
   1782c:	764e5f53 6574495f 696e496d 6d495f74     S_Nv_ItemInit_Im
   1783c:	ff006c70                                pl..

00017840 <__func__.13524>:
   17840:	764e5f53 6972575f 495f6574 006c706d     S_Nv_Write_Impl.

00017850 <__func__.13535>:
   17850:	764e5f53 6165525f 6d495f64 ff006c70     S_Nv_Read_Impl..

00017860 <__func__.13540>:
   17860:	764e5f53 6574495f 6e654c6d 5f687467     S_Nv_ItemLength_
   17870:	6c706d49 ffffff00 20553028 69203d21     Impl....(0U != i
   17880:	446d6574 72637365 6574692e 7a69536d     temDescr.itemSiz
   17890:	26202965 4e282026 204c4c55 69203d21     e) && (NULL != i
   178a0:	446d6574 72637365 6574692e 7461446d     temDescr.itemDat
   178b0:	00002961 732f2e2e 412f6372 742f4653     a)..../src/ASF/t
   178c0:	64726968 74726170 69772f79 656c6572     hirdparty/wirele
   178d0:	4c2f7373 5f61526f 2f503250 76726573     ss/LoRa_P2P/serv
   178e0:	73656369 7364702f 6372732f 2f6c772f     ices/pds/src/wl/
   178f0:	64506c77 74614473 72655361 2e726576     wlPdsDataServer.
   17900:	00000063 4e5f5328 65525f76 6e727574     c...(S_Nv_Return
   17910:	756c6156 69445f65 746f4e64 73697845     Value_DidNotExis
   17920:	3d3d2074 74657220 7c7c2029 5f532820     t == ret) || (S_
   17930:	525f764e 72757465 6c61566e 4f5f6575     Nv_ReturnValue_O
   17940:	3d3d206b 74657220 ffff0029              k == ret)...

0001794c <__func__.13202>:
   1794c:	53736470 65726f74 6d657449 6b736154     pdsStoreItemTask
   1795c:	646e6148 0072656c                       Handler.

00017964 <__func__.13222>:
   17964:	53736470 65726f74 6d657449 ffffff00     pdsStoreItem....
   17974:	20746572 53203d3d 5f764e5f 75746552     ret == S_Nv_Retu
   17984:	61566e72 5f65756c ff006b4f              rnValue_Ok..

00017990 <mySecurityKey>:
   17990:	03020100 07060504 0b0a0908 0f0e0d0c     ................
   179a0:	0000a6d0 0000a6e0 0000a6e6 0000a6ec     ................
   179b0:	0000a6f2 0000a6f8 0000a6fe 0000a704     ................
   179c0:	0000a70a 0000a710 0000a716 0000a71c     ................
   179d0:	0000a722 0000a728 0000a72e 0000a734     "...(.......4...
   179e0:	0000a73a 0000a740 0000a746 0000a74c     :...@...F...L...
   179f0:	0000a752 0000a758 0000a75e 0000a764     R...X...^...d...
   17a00:	0000a76a 0000a770 0000a8b4 0000a814     j...p...........
   17a10:	0000a894 0000a8b4 0000a894 0000a8b4     ................
   17a20:	0000a8b4 0000a8b4 0000a814 0000a8b4     ................
   17a30:	0000a8b4 0000a8b4 0000a8b4 0000a8b4     ................
   17a40:	0000a8b4 0000a8b4 0000a8dc 0a0d0a0d     ................
   17a50:	4120794d 65726464 203a7373 00007830     My Address: 0x..
   17a60:	41502020 3a44494e 00783020 68432020       PANID: 0x.  Ch
   17a70:	656e6e61 00203a6c 6f430a0d 63656e6e     annel: ...Connec
   17a80:	6e6f6974 65500920 6f4c7265 6441676e     tion .PeerLongAd
   17a90:	73657264 50092073 49726565 206f666e     dress .PeerInfo 
   17aa0:	4f785209 6174536e 31737574 0000000d     .RxOnStatus1....
   17ab0:	00090909 0000742f 0a0d0a0d 6e6e6f43     ..../t......Conn
   17ac0:	69746365 20206e6f 50202020 4c726565     ection     PeerL
   17ad0:	41676e6f 65726464 20207373 50202020     ongAddress     P
   17ae0:	49726565 096f666e 6e4f7852 74617453     eerInfo.RxOnStat
   17af0:	000d7375 20202020 20202020 20202020     us..            
   17b00:	00000020 20202020 ffffff00 63530a0d      ...    ......Sc
   17b10:	43206e61 6e6e6168 00206c65 41200a0d     an Channel ... A
   17b20:	54206b63 6f656d69 000d7475              ck Timeout..

00017b2c <taskHandlers>:
   17b2c:	0000d059 0000e5dd 0000dbd5 00009601     Y...............
   17b3c:	00007b25                                %{..

00017b40 <tc_interrupt_vectors.13447>:
   17b40:	00151211 ffffff00 00020028 20000028     ........(...(.. 
   17b50:	00000000 20433249 76616c53 6f4e2065     ....I2C Slave No
   17b60:	76412074 616c6961 00656c62 656d6954     t Available.Time
   17b70:	2074756f 00000031 656d6954 2074756f     out 1...Timeout 
   17b80:	00000032                                2...

00017b84 <lorawanHandlers>:
   17b84:	0000da89 0000d99d 0000db5d fffffffd     ........].......

00017b94 <radioTaskHandlers>:
   17b94:	0000f1d1 0000f2d1 0000eff1 0000e875     ............u...
   17ba4:	000120c1                                . ..

00017ba8 <FskSyncWordBuff>:
   17ba8:	01c194c1                                         ...

00017bab <macEndDevCmdReplyLen>:
   17bab:	02010201 01010203 0c0a0802                       .........

00017bb4 <maxEIRPTable>:
   17bb4:	0d0c0a08 1412100e 1b1a1815 24211e1d     ..............!$
   17bc4:	00012e2c 00012dfc 00012e0e 00012d50     ,....-......P-..
   17bd4:	00012e0e 00012df2 00012e0e 00012d50     .....-......P-..
   17be4:	00012dfc 00012dfc 00012df2 00012d50     .-...-...-..P-..
   17bf4:	00012d58 00012d58 00012d58 00012e14     X-..X-..X-......
   17c04:	00012dfc 00012dfc 00012dd0 00012eb4     .-...-...-......
   17c14:	00012dd0 00012df2 00012dd0 00012eb4     .-...-...-......
   17c24:	00012dfc 00012dfc 00012df2 00012eb4     .-...-...-......
   17c34:	00012d58 00012d58 00012d58 00012ebe     X-..X-..X-......
   17c44:	000131ac 000130fc 000130fc 000130fa     .1...0...0...0..
   17c54:	0001319e 0001319e 00013194 000130fa     .1...1...1...0..
   17c64:	0001319e 00013194 0001319e 000130fa     .1...1...1...0..
   17c74:	000131a4 000131a4 000131a4 00013234     .1...1...1..42..
   17c84:	00013f7c 00013f5e 00013f18 00013e36     |?..^?...?..6>..
   17c94:	00013f18 00013f50 00013f18 00013e36     .?..P?...?..6>..
   17ca4:	00013f5e 00013f5e 00013f50 00013e36     ^?..^?..P?..6>..
   17cb4:	00013e2e 00013e2e 00013e2e 00014194     .>...>...>...A..
   17cc4:	000145dc 0001449c 0001449c 00014498     .E...D...D...D..
   17cd4:	000145b4 000145b4 000145a6 00014498     .E...E...E...D..
   17ce4:	000145b4 000145a6 000145b4 00014498     .E...E...E...D..
   17cf4:	000145bc 000145bc 000145bc 000147c0     .E...E...E...G..
   17d04:	7566202c 6974636e 203a6e6f 73736100     , function: .ass
   17d14:	69747265 22206e6f 20227325 6c696166     ertion "%s" fail
   17d24:	203a6465 656c6966 73252220 6c202c22     ed: file "%s", l
   17d34:	20656e69 73256425 000a7325              ine %d%s%s..

00017d40 <_global_impure_ptr>:
   17d40:	20000030 2b302d23 6c680020 6665004c     0.. #-0+ .hlL.ef
   17d50:	47464567 32313000 36353433 41393837     gEFG.0123456789A
   17d60:	45444342 31300046 35343332 39383736     BCDEF.0123456789
   17d70:	64636261 ff006665                       abcdef..

00017d78 <__sf_fake_stderr>:
	...

00017d98 <__sf_fake_stdin>:
	...

00017db8 <__sf_fake_stdout>:
	...

00017dd8 <_init>:
   17dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17dda:	46c0      	nop			; (mov r8, r8)
   17ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   17dde:	bc08      	pop	{r3}
   17de0:	469e      	mov	lr, r3
   17de2:	4770      	bx	lr

00017de4 <__init_array_start>:
   17de4:	00004429 	.word	0x00004429

00017de8 <_fini>:
   17de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17dea:	46c0      	nop			; (mov r8, r8)
   17dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
   17dee:	bc08      	pop	{r3}
   17df0:	469e      	mov	lr, r3
   17df2:	4770      	bx	lr

00017df4 <__fini_array_start>:
   17df4:	00004401 	.word	0x00004401
